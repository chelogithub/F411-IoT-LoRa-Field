
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b4  0800a9b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9bc  0800a9bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ed4  20000068  0800aa2c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  0800aa2c  00022f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a1b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be2  00000000  00000000  00033af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7c  00000000  00000000  00037788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182d6  00000000  00000000  00038504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f64  00000000  00000000  000507da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009325e  00000000  00000000  0006573e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005290  00000000  00000000  000f899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000fdc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a35c 	.word	0x0800a35c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800a35c 	.word	0x0800a35c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db0a      	blt.n	80005b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	490c      	ldr	r1, [pc, #48]	; (80005d8 <__NVIC_SetPriority+0x4c>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	0112      	lsls	r2, r2, #4
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b4:	e00a      	b.n	80005cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <__NVIC_SetPriority+0x50>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	3b04      	subs	r3, #4
 80005c4:	0112      	lsls	r2, r2, #4
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	440b      	add	r3, r1
 80005ca:	761a      	strb	r2, [r3, #24]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005f0:	d301      	bcc.n	80005f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00f      	b.n	8000616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <SysTick_Config+0x40>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005fe:	210f      	movs	r1, #15
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f7ff ffc2 	bl	800058c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SysTick_Config+0x40>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <SysTick_Config+0x40>)
 8000610:	2207      	movs	r2, #7
 8000612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	e000e010 	.word	0xe000e010

08000624 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800062c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000630:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d013      	beq.n	8000664 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800063c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000640:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000644:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00b      	beq.n	8000664 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800064c:	e000      	b.n	8000650 <ITM_SendChar+0x2c>
    {
      __NOP();
 800064e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//
		ETH_DBG_EN=0;
 800067a:	4bd0      	ldr	r3, [pc, #832]	; (80009bc <main+0x348>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 8000680:	4bcf      	ldr	r3, [pc, #828]	; (80009c0 <main+0x34c>)
 8000682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000686:	22c0      	movs	r2, #192	; 0xc0
 8000688:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 800068a:	4bcd      	ldr	r3, [pc, #820]	; (80009c0 <main+0x34c>)
 800068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000690:	22a8      	movs	r2, #168	; 0xa8
 8000692:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 8000694:	4bca      	ldr	r3, [pc, #808]	; (80009c0 <main+0x34c>)
 8000696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800069a:	2200      	movs	r2, #0
 800069c:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 800069e:	4bc8      	ldr	r3, [pc, #800]	; (80009c0 <main+0x34c>)
 80006a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a4:	2201      	movs	r2, #1
 80006a6:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006a8:	4bc5      	ldr	r3, [pc, #788]	; (80009c0 <main+0x34c>)
 80006aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006b4:	4bc2      	ldr	r3, [pc, #776]	; (80009c0 <main+0x34c>)
 80006b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006c0:	4bbf      	ldr	r3, [pc, #764]	; (80009c0 <main+0x34c>)
 80006c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006cc:	4bbc      	ldr	r3, [pc, #752]	; (80009c0 <main+0x34c>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006d8:	4bb9      	ldr	r3, [pc, #740]	; (80009c0 <main+0x34c>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 80006e4:	4bb6      	ldr	r3, [pc, #728]	; (80009c0 <main+0x34c>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	2208      	movs	r2, #8
 80006ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 80006f0:	4bb3      	ldr	r3, [pc, #716]	; (80009c0 <main+0x34c>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	22dc      	movs	r2, #220	; 0xdc
 80006f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 80006fc:	4bb0      	ldr	r3, [pc, #704]	; (80009c0 <main+0x34c>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000708:	4bad      	ldr	r3, [pc, #692]	; (80009c0 <main+0x34c>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000714:	4baa      	ldr	r3, [pc, #680]	; (80009c0 <main+0x34c>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	2201      	movs	r2, #1
 800071c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000720:	4ba7      	ldr	r3, [pc, #668]	; (80009c0 <main+0x34c>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	22c0      	movs	r2, #192	; 0xc0
 8000728:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 800072c:	4ba4      	ldr	r3, [pc, #656]	; (80009c0 <main+0x34c>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	22a8      	movs	r2, #168	; 0xa8
 8000734:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000738:	4ba1      	ldr	r3, [pc, #644]	; (80009c0 <main+0x34c>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2200      	movs	r2, #0
 8000740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000744:	4b9e      	ldr	r3, [pc, #632]	; (80009c0 <main+0x34c>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	2206      	movs	r2, #6
 800074c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000750:	4b9b      	ldr	r3, [pc, #620]	; (80009c0 <main+0x34c>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	2255      	movs	r2, #85	; 0x55
 8000758:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 800075c:	4b98      	ldr	r3, [pc, #608]	; (80009c0 <main+0x34c>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2255      	movs	r2, #85	; 0x55
 8000764:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000768:	4b95      	ldr	r3, [pc, #596]	; (80009c0 <main+0x34c>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2201      	movs	r2, #1
 8000770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000774:	4b92      	ldr	r3, [pc, #584]	; (80009c0 <main+0x34c>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	22f6      	movs	r2, #246	; 0xf6
 800077c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 8000780:	4b8f      	ldr	r3, [pc, #572]	; (80009c0 <main+0x34c>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	22c0      	movs	r2, #192	; 0xc0
 8000788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 800078c:	4b8c      	ldr	r3, [pc, #560]	; (80009c0 <main+0x34c>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	22a8      	movs	r2, #168	; 0xa8
 8000794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 8000798:	4b89      	ldr	r3, [pc, #548]	; (80009c0 <main+0x34c>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007a4:	4b86      	ldr	r3, [pc, #536]	; (80009c0 <main+0x34c>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	2203      	movs	r2, #3
 80007ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007b0:	4b83      	ldr	r3, [pc, #524]	; (80009c0 <main+0x34c>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	2201      	movs	r2, #1
 80007b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007bc:	4b80      	ldr	r3, [pc, #512]	; (80009c0 <main+0x34c>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	22f6      	movs	r2, #246	; 0xf6
 80007c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007c8:	4b7d      	ldr	r3, [pc, #500]	; (80009c0 <main+0x34c>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007d6:	4b7a      	ldr	r3, [pc, #488]	; (80009c0 <main+0x34c>)
 80007d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 80007e4:	4b76      	ldr	r3, [pc, #472]	; (80009c0 <main+0x34c>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 80007ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 80007f2:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <main+0x34c>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 8000800:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <main+0x34c>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800080a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800080e:	4b6c      	ldr	r3, [pc, #432]	; (80009c0 <main+0x34c>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 800081c:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <main+0x34c>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000826:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 800082a:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <main+0x34c>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000838:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <main+0x34c>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000846:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <main+0x34c>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000854:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <main+0x34c>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800085e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000862:	4b57      	ldr	r3, [pc, #348]	; (80009c0 <main+0x34c>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000870:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <main+0x34c>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800087a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <main+0x34c>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 800088c:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <main+0x34c>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 8000896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <main+0x34c>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008a8:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <main+0x34c>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//

		spi_no_debug=1;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <main+0x350>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <main+0x34c>)
 80008bc:	4a42      	ldr	r2, [pc, #264]	; (80009c8 <main+0x354>)
 80008be:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008c0:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <main+0x34c>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <main+0x34c>)
 80008c8:	4a40      	ldr	r2, [pc, #256]	; (80009cc <main+0x358>)
 80008ca:	601a      	str	r2, [r3, #0]

		// ----------- FIN - Seteo de módulo Ethernet W5100 ----------- //

		 //----------------------- WIFI ------------------------//
			decimal[0]=1;
 80008cc:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <main+0x35c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
			decimal[1]=1;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <main+0x35c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	705a      	strb	r2, [r3, #1]
			decimal[2]=1;
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <main+0x35c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	709a      	strb	r2, [r3, #2]
			decimal[3]=0;
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <main+0x35c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	70da      	strb	r2, [r3, #3]
			decimal[4]=1;
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <main+0x35c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	711a      	strb	r2, [r3, #4]
			decimal[5]=1;
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <main+0x35c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	715a      	strb	r2, [r3, #5]
			decimal[6]=1;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <main+0x35c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	719a      	strb	r2, [r3, #6]
			decimal[7]=1;
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <main+0x35c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	71da      	strb	r2, [r3, #7]
			decimal[8]=1;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <main+0x35c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	721a      	strb	r2, [r3, #8]
			decimal[9]=1;
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <main+0x35c>)
 8000904:	2201      	movs	r2, #1
 8000906:	725a      	strb	r2, [r3, #9]
			decimal[10]=1;
 8000908:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <main+0x35c>)
 800090a:	2201      	movs	r2, #1
 800090c:	729a      	strb	r2, [r3, #10]
			decimal[11]=1;
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <main+0x35c>)
 8000910:	2201      	movs	r2, #1
 8000912:	72da      	strb	r2, [r3, #11]
			decimal[12]=1;
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <main+0x35c>)
 8000916:	2201      	movs	r2, #1
 8000918:	731a      	strb	r2, [r3, #12]
			decimal[13]=1;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <main+0x35c>)
 800091c:	2201      	movs	r2, #1
 800091e:	735a      	strb	r2, [r3, #13]
			decimal[14]=1;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <main+0x35c>)
 8000922:	2201      	movs	r2, #1
 8000924:	739a      	strb	r2, [r3, #14]
			decimal[15]=1;
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <main+0x35c>)
 8000928:	2201      	movs	r2, #1
 800092a:	73da      	strb	r2, [r3, #15]
			decimal[16]=1;
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <main+0x35c>)
 800092e:	2201      	movs	r2, #1
 8000930:	741a      	strb	r2, [r3, #16]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000932:	4828      	ldr	r0, [pc, #160]	; (80009d4 <main+0x360>)
 8000934:	f005 fed6 	bl	80066e4 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <main+0x360>)
 800093a:	2200      	movs	r2, #0
 800093c:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <main+0x364>)
 8000940:	f005 fed0 	bl	80066e4 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <main+0x364>)
 8000946:	2200      	movs	r2, #0
 8000948:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 800094a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800094e:	2103      	movs	r1, #3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <main+0x364>)
 8000952:	f005 ff6a 	bl	800682a <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f001 fcb7 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f911 	bl	8000b80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x368>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <main+0x36c>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	099b      	lsrs	r3, r3, #6
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe38 	bl	80005e0 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 fb18 	bl	8000fa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000974:	f000 f96c 	bl	8000c50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000978:	f000 fa96 	bl	8000ea8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800097c:	f000 fabe 	bl	8000efc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000980:	f000 fae6 	bl	8000f50 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000984:	f000 f99a 	bl	8000cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000988:	f000 fa12 	bl	8000db0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2102      	movs	r1, #2
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <main+0x354>)
 8000992:	f002 f96d 	bl	8002c70 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000996:	210e      	movs	r1, #14
 8000998:	4812      	ldr	r0, [pc, #72]	; (80009e4 <main+0x370>)
 800099a:	f000 fb8b 	bl	80010b4 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800099e:	2201      	movs	r2, #1
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <main+0x374>)
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <main+0x378>)
 80009a4:	f004 f9fb 	bl	8004d9e <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4911      	ldr	r1, [pc, #68]	; (80009f0 <main+0x37c>)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <main+0x380>)
 80009ae:	f004 f9f6 	bl	8004d9e <HAL_UART_Receive_IT>
     if (ETH_DBG_EN == 1)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 80009b2:	4b02      	ldr	r3, [pc, #8]	; (80009bc <main+0x348>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d122      	bne.n	8000a00 <main+0x38c>
 80009ba:	e01d      	b.n	80009f8 <main+0x384>
 80009bc:	20002de4 	.word	0x20002de4
 80009c0:	200016dc 	.word	0x200016dc
 80009c4:	20002798 	.word	0x20002798
 80009c8:	40020000 	.word	0x40020000
 80009cc:	20000084 	.word	0x20000084
 80009d0:	20002744 	.word	0x20002744
 80009d4:	20000a3c 	.word	0x20000a3c
 80009d8:	2000108c 	.word	0x2000108c
 80009dc:	20000000 	.word	0x20000000
 80009e0:	10624dd3 	.word	0x10624dd3
 80009e4:	0800a374 	.word	0x0800a374
 80009e8:	20002db8 	.word	0x20002db8
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	20002dbc 	.word	0x20002dbc
 80009f4:	200001b0 	.word	0x200001b0
 80009f8:	2112      	movs	r1, #18
 80009fa:	4854      	ldr	r0, [pc, #336]	; (8000b4c <main+0x4d8>)
 80009fc:	f000 fb5a 	bl	80010b4 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000a00:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <main+0x4dc>)
 8000a02:	22f0      	movs	r2, #240	; 0xf0
 8000a04:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <main+0x4dc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000a0c:	4b50      	ldr	r3, [pc, #320]	; (8000b50 <main+0x4dc>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <main+0x4dc>)
 8000a14:	22c0      	movs	r2, #192	; 0xc0
 8000a16:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000a18:	484d      	ldr	r0, [pc, #308]	; (8000b50 <main+0x4dc>)
 8000a1a:	f007 fb33 	bl	8008084 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	484b      	ldr	r0, [pc, #300]	; (8000b50 <main+0x4dc>)
 8000a22:	f007 fb85 	bl	8008130 <eth_socket_init>

   SPI_READ_EN=1;
 8000a26:	4b4b      	ldr	r3, [pc, #300]	; (8000b54 <main+0x4e0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <main+0x4dc>)
 8000a2e:	220f      	movs	r2, #15
 8000a30:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <main+0x4dc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <main+0x4dc>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <main+0x4dc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	75da      	strb	r2, [r3, #23]
     HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a48:	f001 fcb0 	bl	80023ac <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 8000a4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a50:	4841      	ldr	r0, [pc, #260]	; (8000b58 <main+0x4e4>)
 8000a52:	f005 f973 	bl	8005d3c <LoRa_set_sndTIMER>

    /* USER CODE BEGIN 3 */


// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000a56:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <main+0x4e8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d004      	beq.n	8000a68 <main+0x3f4>
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <main+0x4e4>)
 8000a60:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d1f6      	bne.n	8000a56 <main+0x3e2>
	  		{
	  			if(FLAG_UART2==1)
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <main+0x4e8>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <main+0x408>
	  				{
	  				FLAG_UART2=0;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <main+0x4e8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000a76:	4838      	ldr	r0, [pc, #224]	; (8000b58 <main+0x4e4>)
 8000a78:	f005 f97c 	bl	8005d74 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000a7c:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <main+0x4e4>)
 8000a7e:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d1e7      	bne.n	8000a56 <main+0x3e2>
	  				{
	  					lr.tmr_dly_ON=0;
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <main+0x4e4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000a8e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a92:	4831      	ldr	r0, [pc, #196]	; (8000b58 <main+0x4e4>)
 8000a94:	f005 f952 	bl	8005d3c <LoRa_set_sndTIMER>
						lr.dest_address[0]='\0';
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <main+0x4e4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <main+0x4e4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc


		  				lr.estado=_SENT;
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <main+0x4e4>)
 8000aa8:	2214      	movs	r2, #20
 8000aaa:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <main+0x4ec>)
 8000ab0:	f7ff fb96 	bl	80001e0 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <main+0x4ec>)
 8000aba:	4413      	add	r3, r2
 8000abc:	4929      	ldr	r1, [pc, #164]	; (8000b64 <main+0x4f0>)
 8000abe:	461a      	mov	r2, r3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000aca:	e02b      	b.n	8000b24 <main+0x4b0>
		  					{
			  					data[0]='\0';
 8000acc:	2300      	movs	r3, #0
 8000ace:	713b      	strb	r3, [r7, #4]
			  					//itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
			  					FTOA(ModBUS_F03_Read(&mb_eth,n),data,decimal[n]);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4824      	ldr	r0, [pc, #144]	; (8000b68 <main+0x4f4>)
 8000ad8:	f005 fed6 	bl	8006888 <ModBUS_F03_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <main+0x4f8>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	f008 f8ad 	bl	8008c4c <FTOA>
								strncat(lr.txbuff,data,strlen(data));
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb73 	bl	80001e0 <strlen>
 8000afa:	4602      	mov	r2, r0
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	; (8000b70 <main+0x4fc>)
 8000b02:	f008 fb6c 	bl	80091de <strncat>
								strncat(lr.txbuff,";",1);
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <main+0x4fc>)
 8000b08:	f7ff fb6a 	bl	80001e0 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <main+0x4fc>)
 8000b12:	4413      	add	r3, r2
 8000b14:	4917      	ldr	r1, [pc, #92]	; (8000b74 <main+0x500>)
 8000b16:	461a      	mov	r2, r3
 8000b18:	460b      	mov	r3, r1
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	8013      	strh	r3, [r2, #0]
								n++;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	ddd0      	ble.n	8000acc <main+0x458>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000b2a:	4811      	ldr	r0, [pc, #68]	; (8000b70 <main+0x4fc>)
 8000b2c:	f7ff fb58 	bl	80001e0 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <main+0x4e4>)
 8000b36:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000b3a:	490f      	ldr	r1, [pc, #60]	; (8000b78 <main+0x504>)
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <main+0x4e4>)
 8000b3e:	f005 f84f 	bl	8005be0 <LoRa_Send>
 8000b42:	4603      	mov	r3, r0
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <main+0x508>)
 8000b48:	701a      	strb	r2, [r3, #0]
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000b4a:	e784      	b.n	8000a56 <main+0x3e2>
 8000b4c:	0800a384 	.word	0x0800a384
 8000b50:	200016dc 	.word	0x200016dc
 8000b54:	2000279e 	.word	0x2000279e
 8000b58:	20000238 	.word	0x20000238
 8000b5c:	2000279d 	.word	0x2000279d
 8000b60:	2000024e 	.word	0x2000024e
 8000b64:	0800a398 	.word	0x0800a398
 8000b68:	20000a3c 	.word	0x20000a3c
 8000b6c:	20002744 	.word	0x20002744
 8000b70:	20000714 	.word	0x20000714
 8000b74:	0800a39c 	.word	0x0800a39c
 8000b78:	200001b0 	.word	0x200001b0
 8000b7c:	200027a1 	.word	0x200027a1

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fb1d 	bl	80091ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <SystemClock_Config+0xc8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <SystemClock_Config+0xc8>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <SystemClock_Config+0xc8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bf4:	2360      	movs	r3, #96	; 0x60
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f867 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f001 f846 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2103      	movs	r1, #3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fac9 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c3c:	f001 f830 	bl	8001ca0 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f002 fc71 	bl	8003588 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 fff8 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000084 	.word	0x20000084
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000cf6:	2264      	movs	r2, #100	; 0x64
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d02:	2264      	movs	r2, #100	; 0x64
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4826      	ldr	r0, [pc, #152]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d14:	f002 ff2e 	bl	8003b74 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d1e:	f000 ffbf 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481f      	ldr	r0, [pc, #124]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d30:	f003 fb36 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d3a:	f000 ffb1 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d40:	f002 ff67 	bl	8003c12 <HAL_TIM_OC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d4a:	f000 ffa9 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d52:	f003 f967 	bl	8004024 <HAL_TIM_OnePulse_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d5c:	f000 ffa0 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d70:	f003 fed2 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000d7a:	f000 ff91 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM2_Init+0xf0>)
 8000d96:	f003 faa7 	bl	80042e8 <HAL_TIM_OC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000da0:	f000 ff7e 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3738      	adds	r7, #56	; 0x38
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000dc 	.word	0x200000dc

08000db0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000de2:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <MX_TIM3_Init+0xf4>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000de8:	2264      	movs	r2, #100	; 0x64
 8000dea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000df4:	2296      	movs	r2, #150	; 0x96
 8000df6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e04:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e06:	f002 feb5 	bl	8003b74 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e10:	f000 ff46 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e22:	f003 fabd 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e2c:	f000 ff38 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e32:	f002 feee 	bl	8003c12 <HAL_TIM_OC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e3c:	f000 ff30 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e40:	2108      	movs	r1, #8
 8000e42:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e44:	f003 f8ee 	bl	8004024 <HAL_TIM_OnePulse_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000e4e:	f000 ff27 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e62:	f003 fe59 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000e6c:	f000 ff18 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000e70:	2320      	movs	r3, #32
 8000e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_TIM3_Init+0xf0>)
 8000e88:	f003 fa2e 	bl	80042e8 <HAL_TIM_OC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000e92:	f000 ff05 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3738      	adds	r7, #56	; 0x38
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000124 	.word	0x20000124
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART1_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f003 fe9c 	bl	8004c1c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 fed9 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000016c 	.word	0x2000016c
 8000ef8:	40011000 	.word	0x40011000

08000efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART2_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f003 fe72 	bl	8004c1c <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 feaf 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001b0 	.word	0x200001b0
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_USART6_UART_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_USART6_UART_Init+0x4c>)
 8000f88:	f003 fe48 	bl	8004c1c <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f92:	f000 fe85 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001f4 	.word	0x200001f4
 8000fa0:	40011400 	.word	0x40011400

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a39      	ldr	r2, [pc, #228]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <MX_GPIO_Init+0x104>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_GPIO_Init+0x104>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_GPIO_Init+0x104>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <MX_GPIO_Init+0x104>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_GPIO_Init+0x104>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	481e      	ldr	r0, [pc, #120]	; (80010ac <MX_GPIO_Init+0x108>)
 8001032:	f001 fe1d 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2102      	movs	r1, #2
 800103a:	481d      	ldr	r0, [pc, #116]	; (80010b0 <MX_GPIO_Init+0x10c>)
 800103c:	f001 fe18 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2110      	movs	r1, #16
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <MX_GPIO_Init+0x10c>)
 8001046:	f001 fe13 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <MX_GPIO_Init+0x108>)
 8001064:	f001 fb9c 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8001068:	f240 1301 	movw	r3, #257	; 0x101
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_GPIO_Init+0x10c>)
 800107e:	f001 fb8f 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8001082:	2312      	movs	r3, #18
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_GPIO_Init+0x10c>)
 800109a:	f001 fb81 	bl	80027a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000

080010b4 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e009      	b.n	80010d8 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff faa9 	bl	8000624 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf1      	blt.n	80010c4 <ITM0_Write+0x10>
  }
  return len;
 80010e0:	683b      	ldr	r3, [r7, #0]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <SysTick_Handler>:

void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 80010f2:	4bc0      	ldr	r3, [pc, #768]	; (80013f4 <SysTick_Handler+0x308>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4abe      	ldr	r2, [pc, #760]	; (80013f4 <SysTick_Handler+0x308>)
 80010fa:	6013      	str	r3, [r2, #0]

	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80010fc:	4bbe      	ldr	r3, [pc, #760]	; (80013f8 <SysTick_Handler+0x30c>)
 80010fe:	7a1b      	ldrb	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <SysTick_Handler+0x22>
 8001104:	4bbd      	ldr	r3, [pc, #756]	; (80013fc <SysTick_Handler+0x310>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4abc      	ldr	r2, [pc, #752]	; (80013fc <SysTick_Handler+0x310>)
 800110c:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800110e:	4bba      	ldr	r3, [pc, #744]	; (80013f8 <SysTick_Handler+0x30c>)
 8001110:	7a1b      	ldrb	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <SysTick_Handler+0x44>
 8001116:	4bb8      	ldr	r3, [pc, #736]	; (80013f8 <SysTick_Handler+0x30c>)
 8001118:	88db      	ldrh	r3, [r3, #6]
 800111a:	461a      	mov	r2, r3
 800111c:	4bb7      	ldr	r3, [pc, #732]	; (80013fc <SysTick_Handler+0x310>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	da05      	bge.n	8001130 <SysTick_Handler+0x44>
		{
			mb_eth._w_answer=0;
 8001124:	4bb4      	ldr	r3, [pc, #720]	; (80013f8 <SysTick_Handler+0x30c>)
 8001126:	2200      	movs	r2, #0
 8001128:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 800112a:	4bb4      	ldr	r3, [pc, #720]	; (80013fc <SysTick_Handler+0x310>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 8001130:	4bb3      	ldr	r3, [pc, #716]	; (8001400 <SysTick_Handler+0x314>)
 8001132:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001136:	2b01      	cmp	r3, #1
 8001138:	d116      	bne.n	8001168 <SysTick_Handler+0x7c>
	{
		lr.tmr_dlyCNT++;
 800113a:	4bb1      	ldr	r3, [pc, #708]	; (8001400 <SysTick_Handler+0x314>)
 800113c:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 8001140:	3301      	adds	r3, #1
 8001142:	4aaf      	ldr	r2, [pc, #700]	; (8001400 <SysTick_Handler+0x314>)
 8001144:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001148:	4bad      	ldr	r3, [pc, #692]	; (8001400 <SysTick_Handler+0x314>)
 800114a:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 800114e:	4bac      	ldr	r3, [pc, #688]	; (8001400 <SysTick_Handler+0x314>)
 8001150:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001154:	429a      	cmp	r2, r3
 8001156:	dd07      	ble.n	8001168 <SysTick_Handler+0x7c>
		{
			lr.tmr_dly_ON=1;
 8001158:	4ba9      	ldr	r3, [pc, #676]	; (8001400 <SysTick_Handler+0x314>)
 800115a:	2201      	movs	r2, #1
 800115c:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <SysTick_Handler+0x314>)
 8001162:	2200      	movs	r2, #0
 8001164:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
// ENVIO DATOS LoRa ---------------------------------------------------------------//


/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001168:	4ba6      	ldr	r3, [pc, #664]	; (8001404 <SysTick_Handler+0x318>)
 800116a:	7b9b      	ldrb	r3, [r3, #14]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10e      	bne.n	800118e <SysTick_Handler+0xa2>
	{
		ETH.ETH_WDG++;
 8001170:	4ba4      	ldr	r3, [pc, #656]	; (8001404 <SysTick_Handler+0x318>)
 8001172:	899b      	ldrh	r3, [r3, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	4ba2      	ldr	r3, [pc, #648]	; (8001404 <SysTick_Handler+0x318>)
 800117a:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800117c:	4ba1      	ldr	r3, [pc, #644]	; (8001404 <SysTick_Handler+0x318>)
 800117e:	899b      	ldrh	r3, [r3, #12]
 8001180:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001184:	d303      	bcc.n	800118e <SysTick_Handler+0xa2>
		{
			ETH.ETH_WDG=64000;
 8001186:	4b9f      	ldr	r3, [pc, #636]	; (8001404 <SysTick_Handler+0x318>)
 8001188:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800118c:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800118e:	4b99      	ldr	r3, [pc, #612]	; (80013f4 <SysTick_Handler+0x308>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	f040 83bb 	bne.w	800190e <SysTick_Handler+0x822>
  {
	  ms_ticks=0;
 8001198:	4b96      	ldr	r3, [pc, #600]	; (80013f4 <SysTick_Handler+0x308>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800119e:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <SysTick_Handler+0x31c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a98      	ldr	r2, [pc, #608]	; (8001408 <SysTick_Handler+0x31c>)
 80011a6:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ac:	4897      	ldr	r0, [pc, #604]	; (800140c <SysTick_Handler+0x320>)
 80011ae:	f001 fd78 	bl	8002ca2 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <SysTick_Handler+0x324>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8399 	beq.w	80018ee <SysTick_Handler+0x802>
	  	  {
	  if(SPI_READ_EN)
 80011bc:	4b95      	ldr	r3, [pc, #596]	; (8001414 <SysTick_Handler+0x328>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8398 	beq.w	80018f6 <SysTick_Handler+0x80a>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	488e      	ldr	r0, [pc, #568]	; (8001404 <SysTick_Handler+0x318>)
 80011ca:	f007 f809 	bl	80081e0 <eth_rd_SOCKET_STAT>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <SysTick_Handler+0x318>)
 80011d4:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 80011d6:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <SysTick_Handler+0x318>)
 80011d8:	7b9b      	ldrb	r3, [r3, #14]
 80011da:	2b5f      	cmp	r3, #95	; 0x5f
 80011dc:	f200 8390 	bhi.w	8001900 <SysTick_Handler+0x814>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <SysTick_Handler+0xfc>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	08001369 	.word	0x08001369
 80011ec:	08001901 	.word	0x08001901
 80011f0:	08001901 	.word	0x08001901
 80011f4:	08001901 	.word	0x08001901
 80011f8:	08001901 	.word	0x08001901
 80011fc:	08001901 	.word	0x08001901
 8001200:	08001901 	.word	0x08001901
 8001204:	08001901 	.word	0x08001901
 8001208:	08001901 	.word	0x08001901
 800120c:	08001901 	.word	0x08001901
 8001210:	08001901 	.word	0x08001901
 8001214:	08001901 	.word	0x08001901
 8001218:	08001901 	.word	0x08001901
 800121c:	08001901 	.word	0x08001901
 8001220:	08001901 	.word	0x08001901
 8001224:	08001901 	.word	0x08001901
 8001228:	08001901 	.word	0x08001901
 800122c:	08001901 	.word	0x08001901
 8001230:	08001901 	.word	0x08001901
 8001234:	080013a1 	.word	0x080013a1
 8001238:	08001429 	.word	0x08001429
 800123c:	08001441 	.word	0x08001441
 8001240:	08001459 	.word	0x08001459
 8001244:	08001471 	.word	0x08001471
 8001248:	080017cb 	.word	0x080017cb
 800124c:	08001901 	.word	0x08001901
 8001250:	080017e3 	.word	0x080017e3
 8001254:	080017fb 	.word	0x080017fb
 8001258:	08001839 	.word	0x08001839
 800125c:	08001877 	.word	0x08001877
 8001260:	08001901 	.word	0x08001901
 8001264:	08001901 	.word	0x08001901
 8001268:	08001901 	.word	0x08001901
 800126c:	08001901 	.word	0x08001901
 8001270:	0800188f 	.word	0x0800188f
 8001274:	08001901 	.word	0x08001901
 8001278:	08001901 	.word	0x08001901
 800127c:	08001901 	.word	0x08001901
 8001280:	08001901 	.word	0x08001901
 8001284:	08001901 	.word	0x08001901
 8001288:	08001901 	.word	0x08001901
 800128c:	08001901 	.word	0x08001901
 8001290:	08001901 	.word	0x08001901
 8001294:	08001901 	.word	0x08001901
 8001298:	08001901 	.word	0x08001901
 800129c:	08001901 	.word	0x08001901
 80012a0:	08001901 	.word	0x08001901
 80012a4:	08001901 	.word	0x08001901
 80012a8:	08001901 	.word	0x08001901
 80012ac:	08001901 	.word	0x08001901
 80012b0:	080018a7 	.word	0x080018a7
 80012b4:	08001901 	.word	0x08001901
 80012b8:	08001901 	.word	0x08001901
 80012bc:	08001901 	.word	0x08001901
 80012c0:	08001901 	.word	0x08001901
 80012c4:	08001901 	.word	0x08001901
 80012c8:	08001901 	.word	0x08001901
 80012cc:	08001901 	.word	0x08001901
 80012d0:	08001901 	.word	0x08001901
 80012d4:	08001901 	.word	0x08001901
 80012d8:	08001901 	.word	0x08001901
 80012dc:	08001901 	.word	0x08001901
 80012e0:	08001901 	.word	0x08001901
 80012e4:	08001901 	.word	0x08001901
 80012e8:	08001901 	.word	0x08001901
 80012ec:	08001901 	.word	0x08001901
 80012f0:	080018bf 	.word	0x080018bf
 80012f4:	08001901 	.word	0x08001901
 80012f8:	08001901 	.word	0x08001901
 80012fc:	08001901 	.word	0x08001901
 8001300:	08001901 	.word	0x08001901
 8001304:	08001901 	.word	0x08001901
 8001308:	08001901 	.word	0x08001901
 800130c:	08001901 	.word	0x08001901
 8001310:	08001901 	.word	0x08001901
 8001314:	08001901 	.word	0x08001901
 8001318:	08001901 	.word	0x08001901
 800131c:	08001901 	.word	0x08001901
 8001320:	08001901 	.word	0x08001901
 8001324:	08001901 	.word	0x08001901
 8001328:	08001901 	.word	0x08001901
 800132c:	08001901 	.word	0x08001901
 8001330:	08001901 	.word	0x08001901
 8001334:	08001901 	.word	0x08001901
 8001338:	08001901 	.word	0x08001901
 800133c:	08001901 	.word	0x08001901
 8001340:	08001901 	.word	0x08001901
 8001344:	08001901 	.word	0x08001901
 8001348:	08001901 	.word	0x08001901
 800134c:	08001901 	.word	0x08001901
 8001350:	08001901 	.word	0x08001901
 8001354:	08001901 	.word	0x08001901
 8001358:	08001901 	.word	0x08001901
 800135c:	08001901 	.word	0x08001901
 8001360:	08001901 	.word	0x08001901
 8001364:	080018d7 	.word	0x080018d7
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <SysTick_Handler+0x32c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <SysTick_Handler+0x28c>
 8001370:	2113      	movs	r1, #19
 8001372:	482a      	ldr	r0, [pc, #168]	; (800141c <SysTick_Handler+0x330>)
 8001374:	f7ff fe9e 	bl	80010b4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001378:	2201      	movs	r2, #1
 800137a:	2100      	movs	r1, #0
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <SysTick_Handler+0x318>)
 800137e:	f006 fe45 	bl	800800c <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <SysTick_Handler+0x318>)
 8001384:	899b      	ldrh	r3, [r3, #12]
 8001386:	f241 3287 	movw	r2, #4999	; 0x1387
 800138a:	4293      	cmp	r3, r2
 800138c:	f240 82b5 	bls.w	80018fa <SysTick_Handler+0x80e>
					 {
						 eth_init(&ETH);
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <SysTick_Handler+0x318>)
 8001392:	f006 fe77 	bl	8008084 <eth_init>

						 eth_socket_init(&ETH,0);
 8001396:	2100      	movs	r1, #0
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <SysTick_Handler+0x318>)
 800139a:	f006 fec9 	bl	8008130 <eth_socket_init>
					 }

				 }
			 break;
 800139e:	e2ac      	b.n	80018fa <SysTick_Handler+0x80e>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <SysTick_Handler+0x318>)
 80013a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d110      	bne.n	80013d0 <SysTick_Handler+0x2e4>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <SysTick_Handler+0x32c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <SysTick_Handler+0x2d2>
 80013b6:	2111      	movs	r1, #17
 80013b8:	4819      	ldr	r0, [pc, #100]	; (8001420 <SysTick_Handler+0x334>)
 80013ba:	f7ff fe7b 	bl	80010b4 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 80013be:	2202      	movs	r2, #2
 80013c0:	2100      	movs	r1, #0
 80013c2:	4810      	ldr	r0, [pc, #64]	; (8001404 <SysTick_Handler+0x318>)
 80013c4:	f006 fe22 	bl	800800c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <SysTick_Handler+0x318>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80013ce:	e297      	b.n	8001900 <SysTick_Handler+0x814>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80013d0:	2204      	movs	r2, #4
 80013d2:	2100      	movs	r1, #0
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <SysTick_Handler+0x318>)
 80013d6:	f006 fe19 	bl	800800c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <SysTick_Handler+0x32c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <SysTick_Handler+0x2fe>
 80013e2:	2115      	movs	r1, #21
 80013e4:	480f      	ldr	r0, [pc, #60]	; (8001424 <SysTick_Handler+0x338>)
 80013e6:	f7ff fe65 	bl	80010b4 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SysTick_Handler+0x318>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	819a      	strh	r2, [r3, #12]
			 break;
 80013f0:	e286      	b.n	8001900 <SysTick_Handler+0x814>
 80013f2:	bf00      	nop
 80013f4:	200027ac 	.word	0x200027ac
 80013f8:	20000a3c 	.word	0x20000a3c
 80013fc:	20002dc8 	.word	0x20002dc8
 8001400:	20000238 	.word	0x20000238
 8001404:	200016dc 	.word	0x200016dc
 8001408:	200027b0 	.word	0x200027b0
 800140c:	40020800 	.word	0x40020800
 8001410:	20002798 	.word	0x20002798
 8001414:	2000279e 	.word	0x2000279e
 8001418:	20002de4 	.word	0x20002de4
 800141c:	0800a3a0 	.word	0x0800a3a0
 8001420:	0800a3b4 	.word	0x0800a3b4
 8001424:	0800a3c8 	.word	0x0800a3c8
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001428:	4b96      	ldr	r3, [pc, #600]	; (8001684 <SysTick_Handler+0x598>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <SysTick_Handler+0x34c>
 8001430:	2113      	movs	r1, #19
 8001432:	4895      	ldr	r0, [pc, #596]	; (8001688 <SysTick_Handler+0x59c>)
 8001434:	f7ff fe3e 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001438:	4b94      	ldr	r3, [pc, #592]	; (800168c <SysTick_Handler+0x5a0>)
 800143a:	2200      	movs	r2, #0
 800143c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800143e:	e25f      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001440:	4b90      	ldr	r3, [pc, #576]	; (8001684 <SysTick_Handler+0x598>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <SysTick_Handler+0x364>
 8001448:	2114      	movs	r1, #20
 800144a:	4891      	ldr	r0, [pc, #580]	; (8001690 <SysTick_Handler+0x5a4>)
 800144c:	f7ff fe32 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001450:	4b8e      	ldr	r3, [pc, #568]	; (800168c <SysTick_Handler+0x5a0>)
 8001452:	2200      	movs	r2, #0
 8001454:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001456:	e253      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001458:	4b8a      	ldr	r3, [pc, #552]	; (8001684 <SysTick_Handler+0x598>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <SysTick_Handler+0x37c>
 8001460:	2114      	movs	r1, #20
 8001462:	488c      	ldr	r0, [pc, #560]	; (8001694 <SysTick_Handler+0x5a8>)
 8001464:	f7ff fe26 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <SysTick_Handler+0x5a0>)
 800146a:	2200      	movs	r2, #0
 800146c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800146e:	e247      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN==1) ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001470:	4b84      	ldr	r3, [pc, #528]	; (8001684 <SysTick_Handler+0x598>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d103      	bne.n	8001480 <SysTick_Handler+0x394>
 8001478:	2118      	movs	r1, #24
 800147a:	4887      	ldr	r0, [pc, #540]	; (8001698 <SysTick_Handler+0x5ac>)
 800147c:	f7ff fe1a 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001480:	4b82      	ldr	r3, [pc, #520]	; (800168c <SysTick_Handler+0x5a0>)
 8001482:	2200      	movs	r2, #0
 8001484:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <SysTick_Handler+0x5a0>)
 8001488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 8089 	bne.w	80015a8 <SysTick_Handler+0x4bc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001496:	2302      	movs	r3, #2
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b80      	ldr	r3, [pc, #512]	; (800169c <SysTick_Handler+0x5b0>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	230f      	movs	r3, #15
 80014a0:	2226      	movs	r2, #38	; 0x26
 80014a2:	2104      	movs	r1, #4
 80014a4:	4879      	ldr	r0, [pc, #484]	; (800168c <SysTick_Handler+0x5a0>)
 80014a6:	f006 fc86 	bl	8007db6 <SPI_ETH_REG>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <SysTick_Handler+0x5b4>)
 80014b0:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <SysTick_Handler+0x5b4>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8221 	beq.w	80018fe <SysTick_Handler+0x812>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <SysTick_Handler+0x5b4>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <SysTick_Handler+0x5b8>)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4871      	ldr	r0, [pc, #452]	; (800168c <SysTick_Handler+0x5a0>)
 80014c6:	f006 fec5 	bl	8008254 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <SysTick_Handler+0x5b8>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80014d4:	486d      	ldr	r0, [pc, #436]	; (800168c <SysTick_Handler+0x5a0>)
 80014d6:	f006 fce6 	bl	8007ea6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	2100      	movs	r1, #0
 80014de:	486b      	ldr	r0, [pc, #428]	; (800168c <SysTick_Handler+0x5a0>)
 80014e0:	f006 fd94 	bl	800800c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80014e4:	bf00      	nop
 80014e6:	2100      	movs	r1, #0
 80014e8:	4868      	ldr	r0, [pc, #416]	; (800168c <SysTick_Handler+0x5a0>)
 80014ea:	f006 fe96 	bl	800821a <eth_rd_SOCKET_CMD>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f8      	bne.n	80014e6 <SysTick_Handler+0x3fa>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <SysTick_Handler+0x5b4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	2300      	movs	r3, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	4969      	ldr	r1, [pc, #420]	; (80016a8 <SysTick_Handler+0x5bc>)
 8001502:	486a      	ldr	r0, [pc, #424]	; (80016ac <SysTick_Handler+0x5c0>)
 8001504:	f007 fc18 	bl	8008d38 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001508:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <SysTick_Handler+0x5b4>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001514:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <SysTick_Handler+0x5b4>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <SysTick_Handler+0x436>
 800151c:	4b5b      	ldr	r3, [pc, #364]	; (800168c <SysTick_Handler+0x5a0>)
 800151e:	2201      	movs	r2, #1
 8001520:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001524:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001528:	4619      	mov	r1, r3
 800152a:	4860      	ldr	r0, [pc, #384]	; (80016ac <SysTick_Handler+0x5c0>)
 800152c:	f005 f92e 	bl	800678c <ModBUS_Check>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <SysTick_Handler+0x466>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001536:	485e      	ldr	r0, [pc, #376]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001538:	f005 fa2c 	bl	8006994 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 800153c:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <SysTick_Handler+0x5c4>)
 800153e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001542:	2300      	movs	r3, #0
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	495a      	ldr	r1, [pc, #360]	; (80016b4 <SysTick_Handler+0x5c8>)
 800154a:	4857      	ldr	r0, [pc, #348]	; (80016a8 <SysTick_Handler+0x5bc>)
 800154c:	f007 fbf4 	bl	8008d38 <CopiaVector>
 8001550:	e007      	b.n	8001562 <SysTick_Handler+0x476>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <SysTick_Handler+0x598>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <SysTick_Handler+0x476>
 800155a:	2111      	movs	r1, #17
 800155c:	4856      	ldr	r0, [pc, #344]	; (80016b8 <SysTick_Handler+0x5cc>)
 800155e:	f7ff fda9 	bl	80010b4 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001564:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b54      	ldr	r3, [pc, #336]	; (80016bc <SysTick_Handler+0x5d0>)
 800156c:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <SysTick_Handler+0x5d0>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <SysTick_Handler+0x5d4>)
 8001574:	2100      	movs	r1, #0
 8001576:	4845      	ldr	r0, [pc, #276]	; (800168c <SysTick_Handler+0x5a0>)
 8001578:	f006 ff3c 	bl	80083f4 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <SysTick_Handler+0x5d4>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	f240 4124 	movw	r1, #1060	; 0x424
 8001586:	4841      	ldr	r0, [pc, #260]	; (800168c <SysTick_Handler+0x5a0>)
 8001588:	f006 fc8d 	bl	8007ea6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	483e      	ldr	r0, [pc, #248]	; (800168c <SysTick_Handler+0x5a0>)
 8001592:	f006 fd3b 	bl	800800c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001596:	bf00      	nop
 8001598:	2100      	movs	r1, #0
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <SysTick_Handler+0x5a0>)
 800159c:	f006 fe3d 	bl	800821a <eth_rd_SOCKET_CMD>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f8      	bne.n	8001598 <SysTick_Handler+0x4ac>
										}
							}
						}
					}
				 }
			 break;
 80015a6:	e1aa      	b.n	80018fe <SysTick_Handler+0x812>
						if (mb_eth._w_answer==0)
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <SysTick_Handler+0x5c4>)
 80015aa:	7a1b      	ldrb	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 808d 	bne.w	80016cc <SysTick_Handler+0x5e0>
							ETH.data[0]=0x00;
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <SysTick_Handler+0x5a0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <SysTick_Handler+0x5a0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <SysTick_Handler+0x5a0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <SysTick_Handler+0x5a0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <SysTick_Handler+0x5a0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <SysTick_Handler+0x5a0>)
 80015d4:	2206      	movs	r2, #6
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <SysTick_Handler+0x5a0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <SysTick_Handler+0x5a0>)
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <SysTick_Handler+0x5a0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <SysTick_Handler+0x5a0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <SysTick_Handler+0x5a0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <SysTick_Handler+0x5a0>)
 8001604:	220a      	movs	r2, #10
 8001606:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <SysTick_Handler+0x5d0>)
 800160c:	220c      	movs	r2, #12
 800160e:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001610:	220f      	movs	r2, #15
 8001612:	2100      	movs	r1, #0
 8001614:	4826      	ldr	r0, [pc, #152]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001616:	f005 f966 	bl	80068e6 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	220c      	movs	r2, #12
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <SysTick_Handler+0x5c8>)
 8001624:	4820      	ldr	r0, [pc, #128]	; (80016a8 <SysTick_Handler+0x5bc>)
 8001626:	f007 fb87 	bl	8008d38 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <SysTick_Handler+0x5d0>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <SysTick_Handler+0x5d4>)
 8001630:	2100      	movs	r1, #0
 8001632:	4816      	ldr	r0, [pc, #88]	; (800168c <SysTick_Handler+0x5a0>)
 8001634:	f006 fede 	bl	80083f4 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <SysTick_Handler+0x5d4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	f240 4124 	movw	r1, #1060	; 0x424
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <SysTick_Handler+0x5a0>)
 8001644:	f006 fc2f 	bl	8007ea6 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001648:	2220      	movs	r2, #32
 800164a:	2100      	movs	r1, #0
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <SysTick_Handler+0x5a0>)
 800164e:	f006 fcdd 	bl	800800c <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001652:	bf00      	nop
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <SysTick_Handler+0x5a0>)
 8001658:	f006 fddf 	bl	800821a <eth_rd_SOCKET_CMD>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f8      	bne.n	8001654 <SysTick_Handler+0x568>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <SysTick_Handler+0x5c4>)
 8001664:	2201      	movs	r2, #1
 8001666:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <SysTick_Handler+0x5d8>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN==1) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Handler+0x598>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 8143 	bne.w	80018fe <SysTick_Handler+0x812>
 8001678:	2117      	movs	r1, #23
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <SysTick_Handler+0x5dc>)
 800167c:	f7ff fd1a 	bl	80010b4 <ITM0_Write>
			 break;
 8001680:	e13d      	b.n	80018fe <SysTick_Handler+0x812>
 8001682:	bf00      	nop
 8001684:	20002de4 	.word	0x20002de4
 8001688:	0800a3e0 	.word	0x0800a3e0
 800168c:	200016dc 	.word	0x200016dc
 8001690:	0800a3f4 	.word	0x0800a3f4
 8001694:	0800a40c 	.word	0x0800a40c
 8001698:	0800a424 	.word	0x0800a424
 800169c:	20002758 	.word	0x20002758
 80016a0:	200027a2 	.word	0x200027a2
 80016a4:	200027a6 	.word	0x200027a6
 80016a8:	200016f8 	.word	0x200016f8
 80016ac:	20000a4e 	.word	0x20000a4e
 80016b0:	20000a3c 	.word	0x20000a3c
 80016b4:	20000c54 	.word	0x20000c54
 80016b8:	0800a440 	.word	0x0800a440
 80016bc:	200027a8 	.word	0x200027a8
 80016c0:	200027a4 	.word	0x200027a4
 80016c4:	20002dc8 	.word	0x20002dc8
 80016c8:	0800a450 	.word	0x0800a450
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80016cc:	2302      	movs	r3, #2
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <SysTick_Handler+0x868>)
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	230f      	movs	r3, #15
 80016d6:	2226      	movs	r2, #38	; 0x26
 80016d8:	2104      	movs	r1, #4
 80016da:	489f      	ldr	r0, [pc, #636]	; (8001958 <SysTick_Handler+0x86c>)
 80016dc:	f006 fb6b 	bl	8007db6 <SPI_ETH_REG>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b9d      	ldr	r3, [pc, #628]	; (800195c <SysTick_Handler+0x870>)
 80016e6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80016e8:	4b9c      	ldr	r3, [pc, #624]	; (800195c <SysTick_Handler+0x870>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8106 	beq.w	80018fe <SysTick_Handler+0x812>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80016f2:	4b9a      	ldr	r3, [pc, #616]	; (800195c <SysTick_Handler+0x870>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	4a9a      	ldr	r2, [pc, #616]	; (8001960 <SysTick_Handler+0x874>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4897      	ldr	r0, [pc, #604]	; (8001958 <SysTick_Handler+0x86c>)
 80016fc:	f006 fdaa 	bl	8008254 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001700:	4b97      	ldr	r3, [pc, #604]	; (8001960 <SysTick_Handler+0x874>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800170a:	4893      	ldr	r0, [pc, #588]	; (8001958 <SysTick_Handler+0x86c>)
 800170c:	f006 fbcb 	bl	8007ea6 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	2100      	movs	r1, #0
 8001714:	4890      	ldr	r0, [pc, #576]	; (8001958 <SysTick_Handler+0x86c>)
 8001716:	f006 fc79 	bl	800800c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800171a:	bf00      	nop
 800171c:	2100      	movs	r1, #0
 800171e:	488e      	ldr	r0, [pc, #568]	; (8001958 <SysTick_Handler+0x86c>)
 8001720:	f006 fd7b 	bl	800821a <eth_rd_SOCKET_CMD>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f8      	bne.n	800171c <SysTick_Handler+0x630>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 800172a:	4b8c      	ldr	r3, [pc, #560]	; (800195c <SysTick_Handler+0x870>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	498b      	ldr	r1, [pc, #556]	; (8001964 <SysTick_Handler+0x878>)
 8001738:	488b      	ldr	r0, [pc, #556]	; (8001968 <SysTick_Handler+0x87c>)
 800173a:	f007 fafd 	bl	8008d38 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800173e:	4b87      	ldr	r3, [pc, #540]	; (800195c <SysTick_Handler+0x870>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b89      	ldr	r3, [pc, #548]	; (800196c <SysTick_Handler+0x880>)
 8001746:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 800174a:	4b84      	ldr	r3, [pc, #528]	; (800195c <SysTick_Handler+0x870>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <SysTick_Handler+0x66c>
 8001752:	4b81      	ldr	r3, [pc, #516]	; (8001958 <SysTick_Handler+0x86c>)
 8001754:	2201      	movs	r2, #1
 8001756:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001758:	4b84      	ldr	r3, [pc, #528]	; (800196c <SysTick_Handler+0x880>)
 800175a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800175e:	4619      	mov	r1, r3
 8001760:	4881      	ldr	r0, [pc, #516]	; (8001968 <SysTick_Handler+0x87c>)
 8001762:	f005 f813 	bl	800678c <ModBUS_Check>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d024      	beq.n	80017b6 <SysTick_Handler+0x6ca>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 800176c:	4b7f      	ldr	r3, [pc, #508]	; (800196c <SysTick_Handler+0x880>)
 800176e:	2200      	movs	r2, #0
 8001770:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <SysTick_Handler+0x884>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001778:	487c      	ldr	r0, [pc, #496]	; (800196c <SysTick_Handler+0x880>)
 800177a:	f005 f90b 	bl	8006994 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <SysTick_Handler+0x880>)
 8001780:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	4977      	ldr	r1, [pc, #476]	; (8001968 <SysTick_Handler+0x87c>)
 800178c:	4879      	ldr	r0, [pc, #484]	; (8001974 <SysTick_Handler+0x888>)
 800178e:	f007 fad3 	bl	8008d38 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	4977      	ldr	r1, [pc, #476]	; (8001978 <SysTick_Handler+0x88c>)
 800179c:	4877      	ldr	r0, [pc, #476]	; (800197c <SysTick_Handler+0x890>)
 800179e:	f007 facb 	bl	8008d38 <CopiaVector>
										if (ETH_DBG_EN==1) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 80017a2:	4b77      	ldr	r3, [pc, #476]	; (8001980 <SysTick_Handler+0x894>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 80a9 	bne.w	80018fe <SysTick_Handler+0x812>
 80017ac:	2117      	movs	r1, #23
 80017ae:	4875      	ldr	r0, [pc, #468]	; (8001984 <SysTick_Handler+0x898>)
 80017b0:	f7ff fc80 	bl	80010b4 <ITM0_Write>
			 break;
 80017b4:	e0a3      	b.n	80018fe <SysTick_Handler+0x812>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <SysTick_Handler+0x894>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 809f 	beq.w	80018fe <SysTick_Handler+0x812>
 80017c0:	2111      	movs	r1, #17
 80017c2:	4871      	ldr	r0, [pc, #452]	; (8001988 <SysTick_Handler+0x89c>)
 80017c4:	f7ff fc76 	bl	80010b4 <ITM0_Write>
			 break;
 80017c8:	e099      	b.n	80018fe <SysTick_Handler+0x812>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <SysTick_Handler+0x894>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <SysTick_Handler+0x6ee>
 80017d2:	2115      	movs	r1, #21
 80017d4:	486d      	ldr	r0, [pc, #436]	; (800198c <SysTick_Handler+0x8a0>)
 80017d6:	f7ff fc6d 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <SysTick_Handler+0x86c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80017e0:	e08e      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <SysTick_Handler+0x894>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <SysTick_Handler+0x706>
 80017ea:	2114      	movs	r1, #20
 80017ec:	4868      	ldr	r0, [pc, #416]	; (8001990 <SysTick_Handler+0x8a4>)
 80017ee:	f7ff fc61 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80017f2:	4b59      	ldr	r3, [pc, #356]	; (8001958 <SysTick_Handler+0x86c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80017f8:	e082      	b.n	8001900 <SysTick_Handler+0x814>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <SysTick_Handler+0x894>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <SysTick_Handler+0x71e>
 8001802:	2116      	movs	r1, #22
 8001804:	4863      	ldr	r0, [pc, #396]	; (8001994 <SysTick_Handler+0x8a8>)
 8001806:	f7ff fc55 	bl	80010b4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 800180a:	2208      	movs	r2, #8
 800180c:	2100      	movs	r1, #0
 800180e:	4852      	ldr	r0, [pc, #328]	; (8001958 <SysTick_Handler+0x86c>)
 8001810:	f006 fbfc 	bl	800800c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001814:	bf00      	nop
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <SysTick_Handler+0x868>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	230f      	movs	r3, #15
 8001820:	2201      	movs	r2, #1
 8001822:	2104      	movs	r1, #4
 8001824:	484c      	ldr	r0, [pc, #304]	; (8001958 <SysTick_Handler+0x86c>)
 8001826:	f006 fac6 	bl	8007db6 <SPI_ETH_REG>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f2      	bne.n	8001816 <SysTick_Handler+0x72a>
					{}
					ETH.ETH_WDG=0;
 8001830:	4b49      	ldr	r3, [pc, #292]	; (8001958 <SysTick_Handler+0x86c>)
 8001832:	2200      	movs	r2, #0
 8001834:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001836:	e063      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001838:	4b51      	ldr	r3, [pc, #324]	; (8001980 <SysTick_Handler+0x894>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <SysTick_Handler+0x75c>
 8001840:	2117      	movs	r1, #23
 8001842:	4855      	ldr	r0, [pc, #340]	; (8001998 <SysTick_Handler+0x8ac>)
 8001844:	f7ff fc36 	bl	80010b4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001848:	2208      	movs	r2, #8
 800184a:	2100      	movs	r1, #0
 800184c:	4842      	ldr	r0, [pc, #264]	; (8001958 <SysTick_Handler+0x86c>)
 800184e:	f006 fbdd 	bl	800800c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001852:	bf00      	nop
 8001854:	2301      	movs	r3, #1
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <SysTick_Handler+0x868>)
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	230f      	movs	r3, #15
 800185e:	2201      	movs	r2, #1
 8001860:	2104      	movs	r1, #4
 8001862:	483d      	ldr	r0, [pc, #244]	; (8001958 <SysTick_Handler+0x86c>)
 8001864:	f006 faa7 	bl	8007db6 <SPI_ETH_REG>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f2      	bne.n	8001854 <SysTick_Handler+0x768>
					{}
					ETH.ETH_WDG=0;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <SysTick_Handler+0x86c>)
 8001870:	2200      	movs	r2, #0
 8001872:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001874:	e044      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <SysTick_Handler+0x894>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <SysTick_Handler+0x79a>
 800187e:	2115      	movs	r1, #21
 8001880:	4846      	ldr	r0, [pc, #280]	; (800199c <SysTick_Handler+0x8b0>)
 8001882:	f7ff fc17 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <SysTick_Handler+0x86c>)
 8001888:	2200      	movs	r2, #0
 800188a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800188c:	e038      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <SysTick_Handler+0x894>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <SysTick_Handler+0x7b2>
 8001896:	2110      	movs	r1, #16
 8001898:	4841      	ldr	r0, [pc, #260]	; (80019a0 <SysTick_Handler+0x8b4>)
 800189a:	f7ff fc0b 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <SysTick_Handler+0x86c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018a4:	e02c      	b.n	8001900 <SysTick_Handler+0x814>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <SysTick_Handler+0x894>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <SysTick_Handler+0x7ca>
 80018ae:	2112      	movs	r1, #18
 80018b0:	483c      	ldr	r0, [pc, #240]	; (80019a4 <SysTick_Handler+0x8b8>)
 80018b2:	f7ff fbff 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <SysTick_Handler+0x86c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018bc:	e020      	b.n	8001900 <SysTick_Handler+0x814>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <SysTick_Handler+0x894>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <SysTick_Handler+0x7e2>
 80018c6:	2113      	movs	r1, #19
 80018c8:	4837      	ldr	r0, [pc, #220]	; (80019a8 <SysTick_Handler+0x8bc>)
 80018ca:	f7ff fbf3 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <SysTick_Handler+0x86c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018d4:	e014      	b.n	8001900 <SysTick_Handler+0x814>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <SysTick_Handler+0x894>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <SysTick_Handler+0x7fa>
 80018de:	2111      	movs	r1, #17
 80018e0:	4832      	ldr	r0, [pc, #200]	; (80019ac <SysTick_Handler+0x8c0>)
 80018e2:	f7ff fbe7 	bl	80010b4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <SysTick_Handler+0x86c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018ec:	e008      	b.n	8001900 <SysTick_Handler+0x814>
	     }
	  }
	  }else
	  	  {

		  SPI_ETH(&ETH);
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <SysTick_Handler+0x86c>)
 80018f0:	f006 fa3a 	bl	8007d68 <SPI_ETH>
 80018f4:	e004      	b.n	8001900 <SysTick_Handler+0x814>
			 default:
 80018f6:	bf00      	nop
 80018f8:	e002      	b.n	8001900 <SysTick_Handler+0x814>
			 break;
 80018fa:	bf00      	nop
 80018fc:	e000      	b.n	8001900 <SysTick_Handler+0x814>
			 break;
 80018fe:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <SysTick_Handler+0x8c4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d102      	bne.n	800190e <SysTick_Handler+0x822>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <SysTick_Handler+0x8c4>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <SysTick_Handler+0x8c8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d104      	bne.n	8001920 <SysTick_Handler+0x834>
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <SysTick_Handler+0x8cc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <SysTick_Handler+0x8cc>)
 800191e:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <SysTick_Handler+0x8cc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	dd0f      	ble.n	8001948 <SysTick_Handler+0x85c>
	{
		USART1_ticks=0;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <SysTick_Handler+0x8cc>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 800192e:	4b23      	ldr	r3, [pc, #140]	; (80019bc <SysTick_Handler+0x8d0>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SysTick_Handler+0x8c8>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <SysTick_Handler+0x8d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <SysTick_Handler+0x8d8>)
 8001940:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <SysTick_Handler+0x8d4>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 fd10 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20002758 	.word	0x20002758
 8001958:	200016dc 	.word	0x200016dc
 800195c:	200027a2 	.word	0x200027a2
 8001960:	200027a6 	.word	0x200027a6
 8001964:	200016f8 	.word	0x200016f8
 8001968:	20000a4e 	.word	0x20000a4e
 800196c:	20000a3c 	.word	0x20000a3c
 8001970:	20002dc8 	.word	0x20002dc8
 8001974:	20001ef8 	.word	0x20001ef8
 8001978:	20000e60 	.word	0x20000e60
 800197c:	200014b0 	.word	0x200014b0
 8001980:	20002de4 	.word	0x20002de4
 8001984:	0800a464 	.word	0x0800a464
 8001988:	0800a440 	.word	0x0800a440
 800198c:	0800a478 	.word	0x0800a478
 8001990:	0800a490 	.word	0x0800a490
 8001994:	0800a4a8 	.word	0x0800a4a8
 8001998:	0800a4c0 	.word	0x0800a4c0
 800199c:	0800a4d8 	.word	0x0800a4d8
 80019a0:	0800a4f0 	.word	0x0800a4f0
 80019a4:	0800a504 	.word	0x0800a504
 80019a8:	0800a518 	.word	0x0800a518
 80019ac:	0800a52c 	.word	0x0800a52c
 80019b0:	200027b0 	.word	0x200027b0
 80019b4:	2000279b 	.word	0x2000279b
 80019b8:	20002dd0 	.word	0x20002dd0
 80019bc:	20002dd4 	.word	0x20002dd4
 80019c0:	20002dcc 	.word	0x20002dcc
 80019c4:	20002dd8 	.word	0x20002dd8

080019c8 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_UART_ErrorCallback+0x7c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d115      	bne.n	8001a06 <HAL_UART_ErrorCallback+0x3e>
	{
		 volatile int aore=0;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]

		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		 aore=ERRUART->Instance->SR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	617b      	str	r3, [r7, #20]
		 bore=ERRUART->Instance->DR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
		 HAL_UART_DeInit(ERRUART);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f003 f95f 	bl	8004cb6 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 80019f8:	f7ff fa56 	bl	8000ea8 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	4912      	ldr	r1, [pc, #72]	; (8001a48 <HAL_UART_ErrorCallback+0x80>)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f003 f9cc 	bl	8004d9e <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_UART_ErrorCallback+0x84>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d115      	bne.n	8001a3c <HAL_UART_ErrorCallback+0x74>
	{
		 volatile int aore=0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
			aore=ERRUART->Instance->SR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f003 f944 	bl	8004cb6 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001a2e:	f7ff fa65 	bl	8000efc <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4904      	ldr	r1, [pc, #16]	; (8001a48 <HAL_UART_ErrorCallback+0x80>)
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f003 f9b1 	bl	8004d9e <HAL_UART_Receive_IT>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40011000 	.word	0x40011000
 8001a48:	20002db8 	.word	0x20002db8
 8001a4c:	40004400 	.word	0x40004400

08001a50 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2b      	ldr	r2, [pc, #172]	; (8001b0c <HAL_UART_RxCpltCallback+0xbc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d123      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_UART_RxCpltCallback+0xc0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_UART_RxCpltCallback+0xc4>)
 8001a68:	7811      	ldrb	r1, [r2, #0]
 8001a6a:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <HAL_UART_RxCpltCallback+0xc8>)
 8001a6c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_UART_RxCpltCallback+0xc0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <HAL_UART_RxCpltCallback+0xc0>)
 8001a76:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_UART_RxCpltCallback+0xc0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	db03      	blt.n	8001a8a <HAL_UART_RxCpltCallback+0x3a>
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_UART_RxCpltCallback+0xc0>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4823      	ldr	r0, [pc, #140]	; (8001b1c <HAL_UART_RxCpltCallback+0xcc>)
 8001a8e:	f002 f919 	bl	8003cc4 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a96:	2201      	movs	r2, #1
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_UART_RxCpltCallback+0xd0>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	491c      	ldr	r1, [pc, #112]	; (8001b14 <HAL_UART_RxCpltCallback+0xc4>)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f003 f97a 	bl	8004d9e <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_UART_RxCpltCallback+0xd4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d127      	bne.n	8001b04 <HAL_UART_RxCpltCallback+0xb4>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_UART_RxCpltCallback+0xd8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_UART_RxCpltCallback+0xdc>)
 8001aba:	7811      	ldrb	r1, [r2, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_UART_RxCpltCallback+0xe0>)
 8001abe:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_UART_RxCpltCallback+0xd8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_UART_RxCpltCallback+0xd8>)
 8001ac8:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_UART_RxCpltCallback+0xd8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	db03      	blt.n	8001adc <HAL_UART_RxCpltCallback+0x8c>
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_UART_RxCpltCallback+0xd8>)
 8001ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <HAL_UART_RxCpltCallback+0xe4>)
 8001ae2:	f001 f8c5 	bl	8002c70 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <HAL_UART_RxCpltCallback+0xe8>)
 8001aea:	f002 f8eb 	bl	8003cc4 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_UART_RxCpltCallback+0xec>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_UART_RxCpltCallback+0xf0>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <HAL_UART_RxCpltCallback+0xdc>)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f003 f94d 	bl	8004d9e <HAL_UART_Receive_IT>
		 }
 }
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	20002ddc 	.word	0x20002ddc
 8001b14:	20002db8 	.word	0x20002db8
 8001b18:	200027b4 	.word	0x200027b4
 8001b1c:	200000dc 	.word	0x200000dc
 8001b20:	20002799 	.word	0x20002799
 8001b24:	40004400 	.word	0x40004400
 8001b28:	20002de0 	.word	0x20002de0
 8001b2c:	20002dbc 	.word	0x20002dbc
 8001b30:	200029b4 	.word	0x200029b4
 8001b34:	40020000 	.word	0x40020000
 8001b38:	20000124 	.word	0x20000124
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	2000279a 	.word	0x2000279a

08001b44 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d12c      	bne.n	8001bb0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f002 f9b1 	bl	8003ec0 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001b70:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	4931      	ldr	r1, [pc, #196]	; (8001c50 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001b8c:	4832      	ldr	r0, [pc, #200]	; (8001c58 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001b8e:	f007 f8d3 	bl	8008d38 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001b92:	2201      	movs	r2, #1
 8001b94:	4931      	ldr	r1, [pc, #196]	; (8001c5c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001b96:	4832      	ldr	r0, [pc, #200]	; (8001c60 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8001b98:	f003 f901 	bl	8004d9e <HAL_UART_Receive_IT>
				 if (UART1_DBG_EN==1)
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482b      	ldr	r0, [pc, #172]	; (8001c58 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001bac:	f7ff fa82 	bl	80010b4 <ITM0_Write>
				 }
		}
// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d13e      	bne.n	8001c38 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f002 f97f 	bl	8003ec0 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4829      	ldr	r0, [pc, #164]	; (8001c6c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8001bc8:	f001 f852 	bl	8002c70 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001bde:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4921      	ldr	r1, [pc, #132]	; (8001c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001bfa:	4822      	ldr	r0, [pc, #136]	; (8001c84 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001bfc:	f007 f89c 	bl	8008d38 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8001c06:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	491f      	ldr	r1, [pc, #124]	; (8001c8c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8001c0e:	4820      	ldr	r0, [pc, #128]	; (8001c90 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8001c10:	f003 f8c5 	bl	8004d9e <HAL_UART_Receive_IT>
				 if (UART2_DBG_EN==1)
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10d      	bne.n	8001c38 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8001c1c:	2117      	movs	r1, #23
 8001c1e:	481e      	ldr	r0, [pc, #120]	; (8001c98 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8001c20:	f7ff fa48 	bl	80010b4 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4815      	ldr	r0, [pc, #84]	; (8001c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001c2c:	f7ff fa42 	bl	80010b4 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8001c30:	2102      	movs	r1, #2
 8001c32:	481a      	ldr	r0, [pc, #104]	; (8001c9c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8001c34:	f7ff fa3e 	bl	80010b4 <ITM0_Write>
				 }
		}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000279c 	.word	0x2000279c
 8001c44:	20002799 	.word	0x20002799
 8001c48:	20002ddc 	.word	0x20002ddc
 8001c4c:	20002dc0 	.word	0x20002dc0
 8001c50:	200027b4 	.word	0x200027b4
 8001c54:	20002db4 	.word	0x20002db4
 8001c58:	20002bb4 	.word	0x20002bb4
 8001c5c:	20002db8 	.word	0x20002db8
 8001c60:	2000016c 	.word	0x2000016c
 8001c64:	2000279f 	.word	0x2000279f
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	2000279d 	.word	0x2000279d
 8001c74:	2000279a 	.word	0x2000279a
 8001c78:	20002de0 	.word	0x20002de0
 8001c7c:	20002dc4 	.word	0x20002dc4
 8001c80:	200029b4 	.word	0x200029b4
 8001c84:	2000028e 	.word	0x2000028e
 8001c88:	20000238 	.word	0x20000238
 8001c8c:	20002dbc 	.word	0x20002dbc
 8001c90:	200001b0 	.word	0x200001b0
 8001c94:	200027a0 	.word	0x200027a0
 8001c98:	0800a540 	.word	0x0800a540
 8001c9c:	0800a558 	.word	0x0800a558

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_SPI_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d56:	23e0      	movs	r3, #224	; 0xe0
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d72:	f000 fd15 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40013000 	.word	0x40013000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d116      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	201c      	movs	r0, #28
 8001dc0:	f000 fc17 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc4:	201c      	movs	r0, #28
 8001dc6:	f000 fc30 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dca:	e01a      	b.n	8001e02 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_TIM_Base_MspInit+0x84>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d115      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	201d      	movs	r0, #29
 8001df8:	f000 fbfb 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dfc:	201d      	movs	r0, #29
 8001dfe:	f000 fc14 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40000400 	.word	0x40000400

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_UART_MspInit+0x170>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d135      	bne.n	8001ea2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4840      	ldr	r0, [pc, #256]	; (8001f8c <HAL_UART_MspInit+0x178>)
 8001e8c:	f000 fc88 	bl	80027a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2025      	movs	r0, #37	; 0x25
 8001e96:	f000 fbac 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9a:	2025      	movs	r0, #37	; 0x25
 8001e9c:	f000 fbc5 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ea0:	e06b      	b.n	8001f7a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <HAL_UART_MspInit+0x17c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d134      	bne.n	8001f16 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <HAL_UART_MspInit+0x178>)
 8001f00:	f000 fc4e 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2026      	movs	r0, #38	; 0x26
 8001f0a:	f000 fb72 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0e:	2026      	movs	r0, #38	; 0x26
 8001f10:	f000 fb8b 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8001f14:	e031      	b.n	8001f7a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_UART_MspInit+0x180>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d12c      	bne.n	8001f7a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f2a:	f043 0320 	orr.w	r3, r3, #32
 8001f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_UART_MspInit+0x174>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_UART_MspInit+0x178>)
 8001f76:	f000 fc13 	bl	80027a0 <HAL_GPIO_Init>
}
 8001f7a:	bf00      	nop
 8001f7c:	3738      	adds	r7, #56	; 0x38
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40011000 	.word	0x40011000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40004400 	.word	0x40004400
 8001f94:	40011400 	.word	0x40011400

08001f98 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_UART_MspDeInit+0x80>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001fb0:	f023 0310 	bic.w	r3, r3, #16
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001fb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001fba:	4819      	ldr	r0, [pc, #100]	; (8002020 <HAL_UART_MspDeInit+0x88>)
 8001fbc:	f000 fd74 	bl	8002aa8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001fc0:	2025      	movs	r0, #37	; 0x25
 8001fc2:	f000 fb40 	bl	8002646 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8001fc6:	e022      	b.n	800200e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_UART_MspDeInit+0x8c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10d      	bne.n	8001fee <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001fde:	210c      	movs	r1, #12
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <HAL_UART_MspDeInit+0x88>)
 8001fe2:	f000 fd61 	bl	8002aa8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001fe6:	2026      	movs	r0, #38	; 0x26
 8001fe8:	f000 fb2d 	bl	8002646 <HAL_NVIC_DisableIRQ>
}
 8001fec:	e00f      	b.n	800200e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_UART_MspDeInit+0x90>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10a      	bne.n	800200e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_UART_MspDeInit+0x84>)
 8001ffe:	f023 0320 	bic.w	r3, r3, #32
 8002002:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002004:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_UART_MspDeInit+0x88>)
 800200a:	f000 fd4d 	bl	8002aa8 <HAL_GPIO_DeInit>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40011000 	.word	0x40011000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40004400 	.word	0x40004400
 8002028:	40011400 	.word	0x40011400

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM2_IRQHandler+0x10>)
 800207a:	f002 f82d 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200000dc 	.word	0x200000dc

08002088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM3_IRQHandler+0x10>)
 800208e:	f002 f823 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000124 	.word	0x20000124

0800209c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <USART1_IRQHandler+0x10>)
 80020a2:	f002 fead 	bl	8004e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000016c 	.word	0x2000016c

080020b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART2_IRQHandler+0x10>)
 80020b6:	f002 fea3 	bl	8004e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200001b0 	.word	0x200001b0

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_kill>:

int _kill(int pid, int sig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020de:	f007 f933 	bl	8009348 <__errno>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
	return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_exit>:

void _exit (int status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffe7 	bl	80020d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002106:	e7fe      	b.n	8002106 <_exit+0x12>

08002108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e00a      	b.n	8002130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211a:	f3af 8000 	nop.w
 800211e:	4601      	mov	r1, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	b2ca      	uxtb	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf0      	blt.n	800211a <_read+0x12>
	}

return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e009      	b.n	8002168 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf1      	blt.n	8002154 <_write+0x12>
	}
	return len;
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_close>:

int _close(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return -1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a2:	605a      	str	r2, [r3, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_isatty>:

int _isatty(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f007 f898 	bl	8009348 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20020000 	.word	0x20020000
 8002244:	00000400 	.word	0x00000400
 8002248:	20002de8 	.word	0x20002de8
 800224c:	20002f40 	.word	0x20002f40

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227a:	490e      	ldr	r1, [pc, #56]	; (80022b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002290:	4c0b      	ldr	r4, [pc, #44]	; (80022c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800229e:	f7ff ffd7 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f007 f857 	bl	8009354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7fe f9e5 	bl	8000674 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80022b8:	0800a9c4 	.word	0x0800a9c4
  ldr r2, =_sbss
 80022bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80022c0:	20002f3c 	.word	0x20002f3c

080022c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f973 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fcd6 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f999 	bl	8002662 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 f953 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000000 	.word	0x20000000
 8002364:	20000008 	.word	0x20000008
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008
 8002390:	20002dec 	.word	0x20002dec

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20002dec 	.word	0x20002dec

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008

080023f4 <__NVIC_SetPriorityGrouping>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_DisableIRQ>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db12      	blt.n	80024cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	490a      	ldr	r1, [pc, #40]	; (80024d8 <__NVIC_DisableIRQ+0x44>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	3320      	adds	r3, #32
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024c0:	f3bf 8f4f 	dsb	sy
}
 80024c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024c6:	f3bf 8f6f 	isb	sy
}
 80024ca:	bf00      	nop
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <SysTick_Config>:
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff8e 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff05 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff1a 	bl	800243c <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff8e 	bl	8002530 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5d 	bl	80024dc <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff0d 	bl	8002458 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff1d 	bl	8002494 <__NVIC_DisableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff94 	bl	8002598 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff fe84 	bl	8002394 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e052      	b.n	8002752 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0216 	bic.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <HAL_DMA_Abort+0x62>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	e013      	b.n	8002726 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fe:	f7ff fe49 	bl	8002394 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b05      	cmp	r3, #5
 800270a:	d90c      	bls.n	8002726 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e015      	b.n	8002752 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e4      	bne.n	80026fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	223f      	movs	r2, #63	; 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00c      	b.n	8002792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2205      	movs	r2, #5
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e159      	b.n	8002a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8148 	bne.w	8002a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a2 	beq.w	8002a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b54      	ldr	r3, [pc, #336]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x2ec>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a49      	ldr	r2, [pc, #292]	; (8002a90 <HAL_GPIO_Init+0x2f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x202>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a48      	ldr	r2, [pc, #288]	; (8002a94 <HAL_GPIO_Init+0x2f4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x1fe>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_GPIO_Init+0x2f8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x1fa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a46      	ldr	r2, [pc, #280]	; (8002a9c <HAL_GPIO_Init+0x2fc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x1f6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a45      	ldr	r2, [pc, #276]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x1f2>
 800298e:	2304      	movs	r3, #4
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002992:	2307      	movs	r3, #7
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_GPIO_Init+0x2ec>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f aea2 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e0bb      	b.n	8002c3c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f040 80ab 	bne.w	8002c36 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ae0:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <HAL_GPIO_DeInit+0x1b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d019      	beq.n	8002b3e <HAL_GPIO_DeInit+0x96>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a53      	ldr	r2, [pc, #332]	; (8002c5c <HAL_GPIO_DeInit+0x1b4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <HAL_GPIO_DeInit+0x92>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_DeInit+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00d      	beq.n	8002b36 <HAL_GPIO_DeInit+0x8e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_DeInit+0x1bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <HAL_GPIO_DeInit+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_DeInit+0x1c0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_GPIO_DeInit+0x86>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d132      	bne.n	8002bb6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4944      	ldr	r1, [pc, #272]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4941      	ldr	r1, [pc, #260]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	493d      	ldr	r1, [pc, #244]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	493a      	ldr	r1, [pc, #232]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b98:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	482a      	ldr	r0, [pc, #168]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	08d2      	lsrs	r2, r2, #3
 8002bec:	4019      	ands	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2103      	movs	r1, #3
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	2101      	movs	r1, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2103      	movs	r1, #3
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f af40 	bls.w	8002ac4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e267      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d075      	beq.n	8002de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf6:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d00c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d02:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d112      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05b      	beq.n	8002de0 <HAL_RCC_OscConfig+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d157      	bne.n	8002de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e242      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x74>
 8002d3e:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a75      	ldr	r2, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e01d      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x98>
 8002d56:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6c      	ldr	r2, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d70:	4b69      	ldr	r3, [pc, #420]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a68      	ldr	r2, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7ff fb00 	bl	8002394 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fafc 	bl	8002394 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e207      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0xc0>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff faec 	bl	8002394 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fae8 	bl	8002394 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1f3      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xe8>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d063      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d11c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e06:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_RCC_OscConfig+0x152>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e1c7      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4937      	ldr	r1, [pc, #220]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	e03a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <HAL_RCC_OscConfig+0x244>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7ff faa1 	bl	8002394 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e56:	f7ff fa9d 	bl	8002394 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1a8      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4925      	ldr	r1, [pc, #148]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_OscConfig+0x244>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff fa80 	bl	8002394 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e98:	f7ff fa7c 	bl	8002394 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e187      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d036      	beq.n	8002f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCC_OscConfig+0x248>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7ff fa60 	bl	8002394 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7ff fa5c 	bl	8002394 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e167      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x200>
 8002ef6:	e01b      	b.n	8002f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_OscConfig+0x248>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff fa49 	bl	8002394 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	e00e      	b.n	8002f24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f06:	f7ff fa45 	bl	8002394 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d907      	bls.n	8002f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e150      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470000 	.word	0x42470000
 8002f20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ea      	bne.n	8002f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8097 	beq.w	800306c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f42:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a7c      	ldr	r2, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b77      	ldr	r3, [pc, #476]	; (800314c <HAL_RCC_OscConfig+0x474>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b74      	ldr	r3, [pc, #464]	; (800314c <HAL_RCC_OscConfig+0x474>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a73      	ldr	r2, [pc, #460]	; (800314c <HAL_RCC_OscConfig+0x474>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7ff fa05 	bl	8002394 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7ff fa01 	bl	8002394 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e10c      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x474>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2ea>
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCC_OscConfig+0x324>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x30c>
 8002fca:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a5e      	ldr	r2, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a5b      	ldr	r2, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0x324>
 8002fe4:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	4b55      	ldr	r3, [pc, #340]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a54      	ldr	r2, [pc, #336]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7ff f9c6 	bl	8002394 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7ff f9c2 	bl	8002394 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0cb      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	4b49      	ldr	r3, [pc, #292]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ee      	beq.n	800300c <HAL_RCC_OscConfig+0x334>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7ff f9b0 	bl	8002394 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7ff f9ac 	bl	8002394 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0b5      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ee      	bne.n	8003038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	4a38      	ldr	r2, [pc, #224]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a1 	beq.w	80031b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003076:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b08      	cmp	r3, #8
 8003080:	d05c      	beq.n	800313c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d141      	bne.n	800310e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_OscConfig+0x478>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7ff f980 	bl	8002394 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003098:	f7ff f97c 	bl	8002394 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e087      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	019b      	lsls	r3, r3, #6
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	491b      	ldr	r1, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x478>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7ff f955 	bl	8002394 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7ff f951 	bl	8002394 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e05c      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x416>
 800310c:	e054      	b.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7ff f93e 	bl	8002394 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7ff f93a 	bl	8002394 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e045      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x444>
 800313a:	e03d      	b.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e038      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x4ec>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11a      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800318a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d111      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cc      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d90c      	bls.n	8003204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0b8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a58      	ldr	r2, [pc, #352]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800323e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	494d      	ldr	r1, [pc, #308]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e067      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4934      	ldr	r1, [pc, #208]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7ff f86c 	bl	8002394 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7ff f868 	bl	8002394 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d20c      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e032      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4916      	ldr	r1, [pc, #88]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800334e:	f000 f821 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003352:	4602      	mov	r2, r0
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ffcc 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00
 8003384:	40023800 	.word	0x40023800
 8003388:	0800a794 	.word	0x0800a794
 800338c:	20000000 	.word	0x20000000
 8003390:	20000004 	.word	0x20000004

08003394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b090      	sub	sp, #64	; 0x40
 800339a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
 80033a0:	2300      	movs	r3, #0
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a4:	2300      	movs	r3, #0
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ac:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d00d      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x40>
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	f200 80a1 	bhi.w	8003500 <HAL_RCC_GetSysClockFreq+0x16c>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x34>
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x3a>
 80033c6:	e09b      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033cc:	e09b      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d2:	e098      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033de:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d028      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	2200      	movs	r2, #0
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	627a      	str	r2, [r7, #36]	; 0x24
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033fc:	2100      	movs	r1, #0
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 8003400:	fb03 f201 	mul.w	r2, r3, r1
 8003404:	2300      	movs	r3, #0
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	4413      	add	r3, r2
 800340c:	4a43      	ldr	r2, [pc, #268]	; (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 800340e:	fba0 1202 	umull	r1, r2, r0, r2
 8003412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003414:	460a      	mov	r2, r1
 8003416:	62ba      	str	r2, [r7, #40]	; 0x28
 8003418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341a:	4413      	add	r3, r2
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	2200      	movs	r2, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	61fa      	str	r2, [r7, #28]
 8003426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800342e:	f7fc ff2f 	bl	8000290 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4613      	mov	r3, r2
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	e053      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	617a      	str	r2, [r7, #20]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800344e:	f04f 0b00 	mov.w	fp, #0
 8003452:	4652      	mov	r2, sl
 8003454:	465b      	mov	r3, fp
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	ebb2 080a 	subs.w	r8, r2, sl
 800346e:	eb63 090b 	sbc.w	r9, r3, fp
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800347e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003486:	ebb2 0408 	subs.w	r4, r2, r8
 800348a:	eb63 0509 	sbc.w	r5, r3, r9
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	00eb      	lsls	r3, r5, #3
 8003498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349c:	00e2      	lsls	r2, r4, #3
 800349e:	4614      	mov	r4, r2
 80034a0:	461d      	mov	r5, r3
 80034a2:	eb14 030a 	adds.w	r3, r4, sl
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	eb45 030b 	adc.w	r3, r5, fp
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ba:	4629      	mov	r1, r5
 80034bc:	028b      	lsls	r3, r1, #10
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c4:	4621      	mov	r1, r4
 80034c6:	028a      	lsls	r2, r1, #10
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	2200      	movs	r2, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d8:	f7fc feda 	bl	8000290 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	3301      	adds	r3, #1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetSysClockFreq+0x184>)
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003508:	4618      	mov	r0, r3
 800350a:	3740      	adds	r7, #64	; 0x40
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	017d7840 	.word	0x017d7840

08003520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	0800a7a4 	.word	0x0800a7a4

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffdc 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0b5b      	lsrs	r3, r3, #13
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	0800a7a4 	.word	0x0800a7a4

08003588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07b      	b.n	8003692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035aa:	d009      	beq.n	80035c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
 80035b2:	e005      	b.n	80035c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fb8e 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	ea42 0103 	orr.w	r1, r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0104 	and.w	r1, r3, #4
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0210 	and.w	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b08c      	sub	sp, #48	; 0x30
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x26>
 80036bc:	2302      	movs	r3, #2
 80036be:	e18a      	b.n	80039d6 <HAL_SPI_TransmitReceive+0x33c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036c8:	f7fe fe64 	bl	8002394 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d00f      	beq.n	800370a <HAL_SPI_TransmitReceive+0x70>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f0:	d107      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x68>
 80036fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d003      	beq.n	800370a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003708:	e15b      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_SPI_TransmitReceive+0x82>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_TransmitReceive+0x82>
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003722:	e14e      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b04      	cmp	r3, #4
 800372e:	d003      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2205      	movs	r2, #5
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	887a      	ldrh	r2, [r7, #2]
 800375a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d007      	beq.n	800378c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d178      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x10a>
 800379e:	8b7b      	ldrh	r3, [r7, #26]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d166      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	881a      	ldrh	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c8:	e053      	b.n	8003872 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d11b      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x176>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x176>
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d113      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d119      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x1b8>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d014      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	b292      	uxth	r2, r2
 8003834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800384e:	2301      	movs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003852:	f7fe fd9f 	bl	8002394 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800385e:	429a      	cmp	r2, r3
 8003860:	d807      	bhi.n	8003872 <HAL_SPI_TransmitReceive+0x1d8>
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d003      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003870:	e0a7      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1a6      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x130>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1a1      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x130>
 8003886:	e07c      	b.n	8003982 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x1fc>
 8003890:	8b7b      	ldrh	r3, [r7, #26]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d16b      	bne.n	800396e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	e057      	b.n	800396e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11c      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x26c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x26c>
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d114      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	7812      	ldrb	r2, [r2, #0]
 80038e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d119      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x2ae>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d014      	beq.n	8003948 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003944:	2301      	movs	r3, #1
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003948:	f7fe fd24 	bl	8002394 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003954:	429a      	cmp	r2, r3
 8003956:	d803      	bhi.n	8003960 <HAL_SPI_TransmitReceive+0x2c6>
 8003958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d102      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x2cc>
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800396c:	e029      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1a2      	bne.n	80038be <HAL_SPI_TransmitReceive+0x224>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d19d      	bne.n	80038be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f8b2 	bl	8003af0 <SPI_EndRxTxTransaction>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800399e:	e010      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	e000      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3730      	adds	r7, #48	; 0x30
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f0:	f7fe fcd0 	bl	8002394 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a00:	f7fe fcc8 	bl	8002394 <HAL_GetTick>
 8003a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a16:	e054      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d050      	beq.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a20:	f7fe fcb8 	bl	8002394 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d902      	bls.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13d      	bne.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4e:	d111      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d004      	beq.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a62:	d107      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7c:	d10f      	bne.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e017      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d19b      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000

08003af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <SPI_EndRxTxTransaction+0x7c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <SPI_EndRxTxTransaction+0x80>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0d5b      	lsrs	r3, r3, #21
 8003b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d112      	bne.n	8003b42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff ff5a 	bl	80039e0 <SPI_WaitFlagStateUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f043 0220 	orr.w	r2, r3, #32
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e00f      	b.n	8003b62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d0f2      	beq.n	8003b42 <SPI_EndRxTxTransaction+0x52>
 8003b5c:	e000      	b.n	8003b60 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b5e:	bf00      	nop
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	165e9f81 	.word	0x165e9f81

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e041      	b.n	8003c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe f8f6 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fce4 	bl	8004580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e041      	b.n	8003ca8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f839 	bl	8003cb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 fc95 	bl	8004580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_OC_Start_IT+0x28>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e022      	b.n	8003d32 <HAL_TIM_OC_Start_IT+0x6e>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d109      	bne.n	8003d06 <HAL_TIM_OC_Start_IT+0x42>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e015      	b.n	8003d32 <HAL_TIM_OC_Start_IT+0x6e>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_OC_Start_IT+0x5c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e008      	b.n	8003d32 <HAL_TIM_OC_Start_IT+0x6e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0b3      	b.n	8003ea2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_OC_Start_IT+0x86>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	e013      	b.n	8003d72 <HAL_TIM_OC_Start_IT+0xae>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_OC_Start_IT+0x96>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	e00b      	b.n	8003d72 <HAL_TIM_OC_Start_IT+0xae>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_OC_Start_IT+0xa6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	e003      	b.n	8003d72 <HAL_TIM_OC_Start_IT+0xae>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d841      	bhi.n	8003dfc <HAL_TIM_OC_Start_IT+0x138>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_TIM_OC_Start_IT+0xbc>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003dfd 	.word	0x08003dfd
 8003d88:	08003dfd 	.word	0x08003dfd
 8003d8c:	08003dfd 	.word	0x08003dfd
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dfd 	.word	0x08003dfd
 8003d98:	08003dfd 	.word	0x08003dfd
 8003d9c:	08003dfd 	.word	0x08003dfd
 8003da0:	08003dd9 	.word	0x08003dd9
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003dfd 	.word	0x08003dfd
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003deb 	.word	0x08003deb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0202 	orr.w	r2, r2, #2
 8003dc2:	60da      	str	r2, [r3, #12]
      break;
 8003dc4:	e01d      	b.n	8003e02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0204 	orr.w	r2, r2, #4
 8003dd4:	60da      	str	r2, [r3, #12]
      break;
 8003dd6:	e014      	b.n	8003e02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	60da      	str	r2, [r3, #12]
      break;
 8003de8:	e00b      	b.n	8003e02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0210 	orr.w	r2, r2, #16
 8003df8:	60da      	str	r2, [r3, #12]
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d14b      	bne.n	8003ea0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fe5b 	bl	8004acc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a24      	ldr	r2, [pc, #144]	; (8003eac <HAL_TIM_OC_Start_IT+0x1e8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_TIM_OC_Start_IT+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d013      	beq.n	8003e6c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_OC_Start_IT+0x1a8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <HAL_TIM_OC_Start_IT+0x1f8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d010      	beq.n	8003ea0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	e007      	b.n	8003ea0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40014000 	.word	0x40014000

08003ec0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d841      	bhi.n	8003f58 <HAL_TIM_OC_Stop_IT+0x98>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_TIM_OC_Stop_IT+0x1c>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f59 	.word	0x08003f59
 8003ee4:	08003f59 	.word	0x08003f59
 8003ee8:	08003f59 	.word	0x08003f59
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003f59 	.word	0x08003f59
 8003ef8:	08003f59 	.word	0x08003f59
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f47 	.word	0x08003f47
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0202 	bic.w	r2, r2, #2
 8003f1e:	60da      	str	r2, [r3, #12]
      break;
 8003f20:	e01d      	b.n	8003f5e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	60da      	str	r2, [r3, #12]
      break;
 8003f32:	e014      	b.n	8003f5e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0208 	bic.w	r2, r2, #8
 8003f42:	60da      	str	r2, [r3, #12]
      break;
 8003f44:	e00b      	b.n	8003f5e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0210 	bic.w	r2, r2, #16
 8003f54:	60da      	str	r2, [r3, #12]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fdad 	bl	8004acc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2a      	ldr	r2, [pc, #168]	; (8004020 <HAL_TIM_OC_Stop_IT+0x160>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d117      	bne.n	8003fac <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_TIM_OC_Stop_IT+0xec>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	f240 4344 	movw	r3, #1092	; 0x444
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_OC_Stop_IT+0xec>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a1a      	ldr	r2, [r3, #32]
 8003fb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_TIM_OC_Stop_IT+0x11c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	f240 4344 	movw	r3, #1092	; 0x444
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_OC_Stop_IT+0x11c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_TIM_OC_Stop_IT+0x12c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fea:	e013      	b.n	8004014 <HAL_TIM_OC_Stop_IT+0x154>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d104      	bne.n	8003ffc <HAL_TIM_OC_Stop_IT+0x13c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffa:	e00b      	b.n	8004014 <HAL_TIM_OC_Stop_IT+0x154>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d104      	bne.n	800400c <HAL_TIM_OC_Stop_IT+0x14c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400a:	e003      	b.n	8004014 <HAL_TIM_OC_Stop_IT+0x154>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000

08004024 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e041      	b.n	80040bc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f839 	bl	80040c4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fa8b 	bl	8004580 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0202 	mvn.w	r2, #2
 8004104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa11 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fd0e 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa14 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9e7 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fce4 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9ea 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b08      	cmp	r3, #8
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0208 	mvn.w	r2, #8
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2204      	movs	r2, #4
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9bd 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fcba 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f9c0 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0210 	mvn.w	r2, #16
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2208      	movs	r2, #8
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f993 	bl	8004542 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fc90 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f996 	bl	8004556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0201 	mvn.w	r2, #1
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f969 	bl	800452e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fcc0 	bl	8004c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f95b 	bl	800456a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0220 	mvn.w	r2, #32
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fc8a 	bl	8004bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004302:	2302      	movs	r3, #2
 8004304:	e048      	b.n	8004398 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	d839      	bhi.n	8004388 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004351 	.word	0x08004351
 8004320:	08004389 	.word	0x08004389
 8004324:	08004389 	.word	0x08004389
 8004328:	08004389 	.word	0x08004389
 800432c:	0800435f 	.word	0x0800435f
 8004330:	08004389 	.word	0x08004389
 8004334:	08004389 	.word	0x08004389
 8004338:	08004389 	.word	0x08004389
 800433c:	0800436d 	.word	0x0800436d
 8004340:	08004389 	.word	0x08004389
 8004344:	08004389 	.word	0x08004389
 8004348:	08004389 	.word	0x08004389
 800434c:	0800437b 	.word	0x0800437b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f992 	bl	8004680 <TIM_OC1_SetConfig>
      break;
 800435c:	e017      	b.n	800438e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f9f1 	bl	800474c <TIM_OC2_SetConfig>
      break;
 800436a:	e010      	b.n	800438e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fa56 	bl	8004824 <TIM_OC3_SetConfig>
      break;
 8004378:	e009      	b.n	800438e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fab9 	bl	80048f8 <TIM_OC4_SetConfig>
      break;
 8004386:	e002      	b.n	800438e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	75fb      	strb	r3, [r7, #23]
      break;
 800438c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIM_ConfigClockSource+0x1c>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0b4      	b.n	8004526 <HAL_TIM_ConfigClockSource+0x186>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f4:	d03e      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0xd4>
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fa:	f200 8087 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x16c>
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	f000 8086 	beq.w	8004512 <HAL_TIM_ConfigClockSource+0x172>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	d87f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 800440c:	2b70      	cmp	r3, #112	; 0x70
 800440e:	d01a      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xa6>
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d87b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d050      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x11a>
 8004418:	2b60      	cmp	r3, #96	; 0x60
 800441a:	d877      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b50      	cmp	r3, #80	; 0x50
 800441e:	d03c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0xfa>
 8004420:	2b50      	cmp	r3, #80	; 0x50
 8004422:	d873      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d058      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x13a>
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d86f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d064      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x15a>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d86b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d060      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d867      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05c      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x15a>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d05a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x15a>
 8004444:	e062      	b.n	800450c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f000 fb19 	bl	8004a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	609a      	str	r2, [r3, #8]
      break;
 8004472:	e04f      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f000 fb02 	bl	8004a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004496:	609a      	str	r2, [r3, #8]
      break;
 8004498:	e03c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 fa76 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2150      	movs	r1, #80	; 0x50
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 facf 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e02c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 fa95 	bl	80049f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2160      	movs	r1, #96	; 0x60
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fabf 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80044d8:	e01c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 fa56 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 faaf 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80044f8:	e00c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f000 faa6 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 800450a:	e003      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e000      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00f      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a31      	ldr	r2, [pc, #196]	; (8004668 <TIM_Base_SetConfig+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a30      	ldr	r2, [pc, #192]	; (800466c <TIM_Base_SetConfig+0xec>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x38>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <TIM_Base_SetConfig+0xf0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01b      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d017      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a22      	ldr	r2, [pc, #136]	; (8004668 <TIM_Base_SetConfig+0xe8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <TIM_Base_SetConfig+0xec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00f      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <TIM_Base_SetConfig+0xf0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <TIM_Base_SetConfig+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <TIM_Base_SetConfig+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <TIM_Base_SetConfig+0xfc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <TIM_Base_SetConfig+0xe4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d103      	bne.n	8004650 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	615a      	str	r2, [r3, #20]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800

08004680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0303 	bic.w	r3, r3, #3
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 0302 	bic.w	r3, r3, #2
 80046c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <TIM_OC1_SetConfig+0xc8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10c      	bne.n	80046f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0308 	bic.w	r3, r3, #8
 80046e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <TIM_OC1_SetConfig+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d111      	bne.n	8004722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40010000 	.word	0x40010000

0800474c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0210 	bic.w	r2, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <TIM_OC2_SetConfig+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10d      	bne.n	80047c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <TIM_OC2_SetConfig+0xd4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d113      	bne.n	80047f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000

08004824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <TIM_OC3_SetConfig+0xd0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10d      	bne.n	800489e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800489c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <TIM_OC3_SetConfig+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d113      	bne.n	80048ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	621a      	str	r2, [r3, #32]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40010000 	.word	0x40010000

080048f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	031b      	lsls	r3, r3, #12
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_OC4_SetConfig+0x9c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d109      	bne.n	800496c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f043 0307 	orr.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2201      	movs	r2, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e050      	b.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40014000 	.word	0x40014000

08004bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e03f      	b.n	8004cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fd f8e6 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fd49 	bl	80056f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e021      	b.n	8004d0c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	; 0x24
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cde:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fd f959 	bl	8001f98 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d130      	bne.n	8004d90 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_Transmit_IT+0x26>
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e029      	b.n	8004d92 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit_IT+0x38>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e022      	b.n	8004d92 <HAL_UART_Transmit_IT+0x7e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	88fa      	ldrh	r2, [r7, #6]
 8004d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2221      	movs	r2, #33	; 0x21
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d11d      	bne.n	8004df4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Receive_IT+0x26>
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e016      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Receive_IT+0x38>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e00f      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 faac 	bl	8005348 <UART_Start_Receive_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	e000      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b0ba      	sub	sp, #232	; 0xe8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb8f 	bl	8005582 <UART_Receive_IT>
      return;
 8004e64:	e256      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80de 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80d1 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
 8004eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
 8004ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d011      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 81ed 	beq.w	800530a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fb1a 	bl	8005582 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <HAL_UART_IRQHandler+0x17a>
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa22 	bl	80053c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d141      	bne.n	8005012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1d9      	bne.n	8004f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	4a7d      	ldr	r2, [pc, #500]	; (80051dc <HAL_UART_IRQHandler+0x3dc>)
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fbb3 	bl	800275a <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00e      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fcdc 	bl	80019c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e00a      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc fcd8 	bl	80019c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e006      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc fcd4 	bl	80019c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005026:	e170      	b.n	800530a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	bf00      	nop
    return;
 800502a:	e16e      	b.n	800530a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	f040 814a 	bne.w	80052ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8143 	beq.w	80052ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 813c 	beq.w	80052ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	f040 80b4 	bne.w	80051e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8140 	beq.w	800530e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 8139 	bcs.w	800530e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	f000 8088 	beq.w	80051c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800510e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800512a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e1      	bne.n	80050fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800514a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800515e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800516c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	f023 0310 	bic.w	r3, r3, #16
 8005196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e3      	bne.n	8005180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fd fa5c 	bl	800267a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8ac 	bl	8005330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051d8:	e099      	b.n	800530e <HAL_UART_IRQHandler+0x50e>
 80051da:	bf00      	nop
 80051dc:	0800548b 	.word	0x0800548b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 808b 	beq.w	8005312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8086 	beq.w	8005312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800521c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800522a:	647a      	str	r2, [r7, #68]	; 0x44
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e3      	bne.n	8005206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	623b      	str	r3, [r7, #32]
   return(result);
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005262:	633a      	str	r2, [r7, #48]	; 0x30
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e3      	bne.n	800523e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60fb      	str	r3, [r7, #12]
   return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052a8:	61fa      	str	r2, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	617b      	str	r3, [r7, #20]
   return(result);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e3      	bne.n	8005284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f834 	bl	8005330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c8:	e023      	b.n	8005312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_UART_IRQHandler+0x4ea>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8e5 	bl	80054b2 <UART_Transmit_IT>
    return;
 80052e8:	e014      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <HAL_UART_IRQHandler+0x514>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f925 	bl	8005552 <UART_EndTransmit_IT>
    return;
 8005308:	e004      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
    return;
 800530a:	bf00      	nop
 800530c:	e002      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
      return;
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
      return;
 8005312:	bf00      	nop
  }
}
 8005314:	37e8      	adds	r7, #232	; 0xe8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop

0800531c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2222      	movs	r2, #34	; 0x22
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005394:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0220 	orr.w	r2, r2, #32
 80053b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b095      	sub	sp, #84	; 0x54
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ec:	643a      	str	r2, [r7, #64]	; 0x40
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e5      	bne.n	80053cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3314      	adds	r3, #20
 8005406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	64bb      	str	r3, [r7, #72]	; 0x48
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	2b01      	cmp	r3, #1
 800543a:	d119      	bne.n	8005470 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	60bb      	str	r3, [r7, #8]
   return(result);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f023 0310 	bic.w	r3, r3, #16
 8005452:	647b      	str	r3, [r7, #68]	; 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545c:	61ba      	str	r2, [r7, #24]
 800545e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6979      	ldr	r1, [r7, #20]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	613b      	str	r3, [r7, #16]
   return(result);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800547e:	bf00      	nop
 8005480:	3754      	adds	r7, #84	; 0x54
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7fc fa8f 	bl	80019c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b21      	cmp	r3, #33	; 0x21
 80054c4:	d13e      	bne.n	8005544 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d114      	bne.n	80054fa <UART_Transmit_IT+0x48>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d110      	bne.n	80054fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]
 80054f8:	e008      	b.n	800550c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6211      	str	r1, [r2, #32]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4619      	mov	r1, r3
 800551a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10f      	bne.n	8005540 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800553e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e000      	b.n	8005546 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005544:	2302      	movs	r3, #2
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fed2 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b08c      	sub	sp, #48	; 0x30
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b22      	cmp	r3, #34	; 0x22
 8005594:	f040 80ab 	bne.w	80056ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a0:	d117      	bne.n	80055d2 <UART_Receive_IT+0x50>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d113      	bne.n	80055d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
 80055d0:	e026      	b.n	8005620 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d007      	beq.n	80055f6 <UART_Receive_IT+0x74>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <UART_Receive_IT+0x82>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	e008      	b.n	8005616 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005610:	b2da      	uxtb	r2, r3
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4619      	mov	r1, r3
 800562e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005630:	2b00      	cmp	r3, #0
 8005632:	d15a      	bne.n	80056ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0220 	bic.w	r2, r2, #32
 8005642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	2b01      	cmp	r3, #1
 8005672:	d135      	bne.n	80056e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	613b      	str	r3, [r7, #16]
   return(result);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f023 0310 	bic.w	r3, r3, #16
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	623a      	str	r2, [r7, #32]
 800569c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	69f9      	ldr	r1, [r7, #28]
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d10a      	bne.n	80056d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff fe29 	bl	8005330 <HAL_UARTEx_RxEventCallback>
 80056de:	e002      	b.n	80056e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fc f9b5 	bl	8001a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e002      	b.n	80056f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
  }
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3730      	adds	r7, #48	; 0x30
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b0c0      	sub	sp, #256	; 0x100
 80056fe:	af00      	add	r7, sp, #0
 8005700:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	68d9      	ldr	r1, [r3, #12]
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	ea40 0301 	orr.w	r3, r0, r1
 8005720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	431a      	orrs	r2, r3
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005750:	f021 010c 	bic.w	r1, r1, #12
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800575e:	430b      	orrs	r3, r1
 8005760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	6999      	ldr	r1, [r3, #24]
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	ea40 0301 	orr.w	r3, r0, r1
 800577e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b8f      	ldr	r3, [pc, #572]	; (80059c4 <UART_SetConfig+0x2cc>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d005      	beq.n	8005798 <UART_SetConfig+0xa0>
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b8d      	ldr	r3, [pc, #564]	; (80059c8 <UART_SetConfig+0x2d0>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d104      	bne.n	80057a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005798:	f7fd fee2 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 800579c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057a0:	e003      	b.n	80057aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7fd fec9 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80057a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	f040 810c 	bne.w	80059d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	1891      	adds	r1, r2, r2
 80057d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80057d2:	415b      	adcs	r3, r3
 80057d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057da:	4621      	mov	r1, r4
 80057dc:	eb12 0801 	adds.w	r8, r2, r1
 80057e0:	4629      	mov	r1, r5
 80057e2:	eb43 0901 	adc.w	r9, r3, r1
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057fa:	4690      	mov	r8, r2
 80057fc:	4699      	mov	r9, r3
 80057fe:	4623      	mov	r3, r4
 8005800:	eb18 0303 	adds.w	r3, r8, r3
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005808:	462b      	mov	r3, r5
 800580a:	eb49 0303 	adc.w	r3, r9, r3
 800580e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800581e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005826:	460b      	mov	r3, r1
 8005828:	18db      	adds	r3, r3, r3
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
 800582c:	4613      	mov	r3, r2
 800582e:	eb42 0303 	adc.w	r3, r2, r3
 8005832:	657b      	str	r3, [r7, #84]	; 0x54
 8005834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800583c:	f7fa fd28 	bl	8000290 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <UART_SetConfig+0x2d4>)
 8005846:	fba3 2302 	umull	r2, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	011c      	lsls	r4, r3, #4
 800584e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005852:	2200      	movs	r2, #0
 8005854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005858:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800585c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	1891      	adds	r1, r2, r2
 8005866:	64b9      	str	r1, [r7, #72]	; 0x48
 8005868:	415b      	adcs	r3, r3
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005870:	4641      	mov	r1, r8
 8005872:	eb12 0a01 	adds.w	sl, r2, r1
 8005876:	4649      	mov	r1, r9
 8005878:	eb43 0b01 	adc.w	fp, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800588c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005890:	4692      	mov	sl, r2
 8005892:	469b      	mov	fp, r3
 8005894:	4643      	mov	r3, r8
 8005896:	eb1a 0303 	adds.w	r3, sl, r3
 800589a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800589e:	464b      	mov	r3, r9
 80058a0:	eb4b 0303 	adc.w	r3, fp, r3
 80058a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058bc:	460b      	mov	r3, r1
 80058be:	18db      	adds	r3, r3, r3
 80058c0:	643b      	str	r3, [r7, #64]	; 0x40
 80058c2:	4613      	mov	r3, r2
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058d2:	f7fa fcdd 	bl	8000290 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <UART_SetConfig+0x2d4>)
 80058de:	fba3 2301 	umull	r2, r3, r3, r1
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2264      	movs	r2, #100	; 0x64
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	1acb      	subs	r3, r1, r3
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058f2:	4b36      	ldr	r3, [pc, #216]	; (80059cc <UART_SetConfig+0x2d4>)
 80058f4:	fba3 2302 	umull	r2, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005900:	441c      	add	r4, r3
 8005902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800590c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	1891      	adds	r1, r2, r2
 800591a:	63b9      	str	r1, [r7, #56]	; 0x38
 800591c:	415b      	adcs	r3, r3
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005924:	4641      	mov	r1, r8
 8005926:	1851      	adds	r1, r2, r1
 8005928:	6339      	str	r1, [r7, #48]	; 0x30
 800592a:	4649      	mov	r1, r9
 800592c:	414b      	adcs	r3, r1
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800593c:	4659      	mov	r1, fp
 800593e:	00cb      	lsls	r3, r1, #3
 8005940:	4651      	mov	r1, sl
 8005942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005946:	4651      	mov	r1, sl
 8005948:	00ca      	lsls	r2, r1, #3
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	4603      	mov	r3, r0
 8005950:	4642      	mov	r2, r8
 8005952:	189b      	adds	r3, r3, r2
 8005954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005958:	464b      	mov	r3, r9
 800595a:	460a      	mov	r2, r1
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005970:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005978:	460b      	mov	r3, r1
 800597a:	18db      	adds	r3, r3, r3
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 800597e:	4613      	mov	r3, r2
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800598a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800598e:	f7fa fc7f 	bl	8000290 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <UART_SetConfig+0x2d4>)
 8005998:	fba3 1302 	umull	r1, r3, r3, r2
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	2164      	movs	r1, #100	; 0x64
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	3332      	adds	r3, #50	; 0x32
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <UART_SetConfig+0x2d4>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	f003 0207 	and.w	r2, r3, #7
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4422      	add	r2, r4
 80059be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059c0:	e106      	b.n	8005bd0 <UART_SetConfig+0x4d8>
 80059c2:	bf00      	nop
 80059c4:	40011000 	.word	0x40011000
 80059c8:	40011400 	.word	0x40011400
 80059cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059e2:	4642      	mov	r2, r8
 80059e4:	464b      	mov	r3, r9
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	6239      	str	r1, [r7, #32]
 80059ea:	415b      	adcs	r3, r3
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059f2:	4641      	mov	r1, r8
 80059f4:	1854      	adds	r4, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb43 0501 	adc.w	r5, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	00eb      	lsls	r3, r5, #3
 8005a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a0a:	00e2      	lsls	r2, r4, #3
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	461d      	mov	r5, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	18e3      	adds	r3, r4, r3
 8005a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a18:	464b      	mov	r3, r9
 8005a1a:	eb45 0303 	adc.w	r3, r5, r3
 8005a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a3e:	4629      	mov	r1, r5
 8005a40:	008b      	lsls	r3, r1, #2
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a48:	4621      	mov	r1, r4
 8005a4a:	008a      	lsls	r2, r1, #2
 8005a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a50:	f7fa fc1e 	bl	8000290 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b60      	ldr	r3, [pc, #384]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	011c      	lsls	r4, r3, #4
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	61b9      	str	r1, [r7, #24]
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a84:	4641      	mov	r1, r8
 8005a86:	1851      	adds	r1, r2, r1
 8005a88:	6139      	str	r1, [r7, #16]
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	414b      	adcs	r3, r1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	00cb      	lsls	r3, r1, #3
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	00ca      	lsls	r2, r1, #3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ab8:	464b      	mov	r3, r9
 8005aba:	460a      	mov	r2, r1
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005adc:	4649      	mov	r1, r9
 8005ade:	008b      	lsls	r3, r1, #2
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	008a      	lsls	r2, r1, #2
 8005aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aee:	f7fa fbcf 	bl	8000290 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2301 	umull	r2, r3, r3, r1
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2264      	movs	r2, #100	; 0x64
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	1acb      	subs	r3, r1, r3
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	3332      	adds	r3, #50	; 0x32
 8005b0c:	4a33      	ldr	r2, [pc, #204]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b18:	441c      	add	r4, r3
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	673b      	str	r3, [r7, #112]	; 0x70
 8005b22:	677a      	str	r2, [r7, #116]	; 0x74
 8005b24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	415b      	adcs	r3, r3
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b38:	4641      	mov	r1, r8
 8005b3a:	1851      	adds	r1, r2, r1
 8005b3c:	6039      	str	r1, [r7, #0]
 8005b3e:	4649      	mov	r1, r9
 8005b40:	414b      	adcs	r3, r1
 8005b42:	607b      	str	r3, [r7, #4]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b50:	4659      	mov	r1, fp
 8005b52:	00cb      	lsls	r3, r1, #3
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	00ca      	lsls	r2, r1, #3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	4642      	mov	r2, r8
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	eb42 0303 	adc.w	r3, r2, r3
 8005b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7e:	667a      	str	r2, [r7, #100]	; 0x64
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	008b      	lsls	r3, r1, #2
 8005b90:	4641      	mov	r1, r8
 8005b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b96:	4641      	mov	r1, r8
 8005b98:	008a      	lsls	r2, r1, #2
 8005b9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b9e:	f7fa fb77 	bl	8000290 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	2164      	movs	r1, #100	; 0x64
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	3332      	adds	r3, #50	; 0x32
 8005bba:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4422      	add	r2, r4
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bdc:	51eb851f 	.word	0x51eb851f

08005be0 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8005bf0:	2bf1      	cmp	r3, #241	; 0xf1
 8005bf2:	dd01      	ble.n	8005bf8 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e099      	b.n	8005d2c <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8005c02:	f107 0108 	add.w	r1, r7, #8
 8005c06:	220a      	movs	r2, #10
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f003 f8fc 	bl	8008e06 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f7fa fadf 	bl	80001e0 <strlen>
 8005c22:	4603      	mov	r3, r0
 8005c24:	4423      	add	r3, r4
 8005c26:	4943      	ldr	r1, [pc, #268]	; (8005d34 <LoRa_Send+0x154>)
 8005c28:	461a      	mov	r2, r3
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	cb03      	ldmia	r3!, {r0, r1}
 8005c2e:	6010      	str	r0, [r2, #0]
 8005c30:	6051      	str	r1, [r2, #4]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 0516 	add.w	r5, r3, #22
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3316      	adds	r3, #22
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa faca 	bl	80001e0 <strlen>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4629      	mov	r1, r5
 8005c52:	4620      	mov	r0, r4
 8005c54:	f003 fac3 	bl	80091de <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7fa fabe 	bl	80001e0 <strlen>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4423      	add	r3, r4
 8005c68:	4933      	ldr	r1, [pc, #204]	; (8005d38 <LoRa_Send+0x158>)
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa faaf 	bl	80001e0 <strlen>
 8005c82:	4602      	mov	r2, r0
 8005c84:	f107 0308 	add.w	r3, r7, #8
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f003 faa7 	bl	80091de <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7fa faa2 	bl	80001e0 <strlen>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4423      	add	r3, r4
 8005ca0:	4925      	ldr	r1, [pc, #148]	; (8005d38 <LoRa_Send+0x158>)
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa fa95 	bl	80001e0 <strlen>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
		int lc=0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
		while(la < lb )
 8005cca:	e012      	b.n	8005cf2 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 8005cd6:	7819      	ldrb	r1, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	701a      	strb	r2, [r3, #0]
			la++;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
			lc++;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
		while(la < lb )
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	dbe8      	blt.n	8005ccc <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	617a      	str	r2, [r7, #20]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	220d      	movs	r2, #13
 8005d06:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	617a      	str	r2, [r7, #20]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	220a      	movs	r2, #10
 8005d16:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	b292      	uxth	r2, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	6838      	ldr	r0, [r7, #0]
 8005d28:	f7fe fff4 	bl	8004d14 <HAL_UART_Transmit_IT>
	}

}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bdb0      	pop	{r4, r5, r7, pc}
 8005d34:	0800a55c 	.word	0x0800a55c
 8005d38:	0800a568 	.word	0x0800a568

08005d3c <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa25 	bl	80061cc <Lora_idSTR>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	f200 820c 	bhi.w	80061a2 <LoRa_decode+0x42e>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <LoRa_decode+0x1c>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005ead 	.word	0x08005ead
 8005d98:	080060e1 	.word	0x080060e1
 8005d9c:	080060eb 	.word	0x080060eb
 8005da0:	080060f5 	.word	0x080060f5
 8005da4:	080060ff 	.word	0x080060ff
 8005da8:	08006109 	.word	0x08006109
 8005dac:	08006113 	.word	0x08006113
 8005db0:	0800611d 	.word	0x0800611d
 8005db4:	08006127 	.word	0x08006127
 8005db8:	08006131 	.word	0x08006131
 8005dbc:	08006171 	.word	0x08006171
 8005dc0:	0800617b 	.word	0x0800617b
 8005dc4:	0800618f 	.word	0x0800618f
 8005dc8:	08006185 	.word	0x08006185
 8005dcc:	080060d7 	.word	0x080060d7
 8005dd0:	08006199 	.word	0x08006199
	{
		case _OK:
		{
			switch(b->estado)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	2b13      	cmp	r3, #19
 8005dde:	d860      	bhi.n	8005ea2 <LoRa_decode+0x12e>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <LoRa_decode+0x74>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e39 	.word	0x08005e39
 8005dec:	08005ea3 	.word	0x08005ea3
 8005df0:	08005ea3 	.word	0x08005ea3
 8005df4:	08005ea3 	.word	0x08005ea3
 8005df8:	08005ea3 	.word	0x08005ea3
 8005dfc:	08005ea3 	.word	0x08005ea3
 8005e00:	08005e43 	.word	0x08005e43
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005ea3 	.word	0x08005ea3
 8005e0c:	08005e57 	.word	0x08005e57
 8005e10:	08005ea3 	.word	0x08005ea3
 8005e14:	08005e61 	.word	0x08005e61
 8005e18:	08005ea3 	.word	0x08005ea3
 8005e1c:	08005e6b 	.word	0x08005e6b
 8005e20:	08005ea3 	.word	0x08005ea3
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005ea3 	.word	0x08005ea3
 8005e2c:	08005e7f 	.word	0x08005e7f
 8005e30:	08005ea3 	.word	0x08005ea3
 8005e34:	08005e89 	.word	0x08005e89
			{
				case _AT_SENT:
					b->estado=_IDLE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e40:	e02f      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2206      	movs	r2, #6
 8005e46:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e4a:	e02a      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2209      	movs	r2, #9
 8005e50:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e54:	e025      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	220b      	movs	r2, #11
 8005e5a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e5e:	e020      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	220d      	movs	r2, #13
 8005e64:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e68:	e01b      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e72:	e016      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2211      	movs	r2, #17
 8005e78:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e7c:	e011      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2213      	movs	r2, #19
 8005e82:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 8005e86:	e00c      	b.n	8005ea2 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2215      	movs	r2, #21
 8005e8c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 8005e98:	2111      	movs	r1, #17
 8005e9a:	48a8      	ldr	r0, [pc, #672]	; (800613c <LoRa_decode+0x3c8>)
 8005e9c:	f7fb f90a 	bl	80010b4 <ITM0_Write>
					}
					break;
 8005ea0:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 8005ea2:	210c      	movs	r1, #12
 8005ea4:	48a6      	ldr	r0, [pc, #664]	; (8006140 <LoRa_decode+0x3cc>)
 8005ea6:	f7fb f905 	bl	80010b4 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 8005eaa:	e17f      	b.n	80061ac <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 8005eac:	210d      	movs	r1, #13
 8005eae:	48a5      	ldr	r0, [pc, #660]	; (8006144 <LoRa_decode+0x3d0>)
 8005eb0:	f7fb f900 	bl	80010b4 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	221a      	movs	r2, #26
 8005eb8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
					int j=0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
					int lngt=0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 8005ed0:	e002      	b.n	8005ed8 <LoRa_decode+0x164>
					{ i++;}
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	3356      	adds	r3, #86	; 0x56
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b3d      	cmp	r3, #61	; 0x3d
 8005ee4:	d1f5      	bne.n	8005ed2 <LoRa_decode+0x15e>
					i++;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 8005eec:	e017      	b.n	8005f1e <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3356      	adds	r3, #86	; 0x56
 8005ef6:	7819      	ldrb	r1, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	3306      	adds	r3, #6
 8005f00:	460a      	mov	r2, r1
 8005f02:	701a      	strb	r2, [r3, #0]
						i++;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
						j++;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
						if (j > 6)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	dd03      	ble.n	8005f1e <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fbca 	bl	80066b0 <Lora_rx_del>
							break;
 8005f1c:	e006      	b.n	8005f2c <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4413      	add	r3, r2
 8005f24:	3356      	adds	r3, #86	; 0x56
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b2c      	cmp	r3, #44	; 0x2c
 8005f2a:	d1e0      	bne.n	8005eee <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4413      	add	r3, r2
 8005f32:	3306      	adds	r3, #6
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
					j=0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
					i++;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 8005f42:	e017      	b.n	8005f74 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3356      	adds	r3, #86	; 0x56
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	330c      	adds	r3, #12
 8005f56:	460a      	mov	r2, r1
 8005f58:	701a      	strb	r2, [r3, #0]
						i++;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
						j++;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
						if (j > 4)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	dd03      	ble.n	8005f74 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb9f 	bl	80066b0 <Lora_rx_del>
							break;
 8005f72:	e006      	b.n	8005f82 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3356      	adds	r3, #86	; 0x56
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b2c      	cmp	r3, #44	; 0x2c
 8005f80:	d1e0      	bne.n	8005f44 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4413      	add	r3, r2
 8005f88:	330c      	adds	r3, #12
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
					j=0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
					i++;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	210a      	movs	r1, #10
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f002 ff15 	bl	8008dce <atoi>
 8005fa4:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 8005fa6:	e019      	b.n	8005fdc <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	3356      	adds	r3, #86	; 0x56
 8005fb0:	7819      	ldrb	r1, [r3, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]
						j++;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	613b      	str	r3, [r7, #16]
						i++;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	dd03      	ble.n	8005fdc <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb6b 	bl	80066b0 <Lora_rx_del>
							break;
 8005fda:	e006      	b.n	8005fea <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3356      	adds	r3, #86	; 0x56
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b2c      	cmp	r3, #44	; 0x2c
 8005fe8:	d1de      	bne.n	8005fa8 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
					i++;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 8005ffc:	e017      	b.n	800602e <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	3356      	adds	r3, #86	; 0x56
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	3310      	adds	r3, #16
 8006010:	460a      	mov	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]
						i++;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3301      	adds	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
						j++;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3301      	adds	r3, #1
 800601e:	613b      	str	r3, [r7, #16]
						if (j > 5)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b05      	cmp	r3, #5
 8006024:	dd03      	ble.n	800602e <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb42 	bl	80066b0 <Lora_rx_del>
							break;
 800602c:	e006      	b.n	800603c <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	3356      	adds	r3, #86	; 0x56
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b2c      	cmp	r3, #44	; 0x2c
 800603a:	d1e0      	bne.n	8005ffe <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3310      	adds	r3, #16
 8006040:	210a      	movs	r1, #10
 8006042:	4618      	mov	r0, r3
 8006044:	f002 fec3 	bl	8008dce <atoi>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	3310      	adds	r3, #16
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
					j=0;
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
					i++;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	3301      	adds	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 8006066:	e017      	b.n	8006098 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	3356      	adds	r3, #86	; 0x56
 8006070:	7819      	ldrb	r1, [r3, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	3310      	adds	r3, #16
 800607a:	460a      	mov	r2, r1
 800607c:	701a      	strb	r2, [r3, #0]
						i++;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3301      	adds	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
						j++;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3301      	adds	r3, #1
 8006088:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b05      	cmp	r3, #5
 800608e:	dd03      	ble.n	8006098 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb0d 	bl	80066b0 <Lora_rx_del>
							break;
 8006096:	e006      	b.n	80060a6 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	4413      	add	r3, r2
 800609e:	3356      	adds	r3, #86	; 0x56
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b0d      	cmp	r3, #13
 80060a4:	d1e0      	bne.n	8006068 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	3310      	adds	r3, #16
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3310      	adds	r3, #16
 80060b6:	210a      	movs	r1, #10
 80060b8:	4618      	mov	r0, r3
 80060ba:	f002 fe88 	bl	8008dce <atoi>
 80060be:	4602      	mov	r2, r0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 80060d4:	e06a      	b.n	80061ac <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 80060d6:	210d      	movs	r1, #13
 80060d8:	481b      	ldr	r0, [pc, #108]	; (8006148 <LoRa_decode+0x3d4>)
 80060da:	f7fa ffeb 	bl	80010b4 <ITM0_Write>
			break;
 80060de:	e065      	b.n	80061ac <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 80060e0:	210f      	movs	r1, #15
 80060e2:	481a      	ldr	r0, [pc, #104]	; (800614c <LoRa_decode+0x3d8>)
 80060e4:	f7fa ffe6 	bl	80010b4 <ITM0_Write>
			break;
 80060e8:	e060      	b.n	80061ac <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 80060ea:	210f      	movs	r1, #15
 80060ec:	4818      	ldr	r0, [pc, #96]	; (8006150 <LoRa_decode+0x3dc>)
 80060ee:	f7fa ffe1 	bl	80010b4 <ITM0_Write>
			break;
 80060f2:	e05b      	b.n	80061ac <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 80060f4:	210e      	movs	r1, #14
 80060f6:	4817      	ldr	r0, [pc, #92]	; (8006154 <LoRa_decode+0x3e0>)
 80060f8:	f7fa ffdc 	bl	80010b4 <ITM0_Write>
			break;
 80060fc:	e056      	b.n	80061ac <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 80060fe:	210d      	movs	r1, #13
 8006100:	4815      	ldr	r0, [pc, #84]	; (8006158 <LoRa_decode+0x3e4>)
 8006102:	f7fa ffd7 	bl	80010b4 <ITM0_Write>
			break;
 8006106:	e051      	b.n	80061ac <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 8006108:	2113      	movs	r1, #19
 800610a:	4814      	ldr	r0, [pc, #80]	; (800615c <LoRa_decode+0x3e8>)
 800610c:	f7fa ffd2 	bl	80010b4 <ITM0_Write>
			break;
 8006110:	e04c      	b.n	80061ac <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 8006112:	210e      	movs	r1, #14
 8006114:	4812      	ldr	r0, [pc, #72]	; (8006160 <LoRa_decode+0x3ec>)
 8006116:	f7fa ffcd 	bl	80010b4 <ITM0_Write>
			break;
 800611a:	e047      	b.n	80061ac <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800611c:	2111      	movs	r1, #17
 800611e:	4811      	ldr	r0, [pc, #68]	; (8006164 <LoRa_decode+0x3f0>)
 8006120:	f7fa ffc8 	bl	80010b4 <ITM0_Write>
			break;
 8006124:	e042      	b.n	80061ac <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 8006126:	2111      	movs	r1, #17
 8006128:	480f      	ldr	r0, [pc, #60]	; (8006168 <LoRa_decode+0x3f4>)
 800612a:	f7fa ffc3 	bl	80010b4 <ITM0_Write>
			break;
 800612e:	e03d      	b.n	80061ac <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 8006130:	210e      	movs	r1, #14
 8006132:	480e      	ldr	r0, [pc, #56]	; (800616c <LoRa_decode+0x3f8>)
 8006134:	f7fa ffbe 	bl	80010b4 <ITM0_Write>
			break;
 8006138:	e038      	b.n	80061ac <LoRa_decode+0x438>
 800613a:	bf00      	nop
 800613c:	0800a598 	.word	0x0800a598
 8006140:	0800a5ac 	.word	0x0800a5ac
 8006144:	0800a5bc 	.word	0x0800a5bc
 8006148:	0800a5cc 	.word	0x0800a5cc
 800614c:	0800a5dc 	.word	0x0800a5dc
 8006150:	0800a5ec 	.word	0x0800a5ec
 8006154:	0800a5fc 	.word	0x0800a5fc
 8006158:	0800a60c 	.word	0x0800a60c
 800615c:	0800a61c 	.word	0x0800a61c
 8006160:	0800a630 	.word	0x0800a630
 8006164:	0800a640 	.word	0x0800a640
 8006168:	0800a654 	.word	0x0800a654
 800616c:	0800a668 	.word	0x0800a668
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 8006170:	210f      	movs	r1, #15
 8006172:	4810      	ldr	r0, [pc, #64]	; (80061b4 <LoRa_decode+0x440>)
 8006174:	f7fa ff9e 	bl	80010b4 <ITM0_Write>
			break;
 8006178:	e018      	b.n	80061ac <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800617a:	210e      	movs	r1, #14
 800617c:	480e      	ldr	r0, [pc, #56]	; (80061b8 <LoRa_decode+0x444>)
 800617e:	f7fa ff99 	bl	80010b4 <ITM0_Write>
			break;
 8006182:	e013      	b.n	80061ac <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 8006184:	210d      	movs	r1, #13
 8006186:	480d      	ldr	r0, [pc, #52]	; (80061bc <LoRa_decode+0x448>)
 8006188:	f7fa ff94 	bl	80010b4 <ITM0_Write>
			break;
 800618c:	e00e      	b.n	80061ac <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800618e:	210d      	movs	r1, #13
 8006190:	480b      	ldr	r0, [pc, #44]	; (80061c0 <LoRa_decode+0x44c>)
 8006192:	f7fa ff8f 	bl	80010b4 <ITM0_Write>
			break;
 8006196:	e009      	b.n	80061ac <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 8006198:	2114      	movs	r1, #20
 800619a:	480a      	ldr	r0, [pc, #40]	; (80061c4 <LoRa_decode+0x450>)
 800619c:	f7fa ff8a 	bl	80010b4 <ITM0_Write>
			break;
 80061a0:	e004      	b.n	80061ac <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 80061a2:	2110      	movs	r1, #16
 80061a4:	4808      	ldr	r0, [pc, #32]	; (80061c8 <LoRa_decode+0x454>)
 80061a6:	f7fa ff85 	bl	80010b4 <ITM0_Write>
			break;
 80061aa:	bf00      	nop
	}
 }
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	0800a678 	.word	0x0800a678
 80061b8:	0800a688 	.word	0x0800a688
 80061bc:	0800a698 	.word	0x0800a698
 80061c0:	0800a6a8 	.word	0x0800a6a8
 80061c4:	0800a6b8 	.word	0x0800a6b8
 80061c8:	0800a6d0 	.word	0x0800a6d0

080061cc <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b090      	sub	sp, #64	; 0x40
 80061d0:	af06      	add	r7, sp, #24
 80061d2:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 80061da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80061de:	dd01      	ble.n	80061e4 <Lora_idSTR+0x18>
 80061e0:	2310      	movs	r3, #16
 80061e2:	e257      	b.n	8006694 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 80061e8:	2304      	movs	r3, #4
 80061ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80061f8:	f107 021c 	add.w	r2, r7, #28
 80061fc:	2300      	movs	r3, #0
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	f107 0320 	add.w	r3, r7, #32
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006210:	9302      	str	r3, [sp, #8]
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	4ab7      	ldr	r2, [pc, #732]	; (8006500 <Lora_idSTR+0x334>)
 8006222:	f002 f9cb 	bl	80085bc <FT_String_ND>
 8006226:	4603      	mov	r3, r0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <Lora_idSTR+0x64>
 800622c:	2300      	movs	r3, #0
 800622e:	e231      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 8006230:	2305      	movs	r3, #5
 8006232:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006240:	f107 021c 	add.w	r2, r7, #28
 8006244:	2300      	movs	r3, #0
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	f107 0320 	add.w	r3, r7, #32
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006258:	9302      	str	r3, [sp, #8]
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	f107 0310 	add.w	r3, r7, #16
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	4aa6      	ldr	r2, [pc, #664]	; (8006504 <Lora_idSTR+0x338>)
 800626a:	f002 f9a7 	bl	80085bc <FT_String_ND>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <Lora_idSTR+0xac>
 8006274:	2301      	movs	r3, #1
 8006276:	e20d      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 8006278:	2305      	movs	r3, #5
 800627a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006288:	f107 021c 	add.w	r2, r7, #28
 800628c:	2300      	movs	r3, #0
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	f107 0320 	add.w	r3, r7, #32
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a0:	9302      	str	r3, [sp, #8]
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	f107 0310 	add.w	r3, r7, #16
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	4a95      	ldr	r2, [pc, #596]	; (8006508 <Lora_idSTR+0x33c>)
 80062b2:	f002 f983 	bl	80085bc <FT_String_ND>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <Lora_idSTR+0xf4>
 80062bc:	230f      	movs	r3, #15
 80062be:	e1e9      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 80062c0:	2306      	movs	r3, #6
 80062c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80062d0:	f107 021c 	add.w	r2, r7, #28
 80062d4:	2300      	movs	r3, #0
 80062d6:	9305      	str	r3, [sp, #20]
 80062d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	f107 0320 	add.w	r3, r7, #32
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	4a84      	ldr	r2, [pc, #528]	; (800650c <Lora_idSTR+0x340>)
 80062fa:	f002 f95f 	bl	80085bc <FT_String_ND>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <Lora_idSTR+0x13c>
 8006304:	2302      	movs	r3, #2
 8006306:	e1c5      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 8006308:	2306      	movs	r3, #6
 800630a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006318:	f107 021c 	add.w	r2, r7, #28
 800631c:	2300      	movs	r3, #0
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	f107 0320 	add.w	r3, r7, #32
 800632a:	9303      	str	r3, [sp, #12]
 800632c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006330:	9302      	str	r3, [sp, #8]
 8006332:	f107 030c 	add.w	r3, r7, #12
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	f107 0310 	add.w	r3, r7, #16
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	4a73      	ldr	r2, [pc, #460]	; (8006510 <Lora_idSTR+0x344>)
 8006342:	f002 f93b 	bl	80085bc <FT_String_ND>
 8006346:	4603      	mov	r3, r0
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <Lora_idSTR+0x184>
 800634c:	2303      	movs	r3, #3
 800634e:	e1a1      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 8006350:	2306      	movs	r3, #6
 8006352:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006360:	f107 021c 	add.w	r2, r7, #28
 8006364:	2300      	movs	r3, #0
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	f107 0320 	add.w	r3, r7, #32
 8006372:	9303      	str	r3, [sp, #12]
 8006374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006378:	9302      	str	r3, [sp, #8]
 800637a:	f107 030c 	add.w	r3, r7, #12
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	f107 0310 	add.w	r3, r7, #16
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	4a62      	ldr	r2, [pc, #392]	; (8006514 <Lora_idSTR+0x348>)
 800638a:	f002 f917 	bl	80085bc <FT_String_ND>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <Lora_idSTR+0x1cc>
 8006394:	2304      	movs	r3, #4
 8006396:	e17d      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 8006398:	2305      	movs	r3, #5
 800639a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80063a8:	f107 021c 	add.w	r2, r7, #28
 80063ac:	2300      	movs	r3, #0
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	f107 0320 	add.w	r3, r7, #32
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	f107 0310 	add.w	r3, r7, #16
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4613      	mov	r3, r2
 80063d0:	4a51      	ldr	r2, [pc, #324]	; (8006518 <Lora_idSTR+0x34c>)
 80063d2:	f002 f8f3 	bl	80085bc <FT_String_ND>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <Lora_idSTR+0x214>
 80063dc:	2305      	movs	r3, #5
 80063de:	e159      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 80063e0:	230b      	movs	r3, #11
 80063e2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80063f0:	f107 021c 	add.w	r2, r7, #28
 80063f4:	2300      	movs	r3, #0
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	f107 0320 	add.w	r3, r7, #32
 8006402:	9303      	str	r3, [sp, #12]
 8006404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006408:	9302      	str	r3, [sp, #8]
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	4a40      	ldr	r2, [pc, #256]	; (800651c <Lora_idSTR+0x350>)
 800641a:	f002 f8cf 	bl	80085bc <FT_String_ND>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <Lora_idSTR+0x25c>
 8006424:	2306      	movs	r3, #6
 8006426:	e135      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 8006428:	2306      	movs	r3, #6
 800642a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006438:	f107 021c 	add.w	r2, r7, #28
 800643c:	2300      	movs	r3, #0
 800643e:	9305      	str	r3, [sp, #20]
 8006440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	f107 0320 	add.w	r3, r7, #32
 800644a:	9303      	str	r3, [sp, #12]
 800644c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <Lora_idSTR+0x354>)
 8006462:	f002 f8ab 	bl	80085bc <FT_String_ND>
 8006466:	4603      	mov	r3, r0
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <Lora_idSTR+0x2a4>
 800646c:	2307      	movs	r3, #7
 800646e:	e111      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 8006470:	2309      	movs	r3, #9
 8006472:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006480:	f107 021c 	add.w	r2, r7, #28
 8006484:	2300      	movs	r3, #0
 8006486:	9305      	str	r3, [sp, #20]
 8006488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	f107 0320 	add.w	r3, r7, #32
 8006492:	9303      	str	r3, [sp, #12]
 8006494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	f107 030c 	add.w	r3, r7, #12
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4613      	mov	r3, r2
 80064a8:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <Lora_idSTR+0x358>)
 80064aa:	f002 f887 	bl	80085bc <FT_String_ND>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <Lora_idSTR+0x2ec>
 80064b4:	2308      	movs	r3, #8
 80064b6:	e0ed      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 80064b8:	2309      	movs	r3, #9
 80064ba:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80064c8:	f107 021c 	add.w	r2, r7, #28
 80064cc:	2300      	movs	r3, #0
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	f107 0320 	add.w	r3, r7, #32
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	f107 030c 	add.w	r3, r7, #12
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	4a0d      	ldr	r2, [pc, #52]	; (8006528 <Lora_idSTR+0x35c>)
 80064f2:	f002 f863 	bl	80085bc <FT_String_ND>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d117      	bne.n	800652c <Lora_idSTR+0x360>
 80064fc:	2309      	movs	r3, #9
 80064fe:	e0c9      	b.n	8006694 <Lora_idSTR+0x4c8>
 8006500:	0800a6e4 	.word	0x0800a6e4
 8006504:	0800a6ec 	.word	0x0800a6ec
 8006508:	0800a6f4 	.word	0x0800a6f4
 800650c:	0800a6fc 	.word	0x0800a6fc
 8006510:	0800a704 	.word	0x0800a704
 8006514:	0800a70c 	.word	0x0800a70c
 8006518:	0800a714 	.word	0x0800a714
 800651c:	0800a71c 	.word	0x0800a71c
 8006520:	0800a728 	.word	0x0800a728
 8006524:	0800a730 	.word	0x0800a730
 8006528:	0800a73c 	.word	0x0800a73c
		i=strlen("+CPIN=");
 800652c:	2306      	movs	r3, #6
 800652e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f103 0056 	add.w	r0, r3, #86	; 0x56
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800653c:	f107 021c 	add.w	r2, r7, #28
 8006540:	2300      	movs	r3, #0
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	f107 0320 	add.w	r3, r7, #32
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	f107 030c 	add.w	r3, r7, #12
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f107 0310 	add.w	r3, r7, #16
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4613      	mov	r3, r2
 8006564:	4a4d      	ldr	r2, [pc, #308]	; (800669c <Lora_idSTR+0x4d0>)
 8006566:	f002 f829 	bl	80085bc <FT_String_ND>
 800656a:	4603      	mov	r3, r0
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <Lora_idSTR+0x3a8>
 8006570:	230a      	movs	r3, #10
 8006572:	e08f      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 8006574:	2307      	movs	r3, #7
 8006576:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006584:	f107 021c 	add.w	r2, r7, #28
 8006588:	2300      	movs	r3, #0
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	f107 0320 	add.w	r3, r7, #32
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	f107 0310 	add.w	r3, r7, #16
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	4a3c      	ldr	r2, [pc, #240]	; (80066a0 <Lora_idSTR+0x4d4>)
 80065ae:	f002 f805 	bl	80085bc <FT_String_ND>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <Lora_idSTR+0x3f0>
 80065b8:	230b      	movs	r3, #11
 80065ba:	e06b      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 80065bc:	2306      	movs	r3, #6
 80065be:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 80065cc:	f107 021c 	add.w	r2, r7, #28
 80065d0:	2300      	movs	r3, #0
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	f107 0320 	add.w	r3, r7, #32
 80065de:	9303      	str	r3, [sp, #12]
 80065e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e4:	9302      	str	r3, [sp, #8]
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	4a2b      	ldr	r2, [pc, #172]	; (80066a4 <Lora_idSTR+0x4d8>)
 80065f6:	f001 ffe1 	bl	80085bc <FT_String_ND>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <Lora_idSTR+0x438>
 8006600:	230c      	movs	r3, #12
 8006602:	e047      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 8006604:	2305      	movs	r3, #5
 8006606:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 8006614:	f107 021c 	add.w	r2, r7, #28
 8006618:	2300      	movs	r3, #0
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006620:	9304      	str	r3, [sp, #16]
 8006622:	f107 0320 	add.w	r3, r7, #32
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800662c:	9302      	str	r3, [sp, #8]
 800662e:	f107 030c 	add.w	r3, r7, #12
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	f107 0310 	add.w	r3, r7, #16
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <Lora_idSTR+0x4dc>)
 800663e:	f001 ffbd 	bl	80085bc <FT_String_ND>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <Lora_idSTR+0x480>
 8006648:	230e      	movs	r3, #14
 800664a:	e023      	b.n	8006694 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800664c:	2305      	movs	r3, #5
 800664e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f103 0056 	add.w	r0, r3, #86	; 0x56
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800665c:	f107 021c 	add.w	r2, r7, #28
 8006660:	2300      	movs	r3, #0
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	f107 0320 	add.w	r3, r7, #32
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	f107 030c 	add.w	r3, r7, #12
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	4a09      	ldr	r2, [pc, #36]	; (80066ac <Lora_idSTR+0x4e0>)
 8006686:	f001 ff99 	bl	80085bc <FT_String_ND>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <Lora_idSTR+0x4c8>
 8006690:	230d      	movs	r3, #13
 8006692:	e7ff      	b.n	8006694 <Lora_idSTR+0x4c8>
}
 8006694:	4618      	mov	r0, r3
 8006696:	3728      	adds	r7, #40	; 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	0800a748 	.word	0x0800a748
 80066a0:	0800a750 	.word	0x0800a750
 80066a4:	0800a758 	.word	0x0800a758
 80066a8:	0800a760 	.word	0x0800a760
 80066ac:	0800a768 	.word	0x0800a768

080066b0 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80066fe:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <ModBUS_Config+0xa0>)
 8006712:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <ModBUS_Config+0xa4>)
 8006728:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2210      	movs	r2, #16
 8006736:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2210      	movs	r2, #16
 8006744:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	f0f0af5a 	.word	0xf0f0af5a
 8006788:	a5fa0f0f 	.word	0xa5fa0f0f

0800678c <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3305      	adds	r3, #5
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	3306      	adds	r3, #6
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d10b      	bne.n	80067bc <ModBUS_Check+0x30>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3302      	adds	r3, #2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3303      	adds	r3, #3
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4413      	add	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <ModBUS_Check+0x30>
	{
		return(1);
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 80067bc:	2300      	movs	r3, #0
	}
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7c9b      	ldrb	r3, [r3, #18]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d11d      	bne.n	800681c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d116      	bne.n	800681c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d10f      	bne.n	800681c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 8006806:	429a      	cmp	r2, r3
 8006808:	d108      	bne.n	800681c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 8006814:	429a      	cmp	r2, r3
 8006816:	d101      	bne.n	800681c <ModBUS_Check_tid+0x52>
	{
		return(1);
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800681c:	2300      	movs	r3, #0
	}
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
 8006836:	4613      	mov	r3, r2
 8006838:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	429a      	cmp	r2, r3
 8006848:	d901      	bls.n	800684e <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800684a:	2301      	movs	r3, #1
 800684c:	e016      	b.n	800687c <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	3301      	adds	r3, #1
 8006858:	883a      	ldrh	r2, [r7, #0]
 800685a:	b2d1      	uxtb	r1, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	460a      	mov	r2, r1
 8006862:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 8006866:	883b      	ldrh	r3, [r7, #0]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800687a:	2300      	movs	r3, #0
	}
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 8006894:	2300      	movs	r3, #0
 8006896:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 8006898:	2300      	movs	r3, #0
 800689a:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d901      	bls.n	80068ac <ModBUS_F03_Read+0x24>
	{
		return(1);
 80068a8:	2301      	movs	r3, #1
 80068aa:	e016      	b.n	80068da <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 80068bc:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 80068be:	89fb      	ldrh	r3, [r7, #14]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	3301      	adds	r3, #1
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	81fb      	strh	r3, [r7, #14]
		return(n);
 80068d8:	89fb      	ldrh	r3, [r7, #14]
	}
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	807b      	strh	r3, [r7, #2]
 80068f2:	4613      	mov	r3, r2
 80068f4:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 80068f6:	887b      	ldrh	r3, [r7, #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800690a:	887b      	ldrh	r3, [r7, #2]
 800690c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006910:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 8006912:	887b      	ldrh	r3, [r7, #2]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 8006918:	887b      	ldrh	r3, [r7, #2]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2206      	movs	r2, #6
 800694c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2203      	movs	r2, #3
 800695e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 8006962:	887b      	ldrh	r3, [r7, #2]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	787a      	ldrb	r2, [r7, #1]
 8006978:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	220c      	movs	r2, #12
 8006980:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 8006984:	bf00      	nop
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b09c      	sub	sp, #112	; 0x70
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	791b      	ldrb	r3, [r3, #4]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f041 813f 	bne.w	8007c24 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f103 0212 	add.w	r2, r3, #18
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f7ff fee9 	bl	800678c <ModBUS_Check>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f001 812f 	beq.w	8007c20 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7e5b      	ldrb	r3, [r3, #25]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	f201 80f3 	bhi.w	8007bb4 <ModBUS+0x1220>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <ModBUS+0x40>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a15 	.word	0x08006a15
 80069d8:	08006c55 	.word	0x08006c55
 80069dc:	08006e95 	.word	0x08006e95
 80069e0:	080070cd 	.word	0x080070cd
 80069e4:	08007305 	.word	0x08007305
 80069e8:	0800751b 	.word	0x0800751b
 80069ec:	08007bb5 	.word	0x08007bb5
 80069f0:	08007bb5 	.word	0x08007bb5
 80069f4:	08007bb5 	.word	0x08007bb5
 80069f8:	08007bb5 	.word	0x08007bb5
 80069fc:	08007bb5 	.word	0x08007bb5
 8006a00:	08007bb5 	.word	0x08007bb5
 8006a04:	08007bb5 	.word	0x08007bb5
 8006a08:	08007bb5 	.word	0x08007bb5
 8006a0c:	080076d7 	.word	0x080076d7
 8006a10:	08007967 	.word	0x08007967

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7d9a      	ldrb	r2, [r3, #22]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	7d5a      	ldrb	r2, [r3, #21]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7d1a      	ldrb	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7cda      	ldrb	r2, [r3, #19]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7c9a      	ldrb	r2, [r3, #18]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7a9b      	ldrb	r3, [r3, #10]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	f040 80e6 	bne.w	8006c20 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7e9b      	ldrb	r3, [r3, #26]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 8006a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7edb      	ldrb	r3, [r3, #27]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7f1b      	ldrb	r3, [r3, #28]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 8006aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7f5b      	ldrb	r3, [r3, #29]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d87e      	bhi.n	8006bec <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 8006afc:	4413      	add	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 8006b04:	4293      	cmp	r3, r2
 8006b06:	dc57      	bgt.n	8006bb8 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	2300      	movs	r3, #0
 8006b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b14:	2300      	movs	r3, #0
 8006b16:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 8006b28:	40d3      	lsrs	r3, r2
 8006b2a:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 8006b32:	08db      	lsrs	r3, r3, #3
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <ModBUS+0x1bc>
									{
										bytes=div;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4e:	e002      	b.n	8006b56 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	3301      	adds	r3, #1
 8006b54:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 8006b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 8006b60:	e00e      	b.n	8006b80 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 8006b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b64:	3308      	adds	r3, #8
 8006b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b68:	b2d1      	uxtb	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	460a      	mov	r2, r1
 8006b70:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 8006b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 8006b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dced      	bgt.n	8006b62 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8006b9c:	3303      	adds	r3, #3
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006bac:	1d9a      	adds	r2, r3, #6
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 8006bb4:	f001 b8d4 	b.w	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2281      	movs	r2, #129	; 0x81
 8006bc4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006bde:	1d9a      	adds	r2, r3, #6
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 8006be6:	2302      	movs	r3, #2
 8006be8:	f001 b8ba 	b.w	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2281      	movs	r2, #129	; 0x81
 8006bf8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006c12:	1d9a      	adds	r2, r3, #6
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	f001 b8a0 	b.w	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2281      	movs	r2, #129	; 0x81
 8006c2c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006c46:	1d9a      	adds	r2, r3, #6
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f001 b886 	b.w	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7d9a      	ldrb	r2, [r3, #22]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7d5a      	ldrb	r2, [r3, #21]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7d1a      	ldrb	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7cda      	ldrb	r2, [r3, #19]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	7c9a      	ldrb	r2, [r3, #18]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7adb      	ldrb	r3, [r3, #11]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	f040 80e6 	bne.w	8006e60 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7e9b      	ldrb	r3, [r3, #26]
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 8006cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7edb      	ldrb	r3, [r3, #27]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7f1b      	ldrb	r3, [r3, #28]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7f5b      	ldrb	r3, [r3, #29]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4313      	orrs	r3, r2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d87e      	bhi.n	8006e2c <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006d3c:	4413      	add	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 8006d44:	4293      	cmp	r3, r2
 8006d46:	dc57      	bgt.n	8006df8 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	2300      	movs	r3, #0
 8006d52:	667b      	str	r3, [r7, #100]	; 0x64
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 8006d68:	40d3      	lsrs	r3, r2
 8006d6a:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <ModBUS+0x3fc>
									{
										bytes=div;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d8e:	e002      	b.n	8006d96 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	3301      	adds	r3, #1
 8006d94:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 8006d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 8006da0:	e00e      	b.n	8006dc0 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 8006da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da4:	3308      	adds	r3, #8
 8006da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006da8:	b2d1      	uxtb	r1, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	460a      	mov	r2, r1
 8006db0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 8006db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 8006dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dced      	bgt.n	8006da2 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8006ddc:	3303      	adds	r3, #3
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006dec:	1d9a      	adds	r2, r3, #6
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 8006df4:	f000 bfb4 	b.w	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2282      	movs	r2, #130	; 0x82
 8006e04:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006e1e:	1d9a      	adds	r2, r3, #6
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 8006e26:	2302      	movs	r3, #2
 8006e28:	f000 bf9a 	b.w	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2282      	movs	r2, #130	; 0x82
 8006e38:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2203      	movs	r2, #3
 8006e48:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006e52:	1d9a      	adds	r2, r3, #6
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	f000 bf80 	b.w	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2282      	movs	r2, #130	; 0x82
 8006e6c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8006e86:	1d9a      	adds	r2, r3, #6
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f000 bf66 	b.w	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7d9a      	ldrb	r2, [r3, #22]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7d5a      	ldrb	r2, [r3, #21]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7d1a      	ldrb	r2, [r3, #20]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7cda      	ldrb	r2, [r3, #19]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c9a      	ldrb	r2, [r3, #18]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7b1b      	ldrb	r3, [r3, #12]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	f040 80e2 	bne.w	8007098 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7e9b      	ldrb	r3, [r3, #26]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 8006ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7edb      	ldrb	r3, [r3, #27]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	7f1b      	ldrb	r3, [r3, #28]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 8006f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7f5b      	ldrb	r3, [r3, #29]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d87a      	bhi.n	8007064 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 8006f7c:	4413      	add	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 8006f84:	4293      	cmp	r3, r2
 8006f86:	dc53      	bgt.n	8007030 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 8006f88:	e029      	b.n	8006fde <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 8006f90:	461a      	mov	r2, r3
 8006f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f94:	4413      	add	r3, r2
 8006f96:	005a      	lsls	r2, r3, #1
 8006f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	3309      	adds	r3, #9
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	460a      	mov	r2, r1
 8006fac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fba:	4413      	add	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc2:	3305      	adds	r3, #5
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 8006fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fda:	3301      	adds	r3, #1
 8006fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	dbce      	blt.n	8006f8a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2203      	movs	r2, #3
 8007002:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8007014:	3303      	adds	r3, #3
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007024:	1d9a      	adds	r2, r3, #6
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800702c:	f000 be98 	b.w	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2283      	movs	r2, #131	; 0x83
 800703c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2203      	movs	r2, #3
 800704c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007056:	1d9a      	adds	r2, r3, #6
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800705e:	2302      	movs	r3, #2
 8007060:	f000 be7e 	b.w	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2203      	movs	r2, #3
 8007068:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2283      	movs	r2, #131	; 0x83
 8007070:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2203      	movs	r2, #3
 8007080:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800708a:	1d9a      	adds	r2, r3, #6
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 8007092:	2303      	movs	r3, #3
 8007094:	f000 be64 	b.w	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2283      	movs	r2, #131	; 0x83
 80070a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2203      	movs	r2, #3
 80070b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80070be:	1d9a      	adds	r2, r3, #6
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 80070c6:	2301      	movs	r3, #1
 80070c8:	f000 be4a 	b.w	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7d9a      	ldrb	r2, [r3, #22]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7d5a      	ldrb	r2, [r3, #21]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7d1a      	ldrb	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7cda      	ldrb	r2, [r3, #19]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7c9a      	ldrb	r2, [r3, #18]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 80070fe:	2300      	movs	r3, #0
 8007100:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7b5b      	ldrb	r3, [r3, #13]
 8007106:	2b01      	cmp	r3, #1
 8007108:	f040 80e2 	bne.w	80072d0 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7e9b      	ldrb	r3, [r3, #26]
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	b29a      	uxth	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800712e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7edb      	ldrb	r3, [r3, #27]
 8007144:	b29b      	uxth	r3, r3
 8007146:	4313      	orrs	r3, r2
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7f1b      	ldrb	r3, [r3, #28]
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 8007172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7f5b      	ldrb	r3, [r3, #29]
 8007188:	b29b      	uxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d87a      	bhi.n	800729c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 80071ac:	461a      	mov	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 80071bc:	4293      	cmp	r3, r2
 80071be:	dc53      	bgt.n	8007268 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 80071c0:	e029      	b.n	8007216 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 80071c8:	461a      	mov	r2, r3
 80071ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071cc:	4413      	add	r3, r2
 80071ce:	005a      	lsls	r2, r3, #1
 80071d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	3309      	adds	r3, #9
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	440a      	add	r2, r1
 80071da:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	460a      	mov	r2, r1
 80071e4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 80071ee:	461a      	mov	r2, r3
 80071f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071f2:	4413      	add	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071fa:	3305      	adds	r3, #5
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	440a      	add	r2, r1
 8007202:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4413      	add	r3, r2
 800720a:	460a      	mov	r2, r1
 800720c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 8007210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007212:	3301      	adds	r3, #1
 8007214:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800721c:	461a      	mov	r2, r3
 800721e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007220:	4293      	cmp	r3, r2
 8007222:	dbce      	blt.n	80071c2 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800722a:	b2db      	uxtb	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2204      	movs	r2, #4
 800723a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800724c:	3303      	adds	r3, #3
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800725c:	1d9a      	adds	r2, r3, #6
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 8007264:	f000 bd7c 	b.w	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2284      	movs	r2, #132	; 0x84
 8007274:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2203      	movs	r2, #3
 8007284:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800728e:	1d9a      	adds	r2, r3, #6
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 8007296:	2302      	movs	r3, #2
 8007298:	f000 bd62 	b.w	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2203      	movs	r2, #3
 80072a0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2284      	movs	r2, #132	; 0x84
 80072a8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80072c2:	1d9a      	adds	r2, r3, #6
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 80072ca:	2303      	movs	r3, #3
 80072cc:	f000 bd48 	b.w	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2284      	movs	r2, #132	; 0x84
 80072dc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2203      	movs	r2, #3
 80072ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80072f6:	1d9a      	adds	r2, r3, #6
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 80072fe:	2301      	movs	r3, #1
 8007300:	f000 bd2e 	b.w	8007d60 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	7d9a      	ldrb	r2, [r3, #22]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7d5a      	ldrb	r2, [r3, #21]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7d1a      	ldrb	r2, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	7cda      	ldrb	r2, [r3, #19]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	7c9a      	ldrb	r2, [r3, #18]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 8007336:	2300      	movs	r3, #0
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7b9b      	ldrb	r3, [r3, #14]
 800733e:	2b01      	cmp	r3, #1
 8007340:	f040 80d1 	bne.w	80074e6 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7e9b      	ldrb	r3, [r3, #26]
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	b29a      	uxth	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 8007366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7edb      	ldrb	r3, [r3, #27]
 800737c:	b29b      	uxth	r3, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7f1b      	ldrb	r3, [r3, #28]
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 80073aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7f5b      	ldrb	r3, [r3, #29]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 80073d2:	461a      	mov	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 80073da:	429a      	cmp	r2, r3
 80073dc:	dd69      	ble.n	80074b2 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <ModBUS+0xa60>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 80073ee:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80073f2:	d144      	bne.n	800747e <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 80073fa:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80073fe:	d10d      	bne.n	800741c <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800740c:	4611      	mov	r1, r2
 800740e:	2201      	movs	r2, #1
 8007410:	408a      	lsls	r2, r1
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800741a:	e003      	b.n	8007424 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7f5a      	ldrb	r2, [r3, #29]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7f1a      	ldrb	r2, [r3, #28]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7eda      	ldrb	r2, [r3, #27]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7e9a      	ldrb	r2, [r3, #26]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2205      	movs	r2, #5
 8007450:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8007462:	3306      	adds	r3, #6
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007472:	1d9a      	adds	r2, r3, #6
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800747a:	f000 bc71 	b.w	8007d60 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2285      	movs	r2, #133	; 0x85
 800748a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2203      	movs	r2, #3
 800749a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80074a4:	1d9a      	adds	r2, r3, #6
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 80074ac:	2302      	movs	r3, #2
 80074ae:	f000 bc57 	b.w	8007d60 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2285      	movs	r2, #133	; 0x85
 80074be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2203      	movs	r2, #3
 80074ce:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80074d8:	1d9a      	adds	r2, r3, #6
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 80074e0:	2303      	movs	r3, #3
 80074e2:	f000 bc3d 	b.w	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2285      	movs	r2, #133	; 0x85
 80074f2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800750c:	1d9a      	adds	r2, r3, #6
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 8007514:	2301      	movs	r3, #1
 8007516:	f000 bc23 	b.w	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7d9a      	ldrb	r2, [r3, #22]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7d5a      	ldrb	r2, [r3, #21]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7d1a      	ldrb	r2, [r3, #20]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7cda      	ldrb	r2, [r3, #19]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7c9a      	ldrb	r2, [r3, #18]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800754c:	2300      	movs	r3, #0
 800754e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007550:	2300      	movs	r3, #0
 8007552:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7bdb      	ldrb	r3, [r3, #15]
 8007558:	2b01      	cmp	r3, #1
 800755a:	f040 80a3 	bne.w	80076a4 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7e9b      	ldrb	r3, [r3, #26]
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 8007580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7edb      	ldrb	r3, [r3, #27]
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 80075a8:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7f1b      	ldrb	r3, [r3, #28]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 80075cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7f5b      	ldrb	r3, [r3, #29]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d838      	bhi.n	8007672 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 8007600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7f11      	ldrb	r1, [r2, #28]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	460a      	mov	r2, r1
 800760c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 8007610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007612:	3301      	adds	r3, #1
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7f51      	ldrb	r1, [r2, #29]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	460a      	mov	r2, r1
 800761e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7f5a      	ldrb	r2, [r3, #29]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	7f1a      	ldrb	r2, [r3, #28]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	7eda      	ldrb	r2, [r3, #27]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7e9a      	ldrb	r2, [r3, #26]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2206      	movs	r2, #6
 800764e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2206      	movs	r2, #6
 800765e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007668:	1d9a      	adds	r2, r3, #6
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 8007670:	e376      	b.n	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2286      	movs	r2, #134	; 0x86
 800767e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2203      	movs	r2, #3
 800768e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007698:	1d9a      	adds	r2, r3, #6
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 80076a0:	2302      	movs	r3, #2
 80076a2:	e35d      	b.n	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2286      	movs	r2, #134	; 0x86
 80076b0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2203      	movs	r2, #3
 80076c0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80076ca:	1d9a      	adds	r2, r3, #6
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 80076d2:	2301      	movs	r3, #1
 80076d4:	e344      	b.n	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7d9a      	ldrb	r2, [r3, #22]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	7d5a      	ldrb	r2, [r3, #21]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7d1a      	ldrb	r2, [r3, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	7cda      	ldrb	r2, [r3, #19]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7c9a      	ldrb	r2, [r3, #18]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 8007708:	2300      	movs	r3, #0
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7c1b      	ldrb	r3, [r3, #16]
 8007710:	2b01      	cmp	r3, #1
 8007712:	f040 810f 	bne.w	8007934 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7e9b      	ldrb	r3, [r3, #26]
 800771a:	b29a      	uxth	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8007738:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800773c:	b29a      	uxth	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7edb      	ldrb	r3, [r3, #27]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7f1b      	ldrb	r3, [r3, #28]
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800777c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007780:	b29a      	uxth	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7f5b      	ldrb	r3, [r3, #29]
 8007792:	b29b      	uxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b29a      	uxth	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	429a      	cmp	r2, r3
 80077ae:	f200 80a8 	bhi.w	8007902 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 80077c8:	4293      	cmp	r3, r2
 80077ca:	f300 8081 	bgt.w	80078d0 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 80077ce:	2300      	movs	r3, #0
 80077d0:	657b      	str	r3, [r7, #84]	; 0x54
 80077d2:	2300      	movs	r3, #0
 80077d4:	653b      	str	r3, [r7, #80]	; 0x50
 80077d6:	2300      	movs	r3, #0
 80077d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077da:	2300      	movs	r3, #0
 80077dc:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7f9b      	ldrb	r3, [r3, #30]
 80077e2:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 80077e4:	e00e      	b.n	8007804 <ModBUS+0xe70>
									{
										data=data<<8;
 80077e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 80077ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ee:	330c      	adds	r3, #12
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	7c9b      	ldrb	r3, [r3, #18]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fa:	4313      	orrs	r3, r2
 80077fc:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	3b01      	subs	r3, #1
 8007802:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 8007804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ed      	bne.n	80077e6 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8007810:	461a      	mov	r2, r3
 8007812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007814:	4093      	lsls	r3, r2
 8007816:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 8007818:	e00f      	b.n	800783a <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8007820:	461a      	mov	r2, r3
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	4413      	add	r3, r2
 8007826:	2201      	movs	r2, #1
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	461a      	mov	r2, r3
 800782e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007830:	4313      	orrs	r3, r2
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	3301      	adds	r3, #1
 8007838:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 8007840:	461a      	mov	r2, r3
 8007842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007844:	4293      	cmp	r3, r2
 8007846:	d3e8      	bcc.n	800781a <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 8007848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784a:	43db      	mvns	r3, r3
 800784c:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007856:	401a      	ands	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007860:	43db      	mvns	r3, r3
 8007862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007864:	4013      	ands	r3, r2
 8007866:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800786e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7f5a      	ldrb	r2, [r3, #29]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7f1a      	ldrb	r2, [r3, #28]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7eda      	ldrb	r2, [r3, #27]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7e9a      	ldrb	r2, [r3, #26]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	220f      	movs	r2, #15
 80078a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80078b6:	3306      	adds	r3, #6
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80078c6:	1d9a      	adds	r2, r3, #6
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 80078ce:	e247      	b.n	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	228f      	movs	r2, #143	; 0x8f
 80078dc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2203      	movs	r2, #3
 80078ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80078f6:	1d9a      	adds	r2, r3, #6
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 80078fe:	2302      	movs	r3, #2
 8007900:	e22e      	b.n	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2203      	movs	r2, #3
 8007906:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	228f      	movs	r2, #143	; 0x8f
 800790e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2203      	movs	r2, #3
 800791e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007928:	1d9a      	adds	r2, r3, #6
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 8007930:	2303      	movs	r3, #3
 8007932:	e215      	b.n	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	228f      	movs	r2, #143	; 0x8f
 8007940:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800795a:	1d9a      	adds	r2, r3, #6
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 8007962:	2301      	movs	r3, #1
 8007964:	e1fc      	b.n	8007d60 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7d9a      	ldrb	r2, [r3, #22]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7d5a      	ldrb	r2, [r3, #21]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7d1a      	ldrb	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7cda      	ldrb	r2, [r3, #19]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7c9a      	ldrb	r2, [r3, #18]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 8007998:	2300      	movs	r3, #0
 800799a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800799e:	2300      	movs	r3, #0
 80079a0:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7c5b      	ldrb	r3, [r3, #17]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	f040 80eb 	bne.w	8007b82 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7e9b      	ldrb	r3, [r3, #26]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80079ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7edb      	ldrb	r3, [r3, #27]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7f1b      	ldrb	r3, [r3, #28]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 8007a1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7f5b      	ldrb	r3, [r3, #29]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4313      	orrs	r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d87f      	bhi.n	8007b50 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 8007a5e:	4413      	add	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 8007a66:	4293      	cmp	r3, r2
 8007a68:	dc59      	bgt.n	8007b1e <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 8007a6a:	e029      	b.n	8007ac0 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 8007a6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a70:	f103 020d 	add.w	r2, r3, #13
 8007a74:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8007a76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a7a:	440b      	add	r3, r1
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	440a      	add	r2, r1
 8007a80:	7c91      	ldrb	r1, [r2, #18]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	460a      	mov	r2, r1
 8007a88:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 8007a8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a90:	3301      	adds	r3, #1
 8007a92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 8007a96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a9a:	f103 020d 	add.w	r2, r3, #13
 8007a9e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8007aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007aa4:	440b      	add	r3, r1
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	7c91      	ldrb	r1, [r2, #18]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 8007ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007aba:	3301      	adds	r3, #1
 8007abc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7f9b      	ldrb	r3, [r3, #30]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d3ce      	bcc.n	8007a6c <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7f5a      	ldrb	r2, [r3, #29]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	7f1a      	ldrb	r2, [r3, #28]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7eda      	ldrb	r2, [r3, #27]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	7e9a      	ldrb	r2, [r3, #26]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2210      	movs	r2, #16
 8007afa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2206      	movs	r2, #6
 8007b0a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007b14:	1d9a      	adds	r2, r3, #6
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 8007b1c:	e120      	b.n	8007d60 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2290      	movs	r2, #144	; 0x90
 8007b2a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007b44:	1d9a      	adds	r2, r3, #6
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e107      	b.n	8007d60 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2203      	movs	r2, #3
 8007b54:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2290      	movs	r2, #144	; 0x90
 8007b5c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007b76:	1d9a      	adds	r2, r3, #6
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0ee      	b.n	8007d60 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2290      	movs	r2, #144	; 0x90
 8007b8e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007ba8:	1d9a      	adds	r2, r3, #6
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0d5      	b.n	8007d60 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7e5b      	ldrb	r3, [r3, #25]
 8007bc0:	3b80      	subs	r3, #128	; 0x80
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7e1a      	ldrb	r2, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	7d9a      	ldrb	r2, [r3, #22]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7d5a      	ldrb	r2, [r3, #21]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7d1a      	ldrb	r2, [r3, #20]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7cda      	ldrb	r2, [r3, #19]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7c9a      	ldrb	r2, [r3, #18]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8007c14:	1d9a      	adds	r2, r3, #6
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e09f      	b.n	8007d60 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 8007c20:	2301      	movs	r3, #1
 8007c22:	e09d      	b.n	8007d60 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 8099 	bne.w	8007d60 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f103 0212 	add.w	r2, r3, #18
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fe fda5 	bl	800678c <ModBUS_Check>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 808b 	beq.w	8007d60 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fe fdbd 	bl	80067ca <ModBUS_Check_tid>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d04f      	beq.n	8007cf6 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7e5b      	ldrb	r3, [r3, #25]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d143      	bne.n	8007ce6 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8007c6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 8007c70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c80:	4313      	orrs	r3, r2
 8007c82:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8007c8a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	643b      	str	r3, [r7, #64]	; 0x40
 8007c92:	e022      	b.n	8007cda <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 8007c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	f103 0209 	add.w	r2, r3, #9
 8007c9c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8007c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca0:	440b      	add	r3, r1
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	7c91      	ldrb	r1, [r2, #18]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	460a      	mov	r2, r1
 8007cb0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 8007cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb6:	3305      	adds	r3, #5
 8007cb8:	005a      	lsls	r2, r3, #1
 8007cba:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cbe:	440b      	add	r3, r1
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	440a      	add	r2, r1
 8007cc8:	7c91      	ldrb	r1, [r2, #18]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	460a      	mov	r2, r1
 8007cd0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 8007cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	dbd7      	blt.n	8007c94 <ModBUS+0x1300>

						}


					}
					break;
 8007ce4:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7ddb      	ldrb	r3, [r3, #23]
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7e9b      	ldrb	r3, [r3, #26]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cf4:	e034      	b.n	8007d60 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7e5b      	ldrb	r3, [r3, #25]
 8007cfa:	3b81      	subs	r3, #129	; 0x81
 8007cfc:	2b15      	cmp	r3, #21
 8007cfe:	d82f      	bhi.n	8007d60 <ModBUS+0x13cc>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <ModBUS+0x1374>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d61 	.word	0x08007d61
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007d61 	.word	0x08007d61
 8007d14:	08007d61 	.word	0x08007d61
 8007d18:	08007d61 	.word	0x08007d61
 8007d1c:	08007d61 	.word	0x08007d61
 8007d20:	08007d61 	.word	0x08007d61
 8007d24:	08007d61 	.word	0x08007d61
 8007d28:	08007d61 	.word	0x08007d61
 8007d2c:	08007d61 	.word	0x08007d61
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007d61 	.word	0x08007d61
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d61 	.word	0x08007d61
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d61 	.word	0x08007d61
 8007d58:	08007d61 	.word	0x08007d61
 8007d5c:	08007d61 	.word	0x08007d61
			}
		}
	}


}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3770      	adds	r7, #112	; 0x70
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6858      	ldr	r0, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	891b      	ldrh	r3, [r3, #8]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	f7fa ff78 	bl	8002c70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f103 0114 	add.w	r1, r3, #20
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f103 0218 	add.w	r2, r3, #24
 8007d90:	2364      	movs	r3, #100	; 0x64
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2304      	movs	r3, #4
 8007d96:	f7fb fc80 	bl	800369a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6858      	ldr	r0, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	891b      	ldrh	r3, [r3, #8]
 8007da2:	2201      	movs	r2, #1
 8007da4:	4619      	mov	r1, r3
 8007da6:	f7fa ff63 	bl	8002c70 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7edb      	ldrb	r3, [r3, #27]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	70fb      	strb	r3, [r7, #3]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70bb      	strb	r3, [r7, #2]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	787a      	ldrb	r2, [r7, #1]
 8007dd8:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	78ba      	ldrb	r2, [r7, #2]
 8007de4:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 8007dec:	787b      	ldrb	r3, [r7, #1]
 8007dee:	2bf0      	cmp	r3, #240	; 0xf0
 8007df0:	d11d      	bne.n	8007e2e <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	e013      	b.n	8007e20 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff ffaf 	bl	8007d68 <SPI_ETH>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7d9b      	ldrb	r3, [r3, #22]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	dbe6      	blt.n	8007df8 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 8007e2a:	8afb      	ldrh	r3, [r7, #22]
 8007e2c:	e037      	b.n	8007e9e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 8007e2e:	787b      	ldrb	r3, [r7, #1]
 8007e30:	2b0f      	cmp	r3, #15
 8007e32:	d134      	bne.n	8007e9e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 8007e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d120      	bne.n	8007e84 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	e016      	b.n	8007e76 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ff8d 	bl	8007d68 <SPI_ETH>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	8afb      	ldrh	r3, [r7, #22]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7d9b      	ldrb	r3, [r3, #22]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <SPI_ETH_REG+0xba>
 8007e6a:	8afb      	ldrh	r3, [r7, #22]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	dbe3      	blt.n	8007e48 <SPI_ETH_REG+0x92>
			}
		 return(res);
 8007e80:	8afb      	ldrh	r3, [r7, #22]
 8007e82:	e00c      	b.n	8007e9e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff6f 	bl	8007d68 <SPI_ETH>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7d9b      	ldrb	r3, [r3, #22]
 8007e92:	3301      	adds	r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	759a      	strb	r2, [r3, #22]
			return(res);
 8007e9a:	8afb      	ldrh	r3, [r7, #22]
 8007e9c:	e7ff      	b.n	8007e9e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	807b      	strh	r3, [r7, #2]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	22f0      	movs	r2, #240	; 0xf0
 8007ebe:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 8007ec0:	883b      	ldrh	r3, [r7, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 8007ec6:	883b      	ldrh	r3, [r7, #0]
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e01b      	b.n	8007f0e <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 8007ed6:	887b      	ldrh	r3, [r7, #2]
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 8007ede:	887b      	ldrh	r3, [r7, #2]
 8007ee0:	0a1b      	lsrs	r3, r3, #8
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	755a      	strb	r2, [r3, #21]
		addr++;
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	3301      	adds	r3, #1
 8007eee:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 8007ef0:	f107 020c 	add.w	r2, r7, #12
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff ff32 	bl	8007d68 <SPI_ETH>
 8007f04:	4603      	mov	r3, r0
 8007f06:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	dde0      	ble.n	8007ed6 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 8007f14:	8afb      	ldrh	r3, [r7, #22]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 8007f1e:	b590      	push	{r4, r7, lr}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	817b      	strh	r3, [r7, #10]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	220f      	movs	r2, #15
 8007f36:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 8007f38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f3e:	d226      	bcs.n	8007f8e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e01a      	b.n	8007f82 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 8007f4c:	897b      	ldrh	r3, [r7, #10]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 8007f54:	897b      	ldrh	r3, [r7, #10]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 8007f60:	893a      	ldrh	r2, [r7, #8]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	4413      	add	r3, r2
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	189c      	adds	r4, r3, r2
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fefb 	bl	8007d68 <SPI_ETH>
 8007f72:	4603      	mov	r3, r0
 8007f74:	7023      	strb	r3, [r4, #0]
				addr++;
 8007f76:	897b      	ldrh	r3, [r7, #10]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	dbe0      	blt.n	8007f4c <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e000      	b.n	8007f90 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 8007f8e:	2301      	movs	r3, #1
	}
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd90      	pop	{r4, r7, pc}

08007f98 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	817b      	strh	r3, [r7, #10]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	22f0      	movs	r2, #240	; 0xf0
 8007fb0:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 8007fb2:	8c3b      	ldrh	r3, [r7, #32]
 8007fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb8:	d223      	bcs.n	8008002 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e01a      	b.n	8007ff6 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 8007fc0:	897b      	ldrh	r3, [r7, #10]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 8007fc8:	897b      	ldrh	r3, [r7, #10]
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 8007fd4:	893a      	ldrh	r2, [r7, #8]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	4413      	add	r3, r2
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	7f1a      	ldrb	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff febf 	bl	8007d68 <SPI_ETH>
				addr++;
 8007fea:	897b      	ldrh	r3, [r7, #10]
 8007fec:	3301      	adds	r3, #1
 8007fee:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	8c3b      	ldrh	r3, [r7, #32]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	dbe0      	blt.n	8007fc0 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 8007ffe:	2300      	movs	r3, #0
 8008000:	e000      	b.n	8008004 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 8008002:	2301      	movs	r3, #1
	}
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
 8008018:	4613      	mov	r3, r2
 800801a:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	22f0      	movs	r2, #240	; 0xf0
 8008020:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	3304      	adds	r3, #4
 8008026:	b2da      	uxtb	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	78ba      	ldrb	r2, [r7, #2]
 8008036:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fe95 	bl	8007d68 <SPI_ETH>
}
 800803e:	bf00      	nop
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
 8008054:	4613      	mov	r3, r2
 8008056:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	22f0      	movs	r2, #240	; 0xf0
 800805c:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	3304      	adds	r3, #4
 8008062:	b2da      	uxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	78ba      	ldrb	r2, [r7, #2]
 8008072:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fe77 	bl	8007d68 <SPI_ETH>
}
 800807a:	bf00      	nop
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af02      	add	r7, sp, #8
 800808a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008092:	331c      	adds	r3, #28
 8008094:	2204      	movs	r2, #4
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	23f0      	movs	r3, #240	; 0xf0
 800809c:	2201      	movs	r2, #1
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fe88 	bl	8007db6 <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080ac:	2204      	movs	r2, #4
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	23f0      	movs	r3, #240	; 0xf0
 80080b4:	2205      	movs	r2, #5
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff fe7c 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080c4:	3304      	adds	r3, #4
 80080c6:	2206      	movs	r2, #6
 80080c8:	9201      	str	r2, [sp, #4]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	23f0      	movs	r3, #240	; 0xf0
 80080ce:	2209      	movs	r2, #9
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff fe6f 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080de:	330a      	adds	r3, #10
 80080e0:	2204      	movs	r2, #4
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	23f0      	movs	r3, #240	; 0xf0
 80080e8:	220f      	movs	r2, #15
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fe62 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080f8:	330e      	adds	r3, #14
 80080fa:	2201      	movs	r2, #1
 80080fc:	9201      	str	r2, [sp, #4]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	23f0      	movs	r3, #240	; 0xf0
 8008102:	221a      	movs	r2, #26
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fe55 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008112:	330f      	adds	r3, #15
 8008114:	2201      	movs	r2, #1
 8008116:	9201      	str	r2, [sp, #4]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	23f0      	movs	r3, #240	; 0xf0
 800811c:	221b      	movs	r2, #27
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fe48 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 8008126:	bf00      	nop
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af02      	add	r7, sp, #8
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	2201      	movs	r2, #1
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ff80 	bl	8008048 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800814e:	331a      	adds	r3, #26
 8008150:	2202      	movs	r2, #2
 8008152:	9201      	str	r2, [sp, #4]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	23f0      	movs	r3, #240	; 0xf0
 8008158:	2204      	movs	r2, #4
 800815a:	2104      	movs	r1, #4
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff fe2a 	bl	8007db6 <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008168:	331c      	adds	r3, #28
 800816a:	2204      	movs	r2, #4
 800816c:	9201      	str	r2, [sp, #4]
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	23f0      	movs	r3, #240	; 0xf0
 8008172:	220c      	movs	r2, #12
 8008174:	2104      	movs	r1, #4
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff fe1d 	bl	8007db6 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008182:	2202      	movs	r2, #2
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	23f0      	movs	r3, #240	; 0xf0
 800818a:	2210      	movs	r2, #16
 800818c:	2104      	movs	r1, #4
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff fe11 	bl	8007db6 <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	2201      	movs	r2, #1
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff ff36 	bl	800800c <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d106      	bne.n	80081bc <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	2202      	movs	r2, #2
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ff29 	bl	800800c <eth_wr_SOCKET_CMD>
 80081ba:	e009      	b.n	80081d0 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	2204      	movs	r2, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ff22 	bl	800800c <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 80081c8:	2115      	movs	r1, #21
 80081ca:	4804      	ldr	r0, [pc, #16]	; (80081dc <eth_socket_init+0xac>)
 80081cc:	f7f8 ff72 	bl	80010b4 <ITM0_Write>
	 }
}
 80081d0:	bf00      	nop
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	0800a770 	.word	0x0800a770

080081e0 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220f      	movs	r2, #15
 80081f0:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	3304      	adds	r3, #4
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2203      	movs	r2, #3
 8008200:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fdad 	bl	8007d68 <SPI_ETH>
	return(y->RX[3]);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7edb      	ldrb	r3, [r3, #27]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	220f      	movs	r2, #15
 800822a:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	3304      	adds	r3, #4
 8008230:	b2da      	uxtb	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fd90 	bl	8007d68 <SPI_ETH>
	return(y->RX[3]);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7edb      	ldrb	r3, [r3, #27]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	; 0x30
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	461a      	mov	r2, r3
 8008260:	460b      	mov	r3, r1
 8008262:	72fb      	strb	r3, [r7, #11]
 8008264:	4613      	mov	r3, r2
 8008266:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 8008268:	2300      	movs	r3, #0
 800826a:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800826c:	2300      	movs	r3, #0
 800826e:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 8008270:	2300      	movs	r3, #0
 8008272:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 8008274:	2300      	movs	r3, #0
 8008276:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 8008278:	2300      	movs	r3, #0
 800827a:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800827c:	2300      	movs	r3, #0
 800827e:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 8008280:	2300      	movs	r3, #0
 8008282:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 8008284:	2300      	movs	r3, #0
 8008286:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 8008288:	2300      	movs	r3, #0
 800828a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800828c:	2300      	movs	r3, #0
 800828e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	2b03      	cmp	r3, #3
 8008294:	d83e      	bhi.n	8008314 <eth_rd_SOCKET_DATA+0xc0>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <eth_rd_SOCKET_DATA+0x48>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082c7 	.word	0x080082c7
 80082a4:	080082e1 	.word	0x080082e1
 80082a8:	080082fb 	.word	0x080082fb
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082b6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 80082c4:	e033      	b.n	800832e <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082cc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80082d0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80082dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 80082de:	e026      	b.n	800832e <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ea:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80082f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 80082f8:	e019      	b.n	800832e <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008300:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008304:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008310:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 8008312:	e00c      	b.n	800832e <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800831e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800832a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800832c:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800832e:	7afb      	ldrb	r3, [r7, #11]
 8008330:	3304      	adds	r3, #4
 8008332:	b2d9      	uxtb	r1, r3
 8008334:	2302      	movs	r3, #2
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f107 0310 	add.w	r3, r7, #16
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	230f      	movs	r3, #15
 8008340:	2228      	movs	r2, #40	; 0x28
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff fd37 	bl	8007db6 <SPI_ETH_REG>
 8008348:	4603      	mov	r3, r0
 800834a:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800834c:	8b7a      	ldrh	r2, [r7, #26]
 800834e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008350:	4013      	ands	r3, r2
 8008352:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 8008354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008356:	8b3b      	ldrh	r3, [r7, #24]
 8008358:	4413      	add	r3, r2
 800835a:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800835c:	8b3a      	ldrh	r2, [r7, #24]
 800835e:	893b      	ldrh	r3, [r7, #8]
 8008360:	441a      	add	r2, r3
 8008362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008364:	3301      	adds	r3, #1
 8008366:	429a      	cmp	r2, r3
 8008368:	dd2c      	ble.n	80083c4 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800836a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800836c:	8b3b      	ldrh	r3, [r7, #24]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	b29b      	uxth	r3, r3
 8008372:	3301      	adds	r3, #1
 8008374:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f103 021c 	add.w	r2, r3, #28
 800837c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800837e:	8af9      	ldrh	r1, [r7, #22]
 8008380:	8bfb      	ldrh	r3, [r7, #30]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4603      	mov	r3, r0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7ff fdc9 	bl	8007f1e <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800838c:	8bba      	ldrh	r2, [r7, #28]
 800838e:	8bfb      	ldrh	r3, [r7, #30]
 8008390:	4413      	add	r3, r2
 8008392:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 8008394:	893a      	ldrh	r2, [r7, #8]
 8008396:	8bfb      	ldrh	r3, [r7, #30]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800839c:	8bfb      	ldrh	r3, [r7, #30]
 800839e:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f103 021c 	add.w	r2, r3, #28
 80083a6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80083a8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80083aa:	8c3b      	ldrh	r3, [r7, #32]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4603      	mov	r3, r0
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fdb4 	bl	8007f1e <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 80083b6:	8b7a      	ldrh	r2, [r7, #26]
 80083b8:	893b      	ldrh	r3, [r7, #8]
 80083ba:	4413      	add	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e010      	b.n	80083e6 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f103 021c 	add.w	r2, r3, #28
 80083ca:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80083cc:	8af9      	ldrh	r1, [r7, #22]
 80083ce:	893b      	ldrh	r3, [r7, #8]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4603      	mov	r3, r0
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7ff fda2 	bl	8007f1e <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 80083da:	8b7a      	ldrh	r2, [r7, #26]
 80083dc:	893b      	ldrh	r3, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	b29b      	uxth	r3, r3
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3728      	adds	r7, #40	; 0x28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop

080083f4 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	72fb      	strb	r3, [r7, #11]
 8008404:	4613      	mov	r3, r2
 8008406:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 8008408:	2300      	movs	r3, #0
 800840a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800840c:	2300      	movs	r3, #0
 800840e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 8008410:	2300      	movs	r3, #0
 8008412:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 8008414:	2300      	movs	r3, #0
 8008416:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 8008418:	2300      	movs	r3, #0
 800841a:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800841c:	2300      	movs	r3, #0
 800841e:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 8008420:	2300      	movs	r3, #0
 8008422:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 8008424:	2300      	movs	r3, #0
 8008426:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 8008428:	2300      	movs	r3, #0
 800842a:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800842c:	2300      	movs	r3, #0
 800842e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 8008430:	2300      	movs	r3, #0
 8008432:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d83e      	bhi.n	80084b8 <eth_wr_SOCKET_DATA+0xc4>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <eth_wr_SOCKET_DATA+0x4c>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008451 	.word	0x08008451
 8008444:	0800846b 	.word	0x0800846b
 8008448:	08008485 	.word	0x08008485
 800844c:	0800849f 	.word	0x0800849f
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800845a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008462:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008466:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 8008468:	e033      	b.n	80084d2 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008474:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008480:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 8008482:	e026      	b.n	80084d2 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800848e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800849a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800849c:	e019      	b.n	80084d2 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80084a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084b4:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 80084b6:	e00c      	b.n	80084d2 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084c2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084ce:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 80084d0:	bf00      	nop
	}

	while(get_free_size<send_size)
 80084d2:	e00e      	b.n	80084f2 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	3304      	adds	r3, #4
 80084d8:	b2d9      	uxtb	r1, r3
 80084da:	2302      	movs	r3, #2
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	f107 0310 	add.w	r3, r7, #16
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	230f      	movs	r3, #15
 80084e6:	2220      	movs	r2, #32
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff fc64 	bl	8007db6 <SPI_ETH_REG>
 80084ee:	4603      	mov	r3, r0
 80084f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 80084f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084f4:	893b      	ldrh	r3, [r7, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3ec      	bcc.n	80084d4 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	3304      	adds	r3, #4
 80084fe:	b2d9      	uxtb	r1, r3
 8008500:	2302      	movs	r3, #2
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	f107 0310 	add.w	r3, r7, #16
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	230f      	movs	r3, #15
 800850c:	2224      	movs	r2, #36	; 0x24
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fc51 	bl	8007db6 <SPI_ETH_REG>
 8008514:	4603      	mov	r3, r0
 8008516:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 8008518:	8b3a      	ldrh	r2, [r7, #24]
 800851a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800851c:	4013      	ands	r3, r2
 800851e:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 8008520:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008522:	8afb      	ldrh	r3, [r7, #22]
 8008524:	4413      	add	r3, r2
 8008526:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 8008528:	8afa      	ldrh	r2, [r7, #22]
 800852a:	893b      	ldrh	r3, [r7, #8]
 800852c:	441a      	add	r2, r3
 800852e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008530:	3301      	adds	r3, #1
 8008532:	429a      	cmp	r2, r3
 8008534:	dd2c      	ble.n	8008590 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 8008536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008538:	8afb      	ldrh	r3, [r7, #22]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29b      	uxth	r3, r3
 800853e:	3301      	adds	r3, #1
 8008540:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f103 021c 	add.w	r2, r3, #28
 8008548:	8c38      	ldrh	r0, [r7, #32]
 800854a:	8ab9      	ldrh	r1, [r7, #20]
 800854c:	8bbb      	ldrh	r3, [r7, #28]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f7ff fd20 	bl	8007f98 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 8008558:	8b7a      	ldrh	r2, [r7, #26]
 800855a:	8bbb      	ldrh	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 8008560:	893a      	ldrh	r2, [r7, #8]
 8008562:	8bbb      	ldrh	r3, [r7, #28]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 8008568:	8bbb      	ldrh	r3, [r7, #28]
 800856a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f103 021c 	add.w	r2, r3, #28
 8008572:	8c38      	ldrh	r0, [r7, #32]
 8008574:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8008576:	8bfb      	ldrh	r3, [r7, #30]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4603      	mov	r3, r0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fd0b 	bl	8007f98 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 8008582:	8b3a      	ldrh	r2, [r7, #24]
 8008584:	893b      	ldrh	r3, [r7, #8]
 8008586:	4413      	add	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	e010      	b.n	80085b2 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f103 021c 	add.w	r2, r3, #28
 8008596:	8c38      	ldrh	r0, [r7, #32]
 8008598:	8ab9      	ldrh	r1, [r7, #20]
 800859a:	893b      	ldrh	r3, [r7, #8]
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	4603      	mov	r3, r0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fcf9 	bl	8007f98 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 80085a6:	8b3a      	ldrh	r2, [r7, #24]
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	4413      	add	r3, r2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	801a      	strh	r2, [r3, #0]
					}

}
 80085b2:	bf00      	nop
 80085b4:	4618      	mov	r0, r3
 80085b6:	3728      	adds	r7, #40	; 0x28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b090      	sub	sp, #64	; 0x40
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ce:	2300      	movs	r3, #0
 80085d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80085d2:	2300      	movs	r3, #0
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
 80085d6:	2300      	movs	r3, #0
 80085d8:	633b      	str	r3, [r7, #48]	; 0x30
 80085da:	2300      	movs	r3, #0
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085de:	2300      	movs	r3, #0
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	2300      	movs	r3, #0
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	2300      	movs	r3, #0
 80085f4:	623b      	str	r3, [r7, #32]
 80085f6:	2300      	movs	r3, #0
 80085f8:	613b      	str	r3, [r7, #16]

	lnga=*an;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	f2c0 8315 	blt.w	8008c3a <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 8008610:	2300      	movs	r3, #0
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 8008614:	e00c      	b.n	8008630 <FT_String_ND+0x74>
							{
								n++;
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	3301      	adds	r3, #1
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800861c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	441a      	add	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	429a      	cmp	r2, r3
 8008628:	dd02      	ble.n	8008630 <FT_String_ND+0x74>
								{
									estado=0;
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
									break;
 800862e:	e009      	b.n	8008644 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 8008630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	440b      	add	r3, r1
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d1e8      	bne.n	8008616 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 8008644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008646:	3301      	adds	r3, #1
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	3301      	adds	r3, #1
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 8008650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	429a      	cmp	r2, r3
 8008656:	d108      	bne.n	800866a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 8008658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008662:	601a      	str	r2, [r3, #0]
									estado=1;
 8008664:	2301      	movs	r3, #1
 8008666:	623b      	str	r3, [r7, #32]
									break;
 8008668:	e010      	b.n	800868c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800866a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	429a      	cmp	r2, r3
 8008670:	dd02      	ble.n	8008678 <FT_String_ND+0xbc>
									 {
									 estado=0;
 8008672:	2300      	movs	r3, #0
 8008674:	623b      	str	r3, [r7, #32]
									 break;
 8008676:	e009      	b.n	800868c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	440b      	add	r3, r1
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d0db      	beq.n	8008644 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008692:	4413      	add	r3, r2
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	429a      	cmp	r2, r3
 8008698:	dd02      	ble.n	80086a0 <FT_String_ND+0xe4>
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d1b7      	bne.n	8008610 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 80086a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	e2c8      	b.n	8008c3c <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 80086aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d12c      	bne.n	800870a <FT_String_ND+0x14e>
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d129      	bne.n	800870a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 80086b6:	e014      	b.n	80086e2 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 80086b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	441a      	add	r2, r3
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	4413      	add	r3, r2
 80086c4:	3b01      	subs	r3, #1
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	441a      	add	r2, r3
 80086ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	440b      	add	r3, r1
 80086d2:	3b01      	subs	r3, #1
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	440b      	add	r3, r1
 80086d8:	7812      	ldrb	r2, [r2, #0]
 80086da:	701a      	strb	r2, [r3, #0]
										n3++;
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	3301      	adds	r3, #1
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	441a      	add	r2, r3
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	4413      	add	r3, r2
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	dae1      	bge.n	80086b8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 80086f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	4413      	add	r3, r2
 80086fc:	1e5a      	subs	r2, r3, #1
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	601a      	str	r2, [r3, #0]
							estado=3;
 8008702:	2303      	movs	r3, #3
 8008704:	623b      	str	r3, [r7, #32]
							return(estado);
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	e298      	b.n	8008c3c <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	2b02      	cmp	r3, #2
 800870e:	f040 80be 	bne.w	800888e <FT_String_ND+0x2d2>
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	2b01      	cmp	r3, #1
 8008716:	f040 80ba 	bne.w	800888e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800871a:	e012      	b.n	8008742 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800871c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	1ad2      	subs	r2, r2, r3
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	4413      	add	r3, r2
 8008726:	461a      	mov	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	441a      	add	r2, r3
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008730:	440b      	add	r3, r1
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	701a      	strb	r2, [r3, #0]
								n4++;
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	3301      	adds	r3, #1
 800873a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800873c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008740:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 8008742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	4413      	add	r3, r2
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	429a      	cmp	r2, r3
 8008750:	dae4      	bge.n	800871c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 8008752:	499d      	ldr	r1, [pc, #628]	; (80089c8 <FT_String_ND+0x40c>)
 8008754:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008756:	f000 fd55 	bl	8009204 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800875a:	499c      	ldr	r1, [pc, #624]	; (80089cc <FT_String_ND+0x410>)
 800875c:	2000      	movs	r0, #0
 800875e:	f000 fd51 	bl	8009204 <strtok>
 8008762:	4603      	mov	r3, r0
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fb32 	bl	8008dce <atoi>
 800876a:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800876c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800876e:	3b01      	subs	r3, #1
 8008770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008772:	429a      	cmp	r2, r3
 8008774:	db02      	blt.n	800877c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 8008776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008778:	3b01      	subs	r3, #1
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800877c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877e:	3306      	adds	r3, #6
 8008780:	222c      	movs	r2, #44	; 0x2c
 8008782:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	2b09      	cmp	r3, #9
 8008788:	dc0d      	bgt.n	80087a6 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	3308      	adds	r3, #8
 800878e:	223a      	movs	r2, #58	; 0x3a
 8008790:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	3309      	adds	r3, #9
 8008796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008798:	4413      	add	r3, r2
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	3309      	adds	r3, #9
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
 80087a4:	e021      	b.n	80087ea <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b63      	cmp	r3, #99	; 0x63
 80087aa:	dc0d      	bgt.n	80087c8 <FT_String_ND+0x20c>
														{
															c[9]=':';
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	3309      	adds	r3, #9
 80087b0:	223a      	movs	r2, #58	; 0x3a
 80087b2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	330a      	adds	r3, #10
 80087b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ba:	4413      	add	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	330a      	adds	r3, #10
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
 80087c6:	e010      	b.n	80087ea <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ce:	da0c      	bge.n	80087ea <FT_String_ND+0x22e>
														{
															c[10]=':';
 80087d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d2:	330a      	adds	r3, #10
 80087d4:	223a      	movs	r2, #58	; 0x3a
 80087d6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	330b      	adds	r3, #11
 80087dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087de:	4413      	add	r3, r2
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	330b      	adds	r3, #11
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 80087ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	601a      	str	r2, [r3, #0]
							n4=0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 80087f4:	e016      	b.n	8008824 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 80087f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	441a      	add	r2, r3
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	4413      	add	r3, r2
 8008804:	461a      	mov	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	441a      	add	r2, r3
 800880a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	1ac9      	subs	r1, r1, r3
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	440b      	add	r3, r1
 8008814:	4619      	mov	r1, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	440b      	add	r3, r1
 800881a:	7812      	ldrb	r2, [r2, #0]
 800881c:	701a      	strb	r2, [r3, #0]
								n4++;
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	3301      	adds	r3, #1
 8008822:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 8008824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	441a      	add	r2, r3
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	4413      	add	r3, r2
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	429a      	cmp	r2, r3
 8008836:	dade      	bge.n	80087f6 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 8008838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	441a      	add	r2, r3
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	1e5a      	subs	r2, r3, #1
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 8008848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	1ad2      	subs	r2, r2, r3
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	441a      	add	r2, r3
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	4413      	add	r3, r2
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 8008860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	1ad2      	subs	r2, r2, r3
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	4413      	add	r3, r2
 800886a:	461a      	mov	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 8008874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	1ad2      	subs	r2, r2, r3
 800887a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	440b      	add	r3, r1
 8008880:	429a      	cmp	r2, r3
 8008882:	d102      	bne.n	800888a <FT_String_ND+0x2ce>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
							estado=3;
 800888a:	2303      	movs	r3, #3
 800888c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800888e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008890:	2b03      	cmp	r3, #3
 8008892:	d146      	bne.n	8008922 <FT_String_ND+0x366>
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d143      	bne.n	8008922 <FT_String_ND+0x366>
						{
						n3=0;
 800889a:	2300      	movs	r3, #0
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800889e:	e00e      	b.n	80088be <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 80088a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	4413      	add	r3, r2
 80088a8:	3b01      	subs	r3, #1
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	441a      	add	r2, r3
 80088ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80088b2:	440b      	add	r3, r1
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	701a      	strb	r2, [r3, #0]
										n3++;
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	3301      	adds	r3, #1
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 80088be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	dbec      	blt.n	80088a0 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 80088ca:	e014      	b.n	80088f6 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 80088cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	441a      	add	r2, r3
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	4413      	add	r3, r2
 80088d8:	3b01      	subs	r3, #1
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	441a      	add	r2, r3
 80088de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e0:	6819      	ldr	r1, [r3, #0]
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	440b      	add	r3, r1
 80088e6:	3b01      	subs	r3, #1
 80088e8:	68f9      	ldr	r1, [r7, #12]
 80088ea:	440b      	add	r3, r1
 80088ec:	7812      	ldrb	r2, [r2, #0]
 80088ee:	701a      	strb	r2, [r3, #0]
										n5++;
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	3301      	adds	r3, #1
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 80088f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	441a      	add	r2, r3
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	441a      	add	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	dde0      	ble.n	80088cc <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800890a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	4413      	add	r3, r2
 8008912:	1e5a      	subs	r2, r3, #1
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	601a      	str	r2, [r3, #0]
							*cn=n3;
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891c:	601a      	str	r2, [r3, #0]
							estado=3;
 800891e:	2303      	movs	r3, #3
 8008920:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 8008922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008924:	2b04      	cmp	r3, #4
 8008926:	f040 80bd 	bne.w	8008aa4 <FT_String_ND+0x4e8>
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	2b01      	cmp	r3, #1
 800892e:	f040 80b9 	bne.w	8008aa4 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 8008932:	e012      	b.n	800895a <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 8008934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	1ad2      	subs	r2, r2, r3
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	4413      	add	r3, r2
 800893e:	461a      	mov	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	441a      	add	r2, r3
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008948:	440b      	add	r3, r1
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	701a      	strb	r2, [r3, #0]
								n4++;
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	3301      	adds	r3, #1
 8008952:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 8008954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008958:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800895a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	4413      	add	r3, r2
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	429a      	cmp	r2, r3
 8008968:	dae4      	bge.n	8008934 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800896a:	4917      	ldr	r1, [pc, #92]	; (80089c8 <FT_String_ND+0x40c>)
 800896c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800896e:	f000 fc49 	bl	8009204 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 8008972:	4916      	ldr	r1, [pc, #88]	; (80089cc <FT_String_ND+0x410>)
 8008974:	2000      	movs	r0, #0
 8008976:	f000 fc45 	bl	8009204 <strtok>
 800897a:	4603      	mov	r3, r0
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fa26 	bl	8008dce <atoi>
 8008982:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 8008984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008986:	3b01      	subs	r3, #1
 8008988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800898a:	429a      	cmp	r2, r3
 800898c:	db02      	blt.n	8008994 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800898e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008990:	3b01      	subs	r3, #1
 8008992:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 8008994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008996:	3306      	adds	r3, #6
 8008998:	222c      	movs	r2, #44	; 0x2c
 800899a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b09      	cmp	r3, #9
 80089a0:	dc07      	bgt.n	80089b2 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 80089a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a4:	3308      	adds	r3, #8
 80089a6:	223a      	movs	r2, #58	; 0x3a
 80089a8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	3309      	adds	r3, #9
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
 80089b0:	e019      	b.n	80089e6 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	2b63      	cmp	r3, #99	; 0x63
 80089b6:	dc0b      	bgt.n	80089d0 <FT_String_ND+0x414>
														{
															c[9]=':';
 80089b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ba:	3309      	adds	r3, #9
 80089bc:	223a      	movs	r2, #58	; 0x3a
 80089be:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	330a      	adds	r3, #10
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
 80089c6:	e00e      	b.n	80089e6 <FT_String_ND+0x42a>
 80089c8:	0800a788 	.word	0x0800a788
 80089cc:	0800a78c 	.word	0x0800a78c
														}
														else
														{
														if (lngd < 1000)
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d6:	da06      	bge.n	80089e6 <FT_String_ND+0x42a>
														{
															c[10]=':';
 80089d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089da:	330a      	adds	r3, #10
 80089dc:	223a      	movs	r2, #58	; 0x3a
 80089de:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	330b      	adds	r3, #11
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 80089e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	601a      	str	r2, [r3, #0]
							n4=0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 80089f0:	e016      	b.n	8008a20 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 80089f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	441a      	add	r2, r3
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	4413      	add	r3, r2
 8008a00:	461a      	mov	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	441a      	add	r2, r3
 8008a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	1ac9      	subs	r1, r1, r3
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	440b      	add	r3, r1
 8008a10:	4619      	mov	r1, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	440b      	add	r3, r1
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
								n4++;
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 8008a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	441a      	add	r2, r3
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	4413      	add	r3, r2
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	dade      	bge.n	80089f2 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 8008a34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	441a      	add	r2, r3
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	1e5a      	subs	r2, r3, #1
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	601a      	str	r2, [r3, #0]
							n5=0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 8008a48:	e00f      	b.n	8008a6a <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	4413      	add	r3, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a58:	441a      	add	r2, r3
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a5e:	440b      	add	r3, r1
 8008a60:	7812      	ldrb	r2, [r2, #0]
 8008a62:	701a      	strb	r2, [r3, #0]
								n5++;
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	3301      	adds	r3, #1
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	441a      	add	r2, r3
 8008a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	dbe6      	blt.n	8008a4a <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a80:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 8008a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	441a      	add	r2, r3
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	1ad2      	subs	r2, r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4413      	add	r3, r2
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d102      	bne.n	8008aa0 <FT_String_ND+0x4e4>
							{
								estado=4;
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	623b      	str	r3, [r7, #32]
 8008a9e:	e001      	b.n	8008aa4 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 8008aa0:	2305      	movs	r3, #5
 8008aa2:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 8008aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	f040 80c5 	bne.w	8008c36 <FT_String_ND+0x67a>
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	f040 80c1 	bne.w	8008c36 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 8008ab4:	e012      	b.n	8008adc <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 8008ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	4413      	add	r3, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008aca:	440b      	add	r3, r1
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	701a      	strb	r2, [r3, #0]
								n4++;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 8008ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 8008adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	4413      	add	r3, r2
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	dae4      	bge.n	8008ab6 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 8008aec:	4955      	ldr	r1, [pc, #340]	; (8008c44 <FT_String_ND+0x688>)
 8008aee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008af0:	f000 fb88 	bl	8009204 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 8008af4:	4954      	ldr	r1, [pc, #336]	; (8008c48 <FT_String_ND+0x68c>)
 8008af6:	2000      	movs	r0, #0
 8008af8:	f000 fb84 	bl	8009204 <strtok>
 8008afc:	4603      	mov	r3, r0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f965 	bl	8008dce <atoi>
 8008b04:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 8008b06:	4950      	ldr	r1, [pc, #320]	; (8008c48 <FT_String_ND+0x68c>)
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f000 fb7b 	bl	8009204 <strtok>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f95c 	bl	8008dce <atoi>
 8008b16:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 8008b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	db02      	blt.n	8008b28 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 8008b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b24:	3b01      	subs	r3, #1
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 8008b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2a:	3306      	adds	r3, #6
 8008b2c:	222c      	movs	r2, #44	; 0x2c
 8008b2e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2b09      	cmp	r3, #9
 8008b34:	dc07      	bgt.n	8008b46 <FT_String_ND+0x58a>
											{
												c[10]=':';
 8008b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b38:	330a      	adds	r3, #10
 8008b3a:	223a      	movs	r2, #58	; 0x3a
 8008b3c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	330b      	adds	r3, #11
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
 8008b44:	e015      	b.n	8008b72 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	2b63      	cmp	r3, #99	; 0x63
 8008b4a:	dc07      	bgt.n	8008b5c <FT_String_ND+0x5a0>
														{
															c[11]=':';
 8008b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4e:	330b      	adds	r3, #11
 8008b50:	223a      	movs	r2, #58	; 0x3a
 8008b52:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	330c      	adds	r3, #12
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5a:	e00a      	b.n	8008b72 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b62:	da06      	bge.n	8008b72 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 8008b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b66:	330c      	adds	r3, #12
 8008b68:	223a      	movs	r2, #58	; 0x3a
 8008b6a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	330d      	adds	r3, #13
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 8008b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b76:	601a      	str	r2, [r3, #0]
							n4=0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 8008b7c:	e016      	b.n	8008bac <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 8008b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	1ad2      	subs	r2, r2, r3
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	441a      	add	r2, r3
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	4413      	add	r3, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	441a      	add	r2, r3
 8008b92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	1ac9      	subs	r1, r1, r3
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	440b      	add	r3, r1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	440b      	add	r3, r1
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	701a      	strb	r2, [r3, #0]
								n4++;
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	3301      	adds	r3, #1
 8008baa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 8008bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	1ad2      	subs	r2, r2, r3
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	441a      	add	r2, r3
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	4413      	add	r3, r2
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	dade      	bge.n	8008b7e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 8008bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	441a      	add	r2, r3
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	1e5a      	subs	r2, r3, #1
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	601a      	str	r2, [r3, #0]
							n5=0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 8008bd4:	e00f      	b.n	8008bf6 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	4413      	add	r3, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be4:	441a      	add	r2, r3
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008bea:	440b      	add	r3, r1
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	701a      	strb	r2, [r3, #0]
								n5++;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	441a      	add	r2, r3
 8008c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	dbe6      	blt.n	8008bd6 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 8008c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	441a      	add	r2, r3
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	1ad2      	subs	r2, r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4413      	add	r3, r2
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d105      	bne.n	8008c32 <FT_String_ND+0x676>
							{
								estado=4;
 8008c26:	2304      	movs	r3, #4
 8008c28:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 8008c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e001      	b.n	8008c36 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 8008c32:	2305      	movs	r3, #5
 8008c34:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	e000      	b.n	8008c3c <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 8008c3a:	2302      	movs	r3, #2
			}
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3740      	adds	r7, #64	; 0x40
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	0800a788 	.word	0x0800a788
 8008c48:	0800a78c 	.word	0x0800a78c

08008c4c <FTOA>:
		}
		return(i);
}

int FTOA( int a,  unsigned char *v1, int comma)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08c      	sub	sp, #48	; 0x30
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 8008c58:	2300      	movs	r3, #0
 8008c5a:	753b      	strb	r3, [r7, #20]

int i=0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4932      	ldr	r1, [pc, #200]	; (8008d34 <FTOA+0xe8>)
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fa4b 	bl	8009108 <siprintf>
		b=strlen(origbuff);
 8008c72:	f107 0314 	add.w	r3, r7, #20
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f7 fab2 	bl	80001e0 <strlen>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	429a      	cmp	r2, r3
 8008c86:	da25      	bge.n	8008cd4 <FTOA+0x88>
		{
			while(i<=((b)+1))
 8008c88:	e01d      	b.n	8008cc6 <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 8008c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d10b      	bne.n	8008cae <FTOA+0x62>
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	da07      	bge.n	8008cae <FTOA+0x62>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <FTOA+0x62>
				{
					*v1++='.';
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	60ba      	str	r2, [r7, #8]
 8008caa:	222e      	movs	r2, #46	; 0x2e
 8008cac:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	60ba      	str	r2, [r7, #8]
 8008cb4:	f107 0114 	add.w	r1, r7, #20
 8008cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cba:	440a      	add	r2, r1
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	701a      	strb	r2, [r3, #0]
				i++;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	3301      	adds	r3, #1
 8008cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	dddc      	ble.n	8008c8a <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	e02a      	b.n	8008d2a <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d10f      	bne.n	8008cfa <FTOA+0xae>
			{
				v1[0]='0';
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2230      	movs	r2, #48	; 0x30
 8008cde:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	222e      	movs	r2, #46	; 0x2e
 8008ce6:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3302      	adds	r3, #2
 8008cec:	7d3a      	ldrb	r2, [r7, #20]
 8008cee:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	3303      	adds	r3, #3
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e016      	b.n	8008d28 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d113      	bne.n	8008d28 <FTOA+0xdc>
				{
					*v1++='0';
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	60ba      	str	r2, [r7, #8]
 8008d06:	2230      	movs	r2, #48	; 0x30
 8008d08:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	60ba      	str	r2, [r7, #8]
 8008d10:	222e      	movs	r2, #46	; 0x2e
 8008d12:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	60ba      	str	r2, [r7, #8]
 8008d1a:	2230      	movs	r2, #48	; 0x30
 8008d1c:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	60ba      	str	r2, [r7, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3730      	adds	r7, #48	; 0x30
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	0800a790 	.word	0x0800a790

08008d38 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
int x =0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 8008d4e:	f107 0310 	add.w	r3, r7, #16
 8008d52:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <CopiaVector+0x2e>
 8008d5a:	68b8      	ldr	r0, [r7, #8]
 8008d5c:	f7f7 fa40 	bl	80001e0 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	e02e      	b.n	8008dc4 <CopiaVector+0x8c>
else
	{
		x=c;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d70:	dd01      	ble.n	8008d76 <CopiaVector+0x3e>
			{
				return(1);
 8008d72:	2301      	movs	r3, #1
 8008d74:	e027      	b.n	8008dc6 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
				while(p<x)
 8008d7a:	e00a      	b.n	8008d92 <CopiaVector+0x5a>
				{
					*a++=*b++;
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	1c53      	adds	r3, r2, #1
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1c59      	adds	r1, r3, #1
 8008d86:	60f9      	str	r1, [r7, #12]
 8008d88:	7812      	ldrb	r2, [r2, #0]
 8008d8a:	701a      	strb	r2, [r3, #0]
					p++;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
				while(p<x)
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	dbf0      	blt.n	8008d7c <CopiaVector+0x44>
				}
				if (d==1)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d111      	bne.n	8008dc4 <CopiaVector+0x8c>
				{
				  p=c;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 8008da4:	e008      	b.n	8008db8 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	60fa      	str	r2, [r7, #12]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	701a      	strb	r2, [r3, #0]
					  p++;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3301      	adds	r3, #1
 8008db6:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	daf2      	bge.n	8008da6 <CopiaVector+0x6e>
				  }
				return (0);
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e000      	b.n	8008dc6 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 8008dc4:	2301      	movs	r3, #1
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <atoi>:
 8008dce:	220a      	movs	r2, #10
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	f000 b89d 	b.w	8008f10 <strtol>

08008dd6 <__itoa>:
 8008dd6:	1e93      	subs	r3, r2, #2
 8008dd8:	2b22      	cmp	r3, #34	; 0x22
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	d904      	bls.n	8008dea <__itoa+0x14>
 8008de0:	2300      	movs	r3, #0
 8008de2:	700b      	strb	r3, [r1, #0]
 8008de4:	461c      	mov	r4, r3
 8008de6:	4620      	mov	r0, r4
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	2a0a      	cmp	r2, #10
 8008dec:	d109      	bne.n	8008e02 <__itoa+0x2c>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	da07      	bge.n	8008e02 <__itoa+0x2c>
 8008df2:	232d      	movs	r3, #45	; 0x2d
 8008df4:	700b      	strb	r3, [r1, #0]
 8008df6:	4240      	negs	r0, r0
 8008df8:	2101      	movs	r1, #1
 8008dfa:	4421      	add	r1, r4
 8008dfc:	f000 f892 	bl	8008f24 <__utoa>
 8008e00:	e7f1      	b.n	8008de6 <__itoa+0x10>
 8008e02:	2100      	movs	r1, #0
 8008e04:	e7f9      	b.n	8008dfa <__itoa+0x24>

08008e06 <itoa>:
 8008e06:	f7ff bfe6 	b.w	8008dd6 <__itoa>
	...

08008e0c <_strtol_l.constprop.0>:
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e12:	d001      	beq.n	8008e18 <_strtol_l.constprop.0+0xc>
 8008e14:	2b24      	cmp	r3, #36	; 0x24
 8008e16:	d906      	bls.n	8008e26 <_strtol_l.constprop.0+0x1a>
 8008e18:	f000 fa96 	bl	8009348 <__errno>
 8008e1c:	2316      	movs	r3, #22
 8008e1e:	6003      	str	r3, [r0, #0]
 8008e20:	2000      	movs	r0, #0
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f0c <_strtol_l.constprop.0+0x100>
 8008e2a:	460d      	mov	r5, r1
 8008e2c:	462e      	mov	r6, r5
 8008e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008e36:	f017 0708 	ands.w	r7, r7, #8
 8008e3a:	d1f7      	bne.n	8008e2c <_strtol_l.constprop.0+0x20>
 8008e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e3e:	d132      	bne.n	8008ea6 <_strtol_l.constprop.0+0x9a>
 8008e40:	782c      	ldrb	r4, [r5, #0]
 8008e42:	2701      	movs	r7, #1
 8008e44:	1cb5      	adds	r5, r6, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d05b      	beq.n	8008f02 <_strtol_l.constprop.0+0xf6>
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d109      	bne.n	8008e62 <_strtol_l.constprop.0+0x56>
 8008e4e:	2c30      	cmp	r4, #48	; 0x30
 8008e50:	d107      	bne.n	8008e62 <_strtol_l.constprop.0+0x56>
 8008e52:	782c      	ldrb	r4, [r5, #0]
 8008e54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e58:	2c58      	cmp	r4, #88	; 0x58
 8008e5a:	d14d      	bne.n	8008ef8 <_strtol_l.constprop.0+0xec>
 8008e5c:	786c      	ldrb	r4, [r5, #1]
 8008e5e:	2310      	movs	r3, #16
 8008e60:	3502      	adds	r5, #2
 8008e62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e66:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e6a:	f04f 0e00 	mov.w	lr, #0
 8008e6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e72:	4676      	mov	r6, lr
 8008e74:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e7c:	f1bc 0f09 	cmp.w	ip, #9
 8008e80:	d816      	bhi.n	8008eb0 <_strtol_l.constprop.0+0xa4>
 8008e82:	4664      	mov	r4, ip
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	dd24      	ble.n	8008ed2 <_strtol_l.constprop.0+0xc6>
 8008e88:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e8c:	d008      	beq.n	8008ea0 <_strtol_l.constprop.0+0x94>
 8008e8e:	45b1      	cmp	r9, r6
 8008e90:	d31c      	bcc.n	8008ecc <_strtol_l.constprop.0+0xc0>
 8008e92:	d101      	bne.n	8008e98 <_strtol_l.constprop.0+0x8c>
 8008e94:	45a2      	cmp	sl, r4
 8008e96:	db19      	blt.n	8008ecc <_strtol_l.constprop.0+0xc0>
 8008e98:	fb06 4603 	mla	r6, r6, r3, r4
 8008e9c:	f04f 0e01 	mov.w	lr, #1
 8008ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ea4:	e7e8      	b.n	8008e78 <_strtol_l.constprop.0+0x6c>
 8008ea6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ea8:	bf04      	itt	eq
 8008eaa:	782c      	ldrbeq	r4, [r5, #0]
 8008eac:	1cb5      	addeq	r5, r6, #2
 8008eae:	e7ca      	b.n	8008e46 <_strtol_l.constprop.0+0x3a>
 8008eb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008eb4:	f1bc 0f19 	cmp.w	ip, #25
 8008eb8:	d801      	bhi.n	8008ebe <_strtol_l.constprop.0+0xb2>
 8008eba:	3c37      	subs	r4, #55	; 0x37
 8008ebc:	e7e2      	b.n	8008e84 <_strtol_l.constprop.0+0x78>
 8008ebe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ec2:	f1bc 0f19 	cmp.w	ip, #25
 8008ec6:	d804      	bhi.n	8008ed2 <_strtol_l.constprop.0+0xc6>
 8008ec8:	3c57      	subs	r4, #87	; 0x57
 8008eca:	e7db      	b.n	8008e84 <_strtol_l.constprop.0+0x78>
 8008ecc:	f04f 3eff 	mov.w	lr, #4294967295
 8008ed0:	e7e6      	b.n	8008ea0 <_strtol_l.constprop.0+0x94>
 8008ed2:	f1be 3fff 	cmp.w	lr, #4294967295
 8008ed6:	d105      	bne.n	8008ee4 <_strtol_l.constprop.0+0xd8>
 8008ed8:	2322      	movs	r3, #34	; 0x22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	4646      	mov	r6, r8
 8008ede:	b942      	cbnz	r2, 8008ef2 <_strtol_l.constprop.0+0xe6>
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	e79e      	b.n	8008e22 <_strtol_l.constprop.0+0x16>
 8008ee4:	b107      	cbz	r7, 8008ee8 <_strtol_l.constprop.0+0xdc>
 8008ee6:	4276      	negs	r6, r6
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d0f9      	beq.n	8008ee0 <_strtol_l.constprop.0+0xd4>
 8008eec:	f1be 0f00 	cmp.w	lr, #0
 8008ef0:	d000      	beq.n	8008ef4 <_strtol_l.constprop.0+0xe8>
 8008ef2:	1e69      	subs	r1, r5, #1
 8008ef4:	6011      	str	r1, [r2, #0]
 8008ef6:	e7f3      	b.n	8008ee0 <_strtol_l.constprop.0+0xd4>
 8008ef8:	2430      	movs	r4, #48	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1b1      	bne.n	8008e62 <_strtol_l.constprop.0+0x56>
 8008efe:	2308      	movs	r3, #8
 8008f00:	e7af      	b.n	8008e62 <_strtol_l.constprop.0+0x56>
 8008f02:	2c30      	cmp	r4, #48	; 0x30
 8008f04:	d0a5      	beq.n	8008e52 <_strtol_l.constprop.0+0x46>
 8008f06:	230a      	movs	r3, #10
 8008f08:	e7ab      	b.n	8008e62 <_strtol_l.constprop.0+0x56>
 8008f0a:	bf00      	nop
 8008f0c:	0800a7d2 	.word	0x0800a7d2

08008f10 <strtol>:
 8008f10:	4613      	mov	r3, r2
 8008f12:	460a      	mov	r2, r1
 8008f14:	4601      	mov	r1, r0
 8008f16:	4802      	ldr	r0, [pc, #8]	; (8008f20 <strtol+0x10>)
 8008f18:	6800      	ldr	r0, [r0, #0]
 8008f1a:	f7ff bf77 	b.w	8008e0c <_strtol_l.constprop.0>
 8008f1e:	bf00      	nop
 8008f20:	20000064 	.word	0x20000064

08008f24 <__utoa>:
 8008f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f26:	4c1f      	ldr	r4, [pc, #124]	; (8008fa4 <__utoa+0x80>)
 8008f28:	b08b      	sub	sp, #44	; 0x2c
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	466e      	mov	r6, sp
 8008f30:	f104 0c20 	add.w	ip, r4, #32
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	4637      	mov	r7, r6
 8008f3a:	c703      	stmia	r7!, {r0, r1}
 8008f3c:	3408      	adds	r4, #8
 8008f3e:	4564      	cmp	r4, ip
 8008f40:	463e      	mov	r6, r7
 8008f42:	d1f7      	bne.n	8008f34 <__utoa+0x10>
 8008f44:	7921      	ldrb	r1, [r4, #4]
 8008f46:	7139      	strb	r1, [r7, #4]
 8008f48:	1e91      	subs	r1, r2, #2
 8008f4a:	6820      	ldr	r0, [r4, #0]
 8008f4c:	6038      	str	r0, [r7, #0]
 8008f4e:	2922      	cmp	r1, #34	; 0x22
 8008f50:	f04f 0100 	mov.w	r1, #0
 8008f54:	d904      	bls.n	8008f60 <__utoa+0x3c>
 8008f56:	7019      	strb	r1, [r3, #0]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	b00b      	add	sp, #44	; 0x2c
 8008f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f60:	1e58      	subs	r0, r3, #1
 8008f62:	4684      	mov	ip, r0
 8008f64:	fbb5 f7f2 	udiv	r7, r5, r2
 8008f68:	fb02 5617 	mls	r6, r2, r7, r5
 8008f6c:	3628      	adds	r6, #40	; 0x28
 8008f6e:	446e      	add	r6, sp
 8008f70:	460c      	mov	r4, r1
 8008f72:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008f76:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008f7a:	462e      	mov	r6, r5
 8008f7c:	42b2      	cmp	r2, r6
 8008f7e:	f101 0101 	add.w	r1, r1, #1
 8008f82:	463d      	mov	r5, r7
 8008f84:	d9ee      	bls.n	8008f64 <__utoa+0x40>
 8008f86:	2200      	movs	r2, #0
 8008f88:	545a      	strb	r2, [r3, r1]
 8008f8a:	1919      	adds	r1, r3, r4
 8008f8c:	1aa5      	subs	r5, r4, r2
 8008f8e:	42aa      	cmp	r2, r5
 8008f90:	dae3      	bge.n	8008f5a <__utoa+0x36>
 8008f92:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008f96:	780e      	ldrb	r6, [r1, #0]
 8008f98:	7006      	strb	r6, [r0, #0]
 8008f9a:	3201      	adds	r2, #1
 8008f9c:	f801 5901 	strb.w	r5, [r1], #-1
 8008fa0:	e7f4      	b.n	8008f8c <__utoa+0x68>
 8008fa2:	bf00      	nop
 8008fa4:	0800a7ac 	.word	0x0800a7ac

08008fa8 <std>:
 8008fa8:	2300      	movs	r3, #0
 8008faa:	b510      	push	{r4, lr}
 8008fac:	4604      	mov	r4, r0
 8008fae:	e9c0 3300 	strd	r3, r3, [r0]
 8008fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb6:	6083      	str	r3, [r0, #8]
 8008fb8:	8181      	strh	r1, [r0, #12]
 8008fba:	6643      	str	r3, [r0, #100]	; 0x64
 8008fbc:	81c2      	strh	r2, [r0, #14]
 8008fbe:	6183      	str	r3, [r0, #24]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	305c      	adds	r0, #92	; 0x5c
 8008fc6:	f000 f902 	bl	80091ce <memset>
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <std+0x38>)
 8008fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <std+0x3c>)
 8008fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <std+0x40>)
 8008fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <std+0x44>)
 8008fd8:	6224      	str	r4, [r4, #32]
 8008fda:	6323      	str	r3, [r4, #48]	; 0x30
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	bf00      	nop
 8008fe0:	08009149 	.word	0x08009149
 8008fe4:	0800916b 	.word	0x0800916b
 8008fe8:	080091a3 	.word	0x080091a3
 8008fec:	080091c7 	.word	0x080091c7

08008ff0 <stdio_exit_handler>:
 8008ff0:	4a02      	ldr	r2, [pc, #8]	; (8008ffc <stdio_exit_handler+0xc>)
 8008ff2:	4903      	ldr	r1, [pc, #12]	; (8009000 <stdio_exit_handler+0x10>)
 8008ff4:	4803      	ldr	r0, [pc, #12]	; (8009004 <stdio_exit_handler+0x14>)
 8008ff6:	f000 b869 	b.w	80090cc <_fwalk_sglue>
 8008ffa:	bf00      	nop
 8008ffc:	2000000c 	.word	0x2000000c
 8009000:	08009cb9 	.word	0x08009cb9
 8009004:	20000018 	.word	0x20000018

08009008 <cleanup_stdio>:
 8009008:	6841      	ldr	r1, [r0, #4]
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <cleanup_stdio+0x34>)
 800900c:	4299      	cmp	r1, r3
 800900e:	b510      	push	{r4, lr}
 8009010:	4604      	mov	r4, r0
 8009012:	d001      	beq.n	8009018 <cleanup_stdio+0x10>
 8009014:	f000 fe50 	bl	8009cb8 <_fflush_r>
 8009018:	68a1      	ldr	r1, [r4, #8]
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <cleanup_stdio+0x38>)
 800901c:	4299      	cmp	r1, r3
 800901e:	d002      	beq.n	8009026 <cleanup_stdio+0x1e>
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fe49 	bl	8009cb8 <_fflush_r>
 8009026:	68e1      	ldr	r1, [r4, #12]
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <cleanup_stdio+0x3c>)
 800902a:	4299      	cmp	r1, r3
 800902c:	d004      	beq.n	8009038 <cleanup_stdio+0x30>
 800902e:	4620      	mov	r0, r4
 8009030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009034:	f000 be40 	b.w	8009cb8 <_fflush_r>
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	20002df0 	.word	0x20002df0
 8009040:	20002e58 	.word	0x20002e58
 8009044:	20002ec0 	.word	0x20002ec0

08009048 <global_stdio_init.part.0>:
 8009048:	b510      	push	{r4, lr}
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <global_stdio_init.part.0+0x30>)
 800904c:	4c0b      	ldr	r4, [pc, #44]	; (800907c <global_stdio_init.part.0+0x34>)
 800904e:	4a0c      	ldr	r2, [pc, #48]	; (8009080 <global_stdio_init.part.0+0x38>)
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	4620      	mov	r0, r4
 8009054:	2200      	movs	r2, #0
 8009056:	2104      	movs	r1, #4
 8009058:	f7ff ffa6 	bl	8008fa8 <std>
 800905c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009060:	2201      	movs	r2, #1
 8009062:	2109      	movs	r1, #9
 8009064:	f7ff ffa0 	bl	8008fa8 <std>
 8009068:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800906c:	2202      	movs	r2, #2
 800906e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009072:	2112      	movs	r1, #18
 8009074:	f7ff bf98 	b.w	8008fa8 <std>
 8009078:	20002f28 	.word	0x20002f28
 800907c:	20002df0 	.word	0x20002df0
 8009080:	08008ff1 	.word	0x08008ff1

08009084 <__sfp_lock_acquire>:
 8009084:	4801      	ldr	r0, [pc, #4]	; (800908c <__sfp_lock_acquire+0x8>)
 8009086:	f000 b989 	b.w	800939c <__retarget_lock_acquire_recursive>
 800908a:	bf00      	nop
 800908c:	20002f31 	.word	0x20002f31

08009090 <__sfp_lock_release>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__sfp_lock_release+0x8>)
 8009092:	f000 b984 	b.w	800939e <__retarget_lock_release_recursive>
 8009096:	bf00      	nop
 8009098:	20002f31 	.word	0x20002f31

0800909c <__sinit>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	f7ff fff0 	bl	8009084 <__sfp_lock_acquire>
 80090a4:	6a23      	ldr	r3, [r4, #32]
 80090a6:	b11b      	cbz	r3, 80090b0 <__sinit+0x14>
 80090a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ac:	f7ff bff0 	b.w	8009090 <__sfp_lock_release>
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <__sinit+0x28>)
 80090b2:	6223      	str	r3, [r4, #32]
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <__sinit+0x2c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f5      	bne.n	80090a8 <__sinit+0xc>
 80090bc:	f7ff ffc4 	bl	8009048 <global_stdio_init.part.0>
 80090c0:	e7f2      	b.n	80090a8 <__sinit+0xc>
 80090c2:	bf00      	nop
 80090c4:	08009009 	.word	0x08009009
 80090c8:	20002f28 	.word	0x20002f28

080090cc <_fwalk_sglue>:
 80090cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	4607      	mov	r7, r0
 80090d2:	4688      	mov	r8, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	2600      	movs	r6, #0
 80090d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090dc:	f1b9 0901 	subs.w	r9, r9, #1
 80090e0:	d505      	bpl.n	80090ee <_fwalk_sglue+0x22>
 80090e2:	6824      	ldr	r4, [r4, #0]
 80090e4:	2c00      	cmp	r4, #0
 80090e6:	d1f7      	bne.n	80090d8 <_fwalk_sglue+0xc>
 80090e8:	4630      	mov	r0, r6
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d907      	bls.n	8009104 <_fwalk_sglue+0x38>
 80090f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f8:	3301      	adds	r3, #1
 80090fa:	d003      	beq.n	8009104 <_fwalk_sglue+0x38>
 80090fc:	4629      	mov	r1, r5
 80090fe:	4638      	mov	r0, r7
 8009100:	47c0      	blx	r8
 8009102:	4306      	orrs	r6, r0
 8009104:	3568      	adds	r5, #104	; 0x68
 8009106:	e7e9      	b.n	80090dc <_fwalk_sglue+0x10>

08009108 <siprintf>:
 8009108:	b40e      	push	{r1, r2, r3}
 800910a:	b500      	push	{lr}
 800910c:	b09c      	sub	sp, #112	; 0x70
 800910e:	ab1d      	add	r3, sp, #116	; 0x74
 8009110:	9002      	str	r0, [sp, #8]
 8009112:	9006      	str	r0, [sp, #24]
 8009114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009118:	4809      	ldr	r0, [pc, #36]	; (8009140 <siprintf+0x38>)
 800911a:	9107      	str	r1, [sp, #28]
 800911c:	9104      	str	r1, [sp, #16]
 800911e:	4909      	ldr	r1, [pc, #36]	; (8009144 <siprintf+0x3c>)
 8009120:	f853 2b04 	ldr.w	r2, [r3], #4
 8009124:	9105      	str	r1, [sp, #20]
 8009126:	6800      	ldr	r0, [r0, #0]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	a902      	add	r1, sp, #8
 800912c:	f000 fab0 	bl	8009690 <_svfiprintf_r>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	b01c      	add	sp, #112	; 0x70
 8009138:	f85d eb04 	ldr.w	lr, [sp], #4
 800913c:	b003      	add	sp, #12
 800913e:	4770      	bx	lr
 8009140:	20000064 	.word	0x20000064
 8009144:	ffff0208 	.word	0xffff0208

08009148 <__sread>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	f000 f8d6 	bl	8009300 <_read_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	bfab      	itete	ge
 8009158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800915a:	89a3      	ldrhlt	r3, [r4, #12]
 800915c:	181b      	addge	r3, r3, r0
 800915e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009162:	bfac      	ite	ge
 8009164:	6563      	strge	r3, [r4, #84]	; 0x54
 8009166:	81a3      	strhlt	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__swrite>:
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	461f      	mov	r7, r3
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	05db      	lsls	r3, r3, #23
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	4616      	mov	r6, r2
 800917a:	d505      	bpl.n	8009188 <__swrite+0x1e>
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2302      	movs	r3, #2
 8009182:	2200      	movs	r2, #0
 8009184:	f000 f8aa 	bl	80092dc <_lseek_r>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	4632      	mov	r2, r6
 8009196:	463b      	mov	r3, r7
 8009198:	4628      	mov	r0, r5
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f000 b8c1 	b.w	8009324 <_write_r>

080091a2 <__sseek>:
 80091a2:	b510      	push	{r4, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 f897 	bl	80092dc <_lseek_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	bf15      	itete	ne
 80091b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091be:	81a3      	strheq	r3, [r4, #12]
 80091c0:	bf18      	it	ne
 80091c2:	81a3      	strhne	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__sclose>:
 80091c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ca:	f000 b877 	b.w	80092bc <_close_r>

080091ce <memset>:
 80091ce:	4402      	add	r2, r0
 80091d0:	4603      	mov	r3, r0
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d100      	bne.n	80091d8 <memset+0xa>
 80091d6:	4770      	bx	lr
 80091d8:	f803 1b01 	strb.w	r1, [r3], #1
 80091dc:	e7f9      	b.n	80091d2 <memset+0x4>

080091de <strncat>:
 80091de:	b530      	push	{r4, r5, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	7825      	ldrb	r5, [r4, #0]
 80091e4:	4623      	mov	r3, r4
 80091e6:	3401      	adds	r4, #1
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	d1fa      	bne.n	80091e2 <strncat+0x4>
 80091ec:	3a01      	subs	r2, #1
 80091ee:	d304      	bcc.n	80091fa <strncat+0x1c>
 80091f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f4:	f803 4b01 	strb.w	r4, [r3], #1
 80091f8:	b904      	cbnz	r4, 80091fc <strncat+0x1e>
 80091fa:	bd30      	pop	{r4, r5, pc}
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	d1f5      	bne.n	80091ec <strncat+0xe>
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	e7f3      	b.n	80091ec <strncat+0xe>

08009204 <strtok>:
 8009204:	4b16      	ldr	r3, [pc, #88]	; (8009260 <strtok+0x5c>)
 8009206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009208:	681e      	ldr	r6, [r3, #0]
 800920a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800920c:	4605      	mov	r5, r0
 800920e:	b9fc      	cbnz	r4, 8009250 <strtok+0x4c>
 8009210:	2050      	movs	r0, #80	; 0x50
 8009212:	9101      	str	r1, [sp, #4]
 8009214:	f000 f92e 	bl	8009474 <malloc>
 8009218:	9901      	ldr	r1, [sp, #4]
 800921a:	6470      	str	r0, [r6, #68]	; 0x44
 800921c:	4602      	mov	r2, r0
 800921e:	b920      	cbnz	r0, 800922a <strtok+0x26>
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <strtok+0x60>)
 8009222:	4811      	ldr	r0, [pc, #68]	; (8009268 <strtok+0x64>)
 8009224:	215b      	movs	r1, #91	; 0x5b
 8009226:	f000 f8bb 	bl	80093a0 <__assert_func>
 800922a:	e9c0 4400 	strd	r4, r4, [r0]
 800922e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009232:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009236:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800923a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800923e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009242:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009246:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800924a:	6184      	str	r4, [r0, #24]
 800924c:	7704      	strb	r4, [r0, #28]
 800924e:	6244      	str	r4, [r0, #36]	; 0x24
 8009250:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009252:	2301      	movs	r3, #1
 8009254:	4628      	mov	r0, r5
 8009256:	b002      	add	sp, #8
 8009258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800925c:	f000 b806 	b.w	800926c <__strtok_r>
 8009260:	20000064 	.word	0x20000064
 8009264:	0800a8d2 	.word	0x0800a8d2
 8009268:	0800a8e9 	.word	0x0800a8e9

0800926c <__strtok_r>:
 800926c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926e:	b908      	cbnz	r0, 8009274 <__strtok_r+0x8>
 8009270:	6810      	ldr	r0, [r2, #0]
 8009272:	b188      	cbz	r0, 8009298 <__strtok_r+0x2c>
 8009274:	4604      	mov	r4, r0
 8009276:	4620      	mov	r0, r4
 8009278:	f814 5b01 	ldrb.w	r5, [r4], #1
 800927c:	460f      	mov	r7, r1
 800927e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009282:	b91e      	cbnz	r6, 800928c <__strtok_r+0x20>
 8009284:	b965      	cbnz	r5, 80092a0 <__strtok_r+0x34>
 8009286:	6015      	str	r5, [r2, #0]
 8009288:	4628      	mov	r0, r5
 800928a:	e005      	b.n	8009298 <__strtok_r+0x2c>
 800928c:	42b5      	cmp	r5, r6
 800928e:	d1f6      	bne.n	800927e <__strtok_r+0x12>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f0      	bne.n	8009276 <__strtok_r+0xa>
 8009294:	6014      	str	r4, [r2, #0]
 8009296:	7003      	strb	r3, [r0, #0]
 8009298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800929a:	461c      	mov	r4, r3
 800929c:	e00c      	b.n	80092b8 <__strtok_r+0x4c>
 800929e:	b915      	cbnz	r5, 80092a6 <__strtok_r+0x3a>
 80092a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092a4:	460e      	mov	r6, r1
 80092a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	d1f7      	bne.n	800929e <__strtok_r+0x32>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0f3      	beq.n	800929a <__strtok_r+0x2e>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80092b8:	6014      	str	r4, [r2, #0]
 80092ba:	e7ed      	b.n	8009298 <__strtok_r+0x2c>

080092bc <_close_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	; (80092d8 <_close_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f8 ff57 	bl	800217a <_close>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_close_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_close_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	20002f2c 	.word	0x20002f2c

080092dc <_lseek_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d07      	ldr	r5, [pc, #28]	; (80092fc <_lseek_r+0x20>)
 80092e0:	4604      	mov	r4, r0
 80092e2:	4608      	mov	r0, r1
 80092e4:	4611      	mov	r1, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f7f8 ff6c 	bl	80021c8 <_lseek>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_lseek_r+0x1e>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_lseek_r+0x1e>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	20002f2c 	.word	0x20002f2c

08009300 <_read_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4d07      	ldr	r5, [pc, #28]	; (8009320 <_read_r+0x20>)
 8009304:	4604      	mov	r4, r0
 8009306:	4608      	mov	r0, r1
 8009308:	4611      	mov	r1, r2
 800930a:	2200      	movs	r2, #0
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f7f8 fefa 	bl	8002108 <_read>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_read_r+0x1e>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_read_r+0x1e>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	20002f2c 	.word	0x20002f2c

08009324 <_write_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d07      	ldr	r5, [pc, #28]	; (8009344 <_write_r+0x20>)
 8009328:	4604      	mov	r4, r0
 800932a:	4608      	mov	r0, r1
 800932c:	4611      	mov	r1, r2
 800932e:	2200      	movs	r2, #0
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7f8 ff05 	bl	8002142 <_write>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_write_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_write_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	20002f2c 	.word	0x20002f2c

08009348 <__errno>:
 8009348:	4b01      	ldr	r3, [pc, #4]	; (8009350 <__errno+0x8>)
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000064 	.word	0x20000064

08009354 <__libc_init_array>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4d0d      	ldr	r5, [pc, #52]	; (800938c <__libc_init_array+0x38>)
 8009358:	4c0d      	ldr	r4, [pc, #52]	; (8009390 <__libc_init_array+0x3c>)
 800935a:	1b64      	subs	r4, r4, r5
 800935c:	10a4      	asrs	r4, r4, #2
 800935e:	2600      	movs	r6, #0
 8009360:	42a6      	cmp	r6, r4
 8009362:	d109      	bne.n	8009378 <__libc_init_array+0x24>
 8009364:	4d0b      	ldr	r5, [pc, #44]	; (8009394 <__libc_init_array+0x40>)
 8009366:	4c0c      	ldr	r4, [pc, #48]	; (8009398 <__libc_init_array+0x44>)
 8009368:	f000 fff8 	bl	800a35c <_init>
 800936c:	1b64      	subs	r4, r4, r5
 800936e:	10a4      	asrs	r4, r4, #2
 8009370:	2600      	movs	r6, #0
 8009372:	42a6      	cmp	r6, r4
 8009374:	d105      	bne.n	8009382 <__libc_init_array+0x2e>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	f855 3b04 	ldr.w	r3, [r5], #4
 800937c:	4798      	blx	r3
 800937e:	3601      	adds	r6, #1
 8009380:	e7ee      	b.n	8009360 <__libc_init_array+0xc>
 8009382:	f855 3b04 	ldr.w	r3, [r5], #4
 8009386:	4798      	blx	r3
 8009388:	3601      	adds	r6, #1
 800938a:	e7f2      	b.n	8009372 <__libc_init_array+0x1e>
 800938c:	0800a9bc 	.word	0x0800a9bc
 8009390:	0800a9bc 	.word	0x0800a9bc
 8009394:	0800a9bc 	.word	0x0800a9bc
 8009398:	0800a9c0 	.word	0x0800a9c0

0800939c <__retarget_lock_acquire_recursive>:
 800939c:	4770      	bx	lr

0800939e <__retarget_lock_release_recursive>:
 800939e:	4770      	bx	lr

080093a0 <__assert_func>:
 80093a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093a2:	4614      	mov	r4, r2
 80093a4:	461a      	mov	r2, r3
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <__assert_func+0x2c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4605      	mov	r5, r0
 80093ac:	68d8      	ldr	r0, [r3, #12]
 80093ae:	b14c      	cbz	r4, 80093c4 <__assert_func+0x24>
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <__assert_func+0x30>)
 80093b2:	9100      	str	r1, [sp, #0]
 80093b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093b8:	4906      	ldr	r1, [pc, #24]	; (80093d4 <__assert_func+0x34>)
 80093ba:	462b      	mov	r3, r5
 80093bc:	f000 fca4 	bl	8009d08 <fiprintf>
 80093c0:	f000 fcec 	bl	8009d9c <abort>
 80093c4:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <__assert_func+0x38>)
 80093c6:	461c      	mov	r4, r3
 80093c8:	e7f3      	b.n	80093b2 <__assert_func+0x12>
 80093ca:	bf00      	nop
 80093cc:	20000064 	.word	0x20000064
 80093d0:	0800a943 	.word	0x0800a943
 80093d4:	0800a950 	.word	0x0800a950
 80093d8:	0800a97e 	.word	0x0800a97e

080093dc <_free_r>:
 80093dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093de:	2900      	cmp	r1, #0
 80093e0:	d044      	beq.n	800946c <_free_r+0x90>
 80093e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e6:	9001      	str	r0, [sp, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f1a1 0404 	sub.w	r4, r1, #4
 80093ee:	bfb8      	it	lt
 80093f0:	18e4      	addlt	r4, r4, r3
 80093f2:	f000 f8e7 	bl	80095c4 <__malloc_lock>
 80093f6:	4a1e      	ldr	r2, [pc, #120]	; (8009470 <_free_r+0x94>)
 80093f8:	9801      	ldr	r0, [sp, #4]
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	b933      	cbnz	r3, 800940c <_free_r+0x30>
 80093fe:	6063      	str	r3, [r4, #4]
 8009400:	6014      	str	r4, [r2, #0]
 8009402:	b003      	add	sp, #12
 8009404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009408:	f000 b8e2 	b.w	80095d0 <__malloc_unlock>
 800940c:	42a3      	cmp	r3, r4
 800940e:	d908      	bls.n	8009422 <_free_r+0x46>
 8009410:	6825      	ldr	r5, [r4, #0]
 8009412:	1961      	adds	r1, r4, r5
 8009414:	428b      	cmp	r3, r1
 8009416:	bf01      	itttt	eq
 8009418:	6819      	ldreq	r1, [r3, #0]
 800941a:	685b      	ldreq	r3, [r3, #4]
 800941c:	1949      	addeq	r1, r1, r5
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	e7ed      	b.n	80093fe <_free_r+0x22>
 8009422:	461a      	mov	r2, r3
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	b10b      	cbz	r3, 800942c <_free_r+0x50>
 8009428:	42a3      	cmp	r3, r4
 800942a:	d9fa      	bls.n	8009422 <_free_r+0x46>
 800942c:	6811      	ldr	r1, [r2, #0]
 800942e:	1855      	adds	r5, r2, r1
 8009430:	42a5      	cmp	r5, r4
 8009432:	d10b      	bne.n	800944c <_free_r+0x70>
 8009434:	6824      	ldr	r4, [r4, #0]
 8009436:	4421      	add	r1, r4
 8009438:	1854      	adds	r4, r2, r1
 800943a:	42a3      	cmp	r3, r4
 800943c:	6011      	str	r1, [r2, #0]
 800943e:	d1e0      	bne.n	8009402 <_free_r+0x26>
 8009440:	681c      	ldr	r4, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	6053      	str	r3, [r2, #4]
 8009446:	440c      	add	r4, r1
 8009448:	6014      	str	r4, [r2, #0]
 800944a:	e7da      	b.n	8009402 <_free_r+0x26>
 800944c:	d902      	bls.n	8009454 <_free_r+0x78>
 800944e:	230c      	movs	r3, #12
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	e7d6      	b.n	8009402 <_free_r+0x26>
 8009454:	6825      	ldr	r5, [r4, #0]
 8009456:	1961      	adds	r1, r4, r5
 8009458:	428b      	cmp	r3, r1
 800945a:	bf04      	itt	eq
 800945c:	6819      	ldreq	r1, [r3, #0]
 800945e:	685b      	ldreq	r3, [r3, #4]
 8009460:	6063      	str	r3, [r4, #4]
 8009462:	bf04      	itt	eq
 8009464:	1949      	addeq	r1, r1, r5
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	6054      	str	r4, [r2, #4]
 800946a:	e7ca      	b.n	8009402 <_free_r+0x26>
 800946c:	b003      	add	sp, #12
 800946e:	bd30      	pop	{r4, r5, pc}
 8009470:	20002f34 	.word	0x20002f34

08009474 <malloc>:
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <malloc+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b823 	b.w	80094c4 <_malloc_r>
 800947e:	bf00      	nop
 8009480:	20000064 	.word	0x20000064

08009484 <sbrk_aligned>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4e0e      	ldr	r6, [pc, #56]	; (80094c0 <sbrk_aligned+0x3c>)
 8009488:	460c      	mov	r4, r1
 800948a:	6831      	ldr	r1, [r6, #0]
 800948c:	4605      	mov	r5, r0
 800948e:	b911      	cbnz	r1, 8009496 <sbrk_aligned+0x12>
 8009490:	f000 fc66 	bl	8009d60 <_sbrk_r>
 8009494:	6030      	str	r0, [r6, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f000 fc61 	bl	8009d60 <_sbrk_r>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d00a      	beq.n	80094b8 <sbrk_aligned+0x34>
 80094a2:	1cc4      	adds	r4, r0, #3
 80094a4:	f024 0403 	bic.w	r4, r4, #3
 80094a8:	42a0      	cmp	r0, r4
 80094aa:	d007      	beq.n	80094bc <sbrk_aligned+0x38>
 80094ac:	1a21      	subs	r1, r4, r0
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 fc56 	bl	8009d60 <_sbrk_r>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d101      	bne.n	80094bc <sbrk_aligned+0x38>
 80094b8:	f04f 34ff 	mov.w	r4, #4294967295
 80094bc:	4620      	mov	r0, r4
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	20002f38 	.word	0x20002f38

080094c4 <_malloc_r>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	1ccd      	adds	r5, r1, #3
 80094ca:	f025 0503 	bic.w	r5, r5, #3
 80094ce:	3508      	adds	r5, #8
 80094d0:	2d0c      	cmp	r5, #12
 80094d2:	bf38      	it	cc
 80094d4:	250c      	movcc	r5, #12
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	4607      	mov	r7, r0
 80094da:	db01      	blt.n	80094e0 <_malloc_r+0x1c>
 80094dc:	42a9      	cmp	r1, r5
 80094de:	d905      	bls.n	80094ec <_malloc_r+0x28>
 80094e0:	230c      	movs	r3, #12
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	2600      	movs	r6, #0
 80094e6:	4630      	mov	r0, r6
 80094e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095c0 <_malloc_r+0xfc>
 80094f0:	f000 f868 	bl	80095c4 <__malloc_lock>
 80094f4:	f8d8 3000 	ldr.w	r3, [r8]
 80094f8:	461c      	mov	r4, r3
 80094fa:	bb5c      	cbnz	r4, 8009554 <_malloc_r+0x90>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4638      	mov	r0, r7
 8009500:	f7ff ffc0 	bl	8009484 <sbrk_aligned>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	4604      	mov	r4, r0
 8009508:	d155      	bne.n	80095b6 <_malloc_r+0xf2>
 800950a:	f8d8 4000 	ldr.w	r4, [r8]
 800950e:	4626      	mov	r6, r4
 8009510:	2e00      	cmp	r6, #0
 8009512:	d145      	bne.n	80095a0 <_malloc_r+0xdc>
 8009514:	2c00      	cmp	r4, #0
 8009516:	d048      	beq.n	80095aa <_malloc_r+0xe6>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	4631      	mov	r1, r6
 800951c:	4638      	mov	r0, r7
 800951e:	eb04 0903 	add.w	r9, r4, r3
 8009522:	f000 fc1d 	bl	8009d60 <_sbrk_r>
 8009526:	4581      	cmp	r9, r0
 8009528:	d13f      	bne.n	80095aa <_malloc_r+0xe6>
 800952a:	6821      	ldr	r1, [r4, #0]
 800952c:	1a6d      	subs	r5, r5, r1
 800952e:	4629      	mov	r1, r5
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff ffa7 	bl	8009484 <sbrk_aligned>
 8009536:	3001      	adds	r0, #1
 8009538:	d037      	beq.n	80095aa <_malloc_r+0xe6>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	442b      	add	r3, r5
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	f8d8 3000 	ldr.w	r3, [r8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d038      	beq.n	80095ba <_malloc_r+0xf6>
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	42a2      	cmp	r2, r4
 800954c:	d12b      	bne.n	80095a6 <_malloc_r+0xe2>
 800954e:	2200      	movs	r2, #0
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	e00f      	b.n	8009574 <_malloc_r+0xb0>
 8009554:	6822      	ldr	r2, [r4, #0]
 8009556:	1b52      	subs	r2, r2, r5
 8009558:	d41f      	bmi.n	800959a <_malloc_r+0xd6>
 800955a:	2a0b      	cmp	r2, #11
 800955c:	d917      	bls.n	800958e <_malloc_r+0xca>
 800955e:	1961      	adds	r1, r4, r5
 8009560:	42a3      	cmp	r3, r4
 8009562:	6025      	str	r5, [r4, #0]
 8009564:	bf18      	it	ne
 8009566:	6059      	strne	r1, [r3, #4]
 8009568:	6863      	ldr	r3, [r4, #4]
 800956a:	bf08      	it	eq
 800956c:	f8c8 1000 	streq.w	r1, [r8]
 8009570:	5162      	str	r2, [r4, r5]
 8009572:	604b      	str	r3, [r1, #4]
 8009574:	4638      	mov	r0, r7
 8009576:	f104 060b 	add.w	r6, r4, #11
 800957a:	f000 f829 	bl	80095d0 <__malloc_unlock>
 800957e:	f026 0607 	bic.w	r6, r6, #7
 8009582:	1d23      	adds	r3, r4, #4
 8009584:	1af2      	subs	r2, r6, r3
 8009586:	d0ae      	beq.n	80094e6 <_malloc_r+0x22>
 8009588:	1b9b      	subs	r3, r3, r6
 800958a:	50a3      	str	r3, [r4, r2]
 800958c:	e7ab      	b.n	80094e6 <_malloc_r+0x22>
 800958e:	42a3      	cmp	r3, r4
 8009590:	6862      	ldr	r2, [r4, #4]
 8009592:	d1dd      	bne.n	8009550 <_malloc_r+0x8c>
 8009594:	f8c8 2000 	str.w	r2, [r8]
 8009598:	e7ec      	b.n	8009574 <_malloc_r+0xb0>
 800959a:	4623      	mov	r3, r4
 800959c:	6864      	ldr	r4, [r4, #4]
 800959e:	e7ac      	b.n	80094fa <_malloc_r+0x36>
 80095a0:	4634      	mov	r4, r6
 80095a2:	6876      	ldr	r6, [r6, #4]
 80095a4:	e7b4      	b.n	8009510 <_malloc_r+0x4c>
 80095a6:	4613      	mov	r3, r2
 80095a8:	e7cc      	b.n	8009544 <_malloc_r+0x80>
 80095aa:	230c      	movs	r3, #12
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4638      	mov	r0, r7
 80095b0:	f000 f80e 	bl	80095d0 <__malloc_unlock>
 80095b4:	e797      	b.n	80094e6 <_malloc_r+0x22>
 80095b6:	6025      	str	r5, [r4, #0]
 80095b8:	e7dc      	b.n	8009574 <_malloc_r+0xb0>
 80095ba:	605b      	str	r3, [r3, #4]
 80095bc:	deff      	udf	#255	; 0xff
 80095be:	bf00      	nop
 80095c0:	20002f34 	.word	0x20002f34

080095c4 <__malloc_lock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__malloc_lock+0x8>)
 80095c6:	f7ff bee9 	b.w	800939c <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	20002f30 	.word	0x20002f30

080095d0 <__malloc_unlock>:
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <__malloc_unlock+0x8>)
 80095d2:	f7ff bee4 	b.w	800939e <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	20002f30 	.word	0x20002f30

080095dc <__ssputs_r>:
 80095dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	688e      	ldr	r6, [r1, #8]
 80095e2:	461f      	mov	r7, r3
 80095e4:	42be      	cmp	r6, r7
 80095e6:	680b      	ldr	r3, [r1, #0]
 80095e8:	4682      	mov	sl, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	4690      	mov	r8, r2
 80095ee:	d82c      	bhi.n	800964a <__ssputs_r+0x6e>
 80095f0:	898a      	ldrh	r2, [r1, #12]
 80095f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095f6:	d026      	beq.n	8009646 <__ssputs_r+0x6a>
 80095f8:	6965      	ldr	r5, [r4, #20]
 80095fa:	6909      	ldr	r1, [r1, #16]
 80095fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009600:	eba3 0901 	sub.w	r9, r3, r1
 8009604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009608:	1c7b      	adds	r3, r7, #1
 800960a:	444b      	add	r3, r9
 800960c:	106d      	asrs	r5, r5, #1
 800960e:	429d      	cmp	r5, r3
 8009610:	bf38      	it	cc
 8009612:	461d      	movcc	r5, r3
 8009614:	0553      	lsls	r3, r2, #21
 8009616:	d527      	bpl.n	8009668 <__ssputs_r+0x8c>
 8009618:	4629      	mov	r1, r5
 800961a:	f7ff ff53 	bl	80094c4 <_malloc_r>
 800961e:	4606      	mov	r6, r0
 8009620:	b360      	cbz	r0, 800967c <__ssputs_r+0xa0>
 8009622:	6921      	ldr	r1, [r4, #16]
 8009624:	464a      	mov	r2, r9
 8009626:	f000 fbab 	bl	8009d80 <memcpy>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	6126      	str	r6, [r4, #16]
 8009638:	6165      	str	r5, [r4, #20]
 800963a:	444e      	add	r6, r9
 800963c:	eba5 0509 	sub.w	r5, r5, r9
 8009640:	6026      	str	r6, [r4, #0]
 8009642:	60a5      	str	r5, [r4, #8]
 8009644:	463e      	mov	r6, r7
 8009646:	42be      	cmp	r6, r7
 8009648:	d900      	bls.n	800964c <__ssputs_r+0x70>
 800964a:	463e      	mov	r6, r7
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	4632      	mov	r2, r6
 8009650:	4641      	mov	r1, r8
 8009652:	f000 fb6b 	bl	8009d2c <memmove>
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	1b9b      	subs	r3, r3, r6
 800965a:	60a3      	str	r3, [r4, #8]
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	4433      	add	r3, r6
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	2000      	movs	r0, #0
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	462a      	mov	r2, r5
 800966a:	f000 fb9e 	bl	8009daa <_realloc_r>
 800966e:	4606      	mov	r6, r0
 8009670:	2800      	cmp	r0, #0
 8009672:	d1e0      	bne.n	8009636 <__ssputs_r+0x5a>
 8009674:	6921      	ldr	r1, [r4, #16]
 8009676:	4650      	mov	r0, sl
 8009678:	f7ff feb0 	bl	80093dc <_free_r>
 800967c:	230c      	movs	r3, #12
 800967e:	f8ca 3000 	str.w	r3, [sl]
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	e7e9      	b.n	8009664 <__ssputs_r+0x88>

08009690 <_svfiprintf_r>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	4698      	mov	r8, r3
 8009696:	898b      	ldrh	r3, [r1, #12]
 8009698:	061b      	lsls	r3, r3, #24
 800969a:	b09d      	sub	sp, #116	; 0x74
 800969c:	4607      	mov	r7, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	d50e      	bpl.n	80096c2 <_svfiprintf_r+0x32>
 80096a4:	690b      	ldr	r3, [r1, #16]
 80096a6:	b963      	cbnz	r3, 80096c2 <_svfiprintf_r+0x32>
 80096a8:	2140      	movs	r1, #64	; 0x40
 80096aa:	f7ff ff0b 	bl	80094c4 <_malloc_r>
 80096ae:	6028      	str	r0, [r5, #0]
 80096b0:	6128      	str	r0, [r5, #16]
 80096b2:	b920      	cbnz	r0, 80096be <_svfiprintf_r+0x2e>
 80096b4:	230c      	movs	r3, #12
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	e0d0      	b.n	8009860 <_svfiprintf_r+0x1d0>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	616b      	str	r3, [r5, #20]
 80096c2:	2300      	movs	r3, #0
 80096c4:	9309      	str	r3, [sp, #36]	; 0x24
 80096c6:	2320      	movs	r3, #32
 80096c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80096d0:	2330      	movs	r3, #48	; 0x30
 80096d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009878 <_svfiprintf_r+0x1e8>
 80096d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	4623      	mov	r3, r4
 80096e0:	469a      	mov	sl, r3
 80096e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e6:	b10a      	cbz	r2, 80096ec <_svfiprintf_r+0x5c>
 80096e8:	2a25      	cmp	r2, #37	; 0x25
 80096ea:	d1f9      	bne.n	80096e0 <_svfiprintf_r+0x50>
 80096ec:	ebba 0b04 	subs.w	fp, sl, r4
 80096f0:	d00b      	beq.n	800970a <_svfiprintf_r+0x7a>
 80096f2:	465b      	mov	r3, fp
 80096f4:	4622      	mov	r2, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff ff6f 	bl	80095dc <__ssputs_r>
 80096fe:	3001      	adds	r0, #1
 8009700:	f000 80a9 	beq.w	8009856 <_svfiprintf_r+0x1c6>
 8009704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009706:	445a      	add	r2, fp
 8009708:	9209      	str	r2, [sp, #36]	; 0x24
 800970a:	f89a 3000 	ldrb.w	r3, [sl]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80a1 	beq.w	8009856 <_svfiprintf_r+0x1c6>
 8009714:	2300      	movs	r3, #0
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971e:	f10a 0a01 	add.w	sl, sl, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	9307      	str	r3, [sp, #28]
 8009726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800972a:	931a      	str	r3, [sp, #104]	; 0x68
 800972c:	4654      	mov	r4, sl
 800972e:	2205      	movs	r2, #5
 8009730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009734:	4850      	ldr	r0, [pc, #320]	; (8009878 <_svfiprintf_r+0x1e8>)
 8009736:	f7f6 fd5b 	bl	80001f0 <memchr>
 800973a:	9a04      	ldr	r2, [sp, #16]
 800973c:	b9d8      	cbnz	r0, 8009776 <_svfiprintf_r+0xe6>
 800973e:	06d0      	lsls	r0, r2, #27
 8009740:	bf44      	itt	mi
 8009742:	2320      	movmi	r3, #32
 8009744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009748:	0711      	lsls	r1, r2, #28
 800974a:	bf44      	itt	mi
 800974c:	232b      	movmi	r3, #43	; 0x2b
 800974e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b2a      	cmp	r3, #42	; 0x2a
 8009758:	d015      	beq.n	8009786 <_svfiprintf_r+0xf6>
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	4654      	mov	r4, sl
 800975e:	2000      	movs	r0, #0
 8009760:	f04f 0c0a 	mov.w	ip, #10
 8009764:	4621      	mov	r1, r4
 8009766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800976a:	3b30      	subs	r3, #48	; 0x30
 800976c:	2b09      	cmp	r3, #9
 800976e:	d94d      	bls.n	800980c <_svfiprintf_r+0x17c>
 8009770:	b1b0      	cbz	r0, 80097a0 <_svfiprintf_r+0x110>
 8009772:	9207      	str	r2, [sp, #28]
 8009774:	e014      	b.n	80097a0 <_svfiprintf_r+0x110>
 8009776:	eba0 0308 	sub.w	r3, r0, r8
 800977a:	fa09 f303 	lsl.w	r3, r9, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	46a2      	mov	sl, r4
 8009784:	e7d2      	b.n	800972c <_svfiprintf_r+0x9c>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	1d19      	adds	r1, r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	9103      	str	r1, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfbb      	ittet	lt
 8009792:	425b      	neglt	r3, r3
 8009794:	f042 0202 	orrlt.w	r2, r2, #2
 8009798:	9307      	strge	r3, [sp, #28]
 800979a:	9307      	strlt	r3, [sp, #28]
 800979c:	bfb8      	it	lt
 800979e:	9204      	strlt	r2, [sp, #16]
 80097a0:	7823      	ldrb	r3, [r4, #0]
 80097a2:	2b2e      	cmp	r3, #46	; 0x2e
 80097a4:	d10c      	bne.n	80097c0 <_svfiprintf_r+0x130>
 80097a6:	7863      	ldrb	r3, [r4, #1]
 80097a8:	2b2a      	cmp	r3, #42	; 0x2a
 80097aa:	d134      	bne.n	8009816 <_svfiprintf_r+0x186>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	1d1a      	adds	r2, r3, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	9203      	str	r2, [sp, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfb8      	it	lt
 80097b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80097bc:	3402      	adds	r4, #2
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009888 <_svfiprintf_r+0x1f8>
 80097c4:	7821      	ldrb	r1, [r4, #0]
 80097c6:	2203      	movs	r2, #3
 80097c8:	4650      	mov	r0, sl
 80097ca:	f7f6 fd11 	bl	80001f0 <memchr>
 80097ce:	b138      	cbz	r0, 80097e0 <_svfiprintf_r+0x150>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	eba0 000a 	sub.w	r0, r0, sl
 80097d6:	2240      	movs	r2, #64	; 0x40
 80097d8:	4082      	lsls	r2, r0
 80097da:	4313      	orrs	r3, r2
 80097dc:	3401      	adds	r4, #1
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e4:	4825      	ldr	r0, [pc, #148]	; (800987c <_svfiprintf_r+0x1ec>)
 80097e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ea:	2206      	movs	r2, #6
 80097ec:	f7f6 fd00 	bl	80001f0 <memchr>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d038      	beq.n	8009866 <_svfiprintf_r+0x1d6>
 80097f4:	4b22      	ldr	r3, [pc, #136]	; (8009880 <_svfiprintf_r+0x1f0>)
 80097f6:	bb1b      	cbnz	r3, 8009840 <_svfiprintf_r+0x1b0>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	3307      	adds	r3, #7
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	3308      	adds	r3, #8
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009806:	4433      	add	r3, r6
 8009808:	9309      	str	r3, [sp, #36]	; 0x24
 800980a:	e768      	b.n	80096de <_svfiprintf_r+0x4e>
 800980c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009810:	460c      	mov	r4, r1
 8009812:	2001      	movs	r0, #1
 8009814:	e7a6      	b.n	8009764 <_svfiprintf_r+0xd4>
 8009816:	2300      	movs	r3, #0
 8009818:	3401      	adds	r4, #1
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	4619      	mov	r1, r3
 800981e:	f04f 0c0a 	mov.w	ip, #10
 8009822:	4620      	mov	r0, r4
 8009824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009828:	3a30      	subs	r2, #48	; 0x30
 800982a:	2a09      	cmp	r2, #9
 800982c:	d903      	bls.n	8009836 <_svfiprintf_r+0x1a6>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0c6      	beq.n	80097c0 <_svfiprintf_r+0x130>
 8009832:	9105      	str	r1, [sp, #20]
 8009834:	e7c4      	b.n	80097c0 <_svfiprintf_r+0x130>
 8009836:	fb0c 2101 	mla	r1, ip, r1, r2
 800983a:	4604      	mov	r4, r0
 800983c:	2301      	movs	r3, #1
 800983e:	e7f0      	b.n	8009822 <_svfiprintf_r+0x192>
 8009840:	ab03      	add	r3, sp, #12
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	462a      	mov	r2, r5
 8009846:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <_svfiprintf_r+0x1f4>)
 8009848:	a904      	add	r1, sp, #16
 800984a:	4638      	mov	r0, r7
 800984c:	f3af 8000 	nop.w
 8009850:	1c42      	adds	r2, r0, #1
 8009852:	4606      	mov	r6, r0
 8009854:	d1d6      	bne.n	8009804 <_svfiprintf_r+0x174>
 8009856:	89ab      	ldrh	r3, [r5, #12]
 8009858:	065b      	lsls	r3, r3, #25
 800985a:	f53f af2d 	bmi.w	80096b8 <_svfiprintf_r+0x28>
 800985e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009860:	b01d      	add	sp, #116	; 0x74
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	ab03      	add	r3, sp, #12
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	462a      	mov	r2, r5
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <_svfiprintf_r+0x1f4>)
 800986e:	a904      	add	r1, sp, #16
 8009870:	4638      	mov	r0, r7
 8009872:	f000 f879 	bl	8009968 <_printf_i>
 8009876:	e7eb      	b.n	8009850 <_svfiprintf_r+0x1c0>
 8009878:	0800a97f 	.word	0x0800a97f
 800987c:	0800a989 	.word	0x0800a989
 8009880:	00000000 	.word	0x00000000
 8009884:	080095dd 	.word	0x080095dd
 8009888:	0800a985 	.word	0x0800a985

0800988c <_printf_common>:
 800988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	4616      	mov	r6, r2
 8009892:	4699      	mov	r9, r3
 8009894:	688a      	ldr	r2, [r1, #8]
 8009896:	690b      	ldr	r3, [r1, #16]
 8009898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800989c:	4293      	cmp	r3, r2
 800989e:	bfb8      	it	lt
 80098a0:	4613      	movlt	r3, r2
 80098a2:	6033      	str	r3, [r6, #0]
 80098a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098a8:	4607      	mov	r7, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	b10a      	cbz	r2, 80098b2 <_printf_common+0x26>
 80098ae:	3301      	adds	r3, #1
 80098b0:	6033      	str	r3, [r6, #0]
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	0699      	lsls	r1, r3, #26
 80098b6:	bf42      	ittt	mi
 80098b8:	6833      	ldrmi	r3, [r6, #0]
 80098ba:	3302      	addmi	r3, #2
 80098bc:	6033      	strmi	r3, [r6, #0]
 80098be:	6825      	ldr	r5, [r4, #0]
 80098c0:	f015 0506 	ands.w	r5, r5, #6
 80098c4:	d106      	bne.n	80098d4 <_printf_common+0x48>
 80098c6:	f104 0a19 	add.w	sl, r4, #25
 80098ca:	68e3      	ldr	r3, [r4, #12]
 80098cc:	6832      	ldr	r2, [r6, #0]
 80098ce:	1a9b      	subs	r3, r3, r2
 80098d0:	42ab      	cmp	r3, r5
 80098d2:	dc26      	bgt.n	8009922 <_printf_common+0x96>
 80098d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098d8:	1e13      	subs	r3, r2, #0
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	bf18      	it	ne
 80098de:	2301      	movne	r3, #1
 80098e0:	0692      	lsls	r2, r2, #26
 80098e2:	d42b      	bmi.n	800993c <_printf_common+0xb0>
 80098e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098e8:	4649      	mov	r1, r9
 80098ea:	4638      	mov	r0, r7
 80098ec:	47c0      	blx	r8
 80098ee:	3001      	adds	r0, #1
 80098f0:	d01e      	beq.n	8009930 <_printf_common+0xa4>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	f003 0306 	and.w	r3, r3, #6
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	bf02      	ittt	eq
 80098fe:	68e5      	ldreq	r5, [r4, #12]
 8009900:	6833      	ldreq	r3, [r6, #0]
 8009902:	1aed      	subeq	r5, r5, r3
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	bf0c      	ite	eq
 8009908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800990c:	2500      	movne	r5, #0
 800990e:	4293      	cmp	r3, r2
 8009910:	bfc4      	itt	gt
 8009912:	1a9b      	subgt	r3, r3, r2
 8009914:	18ed      	addgt	r5, r5, r3
 8009916:	2600      	movs	r6, #0
 8009918:	341a      	adds	r4, #26
 800991a:	42b5      	cmp	r5, r6
 800991c:	d11a      	bne.n	8009954 <_printf_common+0xc8>
 800991e:	2000      	movs	r0, #0
 8009920:	e008      	b.n	8009934 <_printf_common+0xa8>
 8009922:	2301      	movs	r3, #1
 8009924:	4652      	mov	r2, sl
 8009926:	4649      	mov	r1, r9
 8009928:	4638      	mov	r0, r7
 800992a:	47c0      	blx	r8
 800992c:	3001      	adds	r0, #1
 800992e:	d103      	bne.n	8009938 <_printf_common+0xac>
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009938:	3501      	adds	r5, #1
 800993a:	e7c6      	b.n	80098ca <_printf_common+0x3e>
 800993c:	18e1      	adds	r1, r4, r3
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	2030      	movs	r0, #48	; 0x30
 8009942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009946:	4422      	add	r2, r4
 8009948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800994c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009950:	3302      	adds	r3, #2
 8009952:	e7c7      	b.n	80098e4 <_printf_common+0x58>
 8009954:	2301      	movs	r3, #1
 8009956:	4622      	mov	r2, r4
 8009958:	4649      	mov	r1, r9
 800995a:	4638      	mov	r0, r7
 800995c:	47c0      	blx	r8
 800995e:	3001      	adds	r0, #1
 8009960:	d0e6      	beq.n	8009930 <_printf_common+0xa4>
 8009962:	3601      	adds	r6, #1
 8009964:	e7d9      	b.n	800991a <_printf_common+0x8e>
	...

08009968 <_printf_i>:
 8009968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	7e0f      	ldrb	r7, [r1, #24]
 800996e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009970:	2f78      	cmp	r7, #120	; 0x78
 8009972:	4691      	mov	r9, r2
 8009974:	4680      	mov	r8, r0
 8009976:	460c      	mov	r4, r1
 8009978:	469a      	mov	sl, r3
 800997a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800997e:	d807      	bhi.n	8009990 <_printf_i+0x28>
 8009980:	2f62      	cmp	r7, #98	; 0x62
 8009982:	d80a      	bhi.n	800999a <_printf_i+0x32>
 8009984:	2f00      	cmp	r7, #0
 8009986:	f000 80d4 	beq.w	8009b32 <_printf_i+0x1ca>
 800998a:	2f58      	cmp	r7, #88	; 0x58
 800998c:	f000 80c0 	beq.w	8009b10 <_printf_i+0x1a8>
 8009990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009998:	e03a      	b.n	8009a10 <_printf_i+0xa8>
 800999a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800999e:	2b15      	cmp	r3, #21
 80099a0:	d8f6      	bhi.n	8009990 <_printf_i+0x28>
 80099a2:	a101      	add	r1, pc, #4	; (adr r1, 80099a8 <_printf_i+0x40>)
 80099a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099a8:	08009a01 	.word	0x08009a01
 80099ac:	08009a15 	.word	0x08009a15
 80099b0:	08009991 	.word	0x08009991
 80099b4:	08009991 	.word	0x08009991
 80099b8:	08009991 	.word	0x08009991
 80099bc:	08009991 	.word	0x08009991
 80099c0:	08009a15 	.word	0x08009a15
 80099c4:	08009991 	.word	0x08009991
 80099c8:	08009991 	.word	0x08009991
 80099cc:	08009991 	.word	0x08009991
 80099d0:	08009991 	.word	0x08009991
 80099d4:	08009b19 	.word	0x08009b19
 80099d8:	08009a41 	.word	0x08009a41
 80099dc:	08009ad3 	.word	0x08009ad3
 80099e0:	08009991 	.word	0x08009991
 80099e4:	08009991 	.word	0x08009991
 80099e8:	08009b3b 	.word	0x08009b3b
 80099ec:	08009991 	.word	0x08009991
 80099f0:	08009a41 	.word	0x08009a41
 80099f4:	08009991 	.word	0x08009991
 80099f8:	08009991 	.word	0x08009991
 80099fc:	08009adb 	.word	0x08009adb
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	1d1a      	adds	r2, r3, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	602a      	str	r2, [r5, #0]
 8009a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a10:	2301      	movs	r3, #1
 8009a12:	e09f      	b.n	8009b54 <_printf_i+0x1ec>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	0607      	lsls	r7, r0, #24
 8009a1a:	f103 0104 	add.w	r1, r3, #4
 8009a1e:	6029      	str	r1, [r5, #0]
 8009a20:	d501      	bpl.n	8009a26 <_printf_i+0xbe>
 8009a22:	681e      	ldr	r6, [r3, #0]
 8009a24:	e003      	b.n	8009a2e <_printf_i+0xc6>
 8009a26:	0646      	lsls	r6, r0, #25
 8009a28:	d5fb      	bpl.n	8009a22 <_printf_i+0xba>
 8009a2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	da03      	bge.n	8009a3a <_printf_i+0xd2>
 8009a32:	232d      	movs	r3, #45	; 0x2d
 8009a34:	4276      	negs	r6, r6
 8009a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a3a:	485a      	ldr	r0, [pc, #360]	; (8009ba4 <_printf_i+0x23c>)
 8009a3c:	230a      	movs	r3, #10
 8009a3e:	e012      	b.n	8009a66 <_printf_i+0xfe>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	1d19      	adds	r1, r3, #4
 8009a46:	6029      	str	r1, [r5, #0]
 8009a48:	0605      	lsls	r5, r0, #24
 8009a4a:	d501      	bpl.n	8009a50 <_printf_i+0xe8>
 8009a4c:	681e      	ldr	r6, [r3, #0]
 8009a4e:	e002      	b.n	8009a56 <_printf_i+0xee>
 8009a50:	0641      	lsls	r1, r0, #25
 8009a52:	d5fb      	bpl.n	8009a4c <_printf_i+0xe4>
 8009a54:	881e      	ldrh	r6, [r3, #0]
 8009a56:	4853      	ldr	r0, [pc, #332]	; (8009ba4 <_printf_i+0x23c>)
 8009a58:	2f6f      	cmp	r7, #111	; 0x6f
 8009a5a:	bf0c      	ite	eq
 8009a5c:	2308      	moveq	r3, #8
 8009a5e:	230a      	movne	r3, #10
 8009a60:	2100      	movs	r1, #0
 8009a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a66:	6865      	ldr	r5, [r4, #4]
 8009a68:	60a5      	str	r5, [r4, #8]
 8009a6a:	2d00      	cmp	r5, #0
 8009a6c:	bfa2      	ittt	ge
 8009a6e:	6821      	ldrge	r1, [r4, #0]
 8009a70:	f021 0104 	bicge.w	r1, r1, #4
 8009a74:	6021      	strge	r1, [r4, #0]
 8009a76:	b90e      	cbnz	r6, 8009a7c <_printf_i+0x114>
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	d04b      	beq.n	8009b14 <_printf_i+0x1ac>
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a82:	fb03 6711 	mls	r7, r3, r1, r6
 8009a86:	5dc7      	ldrb	r7, [r0, r7]
 8009a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a8c:	4637      	mov	r7, r6
 8009a8e:	42bb      	cmp	r3, r7
 8009a90:	460e      	mov	r6, r1
 8009a92:	d9f4      	bls.n	8009a7e <_printf_i+0x116>
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d10b      	bne.n	8009ab0 <_printf_i+0x148>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	07de      	lsls	r6, r3, #31
 8009a9c:	d508      	bpl.n	8009ab0 <_printf_i+0x148>
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	bfde      	ittt	le
 8009aa6:	2330      	movle	r3, #48	; 0x30
 8009aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ab0:	1b52      	subs	r2, r2, r5
 8009ab2:	6122      	str	r2, [r4, #16]
 8009ab4:	f8cd a000 	str.w	sl, [sp]
 8009ab8:	464b      	mov	r3, r9
 8009aba:	aa03      	add	r2, sp, #12
 8009abc:	4621      	mov	r1, r4
 8009abe:	4640      	mov	r0, r8
 8009ac0:	f7ff fee4 	bl	800988c <_printf_common>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d14a      	bne.n	8009b5e <_printf_i+0x1f6>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	b004      	add	sp, #16
 8009ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	4833      	ldr	r0, [pc, #204]	; (8009ba8 <_printf_i+0x240>)
 8009adc:	2778      	movs	r7, #120	; 0x78
 8009ade:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	6829      	ldr	r1, [r5, #0]
 8009ae6:	061f      	lsls	r7, r3, #24
 8009ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009aec:	d402      	bmi.n	8009af4 <_printf_i+0x18c>
 8009aee:	065f      	lsls	r7, r3, #25
 8009af0:	bf48      	it	mi
 8009af2:	b2b6      	uxthmi	r6, r6
 8009af4:	07df      	lsls	r7, r3, #31
 8009af6:	bf48      	it	mi
 8009af8:	f043 0320 	orrmi.w	r3, r3, #32
 8009afc:	6029      	str	r1, [r5, #0]
 8009afe:	bf48      	it	mi
 8009b00:	6023      	strmi	r3, [r4, #0]
 8009b02:	b91e      	cbnz	r6, 8009b0c <_printf_i+0x1a4>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	f023 0320 	bic.w	r3, r3, #32
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	e7a7      	b.n	8009a60 <_printf_i+0xf8>
 8009b10:	4824      	ldr	r0, [pc, #144]	; (8009ba4 <_printf_i+0x23c>)
 8009b12:	e7e4      	b.n	8009ade <_printf_i+0x176>
 8009b14:	4615      	mov	r5, r2
 8009b16:	e7bd      	b.n	8009a94 <_printf_i+0x12c>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	6826      	ldr	r6, [r4, #0]
 8009b1c:	6961      	ldr	r1, [r4, #20]
 8009b1e:	1d18      	adds	r0, r3, #4
 8009b20:	6028      	str	r0, [r5, #0]
 8009b22:	0635      	lsls	r5, r6, #24
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0x1c4>
 8009b28:	6019      	str	r1, [r3, #0]
 8009b2a:	e002      	b.n	8009b32 <_printf_i+0x1ca>
 8009b2c:	0670      	lsls	r0, r6, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0x1c0>
 8009b30:	8019      	strh	r1, [r3, #0]
 8009b32:	2300      	movs	r3, #0
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	4615      	mov	r5, r2
 8009b38:	e7bc      	b.n	8009ab4 <_printf_i+0x14c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	1d1a      	adds	r2, r3, #4
 8009b3e:	602a      	str	r2, [r5, #0]
 8009b40:	681d      	ldr	r5, [r3, #0]
 8009b42:	6862      	ldr	r2, [r4, #4]
 8009b44:	2100      	movs	r1, #0
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7f6 fb52 	bl	80001f0 <memchr>
 8009b4c:	b108      	cbz	r0, 8009b52 <_printf_i+0x1ea>
 8009b4e:	1b40      	subs	r0, r0, r5
 8009b50:	6060      	str	r0, [r4, #4]
 8009b52:	6863      	ldr	r3, [r4, #4]
 8009b54:	6123      	str	r3, [r4, #16]
 8009b56:	2300      	movs	r3, #0
 8009b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b5c:	e7aa      	b.n	8009ab4 <_printf_i+0x14c>
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4649      	mov	r1, r9
 8009b64:	4640      	mov	r0, r8
 8009b66:	47d0      	blx	sl
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d0ad      	beq.n	8009ac8 <_printf_i+0x160>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	079b      	lsls	r3, r3, #30
 8009b70:	d413      	bmi.n	8009b9a <_printf_i+0x232>
 8009b72:	68e0      	ldr	r0, [r4, #12]
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	4298      	cmp	r0, r3
 8009b78:	bfb8      	it	lt
 8009b7a:	4618      	movlt	r0, r3
 8009b7c:	e7a6      	b.n	8009acc <_printf_i+0x164>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4632      	mov	r2, r6
 8009b82:	4649      	mov	r1, r9
 8009b84:	4640      	mov	r0, r8
 8009b86:	47d0      	blx	sl
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d09d      	beq.n	8009ac8 <_printf_i+0x160>
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	9903      	ldr	r1, [sp, #12]
 8009b92:	1a5b      	subs	r3, r3, r1
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	dcf2      	bgt.n	8009b7e <_printf_i+0x216>
 8009b98:	e7eb      	b.n	8009b72 <_printf_i+0x20a>
 8009b9a:	2500      	movs	r5, #0
 8009b9c:	f104 0619 	add.w	r6, r4, #25
 8009ba0:	e7f5      	b.n	8009b8e <_printf_i+0x226>
 8009ba2:	bf00      	nop
 8009ba4:	0800a990 	.word	0x0800a990
 8009ba8:	0800a9a1 	.word	0x0800a9a1

08009bac <__sflush_r>:
 8009bac:	898a      	ldrh	r2, [r1, #12]
 8009bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	0710      	lsls	r0, r2, #28
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	d458      	bmi.n	8009c6c <__sflush_r+0xc0>
 8009bba:	684b      	ldr	r3, [r1, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dc05      	bgt.n	8009bcc <__sflush_r+0x20>
 8009bc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dc02      	bgt.n	8009bcc <__sflush_r+0x20>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	d0f9      	beq.n	8009bc6 <__sflush_r+0x1a>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bd8:	682f      	ldr	r7, [r5, #0]
 8009bda:	6a21      	ldr	r1, [r4, #32]
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	d032      	beq.n	8009c46 <__sflush_r+0x9a>
 8009be0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	075a      	lsls	r2, r3, #29
 8009be6:	d505      	bpl.n	8009bf4 <__sflush_r+0x48>
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	1ac0      	subs	r0, r0, r3
 8009bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bee:	b10b      	cbz	r3, 8009bf4 <__sflush_r+0x48>
 8009bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bf2:	1ac0      	subs	r0, r0, r3
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bfa:	6a21      	ldr	r1, [r4, #32]
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b0      	blx	r6
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	d106      	bne.n	8009c14 <__sflush_r+0x68>
 8009c06:	6829      	ldr	r1, [r5, #0]
 8009c08:	291d      	cmp	r1, #29
 8009c0a:	d82b      	bhi.n	8009c64 <__sflush_r+0xb8>
 8009c0c:	4a29      	ldr	r2, [pc, #164]	; (8009cb4 <__sflush_r+0x108>)
 8009c0e:	410a      	asrs	r2, r1
 8009c10:	07d6      	lsls	r6, r2, #31
 8009c12:	d427      	bmi.n	8009c64 <__sflush_r+0xb8>
 8009c14:	2200      	movs	r2, #0
 8009c16:	6062      	str	r2, [r4, #4]
 8009c18:	04d9      	lsls	r1, r3, #19
 8009c1a:	6922      	ldr	r2, [r4, #16]
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	d504      	bpl.n	8009c2a <__sflush_r+0x7e>
 8009c20:	1c42      	adds	r2, r0, #1
 8009c22:	d101      	bne.n	8009c28 <__sflush_r+0x7c>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b903      	cbnz	r3, 8009c2a <__sflush_r+0x7e>
 8009c28:	6560      	str	r0, [r4, #84]	; 0x54
 8009c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c2c:	602f      	str	r7, [r5, #0]
 8009c2e:	2900      	cmp	r1, #0
 8009c30:	d0c9      	beq.n	8009bc6 <__sflush_r+0x1a>
 8009c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c36:	4299      	cmp	r1, r3
 8009c38:	d002      	beq.n	8009c40 <__sflush_r+0x94>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f7ff fbce 	bl	80093dc <_free_r>
 8009c40:	2000      	movs	r0, #0
 8009c42:	6360      	str	r0, [r4, #52]	; 0x34
 8009c44:	e7c0      	b.n	8009bc8 <__sflush_r+0x1c>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b0      	blx	r6
 8009c4c:	1c41      	adds	r1, r0, #1
 8009c4e:	d1c8      	bne.n	8009be2 <__sflush_r+0x36>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0c5      	beq.n	8009be2 <__sflush_r+0x36>
 8009c56:	2b1d      	cmp	r3, #29
 8009c58:	d001      	beq.n	8009c5e <__sflush_r+0xb2>
 8009c5a:	2b16      	cmp	r3, #22
 8009c5c:	d101      	bne.n	8009c62 <__sflush_r+0xb6>
 8009c5e:	602f      	str	r7, [r5, #0]
 8009c60:	e7b1      	b.n	8009bc6 <__sflush_r+0x1a>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	e7ad      	b.n	8009bc8 <__sflush_r+0x1c>
 8009c6c:	690f      	ldr	r7, [r1, #16]
 8009c6e:	2f00      	cmp	r7, #0
 8009c70:	d0a9      	beq.n	8009bc6 <__sflush_r+0x1a>
 8009c72:	0793      	lsls	r3, r2, #30
 8009c74:	680e      	ldr	r6, [r1, #0]
 8009c76:	bf08      	it	eq
 8009c78:	694b      	ldreq	r3, [r1, #20]
 8009c7a:	600f      	str	r7, [r1, #0]
 8009c7c:	bf18      	it	ne
 8009c7e:	2300      	movne	r3, #0
 8009c80:	eba6 0807 	sub.w	r8, r6, r7
 8009c84:	608b      	str	r3, [r1, #8]
 8009c86:	f1b8 0f00 	cmp.w	r8, #0
 8009c8a:	dd9c      	ble.n	8009bc6 <__sflush_r+0x1a>
 8009c8c:	6a21      	ldr	r1, [r4, #32]
 8009c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c90:	4643      	mov	r3, r8
 8009c92:	463a      	mov	r2, r7
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b0      	blx	r6
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	dc06      	bgt.n	8009caa <__sflush_r+0xfe>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e78e      	b.n	8009bc8 <__sflush_r+0x1c>
 8009caa:	4407      	add	r7, r0
 8009cac:	eba8 0800 	sub.w	r8, r8, r0
 8009cb0:	e7e9      	b.n	8009c86 <__sflush_r+0xda>
 8009cb2:	bf00      	nop
 8009cb4:	dfbffffe 	.word	0xdfbffffe

08009cb8 <_fflush_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	690b      	ldr	r3, [r1, #16]
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	b913      	cbnz	r3, 8009cc8 <_fflush_r+0x10>
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	b118      	cbz	r0, 8009cd2 <_fflush_r+0x1a>
 8009cca:	6a03      	ldr	r3, [r0, #32]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <_fflush_r+0x1a>
 8009cce:	f7ff f9e5 	bl	800909c <__sinit>
 8009cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f3      	beq.n	8009cc2 <_fflush_r+0xa>
 8009cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cdc:	07d0      	lsls	r0, r2, #31
 8009cde:	d404      	bmi.n	8009cea <_fflush_r+0x32>
 8009ce0:	0599      	lsls	r1, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_fflush_r+0x32>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce6:	f7ff fb59 	bl	800939c <__retarget_lock_acquire_recursive>
 8009cea:	4628      	mov	r0, r5
 8009cec:	4621      	mov	r1, r4
 8009cee:	f7ff ff5d 	bl	8009bac <__sflush_r>
 8009cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cf4:	07da      	lsls	r2, r3, #31
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	d4e4      	bmi.n	8009cc4 <_fflush_r+0xc>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	059b      	lsls	r3, r3, #22
 8009cfe:	d4e1      	bmi.n	8009cc4 <_fflush_r+0xc>
 8009d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d02:	f7ff fb4c 	bl	800939e <__retarget_lock_release_recursive>
 8009d06:	e7dd      	b.n	8009cc4 <_fflush_r+0xc>

08009d08 <fiprintf>:
 8009d08:	b40e      	push	{r1, r2, r3}
 8009d0a:	b503      	push	{r0, r1, lr}
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	4805      	ldr	r0, [pc, #20]	; (8009d28 <fiprintf+0x20>)
 8009d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d16:	6800      	ldr	r0, [r0, #0]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f000 f89f 	bl	8009e5c <_vfiprintf_r>
 8009d1e:	b002      	add	sp, #8
 8009d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d24:	b003      	add	sp, #12
 8009d26:	4770      	bx	lr
 8009d28:	20000064 	.word	0x20000064

08009d2c <memmove>:
 8009d2c:	4288      	cmp	r0, r1
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	eb01 0402 	add.w	r4, r1, r2
 8009d34:	d902      	bls.n	8009d3c <memmove+0x10>
 8009d36:	4284      	cmp	r4, r0
 8009d38:	4623      	mov	r3, r4
 8009d3a:	d807      	bhi.n	8009d4c <memmove+0x20>
 8009d3c:	1e43      	subs	r3, r0, #1
 8009d3e:	42a1      	cmp	r1, r4
 8009d40:	d008      	beq.n	8009d54 <memmove+0x28>
 8009d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d4a:	e7f8      	b.n	8009d3e <memmove+0x12>
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4601      	mov	r1, r0
 8009d50:	428a      	cmp	r2, r1
 8009d52:	d100      	bne.n	8009d56 <memmove+0x2a>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5e:	e7f7      	b.n	8009d50 <memmove+0x24>

08009d60 <_sbrk_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_sbrk_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f8 fa3a 	bl	80021e4 <_sbrk>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_sbrk_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_sbrk_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20002f2c 	.word	0x20002f2c

08009d80 <memcpy>:
 8009d80:	440a      	add	r2, r1
 8009d82:	4291      	cmp	r1, r2
 8009d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d88:	d100      	bne.n	8009d8c <memcpy+0xc>
 8009d8a:	4770      	bx	lr
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d96:	4291      	cmp	r1, r2
 8009d98:	d1f9      	bne.n	8009d8e <memcpy+0xe>
 8009d9a:	bd10      	pop	{r4, pc}

08009d9c <abort>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	2006      	movs	r0, #6
 8009da0:	f000 fa34 	bl	800a20c <raise>
 8009da4:	2001      	movs	r0, #1
 8009da6:	f7f8 f9a5 	bl	80020f4 <_exit>

08009daa <_realloc_r>:
 8009daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	4680      	mov	r8, r0
 8009db0:	4614      	mov	r4, r2
 8009db2:	460e      	mov	r6, r1
 8009db4:	b921      	cbnz	r1, 8009dc0 <_realloc_r+0x16>
 8009db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	4611      	mov	r1, r2
 8009dbc:	f7ff bb82 	b.w	80094c4 <_malloc_r>
 8009dc0:	b92a      	cbnz	r2, 8009dce <_realloc_r+0x24>
 8009dc2:	f7ff fb0b 	bl	80093dc <_free_r>
 8009dc6:	4625      	mov	r5, r4
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dce:	f000 fa39 	bl	800a244 <_malloc_usable_size_r>
 8009dd2:	4284      	cmp	r4, r0
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	d802      	bhi.n	8009dde <_realloc_r+0x34>
 8009dd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ddc:	d812      	bhi.n	8009e04 <_realloc_r+0x5a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4640      	mov	r0, r8
 8009de2:	f7ff fb6f 	bl	80094c4 <_malloc_r>
 8009de6:	4605      	mov	r5, r0
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0ed      	beq.n	8009dc8 <_realloc_r+0x1e>
 8009dec:	42bc      	cmp	r4, r7
 8009dee:	4622      	mov	r2, r4
 8009df0:	4631      	mov	r1, r6
 8009df2:	bf28      	it	cs
 8009df4:	463a      	movcs	r2, r7
 8009df6:	f7ff ffc3 	bl	8009d80 <memcpy>
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	f7ff faed 	bl	80093dc <_free_r>
 8009e02:	e7e1      	b.n	8009dc8 <_realloc_r+0x1e>
 8009e04:	4635      	mov	r5, r6
 8009e06:	e7df      	b.n	8009dc8 <_realloc_r+0x1e>

08009e08 <__sfputc_r>:
 8009e08:	6893      	ldr	r3, [r2, #8]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	b410      	push	{r4}
 8009e10:	6093      	str	r3, [r2, #8]
 8009e12:	da08      	bge.n	8009e26 <__sfputc_r+0x1e>
 8009e14:	6994      	ldr	r4, [r2, #24]
 8009e16:	42a3      	cmp	r3, r4
 8009e18:	db01      	blt.n	8009e1e <__sfputc_r+0x16>
 8009e1a:	290a      	cmp	r1, #10
 8009e1c:	d103      	bne.n	8009e26 <__sfputc_r+0x1e>
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	f000 b935 	b.w	800a090 <__swbuf_r>
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	1c58      	adds	r0, r3, #1
 8009e2a:	6010      	str	r0, [r2, #0]
 8009e2c:	7019      	strb	r1, [r3, #0]
 8009e2e:	4608      	mov	r0, r1
 8009e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <__sfputs_r>:
 8009e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e38:	4606      	mov	r6, r0
 8009e3a:	460f      	mov	r7, r1
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	18d5      	adds	r5, r2, r3
 8009e40:	42ac      	cmp	r4, r5
 8009e42:	d101      	bne.n	8009e48 <__sfputs_r+0x12>
 8009e44:	2000      	movs	r0, #0
 8009e46:	e007      	b.n	8009e58 <__sfputs_r+0x22>
 8009e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ffda 	bl	8009e08 <__sfputc_r>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d1f3      	bne.n	8009e40 <__sfputs_r+0xa>
 8009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e5c <_vfiprintf_r>:
 8009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	460d      	mov	r5, r1
 8009e62:	b09d      	sub	sp, #116	; 0x74
 8009e64:	4614      	mov	r4, r2
 8009e66:	4698      	mov	r8, r3
 8009e68:	4606      	mov	r6, r0
 8009e6a:	b118      	cbz	r0, 8009e74 <_vfiprintf_r+0x18>
 8009e6c:	6a03      	ldr	r3, [r0, #32]
 8009e6e:	b90b      	cbnz	r3, 8009e74 <_vfiprintf_r+0x18>
 8009e70:	f7ff f914 	bl	800909c <__sinit>
 8009e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e76:	07d9      	lsls	r1, r3, #31
 8009e78:	d405      	bmi.n	8009e86 <_vfiprintf_r+0x2a>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	059a      	lsls	r2, r3, #22
 8009e7e:	d402      	bmi.n	8009e86 <_vfiprintf_r+0x2a>
 8009e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e82:	f7ff fa8b 	bl	800939c <__retarget_lock_acquire_recursive>
 8009e86:	89ab      	ldrh	r3, [r5, #12]
 8009e88:	071b      	lsls	r3, r3, #28
 8009e8a:	d501      	bpl.n	8009e90 <_vfiprintf_r+0x34>
 8009e8c:	692b      	ldr	r3, [r5, #16]
 8009e8e:	b99b      	cbnz	r3, 8009eb8 <_vfiprintf_r+0x5c>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4630      	mov	r0, r6
 8009e94:	f000 f93a 	bl	800a10c <__swsetup_r>
 8009e98:	b170      	cbz	r0, 8009eb8 <_vfiprintf_r+0x5c>
 8009e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e9c:	07dc      	lsls	r4, r3, #31
 8009e9e:	d504      	bpl.n	8009eaa <_vfiprintf_r+0x4e>
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	b01d      	add	sp, #116	; 0x74
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	0598      	lsls	r0, r3, #22
 8009eae:	d4f7      	bmi.n	8009ea0 <_vfiprintf_r+0x44>
 8009eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb2:	f7ff fa74 	bl	800939e <__retarget_lock_release_recursive>
 8009eb6:	e7f3      	b.n	8009ea0 <_vfiprintf_r+0x44>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ec6:	2330      	movs	r3, #48	; 0x30
 8009ec8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a07c <_vfiprintf_r+0x220>
 8009ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed0:	f04f 0901 	mov.w	r9, #1
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	469a      	mov	sl, r3
 8009ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009edc:	b10a      	cbz	r2, 8009ee2 <_vfiprintf_r+0x86>
 8009ede:	2a25      	cmp	r2, #37	; 0x25
 8009ee0:	d1f9      	bne.n	8009ed6 <_vfiprintf_r+0x7a>
 8009ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ee6:	d00b      	beq.n	8009f00 <_vfiprintf_r+0xa4>
 8009ee8:	465b      	mov	r3, fp
 8009eea:	4622      	mov	r2, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ffa1 	bl	8009e36 <__sfputs_r>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f000 80a9 	beq.w	800a04c <_vfiprintf_r+0x1f0>
 8009efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efc:	445a      	add	r2, fp
 8009efe:	9209      	str	r2, [sp, #36]	; 0x24
 8009f00:	f89a 3000 	ldrb.w	r3, [sl]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80a1 	beq.w	800a04c <_vfiprintf_r+0x1f0>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f14:	f10a 0a01 	add.w	sl, sl, #1
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f20:	931a      	str	r3, [sp, #104]	; 0x68
 8009f22:	4654      	mov	r4, sl
 8009f24:	2205      	movs	r2, #5
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	4854      	ldr	r0, [pc, #336]	; (800a07c <_vfiprintf_r+0x220>)
 8009f2c:	f7f6 f960 	bl	80001f0 <memchr>
 8009f30:	9a04      	ldr	r2, [sp, #16]
 8009f32:	b9d8      	cbnz	r0, 8009f6c <_vfiprintf_r+0x110>
 8009f34:	06d1      	lsls	r1, r2, #27
 8009f36:	bf44      	itt	mi
 8009f38:	2320      	movmi	r3, #32
 8009f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3e:	0713      	lsls	r3, r2, #28
 8009f40:	bf44      	itt	mi
 8009f42:	232b      	movmi	r3, #43	; 0x2b
 8009f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f48:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4e:	d015      	beq.n	8009f7c <_vfiprintf_r+0x120>
 8009f50:	9a07      	ldr	r2, [sp, #28]
 8009f52:	4654      	mov	r4, sl
 8009f54:	2000      	movs	r0, #0
 8009f56:	f04f 0c0a 	mov.w	ip, #10
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f60:	3b30      	subs	r3, #48	; 0x30
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d94d      	bls.n	800a002 <_vfiprintf_r+0x1a6>
 8009f66:	b1b0      	cbz	r0, 8009f96 <_vfiprintf_r+0x13a>
 8009f68:	9207      	str	r2, [sp, #28]
 8009f6a:	e014      	b.n	8009f96 <_vfiprintf_r+0x13a>
 8009f6c:	eba0 0308 	sub.w	r3, r0, r8
 8009f70:	fa09 f303 	lsl.w	r3, r9, r3
 8009f74:	4313      	orrs	r3, r2
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	46a2      	mov	sl, r4
 8009f7a:	e7d2      	b.n	8009f22 <_vfiprintf_r+0xc6>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	1d19      	adds	r1, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	9103      	str	r1, [sp, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfbb      	ittet	lt
 8009f88:	425b      	neglt	r3, r3
 8009f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f8e:	9307      	strge	r3, [sp, #28]
 8009f90:	9307      	strlt	r3, [sp, #28]
 8009f92:	bfb8      	it	lt
 8009f94:	9204      	strlt	r2, [sp, #16]
 8009f96:	7823      	ldrb	r3, [r4, #0]
 8009f98:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9a:	d10c      	bne.n	8009fb6 <_vfiprintf_r+0x15a>
 8009f9c:	7863      	ldrb	r3, [r4, #1]
 8009f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa0:	d134      	bne.n	800a00c <_vfiprintf_r+0x1b0>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	1d1a      	adds	r2, r3, #4
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	9203      	str	r2, [sp, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfb8      	it	lt
 8009fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb2:	3402      	adds	r4, #2
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a08c <_vfiprintf_r+0x230>
 8009fba:	7821      	ldrb	r1, [r4, #0]
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	f7f6 f916 	bl	80001f0 <memchr>
 8009fc4:	b138      	cbz	r0, 8009fd6 <_vfiprintf_r+0x17a>
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	eba0 000a 	sub.w	r0, r0, sl
 8009fcc:	2240      	movs	r2, #64	; 0x40
 8009fce:	4082      	lsls	r2, r0
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	3401      	adds	r4, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fda:	4829      	ldr	r0, [pc, #164]	; (800a080 <_vfiprintf_r+0x224>)
 8009fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	f7f6 f905 	bl	80001f0 <memchr>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d03f      	beq.n	800a06a <_vfiprintf_r+0x20e>
 8009fea:	4b26      	ldr	r3, [pc, #152]	; (800a084 <_vfiprintf_r+0x228>)
 8009fec:	bb1b      	cbnz	r3, 800a036 <_vfiprintf_r+0x1da>
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	9303      	str	r3, [sp, #12]
 8009ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffc:	443b      	add	r3, r7
 8009ffe:	9309      	str	r3, [sp, #36]	; 0x24
 800a000:	e768      	b.n	8009ed4 <_vfiprintf_r+0x78>
 800a002:	fb0c 3202 	mla	r2, ip, r2, r3
 800a006:	460c      	mov	r4, r1
 800a008:	2001      	movs	r0, #1
 800a00a:	e7a6      	b.n	8009f5a <_vfiprintf_r+0xfe>
 800a00c:	2300      	movs	r3, #0
 800a00e:	3401      	adds	r4, #1
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	4619      	mov	r1, r3
 800a014:	f04f 0c0a 	mov.w	ip, #10
 800a018:	4620      	mov	r0, r4
 800a01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a01e:	3a30      	subs	r2, #48	; 0x30
 800a020:	2a09      	cmp	r2, #9
 800a022:	d903      	bls.n	800a02c <_vfiprintf_r+0x1d0>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0c6      	beq.n	8009fb6 <_vfiprintf_r+0x15a>
 800a028:	9105      	str	r1, [sp, #20]
 800a02a:	e7c4      	b.n	8009fb6 <_vfiprintf_r+0x15a>
 800a02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a030:	4604      	mov	r4, r0
 800a032:	2301      	movs	r3, #1
 800a034:	e7f0      	b.n	800a018 <_vfiprintf_r+0x1bc>
 800a036:	ab03      	add	r3, sp, #12
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	462a      	mov	r2, r5
 800a03c:	4b12      	ldr	r3, [pc, #72]	; (800a088 <_vfiprintf_r+0x22c>)
 800a03e:	a904      	add	r1, sp, #16
 800a040:	4630      	mov	r0, r6
 800a042:	f3af 8000 	nop.w
 800a046:	4607      	mov	r7, r0
 800a048:	1c78      	adds	r0, r7, #1
 800a04a:	d1d6      	bne.n	8009ffa <_vfiprintf_r+0x19e>
 800a04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a04e:	07d9      	lsls	r1, r3, #31
 800a050:	d405      	bmi.n	800a05e <_vfiprintf_r+0x202>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	059a      	lsls	r2, r3, #22
 800a056:	d402      	bmi.n	800a05e <_vfiprintf_r+0x202>
 800a058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05a:	f7ff f9a0 	bl	800939e <__retarget_lock_release_recursive>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	065b      	lsls	r3, r3, #25
 800a062:	f53f af1d 	bmi.w	8009ea0 <_vfiprintf_r+0x44>
 800a066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a068:	e71c      	b.n	8009ea4 <_vfiprintf_r+0x48>
 800a06a:	ab03      	add	r3, sp, #12
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	462a      	mov	r2, r5
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <_vfiprintf_r+0x22c>)
 800a072:	a904      	add	r1, sp, #16
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff fc77 	bl	8009968 <_printf_i>
 800a07a:	e7e4      	b.n	800a046 <_vfiprintf_r+0x1ea>
 800a07c:	0800a97f 	.word	0x0800a97f
 800a080:	0800a989 	.word	0x0800a989
 800a084:	00000000 	.word	0x00000000
 800a088:	08009e37 	.word	0x08009e37
 800a08c:	0800a985 	.word	0x0800a985

0800a090 <__swbuf_r>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	460e      	mov	r6, r1
 800a094:	4614      	mov	r4, r2
 800a096:	4605      	mov	r5, r0
 800a098:	b118      	cbz	r0, 800a0a2 <__swbuf_r+0x12>
 800a09a:	6a03      	ldr	r3, [r0, #32]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <__swbuf_r+0x12>
 800a09e:	f7fe fffd 	bl	800909c <__sinit>
 800a0a2:	69a3      	ldr	r3, [r4, #24]
 800a0a4:	60a3      	str	r3, [r4, #8]
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	071a      	lsls	r2, r3, #28
 800a0aa:	d525      	bpl.n	800a0f8 <__swbuf_r+0x68>
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	b31b      	cbz	r3, 800a0f8 <__swbuf_r+0x68>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	6922      	ldr	r2, [r4, #16]
 800a0b4:	1a98      	subs	r0, r3, r2
 800a0b6:	6963      	ldr	r3, [r4, #20]
 800a0b8:	b2f6      	uxtb	r6, r6
 800a0ba:	4283      	cmp	r3, r0
 800a0bc:	4637      	mov	r7, r6
 800a0be:	dc04      	bgt.n	800a0ca <__swbuf_r+0x3a>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f7ff fdf8 	bl	8009cb8 <_fflush_r>
 800a0c8:	b9e0      	cbnz	r0, 800a104 <__swbuf_r+0x74>
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	60a3      	str	r3, [r4, #8]
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	701e      	strb	r6, [r3, #0]
 800a0d8:	6962      	ldr	r2, [r4, #20]
 800a0da:	1c43      	adds	r3, r0, #1
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d004      	beq.n	800a0ea <__swbuf_r+0x5a>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	07db      	lsls	r3, r3, #31
 800a0e4:	d506      	bpl.n	800a0f4 <__swbuf_r+0x64>
 800a0e6:	2e0a      	cmp	r6, #10
 800a0e8:	d104      	bne.n	800a0f4 <__swbuf_r+0x64>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f7ff fde3 	bl	8009cb8 <_fflush_r>
 800a0f2:	b938      	cbnz	r0, 800a104 <__swbuf_r+0x74>
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f806 	bl	800a10c <__swsetup_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	d0d5      	beq.n	800a0b0 <__swbuf_r+0x20>
 800a104:	f04f 37ff 	mov.w	r7, #4294967295
 800a108:	e7f4      	b.n	800a0f4 <__swbuf_r+0x64>
	...

0800a10c <__swsetup_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4b2a      	ldr	r3, [pc, #168]	; (800a1b8 <__swsetup_r+0xac>)
 800a110:	4605      	mov	r5, r0
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	460c      	mov	r4, r1
 800a116:	b118      	cbz	r0, 800a120 <__swsetup_r+0x14>
 800a118:	6a03      	ldr	r3, [r0, #32]
 800a11a:	b90b      	cbnz	r3, 800a120 <__swsetup_r+0x14>
 800a11c:	f7fe ffbe 	bl	800909c <__sinit>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a126:	0718      	lsls	r0, r3, #28
 800a128:	d422      	bmi.n	800a170 <__swsetup_r+0x64>
 800a12a:	06d9      	lsls	r1, r3, #27
 800a12c:	d407      	bmi.n	800a13e <__swsetup_r+0x32>
 800a12e:	2309      	movs	r3, #9
 800a130:	602b      	str	r3, [r5, #0]
 800a132:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e034      	b.n	800a1a8 <__swsetup_r+0x9c>
 800a13e:	0758      	lsls	r0, r3, #29
 800a140:	d512      	bpl.n	800a168 <__swsetup_r+0x5c>
 800a142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a144:	b141      	cbz	r1, 800a158 <__swsetup_r+0x4c>
 800a146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a14a:	4299      	cmp	r1, r3
 800a14c:	d002      	beq.n	800a154 <__swsetup_r+0x48>
 800a14e:	4628      	mov	r0, r5
 800a150:	f7ff f944 	bl	80093dc <_free_r>
 800a154:	2300      	movs	r3, #0
 800a156:	6363      	str	r3, [r4, #52]	; 0x34
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	2300      	movs	r3, #0
 800a162:	6063      	str	r3, [r4, #4]
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f043 0308 	orr.w	r3, r3, #8
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	b94b      	cbnz	r3, 800a188 <__swsetup_r+0x7c>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a17a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a17e:	d003      	beq.n	800a188 <__swsetup_r+0x7c>
 800a180:	4621      	mov	r1, r4
 800a182:	4628      	mov	r0, r5
 800a184:	f000 f88c 	bl	800a2a0 <__smakebuf_r>
 800a188:	89a0      	ldrh	r0, [r4, #12]
 800a18a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a18e:	f010 0301 	ands.w	r3, r0, #1
 800a192:	d00a      	beq.n	800a1aa <__swsetup_r+0x9e>
 800a194:	2300      	movs	r3, #0
 800a196:	60a3      	str	r3, [r4, #8]
 800a198:	6963      	ldr	r3, [r4, #20]
 800a19a:	425b      	negs	r3, r3
 800a19c:	61a3      	str	r3, [r4, #24]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	b943      	cbnz	r3, 800a1b4 <__swsetup_r+0xa8>
 800a1a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1a6:	d1c4      	bne.n	800a132 <__swsetup_r+0x26>
 800a1a8:	bd38      	pop	{r3, r4, r5, pc}
 800a1aa:	0781      	lsls	r1, r0, #30
 800a1ac:	bf58      	it	pl
 800a1ae:	6963      	ldrpl	r3, [r4, #20]
 800a1b0:	60a3      	str	r3, [r4, #8]
 800a1b2:	e7f4      	b.n	800a19e <__swsetup_r+0x92>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e7f7      	b.n	800a1a8 <__swsetup_r+0x9c>
 800a1b8:	20000064 	.word	0x20000064

0800a1bc <_raise_r>:
 800a1bc:	291f      	cmp	r1, #31
 800a1be:	b538      	push	{r3, r4, r5, lr}
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	d904      	bls.n	800a1d0 <_raise_r+0x14>
 800a1c6:	2316      	movs	r3, #22
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1d2:	b112      	cbz	r2, 800a1da <_raise_r+0x1e>
 800a1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1d8:	b94b      	cbnz	r3, 800a1ee <_raise_r+0x32>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 f830 	bl	800a240 <_getpid_r>
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1ea:	f000 b817 	b.w	800a21c <_kill_r>
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d00a      	beq.n	800a208 <_raise_r+0x4c>
 800a1f2:	1c59      	adds	r1, r3, #1
 800a1f4:	d103      	bne.n	800a1fe <_raise_r+0x42>
 800a1f6:	2316      	movs	r3, #22
 800a1f8:	6003      	str	r3, [r0, #0]
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	e7e7      	b.n	800a1ce <_raise_r+0x12>
 800a1fe:	2400      	movs	r4, #0
 800a200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a204:	4628      	mov	r0, r5
 800a206:	4798      	blx	r3
 800a208:	2000      	movs	r0, #0
 800a20a:	e7e0      	b.n	800a1ce <_raise_r+0x12>

0800a20c <raise>:
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <raise+0xc>)
 800a20e:	4601      	mov	r1, r0
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f7ff bfd3 	b.w	800a1bc <_raise_r>
 800a216:	bf00      	nop
 800a218:	20000064 	.word	0x20000064

0800a21c <_kill_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d07      	ldr	r5, [pc, #28]	; (800a23c <_kill_r+0x20>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	4611      	mov	r1, r2
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	f7f7 ff53 	bl	80020d4 <_kill>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	d102      	bne.n	800a238 <_kill_r+0x1c>
 800a232:	682b      	ldr	r3, [r5, #0]
 800a234:	b103      	cbz	r3, 800a238 <_kill_r+0x1c>
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	bd38      	pop	{r3, r4, r5, pc}
 800a23a:	bf00      	nop
 800a23c:	20002f2c 	.word	0x20002f2c

0800a240 <_getpid_r>:
 800a240:	f7f7 bf40 	b.w	80020c4 <_getpid>

0800a244 <_malloc_usable_size_r>:
 800a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a248:	1f18      	subs	r0, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfbc      	itt	lt
 800a24e:	580b      	ldrlt	r3, [r1, r0]
 800a250:	18c0      	addlt	r0, r0, r3
 800a252:	4770      	bx	lr

0800a254 <__swhatbuf_r>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	460c      	mov	r4, r1
 800a258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25c:	2900      	cmp	r1, #0
 800a25e:	b096      	sub	sp, #88	; 0x58
 800a260:	4615      	mov	r5, r2
 800a262:	461e      	mov	r6, r3
 800a264:	da0d      	bge.n	800a282 <__swhatbuf_r+0x2e>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a26c:	f04f 0100 	mov.w	r1, #0
 800a270:	bf0c      	ite	eq
 800a272:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a276:	2340      	movne	r3, #64	; 0x40
 800a278:	2000      	movs	r0, #0
 800a27a:	6031      	str	r1, [r6, #0]
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	b016      	add	sp, #88	; 0x58
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	466a      	mov	r2, sp
 800a284:	f000 f848 	bl	800a318 <_fstat_r>
 800a288:	2800      	cmp	r0, #0
 800a28a:	dbec      	blt.n	800a266 <__swhatbuf_r+0x12>
 800a28c:	9901      	ldr	r1, [sp, #4]
 800a28e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a292:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a296:	4259      	negs	r1, r3
 800a298:	4159      	adcs	r1, r3
 800a29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29e:	e7eb      	b.n	800a278 <__swhatbuf_r+0x24>

0800a2a0 <__smakebuf_r>:
 800a2a0:	898b      	ldrh	r3, [r1, #12]
 800a2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2a4:	079d      	lsls	r5, r3, #30
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	d507      	bpl.n	800a2bc <__smakebuf_r+0x1c>
 800a2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	6123      	str	r3, [r4, #16]
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	6163      	str	r3, [r4, #20]
 800a2b8:	b002      	add	sp, #8
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	ab01      	add	r3, sp, #4
 800a2be:	466a      	mov	r2, sp
 800a2c0:	f7ff ffc8 	bl	800a254 <__swhatbuf_r>
 800a2c4:	9900      	ldr	r1, [sp, #0]
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff f8fb 	bl	80094c4 <_malloc_r>
 800a2ce:	b948      	cbnz	r0, 800a2e4 <__smakebuf_r+0x44>
 800a2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d4ef      	bmi.n	800a2b8 <__smakebuf_r+0x18>
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	f043 0302 	orr.w	r3, r3, #2
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	e7e3      	b.n	800a2ac <__smakebuf_r+0xc>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	6020      	str	r0, [r4, #0]
 800a2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	6163      	str	r3, [r4, #20]
 800a2f2:	9b01      	ldr	r3, [sp, #4]
 800a2f4:	6120      	str	r0, [r4, #16]
 800a2f6:	b15b      	cbz	r3, 800a310 <__smakebuf_r+0x70>
 800a2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f000 f81d 	bl	800a33c <_isatty_r>
 800a302:	b128      	cbz	r0, 800a310 <__smakebuf_r+0x70>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f023 0303 	bic.w	r3, r3, #3
 800a30a:	f043 0301 	orr.w	r3, r3, #1
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	431d      	orrs	r5, r3
 800a314:	81a5      	strh	r5, [r4, #12]
 800a316:	e7cf      	b.n	800a2b8 <__smakebuf_r+0x18>

0800a318 <_fstat_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d07      	ldr	r5, [pc, #28]	; (800a338 <_fstat_r+0x20>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	4611      	mov	r1, r2
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	f7f7 ff34 	bl	8002192 <_fstat>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d102      	bne.n	800a334 <_fstat_r+0x1c>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b103      	cbz	r3, 800a334 <_fstat_r+0x1c>
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	bd38      	pop	{r3, r4, r5, pc}
 800a336:	bf00      	nop
 800a338:	20002f2c 	.word	0x20002f2c

0800a33c <_isatty_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d06      	ldr	r5, [pc, #24]	; (800a358 <_isatty_r+0x1c>)
 800a340:	2300      	movs	r3, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4608      	mov	r0, r1
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	f7f7 ff33 	bl	80021b2 <_isatty>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_isatty_r+0x1a>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_isatty_r+0x1a>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	20002f2c 	.word	0x20002f2c

0800a35c <_init>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr

0800a368 <_fini>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr
