
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08010158  08010158  00020158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c40  08010c40  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08010c40  08010c40  00020c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c48  08010c48  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c48  08010c48  00020c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c4c  08010c4c  00020c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08010c50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e2c  20000148  08010d98  00030148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f74  08010d98  00033f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001564d  00000000  00000000  000301bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe1  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000487f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e20  00000000  00000000  00049960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187f0  00000000  00000000  0004a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e46  00000000  00000000  00062f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009390a  00000000  00000000  0007adb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055bc  00000000  00000000  0010e6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00113c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010140 	.word	0x08010140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	08010140 	.word	0x08010140

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b098      	sub	sp, #96	; 0x60
 800069a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc7      	ldr	r3, [pc, #796]	; (80009d8 <main+0x344>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc4      	ldr	r3, [pc, #784]	; (80009d8 <main+0x344>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc1      	ldr	r3, [pc, #772]	; (80009d8 <main+0x344>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbe      	ldr	r3, [pc, #760]	; (80009d8 <main+0x344>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbb      	ldr	r3, [pc, #748]	; (80009d8 <main+0x344>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb8      	ldr	r3, [pc, #736]	; (80009d8 <main+0x344>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb5      	ldr	r3, [pc, #724]	; (80009d8 <main+0x344>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb2      	ldr	r3, [pc, #712]	; (80009d8 <main+0x344>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4baf      	ldr	r3, [pc, #700]	; (80009d8 <main+0x344>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bac      	ldr	r3, [pc, #688]	; (80009d8 <main+0x344>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4ba9      	ldr	r3, [pc, #676]	; (80009d8 <main+0x344>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba6      	ldr	r3, [pc, #664]	; (80009d8 <main+0x344>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba3      	ldr	r3, [pc, #652]	; (80009d8 <main+0x344>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <main+0x344>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9d      	ldr	r3, [pc, #628]	; (80009d8 <main+0x344>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9a      	ldr	r3, [pc, #616]	; (80009d8 <main+0x344>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b97      	ldr	r3, [pc, #604]	; (80009d8 <main+0x344>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <main+0x344>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <main+0x344>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8e      	ldr	r3, [pc, #568]	; (80009d8 <main+0x344>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <main+0x344>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b88      	ldr	r3, [pc, #544]	; (80009d8 <main+0x344>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <main+0x344>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b82      	ldr	r3, [pc, #520]	; (80009d8 <main+0x344>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <main+0x344>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <main+0x344>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <main+0x344>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b75      	ldr	r3, [pc, #468]	; (80009d8 <main+0x344>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b72      	ldr	r3, [pc, #456]	; (80009d8 <main+0x344>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <main+0x344>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x344>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <main+0x344>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <main+0x344>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <main+0x344>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <main+0x344>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <main+0x344>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <main+0x344>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <main+0x344>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <main+0x348>)
 80008d2:	f005 ff81 	bl	80067d8 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4942      	ldr	r1, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	f00e fc4b 	bl	800f174 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x354>)
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x358>)
 80008e2:	f00e fc47 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4942      	ldr	r1, [pc, #264]	; (80009f0 <main+0x35c>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x360>)
 80008ea:	f00e fc43 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4942      	ldr	r1, [pc, #264]	; (80009f8 <main+0x364>)
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x368>)
 80008f2:	f00e fc3f 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x36c>)
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <main+0x370>)
 80008fa:	f00e fc3b 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x374>)
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x378>)
 8000902:	f00e fc37 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x37c>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x380>)
 800090a:	f00e fc33 	bl	800f174 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4942      	ldr	r1, [pc, #264]	; (8000a18 <main+0x384>)
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <main+0x388>)
 8000912:	f00e fc2f 	bl	800f174 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <main+0x348>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <main+0x348>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <main+0x348>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <main+0x348>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x348>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <main+0x348>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <main+0x348>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <main+0x348>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <main+0x348>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x348>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <main+0x348>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x348>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <main+0x348>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <main+0x348>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x38c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <main+0x344>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <main+0x344>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <main+0x344>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <main+0x394>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e029      	b.n	8000a2c <main+0x398>
 80009d8:	20002714 	.word	0x20002714
 80009dc:	20000b28 	.word	0x20000b28
 80009e0:	20000024 	.word	0x20000024
 80009e4:	20000b2e 	.word	0x20000b2e
 80009e8:	2000002c 	.word	0x2000002c
 80009ec:	20000b4e 	.word	0x20000b4e
 80009f0:	20000038 	.word	0x20000038
 80009f4:	20000b5e 	.word	0x20000b5e
 80009f8:	20000048 	.word	0x20000048
 80009fc:	20000b6e 	.word	0x20000b6e
 8000a00:	20000050 	.word	0x20000050
 8000a04:	20000b74 	.word	0x20000b74
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	20000b8a 	.word	0x20000b8a
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20000b9a 	.word	0x20000b9a
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20000b84 	.word	0x20000b84
 8000a20:	200037c4 	.word	0x200037c4
 8000a24:	40020000 	.word	0x40020000
 8000a28:	20000164 	.word	0x20000164

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a2e:	f00b fd0d 	bl	800c44c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x4d4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a38:	484c      	ldr	r0, [pc, #304]	; (8000b6c <main+0x4d8>)
 8000a3a:	f00b fd07 	bl	800c44c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <main+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a44:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a48:	2103      	movs	r1, #3
 8000a4a:	4848      	ldr	r0, [pc, #288]	; (8000b6c <main+0x4d8>)
 8000a4c:	f00b fda1 	bl	800c592 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f002 f85a 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 fae6 	bl	8001024 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x4dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <main+0x4e0>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	099b      	lsrs	r3, r3, #6
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdcb 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fced 	bl	8001448 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a6e:	f000 fb41 	bl	80010f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a72:	f000 fc6b 	bl	800134c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a76:	f000 fc93 	bl	80013a0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a7a:	f000 fcbb 	bl	80013f4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 fb6f 	bl	8001160 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a82:	f000 fbe7 	bl	8001254 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	483b      	ldr	r0, [pc, #236]	; (8000b78 <main+0x4e4>)
 8000a8c:	f002 fd10 	bl	80034b0 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a90:	210e      	movs	r1, #14
 8000a92:	483a      	ldr	r0, [pc, #232]	; (8000b7c <main+0x4e8>)
 8000a94:	f000 fd60 	bl	8001558 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000a98:	f001 fc50 	bl	800233c <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <main+0x4ec>)
 8000a9e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <main+0x41a>
 8000aa6:	2113      	movs	r1, #19
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <main+0x4f0>)
 8000aaa:	f000 fd55 	bl	8001558 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4935      	ldr	r1, [pc, #212]	; (8000b88 <main+0x4f4>)
 8000ab2:	4836      	ldr	r0, [pc, #216]	; (8000b8c <main+0x4f8>)
 8000ab4:	f004 fe25 	bl	8005702 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4935      	ldr	r1, [pc, #212]	; (8000b90 <main+0x4fc>)
 8000abc:	4835      	ldr	r0, [pc, #212]	; (8000b94 <main+0x500>)
 8000abe:	f004 fe20 	bl	8005702 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <main+0x504>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <main+0x43e>
 8000aca:	2112      	movs	r1, #18
 8000acc:	4833      	ldr	r0, [pc, #204]	; (8000b9c <main+0x508>)
 8000ace:	f000 fd43 	bl	8001558 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <main+0x50c>)
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <main+0x50c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <main+0x50c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <main+0x50c>)
 8000ae6:	22c0      	movs	r2, #192	; 0xc0
 8000ae8:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0x50c>)
 8000aec:	f00d f97c 	bl	800dde8 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <main+0x50c>)
 8000af4:	f00d f9f2 	bl	800dedc <eth_socket_init>

   SPI_READ_EN=1;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x510>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <main+0x50c>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <main+0x50c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <main+0x50c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <main+0x50c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <main+0x4f8>)
 8000b18:	f001 fc38 	bl	800238c <ESP8266_HW_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <main+0x514>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <main+0x4ec>)
 8000b2a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04a      	beq.n	8000bc8 <main+0x534>
 8000b32:	2113      	movs	r1, #19
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <main+0x518>)
 8000b36:	f000 fd0f 	bl	8001558 <ITM0_Write>
 8000b3a:	e045      	b.n	8000bc8 <main+0x534>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b3c:	f001 fbfe 	bl	800233c <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <main+0x4f8>)
 8000b42:	f001 fc23 	bl	800238c <ESP8266_HW_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d131      	bne.n	8000bb0 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <main+0x514>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <main+0x4ec>)
 8000b54:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d035      	beq.n	8000bc8 <main+0x534>
 8000b5c:	2113      	movs	r1, #19
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <main+0x518>)
 8000b60:	f000 fcfa 	bl	8001558 <ITM0_Write>
 8000b64:	e030      	b.n	8000bc8 <main+0x534>
 8000b66:	bf00      	nop
 8000b68:	20001874 	.word	0x20001874
 8000b6c:	20001dc0 	.word	0x20001dc0
 8000b70:	20000084 	.word	0x20000084
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	08010158 	.word	0x08010158
 8000b80:	20000b28 	.word	0x20000b28
 8000b84:	08010168 	.word	0x08010168
 8000b88:	20003ddc 	.word	0x20003ddc
 8000b8c:	2000024c 	.word	0x2000024c
 8000b90:	20003de0 	.word	0x20003de0
 8000b94:	20000290 	.word	0x20000290
 8000b98:	20000021 	.word	0x20000021
 8000b9c:	0801017c 	.word	0x0801017c
 8000ba0:	20002714 	.word	0x20002714
 8000ba4:	200037d4 	.word	0x200037d4
 8000ba8:	200037c7 	.word	0x200037c7
 8000bac:	08010190 	.word	0x08010190
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb0:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <main+0x7d0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb6:	4bac      	ldr	r3, [pc, #688]	; (8000e68 <main+0x7d4>)
 8000bb8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <main+0x534>
 8000bc0:	2115      	movs	r1, #21
 8000bc2:	48aa      	ldr	r0, [pc, #680]	; (8000e6c <main+0x7d8>)
 8000bc4:	f000 fcc8 	bl	8001558 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f002 f80e 	bl	8002bec <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 8000bd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bd4:	48a6      	ldr	r0, [pc, #664]	; (8000e70 <main+0x7dc>)
 8000bd6:	f00a ff95 	bl	800bb04 <LoRa_set_sndTIMER>





	  	  if (ESP_HW_Init==1)
 8000bda:	4ba2      	ldr	r3, [pc, #648]	; (8000e64 <main+0x7d0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 809d 	bne.w	8000d1e <main+0x68a>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000be4:	4ba3      	ldr	r3, [pc, #652]	; (8000e74 <main+0x7e0>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	f040 8098 	bne.w	8000d1e <main+0x68a>
 8000bee:	4b9e      	ldr	r3, [pc, #632]	; (8000e68 <main+0x7d4>)
 8000bf0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 8092 	bne.w	8000d1e <main+0x68a>
 8000bfa:	4b9b      	ldr	r3, [pc, #620]	; (8000e68 <main+0x7d4>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c00:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c04:	f340 808b 	ble.w	8000d1e <main+0x68a>
 8000c08:	4b9b      	ldr	r3, [pc, #620]	; (8000e78 <main+0x7e4>)
 8000c0a:	7c9b      	ldrb	r3, [r3, #18]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 8086 	beq.w	8000d1e <main+0x68a>
	  			{	ETH.S0_data_available=0;
 8000c12:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <main+0x7e4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c18:	4b98      	ldr	r3, [pc, #608]	; (8000e7c <main+0x7e8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c1e:	4b95      	ldr	r3, [pc, #596]	; (8000e74 <main+0x7e0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c24:	2100      	movs	r1, #0
 8000c26:	4896      	ldr	r0, [pc, #600]	; (8000e80 <main+0x7ec>)
 8000c28:	f00b fce1 	bl	800c5ee <ModBUS_F03_Read>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4698      	mov	r8, r3
 8000c30:	2101      	movs	r1, #1
 8000c32:	4893      	ldr	r0, [pc, #588]	; (8000e80 <main+0x7ec>)
 8000c34:	f00b fcdb 	bl	800c5ee <ModBUS_F03_Read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4890      	ldr	r0, [pc, #576]	; (8000e80 <main+0x7ec>)
 8000c40:	f00b fcd5 	bl	800c5ee <ModBUS_F03_Read>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461d      	mov	r5, r3
 8000c48:	2103      	movs	r1, #3
 8000c4a:	488d      	ldr	r0, [pc, #564]	; (8000e80 <main+0x7ec>)
 8000c4c:	f00b fccf 	bl	800c5ee <ModBUS_F03_Read>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461e      	mov	r6, r3
 8000c54:	2104      	movs	r1, #4
 8000c56:	488a      	ldr	r0, [pc, #552]	; (8000e80 <main+0x7ec>)
 8000c58:	f00b fcc9 	bl	800c5ee <ModBUS_F03_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	2105      	movs	r1, #5
 8000c62:	4887      	ldr	r0, [pc, #540]	; (8000e80 <main+0x7ec>)
 8000c64:	f00b fcc3 	bl	800c5ee <ModBUS_F03_Read>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	2106      	movs	r1, #6
 8000c6e:	4884      	ldr	r0, [pc, #528]	; (8000e80 <main+0x7ec>)
 8000c70:	f00b fcbd 	bl	800c5ee <ModBUS_F03_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	2107      	movs	r1, #7
 8000c7a:	4881      	ldr	r0, [pc, #516]	; (8000e80 <main+0x7ec>)
 8000c7c:	f00b fcb7 	bl	800c5ee <ModBUS_F03_Read>
 8000c80:	4603      	mov	r3, r0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	2108      	movs	r1, #8
 8000c86:	487e      	ldr	r0, [pc, #504]	; (8000e80 <main+0x7ec>)
 8000c88:	f00b fcb1 	bl	800c5ee <ModBUS_F03_Read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	2109      	movs	r1, #9
 8000c92:	487b      	ldr	r0, [pc, #492]	; (8000e80 <main+0x7ec>)
 8000c94:	f00b fcab 	bl	800c5ee <ModBUS_F03_Read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8000ca2:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <main+0x7f0>)
 8000ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ca6:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <main+0x7f4>)
 8000ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8000caa:	2301      	movs	r3, #1
 8000cac:	9309      	str	r3, [sp, #36]	; 0x24
 8000cae:	9208      	str	r2, [sp, #32]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	9207      	str	r2, [sp, #28]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	9206      	str	r2, [sp, #24]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	9205      	str	r2, [sp, #20]
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	9204      	str	r2, [sp, #16]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	9303      	str	r3, [sp, #12]
 8000cc4:	9602      	str	r6, [sp, #8]
 8000cc6:	9501      	str	r5, [sp, #4]
 8000cc8:	9400      	str	r4, [sp, #0]
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4a6f      	ldr	r2, [pc, #444]	; (8000e8c <main+0x7f8>)
 8000cce:	4970      	ldr	r1, [pc, #448]	; (8000e90 <main+0x7fc>)
 8000cd0:	4870      	ldr	r0, [pc, #448]	; (8000e94 <main+0x800>)
 8000cd2:	f00a fbb9 	bl	800b448 <httpPOST>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d020      	beq.n	8000d1e <main+0x68a>
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cdc:	486a      	ldr	r0, [pc, #424]	; (8000e88 <main+0x7f4>)
 8000cde:	f7ff fa89 	bl	80001f4 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2341      	movs	r3, #65	; 0x41
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	4966      	ldr	r1, [pc, #408]	; (8000e88 <main+0x7f4>)
 8000cee:	486a      	ldr	r0, [pc, #424]	; (8000e98 <main+0x804>)
 8000cf0:	f00d ff0c 	bl	800eb0c <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000cf4:	4864      	ldr	r0, [pc, #400]	; (8000e88 <main+0x7f4>)
 8000cf6:	f7ff fa7d 	bl	80001f4 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <main+0x7d4>)
 8000d00:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d04:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <main+0x7d4>)
 8000d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d807      	bhi.n	8000d1e <main+0x68a>
	  							{
	  								EnviarDatos(&wf);
 8000d0e:	4856      	ldr	r0, [pc, #344]	; (8000e68 <main+0x7d4>)
 8000d10:	f005 fd4c 	bl	80067ac <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d14:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <main+0x7d4>)
 8000d16:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <main+0x808>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d003      	beq.n	8000d2e <main+0x69a>
 8000d26:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <main+0x80c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d175      	bne.n	8000e1a <main+0x786>
	  		{
	  			if(FLAG_UART1==1)
 8000d2e:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <main+0x808>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d11c      	bne.n	8000d70 <main+0x6dc>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <main+0x810>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <main+0x814>)
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	495a      	ldr	r1, [pc, #360]	; (8000eac <main+0x818>)
 8000d42:	485b      	ldr	r0, [pc, #364]	; (8000eb0 <main+0x81c>)
 8000d44:	f00d fee2 	bl	800eb0c <CopiaVector>
	  					FLAG_UART1=0;
 8000d48:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <main+0x808>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <main+0x820>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d102      	bne.n	8000d5c <main+0x6c8>
	  						{
	  							error_rxdata=0;
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <main+0x820>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <main+0x820>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d105      	bne.n	8000d70 <main+0x6dc>
	  						{
	  							error_rxdata=5;
 8000d64:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <main+0x820>)
 8000d66:	2205      	movs	r2, #5
 8000d68:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d6a:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <main+0x820>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <main+0x80c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d102      	bne.n	8000d7e <main+0x6ea>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <main+0x80c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <main+0x7d0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d149      	bne.n	8000e1a <main+0x786>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <main+0x810>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a37      	ldr	r2, [pc, #220]	; (8000e68 <main+0x7d4>)
 8000d8c:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <main+0x810>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <main+0x814>)
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4944      	ldr	r1, [pc, #272]	; (8000eac <main+0x818>)
 8000d9c:	4844      	ldr	r0, [pc, #272]	; (8000eb0 <main+0x81c>)
 8000d9e:	f00d feb5 	bl	800eb0c <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000da2:	4831      	ldr	r0, [pc, #196]	; (8000e68 <main+0x7d4>)
 8000da4:	f005 fde2 	bl	800696c <AT_ESP8266_ND>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <main+0x824>)
 8000dae:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <main+0x7d4>)
 8000db2:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d12f      	bne.n	8000e1a <main+0x786>
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <main+0x7d4>)
 8000dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc0:	2b63      	cmp	r3, #99	; 0x63
 8000dc2:	d12a      	bne.n	8000e1a <main+0x786>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <main+0x7d4>)
 8000dc6:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000dca:	2341      	movs	r3, #65	; 0x41
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	493a      	ldr	r1, [pc, #232]	; (8000ebc <main+0x828>)
 8000dd2:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x82c>)
 8000dd4:	f00d fe9a 	bl	800eb0c <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <main+0x7d4>)
 8000dda:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000dde:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <main+0x830>)
 8000de0:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000de4:	4837      	ldr	r0, [pc, #220]	; (8000ec4 <main+0x830>)
 8000de6:	f00b fc87 	bl	800c6f8 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <main+0x830>)
 8000dec:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000df0:	2341      	movs	r3, #65	; 0x41
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	4934      	ldr	r1, [pc, #208]	; (8000ec8 <main+0x834>)
 8000df8:	4827      	ldr	r0, [pc, #156]	; (8000e98 <main+0x804>)
 8000dfa:	f00d fe87 	bl	800eb0c <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <main+0x830>)
 8000e00:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <main+0x7d4>)
 8000e06:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <main+0x7d4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <main+0x7d4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <main+0x838>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <main+0x79a>
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <main+0x7dc>)
 8000e24:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f040 80a9 	bne.w	8000f80 <main+0x8ec>
	  		{
	  			if(FLAG_UART2==1)
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <main+0x838>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d105      	bne.n	8000e42 <main+0x7ae>
	  				{
	  				FLAG_UART2=0;
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <main+0x838>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <main+0x7dc>)
 8000e3e:	f00a fe7d 	bl	800bb3c <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <main+0x7dc>)
 8000e44:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	f040 8099 	bne.w	8000f80 <main+0x8ec>
	  				{
	  					lr.tmr_dly_ON=0;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <main+0x7dc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000e56:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <main+0x7dc>)
 8000e5c:	f00a fe52 	bl	800bb04 <LoRa_set_sndTIMER>
 8000e60:	e036      	b.n	8000ed0 <main+0x83c>
 8000e62:	bf00      	nop
 8000e64:	200037c7 	.word	0x200037c7
 8000e68:	20000b28 	.word	0x20000b28
 8000e6c:	080101a4 	.word	0x080101a4
 8000e70:	20000320 	.word	0x20000320
 8000e74:	2000270c 	.word	0x2000270c
 8000e78:	20002714 	.word	0x20002714
 8000e7c:	20002710 	.word	0x20002710
 8000e80:	20001874 	.word	0x20001874
 8000e84:	2000250c 	.word	0x2000250c
 8000e88:	2000230c 	.word	0x2000230c
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000dbc 	.word	0x20000dbc
 8000e9c:	200037cc 	.word	0x200037cc
 8000ea0:	200037cb 	.word	0x200037cb
 8000ea4:	20003de8 	.word	0x20003de8
 8000ea8:	20003dd8 	.word	0x20003dd8
 8000eac:	20003bd8 	.word	0x20003bd8
 8000eb0:	200011bc 	.word	0x200011bc
 8000eb4:	200037cf 	.word	0x200037cf
 8000eb8:	200037ce 	.word	0x200037ce
 8000ebc:	20000bbc 	.word	0x20000bbc
 8000ec0:	20001dcd 	.word	0x20001dcd
 8000ec4:	20001dc0 	.word	0x20001dc0
 8000ec8:	20001f54 	.word	0x20001f54
 8000ecc:	200037cd 	.word	0x200037cd
						lr.dest_address[0]='\0';
 8000ed0:	4b44      	ldr	r3, [pc, #272]	; (8000fe4 <main+0x950>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <main+0x950>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

			  			/*strncat(lr.dest_address,"1",1);
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");*/
		  				lr.estado=_SENT;
 8000ede:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <main+0x950>)
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000ee6:	4840      	ldr	r0, [pc, #256]	; (8000fe8 <main+0x954>)
 8000ee8:	f7ff f984 	bl	80001f4 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <main+0x954>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	493d      	ldr	r1, [pc, #244]	; (8000fec <main+0x958>)
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
		  					while(n<11)
 8000f02:	e02a      	b.n	8000f5a <main+0x8c6>
		  					{
			  					data[0]='\0';
 8000f04:	2300      	movs	r3, #0
 8000f06:	773b      	strb	r3, [r7, #28]
			  					itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4838      	ldr	r0, [pc, #224]	; (8000ff0 <main+0x95c>)
 8000f10:	f00b fb6d 	bl	800c5ee <ModBUS_F03_Read>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f00d fe5b 	bl	800ebda <itoa>
								strncat(lr.txbuff,data,strlen(data));
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f963 	bl	80001f4 <strlen>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	482f      	ldr	r0, [pc, #188]	; (8000ff4 <main+0x960>)
 8000f38:	f00e f83b 	bl	800efb2 <strncat>
								strncat(lr.txbuff,";",1);
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <main+0x960>)
 8000f3e:	f7ff f959 	bl	80001f4 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <main+0x960>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	492b      	ldr	r1, [pc, #172]	; (8000ff8 <main+0x964>)
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	8013      	strh	r3, [r2, #0]
								n++;
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	3301      	adds	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
		  					while(n<11)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	2b0a      	cmp	r3, #10
 8000f5e:	ddd1      	ble.n	8000f04 <main+0x870>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000f60:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <main+0x960>)
 8000f62:	f7ff f947 	bl	80001f4 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <main+0x950>)
 8000f6c:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000f70:	4922      	ldr	r1, [pc, #136]	; (8000ffc <main+0x968>)
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <main+0x950>)
 8000f74:	f00a fd18 	bl	800b9a8 <LoRa_Send>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <main+0x96c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <main+0x970>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <main+0x906>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f88:	2201      	movs	r2, #1
 8000f8a:	491f      	ldr	r1, [pc, #124]	; (8001008 <main+0x974>)
 8000f8c:	481f      	ldr	r0, [pc, #124]	; (800100c <main+0x978>)
 8000f8e:	f008 fded 	bl	8009b6c <WiFi_Conn_ND>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <main+0x97c>)
 8000f98:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <main+0x980>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	f47f ae1b 	bne.w	8000bda <main+0x546>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	481b      	ldr	r0, [pc, #108]	; (8001018 <main+0x984>)
 8000fac:	f002 fa80 	bl	80034b0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000fb0:	2115      	movs	r1, #21
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <main+0x988>)
 8000fb4:	f000 fad0 	bl	8001558 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000fb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fbc:	f001 fe16 	bl	8002bec <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <main+0x984>)
 8000fc8:	f002 fa72 	bl	80034b0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000fcc:	2118      	movs	r1, #24
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <main+0x98c>)
 8000fd0:	f000 fac2 	bl	8001558 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000fd4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fd8:	f001 fe08 	bl	8002bec <HAL_Delay>
	  				esp_restart=0;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <main+0x980>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000fe2:	e5fa      	b.n	8000bda <main+0x546>
 8000fe4:	20000320 	.word	0x20000320
 8000fe8:	20000336 	.word	0x20000336
 8000fec:	080101bc 	.word	0x080101bc
 8000ff0:	20001874 	.word	0x20001874
 8000ff4:	200007fc 	.word	0x200007fc
 8000ff8:	080101c0 	.word	0x080101c0
 8000ffc:	20000290 	.word	0x20000290
 8001000:	20000b24 	.word	0x20000b24
 8001004:	200037c7 	.word	0x200037c7
 8001008:	2000024c 	.word	0x2000024c
 800100c:	20000b28 	.word	0x20000b28
 8001010:	200037d1 	.word	0x200037d1
 8001014:	200037d0 	.word	0x200037d0
 8001018:	40020000 	.word	0x40020000
 800101c:	080101c4 	.word	0x080101c4
 8001020:	080101dc 	.word	0x080101dc

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	; 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	; 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f00d ffb5 	bl	800efa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <SystemClock_Config+0xc8>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <SystemClock_Config+0xc8>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemClock_Config+0xc8>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <SystemClock_Config+0xcc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <SystemClock_Config+0xcc>)
 800106e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <SystemClock_Config+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001094:	230c      	movs	r3, #12
 8001096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fa35 	bl	8003518 <HAL_RCC_OscConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b4:	f001 fa14 	bl	80024e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2103      	movs	r1, #3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fc97 	bl	8003a08 <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010e0:	f001 f9fe 	bl	80024e0 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3750      	adds	r7, #80	; 0x50
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_SPI1_Init+0x64>)
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <MX_SPI1_Init+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_SPI1_Init+0x64>)
 8001100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_SPI1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_SPI1_Init+0x64>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_SPI1_Init+0x64>)
 8001128:	2210      	movs	r2, #16
 800112a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_SPI1_Init+0x64>)
 8001140:	220a      	movs	r2, #10
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_SPI1_Init+0x64>)
 8001146:	f002 fe3f 	bl	8003dc8 <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001150:	f001 f9c6 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000164 	.word	0x20000164
 800115c:	40013000 	.word	0x40013000

08001160 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_TIM2_Init+0xf0>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_TIM2_Init+0xf0>)
 800119a:	2264      	movs	r2, #100	; 0x64
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4826      	ldr	r0, [pc, #152]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011b8:	f003 f8fc 	bl	80043b4 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011c2:	f001 f98d 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d0:	4619      	mov	r1, r3
 80011d2:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011d4:	f003 fd04 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011de:	f001 f97f 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011e2:	481b      	ldr	r0, [pc, #108]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011e4:	f003 f935 	bl	8004452 <HAL_TIM_OC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011ee:	f001 f977 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011f2:	2108      	movs	r1, #8
 80011f4:	4816      	ldr	r0, [pc, #88]	; (8001250 <MX_TIM2_Init+0xf0>)
 80011f6:	f003 fb35 	bl	8004864 <HAL_TIM_OnePulse_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001200:	f001 f96e 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <MX_TIM2_Init+0xf0>)
 8001214:	f004 f8a0 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800121e:	f001 f95f 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001222:	2320      	movs	r3, #32
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM2_Init+0xf0>)
 800123a:	f003 fc75 	bl	8004b28 <HAL_TIM_OC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001244:	f001 f94c 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001bc 	.word	0x200001bc

08001254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_TIM3_Init+0xf0>)
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <MX_TIM3_Init+0xf4>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_TIM3_Init+0xf0>)
 800128c:	2264      	movs	r2, #100	; 0x64
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_TIM3_Init+0xf0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_TIM3_Init+0xf0>)
 8001298:	2296      	movs	r2, #150	; 0x96
 800129a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_TIM3_Init+0xf0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_TIM3_Init+0xf0>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a8:	4826      	ldr	r0, [pc, #152]	; (8001344 <MX_TIM3_Init+0xf0>)
 80012aa:	f003 f883 	bl	80043b4 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012b4:	f001 f914 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <MX_TIM3_Init+0xf0>)
 80012c6:	f003 fc8b 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80012d0:	f001 f906 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <MX_TIM3_Init+0xf0>)
 80012d6:	f003 f8bc 	bl	8004452 <HAL_TIM_OC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012e0:	f001 f8fe 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012e4:	2108      	movs	r1, #8
 80012e6:	4817      	ldr	r0, [pc, #92]	; (8001344 <MX_TIM3_Init+0xf0>)
 80012e8:	f003 fabc 	bl	8004864 <HAL_TIM_OnePulse_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012f2:	f001 f8f5 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4619      	mov	r1, r3
 8001304:	480f      	ldr	r0, [pc, #60]	; (8001344 <MX_TIM3_Init+0xf0>)
 8001306:	f004 f827 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001310:	f001 f8e6 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001314:	2320      	movs	r3, #32
 8001316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM3_Init+0xf0>)
 800132c:	f003 fbfc 	bl	8004b28 <HAL_TIM_OC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001336:	f001 f8d3 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3738      	adds	r7, #56	; 0x38
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000204 	.word	0x20000204
 8001348:	40000400 	.word	0x40000400

0800134c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f004 f86a 	bl	800545c <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f001 f8a7 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000024c 	.word	0x2000024c
 800139c:	40011000 	.word	0x40011000

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f004 f840 	bl	800545c <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f001 f87d 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000290 	.word	0x20000290
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART6_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800142c:	f004 f816 	bl	800545c <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f001 f853 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002d4 	.word	0x200002d4
 8001444:	40011400 	.word	0x40011400

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <MX_GPIO_Init+0x104>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a39      	ldr	r2, [pc, #228]	; (800154c <MX_GPIO_Init+0x104>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <MX_GPIO_Init+0x104>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <MX_GPIO_Init+0x104>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a32      	ldr	r2, [pc, #200]	; (800154c <MX_GPIO_Init+0x104>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <MX_GPIO_Init+0x104>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <MX_GPIO_Init+0x104>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <MX_GPIO_Init+0x104>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_GPIO_Init+0x104>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_GPIO_Init+0x104>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <MX_GPIO_Init+0x104>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_GPIO_Init+0x104>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <MX_GPIO_Init+0x108>)
 80014d6:	f001 ffeb 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2102      	movs	r1, #2
 80014de:	481d      	ldr	r0, [pc, #116]	; (8001554 <MX_GPIO_Init+0x10c>)
 80014e0:	f001 ffe6 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	481a      	ldr	r0, [pc, #104]	; (8001554 <MX_GPIO_Init+0x10c>)
 80014ea:	f001 ffe1 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_GPIO_Init+0x108>)
 8001508:	f001 fd6a 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 800150c:	f240 1301 	movw	r3, #257	; 0x101
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_GPIO_Init+0x10c>)
 8001522:	f001 fd5d 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8001526:	2312      	movs	r3, #18
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_GPIO_Init+0x10c>)
 800153e:	f001 fd4f 	bl	8002fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000

08001558 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e009      	b.n	800157c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f867 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <ITM0_Write+0x10>
  }
  return len;
 8001584:	683b      	ldr	r3, [r7, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001596:	4b68      	ldr	r3, [pc, #416]	; (8001738 <SysTick_Handler+0x1a8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	4a66      	ldr	r2, [pc, #408]	; (8001738 <SysTick_Handler+0x1a8>)
 800159e:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <SysTick_Handler+0x1ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a65      	ldr	r2, [pc, #404]	; (800173c <SysTick_Handler+0x1ac>)
 80015a8:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <SysTick_Handler+0x1b0>)
 80015ac:	791b      	ldrb	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <SysTick_Handler+0x2c>
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <SysTick_Handler+0x1b4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a62      	ldr	r2, [pc, #392]	; (8001744 <SysTick_Handler+0x1b4>)
 80015ba:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80015bc:	4b60      	ldr	r3, [pc, #384]	; (8001740 <SysTick_Handler+0x1b0>)
 80015be:	791b      	ldrb	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00c      	beq.n	80015de <SysTick_Handler+0x4e>
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <SysTick_Handler+0x1b0>)
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <SysTick_Handler+0x1b4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	da05      	bge.n	80015de <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80015d2:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <SysTick_Handler+0x1b0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <SysTick_Handler+0x1b4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80015de:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <SysTick_Handler+0x1b8>)
 80015e0:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d116      	bne.n	8001616 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80015e8:	4b57      	ldr	r3, [pc, #348]	; (8001748 <SysTick_Handler+0x1b8>)
 80015ea:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a55      	ldr	r2, [pc, #340]	; (8001748 <SysTick_Handler+0x1b8>)
 80015f2:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <SysTick_Handler+0x1b8>)
 80015f8:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <SysTick_Handler+0x1b8>)
 80015fe:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001602:	429a      	cmp	r2, r3
 8001604:	dd07      	ble.n	8001616 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 8001606:	4b50      	ldr	r3, [pc, #320]	; (8001748 <SysTick_Handler+0x1b8>)
 8001608:	2201      	movs	r2, #1
 800160a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <SysTick_Handler+0x1b8>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001616:	4b4d      	ldr	r3, [pc, #308]	; (800174c <SysTick_Handler+0x1bc>)
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800161c:	f240 2261 	movw	r2, #609	; 0x261
 8001620:	4293      	cmp	r3, r2
 8001622:	d005      	beq.n	8001630 <SysTick_Handler+0xa0>
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <SysTick_Handler+0x1bc>)
 8001626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800162a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800162e:	d109      	bne.n	8001644 <SysTick_Handler+0xb4>
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <SysTick_Handler+0x1bc>)
 8001632:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001636:	2b00      	cmp	r3, #0
 8001638:	d104      	bne.n	8001644 <SysTick_Handler+0xb4>
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <SysTick_Handler+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a43      	ldr	r2, [pc, #268]	; (8001750 <SysTick_Handler+0x1c0>)
 8001642:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <SysTick_Handler+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800164c:	db0c      	blt.n	8001668 <SysTick_Handler+0xd8>
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <SysTick_Handler+0x1bc>)
 8001650:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d007      	beq.n	8001668 <SysTick_Handler+0xd8>
 8001658:	4b3c      	ldr	r3, [pc, #240]	; (800174c <SysTick_Handler+0x1bc>)
 800165a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <SysTick_Handler+0xd8>
 8001662:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <SysTick_Handler+0x1c4>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <SysTick_Handler+0x1c8>)
 800166a:	7b9b      	ldrb	r3, [r3, #14]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10e      	bne.n	800168e <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <SysTick_Handler+0x1c8>)
 8001672:	899b      	ldrh	r3, [r3, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <SysTick_Handler+0x1c8>)
 800167a:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <SysTick_Handler+0x1c8>)
 800167e:	899b      	ldrh	r3, [r3, #12]
 8001680:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001684:	d303      	bcc.n	800168e <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <SysTick_Handler+0x1c8>)
 8001688:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800168c:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SysTick_Handler+0x1a8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	f040 8420 	bne.w	8001ed8 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <SysTick_Handler+0x1cc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <SysTick_Handler+0x1cc>)
 80016a0:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <SysTick_Handler+0x1a8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <SysTick_Handler+0x1d0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <SysTick_Handler+0x1d0>)
 80016b0:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <SysTick_Handler+0x1d4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016ba:	d102      	bne.n	80016c2 <SysTick_Handler+0x132>
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <SysTick_Handler+0x1d4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <SysTick_Handler+0x1d8>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <SysTick_Handler+0x144>
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <SysTick_Handler+0x1d4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a24      	ldr	r2, [pc, #144]	; (8001764 <SysTick_Handler+0x1d4>)
 80016d2:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <SysTick_Handler+0x1d4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d102      	bne.n	80016e2 <SysTick_Handler+0x152>
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <SysTick_Handler+0x1d8>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <SysTick_Handler+0x1d8>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d104      	bne.n	80016f4 <SysTick_Handler+0x164>
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <SysTick_Handler+0x1d4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <SysTick_Handler+0x1d4>)
 80016f2:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <SysTick_Handler+0x1d4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <SysTick_Handler+0x172>
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <SysTick_Handler+0x1d8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <SysTick_Handler+0x1dc>)
 8001708:	f001 feeb 	bl	80034e2 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <SysTick_Handler+0x1e0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 83d1 	beq.w	8001eb8 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <SysTick_Handler+0x1e4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 83d0 	beq.w	8001ec0 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001720:	2100      	movs	r1, #0
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <SysTick_Handler+0x1c8>)
 8001724:	f00c fc56 	bl	800dfd4 <eth_rd_SOCKET_STAT>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <SysTick_Handler+0x1c8>)
 800172e:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <SysTick_Handler+0x1c8>)
 8001732:	7b9b      	ldrb	r3, [r3, #14]
 8001734:	e020      	b.n	8001778 <SysTick_Handler+0x1e8>
 8001736:	bf00      	nop
 8001738:	20000318 	.word	0x20000318
 800173c:	20003df0 	.word	0x20003df0
 8001740:	20001874 	.word	0x20001874
 8001744:	20003df8 	.word	0x20003df8
 8001748:	20000320 	.word	0x20000320
 800174c:	20000b28 	.word	0x20000b28
 8001750:	20002710 	.word	0x20002710
 8001754:	2000270c 	.word	0x2000270c
 8001758:	20002714 	.word	0x20002714
 800175c:	20003e1c 	.word	0x20003e1c
 8001760:	2000031c 	.word	0x2000031c
 8001764:	20003df4 	.word	0x20003df4
 8001768:	200037d2 	.word	0x200037d2
 800176c:	40020800 	.word	0x40020800
 8001770:	200037c4 	.word	0x200037c4
 8001774:	200037d4 	.word	0x200037d4
 8001778:	2b5f      	cmp	r3, #95	; 0x5f
 800177a:	f200 83a6 	bhi.w	8001eca <SysTick_Handler+0x93a>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <SysTick_Handler+0x1f4>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001905 	.word	0x08001905
 8001788:	08001ecb 	.word	0x08001ecb
 800178c:	08001ecb 	.word	0x08001ecb
 8001790:	08001ecb 	.word	0x08001ecb
 8001794:	08001ecb 	.word	0x08001ecb
 8001798:	08001ecb 	.word	0x08001ecb
 800179c:	08001ecb 	.word	0x08001ecb
 80017a0:	08001ecb 	.word	0x08001ecb
 80017a4:	08001ecb 	.word	0x08001ecb
 80017a8:	08001ecb 	.word	0x08001ecb
 80017ac:	08001ecb 	.word	0x08001ecb
 80017b0:	08001ecb 	.word	0x08001ecb
 80017b4:	08001ecb 	.word	0x08001ecb
 80017b8:	08001ecb 	.word	0x08001ecb
 80017bc:	08001ecb 	.word	0x08001ecb
 80017c0:	08001ecb 	.word	0x08001ecb
 80017c4:	08001ecb 	.word	0x08001ecb
 80017c8:	08001ecb 	.word	0x08001ecb
 80017cc:	08001ecb 	.word	0x08001ecb
 80017d0:	0800193d 	.word	0x0800193d
 80017d4:	0800198f 	.word	0x0800198f
 80017d8:	080019a7 	.word	0x080019a7
 80017dc:	080019bf 	.word	0x080019bf
 80017e0:	080019d7 	.word	0x080019d7
 80017e4:	08001d33 	.word	0x08001d33
 80017e8:	08001ecb 	.word	0x08001ecb
 80017ec:	08001d4b 	.word	0x08001d4b
 80017f0:	08001d63 	.word	0x08001d63
 80017f4:	08001da1 	.word	0x08001da1
 80017f8:	08001ddf 	.word	0x08001ddf
 80017fc:	08001ecb 	.word	0x08001ecb
 8001800:	08001ecb 	.word	0x08001ecb
 8001804:	08001ecb 	.word	0x08001ecb
 8001808:	08001ecb 	.word	0x08001ecb
 800180c:	08001df7 	.word	0x08001df7
 8001810:	08001ecb 	.word	0x08001ecb
 8001814:	08001ecb 	.word	0x08001ecb
 8001818:	08001ecb 	.word	0x08001ecb
 800181c:	08001ecb 	.word	0x08001ecb
 8001820:	08001ecb 	.word	0x08001ecb
 8001824:	08001ecb 	.word	0x08001ecb
 8001828:	08001ecb 	.word	0x08001ecb
 800182c:	08001ecb 	.word	0x08001ecb
 8001830:	08001ecb 	.word	0x08001ecb
 8001834:	08001ecb 	.word	0x08001ecb
 8001838:	08001ecb 	.word	0x08001ecb
 800183c:	08001ecb 	.word	0x08001ecb
 8001840:	08001ecb 	.word	0x08001ecb
 8001844:	08001ecb 	.word	0x08001ecb
 8001848:	08001ecb 	.word	0x08001ecb
 800184c:	08001e71 	.word	0x08001e71
 8001850:	08001ecb 	.word	0x08001ecb
 8001854:	08001ecb 	.word	0x08001ecb
 8001858:	08001ecb 	.word	0x08001ecb
 800185c:	08001ecb 	.word	0x08001ecb
 8001860:	08001ecb 	.word	0x08001ecb
 8001864:	08001ecb 	.word	0x08001ecb
 8001868:	08001ecb 	.word	0x08001ecb
 800186c:	08001ecb 	.word	0x08001ecb
 8001870:	08001ecb 	.word	0x08001ecb
 8001874:	08001ecb 	.word	0x08001ecb
 8001878:	08001ecb 	.word	0x08001ecb
 800187c:	08001ecb 	.word	0x08001ecb
 8001880:	08001ecb 	.word	0x08001ecb
 8001884:	08001ecb 	.word	0x08001ecb
 8001888:	08001ecb 	.word	0x08001ecb
 800188c:	08001e89 	.word	0x08001e89
 8001890:	08001ecb 	.word	0x08001ecb
 8001894:	08001ecb 	.word	0x08001ecb
 8001898:	08001ecb 	.word	0x08001ecb
 800189c:	08001ecb 	.word	0x08001ecb
 80018a0:	08001ecb 	.word	0x08001ecb
 80018a4:	08001ecb 	.word	0x08001ecb
 80018a8:	08001ecb 	.word	0x08001ecb
 80018ac:	08001ecb 	.word	0x08001ecb
 80018b0:	08001ecb 	.word	0x08001ecb
 80018b4:	08001ecb 	.word	0x08001ecb
 80018b8:	08001ecb 	.word	0x08001ecb
 80018bc:	08001ecb 	.word	0x08001ecb
 80018c0:	08001ecb 	.word	0x08001ecb
 80018c4:	08001ecb 	.word	0x08001ecb
 80018c8:	08001ecb 	.word	0x08001ecb
 80018cc:	08001ecb 	.word	0x08001ecb
 80018d0:	08001ecb 	.word	0x08001ecb
 80018d4:	08001ecb 	.word	0x08001ecb
 80018d8:	08001ecb 	.word	0x08001ecb
 80018dc:	08001ecb 	.word	0x08001ecb
 80018e0:	08001ecb 	.word	0x08001ecb
 80018e4:	08001ecb 	.word	0x08001ecb
 80018e8:	08001ecb 	.word	0x08001ecb
 80018ec:	08001ecb 	.word	0x08001ecb
 80018f0:	08001ecb 	.word	0x08001ecb
 80018f4:	08001ecb 	.word	0x08001ecb
 80018f8:	08001ecb 	.word	0x08001ecb
 80018fc:	08001ecb 	.word	0x08001ecb
 8001900:	08001ea1 	.word	0x08001ea1
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <SysTick_Handler+0x580>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <SysTick_Handler+0x384>
 800190c:	2113      	movs	r1, #19
 800190e:	4881      	ldr	r0, [pc, #516]	; (8001b14 <SysTick_Handler+0x584>)
 8001910:	f7ff fe22 	bl	8001558 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001914:	2201      	movs	r2, #1
 8001916:	2100      	movs	r1, #0
 8001918:	487f      	ldr	r0, [pc, #508]	; (8001b18 <SysTick_Handler+0x588>)
 800191a:	f00c fa29 	bl	800dd70 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 800191e:	4b7e      	ldr	r3, [pc, #504]	; (8001b18 <SysTick_Handler+0x588>)
 8001920:	899b      	ldrh	r3, [r3, #12]
 8001922:	f241 3287 	movw	r2, #4999	; 0x1387
 8001926:	4293      	cmp	r3, r2
 8001928:	f240 82cc 	bls.w	8001ec4 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 800192c:	487a      	ldr	r0, [pc, #488]	; (8001b18 <SysTick_Handler+0x588>)
 800192e:	f00c fa5b 	bl	800dde8 <eth_init>

						 eth_socket_init(&ETH,0);
 8001932:	2100      	movs	r1, #0
 8001934:	4878      	ldr	r0, [pc, #480]	; (8001b18 <SysTick_Handler+0x588>)
 8001936:	f00c fad1 	bl	800dedc <eth_socket_init>
					 }

				 }
			 break;
 800193a:	e2c3      	b.n	8001ec4 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <SysTick_Handler+0x588>)
 800193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001946:	2b01      	cmp	r3, #1
 8001948:	d110      	bne.n	800196c <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 800194a:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <SysTick_Handler+0x580>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <SysTick_Handler+0x3ca>
 8001952:	2111      	movs	r1, #17
 8001954:	4871      	ldr	r0, [pc, #452]	; (8001b1c <SysTick_Handler+0x58c>)
 8001956:	f7ff fdff 	bl	8001558 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800195a:	2202      	movs	r2, #2
 800195c:	2100      	movs	r1, #0
 800195e:	486e      	ldr	r0, [pc, #440]	; (8001b18 <SysTick_Handler+0x588>)
 8001960:	f00c fa06 	bl	800dd70 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001964:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <SysTick_Handler+0x588>)
 8001966:	2200      	movs	r2, #0
 8001968:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800196a:	e2ae      	b.n	8001eca <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 800196c:	2204      	movs	r2, #4
 800196e:	2100      	movs	r1, #0
 8001970:	4869      	ldr	r0, [pc, #420]	; (8001b18 <SysTick_Handler+0x588>)
 8001972:	f00c f9fd 	bl	800dd70 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001976:	4b66      	ldr	r3, [pc, #408]	; (8001b10 <SysTick_Handler+0x580>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <SysTick_Handler+0x3f6>
 800197e:	2115      	movs	r1, #21
 8001980:	4867      	ldr	r0, [pc, #412]	; (8001b20 <SysTick_Handler+0x590>)
 8001982:	f7ff fde9 	bl	8001558 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001986:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <SysTick_Handler+0x588>)
 8001988:	2200      	movs	r2, #0
 800198a:	819a      	strh	r2, [r3, #12]
			 break;
 800198c:	e29d      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <SysTick_Handler+0x580>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <SysTick_Handler+0x40e>
 8001996:	2113      	movs	r1, #19
 8001998:	4862      	ldr	r0, [pc, #392]	; (8001b24 <SysTick_Handler+0x594>)
 800199a:	f7ff fddd 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <SysTick_Handler+0x588>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019a4:	e291      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <SysTick_Handler+0x580>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <SysTick_Handler+0x426>
 80019ae:	2114      	movs	r1, #20
 80019b0:	485d      	ldr	r0, [pc, #372]	; (8001b28 <SysTick_Handler+0x598>)
 80019b2:	f7ff fdd1 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <SysTick_Handler+0x588>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019bc:	e285      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019be:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <SysTick_Handler+0x580>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <SysTick_Handler+0x43e>
 80019c6:	2114      	movs	r1, #20
 80019c8:	4858      	ldr	r0, [pc, #352]	; (8001b2c <SysTick_Handler+0x59c>)
 80019ca:	f7ff fdc5 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019ce:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <SysTick_Handler+0x588>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019d4:	e279      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <SysTick_Handler+0x580>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <SysTick_Handler+0x456>
 80019de:	2118      	movs	r1, #24
 80019e0:	4853      	ldr	r0, [pc, #332]	; (8001b30 <SysTick_Handler+0x5a0>)
 80019e2:	f7ff fdb9 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <SysTick_Handler+0x588>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019ec:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <SysTick_Handler+0x588>)
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 80b0 	bne.w	8001b5c <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80019fc:	2302      	movs	r3, #2
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <SysTick_Handler+0x5a4>)
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	230f      	movs	r3, #15
 8001a06:	2226      	movs	r2, #38	; 0x26
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4843      	ldr	r0, [pc, #268]	; (8001b18 <SysTick_Handler+0x588>)
 8001a0c:	f00c f885 	bl	800db1a <SPI_ETH_REG>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a16:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8253 	beq.w	8001ec8 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	4a45      	ldr	r2, [pc, #276]	; (8001b3c <SysTick_Handler+0x5ac>)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	483b      	ldr	r0, [pc, #236]	; (8001b18 <SysTick_Handler+0x588>)
 8001a2c:	f00c fb0c 	bl	800e048 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <SysTick_Handler+0x5ac>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001a3a:	4837      	ldr	r0, [pc, #220]	; (8001b18 <SysTick_Handler+0x588>)
 8001a3c:	f00c f8e5 	bl	800dc0a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	2100      	movs	r1, #0
 8001a44:	4834      	ldr	r0, [pc, #208]	; (8001b18 <SysTick_Handler+0x588>)
 8001a46:	f00c f993 	bl	800dd70 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a4a:	bf00      	nop
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4832      	ldr	r0, [pc, #200]	; (8001b18 <SysTick_Handler+0x588>)
 8001a50:	f00c fadd 	bl	800e00e <eth_rd_SOCKET_CMD>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f8      	bne.n	8001a4c <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2300      	movs	r3, #0
 8001a66:	4936      	ldr	r1, [pc, #216]	; (8001b40 <SysTick_Handler+0x5b0>)
 8001a68:	4836      	ldr	r0, [pc, #216]	; (8001b44 <SysTick_Handler+0x5b4>)
 8001a6a:	f00d f84f 	bl	800eb0c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <SysTick_Handler+0x5b8>)
 8001a76:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <SysTick_Handler+0x5a8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <SysTick_Handler+0x4f8>
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <SysTick_Handler+0x588>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <SysTick_Handler+0x5b8>)
 8001a8a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a8e:	4619      	mov	r1, r3
 8001a90:	482c      	ldr	r0, [pc, #176]	; (8001b44 <SysTick_Handler+0x5b4>)
 8001a92:	f00a fd2f 	bl	800c4f4 <ModBUS_Check>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a9c:	482a      	ldr	r0, [pc, #168]	; (8001b48 <SysTick_Handler+0x5b8>)
 8001a9e:	f00a fe2b 	bl	800c6f8 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <SysTick_Handler+0x5b8>)
 8001aa4:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2300      	movs	r3, #0
 8001aae:	4927      	ldr	r1, [pc, #156]	; (8001b4c <SysTick_Handler+0x5bc>)
 8001ab0:	4823      	ldr	r0, [pc, #140]	; (8001b40 <SysTick_Handler+0x5b0>)
 8001ab2:	f00d f82b 	bl	800eb0c <CopiaVector>
 8001ab6:	e007      	b.n	8001ac8 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <SysTick_Handler+0x580>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <SysTick_Handler+0x538>
 8001ac0:	2111      	movs	r1, #17
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <SysTick_Handler+0x5c0>)
 8001ac4:	f7ff fd48 	bl	8001558 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <SysTick_Handler+0x5b8>)
 8001aca:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <SysTick_Handler+0x5c4>)
 8001ad2:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <SysTick_Handler+0x5c4>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <SysTick_Handler+0x5c8>)
 8001ada:	2100      	movs	r1, #0
 8001adc:	480e      	ldr	r0, [pc, #56]	; (8001b18 <SysTick_Handler+0x588>)
 8001ade:	f00c fb83 	bl	800e1e8 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <SysTick_Handler+0x5c8>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f240 4124 	movw	r1, #1060	; 0x424
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <SysTick_Handler+0x588>)
 8001aee:	f00c f88c 	bl	800dc0a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001af2:	2220      	movs	r2, #32
 8001af4:	2100      	movs	r1, #0
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <SysTick_Handler+0x588>)
 8001af8:	f00c f93a 	bl	800dd70 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001afc:	bf00      	nop
 8001afe:	2100      	movs	r1, #0
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <SysTick_Handler+0x588>)
 8001b02:	f00c fa84 	bl	800e00e <eth_rd_SOCKET_CMD>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f8      	bne.n	8001afe <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001b0c:	e1dc      	b.n	8001ec8 <SysTick_Handler+0x938>
 8001b0e:	bf00      	nop
 8001b10:	20000021 	.word	0x20000021
 8001b14:	080101f8 	.word	0x080101f8
 8001b18:	20002714 	.word	0x20002714
 8001b1c:	0801020c 	.word	0x0801020c
 8001b20:	08010220 	.word	0x08010220
 8001b24:	08010238 	.word	0x08010238
 8001b28:	0801024c 	.word	0x0801024c
 8001b2c:	08010264 	.word	0x08010264
 8001b30:	0801027c 	.word	0x0801027c
 8001b34:	20003784 	.word	0x20003784
 8001b38:	2000377c 	.word	0x2000377c
 8001b3c:	20003780 	.word	0x20003780
 8001b40:	20002730 	.word	0x20002730
 8001b44:	20001881 	.word	0x20001881
 8001b48:	20001874 	.word	0x20001874
 8001b4c:	20001a08 	.word	0x20001a08
 8001b50:	08010298 	.word	0x08010298
 8001b54:	20003782 	.word	0x20003782
 8001b58:	2000377e 	.word	0x2000377e
						if (mb_eth._w_answer==0)
 8001b5c:	4bac      	ldr	r3, [pc, #688]	; (8001e10 <SysTick_Handler+0x880>)
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d167      	bne.n	8001c34 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b64:	4bab      	ldr	r3, [pc, #684]	; (8001e14 <SysTick_Handler+0x884>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b6a:	4baa      	ldr	r3, [pc, #680]	; (8001e14 <SysTick_Handler+0x884>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b70:	4ba8      	ldr	r3, [pc, #672]	; (8001e14 <SysTick_Handler+0x884>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b76:	4ba7      	ldr	r3, [pc, #668]	; (8001e14 <SysTick_Handler+0x884>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b7c:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <SysTick_Handler+0x884>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001b84:	4ba3      	ldr	r3, [pc, #652]	; (8001e14 <SysTick_Handler+0x884>)
 8001b86:	2206      	movs	r2, #6
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	; (8001e14 <SysTick_Handler+0x884>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001b94:	4b9f      	ldr	r3, [pc, #636]	; (8001e14 <SysTick_Handler+0x884>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001b9c:	4b9d      	ldr	r3, [pc, #628]	; (8001e14 <SysTick_Handler+0x884>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001ba4:	4b9b      	ldr	r3, [pc, #620]	; (8001e14 <SysTick_Handler+0x884>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <SysTick_Handler+0x884>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001bb4:	4b97      	ldr	r3, [pc, #604]	; (8001e14 <SysTick_Handler+0x884>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001bbc:	4b96      	ldr	r3, [pc, #600]	; (8001e18 <SysTick_Handler+0x888>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4892      	ldr	r0, [pc, #584]	; (8001e10 <SysTick_Handler+0x880>)
 8001bc8:	f00a fd3f 	bl	800c64a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	4991      	ldr	r1, [pc, #580]	; (8001e1c <SysTick_Handler+0x88c>)
 8001bd6:	4892      	ldr	r0, [pc, #584]	; (8001e20 <SysTick_Handler+0x890>)
 8001bd8:	f00c ff98 	bl	800eb0c <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bdc:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <SysTick_Handler+0x888>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <SysTick_Handler+0x894>)
 8001be2:	2100      	movs	r1, #0
 8001be4:	488b      	ldr	r0, [pc, #556]	; (8001e14 <SysTick_Handler+0x884>)
 8001be6:	f00c faff 	bl	800e1e8 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bea:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <SysTick_Handler+0x894>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f240 4124 	movw	r1, #1060	; 0x424
 8001bf4:	4887      	ldr	r0, [pc, #540]	; (8001e14 <SysTick_Handler+0x884>)
 8001bf6:	f00c f808 	bl	800dc0a <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4885      	ldr	r0, [pc, #532]	; (8001e14 <SysTick_Handler+0x884>)
 8001c00:	f00c f8b6 	bl	800dd70 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c04:	bf00      	nop
 8001c06:	2100      	movs	r1, #0
 8001c08:	4882      	ldr	r0, [pc, #520]	; (8001e14 <SysTick_Handler+0x884>)
 8001c0a:	f00c fa00 	bl	800e00e <eth_rd_SOCKET_CMD>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f8      	bne.n	8001c06 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <SysTick_Handler+0x880>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <SysTick_Handler+0x898>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c20:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <SysTick_Handler+0x89c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 814f 	beq.w	8001ec8 <SysTick_Handler+0x938>
 8001c2a:	2117      	movs	r1, #23
 8001c2c:	4880      	ldr	r0, [pc, #512]	; (8001e30 <SysTick_Handler+0x8a0>)
 8001c2e:	f7ff fc93 	bl	8001558 <ITM0_Write>
			 break;
 8001c32:	e149      	b.n	8001ec8 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001c34:	2302      	movs	r3, #2
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <SysTick_Handler+0x8a4>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	2226      	movs	r2, #38	; 0x26
 8001c40:	2104      	movs	r1, #4
 8001c42:	4874      	ldr	r0, [pc, #464]	; (8001e14 <SysTick_Handler+0x884>)
 8001c44:	f00b ff69 	bl	800db1a <SPI_ETH_REG>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001c4e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8137 	beq.w	8001ec8 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c5a:	4b77      	ldr	r3, [pc, #476]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	4a77      	ldr	r2, [pc, #476]	; (8001e3c <SysTick_Handler+0x8ac>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	486c      	ldr	r0, [pc, #432]	; (8001e14 <SysTick_Handler+0x884>)
 8001c64:	f00c f9f0 	bl	800e048 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c68:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <SysTick_Handler+0x8ac>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c72:	4868      	ldr	r0, [pc, #416]	; (8001e14 <SysTick_Handler+0x884>)
 8001c74:	f00b ffc9 	bl	800dc0a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4865      	ldr	r0, [pc, #404]	; (8001e14 <SysTick_Handler+0x884>)
 8001c7e:	f00c f877 	bl	800dd70 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c82:	bf00      	nop
 8001c84:	2100      	movs	r1, #0
 8001c86:	4863      	ldr	r0, [pc, #396]	; (8001e14 <SysTick_Handler+0x884>)
 8001c88:	f00c f9c1 	bl	800e00e <eth_rd_SOCKET_CMD>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f8      	bne.n	8001c84 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001c92:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4960      	ldr	r1, [pc, #384]	; (8001e20 <SysTick_Handler+0x890>)
 8001ca0:	4867      	ldr	r0, [pc, #412]	; (8001e40 <SysTick_Handler+0x8b0>)
 8001ca2:	f00c ff33 	bl	800eb0c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <SysTick_Handler+0x880>)
 8001cae:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <SysTick_Handler+0x8a8>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <SysTick_Handler+0x730>
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <SysTick_Handler+0x884>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <SysTick_Handler+0x880>)
 8001cc2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	485d      	ldr	r0, [pc, #372]	; (8001e40 <SysTick_Handler+0x8b0>)
 8001cca:	f00a fc13 	bl	800c4f4 <ModBUS_Check>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d024      	beq.n	8001d1e <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <SysTick_Handler+0x880>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <SysTick_Handler+0x898>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ce0:	484b      	ldr	r0, [pc, #300]	; (8001e10 <SysTick_Handler+0x880>)
 8001ce2:	f00a fd09 	bl	800c6f8 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <SysTick_Handler+0x880>)
 8001ce8:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4953      	ldr	r1, [pc, #332]	; (8001e40 <SysTick_Handler+0x8b0>)
 8001cf4:	4853      	ldr	r0, [pc, #332]	; (8001e44 <SysTick_Handler+0x8b4>)
 8001cf6:	f00c ff09 	bl	800eb0c <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	4951      	ldr	r1, [pc, #324]	; (8001e48 <SysTick_Handler+0x8b8>)
 8001d04:	4851      	ldr	r0, [pc, #324]	; (8001e4c <SysTick_Handler+0x8bc>)
 8001d06:	f00c ff01 	bl	800eb0c <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <SysTick_Handler+0x89c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80da 	beq.w	8001ec8 <SysTick_Handler+0x938>
 8001d14:	2117      	movs	r1, #23
 8001d16:	484e      	ldr	r0, [pc, #312]	; (8001e50 <SysTick_Handler+0x8c0>)
 8001d18:	f7ff fc1e 	bl	8001558 <ITM0_Write>
			 break;
 8001d1c:	e0d4      	b.n	8001ec8 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <SysTick_Handler+0x89c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80d0 	beq.w	8001ec8 <SysTick_Handler+0x938>
 8001d28:	2111      	movs	r1, #17
 8001d2a:	484a      	ldr	r0, [pc, #296]	; (8001e54 <SysTick_Handler+0x8c4>)
 8001d2c:	f7ff fc14 	bl	8001558 <ITM0_Write>
			 break;
 8001d30:	e0ca      	b.n	8001ec8 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <SysTick_Handler+0x89c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <SysTick_Handler+0x7b2>
 8001d3a:	2115      	movs	r1, #21
 8001d3c:	4846      	ldr	r0, [pc, #280]	; (8001e58 <SysTick_Handler+0x8c8>)
 8001d3e:	f7ff fc0b 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <SysTick_Handler+0x884>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d48:	e0bf      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <SysTick_Handler+0x89c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <SysTick_Handler+0x7ca>
 8001d52:	2114      	movs	r1, #20
 8001d54:	4841      	ldr	r0, [pc, #260]	; (8001e5c <SysTick_Handler+0x8cc>)
 8001d56:	f7ff fbff 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <SysTick_Handler+0x884>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d60:	e0b3      	b.n	8001eca <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d62:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <SysTick_Handler+0x89c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <SysTick_Handler+0x7e2>
 8001d6a:	2116      	movs	r1, #22
 8001d6c:	483c      	ldr	r0, [pc, #240]	; (8001e60 <SysTick_Handler+0x8d0>)
 8001d6e:	f7ff fbf3 	bl	8001558 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d72:	2208      	movs	r2, #8
 8001d74:	2100      	movs	r1, #0
 8001d76:	4827      	ldr	r0, [pc, #156]	; (8001e14 <SysTick_Handler+0x884>)
 8001d78:	f00b fffa 	bl	800dd70 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d7c:	bf00      	nop
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <SysTick_Handler+0x8a4>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	230f      	movs	r3, #15
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	4821      	ldr	r0, [pc, #132]	; (8001e14 <SysTick_Handler+0x884>)
 8001d8e:	f00b fec4 	bl	800db1a <SPI_ETH_REG>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SysTick_Handler+0x884>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d9e:	e094      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <SysTick_Handler+0x89c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <SysTick_Handler+0x820>
 8001da8:	2117      	movs	r1, #23
 8001daa:	482e      	ldr	r0, [pc, #184]	; (8001e64 <SysTick_Handler+0x8d4>)
 8001dac:	f7ff fbd4 	bl	8001558 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001db0:	2208      	movs	r2, #8
 8001db2:	2100      	movs	r1, #0
 8001db4:	4817      	ldr	r0, [pc, #92]	; (8001e14 <SysTick_Handler+0x884>)
 8001db6:	f00b ffdb 	bl	800dd70 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001dba:	bf00      	nop
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <SysTick_Handler+0x8a4>)
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4812      	ldr	r0, [pc, #72]	; (8001e14 <SysTick_Handler+0x884>)
 8001dcc:	f00b fea5 	bl	800db1a <SPI_ETH_REG>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f2      	bne.n	8001dbc <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <SysTick_Handler+0x884>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ddc:	e075      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <SysTick_Handler+0x89c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <SysTick_Handler+0x85e>
 8001de6:	2115      	movs	r1, #21
 8001de8:	481f      	ldr	r0, [pc, #124]	; (8001e68 <SysTick_Handler+0x8d8>)
 8001dea:	f7ff fbb5 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <SysTick_Handler+0x884>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001df4:	e069      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <SysTick_Handler+0x89c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <SysTick_Handler+0x876>
 8001dfe:	2110      	movs	r1, #16
 8001e00:	481a      	ldr	r0, [pc, #104]	; (8001e6c <SysTick_Handler+0x8dc>)
 8001e02:	f7ff fba9 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <SysTick_Handler+0x884>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e0c:	e05d      	b.n	8001eca <SysTick_Handler+0x93a>
 8001e0e:	bf00      	nop
 8001e10:	20001874 	.word	0x20001874
 8001e14:	20002714 	.word	0x20002714
 8001e18:	20003782 	.word	0x20003782
 8001e1c:	20001a08 	.word	0x20001a08
 8001e20:	20002730 	.word	0x20002730
 8001e24:	2000377e 	.word	0x2000377e
 8001e28:	20003df8 	.word	0x20003df8
 8001e2c:	20000021 	.word	0x20000021
 8001e30:	080102a8 	.word	0x080102a8
 8001e34:	20003784 	.word	0x20003784
 8001e38:	2000377c 	.word	0x2000377c
 8001e3c:	20003780 	.word	0x20003780
 8001e40:	20001881 	.word	0x20001881
 8001e44:	20002f30 	.word	0x20002f30
 8001e48:	20001b94 	.word	0x20001b94
 8001e4c:	200020e0 	.word	0x200020e0
 8001e50:	080102bc 	.word	0x080102bc
 8001e54:	08010298 	.word	0x08010298
 8001e58:	080102d0 	.word	0x080102d0
 8001e5c:	080102e8 	.word	0x080102e8
 8001e60:	08010300 	.word	0x08010300
 8001e64:	08010318 	.word	0x08010318
 8001e68:	08010330 	.word	0x08010330
 8001e6c:	08010348 	.word	0x08010348
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e70:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <SysTick_Handler+0xa6c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <SysTick_Handler+0x8f0>
 8001e78:	2112      	movs	r1, #18
 8001e7a:	4861      	ldr	r0, [pc, #388]	; (8002000 <SysTick_Handler+0xa70>)
 8001e7c:	f7ff fb6c 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <SysTick_Handler+0xa74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e86:	e020      	b.n	8001eca <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001e88:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <SysTick_Handler+0xa6c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <SysTick_Handler+0x908>
 8001e90:	2113      	movs	r1, #19
 8001e92:	485d      	ldr	r0, [pc, #372]	; (8002008 <SysTick_Handler+0xa78>)
 8001e94:	f7ff fb60 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e98:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <SysTick_Handler+0xa74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e9e:	e014      	b.n	8001eca <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001ea0:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <SysTick_Handler+0xa6c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <SysTick_Handler+0x920>
 8001ea8:	2111      	movs	r1, #17
 8001eaa:	4858      	ldr	r0, [pc, #352]	; (800200c <SysTick_Handler+0xa7c>)
 8001eac:	f7ff fb54 	bl	8001558 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001eb0:	4b54      	ldr	r3, [pc, #336]	; (8002004 <SysTick_Handler+0xa74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001eb6:	e008      	b.n	8001eca <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001eb8:	4852      	ldr	r0, [pc, #328]	; (8002004 <SysTick_Handler+0xa74>)
 8001eba:	f00b fe07 	bl	800dacc <SPI_ETH>
 8001ebe:	e004      	b.n	8001eca <SysTick_Handler+0x93a>
			 default:
 8001ec0:	bf00      	nop
 8001ec2:	e002      	b.n	8001eca <SysTick_Handler+0x93a>
			 break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <SysTick_Handler+0x93a>
			 break;
 8001ec8:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <SysTick_Handler+0xa80>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d102      	bne.n	8001ed8 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <SysTick_Handler+0xa80>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001ed8:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <SysTick_Handler+0xa84>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d104      	bne.n	8001eea <SysTick_Handler+0x95a>
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <SysTick_Handler+0xa88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <SysTick_Handler+0xa88>)
 8001ee8:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001eea:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <SysTick_Handler+0xa88>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	dd0f      	ble.n	8001f12 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <SysTick_Handler+0xa88>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ef8:	4b48      	ldr	r3, [pc, #288]	; (800201c <SysTick_Handler+0xa8c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <SysTick_Handler+0xa84>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <SysTick_Handler+0xa90>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a46      	ldr	r2, [pc, #280]	; (8002024 <SysTick_Handler+0xa94>)
 8001f0a:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001f0c:	4b44      	ldr	r3, [pc, #272]	; (8002020 <SysTick_Handler+0xa90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f12:	f000 fe4b 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <SysTick_Handler+0xa98>)
 8001f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d105      	bne.n	8001f2c <SysTick_Handler+0x99c>
	{
		ticks++;
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <SysTick_Handler+0xa9c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a41      	ldr	r2, [pc, #260]	; (800202c <SysTick_Handler+0xa9c>)
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e002      	b.n	8001f32 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <SysTick_Handler+0xa9c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <SysTick_Handler+0xa98>)
 8001f34:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d158      	bne.n	8001fee <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <SysTick_Handler+0xaa0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d017      	beq.n	8001f74 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <SysTick_Handler+0xa98>)
 8001f46:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d006      	beq.n	8001f5c <SysTick_Handler+0x9cc>
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <SysTick_Handler+0xa98>)
 8001f50:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f54:	3301      	adds	r3, #1
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <SysTick_Handler+0xa98>)
 8001f58:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001f5c:	4b32      	ldr	r3, [pc, #200]	; (8002028 <SysTick_Handler+0xa98>)
 8001f5e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d106      	bne.n	8001f74 <SysTick_Handler+0x9e4>
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <SysTick_Handler+0xa98>)
 8001f68:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <SysTick_Handler+0xa98>)
 8001f70:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <SysTick_Handler+0xa98>)
 8001f76:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d018      	beq.n	8001fb0 <SysTick_Handler+0xa20>
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <SysTick_Handler+0xa98>)
 8001f80:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f84:	f241 527c 	movw	r2, #5500	; 0x157c
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd11      	ble.n	8001fb0 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <SysTick_Handler+0xaa0>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <SysTick_Handler+0xaa4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d107      	bne.n	8001fb0 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <SysTick_Handler+0xaa8>)
 8001fa4:	4823      	ldr	r0, [pc, #140]	; (8002034 <SysTick_Handler+0xaa4>)
 8001fa6:	f003 fbac 	bl	8005702 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <SysTick_Handler+0xaac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <SysTick_Handler+0xa98>)
 8001fb2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d11d      	bne.n	8001ff6 <SysTick_Handler+0xa66>
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <SysTick_Handler+0xa98>)
 8001fbc:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001fc0:	f245 0214 	movw	r2, #20500	; 0x5014
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	dd16      	ble.n	8001ff6 <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <SysTick_Handler+0xaa0>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <SysTick_Handler+0xaa4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f242 020c 	movw	r2, #8204	; 0x200c
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10c      	bne.n	8001ff6 <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4916      	ldr	r1, [pc, #88]	; (8002038 <SysTick_Handler+0xaa8>)
 8001fe0:	4814      	ldr	r0, [pc, #80]	; (8002034 <SysTick_Handler+0xaa4>)
 8001fe2:	f003 fb8e 	bl	8005702 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <SysTick_Handler+0xaac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fec:	e003      	b.n	8001ff6 <SysTick_Handler+0xa66>
		wf._ticks=0;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <SysTick_Handler+0xa98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000021 	.word	0x20000021
 8002000:	0801035c 	.word	0x0801035c
 8002004:	20002714 	.word	0x20002714
 8002008:	08010370 	.word	0x08010370
 800200c:	08010384 	.word	0x08010384
 8002010:	2000031c 	.word	0x2000031c
 8002014:	200037ca 	.word	0x200037ca
 8002018:	20003e08 	.word	0x20003e08
 800201c:	20003e0c 	.word	0x20003e0c
 8002020:	20003e04 	.word	0x20003e04
 8002024:	20003e10 	.word	0x20003e10
 8002028:	20000b28 	.word	0x20000b28
 800202c:	20003dfc 	.word	0x20003dfc
 8002030:	200037cb 	.word	0x200037cb
 8002034:	2000024c 	.word	0x2000024c
 8002038:	20003ddc 	.word	0x20003ddc
 800203c:	200037c8 	.word	0x200037c8

08002040 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <HAL_UART_ErrorCallback+0x98>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11c      	bne.n	800208c <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_UART_ErrorCallback+0x9c>)
 800205c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002060:	3301      	adds	r3, #1
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_UART_ErrorCallback+0x9c>)
 8002064:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f003 fa3c 	bl	80054f6 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800207e:	f7ff f965 	bl	800134c <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002082:	2201      	movs	r2, #1
 8002084:	4916      	ldr	r1, [pc, #88]	; (80020e0 <HAL_UART_ErrorCallback+0xa0>)
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f003 fb3b 	bl	8005702 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_UART_ErrorCallback+0xa4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11c      	bne.n	80020d0 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_UART_ErrorCallback+0x9c>)
 80020a0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_UART_ErrorCallback+0x9c>)
 80020a8:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f003 fa1a 	bl	80054f6 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80020c2:	f7ff f96d 	bl	80013a0 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80020c6:	2201      	movs	r2, #1
 80020c8:	4905      	ldr	r1, [pc, #20]	; (80020e0 <HAL_UART_ErrorCallback+0xa0>)
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f003 fb19 	bl	8005702 <HAL_UART_Receive_IT>
	}
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40011000 	.word	0x40011000
 80020dc:	20000b28 	.word	0x20000b28
 80020e0:	20003ddc 	.word	0x20003ddc
 80020e4:	40004400 	.word	0x40004400

080020e8 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_UART_RxCpltCallback+0xc0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d123      	bne.n	8002142 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_UART_RxCpltCallback+0xc4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_UART_RxCpltCallback+0xc8>)
 8002100:	7811      	ldrb	r1, [r2, #0]
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <HAL_UART_RxCpltCallback+0xcc>)
 8002104:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_UART_RxCpltCallback+0xc4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_UART_RxCpltCallback+0xc4>)
 800210e:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_UART_RxCpltCallback+0xc4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	db03      	blt.n	8002122 <HAL_UART_RxCpltCallback+0x3a>
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_UART_RxCpltCallback+0xc4>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002122:	2100      	movs	r1, #0
 8002124:	4824      	ldr	r0, [pc, #144]	; (80021b8 <HAL_UART_RxCpltCallback+0xd0>)
 8002126:	f002 f9ed 	bl	8004504 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800212a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212e:	2201      	movs	r2, #1
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_UART_RxCpltCallback+0xd4>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002138:	2201      	movs	r2, #1
 800213a:	491d      	ldr	r1, [pc, #116]	; (80021b0 <HAL_UART_RxCpltCallback+0xc8>)
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f003 fae0 	bl	8005702 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_UART_RxCpltCallback+0xd8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d128      	bne.n	800219e <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_UART_RxCpltCallback+0xdc>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_UART_RxCpltCallback+0xe0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2d1      	uxtb	r1, r2
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_UART_RxCpltCallback+0xe4>)
 8002158:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_UART_RxCpltCallback+0xe0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_UART_RxCpltCallback+0xe0>)
 8002162:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_UART_RxCpltCallback+0xe0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216c:	db03      	blt.n	8002176 <HAL_UART_RxCpltCallback+0x8e>
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_UART_RxCpltCallback+0xe0>)
 8002170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002174:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	2102      	movs	r1, #2
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <HAL_UART_RxCpltCallback+0xe8>)
 800217c:	f001 f998 	bl	80034b0 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002180:	2100      	movs	r1, #0
 8002182:	4814      	ldr	r0, [pc, #80]	; (80021d4 <HAL_UART_RxCpltCallback+0xec>)
 8002184:	f002 f9be 	bl	8004504 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_UART_RxCpltCallback+0xf0>)
 800218a:	2201      	movs	r2, #1
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_UART_RxCpltCallback+0xf4>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002194:	2201      	movs	r2, #1
 8002196:	490b      	ldr	r1, [pc, #44]	; (80021c4 <HAL_UART_RxCpltCallback+0xdc>)
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f003 fab2 	bl	8005702 <HAL_UART_Receive_IT>
		 }
 }
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	20003e14 	.word	0x20003e14
 80021b0:	20003ddc 	.word	0x20003ddc
 80021b4:	200037d8 	.word	0x200037d8
 80021b8:	200001bc 	.word	0x200001bc
 80021bc:	200037c8 	.word	0x200037c8
 80021c0:	40004400 	.word	0x40004400
 80021c4:	20003de0 	.word	0x20003de0
 80021c8:	20003e18 	.word	0x20003e18
 80021cc:	200039d8 	.word	0x200039d8
 80021d0:	40020000 	.word	0x40020000
 80021d4:	20000204 	.word	0x20000204
 80021d8:	40000400 	.word	0x40000400
 80021dc:	200037c9 	.word	0x200037c9

080021e0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f0:	d12d      	bne.n	800224e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80021f2:	2100      	movs	r1, #0
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f002 fa83 	bl	8004700 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a38      	ldr	r2, [pc, #224]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800220c:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	4932      	ldr	r1, [pc, #200]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002228:	4833      	ldr	r0, [pc, #204]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800222a:	f00c fc6f 	bl	800eb0c <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800222e:	2201      	movs	r2, #1
 8002230:	4932      	ldr	r1, [pc, #200]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8002232:	4833      	ldr	r0, [pc, #204]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002234:	f003 fa65 	bl	8005702 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800223a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	482b      	ldr	r0, [pc, #172]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800224a:	f7ff f985 	bl	8001558 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d13f      	bne.n	80022d8 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002258:	2100      	movs	r1, #0
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f002 fa50 	bl	8004700 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2102      	movs	r1, #2
 8002264:	4829      	ldr	r0, [pc, #164]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8002266:	f001 f923 	bl	80034b0 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800227c:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2301      	movs	r3, #1
 8002296:	4922      	ldr	r1, [pc, #136]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002298:	4822      	ldr	r0, [pc, #136]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800229a:	f00c fc37 	bl	800eb0c <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80022a4:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80022a8:	2201      	movs	r2, #1
 80022aa:	4920      	ldr	r1, [pc, #128]	; (800232c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80022ac:	4820      	ldr	r0, [pc, #128]	; (8002330 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80022ae:	f003 fa28 	bl	8005702 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80022b4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10d      	bne.n	80022d8 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80022bc:	2117      	movs	r1, #23
 80022be:	481d      	ldr	r0, [pc, #116]	; (8002334 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80022c0:	f7ff f94a 	bl	8001558 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4815      	ldr	r0, [pc, #84]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022cc:	f7ff f944 	bl	8001558 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80022d0:	2102      	movs	r1, #2
 80022d2:	4819      	ldr	r0, [pc, #100]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80022d4:	f7ff f940 	bl	8001558 <ITM0_Write>
				 }
		}
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200037cc 	.word	0x200037cc
 80022e4:	200037c8 	.word	0x200037c8
 80022e8:	20003e14 	.word	0x20003e14
 80022ec:	20003de8 	.word	0x20003de8
 80022f0:	200037d8 	.word	0x200037d8
 80022f4:	20003dd8 	.word	0x20003dd8
 80022f8:	20003bd8 	.word	0x20003bd8
 80022fc:	20003ddc 	.word	0x20003ddc
 8002300:	2000024c 	.word	0x2000024c
 8002304:	20000b28 	.word	0x20000b28
 8002308:	40000400 	.word	0x40000400
 800230c:	40020000 	.word	0x40020000
 8002310:	200037cd 	.word	0x200037cd
 8002314:	200037c9 	.word	0x200037c9
 8002318:	20003e18 	.word	0x20003e18
 800231c:	20003dec 	.word	0x20003dec
 8002320:	200039d8 	.word	0x200039d8
 8002324:	20000376 	.word	0x20000376
 8002328:	20000320 	.word	0x20000320
 800232c:	20003de0 	.word	0x20003de0
 8002330:	20000290 	.word	0x20000290
 8002334:	08010398 	.word	0x08010398
 8002338:	080103b0 	.word	0x080103b0

0800233c <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <ESP8266_HW_Reset+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <ESP8266_HW_Reset+0x44>)
 800234e:	f001 f8af 	bl	80034b0 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002352:	2115      	movs	r1, #21
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <ESP8266_HW_Reset+0x48>)
 8002356:	f7ff f8ff 	bl	8001558 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800235a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800235e:	f000 fc45 	bl	8002bec <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002362:	210f      	movs	r1, #15
 8002364:	4808      	ldr	r0, [pc, #32]	; (8002388 <ESP8266_HW_Reset+0x4c>)
 8002366:	f7ff f8f7 	bl	8001558 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <ESP8266_HW_Reset+0x44>)
 8002372:	f001 f89d 	bl	80034b0 <HAL_GPIO_WritePin>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200037c5 	.word	0x200037c5
 8002380:	40020000 	.word	0x40020000
 8002384:	080101c4 	.word	0x080101c4
 8002388:	080103b4 	.word	0x080103b4

0800238c <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af06      	add	r7, sp, #24
 8002392:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	220c      	movs	r2, #12
 8002398:	4943      	ldr	r1, [pc, #268]	; (80024a8 <ESP8266_HW_Init+0x11c>)
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f003 f8da 	bl	8005554 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023a4:	f000 fc22 	bl	8002bec <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <ESP8266_HW_Init+0x120>)
 80023aa:	2205      	movs	r2, #5
 80023ac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <ESP8266_HW_Init+0x124>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <ESP8266_HW_Init+0x120>)
 80023b6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023ba:	e00e      	b.n	80023da <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <ESP8266_HW_Init+0x124>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <ESP8266_HW_Init+0x120>)
 80023c2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <ESP8266_HW_Init+0x128>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dd03      	ble.n	80023da <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <ESP8266_HW_Init+0x12c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023d8:	e012      	b.n	8002400 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023da:	2300      	movs	r3, #0
 80023dc:	9304      	str	r3, [sp, #16]
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <ESP8266_HW_Init+0x130>)
 80023e0:	9303      	str	r3, [sp, #12]
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <ESP8266_HW_Init+0x134>)
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <ESP8266_HW_Init+0x138>)
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <ESP8266_HW_Init+0x13c>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <ESP8266_HW_Init+0x140>)
 80023f0:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <ESP8266_HW_Init+0x144>)
 80023f2:	4938      	ldr	r1, [pc, #224]	; (80024d4 <ESP8266_HW_Init+0x148>)
 80023f4:	4838      	ldr	r0, [pc, #224]	; (80024d8 <ESP8266_HW_Init+0x14c>)
 80023f6:	f00b ffdb 	bl	800e3b0 <FT_String_ND>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d1dd      	bne.n	80023bc <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <ESP8266_HW_Init+0x12c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d129      	bne.n	800245c <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <ESP8266_HW_Init+0x120>)
 800240a:	2205      	movs	r2, #5
 800240c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <ESP8266_HW_Init+0x124>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <ESP8266_HW_Init+0x120>)
 8002416:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800241a:	e00a      	b.n	8002432 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <ESP8266_HW_Init+0x124>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <ESP8266_HW_Init+0x120>)
 8002422:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <ESP8266_HW_Init+0x128>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f241 3287 	movw	r2, #4999	; 0x1387
 800242e:	4293      	cmp	r3, r2
 8002430:	dc13      	bgt.n	800245a <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002432:	2300      	movs	r3, #0
 8002434:	9304      	str	r3, [sp, #16]
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <ESP8266_HW_Init+0x130>)
 8002438:	9303      	str	r3, [sp, #12]
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <ESP8266_HW_Init+0x134>)
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <ESP8266_HW_Init+0x138>)
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <ESP8266_HW_Init+0x13c>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <ESP8266_HW_Init+0x140>)
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <ESP8266_HW_Init+0x144>)
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <ESP8266_HW_Init+0x148>)
 800244c:	4822      	ldr	r0, [pc, #136]	; (80024d8 <ESP8266_HW_Init+0x14c>)
 800244e:	f00b ffaf 	bl	800e3b0 <FT_String_ND>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d1e1      	bne.n	800241c <ESP8266_HW_Init+0x90>
 8002458:	e000      	b.n	800245c <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800245a:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <ESP8266_HW_Init+0x128>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f241 3287 	movw	r2, #4999	; 0x1387
 8002464:	4293      	cmp	r3, r2
 8002466:	dc06      	bgt.n	8002476 <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <ESP8266_HW_Init+0x150>)
 800246a:	220a      	movs	r2, #10
 800246c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <ESP8266_HW_Init+0x128>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e008      	b.n	8002488 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <ESP8266_HW_Init+0x150>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <ESP8266_HW_Init+0x150>)
 8002480:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <ESP8266_HW_Init+0x128>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <ESP8266_HW_Init+0x150>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d981      	bls.n	8002394 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <ESP8266_HW_Init+0x150>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b0a      	cmp	r3, #10
 8002496:	d101      	bne.n	800249c <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 800249c:	2300      	movs	r3, #0
	  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	080103c4 	.word	0x080103c4
 80024ac:	20000b28 	.word	0x20000b28
 80024b0:	20003de8 	.word	0x20003de8
 80024b4:	20003df0 	.word	0x20003df0
 80024b8:	200037c6 	.word	0x200037c6
 80024bc:	200015bc 	.word	0x200015bc
 80024c0:	20003e00 	.word	0x20003e00
 80024c4:	20001808 	.word	0x20001808
 80024c8:	200013bc 	.word	0x200013bc
 80024cc:	20001814 	.word	0x20001814
 80024d0:	080103d4 	.word	0x080103d4
 80024d4:	20001800 	.word	0x20001800
 80024d8:	20003bd8 	.word	0x20003bd8
 80024dc:	200037c5 	.word	0x200037c5

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <Error_Handler+0x8>
	...

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_SPI_MspInit+0x84>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12b      	bne.n	80025b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_SPI_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002596:	23e0      	movs	r3, #224	; 0xe0
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a6:	2305      	movs	r3, #5
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <HAL_SPI_MspInit+0x8c>)
 80025b2:	f000 fd15 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	; 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40013000 	.word	0x40013000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d116      	bne.n	800260c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	201c      	movs	r0, #28
 8002600:	f000 fc17 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002604:	201c      	movs	r0, #28
 8002606:	f000 fc30 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800260a:	e01a      	b.n	8002642 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_TIM_Base_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d115      	bne.n	8002642 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_TIM_Base_MspInit+0x80>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201d      	movs	r0, #29
 8002638:	f000 fbfb 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263c:	201d      	movs	r0, #29
 800263e:	f000 fc14 	bl	8002e6a <HAL_NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40000400 	.word	0x40000400

08002654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08e      	sub	sp, #56	; 0x38
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_UART_MspInit+0x170>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d135      	bne.n	80026e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a4b      	ldr	r2, [pc, #300]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_UART_MspInit+0x174>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c0:	2307      	movs	r3, #7
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	4619      	mov	r1, r3
 80026ca:	4840      	ldr	r0, [pc, #256]	; (80027cc <HAL_UART_MspInit+0x178>)
 80026cc:	f000 fc88 	bl	8002fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2025      	movs	r0, #37	; 0x25
 80026d6:	f000 fbac 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026da:	2025      	movs	r0, #37	; 0x25
 80026dc:	f000 fbc5 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026e0:	e06b      	b.n	80027ba <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_UART_MspInit+0x17c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d134      	bne.n	8002756 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_UART_MspInit+0x174>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_UART_MspInit+0x174>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_UART_MspInit+0x174>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6313      	str	r3, [r2, #48]	; 0x30
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002724:	230c      	movs	r3, #12
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002734:	2307      	movs	r3, #7
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	4823      	ldr	r0, [pc, #140]	; (80027cc <HAL_UART_MspInit+0x178>)
 8002740:	f000 fc4e 	bl	8002fe0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	2026      	movs	r0, #38	; 0x26
 800274a:	f000 fb72 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800274e:	2026      	movs	r0, #38	; 0x26
 8002750:	f000 fb8b 	bl	8002e6a <HAL_NVIC_EnableIRQ>
}
 8002754:	e031      	b.n	80027ba <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <HAL_UART_MspInit+0x180>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12c      	bne.n	80027ba <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	6453      	str	r3, [r2, #68]	; 0x44
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_UART_MspInit+0x174>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_UART_MspInit+0x174>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002798:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027aa:	2308      	movs	r3, #8
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b2:	4619      	mov	r1, r3
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_UART_MspInit+0x178>)
 80027b6:	f000 fc13 	bl	8002fe0 <HAL_GPIO_Init>
}
 80027ba:	bf00      	nop
 80027bc:	3738      	adds	r7, #56	; 0x38
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40011000 	.word	0x40011000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40004400 	.word	0x40004400
 80027d4:	40011400 	.word	0x40011400

080027d8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_UART_MspDeInit+0x80>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10e      	bne.n	8002808 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_UART_MspDeInit+0x84>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_UART_MspDeInit+0x84>)
 80027f0:	f023 0310 	bic.w	r3, r3, #16
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80027f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027fa:	4819      	ldr	r0, [pc, #100]	; (8002860 <HAL_UART_MspDeInit+0x88>)
 80027fc:	f000 fd74 	bl	80032e8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002800:	2025      	movs	r0, #37	; 0x25
 8002802:	f000 fb40 	bl	8002e86 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8002806:	e022      	b.n	800284e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <HAL_UART_MspDeInit+0x8c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_UART_MspDeInit+0x84>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_UART_MspDeInit+0x84>)
 8002818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800281e:	210c      	movs	r1, #12
 8002820:	480f      	ldr	r0, [pc, #60]	; (8002860 <HAL_UART_MspDeInit+0x88>)
 8002822:	f000 fd61 	bl	80032e8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002826:	2026      	movs	r0, #38	; 0x26
 8002828:	f000 fb2d 	bl	8002e86 <HAL_NVIC_DisableIRQ>
}
 800282c:	e00f      	b.n	800284e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_UART_MspDeInit+0x90>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10a      	bne.n	800284e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_UART_MspDeInit+0x84>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_UART_MspDeInit+0x84>)
 800283e:	f023 0320 	bic.w	r3, r3, #32
 8002842:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002844:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_UART_MspDeInit+0x88>)
 800284a:	f000 fd4d 	bl	80032e8 <HAL_GPIO_DeInit>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40011000 	.word	0x40011000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000
 8002864:	40004400 	.word	0x40004400
 8002868:	40011400 	.word	0x40011400

0800286c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <NMI_Handler+0x4>

08002872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <HardFault_Handler+0x4>

08002878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <MemManage_Handler+0x4>

0800287e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <UsageFault_Handler+0x4>

0800288a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIM2_IRQHandler+0x10>)
 80028ba:	f002 f82d 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200001bc 	.word	0x200001bc

080028c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM3_IRQHandler+0x10>)
 80028ce:	f002 f823 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000204 	.word	0x20000204

080028dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <USART1_IRQHandler+0x10>)
 80028e2:	f002 ff3f 	bl	8005764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000024c 	.word	0x2000024c

080028f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <USART2_IRQHandler+0x10>)
 80028f6:	f002 ff35 	bl	8005764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000290 	.word	0x20000290

08002904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_kill>:

int _kill(int pid, int sig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800291e:	f00c fbfd 	bl	800f11c <__errno>
 8002922:	4603      	mov	r3, r0
 8002924:	2216      	movs	r2, #22
 8002926:	601a      	str	r2, [r3, #0]
	return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_exit>:

void _exit (int status)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ffe7 	bl	8002914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002946:	e7fe      	b.n	8002946 <_exit+0x12>

08002948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800295a:	f3af 8000 	nop.w
 800295e:	4601      	mov	r1, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	60ba      	str	r2, [r7, #8]
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf0      	blt.n	800295a <_read+0x12>
	}

return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e009      	b.n	80029a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf1      	blt.n	8002994 <_write+0x12>
	}
	return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e2:	605a      	str	r2, [r3, #4]
	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_isatty>:

int _isatty(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	return 1;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <_sbrk+0x5c>)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <_sbrk+0x60>)
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <_sbrk+0x64>)
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <_sbrk+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a54:	f00c fb62 	bl	800f11c <__errno>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e009      	b.n	8002a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <_sbrk+0x64>)
 8002a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20020000 	.word	0x20020000
 8002a84:	00000400 	.word	0x00000400
 8002a88:	20003e20 	.word	0x20003e20
 8002a8c:	20003f78 	.word	0x20003f78

08002a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ad0:	4c0b      	ldr	r4, [pc, #44]	; (8002b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ade:	f7ff ffd7 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f00c fb21 	bl	800f128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7fd fdd5 	bl	8000694 <main>
  bx  lr    
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002af8:	08010c50 	.word	0x08010c50
  ldr r2, =_sbss
 8002afc:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002b00:	20003f74 	.word	0x20003f74

08002b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_Init+0x40>)
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_Init+0x40>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_Init+0x40>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f973 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f000 f808 	bl	8002b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7ff fcd6 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_InitTick+0x54>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_InitTick+0x58>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f999 	bl	8002ea2 <HAL_SYSTICK_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d80a      	bhi.n	8002b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b80:	2200      	movs	r2, #0
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f000 f953 	bl	8002e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b8c:	4a06      	ldr	r2, [pc, #24]	; (8002ba8 <HAL_InitTick+0x5c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000084 	.word	0x20000084
 8002ba4:	2000008c 	.word	0x2000008c
 8002ba8:	20000088 	.word	0x20000088

08002bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	2000008c 	.word	0x2000008c
 8002bd0:	20003e24 	.word	0x20003e24

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20003e24 	.word	0x20003e24

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000008c 	.word	0x2000008c

08002c34 <__NVIC_SetPriorityGrouping>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_DisableIRQ>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db12      	blt.n	8002d0c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	490a      	ldr	r1, [pc, #40]	; (8002d18 <__NVIC_DisableIRQ+0x44>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	3320      	adds	r3, #32
 8002cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d00:	f3bf 8f4f 	dsb	sy
}
 8002d04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d06:	f3bf 8f6f 	isb	sy
}
 8002d0a:	bf00      	nop
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <SysTick_Config>:
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d301      	bcc.n	8002dee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <SysTick_Config+0x40>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df6:	210f      	movs	r1, #15
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7ff ff8e 	bl	8002d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SysTick_Config+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SysTick_Config+0x40>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff05 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff1a 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff8e 	bl	8002d70 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5d 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff0d 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff1d 	bl	8002cd4 <__NVIC_DisableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff94 	bl	8002dd8 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff fe84 	bl	8002bd4 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d008      	beq.n	8002eec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e052      	b.n	8002f92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0216 	bic.w	r2, r2, #22
 8002efa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_DMA_Abort+0x62>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3c:	e013      	b.n	8002f66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3e:	f7ff fe49 	bl	8002bd4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d90c      	bls.n	8002f66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2203      	movs	r2, #3
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e015      	b.n	8002f92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e4      	bne.n	8002f3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	223f      	movs	r2, #63	; 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e00c      	b.n	8002fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e159      	b.n	80032b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8148 	bne.w	80032aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d005      	beq.n	8003032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	2b02      	cmp	r3, #2
 8003030:	d130      	bne.n	8003094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 0201 	and.w	r2, r3, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d017      	beq.n	80030d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d123      	bne.n	8003124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a2 	beq.w	80032aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <HAL_GPIO_Init+0x2e8>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a56      	ldr	r2, [pc, #344]	; (80032c8 <HAL_GPIO_Init+0x2e8>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <HAL_GPIO_Init+0x2e8>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_Init+0x2ec>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a49      	ldr	r2, [pc, #292]	; (80032d0 <HAL_GPIO_Init+0x2f0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_Init+0x202>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a48      	ldr	r2, [pc, #288]	; (80032d4 <HAL_GPIO_Init+0x2f4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_Init+0x1fe>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a47      	ldr	r2, [pc, #284]	; (80032d8 <HAL_GPIO_Init+0x2f8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00d      	beq.n	80031da <HAL_GPIO_Init+0x1fa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a46      	ldr	r2, [pc, #280]	; (80032dc <HAL_GPIO_Init+0x2fc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_Init+0x1f6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_GPIO_Init+0x300>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_GPIO_Init+0x1f2>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_Init+0x204>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x204>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_Init+0x204>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_Init+0x204>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x204>
 80031e2:	2300      	movs	r3, #0
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f4:	4935      	ldr	r1, [pc, #212]	; (80032cc <HAL_GPIO_Init+0x2ec>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <HAL_GPIO_Init+0x304>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003226:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <HAL_GPIO_Init+0x304>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_GPIO_Init+0x304>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003250:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_GPIO_Init+0x304>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_GPIO_Init+0x304>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_GPIO_Init+0x304>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_GPIO_Init+0x304>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_GPIO_Init+0x304>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f aea2 	bls.w	8002ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e0bb      	b.n	800347c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003304:	2201      	movs	r2, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	f040 80ab 	bne.w	8003476 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003320:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_GPIO_DeInit+0x1ac>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a54      	ldr	r2, [pc, #336]	; (8003498 <HAL_GPIO_DeInit+0x1b0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_DeInit+0x96>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a53      	ldr	r2, [pc, #332]	; (800349c <HAL_GPIO_DeInit+0x1b4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_DeInit+0x92>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_DeInit+0x8e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_GPIO_DeInit+0x1bc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_DeInit+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_GPIO_DeInit+0x1c0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_DeInit+0x86>
 800336a:	2304      	movs	r3, #4
 800336c:	e008      	b.n	8003380 <HAL_GPIO_DeInit+0x98>
 800336e:	2307      	movs	r3, #7
 8003370:	e006      	b.n	8003380 <HAL_GPIO_DeInit+0x98>
 8003372:	2303      	movs	r3, #3
 8003374:	e004      	b.n	8003380 <HAL_GPIO_DeInit+0x98>
 8003376:	2302      	movs	r3, #2
 8003378:	e002      	b.n	8003380 <HAL_GPIO_DeInit+0x98>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_GPIO_DeInit+0x98>
 800337e:	2300      	movs	r3, #0
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	f002 0203 	and.w	r2, r2, #3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4093      	lsls	r3, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d132      	bne.n	80033f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003390:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	4944      	ldr	r1, [pc, #272]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 800339a:	4013      	ands	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	4941      	ldr	r1, [pc, #260]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	493d      	ldr	r1, [pc, #244]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	493a      	ldr	r1, [pc, #232]	; (80034ac <HAL_GPIO_DeInit+0x1c4>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033d8:	4a2e      	ldr	r2, [pc, #184]	; (8003494 <HAL_GPIO_DeInit+0x1ac>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	43da      	mvns	r2, r3
 80033e8:	482a      	ldr	r0, [pc, #168]	; (8003494 <HAL_GPIO_DeInit+0x1ac>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	400a      	ands	r2, r1
 80033f0:	3302      	adds	r3, #2
 80033f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2103      	movs	r1, #3
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	08d2      	lsrs	r2, r2, #3
 800342c:	4019      	ands	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2103      	movs	r1, #3
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	2101      	movs	r1, #1
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2103      	movs	r1, #3
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	401a      	ands	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b0f      	cmp	r3, #15
 8003480:	f67f af40 	bls.w	8003304 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40013800 	.word	0x40013800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020c00 	.word	0x40020c00
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f4:	887a      	ldrh	r2, [r7, #2]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	041a      	lsls	r2, r3, #16
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43d9      	mvns	r1, r3
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	400b      	ands	r3, r1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e267      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d075      	beq.n	8003622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e242      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x74>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7ff fb00 	bl	8002bd4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7ff fafc 	bl	8002bd4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e207      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xc0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7ff faec 	bl	8002bd4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7ff fae8 	bl	8002bd4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1f3      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0xe8>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c7      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4937      	ldr	r1, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_OscConfig+0x244>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7ff faa1 	bl	8002bd4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7ff fa9d 	bl	8002bd4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a8      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4925      	ldr	r1, [pc, #148]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x244>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7ff fa80 	bl	8002bd4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d8:	f7ff fa7c 	bl	8002bd4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e187      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7ff fa60 	bl	8002bd4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7ff fa5c 	bl	8002bd4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e167      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x200>
 8003736:	e01b      	b.n	8003770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7ff fa49 	bl	8002bd4 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e00e      	b.n	8003764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7ff fa45 	bl	8002bd4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d907      	bls.n	8003764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e150      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
 8003760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ea      	bne.n	8003746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8097 	beq.w	80038ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b7a      	ldr	r3, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b77      	ldr	r3, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b74      	ldr	r3, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7ff fa05 	bl	8002bd4 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7ff fa01 	bl	8002bd4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e10c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x2ea>
 80037f4:	4b64      	ldr	r3, [pc, #400]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a63      	ldr	r2, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x30c>
 800380a:	4b5f      	ldr	r3, [pc, #380]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003824:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7ff f9c6 	bl	8002bd4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7ff f9c2 	bl	8002bd4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0cb      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RCC_OscConfig+0x334>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7ff f9b0 	bl	8002bd4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7ff f9ac 	bl	8002bd4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0b5      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ee      	bne.n	8003878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a1 	beq.w	80039f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d05c      	beq.n	800397c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d141      	bne.n	800394e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7ff f980 	bl	8002bd4 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7ff f97c 	bl	8002bd4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e087      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	491b      	ldr	r1, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7ff f955 	bl	8002bd4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7ff f951 	bl	8002bd4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e05c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x416>
 800394c:	e054      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7ff f93e 	bl	8002bd4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7ff f93a 	bl	8002bd4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e045      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
 800397a:	e03d      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e038      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d028      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d121      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7ff f86c 	bl	8002bd4 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7ff f868 	bl	8002bd4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe ffcc 	bl	8002b4c <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08010a20 	.word	0x08010a20
 8003bcc:	20000084 	.word	0x20000084
 8003bd0:	20000088 	.word	0x20000088

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b090      	sub	sp, #64	; 0x40
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80a1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c0c:	e09b      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c12:	e098      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d028      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	627a      	str	r2, [r7, #36]	; 0x24
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c40:	fb03 f201 	mul.w	r2, r3, r1
 8003c44:	2300      	movs	r3, #0
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c54:	460a      	mov	r2, r1
 8003c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2200      	movs	r2, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c6e:	f7fc fb1f 	bl	80002b0 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4613      	mov	r3, r2
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7a:	e053      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	617a      	str	r2, [r7, #20]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ebb2 080a 	subs.w	r8, r2, sl
 8003cae:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cca:	eb63 0509 	sbc.w	r5, r3, r9
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	00eb      	lsls	r3, r5, #3
 8003cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cdc:	00e2      	lsls	r2, r4, #3
 8003cde:	4614      	mov	r4, r2
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	eb14 030a 	adds.w	r3, r4, sl
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	eb45 030b 	adc.w	r3, r5, fp
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	f7fc faca 	bl	80002b0 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3740      	adds	r7, #64	; 0x40
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	017d7840 	.word	0x017d7840

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000084 	.word	0x20000084

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08010a30 	.word	0x08010a30

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08010a30 	.word	0x08010a30

08003dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07b      	b.n	8003ed2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dea:	d009      	beq.n	8003e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	61da      	str	r2, [r3, #28]
 8003df2:	e005      	b.n	8003e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fb8e 	bl	800253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	ea42 0103 	orr.w	r1, r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0104 	and.w	r1, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f003 0210 	and.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08c      	sub	sp, #48	; 0x30
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x26>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e18a      	b.n	8004216 <HAL_SPI_TransmitReceive+0x33c>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f08:	f7fe fe64 	bl	8002bd4 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d00f      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x70>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f30:	d107      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x68>
 8003f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d003      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
 8003f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f48:	e15b      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x82>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x82>
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f62:	e14e      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d003      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2205      	movs	r2, #5
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	887a      	ldrh	r2, [r7, #2]
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d007      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd4:	d178      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x10a>
 8003fde:	8b7b      	ldrh	r3, [r7, #26]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d166      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	1c9a      	adds	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004008:	e053      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d11b      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x176>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x176>
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d113      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d119      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1b8>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d014      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	b292      	uxth	r2, r2
 8004074:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800408e:	2301      	movs	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004092:	f7fe fd9f 	bl	8002bd4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	429a      	cmp	r2, r3
 80040a0:	d807      	bhi.n	80040b2 <HAL_SPI_TransmitReceive+0x1d8>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d003      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040b0:	e0a7      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1a6      	bne.n	800400a <HAL_SPI_TransmitReceive+0x130>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1a1      	bne.n	800400a <HAL_SPI_TransmitReceive+0x130>
 80040c6:	e07c      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_TransmitReceive+0x1fc>
 80040d0:	8b7b      	ldrh	r3, [r7, #26]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d16b      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fc:	e057      	b.n	80041ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d11c      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x26c>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d017      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x26c>
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d114      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d119      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x2ae>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d014      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004184:	2301      	movs	r3, #1
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004188:	f7fe fd24 	bl	8002bd4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004194:	429a      	cmp	r2, r3
 8004196:	d803      	bhi.n	80041a0 <HAL_SPI_TransmitReceive+0x2c6>
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d102      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x2cc>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041ac:	e029      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1a2      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x224>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d19d      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8b2 	bl	8004330 <SPI_EndRxTxTransaction>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041de:	e010      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	e000      	b.n	8004202 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004200:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004216:	4618      	mov	r0, r3
 8004218:	3730      	adds	r7, #48	; 0x30
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004230:	f7fe fcd0 	bl	8002bd4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004240:	f7fe fcc8 	bl	8002bd4 <HAL_GetTick>
 8004244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	015b      	lsls	r3, r3, #5
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	e054      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d050      	beq.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004260:	f7fe fcb8 	bl	8002bd4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d13d      	bne.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428e:	d111      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d004      	beq.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d107      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d10f      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e017      	b.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d19b      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000084 	.word	0x20000084

08004330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <SPI_EndRxTxTransaction+0x7c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <SPI_EndRxTxTransaction+0x80>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0d5b      	lsrs	r3, r3, #21
 8004348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d112      	bne.n	8004382 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff ff5a 	bl	8004220 <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d0f2      	beq.n	8004382 <SPI_EndRxTxTransaction+0x52>
 800439c:	e000      	b.n	80043a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800439e:	bf00      	nop
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000084 	.word	0x20000084
 80043b0:	165e9f81 	.word	0x165e9f81

080043b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe f8f6 	bl	80025cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 fce4 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e041      	b.n	80044e8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f839 	bl	80044f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f000 fc95 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_TIM_OC_Start_IT+0x28>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e022      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x6e>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d109      	bne.n	8004546 <HAL_TIM_OC_Start_IT+0x42>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	bf14      	ite	ne
 800453e:	2301      	movne	r3, #1
 8004540:	2300      	moveq	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e015      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x6e>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d109      	bne.n	8004560 <HAL_TIM_OC_Start_IT+0x5c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e008      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x6e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0b3      	b.n	80046e2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_TIM_OC_Start_IT+0x86>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	e013      	b.n	80045b2 <HAL_TIM_OC_Start_IT+0xae>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d104      	bne.n	800459a <HAL_TIM_OC_Start_IT+0x96>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004598:	e00b      	b.n	80045b2 <HAL_TIM_OC_Start_IT+0xae>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d104      	bne.n	80045aa <HAL_TIM_OC_Start_IT+0xa6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	e003      	b.n	80045b2 <HAL_TIM_OC_Start_IT+0xae>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	d841      	bhi.n	800463c <HAL_TIM_OC_Start_IT+0x138>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <HAL_TIM_OC_Start_IT+0xbc>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	0800463d 	.word	0x0800463d
 80045c8:	0800463d 	.word	0x0800463d
 80045cc:	0800463d 	.word	0x0800463d
 80045d0:	08004607 	.word	0x08004607
 80045d4:	0800463d 	.word	0x0800463d
 80045d8:	0800463d 	.word	0x0800463d
 80045dc:	0800463d 	.word	0x0800463d
 80045e0:	08004619 	.word	0x08004619
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800462b 	.word	0x0800462b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0202 	orr.w	r2, r2, #2
 8004602:	60da      	str	r2, [r3, #12]
      break;
 8004604:	e01d      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0204 	orr.w	r2, r2, #4
 8004614:	60da      	str	r2, [r3, #12]
      break;
 8004616:	e014      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0208 	orr.w	r2, r2, #8
 8004626:	60da      	str	r2, [r3, #12]
      break;
 8004628:	e00b      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0210 	orr.w	r2, r2, #16
 8004638:	60da      	str	r2, [r3, #12]
      break;
 800463a:	e002      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	bf00      	nop
  }

  if (status == HAL_OK)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d14b      	bne.n	80046e0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2201      	movs	r2, #1
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fe5b 	bl	800530c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a24      	ldr	r2, [pc, #144]	; (80046ec <HAL_TIM_OC_Start_IT+0x1e8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d107      	bne.n	8004670 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <HAL_TIM_OC_Start_IT+0x1e8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_TIM_OC_Start_IT+0x1a8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d013      	beq.n	80046ac <HAL_TIM_OC_Start_IT+0x1a8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_OC_Start_IT+0x1a8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_TIM_OC_Start_IT+0x1a8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_OC_Start_IT+0x1a8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_TIM_OC_Start_IT+0x1f8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40014000 	.word	0x40014000

08004700 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d841      	bhi.n	8004798 <HAL_TIM_OC_Stop_IT+0x98>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004751 	.word	0x08004751
 8004720:	08004799 	.word	0x08004799
 8004724:	08004799 	.word	0x08004799
 8004728:	08004799 	.word	0x08004799
 800472c:	08004763 	.word	0x08004763
 8004730:	08004799 	.word	0x08004799
 8004734:	08004799 	.word	0x08004799
 8004738:	08004799 	.word	0x08004799
 800473c:	08004775 	.word	0x08004775
 8004740:	08004799 	.word	0x08004799
 8004744:	08004799 	.word	0x08004799
 8004748:	08004799 	.word	0x08004799
 800474c:	08004787 	.word	0x08004787
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0202 	bic.w	r2, r2, #2
 800475e:	60da      	str	r2, [r3, #12]
      break;
 8004760:	e01d      	b.n	800479e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0204 	bic.w	r2, r2, #4
 8004770:	60da      	str	r2, [r3, #12]
      break;
 8004772:	e014      	b.n	800479e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0208 	bic.w	r2, r2, #8
 8004782:	60da      	str	r2, [r3, #12]
      break;
 8004784:	e00b      	b.n	800479e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0210 	bic.w	r2, r2, #16
 8004794:	60da      	str	r2, [r3, #12]
      break;
 8004796:	e002      	b.n	800479e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	bf00      	nop
  }

  if (status == HAL_OK)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d157      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fdad 	bl	800530c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <HAL_TIM_OC_Stop_IT+0x160>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d117      	bne.n	80047ec <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <HAL_TIM_OC_Stop_IT+0xec>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	f240 4344 	movw	r3, #1092	; 0x444
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_TIM_OC_Stop_IT+0xec>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_TIM_OC_Stop_IT+0x11c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	f240 4344 	movw	r3, #1092	; 0x444
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_TIM_OC_Stop_IT+0x11c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_TIM_OC_Stop_IT+0x12c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482a:	e013      	b.n	8004854 <HAL_TIM_OC_Stop_IT+0x154>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d104      	bne.n	800483c <HAL_TIM_OC_Stop_IT+0x13c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483a:	e00b      	b.n	8004854 <HAL_TIM_OC_Stop_IT+0x154>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d104      	bne.n	800484c <HAL_TIM_OC_Stop_IT+0x14c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484a:	e003      	b.n	8004854 <HAL_TIM_OC_Stop_IT+0x154>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000

08004864 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e041      	b.n	80048fc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f839 	bl	8004904 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 fa8b 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0202 	mvn.w	r2, #2
 8004944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa11 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd fc3c 	bl	80021e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa14 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0204 	mvn.w	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9e7 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd fc12 	bl	80021e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9ea 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0208 	mvn.w	r2, #8
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2204      	movs	r2, #4
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9bd 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd fbe8 	bl	80021e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f9c0 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f993 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fbbe 	bl	80021e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f996 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f969 	bl	8004d6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fcc0 	bl	8005448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f95b 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0220 	mvn.w	r2, #32
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fc8a 	bl	8005434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e048      	b.n	8004bd8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	d839      	bhi.n	8004bc8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004bc9 	.word	0x08004bc9
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004bc9 	.word	0x08004bc9
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004bc9 	.word	0x08004bc9
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bc9 	.word	0x08004bc9
 8004b84:	08004bc9 	.word	0x08004bc9
 8004b88:	08004bc9 	.word	0x08004bc9
 8004b8c:	08004bbb 	.word	0x08004bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f992 	bl	8004ec0 <TIM_OC1_SetConfig>
      break;
 8004b9c:	e017      	b.n	8004bce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f9f1 	bl	8004f8c <TIM_OC2_SetConfig>
      break;
 8004baa:	e010      	b.n	8004bce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa56 	bl	8005064 <TIM_OC3_SetConfig>
      break;
 8004bb8:	e009      	b.n	8004bce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fab9 	bl	8005138 <TIM_OC4_SetConfig>
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
      break;
 8004bcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0b4      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x186>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c34:	d03e      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3a:	f200 8087 	bhi.w	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x172>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d87f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d01a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xa6>
 8004c50:	2b70      	cmp	r3, #112	; 0x70
 8004c52:	d87b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d050      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x11a>
 8004c58:	2b60      	cmp	r3, #96	; 0x60
 8004c5a:	d877      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d03c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xfa>
 8004c60:	2b50      	cmp	r3, #80	; 0x50
 8004c62:	d873      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d058      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x13a>
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d86f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d064      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d867      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d05a      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	e062      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6899      	ldr	r1, [r3, #8]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f000 fb19 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
      break;
 8004cb2:	e04f      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f000 fb02 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f000 fa76 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	; 0x50
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 facf 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 fa95 	bl	8005236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	; 0x60
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fabf 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 fa56 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 faaf 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f000 faa6 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e003      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <TIM_Base_SetConfig+0xe4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00f      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d00b      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a31      	ldr	r2, [pc, #196]	; (8004ea8 <TIM_Base_SetConfig+0xe8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a30      	ldr	r2, [pc, #192]	; (8004eac <TIM_Base_SetConfig+0xec>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <TIM_Base_SetConfig+0xf0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d108      	bne.n	8004e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <TIM_Base_SetConfig+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <TIM_Base_SetConfig+0xe8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a21      	ldr	r2, [pc, #132]	; (8004eac <TIM_Base_SetConfig+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <TIM_Base_SetConfig+0xf0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <TIM_Base_SetConfig+0xf4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <TIM_Base_SetConfig+0xf8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <TIM_Base_SetConfig+0xfc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <TIM_Base_SetConfig+0xe4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d103      	bne.n	8004e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	615a      	str	r2, [r3, #20]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800

08004ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 0302 	bic.w	r3, r3, #2
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <TIM_OC1_SetConfig+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10c      	bne.n	8004f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0308 	bic.w	r3, r3, #8
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <TIM_OC1_SetConfig+0xc8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d111      	bne.n	8004f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	621a      	str	r2, [r3, #32]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40010000 	.word	0x40010000

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0320 	bic.w	r3, r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <TIM_OC2_SetConfig+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10d      	bne.n	8005008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC2_SetConfig+0xd4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d113      	bne.n	8005038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000

08005064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <TIM_OC3_SetConfig+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a14      	ldr	r2, [pc, #80]	; (8005134 <TIM_OC3_SetConfig+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d113      	bne.n	800510e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40010000 	.word	0x40010000

08005138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a10      	ldr	r2, [pc, #64]	; (80051d4 <TIM_OC4_SetConfig+0x9c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000

080051d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 030a 	bic.w	r3, r3, #10
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005236:	b480      	push	{r7}
 8005238:	b087      	sub	sp, #28
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f043 0307 	orr.w	r3, r3, #7
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2201      	movs	r2, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800536c:	2302      	movs	r3, #2
 800536e:	e050      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40014000 	.word	0x40014000

08005434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e03f      	b.n	80054ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd f8e6 	bl	8002654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	; 0x24
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800549e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fe49 	bl	8006138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e021      	b.n	800554c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800551e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fd f959 	bl	80027d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b20      	cmp	r3, #32
 8005572:	d17c      	bne.n	800566e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_UART_Transmit+0x2c>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e075      	b.n	8005670 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_UART_Transmit+0x3e>
 800558e:	2302      	movs	r3, #2
 8005590:	e06e      	b.n	8005670 <HAL_UART_Transmit+0x11c>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2221      	movs	r2, #33	; 0x21
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055a8:	f7fd fb14 	bl	8002bd4 <HAL_GetTick>
 80055ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	d108      	bne.n	80055d6 <HAL_UART_Transmit+0x82>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e003      	b.n	80055de <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055e6:	e02a      	b.n	800563e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2200      	movs	r2, #0
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fb5a 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e036      	b.n	8005670 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005616:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	3302      	adds	r3, #2
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e007      	b.n	8005630 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1cf      	bne.n	80055e8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	2140      	movs	r1, #64	; 0x40
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fb2a 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e006      	b.n	8005670 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
  }
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d130      	bne.n	80056f4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_Transmit_IT+0x26>
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e029      	b.n	80056f6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Transmit_IT+0x38>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e022      	b.n	80056f6 <HAL_UART_Transmit_IT+0x7e>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2221      	movs	r2, #33	; 0x21
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	4613      	mov	r3, r2
 800570e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	d11d      	bne.n	8005758 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Receive_IT+0x26>
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e016      	b.n	800575a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_UART_Receive_IT+0x38>
 8005736:	2302      	movs	r3, #2
 8005738:	e00f      	b.n	800575a <HAL_UART_Receive_IT+0x58>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	461a      	mov	r2, r3
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb1a 	bl	8005d88 <UART_Start_Receive_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	e000      	b.n	800575a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b0ba      	sub	sp, #232	; 0xe8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_UART_IRQHandler+0x66>
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fbfd 	bl	8005fc2 <UART_Receive_IT>
      return;
 80057c8:	e256      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80de 	beq.w	8005990 <HAL_UART_IRQHandler+0x22c>
 80057d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80d1 	beq.w	8005990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_UART_IRQHandler+0xae>
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0201 	orr.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_UART_IRQHandler+0xd2>
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f043 0202 	orr.w	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <HAL_UART_IRQHandler+0xf6>
 8005842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d011      	beq.n	800588a <HAL_UART_IRQHandler+0x126>
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f043 0208 	orr.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 81ed 	beq.w	8005c6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_UART_IRQHandler+0x14e>
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb88 	bl	8005fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <HAL_UART_IRQHandler+0x17a>
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04f      	beq.n	800597e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa90 	bl	8005e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d141      	bne.n	8005976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800590c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800591e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800592a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1d9      	bne.n	80058f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d013      	beq.n	800596e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	4a7d      	ldr	r2, [pc, #500]	; (8005b40 <HAL_UART_IRQHandler+0x3dc>)
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd fb21 	bl	8002f9a <HAL_DMA_Abort_IT>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	e00e      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fb66 	bl	8002040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00a      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc fb62 	bl	8002040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e006      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc fb5e 	bl	8002040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800598a:	e170      	b.n	8005c6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	bf00      	nop
    return;
 800598e:	e16e      	b.n	8005c6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 814a 	bne.w	8005c2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8143 	beq.w	8005c2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 813c 	beq.w	8005c2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	f040 80b4 	bne.w	8005b44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8140 	beq.w	8005c72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f080 8139 	bcs.w	8005c72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a12:	f000 8088 	beq.w	8005b26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1d9      	bne.n	8005a16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3314      	adds	r3, #20
 8005a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e1      	bne.n	8005a62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e3      	bne.n	8005a9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b08:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e3      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd f9ca 	bl	8002eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8ac 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b3c:	e099      	b.n	8005c72 <HAL_UART_IRQHandler+0x50e>
 8005b3e:	bf00      	nop
 8005b40:	08005ecb 	.word	0x08005ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 808b 	beq.w	8005c76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8086 	beq.w	8005c76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e3      	bne.n	8005b6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0310 	bic.w	r3, r3, #16
 8005bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c0c:	61fa      	str	r2, [r7, #28]
 8005c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	617b      	str	r3, [r7, #20]
   return(result);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e3      	bne.n	8005be8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f834 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c2c:	e023      	b.n	8005c76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_UART_IRQHandler+0x4ea>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f953 	bl	8005ef2 <UART_Transmit_IT>
    return;
 8005c4c:	e014      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00e      	beq.n	8005c78 <HAL_UART_IRQHandler+0x514>
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f993 	bl	8005f92 <UART_EndTransmit_IT>
    return;
 8005c6c:	e004      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
    return;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
      return;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
      return;
 8005c76:	bf00      	nop
  }
}
 8005c78:	37e8      	adds	r7, #232	; 0xe8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop

08005c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b090      	sub	sp, #64	; 0x40
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbc:	e050      	b.n	8005d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d04c      	beq.n	8005d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ccc:	f7fc ff82 	bl	8002bd4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d241      	bcs.n	8005d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d30:	623a      	str	r2, [r7, #32]
 8005d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	69f9      	ldr	r1, [r7, #28]
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e00f      	b.n	8005d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d09f      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3740      	adds	r7, #64	; 0x40
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2222      	movs	r2, #34	; 0x22
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695a      	ldr	r2, [r3, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0220 	orr.w	r2, r2, #32
 8005df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b095      	sub	sp, #84	; 0x54
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d119      	bne.n	8005eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0310 	bic.w	r3, r3, #16
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e9c:	61ba      	str	r2, [r7, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ebe:	bf00      	nop
 8005ec0:	3754      	adds	r7, #84	; 0x54
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7fc f8ab 	bl	8002040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b21      	cmp	r3, #33	; 0x21
 8005f04:	d13e      	bne.n	8005f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d114      	bne.n	8005f3a <UART_Transmit_IT+0x48>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]
 8005f38:	e008      	b.n	8005f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6211      	str	r1, [r2, #32]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10f      	bne.n	8005f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e000      	b.n	8005f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fe64 	bl	8005c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08c      	sub	sp, #48	; 0x30
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b22      	cmp	r3, #34	; 0x22
 8005fd4:	f040 80ab 	bne.w	800612e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe0:	d117      	bne.n	8006012 <UART_Receive_IT+0x50>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d113      	bne.n	8006012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	b29a      	uxth	r2, r3
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
 8006010:	e026      	b.n	8006060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006024:	d007      	beq.n	8006036 <UART_Receive_IT+0x74>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <UART_Receive_IT+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e008      	b.n	8006056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006070:	2b00      	cmp	r3, #0
 8006072:	d15a      	bne.n	800612a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0220 	bic.w	r2, r2, #32
 8006082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d135      	bne.n	8006120 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 0310 	bic.w	r3, r3, #16
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	623a      	str	r2, [r7, #32]
 80060dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	69f9      	ldr	r1, [r7, #28]
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d10a      	bne.n	8006112 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fdbb 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fb ffe1 	bl	80020e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e002      	b.n	8006130 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3730      	adds	r7, #48	; 0x30
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b0c0      	sub	sp, #256	; 0x100
 800613e:	af00      	add	r7, sp, #0
 8006140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	68d9      	ldr	r1, [r3, #12]
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	ea40 0301 	orr.w	r3, r0, r1
 8006160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	431a      	orrs	r2, r3
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	431a      	orrs	r2, r3
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006190:	f021 010c 	bic.w	r1, r1, #12
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800619e:	430b      	orrs	r3, r1
 80061a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	6999      	ldr	r1, [r3, #24]
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	ea40 0301 	orr.w	r3, r0, r1
 80061be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <UART_SetConfig+0x2cc>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d005      	beq.n	80061d8 <UART_SetConfig+0xa0>
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b8d      	ldr	r3, [pc, #564]	; (8006408 <UART_SetConfig+0x2d0>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d104      	bne.n	80061e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061d8:	f7fd fde2 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 80061dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061e0:	e003      	b.n	80061ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e2:	f7fd fdc9 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 80061e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	f040 810c 	bne.w	8006410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	1891      	adds	r1, r2, r2
 8006210:	65b9      	str	r1, [r7, #88]	; 0x58
 8006212:	415b      	adcs	r3, r3
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800621a:	4621      	mov	r1, r4
 800621c:	eb12 0801 	adds.w	r8, r2, r1
 8006220:	4629      	mov	r1, r5
 8006222:	eb43 0901 	adc.w	r9, r3, r1
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623a:	4690      	mov	r8, r2
 800623c:	4699      	mov	r9, r3
 800623e:	4623      	mov	r3, r4
 8006240:	eb18 0303 	adds.w	r3, r8, r3
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006248:	462b      	mov	r3, r5
 800624a:	eb49 0303 	adc.w	r3, r9, r3
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800625e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006266:	460b      	mov	r3, r1
 8006268:	18db      	adds	r3, r3, r3
 800626a:	653b      	str	r3, [r7, #80]	; 0x50
 800626c:	4613      	mov	r3, r2
 800626e:	eb42 0303 	adc.w	r3, r2, r3
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
 8006274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800627c:	f7fa f818 	bl	80002b0 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4b61      	ldr	r3, [pc, #388]	; (800640c <UART_SetConfig+0x2d4>)
 8006286:	fba3 2302 	umull	r2, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	011c      	lsls	r4, r3, #4
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800629c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80062a8:	415b      	adcs	r3, r3
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062b0:	4641      	mov	r1, r8
 80062b2:	eb12 0a01 	adds.w	sl, r2, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	eb43 0b01 	adc.w	fp, r3, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d0:	4692      	mov	sl, r2
 80062d2:	469b      	mov	fp, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	eb1a 0303 	adds.w	r3, sl, r3
 80062da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062de:	464b      	mov	r3, r9
 80062e0:	eb4b 0303 	adc.w	r3, fp, r3
 80062e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062fc:	460b      	mov	r3, r1
 80062fe:	18db      	adds	r3, r3, r3
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
 8006302:	4613      	mov	r3, r2
 8006304:	eb42 0303 	adc.w	r3, r2, r3
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
 800630a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800630e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006312:	f7f9 ffcd 	bl	80002b0 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4611      	mov	r1, r2
 800631c:	4b3b      	ldr	r3, [pc, #236]	; (800640c <UART_SetConfig+0x2d4>)
 800631e:	fba3 2301 	umull	r2, r3, r3, r1
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2264      	movs	r2, #100	; 0x64
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <UART_SetConfig+0x2d4>)
 8006334:	fba3 2302 	umull	r2, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006340:	441c      	add	r4, r3
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800634c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	63b9      	str	r1, [r7, #56]	; 0x38
 800635c:	415b      	adcs	r3, r3
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006364:	4641      	mov	r1, r8
 8006366:	1851      	adds	r1, r2, r1
 8006368:	6339      	str	r1, [r7, #48]	; 0x30
 800636a:	4649      	mov	r1, r9
 800636c:	414b      	adcs	r3, r1
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800637c:	4659      	mov	r1, fp
 800637e:	00cb      	lsls	r3, r1, #3
 8006380:	4651      	mov	r1, sl
 8006382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006386:	4651      	mov	r1, sl
 8006388:	00ca      	lsls	r2, r1, #3
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	4603      	mov	r3, r0
 8006390:	4642      	mov	r2, r8
 8006392:	189b      	adds	r3, r3, r2
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006398:	464b      	mov	r3, r9
 800639a:	460a      	mov	r2, r1
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063b8:	460b      	mov	r3, r1
 80063ba:	18db      	adds	r3, r3, r3
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	4613      	mov	r3, r2
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063ce:	f7f9 ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <UART_SetConfig+0x2d4>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a08      	ldr	r2, [pc, #32]	; (800640c <UART_SetConfig+0x2d4>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f003 0207 	and.w	r2, r3, #7
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4422      	add	r2, r4
 80063fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006400:	e106      	b.n	8006610 <UART_SetConfig+0x4d8>
 8006402:	bf00      	nop
 8006404:	40011000 	.word	0x40011000
 8006408:	40011400 	.word	0x40011400
 800640c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006414:	2200      	movs	r2, #0
 8006416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800641a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800641e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006422:	4642      	mov	r2, r8
 8006424:	464b      	mov	r3, r9
 8006426:	1891      	adds	r1, r2, r2
 8006428:	6239      	str	r1, [r7, #32]
 800642a:	415b      	adcs	r3, r3
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006432:	4641      	mov	r1, r8
 8006434:	1854      	adds	r4, r2, r1
 8006436:	4649      	mov	r1, r9
 8006438:	eb43 0501 	adc.w	r5, r3, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	00eb      	lsls	r3, r5, #3
 8006446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644a:	00e2      	lsls	r2, r4, #3
 800644c:	4614      	mov	r4, r2
 800644e:	461d      	mov	r5, r3
 8006450:	4643      	mov	r3, r8
 8006452:	18e3      	adds	r3, r4, r3
 8006454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006458:	464b      	mov	r3, r9
 800645a:	eb45 0303 	adc.w	r3, r5, r3
 800645e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800647e:	4629      	mov	r1, r5
 8006480:	008b      	lsls	r3, r1, #2
 8006482:	4621      	mov	r1, r4
 8006484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006488:	4621      	mov	r1, r4
 800648a:	008a      	lsls	r2, r1, #2
 800648c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006490:	f7f9 ff0e 	bl	80002b0 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4b60      	ldr	r3, [pc, #384]	; (800661c <UART_SetConfig+0x4e4>)
 800649a:	fba3 2302 	umull	r2, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	011c      	lsls	r4, r3, #4
 80064a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	1891      	adds	r1, r2, r2
 80064ba:	61b9      	str	r1, [r7, #24]
 80064bc:	415b      	adcs	r3, r3
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c4:	4641      	mov	r1, r8
 80064c6:	1851      	adds	r1, r2, r1
 80064c8:	6139      	str	r1, [r7, #16]
 80064ca:	4649      	mov	r1, r9
 80064cc:	414b      	adcs	r3, r1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064dc:	4659      	mov	r1, fp
 80064de:	00cb      	lsls	r3, r1, #3
 80064e0:	4651      	mov	r1, sl
 80064e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e6:	4651      	mov	r1, sl
 80064e8:	00ca      	lsls	r2, r1, #3
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	4642      	mov	r2, r8
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064f8:	464b      	mov	r3, r9
 80064fa:	460a      	mov	r2, r1
 80064fc:	eb42 0303 	adc.w	r3, r2, r3
 8006500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	67bb      	str	r3, [r7, #120]	; 0x78
 800650e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800651c:	4649      	mov	r1, r9
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006526:	4641      	mov	r1, r8
 8006528:	008a      	lsls	r2, r1, #2
 800652a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800652e:	f7f9 febf 	bl	80002b0 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4611      	mov	r1, r2
 8006538:	4b38      	ldr	r3, [pc, #224]	; (800661c <UART_SetConfig+0x4e4>)
 800653a:	fba3 2301 	umull	r2, r3, r3, r1
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2264      	movs	r2, #100	; 0x64
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	1acb      	subs	r3, r1, r3
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	3332      	adds	r3, #50	; 0x32
 800654c:	4a33      	ldr	r2, [pc, #204]	; (800661c <UART_SetConfig+0x4e4>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006558:	441c      	add	r4, r3
 800655a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655e:	2200      	movs	r2, #0
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
 8006562:	677a      	str	r2, [r7, #116]	; 0x74
 8006564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	1891      	adds	r1, r2, r2
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	415b      	adcs	r3, r3
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006578:	4641      	mov	r1, r8
 800657a:	1851      	adds	r1, r2, r1
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	4649      	mov	r1, r9
 8006580:	414b      	adcs	r3, r1
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006590:	4659      	mov	r1, fp
 8006592:	00cb      	lsls	r3, r1, #3
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659a:	4651      	mov	r1, sl
 800659c:	00ca      	lsls	r2, r1, #3
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	4642      	mov	r2, r8
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065aa:	464b      	mov	r3, r9
 80065ac:	460a      	mov	r2, r1
 80065ae:	eb42 0303 	adc.w	r3, r2, r3
 80065b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	663b      	str	r3, [r7, #96]	; 0x60
 80065be:	667a      	str	r2, [r7, #100]	; 0x64
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065cc:	4649      	mov	r1, r9
 80065ce:	008b      	lsls	r3, r1, #2
 80065d0:	4641      	mov	r1, r8
 80065d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d6:	4641      	mov	r1, r8
 80065d8:	008a      	lsls	r2, r1, #2
 80065da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065de:	f7f9 fe67 	bl	80002b0 <__aeabi_uldivmod>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <UART_SetConfig+0x4e4>)
 80065e8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	2164      	movs	r1, #100	; 0x64
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	3332      	adds	r3, #50	; 0x32
 80065fa:	4a08      	ldr	r2, [pc, #32]	; (800661c <UART_SetConfig+0x4e4>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4422      	add	r2, r4
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006616:	46bd      	mov	sp, r7
 8006618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661c:	51eb851f 	.word	0x51eb851f

08006620 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <MUX>:
void MUX(struct WIFI *a)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <IPDef>:
void IPDef(struct WIFI *a)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2205      	movs	r2, #5
 80066dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2206      	movs	r2, #6
 8006734:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2208      	movs	r2, #8
 8006760:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2209      	movs	r2, #9
 800678c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2207      	movs	r2, #7
 80067b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006972:	af06      	add	r7, sp, #24
 8006974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800697c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800697e:	2300      	movs	r3, #0
 8006980:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006996:	2300      	movs	r3, #0
 8006998:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 800699c:	2320      	movs	r3, #32
 800699e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80069a2:	2322      	movs	r3, #34	; 0x22
 80069a4:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80069a8:	4b71      	ldr	r3, [pc, #452]	; (8006b70 <AT_ESP8266_ND+0x204>)
 80069aa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80069ae:	4a71      	ldr	r2, [pc, #452]	; (8006b74 <AT_ESP8266_ND+0x208>)
 80069b0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	4611      	mov	r1, r2
 80069b8:	8019      	strh	r1, [r3, #0]
 80069ba:	3302      	adds	r3, #2
 80069bc:	0c12      	lsrs	r2, r2, #16
 80069be:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80069c0:	f642 4322 	movw	r3, #11298	; 0x2c22
 80069c4:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80069c8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80069cc:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80069d6:	2300      	movs	r3, #0
 80069d8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80069dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7f9 fbfa 	bl	80001f4 <strlen>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7f9 fbdf 	bl	80001f4 <strlen>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2206      	movs	r2, #6
 8006a54:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a94:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a9e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006aa2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006aa6:	6809      	ldr	r1, [r1, #0]
 8006aa8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006aac:	2600      	movs	r6, #0
 8006aae:	9604      	str	r6, [sp, #16]
 8006ab0:	9103      	str	r1, [sp, #12]
 8006ab2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ab6:	9102      	str	r1, [sp, #8]
 8006ab8:	9201      	str	r2, [sp, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	462b      	mov	r3, r5
 8006abe:	4a2e      	ldr	r2, [pc, #184]	; (8006b78 <AT_ESP8266_ND+0x20c>)
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	f007 fc75 	bl	800e3b0 <FT_String_ND>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	f040 812a 	bne.w	8006d22 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2206      	movs	r2, #6
 8006ada:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d145      	bne.n	8006b7c <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b2c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b36:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b3a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b3e:	6809      	ldr	r1, [r1, #0]
 8006b40:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b44:	2604      	movs	r6, #4
 8006b46:	9604      	str	r6, [sp, #16]
 8006b48:	9103      	str	r1, [sp, #12]
 8006b4a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b4e:	9102      	str	r1, [sp, #8]
 8006b50:	9201      	str	r2, [sp, #4]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	462b      	mov	r3, r5
 8006b56:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <AT_ESP8266_ND+0x20c>)
 8006b58:	4621      	mov	r1, r4
 8006b5a:	f007 fc29 	bl	800e3b0 <FT_String_ND>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b6e:	e044      	b.n	8006bfa <AT_ESP8266_ND+0x28e>
 8006b70:	00222c22 	.word	0x00222c22
 8006b74:	080105dc 	.word	0x080105dc
 8006b78:	08010404 	.word	0x08010404
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bb4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bb8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006bc2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bc6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bca:	6809      	ldr	r1, [r1, #0]
 8006bcc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bd0:	2605      	movs	r6, #5
 8006bd2:	9604      	str	r6, [sp, #16]
 8006bd4:	9103      	str	r1, [sp, #12]
 8006bd6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bda:	9102      	str	r1, [sp, #8]
 8006bdc:	9201      	str	r2, [sp, #4]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	462b      	mov	r3, r5
 8006be2:	4ac1      	ldr	r2, [pc, #772]	; (8006ee8 <AT_ESP8266_ND+0x57c>)
 8006be4:	4621      	mov	r1, r4
 8006be6:	f007 fbe3 	bl	800e3b0 <FT_String_ND>
 8006bea:	4602      	mov	r2, r0
 8006bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d15a      	bne.n	8006cc2 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2263      	movs	r2, #99	; 0x63
 8006c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c62:	2341      	movs	r3, #65	; 0x41
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2300      	movs	r3, #0
 8006c68:	f007 ff50 	bl	800eb0c <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006c7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c88:	2341      	movs	r3, #65	; 0x41
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2205      	movs	r2, #5
 8006c90:	f007 ff3c 	bl	800eb0c <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	d126      	bne.n	8006d22 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2237      	movs	r2, #55	; 0x37
 8006ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d6a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d6e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d78:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d7c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d80:	6809      	ldr	r1, [r1, #0]
 8006d82:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d86:	2600      	movs	r6, #0
 8006d88:	9604      	str	r6, [sp, #16]
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d90:	9102      	str	r1, [sp, #8]
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	462b      	mov	r3, r5
 8006d98:	4a54      	ldr	r2, [pc, #336]	; (8006eec <AT_ESP8266_ND+0x580>)
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	f007 fb08 	bl	800e3b0 <FT_String_ND>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	f040 8334 	bne.w	8007410 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2206      	movs	r2, #6
 8006dba:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006df6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dfa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e04:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e08:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e0c:	6809      	ldr	r1, [r1, #0]
 8006e0e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e12:	2600      	movs	r6, #0
 8006e14:	9604      	str	r6, [sp, #16]
 8006e16:	9103      	str	r1, [sp, #12]
 8006e18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e1c:	9102      	str	r1, [sp, #8]
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462b      	mov	r3, r5
 8006e24:	4a32      	ldr	r2, [pc, #200]	; (8006ef0 <AT_ESP8266_ND+0x584>)
 8006e26:	4621      	mov	r1, r4
 8006e28:	f007 fac2 	bl	800e3b0 <FT_String_ND>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d113      	bne.n	8006e5a <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e32:	2313      	movs	r3, #19
 8006e34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006e56:	f001 b981 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2208      	movs	r2, #8
 8006e66:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ea2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ea6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eb0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eb4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006eb8:	6809      	ldr	r1, [r1, #0]
 8006eba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	9604      	str	r6, [sp, #16]
 8006ec2:	9103      	str	r1, [sp, #12]
 8006ec4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ec8:	9102      	str	r1, [sp, #8]
 8006eca:	9201      	str	r2, [sp, #4]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	462b      	mov	r3, r5
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <AT_ESP8266_ND+0x588>)
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	f007 fa6c 	bl	800e3b0 <FT_String_ND>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10c      	bne.n	8006ef8 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006ede:	230d      	movs	r3, #13
 8006ee0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ee4:	f001 b93a 	b.w	800815c <AT_ESP8266_ND+0x17f0>
 8006ee8:	08010404 	.word	0x08010404
 8006eec:	0801040c 	.word	0x0801040c
 8006ef0:	08010414 	.word	0x08010414
 8006ef4:	0801041c 	.word	0x0801041c
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	220a      	movs	r2, #10
 8006f04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f40:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f44:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f4e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f52:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f56:	6809      	ldr	r1, [r1, #0]
 8006f58:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	9604      	str	r6, [sp, #16]
 8006f60:	9103      	str	r1, [sp, #12]
 8006f62:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f66:	9102      	str	r1, [sp, #8]
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	4ab7      	ldr	r2, [pc, #732]	; (800724c <AT_ESP8266_ND+0x8e0>)
 8006f70:	4621      	mov	r1, r4
 8006f72:	f007 fa1d 	bl	800e3b0 <FT_String_ND>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d104      	bne.n	8006f86 <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006f7c:	231c      	movs	r3, #28
 8006f7e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f82:	f001 b8eb 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	220f      	movs	r2, #15
 8006f92:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fd2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fdc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fe0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fe4:	6809      	ldr	r1, [r1, #0]
 8006fe6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fea:	2600      	movs	r6, #0
 8006fec:	9604      	str	r6, [sp, #16]
 8006fee:	9103      	str	r1, [sp, #12]
 8006ff0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ff4:	9102      	str	r1, [sp, #8]
 8006ff6:	9201      	str	r2, [sp, #4]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	4a94      	ldr	r2, [pc, #592]	; (8007250 <AT_ESP8266_ND+0x8e4>)
 8006ffe:	4621      	mov	r1, r4
 8007000:	f007 f9d6 	bl	800e3b0 <FT_String_ND>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d104      	bne.n	8007014 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 800700a:	2317      	movs	r3, #23
 800700c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007010:	f001 b8a4 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8007014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2203      	movs	r2, #3
 8007020:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007032:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007036:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800704e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800705c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007060:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800706a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800706e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007072:	6809      	ldr	r1, [r1, #0]
 8007074:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007078:	2600      	movs	r6, #0
 800707a:	9604      	str	r6, [sp, #16]
 800707c:	9103      	str	r1, [sp, #12]
 800707e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007082:	9102      	str	r1, [sp, #8]
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	462b      	mov	r3, r5
 800708a:	4a72      	ldr	r2, [pc, #456]	; (8007254 <AT_ESP8266_ND+0x8e8>)
 800708c:	4621      	mov	r1, r4
 800708e:	f007 f98f 	bl	800e3b0 <FT_String_ND>
 8007092:	4603      	mov	r3, r0
 8007094:	2b01      	cmp	r3, #1
 8007096:	d104      	bne.n	80070a2 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8007098:	2314      	movs	r3, #20
 800709a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800709e:	f001 b85d 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 80070a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	220c      	movs	r2, #12
 80070ae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80070b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070ea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070ee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070f8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070fc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007100:	6809      	ldr	r1, [r1, #0]
 8007102:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007106:	2600      	movs	r6, #0
 8007108:	9604      	str	r6, [sp, #16]
 800710a:	9103      	str	r1, [sp, #12]
 800710c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007110:	9102      	str	r1, [sp, #8]
 8007112:	9201      	str	r2, [sp, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	462b      	mov	r3, r5
 8007118:	4a4f      	ldr	r2, [pc, #316]	; (8007258 <AT_ESP8266_ND+0x8ec>)
 800711a:	4621      	mov	r1, r4
 800711c:	f007 f948 	bl	800e3b0 <FT_String_ND>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d104      	bne.n	8007130 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 8007126:	2315      	movs	r3, #21
 8007128:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800712c:	f001 b816 	b.w	800815c <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	220b      	movs	r2, #11
 800713c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007140:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007144:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800714e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800715c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800716a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007178:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800717c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007186:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800718a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800718e:	6809      	ldr	r1, [r1, #0]
 8007190:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007194:	2600      	movs	r6, #0
 8007196:	9604      	str	r6, [sp, #16]
 8007198:	9103      	str	r1, [sp, #12]
 800719a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800719e:	9102      	str	r1, [sp, #8]
 80071a0:	9201      	str	r2, [sp, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462b      	mov	r3, r5
 80071a6:	4a2d      	ldr	r2, [pc, #180]	; (800725c <AT_ESP8266_ND+0x8f0>)
 80071a8:	4621      	mov	r1, r4
 80071aa:	f007 f901 	bl	800e3b0 <FT_String_ND>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d104      	bne.n	80071be <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80071b4:	2309      	movs	r3, #9
 80071b6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071ba:	f000 bfcf 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80071be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	220b      	movs	r2, #11
 80071ca:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80071ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007206:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800720a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007214:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007218:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800721c:	6809      	ldr	r1, [r1, #0]
 800721e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007222:	2600      	movs	r6, #0
 8007224:	9604      	str	r6, [sp, #16]
 8007226:	9103      	str	r1, [sp, #12]
 8007228:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800722c:	9102      	str	r1, [sp, #8]
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	462b      	mov	r3, r5
 8007234:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <AT_ESP8266_ND+0x8f4>)
 8007236:	4621      	mov	r1, r4
 8007238:	f007 f8ba 	bl	800e3b0 <FT_String_ND>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d110      	bne.n	8007264 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8007242:	2307      	movs	r3, #7
 8007244:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007248:	f000 bf88 	b.w	800815c <AT_ESP8266_ND+0x17f0>
 800724c:	08010428 	.word	0x08010428
 8007250:	08010434 	.word	0x08010434
 8007254:	08010444 	.word	0x08010444
 8007258:	08010448 	.word	0x08010448
 800725c:	08010458 	.word	0x08010458
 8007260:	08010464 	.word	0x08010464
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007264:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007268:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	220b      	movs	r2, #11
 8007270:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007282:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007286:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800729e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072ac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072b0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072ba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072be:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072c2:	6809      	ldr	r1, [r1, #0]
 80072c4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072c8:	2600      	movs	r6, #0
 80072ca:	9604      	str	r6, [sp, #16]
 80072cc:	9103      	str	r1, [sp, #12]
 80072ce:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072d2:	9102      	str	r1, [sp, #8]
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	462b      	mov	r3, r5
 80072da:	4ab7      	ldr	r2, [pc, #732]	; (80075b8 <AT_ESP8266_ND+0xc4c>)
 80072dc:	4621      	mov	r1, r4
 80072de:	f007 f867 	bl	800e3b0 <FT_String_ND>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d104      	bne.n	80072f2 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80072e8:	2308      	movs	r3, #8
 80072ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072ee:	f000 bf35 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	220a      	movs	r2, #10
 80072fe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007302:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007306:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007310:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007314:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800731e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800732c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800733a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800733e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007348:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800734c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007350:	6809      	ldr	r1, [r1, #0]
 8007352:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007356:	2600      	movs	r6, #0
 8007358:	9604      	str	r6, [sp, #16]
 800735a:	9103      	str	r1, [sp, #12]
 800735c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007360:	9102      	str	r1, [sp, #8]
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	462b      	mov	r3, r5
 8007368:	4a94      	ldr	r2, [pc, #592]	; (80075bc <AT_ESP8266_ND+0xc50>)
 800736a:	4621      	mov	r1, r4
 800736c:	f007 f820 	bl	800e3b0 <FT_String_ND>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d104      	bne.n	8007380 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 8007376:	231b      	movs	r3, #27
 8007378:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800737c:	f000 beee 	b.w	800815c <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007384:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2207      	movs	r2, #7
 800738c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800739e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073cc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073d6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073da:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073de:	6809      	ldr	r1, [r1, #0]
 80073e0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073e4:	2600      	movs	r6, #0
 80073e6:	9604      	str	r6, [sp, #16]
 80073e8:	9103      	str	r1, [sp, #12]
 80073ea:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073ee:	9102      	str	r1, [sp, #8]
 80073f0:	9201      	str	r2, [sp, #4]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462b      	mov	r3, r5
 80073f6:	4a72      	ldr	r2, [pc, #456]	; (80075c0 <AT_ESP8266_ND+0xc54>)
 80073f8:	4621      	mov	r1, r4
 80073fa:	f006 ffd9 	bl	800e3b0 <FT_String_ND>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 86ab 	bne.w	800815c <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 8007406:	230f      	movs	r3, #15
 8007408:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800740c:	f000 bea6 	b.w	800815c <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2207      	movs	r2, #7
 800741c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800742e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800743c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800744a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007458:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800745c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007466:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800746a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800746e:	6809      	ldr	r1, [r1, #0]
 8007470:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007474:	2600      	movs	r6, #0
 8007476:	9604      	str	r6, [sp, #16]
 8007478:	9103      	str	r1, [sp, #12]
 800747a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800747e:	9102      	str	r1, [sp, #8]
 8007480:	9201      	str	r2, [sp, #4]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	462b      	mov	r3, r5
 8007486:	4a4f      	ldr	r2, [pc, #316]	; (80075c4 <AT_ESP8266_ND+0xc58>)
 8007488:	4621      	mov	r1, r4
 800748a:	f006 ff91 	bl	800e3b0 <FT_String_ND>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 8326 	bne.w	8007ae2 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 8007496:	2302      	movs	r3, #2
 8007498:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800749c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 80074ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074e4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074e8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074f2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074f6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074fa:	6809      	ldr	r1, [r1, #0]
 80074fc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007500:	2600      	movs	r6, #0
 8007502:	9604      	str	r6, [sp, #16]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800750a:	9102      	str	r1, [sp, #8]
 800750c:	9201      	str	r2, [sp, #4]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462b      	mov	r3, r5
 8007512:	4a2d      	ldr	r2, [pc, #180]	; (80075c8 <AT_ESP8266_ND+0xc5c>)
 8007514:	4621      	mov	r1, r4
 8007516:	f006 ff4b 	bl	800e3b0 <FT_String_ND>
 800751a:	4603      	mov	r3, r0
 800751c:	2b01      	cmp	r3, #1
 800751e:	d104      	bne.n	800752a <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007520:	2306      	movs	r3, #6
 8007522:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007526:	f000 be19 	b.w	800815c <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800752a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2215      	movs	r2, #21
 8007536:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800753a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007572:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007576:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007580:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007584:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007588:	6809      	ldr	r1, [r1, #0]
 800758a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800758e:	2600      	movs	r6, #0
 8007590:	9604      	str	r6, [sp, #16]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007598:	9102      	str	r1, [sp, #8]
 800759a:	9201      	str	r2, [sp, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	462b      	mov	r3, r5
 80075a0:	4a0a      	ldr	r2, [pc, #40]	; (80075cc <AT_ESP8266_ND+0xc60>)
 80075a2:	4621      	mov	r1, r4
 80075a4:	f006 ff04 	bl	800e3b0 <FT_String_ND>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d110      	bne.n	80075d0 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80075ae:	230e      	movs	r3, #14
 80075b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075b4:	f000 bdd2 	b.w	800815c <AT_ESP8266_ND+0x17f0>
 80075b8:	08010470 	.word	0x08010470
 80075bc:	0801047c 	.word	0x0801047c
 80075c0:	08010488 	.word	0x08010488
 80075c4:	08010490 	.word	0x08010490
 80075c8:	08010498 	.word	0x08010498
 80075cc:	080104a4 	.word	0x080104a4
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80075d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	220c      	movs	r2, #12
 80075dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80075e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80075fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800760a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800760e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007618:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800761c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007626:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800762a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800762e:	6809      	ldr	r1, [r1, #0]
 8007630:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007634:	2600      	movs	r6, #0
 8007636:	9604      	str	r6, [sp, #16]
 8007638:	9103      	str	r1, [sp, #12]
 800763a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800763e:	9102      	str	r1, [sp, #8]
 8007640:	9201      	str	r2, [sp, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462b      	mov	r3, r5
 8007646:	4ab7      	ldr	r2, [pc, #732]	; (8007924 <AT_ESP8266_ND+0xfb8>)
 8007648:	4621      	mov	r1, r4
 800764a:	f006 feb1 	bl	800e3b0 <FT_String_ND>
 800764e:	4603      	mov	r3, r0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d104      	bne.n	800765e <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007654:	2316      	movs	r3, #22
 8007656:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800765a:	f000 bd7f 	b.w	800815c <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 800765e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007662:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	220b      	movs	r2, #11
 800766a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800766e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800767c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800768a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076bc:	6809      	ldr	r1, [r1, #0]
 80076be:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076c2:	2600      	movs	r6, #0
 80076c4:	9604      	str	r6, [sp, #16]
 80076c6:	9103      	str	r1, [sp, #12]
 80076c8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076cc:	9102      	str	r1, [sp, #8]
 80076ce:	9201      	str	r2, [sp, #4]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	462b      	mov	r3, r5
 80076d4:	4a94      	ldr	r2, [pc, #592]	; (8007928 <AT_ESP8266_ND+0xfbc>)
 80076d6:	4621      	mov	r1, r4
 80076d8:	f006 fe6a 	bl	800e3b0 <FT_String_ND>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d104      	bne.n	80076ec <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80076e2:	231a      	movs	r3, #26
 80076e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076e8:	f000 bd38 	b.w	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80076ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2211      	movs	r2, #17
 80076f8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80076fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800770a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007734:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007738:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007742:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007746:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800774a:	6809      	ldr	r1, [r1, #0]
 800774c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007750:	2600      	movs	r6, #0
 8007752:	9604      	str	r6, [sp, #16]
 8007754:	9103      	str	r1, [sp, #12]
 8007756:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800775a:	9102      	str	r1, [sp, #8]
 800775c:	9201      	str	r2, [sp, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462b      	mov	r3, r5
 8007762:	4a72      	ldr	r2, [pc, #456]	; (800792c <AT_ESP8266_ND+0xfc0>)
 8007764:	4621      	mov	r1, r4
 8007766:	f006 fe23 	bl	800e3b0 <FT_String_ND>
 800776a:	4603      	mov	r3, r0
 800776c:	2b01      	cmp	r3, #1
 800776e:	d104      	bne.n	800777a <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007770:	2311      	movs	r3, #17
 8007772:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007776:	f000 bcf1 	b.w	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800777a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800777e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	220a      	movs	r2, #10
 8007786:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800778a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077d8:	6809      	ldr	r1, [r1, #0]
 80077da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077de:	2600      	movs	r6, #0
 80077e0:	9604      	str	r6, [sp, #16]
 80077e2:	9103      	str	r1, [sp, #12]
 80077e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077e8:	9102      	str	r1, [sp, #8]
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462b      	mov	r3, r5
 80077f0:	4a4f      	ldr	r2, [pc, #316]	; (8007930 <AT_ESP8266_ND+0xfc4>)
 80077f2:	4621      	mov	r1, r4
 80077f4:	f006 fddc 	bl	800e3b0 <FT_String_ND>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d104      	bne.n	8007808 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 80077fe:	231d      	movs	r3, #29
 8007800:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007804:	f000 bcaa 	b.w	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	220b      	movs	r2, #11
 8007814:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007850:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007854:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800785e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007862:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007866:	6809      	ldr	r1, [r1, #0]
 8007868:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800786c:	2600      	movs	r6, #0
 800786e:	9604      	str	r6, [sp, #16]
 8007870:	9103      	str	r1, [sp, #12]
 8007872:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007876:	9102      	str	r1, [sp, #8]
 8007878:	9201      	str	r2, [sp, #4]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	462b      	mov	r3, r5
 800787e:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <AT_ESP8266_ND+0xfc8>)
 8007880:	4621      	mov	r1, r4
 8007882:	f006 fd95 	bl	800e3b0 <FT_String_ND>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d104      	bne.n	8007896 <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 800788c:	231e      	movs	r3, #30
 800788e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007892:	f000 bc63 	b.w	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007896:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800789a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	220b      	movs	r2, #11
 80078a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80078a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078f4:	6809      	ldr	r1, [r1, #0]
 80078f6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078fa:	2600      	movs	r6, #0
 80078fc:	9604      	str	r6, [sp, #16]
 80078fe:	9103      	str	r1, [sp, #12]
 8007900:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007904:	9102      	str	r1, [sp, #8]
 8007906:	9201      	str	r2, [sp, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	462b      	mov	r3, r5
 800790c:	4a0a      	ldr	r2, [pc, #40]	; (8007938 <AT_ESP8266_ND+0xfcc>)
 800790e:	4621      	mov	r1, r4
 8007910:	f006 fd4e 	bl	800e3b0 <FT_String_ND>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d110      	bne.n	800793c <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 800791a:	231f      	movs	r3, #31
 800791c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007920:	f000 bc1c 	b.w	800815c <AT_ESP8266_ND+0x17f0>
 8007924:	08010448 	.word	0x08010448
 8007928:	08010458 	.word	0x08010458
 800792c:	080104bc 	.word	0x080104bc
 8007930:	08010428 	.word	0x08010428
 8007934:	08010464 	.word	0x08010464
 8007938:	08010470 	.word	0x08010470
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 800793c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007940:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2208      	movs	r2, #8
 8007948:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800794c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800795a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800795e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800797a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007984:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007988:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007992:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007996:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800799a:	6809      	ldr	r1, [r1, #0]
 800799c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079a0:	2600      	movs	r6, #0
 80079a2:	9604      	str	r6, [sp, #16]
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079aa:	9102      	str	r1, [sp, #8]
 80079ac:	9201      	str	r2, [sp, #4]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	462b      	mov	r3, r5
 80079b2:	4ac4      	ldr	r2, [pc, #784]	; (8007cc4 <AT_ESP8266_ND+0x1358>)
 80079b4:	4621      	mov	r1, r4
 80079b6:	f006 fcfb 	bl	800e3b0 <FT_String_ND>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d103      	bne.n	80079c8 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 80079c0:	2320      	movs	r3, #32
 80079c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079c6:	e3c9      	b.n	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 80079c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	220a      	movs	r2, #10
 80079d4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80079d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a10:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a14:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a1e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a22:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a26:	6809      	ldr	r1, [r1, #0]
 8007a28:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	9604      	str	r6, [sp, #16]
 8007a30:	9103      	str	r1, [sp, #12]
 8007a32:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a36:	9102      	str	r1, [sp, #8]
 8007a38:	9201      	str	r2, [sp, #4]
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	4aa2      	ldr	r2, [pc, #648]	; (8007cc8 <AT_ESP8266_ND+0x135c>)
 8007a40:	4621      	mov	r1, r4
 8007a42:	f006 fcb5 	bl	800e3b0 <FT_String_ND>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d103      	bne.n	8007a54 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007a4c:	2321      	movs	r3, #33	; 0x21
 8007a4e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a52:	e383      	b.n	800815c <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2205      	movs	r2, #5
 8007a60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a9c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aa0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007aaa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aae:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ab2:	6809      	ldr	r1, [r1, #0]
 8007ab4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ab8:	2600      	movs	r6, #0
 8007aba:	9604      	str	r6, [sp, #16]
 8007abc:	9103      	str	r1, [sp, #12]
 8007abe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ac2:	9102      	str	r1, [sp, #8]
 8007ac4:	9201      	str	r2, [sp, #4]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	462b      	mov	r3, r5
 8007aca:	4a80      	ldr	r2, [pc, #512]	; (8007ccc <AT_ESP8266_ND+0x1360>)
 8007acc:	4621      	mov	r1, r4
 8007ace:	f006 fc6f 	bl	800e3b0 <FT_String_ND>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	f040 8341 	bne.w	800815c <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007ada:	2322      	movs	r3, #34	; 0x22
 8007adc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ae0:	e33c      	b.n	800815c <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	220f      	movs	r2, #15
 8007aee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b2a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b2e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b38:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b3c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b40:	6809      	ldr	r1, [r1, #0]
 8007b42:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b46:	2600      	movs	r6, #0
 8007b48:	9604      	str	r6, [sp, #16]
 8007b4a:	9103      	str	r1, [sp, #12]
 8007b4c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b50:	9102      	str	r1, [sp, #8]
 8007b52:	9201      	str	r2, [sp, #4]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	462b      	mov	r3, r5
 8007b58:	4a5d      	ldr	r2, [pc, #372]	; (8007cd0 <AT_ESP8266_ND+0x1364>)
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	f006 fc28 	bl	800e3b0 <FT_String_ND>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d112      	bne.n	8007b8c <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007b66:	230a      	movs	r3, #10
 8007b68:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007b8a:	e2e7      	b.n	800815c <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2209      	movs	r2, #9
 8007b98:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bd4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bd8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007be2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007be6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bea:	6809      	ldr	r1, [r1, #0]
 8007bec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	9604      	str	r6, [sp, #16]
 8007bf4:	9103      	str	r1, [sp, #12]
 8007bf6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bfa:	9102      	str	r1, [sp, #8]
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	462b      	mov	r3, r5
 8007c02:	4a34      	ldr	r2, [pc, #208]	; (8007cd4 <AT_ESP8266_ND+0x1368>)
 8007c04:	4621      	mov	r1, r4
 8007c06:	f006 fbd3 	bl	800e3b0 <FT_String_ND>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d112      	bne.n	8007c36 <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007c10:	2319      	movs	r3, #25
 8007c12:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007c34:	e292      	b.n	800815c <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2208      	movs	r2, #8
 8007c42:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c7e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c82:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c8c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c90:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c94:	6809      	ldr	r1, [r1, #0]
 8007c96:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	9604      	str	r6, [sp, #16]
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ca4:	9102      	str	r1, [sp, #8]
 8007ca6:	9201      	str	r2, [sp, #4]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	462b      	mov	r3, r5
 8007cac:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <AT_ESP8266_ND+0x136c>)
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f006 fb7e 	bl	800e3b0 <FT_String_ND>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d110      	bne.n	8007cdc <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007cba:	2310      	movs	r3, #16
 8007cbc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cc0:	e24c      	b.n	800815c <AT_ESP8266_ND+0x17f0>
 8007cc2:	bf00      	nop
 8007cc4:	080104d0 	.word	0x080104d0
 8007cc8:	0801047c 	.word	0x0801047c
 8007ccc:	080104dc 	.word	0x080104dc
 8007cd0:	080104e4 	.word	0x080104e4
 8007cd4:	080104f4 	.word	0x080104f4
 8007cd8:	08010498 	.word	0x08010498
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007cea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007d06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d28:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d32:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d36:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d3a:	6809      	ldr	r1, [r1, #0]
 8007d3c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d40:	2300      	movs	r3, #0
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d4a:	9102      	str	r1, [sp, #8]
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4633      	mov	r3, r6
 8007d54:	462a      	mov	r2, r5
 8007d56:	4621      	mov	r1, r4
 8007d58:	f006 fb2a 	bl	800e3b0 <FT_String_ND>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d112      	bne.n	8007d88 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 81f3 	beq.w	800815c <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007d86:	e1e9      	b.n	800815c <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	220d      	movs	r2, #13
 8007d94:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007daa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dd0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dd4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007dde:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007de2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007de6:	6809      	ldr	r1, [r1, #0]
 8007de8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007dec:	2600      	movs	r6, #0
 8007dee:	9604      	str	r6, [sp, #16]
 8007df0:	9103      	str	r1, [sp, #12]
 8007df2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007df6:	9102      	str	r1, [sp, #8]
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	4aaf      	ldr	r2, [pc, #700]	; (80080bc <AT_ESP8266_ND+0x1750>)
 8007e00:	4621      	mov	r1, r4
 8007e02:	f006 fad5 	bl	800e3b0 <FT_String_ND>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d112      	bne.n	8007e32 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007e0c:	2312      	movs	r3, #18
 8007e0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007e30:	e194      	b.n	800815c <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	220d      	movs	r2, #13
 8007e3e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e7a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e7e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e88:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e8c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e90:	6809      	ldr	r1, [r1, #0]
 8007e92:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e96:	2600      	movs	r6, #0
 8007e98:	9604      	str	r6, [sp, #16]
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ea0:	9102      	str	r1, [sp, #8]
 8007ea2:	9201      	str	r2, [sp, #4]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	4a85      	ldr	r2, [pc, #532]	; (80080c0 <AT_ESP8266_ND+0x1754>)
 8007eaa:	4621      	mov	r1, r4
 8007eac:	f006 fa80 	bl	800e3b0 <FT_String_ND>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d112      	bne.n	8007edc <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007eda:	e13f      	b.n	800815c <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	220e      	movs	r2, #14
 8007ee8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007efa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f24:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f28:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f32:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f36:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f3a:	6809      	ldr	r1, [r1, #0]
 8007f3c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f40:	2600      	movs	r6, #0
 8007f42:	9604      	str	r6, [sp, #16]
 8007f44:	9103      	str	r1, [sp, #12]
 8007f46:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f4a:	9102      	str	r1, [sp, #8]
 8007f4c:	9201      	str	r2, [sp, #4]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	462b      	mov	r3, r5
 8007f52:	4a5c      	ldr	r2, [pc, #368]	; (80080c4 <AT_ESP8266_ND+0x1758>)
 8007f54:	4621      	mov	r1, r4
 8007f56:	f006 fa2b 	bl	800e3b0 <FT_String_ND>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d112      	bne.n	8007f86 <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007f7e:	230b      	movs	r3, #11
 8007f80:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f84:	e0ea      	b.n	800815c <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	220a      	movs	r2, #10
 8007f92:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fd2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fdc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fe0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fe4:	6809      	ldr	r1, [r1, #0]
 8007fe6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fea:	2600      	movs	r6, #0
 8007fec:	9604      	str	r6, [sp, #16]
 8007fee:	9103      	str	r1, [sp, #12]
 8007ff0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ff4:	9102      	str	r1, [sp, #8]
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	4a32      	ldr	r2, [pc, #200]	; (80080c8 <AT_ESP8266_ND+0x175c>)
 8007ffe:	4621      	mov	r1, r4
 8008000:	f006 f9d6 	bl	800e3b0 <FT_String_ND>
 8008004:	4603      	mov	r3, r0
 8008006:	2b01      	cmp	r3, #1
 8008008:	d112      	bne.n	8008030 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 800800a:	2318      	movs	r3, #24
 800800c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008010:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008014:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 800802e:	e095      	b.n	800815c <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008034:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2208      	movs	r2, #8
 800803c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800804e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800805c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800806a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008078:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800807c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008086:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800808a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800808e:	6809      	ldr	r1, [r1, #0]
 8008090:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008094:	2600      	movs	r6, #0
 8008096:	9604      	str	r6, [sp, #16]
 8008098:	9103      	str	r1, [sp, #12]
 800809a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800809e:	9102      	str	r1, [sp, #8]
 80080a0:	9201      	str	r2, [sp, #4]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	462b      	mov	r3, r5
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <AT_ESP8266_ND+0x1760>)
 80080a8:	4621      	mov	r1, r4
 80080aa:	f006 f981 	bl	800e3b0 <FT_String_ND>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d10d      	bne.n	80080d0 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 80080b4:	2303      	movs	r3, #3
 80080b6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80080ba:	e04f      	b.n	800815c <AT_ESP8266_ND+0x17f0>
 80080bc:	08010500 	.word	0x08010500
 80080c0:	08010510 	.word	0x08010510
 80080c4:	08010520 	.word	0x08010520
 80080c8:	08010530 	.word	0x08010530
 80080cc:	0801053c 	.word	0x0801053c
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80080d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2209      	movs	r2, #9
 80080dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80080e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80080ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80080fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008100:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800810a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008118:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800811c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008126:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800812a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800812e:	6809      	ldr	r1, [r1, #0]
 8008130:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008134:	2600      	movs	r6, #0
 8008136:	9604      	str	r6, [sp, #16]
 8008138:	9103      	str	r1, [sp, #12]
 800813a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800813e:	9102      	str	r1, [sp, #8]
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	462b      	mov	r3, r5
 8008146:	4a77      	ldr	r2, [pc, #476]	; (8008324 <AT_ESP8266_ND+0x19b8>)
 8008148:	4621      	mov	r1, r4
 800814a:	f006 f931 	bl	800e3b0 <FT_String_ND>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d103      	bne.n	800815c <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8008154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008158:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800815c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800816a:	3b01      	subs	r3, #1
 800816c:	2b08      	cmp	r3, #8
 800816e:	f201 84c6 	bhi.w	8009afe <AT_ESP8266_ND+0x3192>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <AT_ESP8266_ND+0x180c>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	0800819d 	.word	0x0800819d
 800817c:	0800832d 	.word	0x0800832d
 8008180:	080085af 	.word	0x080085af
 8008184:	0800872d 	.word	0x0800872d
 8008188:	08008905 	.word	0x08008905
 800818c:	08008bd9 	.word	0x08008bd9
 8008190:	08008e91 	.word	0x08008e91
 8008194:	080093a9 	.word	0x080093a9
 8008198:	0800957f 	.word	0x0800957f
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800819c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80081ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d14f      	bne.n	800825e <AT_ESP8266_ND+0x18f2>
 80081be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d04b      	beq.n	800825e <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80081c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d047      	beq.n	800825e <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 80081ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d043      	beq.n	800825e <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80081d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081da:	2b13      	cmp	r3, #19
 80081dc:	d03f      	beq.n	800825e <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80081de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80081fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800820c:	4620      	mov	r0, r4
 800820e:	f7f7 fff1 	bl	80001f4 <strlen>
 8008212:	4603      	mov	r3, r0
 8008214:	4423      	add	r3, r4
 8008216:	4a44      	ldr	r2, [pc, #272]	; (8008328 <AT_ESP8266_ND+0x19bc>)
 8008218:	461c      	mov	r4, r3
 800821a:	4613      	mov	r3, r2
 800821c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	6061      	str	r1, [r4, #4]
 8008222:	60a2      	str	r2, [r4, #8]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008236:	4618      	mov	r0, r3
 8008238:	f7f7 ffdc 	bl	80001f4 <strlen>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800824e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2264      	movs	r2, #100	; 0x64
 800825a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800825e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 800827c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11b      	bne.n	80082c6 <AT_ESP8266_ND+0x195a>
 800828e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d023      	beq.n	80082de <AT_ESP8266_ND+0x1972>
 8008296:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800829a:	2b1c      	cmp	r3, #28
 800829c:	d01f      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 800829e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d01b      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 80082a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d017      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80082ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b2:	2b0b      	cmp	r3, #11
 80082b4:	d013      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80082b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ba:	2b0c      	cmp	r3, #12
 80082bc:	d00f      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80082be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c2:	2b13      	cmp	r3, #19
 80082c4:	d00b      	beq.n	80082de <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80082d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d8:	4293      	cmp	r3, r2
 80082da:	f341 841a 	ble.w	8009b12 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80082de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80082ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80082f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008310:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008314:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008320:	f001 bbf7 	b.w	8009b12 <AT_ESP8266_ND+0x31a6>
 8008324:	08010548 	.word	0x08010548
 8008328:	08010554 	.word	0x08010554
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800832c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800833c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008340:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800834a:	2b01      	cmp	r3, #1
 800834c:	f040 80c8 	bne.w	80084e0 <AT_ESP8266_ND+0x1b74>
 8008350:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008354:	2b01      	cmp	r3, #1
 8008356:	f000 80c3 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 800835a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800835e:	2b02      	cmp	r3, #2
 8008360:	f000 80be 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8008364:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008368:	2b03      	cmp	r3, #3
 800836a:	f000 80b9 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 800836e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008372:	2b04      	cmp	r3, #4
 8008374:	f000 80b4 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 8008378:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800837c:	2b0a      	cmp	r3, #10
 800837e:	f000 80af 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008382:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008386:	2b0b      	cmp	r3, #11
 8008388:	f000 80aa 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 800838c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008390:	2b0c      	cmp	r3, #12
 8008392:	f000 80a5 	beq.w	80084e0 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 8008396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80083a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80083b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083c4:	4620      	mov	r0, r4
 80083c6:	f7f7 ff15 	bl	80001f4 <strlen>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4423      	add	r3, r4
 80083ce:	49d5      	ldr	r1, [pc, #852]	; (8008724 <AT_ESP8266_ND+0x1db8>)
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	cb03      	ldmia	r3!, {r0, r1}
 80083d6:	6010      	str	r0, [r2, #0]
 80083d8:	6051      	str	r1, [r2, #4]
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80083de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083ec:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80083f0:	2201      	movs	r2, #1
 80083f2:	4618      	mov	r0, r3
 80083f4:	f006 fddd 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80083f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	1d9d      	adds	r5, r3, #6
 8008412:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008416:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3306      	adds	r3, #6
 800841e:	4618      	mov	r0, r3
 8008420:	f7f7 fee8 	bl	80001f4 <strlen>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f006 fdc1 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008430:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008434:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800843e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008442:	4618      	mov	r0, r3
 8008444:	f7f7 fed6 	bl	80001f4 <strlen>
 8008448:	4602      	mov	r2, r0
 800844a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800844e:	4619      	mov	r1, r3
 8008450:	4620      	mov	r0, r4
 8008452:	f006 fdae 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008464:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008468:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008476:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3326      	adds	r3, #38	; 0x26
 800847e:	4618      	mov	r0, r3
 8008480:	f7f7 feb8 	bl	80001f4 <strlen>
 8008484:	4603      	mov	r3, r0
 8008486:	461a      	mov	r2, r3
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f006 fd91 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800849e:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80084a2:	2203      	movs	r2, #3
 80084a4:	4618      	mov	r0, r3
 80084a6:	f006 fd84 	bl	800efb2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80084aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7f7 fe9b 	bl	80001f4 <strlen>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80084d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	22c8      	movs	r2, #200	; 0xc8
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80084e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80084fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11b      	bne.n	8008548 <AT_ESP8266_ND+0x1bdc>
 8008510:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d023      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
 8008518:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800851c:	2b02      	cmp	r3, #2
 800851e:	d01f      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008520:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008524:	2b03      	cmp	r3, #3
 8008526:	d01b      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8008528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852c:	2b04      	cmp	r3, #4
 800852e:	d017      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008530:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008534:	2b0a      	cmp	r3, #10
 8008536:	d013      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 8008538:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853c:	2b0b      	cmp	r3, #11
 800853e:	d00f      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008540:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008544:	2b0c      	cmp	r3, #12
 8008546:	d00b      	beq.n	8008560 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008556:	f644 6220 	movw	r2, #20000	; 0x4e20
 800855a:	4293      	cmp	r3, r2
 800855c:	f341 82db 	ble.w	8009b16 <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008576:	2b0a      	cmp	r3, #10
 8008578:	d00f      	beq.n	800859a <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800857a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800858a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800859a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800859e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80085aa:	f001 bab4 	b.w	8009b16 <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80085be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d14d      	bne.n	800866c <AT_ESP8266_ND+0x1d00>
 80085d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d049      	beq.n	800866c <AT_ESP8266_ND+0x1d00>
 80085d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085dc:	2b0a      	cmp	r3, #10
 80085de:	d045      	beq.n	800866c <AT_ESP8266_ND+0x1d00>
 80085e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085e4:	2b0d      	cmp	r3, #13
 80085e6:	d041      	beq.n	800866c <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80085e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008616:	4620      	mov	r0, r4
 8008618:	f7f7 fdec 	bl	80001f4 <strlen>
 800861c:	4603      	mov	r3, r0
 800861e:	4423      	add	r3, r4
 8008620:	4941      	ldr	r1, [pc, #260]	; (8008728 <AT_ESP8266_ND+0x1dbc>)
 8008622:	461a      	mov	r2, r3
 8008624:	460b      	mov	r3, r1
 8008626:	cb03      	ldmia	r3!, {r0, r1}
 8008628:	6010      	str	r0, [r2, #0]
 800862a:	6051      	str	r1, [r2, #4]
 800862c:	8819      	ldrh	r1, [r3, #0]
 800862e:	789b      	ldrb	r3, [r3, #2]
 8008630:	8111      	strh	r1, [r2, #8]
 8008632:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008642:	4618      	mov	r0, r3
 8008644:	f7f7 fdd6 	bl	80001f4 <strlen>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800865a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800866c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800868a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <AT_ESP8266_ND+0x1d58>
 800869c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a0:	2b0a      	cmp	r3, #10
 80086a2:	d01b      	beq.n	80086dc <AT_ESP8266_ND+0x1d70>
 80086a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a8:	2b0b      	cmp	r3, #11
 80086aa:	d017      	beq.n	80086dc <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 80086ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b0:	2b0c      	cmp	r3, #12
 80086b2:	d013      	beq.n	80086dc <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 80086b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d00f      	beq.n	80086dc <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 80086bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c0:	2b0d      	cmp	r3, #13
 80086c2:	d00b      	beq.n	80086dc <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80086c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80086d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d6:	4293      	cmp	r3, r2
 80086d8:	f341 821f 	ble.w	8009b1a <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80086dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80086ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80086fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800870e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008712:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2200      	movs	r2, #0
 800871a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800871e:	f001 b9fc 	b.w	8009b1a <AT_ESP8266_ND+0x31ae>
 8008722:	bf00      	nop
 8008724:	08010564 	.word	0x08010564
 8008728:	08010570 	.word	0x08010570
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 800873c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008740:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800874a:	2b01      	cmp	r3, #1
 800874c:	d16b      	bne.n	8008826 <AT_ESP8266_ND+0x1eba>
 800874e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008752:	2b04      	cmp	r3, #4
 8008754:	d067      	beq.n	8008826 <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 8008756:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800875a:	2b01      	cmp	r3, #1
 800875c:	d063      	beq.n	8008826 <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 800875e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008762:	2b02      	cmp	r3, #2
 8008764:	d05f      	beq.n	8008826 <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 8008766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008794:	2b01      	cmp	r3, #1
 8008796:	d115      	bne.n	80087c4 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7f7 fd24 	bl	80001f4 <strlen>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4423      	add	r3, r4
 80087b0:	4a52      	ldr	r2, [pc, #328]	; (80088fc <AT_ESP8266_ND+0x1f90>)
 80087b2:	461c      	mov	r4, r3
 80087b4:	4613      	mov	r3, r2
 80087b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087b8:	6020      	str	r0, [r4, #0]
 80087ba:	6061      	str	r1, [r4, #4]
 80087bc:	60a2      	str	r2, [r4, #8]
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	e014      	b.n	80087ee <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80087c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7f7 fd0e 	bl	80001f4 <strlen>
 80087d8:	4603      	mov	r3, r0
 80087da:	4423      	add	r3, r4
 80087dc:	4a48      	ldr	r2, [pc, #288]	; (8008900 <AT_ESP8266_ND+0x1f94>)
 80087de:	461c      	mov	r4, r3
 80087e0:	4613      	mov	r3, r2
 80087e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087e4:	6020      	str	r0, [r4, #0]
 80087e6:	6061      	str	r1, [r4, #4]
 80087e8:	60a2      	str	r2, [r4, #8]
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80087ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f7 fcf9 	bl	80001f4 <strlen>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d123      	bne.n	800889e <AT_ESP8266_ND+0x1f32>
 8008856:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d02b      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
 800885e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008862:	2b0b      	cmp	r3, #11
 8008864:	d027      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 8008866:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800886a:	2b0c      	cmp	r3, #12
 800886c:	d023      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 800886e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008872:	2b04      	cmp	r3, #4
 8008874:	d01f      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 8008876:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800887a:	2b02      	cmp	r3, #2
 800887c:	d01b      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 800887e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008882:	2b07      	cmp	r3, #7
 8008884:	d017      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008886:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800888a:	2b08      	cmp	r3, #8
 800888c:	d013      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 800888e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008892:	2b1e      	cmp	r3, #30
 8008894:	d00f      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008896:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800889a:	2b1f      	cmp	r3, #31
 800889c:	d00b      	beq.n	80088b6 <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80088ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b0:	4293      	cmp	r3, r2
 80088b2:	f341 8134 	ble.w	8009b1e <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80088b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80088c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80088c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80088d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80088e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80088f8:	f001 b911 	b.w	8009b1e <AT_ESP8266_ND+0x31b2>
 80088fc:	0801057c 	.word	0x0801057c
 8008900:	0801058c 	.word	0x0801058c
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008922:	2b01      	cmp	r3, #1
 8008924:	f040 80f3 	bne.w	8008b0e <AT_ESP8266_ND+0x21a2>
 8008928:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800892c:	2b04      	cmp	r3, #4
 800892e:	f000 80ee 	beq.w	8008b0e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 8008932:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008936:	2b01      	cmp	r3, #1
 8008938:	f000 80e9 	beq.w	8008b0e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 800893c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008940:	2b02      	cmp	r3, #2
 8008942:	f000 80e4 	beq.w	8008b0e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 8008946:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800894a:	2b21      	cmp	r3, #33	; 0x21
 800894c:	f000 80df 	beq.w	8008b0e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008950:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008954:	2b1b      	cmp	r3, #27
 8008956:	f000 80da 	beq.w	8008b0e <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 800895a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800896a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2201      	movs	r2, #1
 8008976:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 800897a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008988:	4620      	mov	r0, r4
 800898a:	f7f7 fc33 	bl	80001f4 <strlen>
 800898e:	4603      	mov	r3, r0
 8008990:	4423      	add	r3, r4
 8008992:	4990      	ldr	r1, [pc, #576]	; (8008bd4 <AT_ESP8266_ND+0x2268>)
 8008994:	461a      	mov	r2, r3
 8008996:	460b      	mov	r3, r1
 8008998:	cb03      	ldmia	r3!, {r0, r1}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	6051      	str	r1, [r2, #4]
 800899e:	8819      	ldrh	r1, [r3, #0]
 80089a0:	789b      	ldrb	r3, [r3, #2]
 80089a2:	8111      	strh	r1, [r2, #8]
 80089a4:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80089a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089b4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80089b8:	2201      	movs	r2, #1
 80089ba:	4618      	mov	r0, r3
 80089bc:	f006 faf9 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80089c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80089dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	334c      	adds	r3, #76	; 0x4c
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f7 fc03 	bl	80001f4 <strlen>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	4629      	mov	r1, r5
 80089f4:	4620      	mov	r0, r4
 80089f6:	f006 fadc 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,separador,3);
 80089fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a08:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f006 facf 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3362      	adds	r3, #98	; 0x62
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7f7 fbd9 	bl	80001f4 <strlen>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	4629      	mov	r1, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f006 fab2 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a5c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008a60:	2203      	movs	r2, #3
 8008a62:	4618      	mov	r0, r3
 8008a64:	f006 faa5 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3372      	adds	r3, #114	; 0x72
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7f7 fbaf 	bl	80001f4 <strlen>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f006 fa88 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ab0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f006 fa7b 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008aca:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ace:	2202      	movs	r2, #2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f006 fa6e 	bl	800efb2 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f7 fb85 	bl	80001f4 <strlen>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d11b      	bne.n	8008b76 <AT_ESP8266_ND+0x220a>
 8008b3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d023      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
 8008b46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b4a:	2b0b      	cmp	r3, #11
 8008b4c:	d01f      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008b4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b52:	2b0c      	cmp	r3, #12
 8008b54:	d01b      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008b56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d017      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008b5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d013      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008b66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b6a:	2b21      	cmp	r3, #33	; 0x21
 8008b6c:	d00f      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008b6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b72:	2b1b      	cmp	r3, #27
 8008b74:	d00b      	beq.n	8008b8e <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	f340 87ca 	ble.w	8009b22 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bd0:	f000 bfa7 	b.w	8009b22 <AT_ESP8266_ND+0x31b6>
 8008bd4:	0801047c 	.word	0x0801047c
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008be8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	f040 80e2 	bne.w	8008dc0 <AT_ESP8266_ND+0x2454>
 8008bfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c00:	2b0b      	cmp	r3, #11
 8008c02:	f000 80dd 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008c06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c0a:	2b0c      	cmp	r3, #12
 8008c0c:	f000 80d8 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008c10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c14:	2b0e      	cmp	r3, #14
 8008c16:	f000 80d3 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008c1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c1e:	2b0f      	cmp	r3, #15
 8008c20:	f000 80ce 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008c24:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	f000 80c9 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f000 80c4 	beq.w	8008dc0 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7f7 fac4 	bl	80001f4 <strlen>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4423      	add	r3, r4
 8008c70:	4aa1      	ldr	r2, [pc, #644]	; (8008ef8 <AT_ESP8266_ND+0x258c>)
 8008c72:	461c      	mov	r4, r3
 8008c74:	4613      	mov	r3, r2
 8008c76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c78:	6020      	str	r0, [r4, #0]
 8008c7a:	6061      	str	r1, [r4, #4]
 8008c7c:	60a2      	str	r2, [r4, #8]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c90:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c94:	2201      	movs	r2, #1
 8008c96:	4618      	mov	r0, r3
 8008c98:	f006 f98b 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7f7 faa2 	bl	80001f4 <strlen>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4423      	add	r3, r4
 8008cb4:	4a91      	ldr	r2, [pc, #580]	; (8008efc <AT_ESP8266_ND+0x2590>)
 8008cb6:	6810      	ldr	r0, [r2, #0]
 8008cb8:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cc8:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ccc:	2203      	movs	r2, #3
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f006 f96f 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3336      	adds	r3, #54	; 0x36
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7f7 fa79 	bl	80001f4 <strlen>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	4629      	mov	r1, r5
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f006 f952 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d1c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008d20:	2202      	movs	r2, #2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f006 f945 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3346      	adds	r3, #70	; 0x46
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f7 fa4f 	bl	80001f4 <strlen>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f006 f928 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d70:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f7 fa3d 	bl	80001f4 <strlen>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d80:	4619      	mov	r1, r3
 8008d82:	4620      	mov	r0, r4
 8008d84:	f006 f915 	bl	800efb2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f7 fa2c 	bl	80001f4 <strlen>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d120      	bne.n	8008e32 <AT_ESP8266_ND+0x24c6>
 8008df0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008df4:	2b0a      	cmp	r3, #10
 8008df6:	d028      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
 8008df8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dfc:	2b0b      	cmp	r3, #11
 8008dfe:	d024      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008e00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e04:	2b0c      	cmp	r3, #12
 8008e06:	d020      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008e08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e0c:	2b0e      	cmp	r3, #14
 8008e0e:	d01c      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008e10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e14:	2b0f      	cmp	r3, #15
 8008e16:	d018      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008e18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d014      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008e20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d010      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008e28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e30:	d00b      	beq.n	8008e4a <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	4293      	cmp	r3, r2
 8008e46:	f340 866e 	ble.w	8009b26 <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008e8c:	f000 be4b 	b.w	8009b26 <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e94:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008ea0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ea4:	2b10      	cmp	r3, #16
 8008ea6:	d003      	beq.n	8008eb0 <AT_ESP8266_ND+0x2544>
 8008ea8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eac:	2b0a      	cmp	r3, #10
 8008eae:	d127      	bne.n	8008f00 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008ef2:	f000 be1a 	b.w	8009b2a <AT_ESP8266_ND+0x31be>
 8008ef6:	bf00      	nop
 8008ef8:	0801059c 	.word	0x0801059c
 8008efc:	080105ac 	.word	0x080105ac
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	f040 80d1 	bne.w	80090b6 <AT_ESP8266_ND+0x274a>
 8008f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 80c7 	bne.w	80090b6 <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2218      	movs	r2, #24
 8008f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7f7 f925 	bl	80001f4 <strlen>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4423      	add	r3, r4
 8008fae:	4abe      	ldr	r2, [pc, #760]	; (80092a8 <AT_ESP8266_ND+0x293c>)
 8008fb0:	461c      	mov	r4, r3
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fb6:	6020      	str	r0, [r4, #0]
 8008fb8:	6061      	str	r1, [r4, #4]
 8008fba:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008fbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008fca:	f107 0214 	add.w	r2, r7, #20
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f005 fd1f 	bl	800ea14 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f7 f903 	bl	80001f4 <strlen>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f107 0314 	add.w	r3, r7, #20
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f005 ffdb 	bl	800efb2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800900a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f006 f8aa 	bl	800f174 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800902e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009032:	2202      	movs	r2, #2
 8009034:	4618      	mov	r0, r3
 8009036:	f005 ffbc 	bl	800efb2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800903a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009048:	4618      	mov	r0, r3
 800904a:	f7f7 f8d3 	bl	80001f4 <strlen>
 800904e:	4603      	mov	r3, r0
 8009050:	461a      	mov	r2, r3
 8009052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009056:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 800906e:	4620      	mov	r0, r4
 8009070:	f7f7 f8c0 	bl	80001f4 <strlen>
 8009074:	4603      	mov	r3, r0
 8009076:	4423      	add	r3, r4
 8009078:	4a8c      	ldr	r2, [pc, #560]	; (80092ac <AT_ESP8266_ND+0x2940>)
 800907a:	461c      	mov	r4, r3
 800907c:	4613      	mov	r3, r2
 800907e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009080:	6020      	str	r0, [r4, #0]
 8009082:	6061      	str	r1, [r4, #4]
 8009084:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 80090a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80090b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80090b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80090d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 80a6 	bne.w	8009234 <AT_ESP8266_ND+0x28c8>
 80090e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ec:	2b13      	cmp	r3, #19
 80090ee:	f000 80a1 	beq.w	8009234 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80090f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7f7 f865 	bl	80001e0 <strcmp>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01b      	beq.n	8009154 <AT_ESP8266_ND+0x27e8>
 800911c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d017      	beq.n	8009154 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009124:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009128:	2b14      	cmp	r3, #20
 800912a:	d013      	beq.n	8009154 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800912c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800913a:	f241 3288 	movw	r2, #5000	; 0x1388
 800913e:	4293      	cmp	r3, r2
 8009140:	dd78      	ble.n	8009234 <AT_ESP8266_ND+0x28c8>
 8009142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009150:	2b01      	cmp	r3, #1
 8009152:	d16f      	bne.n	8009234 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009162:	f241 3288 	movw	r2, #5000	; 0x1388
 8009166:	4293      	cmp	r3, r2
 8009168:	dd0e      	ble.n	8009188 <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800916a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80091a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80091c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80091d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80091e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80091f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80091fe:	2361      	movs	r3, #97	; 0x61
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	2301      	movs	r3, #1
 8009204:	f005 fc82 	bl	800eb0c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009208:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009242:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009246:	f040 8470 	bne.w	8009b2a <AT_ESP8266_ND+0x31be>
 800924a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800924e:	2b13      	cmp	r3, #19
 8009250:	d02e      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
 8009252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009260:	f241 3288 	movw	r2, #5000	; 0x1388
 8009264:	4293      	cmp	r3, r2
 8009266:	dc23      	bgt.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 8009268:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800926c:	2b0a      	cmp	r3, #10
 800926e:	d01f      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8009270:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009274:	2b0b      	cmp	r3, #11
 8009276:	d01b      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 8009278:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800927c:	2b0c      	cmp	r3, #12
 800927e:	d017      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009280:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009284:	2b10      	cmp	r3, #16
 8009286:	d013      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 8009288:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800928c:	2b11      	cmp	r3, #17
 800928e:	d00f      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009290:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009294:	2b12      	cmp	r3, #18
 8009296:	d00b      	beq.n	80092b0 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 8009298:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800929c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a0:	f040 8443 	bne.w	8009b2a <AT_ESP8266_ND+0x31be>
 80092a4:	e004      	b.n	80092b0 <AT_ESP8266_ND+0x2944>
 80092a6:	bf00      	nop
 80092a8:	080105b0 	.word	0x080105b0
 80092ac:	080105bc 	.word	0x080105bc
									a->_debug_count5++;
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80092ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	dd25      	ble.n	8009330 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009302:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009306:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800933e:	2b02      	cmp	r3, #2
 8009340:	dd10      	ble.n	8009364 <AT_ESP8266_ND+0x29f8>
 8009342:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009346:	2b10      	cmp	r3, #16
 8009348:	d00c      	beq.n	8009364 <AT_ESP8266_ND+0x29f8>
 800934a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800934e:	2b0a      	cmp	r3, #10
 8009350:	d008      	beq.n	8009364 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	220f      	movs	r2, #15
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009362:	e008      	b.n	8009376 <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009364:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009368:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009376:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80093a6:	e3c0      	b.n	8009b2a <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80093a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80093b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d16f      	bne.n	80094aa <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 80093ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80093da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80093ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7f6 fefb 	bl	80001f4 <strlen>
 80093fe:	4603      	mov	r3, r0
 8009400:	4423      	add	r3, r4
 8009402:	4a78      	ldr	r2, [pc, #480]	; (80095e4 <AT_ESP8266_ND+0x2c78>)
 8009404:	461c      	mov	r4, r3
 8009406:	4615      	mov	r5, r2
 8009408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	6061      	str	r1, [r4, #4]
 800940e:	60a2      	str	r2, [r4, #8]
 8009410:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009412:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009416:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800942e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	335c      	adds	r3, #92	; 0x5c
 800943a:	4618      	mov	r0, r3
 800943c:	f7f6 feda 	bl	80001f4 <strlen>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	4629      	mov	r1, r5
 8009446:	4620      	mov	r0, r4
 8009448:	f005 fdb3 	bl	800efb2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800944c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800945a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800945e:	4618      	mov	r0, r3
 8009460:	f7f6 fec8 	bl	80001f4 <strlen>
 8009464:	4602      	mov	r2, r0
 8009466:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800946a:	4619      	mov	r1, r3
 800946c:	4620      	mov	r0, r4
 800946e:	f005 fda0 	bl	800efb2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009476:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009480:	4618      	mov	r0, r3
 8009482:	f7f6 feb7 	bl	80001f4 <strlen>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80094a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80094aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80094c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d123      	bne.n	8009522 <AT_ESP8266_ND+0x2bb6>
 80094da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094de:	2b0a      	cmp	r3, #10
 80094e0:	d02b      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 80094e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e6:	2b0b      	cmp	r3, #11
 80094e8:	d027      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 80094ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094ee:	2b0c      	cmp	r3, #12
 80094f0:	d023      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 80094f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094f6:	2b0e      	cmp	r3, #14
 80094f8:	d01f      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 80094fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d01b      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 8009502:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009506:	2b10      	cmp	r3, #16
 8009508:	d017      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 800950a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800950e:	2b15      	cmp	r3, #21
 8009510:	d013      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 8009512:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009516:	2b16      	cmp	r3, #22
 8009518:	d00f      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 800951a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800951e:	2b17      	cmp	r3, #23
 8009520:	d00b      	beq.n	800953a <AT_ESP8266_ND+0x2bce>
 8009522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	4293      	cmp	r3, r2
 8009536:	f340 82fa 	ble.w	8009b2e <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800953a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800954c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009550:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800955c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 800957c:	e2d7      	b.n	8009b2e <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800957e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009582:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 800958e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009592:	2b10      	cmp	r3, #16
 8009594:	d003      	beq.n	800959e <AT_ESP8266_ND+0x2c32>
 8009596:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800959a:	2b0a      	cmp	r3, #10
 800959c:	d124      	bne.n	80095e8 <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 800959e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80095ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80095b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80095d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80095e0:	e2a7      	b.n	8009b32 <AT_ESP8266_ND+0x31c6>
 80095e2:	bf00      	nop
 80095e4:	080105c8 	.word	0x080105c8
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80095e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	f040 8102 	bne.w	8009800 <AT_ESP8266_ND+0x2e94>
 80095fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80f8 	bne.w	8009800 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2201      	movs	r2, #1
 800961c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2218      	movs	r2, #24
 800962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800965e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009662:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800966e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800967e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800968c:	4620      	mov	r0, r4
 800968e:	f7f6 fdb1 	bl	80001f4 <strlen>
 8009692:	4603      	mov	r3, r0
 8009694:	4423      	add	r3, r4
 8009696:	4a83      	ldr	r2, [pc, #524]	; (80098a4 <AT_ESP8266_ND+0x2f38>)
 8009698:	461c      	mov	r4, r3
 800969a:	4613      	mov	r3, r2
 800969c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800969e:	6020      	str	r0, [r4, #0]
 80096a0:	6061      	str	r1, [r4, #4]
 80096a2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80096a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80096b2:	f107 020c 	add.w	r2, r7, #12
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f005 f9ab 	bl	800ea14 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80096be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7f6 fd8f 	bl	80001f4 <strlen>
 80096d6:	4602      	mov	r2, r0
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	4619      	mov	r1, r3
 80096de:	4620      	mov	r0, r4
 80096e0:	f005 fc67 	bl	800efb2 <strncat>
										strncat(a->_uart2snd,",",1);
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7f6 fd7e 	bl	80001f4 <strlen>
 80096f8:	4603      	mov	r3, r0
 80096fa:	4423      	add	r3, r4
 80096fc:	496a      	ldr	r1, [pc, #424]	; (80098a8 <AT_ESP8266_ND+0x2f3c>)
 80096fe:	461a      	mov	r2, r3
 8009700:	460b      	mov	r3, r1
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009714:	f107 020c 	add.w	r2, r7, #12
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f005 f97a 	bl	800ea14 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800972e:	f107 030c 	add.w	r3, r7, #12
 8009732:	4618      	mov	r0, r3
 8009734:	f7f6 fd5e 	bl	80001f4 <strlen>
 8009738:	4602      	mov	r2, r0
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	4619      	mov	r1, r3
 8009740:	4620      	mov	r0, r4
 8009742:	f005 fc36 	bl	800efb2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009762:	4619      	mov	r1, r3
 8009764:	4610      	mov	r0, r2
 8009766:	f005 fd05 	bl	800f174 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800976a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009778:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800977c:	2202      	movs	r2, #2
 800977e:	4618      	mov	r0, r3
 8009780:	f005 fc17 	bl	800efb2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009792:	4618      	mov	r0, r3
 8009794:	f7f6 fd2e 	bl	80001f4 <strlen>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80097aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7f6 fd1b 	bl	80001f4 <strlen>
 80097be:	4603      	mov	r3, r0
 80097c0:	4423      	add	r3, r4
 80097c2:	4a3a      	ldr	r2, [pc, #232]	; (80098ac <AT_ESP8266_ND+0x2f40>)
 80097c4:	461c      	mov	r4, r3
 80097c6:	4613      	mov	r3, r2
 80097c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097ca:	6020      	str	r0, [r4, #0]
 80097cc:	6061      	str	r1, [r4, #4]
 80097ce:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80097d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80097ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800981e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 80b8 	bne.w	80099a2 <AT_ESP8266_ND+0x3036>
 8009832:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009836:	2b13      	cmp	r3, #19
 8009838:	f000 80b3 	beq.w	80099a2 <AT_ESP8266_ND+0x3036>
 800983c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f203 6294 	addw	r2, r3, #1684	; 0x694
 800984a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7f6 fcc0 	bl	80001e0 <strcmp>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d024      	beq.n	80098b0 <AT_ESP8266_ND+0x2f44>
 8009866:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800986a:	2b01      	cmp	r3, #1
 800986c:	d020      	beq.n	80098b0 <AT_ESP8266_ND+0x2f44>
 800986e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009872:	2b14      	cmp	r3, #20
 8009874:	d01c      	beq.n	80098b0 <AT_ESP8266_ND+0x2f44>
 8009876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009884:	f241 3288 	movw	r2, #5000	; 0x1388
 8009888:	4293      	cmp	r3, r2
 800988a:	f340 808a 	ble.w	80099a2 <AT_ESP8266_ND+0x3036>
 800988e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009892:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800989c:	2b01      	cmp	r3, #1
 800989e:	f040 8080 	bne.w	80099a2 <AT_ESP8266_ND+0x3036>
 80098a2:	e005      	b.n	80098b0 <AT_ESP8266_ND+0x2f44>
 80098a4:	080105b0 	.word	0x080105b0
 80098a8:	080105d8 	.word	0x080105d8
 80098ac:	080105bc 	.word	0x080105bc
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80098b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098be:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c2:	4293      	cmp	r3, r2
 80098c4:	dd17      	ble.n	80098f6 <AT_ESP8266_ND+0x2f8a>
 80098c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10e      	bne.n	80098f6 <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80098d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80098f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800990a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2201      	movs	r2, #1
 800993e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800995e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009962:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800996c:	2361      	movs	r3, #97	; 0x61
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	2301      	movs	r3, #1
 8009972:	f005 f8cb 	bl	800eb0c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800997a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 80099a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80099b4:	f040 80bd 	bne.w	8009b32 <AT_ESP8266_ND+0x31c6>
 80099b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099bc:	2b13      	cmp	r3, #19
 80099be:	d02b      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099c4:	2b0b      	cmp	r3, #11
 80099c6:	d027      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099cc:	2b0c      	cmp	r3, #12
 80099ce:	d023      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80099de:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e2:	4293      	cmp	r3, r2
 80099e4:	dc18      	bgt.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ea:	2b0a      	cmp	r3, #10
 80099ec:	d014      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d010      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099fa:	2b11      	cmp	r3, #17
 80099fc:	d00c      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 80099fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a02:	2b12      	cmp	r3, #18
 8009a04:	d008      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 8009a06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a0a:	2b16      	cmp	r3, #22
 8009a0c:	d004      	beq.n	8009a18 <AT_ESP8266_ND+0x30ac>
 8009a0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a12:	2b19      	cmp	r3, #25
 8009a14:	f040 808d 	bne.w	8009b32 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	dd25      	ble.n	8009a98 <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	dd07      	ble.n	8009aba <AT_ESP8266_ND+0x314e>
 8009aaa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009aae:	2b10      	cmp	r3, #16
 8009ab0:	d003      	beq.n	8009aba <AT_ESP8266_ND+0x314e>
 8009ab2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ab6:	2b0a      	cmp	r3, #10
 8009ab8:	d108      	bne.n	8009acc <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009aba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009abe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009afc:	e019      	b.n	8009b32 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009b10:	e010      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b12:	bf00      	nop
 8009b14:	e00e      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b16:	bf00      	nop
 8009b18:	e00c      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b1a:	bf00      	nop
 8009b1c:	e00a      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b1e:	bf00      	nop
 8009b20:	e008      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b22:	bf00      	nop
 8009b24:	e006      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b26:	bf00      	nop
 8009b28:	e004      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b2a:	bf00      	nop
 8009b2c:	e002      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <AT_ESP8266_ND+0x31c8>
			break;
 8009b32:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009b62:	4618      	mov	r0, r3
 8009b64:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b6c <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b7e:	f240 328d 	movw	r2, #909	; 0x38d
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f001 83c3 	beq.w	800b30e <WiFi_Conn_ND+0x17a2>
 8009b88:	f240 328d 	movw	r2, #909	; 0x38d
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	f301 8453 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009b92:	f240 3289 	movw	r2, #905	; 0x389
 8009b96:	4293      	cmp	r3, r2
 8009b98:	f001 8335 	beq.w	800b206 <WiFi_Conn_ND+0x169a>
 8009b9c:	f240 3289 	movw	r2, #905	; 0x389
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	f301 8449 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009ba6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009baa:	f001 8224 	beq.w	800aff6 <WiFi_Conn_ND+0x148a>
 8009bae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009bb2:	f301 8441 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009bb6:	f240 3229 	movw	r2, #809	; 0x329
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f301 843c 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009bc0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009bc4:	f280 80a5 	bge.w	8009d12 <WiFi_Conn_ND+0x1a6>
 8009bc8:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	f000 8776 	beq.w	800aabe <WiFi_Conn_ND+0xf52>
 8009bd2:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	f301 842e 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009bdc:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009be0:	4293      	cmp	r3, r2
 8009be2:	f000 86fc 	beq.w	800a9de <WiFi_Conn_ND+0xe72>
 8009be6:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f301 8424 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009bf0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009bf4:	f000 862b 	beq.w	800a84e <WiFi_Conn_ND+0xce2>
 8009bf8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009bfc:	f301 841c 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c00:	f240 2261 	movw	r2, #609	; 0x261
 8009c04:	4293      	cmp	r3, r2
 8009c06:	f000 85b1 	beq.w	800a76c <WiFi_Conn_ND+0xc00>
 8009c0a:	f240 2261 	movw	r2, #609	; 0x261
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	f301 8412 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c14:	f240 225d 	movw	r2, #605	; 0x25d
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	f000 8551 	beq.w	800a6c0 <WiFi_Conn_ND+0xb54>
 8009c1e:	f240 225d 	movw	r2, #605	; 0x25d
 8009c22:	4293      	cmp	r3, r2
 8009c24:	f301 8408 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c2c:	f000 84cf 	beq.w	800a5ce <WiFi_Conn_ND+0xa62>
 8009c30:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c34:	f301 8400 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c38:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	f000 846a 	beq.w	800a516 <WiFi_Conn_ND+0x9aa>
 8009c42:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009c46:	f281 83f7 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c4a:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	f000 8425 	beq.w	800a49e <WiFi_Conn_ND+0x932>
 8009c54:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009c58:	f281 83ee 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c60:	f000 83b0 	beq.w	800a3c4 <WiFi_Conn_ND+0x858>
 8009c64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c68:	f301 83e6 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c6c:	f240 1299 	movw	r2, #409	; 0x199
 8009c70:	4293      	cmp	r3, r2
 8009c72:	f000 8369 	beq.w	800a348 <WiFi_Conn_ND+0x7dc>
 8009c76:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009c7a:	f281 83dd 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c7e:	f240 1295 	movw	r2, #405	; 0x195
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f000 8329 	beq.w	800a2da <WiFi_Conn_ND+0x76e>
 8009c88:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009c8c:	f281 83d4 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009c90:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c94:	f000 82a0 	beq.w	800a1d8 <WiFi_Conn_ND+0x66c>
 8009c98:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c9c:	f301 83cc 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009ca0:	f240 1235 	movw	r2, #309	; 0x135
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	f000 8271 	beq.w	800a18c <WiFi_Conn_ND+0x620>
 8009caa:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009cae:	f281 83c3 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009cb2:	f240 1231 	movw	r2, #305	; 0x131
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	f000 8263 	beq.w	800a182 <WiFi_Conn_ND+0x616>
 8009cbc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009cc0:	f281 83ba 	bge.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009cc4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009cc8:	f000 8207 	beq.w	800a0da <WiFi_Conn_ND+0x56e>
 8009ccc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009cd0:	f301 83b2 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009cd4:	2bd1      	cmp	r3, #209	; 0xd1
 8009cd6:	f000 81a0 	beq.w	800a01a <WiFi_Conn_ND+0x4ae>
 8009cda:	2bd1      	cmp	r3, #209	; 0xd1
 8009cdc:	f301 83ac 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009ce0:	2bcd      	cmp	r3, #205	; 0xcd
 8009ce2:	f000 8170 	beq.w	8009fc6 <WiFi_Conn_ND+0x45a>
 8009ce6:	2bcd      	cmp	r3, #205	; 0xcd
 8009ce8:	f301 83a6 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009cec:	2bc8      	cmp	r3, #200	; 0xc8
 8009cee:	f000 80f1 	beq.w	8009ed4 <WiFi_Conn_ND+0x368>
 8009cf2:	2bc8      	cmp	r3, #200	; 0xc8
 8009cf4:	f301 83a0 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009cf8:	2b6d      	cmp	r3, #109	; 0x6d
 8009cfa:	f000 80b3 	beq.w	8009e64 <WiFi_Conn_ND+0x2f8>
 8009cfe:	2b6d      	cmp	r3, #109	; 0x6d
 8009d00:	f301 839a 	bgt.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009d04:	2b64      	cmp	r3, #100	; 0x64
 8009d06:	d021      	beq.n	8009d4c <WiFi_Conn_ND+0x1e0>
 8009d08:	2b69      	cmp	r3, #105	; 0x69
 8009d0a:	f000 8096 	beq.w	8009e3a <WiFi_Conn_ND+0x2ce>
 8009d0e:	f001 bb93 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009d12:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	f201 838e 	bhi.w	800b438 <WiFi_Conn_ND+0x18cc>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <WiFi_Conn_ND+0x1b8>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	0800abcb 	.word	0x0800abcb
 8009d28:	0800b439 	.word	0x0800b439
 8009d2c:	0800b439 	.word	0x0800b439
 8009d30:	0800b439 	.word	0x0800b439
 8009d34:	0800b439 	.word	0x0800b439
 8009d38:	0800ac99 	.word	0x0800ac99
 8009d3c:	0800ad39 	.word	0x0800ad39
 8009d40:	0800add9 	.word	0x0800add9
 8009d44:	0800ae79 	.word	0x0800ae79
 8009d48:	0800af19 	.word	0x0800af19
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d52:	2b64      	cmp	r3, #100	; 0x64
 8009d54:	d046      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d041      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d66:	2b1c      	cmp	r3, #28
 8009d68:	d03c      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d037      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d032      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d84:	2b13      	cmp	r3, #19
 8009d86:	d02d      	beq.n	8009de4 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7fc fc5f 	bl	800664c <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d14e      	bne.n	8009e36 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7fc fde7 	bl	800696c <AT_ESP8266_ND>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d109      	bne.n	8009dcc <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7f7 fbc6 	bl	8001558 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	2364      	movs	r3, #100	; 0x64
 8009ddc:	68b8      	ldr	r0, [r7, #8]
 8009dde:	f7fb fbb9 	bl	8005554 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009de2:	e028      	b.n	8009e36 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d004      	beq.n	8009df8 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009df4:	2b1c      	cmp	r3, #28
 8009df6:	d103      	bne.n	8009e00 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	226d      	movs	r2, #109	; 0x6d
 8009dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d00f      	beq.n	8009e2a <WiFi_Conn_ND+0x2be>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d00a      	beq.n	8009e2a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1a:	2b0b      	cmp	r3, #11
 8009e1c:	d005      	beq.n	8009e2a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e24:	2b0c      	cmp	r3, #12
 8009e26:	f041 82d8 	bne.w	800b3da <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2269      	movs	r2, #105	; 0x69
 8009e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009e32:	f001 bad2 	b.w	800b3da <WiFi_Conn_ND+0x186e>
 8009e36:	f001 bad0 	b.w	800b3da <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7fc fc06 	bl	800664c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2264      	movs	r2, #100	; 0x64
 8009e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009e60:	f001 baea 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00c      	beq.n	8009e88 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7fc fc18 	bl	80066a4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009e86:	e00e      	b.n	8009ea6 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7fc fbf5 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	22c8      	movs	r2, #200	; 0xc8
 8009e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	f041 8296 	bne.w	800b3de <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7fc fbca 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2264      	movs	r2, #100	; 0x64
 8009ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009ed0:	f001 ba85 	b.w	800b3de <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eda:	2bc8      	cmp	r3, #200	; 0xc8
 8009edc:	d04f      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d04a      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d045      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d040      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d03b      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0c:	2b0a      	cmp	r3, #10
 8009f0e:	d036      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	2b0b      	cmp	r3, #11
 8009f18:	d031      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f20:	2b0c      	cmp	r3, #12
 8009f22:	d02c      	beq.n	8009f7e <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fc fba7 	bl	8006678 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d124      	bne.n	8009f7e <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f7fc fd19 	bl	800696c <AT_ESP8266_ND>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d109      	bne.n	8009f68 <WiFi_Conn_ND+0x3fc>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7f7 faf8 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	2364      	movs	r3, #100	; 0x64
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f7fb faeb 	bl	8005554 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d004      	beq.n	8009f92 <WiFi_Conn_ND+0x426>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8e:	2b0c      	cmp	r3, #12
 8009f90:	d103      	bne.n	8009f9a <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	22d1      	movs	r2, #209	; 0xd1
 8009f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d00a      	beq.n	8009fba <WiFi_Conn_ND+0x44e>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d005      	beq.n	8009fba <WiFi_Conn_ND+0x44e>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb4:	2b20      	cmp	r3, #32
 8009fb6:	f041 8214 	bne.w	800b3e2 <WiFi_Conn_ND+0x1876>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	22cd      	movs	r2, #205	; 0xcd
 8009fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009fc2:	f001 ba0e 	b.w	800b3e2 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009fc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8009fca:	f7f8 fe0f 	bl	8002bec <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7fc fb52 	bl	8006678 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	22c8      	movs	r2, #200	; 0xc8
 8009fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	f041 81f7 	bne.w	800b3e6 <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fc fb27 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2264      	movs	r2, #100	; 0x64
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a016:	f001 b9e6 	b.w	800b3e6 <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d108      	bne.n	800a03e <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f240 3229 	movw	r2, #809	; 0x329
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	2b0a      	cmp	r3, #10
 800a046:	d004      	beq.n	800a052 <WiFi_Conn_ND+0x4e6>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04e:	2b0d      	cmp	r3, #13
 800a050:	d10a      	bne.n	800a068 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7fc fb10 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	22c8      	movs	r2, #200	; 0xc8
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d10e      	bne.n	800a090 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7fc faea 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2264      	movs	r2, #100	; 0x64
 800a07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7fc fb5a 	bl	8006754 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a0ba:	f001 b9bd 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7fc faf0 	bl	80066a4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a0ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a0d6:	f001 b9af 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a0e4:	d03b      	beq.n	800a15e <WiFi_Conn_ND+0x5f2>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d036      	beq.n	800a15e <WiFi_Conn_ND+0x5f2>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f6:	2b0a      	cmp	r3, #10
 800a0f8:	d031      	beq.n	800a15e <WiFi_Conn_ND+0x5f2>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a100:	2b0d      	cmp	r3, #13
 800a102:	d02c      	beq.n	800a15e <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7fc faf9 	bl	80066fc <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a110:	2b01      	cmp	r3, #1
 800a112:	d124      	bne.n	800a15e <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7fc fc29 	bl	800696c <AT_ESP8266_ND>
 800a11a:	4602      	mov	r2, r0
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a130:	2b01      	cmp	r3, #1
 800a132:	d109      	bne.n	800a148 <WiFi_Conn_ND+0x5dc>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7f7 fa08 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a154:	b29a      	uxth	r2, r3
 800a156:	2364      	movs	r3, #100	; 0x64
 800a158:	68b8      	ldr	r0, [r7, #8]
 800a15a:	f7fb f9fb 	bl	8005554 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a164:	2b0a      	cmp	r3, #10
 800a166:	d005      	beq.n	800a174 <WiFi_Conn_ND+0x608>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	2b0d      	cmp	r3, #13
 800a170:	f041 813b 	bne.w	800b3ea <WiFi_Conn_ND+0x187e>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f240 1235 	movw	r2, #309	; 0x135
 800a17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a17e:	f001 b934 	b.w	800b3ea <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7fc fa4c 	bl	8006620 <NOP>
			}
			break;
 800a188:	f001 b956 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7fc fa6f 	bl	8006678 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	22c8      	movs	r2, #200	; 0xc8
 800a19e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	f041 811c 	bne.w	800b3ee <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7fc fa48 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2264      	movs	r2, #100	; 0x64
 800a1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a1d4:	f001 b90b 	b.w	800b3ee <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1e2:	d04f      	beq.n	800a284 <WiFi_Conn_ND+0x718>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ea:	2b04      	cmp	r3, #4
 800a1ec:	d04a      	beq.n	800a284 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d045      	beq.n	800a284 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d040      	beq.n	800a284 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a208:	2b07      	cmp	r3, #7
 800a20a:	d03b      	beq.n	800a284 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a212:	2b08      	cmp	r3, #8
 800a214:	d036      	beq.n	800a284 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21c:	2b1e      	cmp	r3, #30
 800a21e:	d031      	beq.n	800a284 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	2b1f      	cmp	r3, #31
 800a228:	d02c      	beq.n	800a284 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7fc fa3a 	bl	80066a4 <MUX>
						if(b->_enviaruart==1)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a236:	2b01      	cmp	r3, #1
 800a238:	d124      	bne.n	800a284 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7fc fb96 	bl	800696c <AT_ESP8266_ND>
 800a240:	4602      	mov	r2, r0
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a256:	2b01      	cmp	r3, #1
 800a258:	d109      	bne.n	800a26e <WiFi_Conn_ND+0x702>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7f7 f975 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	2364      	movs	r3, #100	; 0x64
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f7fb f968 	bl	8005554 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d009      	beq.n	800a2a2 <WiFi_Conn_ND+0x736>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	2b07      	cmp	r3, #7
 800a296:	d004      	beq.n	800a2a2 <WiFi_Conn_ND+0x736>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d104      	bne.n	800a2ac <WiFi_Conn_ND+0x740>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f240 1299 	movw	r2, #409	; 0x199
 800a2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d00a      	beq.n	800a2cc <WiFi_Conn_ND+0x760>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2bc:	2b1e      	cmp	r3, #30
 800a2be:	d005      	beq.n	800a2cc <WiFi_Conn_ND+0x760>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c6:	2b1f      	cmp	r3, #31
 800a2c8:	f041 8093 	bne.w	800b3f2 <WiFi_Conn_ND+0x1886>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f240 1295 	movw	r2, #405	; 0x195
 800a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a2d6:	f001 b88c 	b.w	800b3f2 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7fc f9a0 	bl	8006620 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d112      	bne.n	800a310 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fc f9ae 	bl	800664c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2264      	movs	r2, #100	; 0x64
 800a2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a316:	2b0a      	cmp	r3, #10
 800a318:	d005      	beq.n	800a326 <WiFi_Conn_ND+0x7ba>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	2b0d      	cmp	r3, #13
 800a322:	f041 8068 	bne.w	800b3f6 <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7fc f9a6 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	22c8      	movs	r2, #200	; 0xc8
 800a330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a344:	f001 b857 	b.w	800b3f6 <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fc f969 	bl	8006620 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d10e      	bne.n	800a37e <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7fc f973 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2264      	movs	r2, #100	; 0x64
 800a36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a384:	2b0a      	cmp	r3, #10
 800a386:	d004      	beq.n	800a392 <WiFi_Conn_ND+0x826>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38e:	2b0d      	cmp	r3, #13
 800a390:	d10a      	bne.n	800a3a8 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7fc f970 	bl	8006678 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	22c8      	movs	r2, #200	; 0xc8
 800a39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7fc f991 	bl	80066d0 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a3c0:	f001 b83a 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a3ce:	d045      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d040      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d03b      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d036      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f4:	2b1b      	cmp	r3, #27
 800a3f6:	d031      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fe:	2b21      	cmp	r3, #33	; 0x21
 800a400:	d02c      	beq.n	800a45c <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7fc f964 	bl	80066d0 <IPDef>
						if(b->_enviaruart==1)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d124      	bne.n	800a45c <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f7fc faaa 	bl	800696c <AT_ESP8266_ND>
 800a418:	4602      	mov	r2, r0
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d109      	bne.n	800a446 <WiFi_Conn_ND+0x8da>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f7f7 f889 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a452:	b29a      	uxth	r2, r3
 800a454:	2364      	movs	r3, #100	; 0x64
 800a456:	68b8      	ldr	r0, [r7, #8]
 800a458:	f7fb f87c 	bl	8005554 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	2b01      	cmp	r3, #1
 800a464:	d004      	beq.n	800a470 <WiFi_Conn_ND+0x904>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	2b1b      	cmp	r3, #27
 800a46e:	d104      	bne.n	800a47a <WiFi_Conn_ND+0x90e>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a480:	2b02      	cmp	r3, #2
 800a482:	d005      	beq.n	800a490 <WiFi_Conn_ND+0x924>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48a:	2b21      	cmp	r3, #33	; 0x21
 800a48c:	f040 87b5 	bne.w	800b3fa <WiFi_Conn_ND+0x188e>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a49a:	f000 bfae 	b.w	800b3fa <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7fc f8be 	bl	8006620 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d004      	beq.n	800a4b8 <WiFi_Conn_ND+0x94c>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d112      	bne.n	800a4de <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fc f8c7 	bl	800664c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2264      	movs	r2, #100	; 0x64
 800a4c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b0a      	cmp	r3, #10
 800a4e6:	d005      	beq.n	800a4f4 <WiFi_Conn_ND+0x988>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ee:	2b0d      	cmp	r3, #13
 800a4f0:	f040 8785 	bne.w	800b3fe <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7fc f8bf 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	22c8      	movs	r2, #200	; 0xc8
 800a4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a512:	f000 bf74 	b.w	800b3fe <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7fc f882 	bl	8006620 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	2b04      	cmp	r3, #4
 800a524:	d112      	bne.n	800a54c <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fc f890 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2264      	movs	r2, #100	; 0x64
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d004      	beq.n	800a560 <WiFi_Conn_ND+0x9f4>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	2b0d      	cmp	r3, #13
 800a55e:	d10e      	bne.n	800a57e <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7fc f889 	bl	8006678 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	22c8      	movs	r2, #200	; 0xc8
 800a56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a584:	2b00      	cmp	r3, #0
 800a586:	d111      	bne.n	800a5ac <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7fc f8cd 	bl	8006728 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a5a8:	f000 bf46 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7fc f863 	bl	8006678 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	22c8      	movs	r2, #200	; 0xc8
 800a5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a5ca:	f000 bf35 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a5d8:	d04a      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d045      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d040      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f4:	2b0a      	cmp	r3, #10
 800a5f6:	d03b      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fe:	2b0e      	cmp	r3, #14
 800a600:	d036      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	2b0f      	cmp	r3, #15
 800a60a:	d031      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a612:	2b10      	cmp	r3, #16
 800a614:	d02c      	beq.n	800a670 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7fc f886 	bl	8006728 <ConectarTCP>
						if(b->_enviaruart==1)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a622:	2b01      	cmp	r3, #1
 800a624:	d124      	bne.n	800a670 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7fc f9a0 	bl	800696c <AT_ESP8266_ND>
 800a62c:	4602      	mov	r2, r0
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a642:	2b01      	cmp	r3, #1
 800a644:	d109      	bne.n	800a65a <WiFi_Conn_ND+0xaee>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f7f6 ff7f 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a666:	b29a      	uxth	r2, r3
 800a668:	2364      	movs	r3, #100	; 0x64
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	f7fa ff72 	bl	8005554 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	2b01      	cmp	r3, #1
 800a678:	d009      	beq.n	800a68e <WiFi_Conn_ND+0xb22>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a680:	2b0e      	cmp	r3, #14
 800a682:	d004      	beq.n	800a68e <WiFi_Conn_ND+0xb22>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	d106      	bne.n	800a69c <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f240 2261 	movw	r2, #609	; 0x261
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a698:	f000 beb3 	b.w	800b402 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d005      	beq.n	800a6b2 <WiFi_Conn_ND+0xb46>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	f040 86a8 	bne.w	800b402 <WiFi_Conn_ND+0x1896>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f240 225d 	movw	r2, #605	; 0x25d
 800a6b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a6bc:	f000 bea1 	b.w	800b402 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7fb ffad 	bl	8006620 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d112      	bne.n	800a6f6 <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7fb ffbb 	bl	800664c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2264      	movs	r2, #100	; 0x64
 800a6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b0a      	cmp	r3, #10
 800a6fe:	d004      	beq.n	800a70a <WiFi_Conn_ND+0xb9e>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a706:	2b0d      	cmp	r3, #13
 800a708:	d10e      	bne.n	800a728 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7fb ffb4 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	22c8      	movs	r2, #200	; 0xc8
 800a714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d00a      	beq.n	800a748 <WiFi_Conn_ND+0xbdc>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a738:	2b10      	cmp	r3, #16
 800a73a:	d005      	beq.n	800a748 <WiFi_Conn_ND+0xbdc>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a742:	2b0e      	cmp	r3, #14
 800a744:	f040 865f 	bne.w	800b406 <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7fb ffed 	bl	8006728 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a768:	f000 be4d 	b.w	800b406 <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7fb ff57 	bl	8006620 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d112      	bne.n	800a7a2 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7fb ff65 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2264      	movs	r2, #100	; 0x64
 800a786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a8:	2b0a      	cmp	r3, #10
 800a7aa:	d004      	beq.n	800a7b6 <WiFi_Conn_ND+0xc4a>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	2b0d      	cmp	r3, #13
 800a7b4:	d10e      	bne.n	800a7d4 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7fb ff5e 	bl	8006678 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	22c8      	movs	r2, #200	; 0xc8
 800a7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d004      	beq.n	800a7e8 <WiFi_Conn_ND+0xc7c>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e4:	2b10      	cmp	r3, #16
 800a7e6:	d10f      	bne.n	800a808 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7fb ff9d 	bl	8006728 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	2b0e      	cmp	r3, #14
 800a810:	d005      	beq.n	800a81e <WiFi_Conn_ND+0xcb2>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a818:	2b0f      	cmp	r3, #15
 800a81a:	f040 85f6 	bne.w	800b40a <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a824:	2b02      	cmp	r3, #2
 800a826:	f240 85f0 	bls.w	800b40a <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7fb ffbe 	bl	80067ac <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a84a:	f000 bdde 	b.w	800b40a <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a854:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a858:	d054      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a860:	2b02      	cmp	r3, #2
 800a862:	d04f      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86a:	2b0a      	cmp	r3, #10
 800a86c:	d04a      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a874:	2b10      	cmp	r3, #16
 800a876:	d045      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87e:	2b11      	cmp	r3, #17
 800a880:	d040      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a888:	2b14      	cmp	r3, #20
 800a88a:	d03b      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a892:	2b12      	cmp	r3, #18
 800a894:	d036      	beq.n	800a904 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d907      	bls.n	800a8b0 <WiFi_Conn_ND+0xd44>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7fb ff7e 	bl	80067ac <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d124      	bne.n	800a904 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7fc f856 	bl	800696c <AT_ESP8266_ND>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d109      	bne.n	800a8ee <WiFi_Conn_ND+0xd82>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f7f6 fe35 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	2364      	movs	r3, #100	; 0x64
 800a8fe:	68b8      	ldr	r0, [r7, #8]
 800a900:	f7fa fe28 	bl	8005554 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a90e:	d13b      	bne.n	800a988 <WiFi_Conn_ND+0xe1c>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a916:	2b01      	cmp	r3, #1
 800a918:	d136      	bne.n	800a988 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a920:	2b02      	cmp	r3, #2
 800a922:	d031      	beq.n	800a988 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92a:	2b0a      	cmp	r3, #10
 800a92c:	d02c      	beq.n	800a988 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a934:	2b10      	cmp	r3, #16
 800a936:	d027      	beq.n	800a988 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93e:	2b11      	cmp	r3, #17
 800a940:	d022      	beq.n	800a988 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a948:	2b12      	cmp	r3, #18
 800a94a:	d01d      	beq.n	800a988 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d109      	bne.n	800a972 <WiFi_Conn_ND+0xe06>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7f6 fdf3 	bl	8001558 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a97e:	b29a      	uxth	r2, r3
 800a980:	2364      	movs	r3, #100	; 0x64
 800a982:	68b8      	ldr	r0, [r7, #8]
 800a984:	f7fa fde6 	bl	8005554 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98e:	2b13      	cmp	r3, #19
 800a990:	d104      	bne.n	800a99c <WiFi_Conn_ND+0xe30>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d014      	beq.n	800a9d0 <WiFi_Conn_ND+0xe64>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ac:	2b0a      	cmp	r3, #10
 800a9ae:	d00f      	beq.n	800a9d0 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b6:	2b10      	cmp	r3, #16
 800a9b8:	d00a      	beq.n	800a9d0 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c0:	2b11      	cmp	r3, #17
 800a9c2:	d005      	beq.n	800a9d0 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ca:	2b12      	cmp	r3, #18
 800a9cc:	f040 851f 	bne.w	800b40e <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a9da:	f000 bd18 	b.w	800b40e <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7fb fe1e 	bl	8006620 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d112      	bne.n	800aa14 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7fb fe2c 	bl	800664c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2264      	movs	r2, #100	; 0x64
 800a9f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1a:	2b0a      	cmp	r3, #10
 800aa1c:	d004      	beq.n	800aa28 <WiFi_Conn_ND+0xebc>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa24:	2b0d      	cmp	r3, #13
 800aa26:	d10e      	bne.n	800aa46 <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7fb fe25 	bl	8006678 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	22c8      	movs	r2, #200	; 0xc8
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4c:	2b0c      	cmp	r3, #12
 800aa4e:	d10f      	bne.n	800aa70 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7fb fe69 	bl	8006728 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d00f      	beq.n	800aa9a <WiFi_Conn_ND+0xf2e>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa80:	2b10      	cmp	r3, #16
 800aa82:	d00a      	beq.n	800aa9a <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa8a:	2b11      	cmp	r3, #17
 800aa8c:	d005      	beq.n	800aa9a <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa94:	2b12      	cmp	r3, #18
 800aa96:	f040 84bc 	bne.w	800b412 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7fb fe44 	bl	8006728 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aaba:	f000 bcaa 	b.w	800b412 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7fb fdae 	bl	8006620 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d112      	bne.n	800aaf4 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fb fdbc 	bl	800664c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2264      	movs	r2, #100	; 0x64
 800aad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafa:	2b0a      	cmp	r3, #10
 800aafc:	d004      	beq.n	800ab08 <WiFi_Conn_ND+0xf9c>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	2b0d      	cmp	r3, #13
 800ab06:	d10e      	bne.n	800ab26 <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7fb fdb5 	bl	8006678 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	22c8      	movs	r2, #200	; 0xc8
 800ab12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d00e      	beq.n	800ab4e <WiFi_Conn_ND+0xfe2>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab36:	2b0b      	cmp	r3, #11
 800ab38:	d009      	beq.n	800ab4e <WiFi_Conn_ND+0xfe2>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab40:	2b0c      	cmp	r3, #12
 800ab42:	d004      	beq.n	800ab4e <WiFi_Conn_ND+0xfe2>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4a:	2b10      	cmp	r3, #16
 800ab4c:	d10f      	bne.n	800ab6e <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7fb fdea 	bl	8006728 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ab6e:	20c8      	movs	r0, #200	; 0xc8
 800ab70:	f7f8 f83c 	bl	8002bec <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d916      	bls.n	800abac <WiFi_Conn_ND+0x1040>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d011      	beq.n	800abac <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7fb fe0f 	bl	80067ac <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ab94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800aba8:	f000 bc46 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f240 2261 	movw	r2, #609	; 0x261
 800abb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800abc6:	f000 bc37 	b.w	800b438 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800abd4:	d045      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d040      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	2b0a      	cmp	r3, #10
 800abe8:	d03b      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	2b15      	cmp	r3, #21
 800abf2:	d036      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfa:	2b16      	cmp	r3, #22
 800abfc:	d031      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac04:	2b17      	cmp	r3, #23
 800ac06:	d02c      	beq.n	800ac62 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7fb fda3 	bl	8006754 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d124      	bne.n	800ac62 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7fb fea7 	bl	800696c <AT_ESP8266_ND>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d109      	bne.n	800ac4c <WiFi_Conn_ND+0x10e0>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f7f6 fc86 	bl	8001558 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	2364      	movs	r3, #100	; 0x64
 800ac5c:	68b8      	ldr	r0, [r7, #8]
 800ac5e:	f7fa fc79 	bl	8005554 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	2b15      	cmp	r3, #21
 800ac6a:	d004      	beq.n	800ac76 <WiFi_Conn_ND+0x110a>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac72:	2b17      	cmp	r3, #23
 800ac74:	d104      	bne.n	800ac80 <WiFi_Conn_ND+0x1114>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f240 3229 	movw	r2, #809	; 0x329
 800ac7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	2b16      	cmp	r3, #22
 800ac88:	f040 83c5 	bne.w	800b416 <WiFi_Conn_ND+0x18aa>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f240 3225 	movw	r2, #805	; 0x325
 800ac92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ac96:	e3be      	b.n	800b416 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7fb fcc1 	bl	8006620 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d112      	bne.n	800acce <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7fb fccf 	bl	800664c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2264      	movs	r2, #100	; 0x64
 800acb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd4:	2b0a      	cmp	r3, #10
 800acd6:	d004      	beq.n	800ace2 <WiFi_Conn_ND+0x1176>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acde:	2b0d      	cmp	r3, #13
 800ace0:	d10e      	bne.n	800ad00 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7fb fcc8 	bl	8006678 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	22c8      	movs	r2, #200	; 0xc8
 800acec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d005      	beq.n	800ad16 <WiFi_Conn_ND+0x11aa>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad10:	2b10      	cmp	r3, #16
 800ad12:	f040 8382 	bne.w	800b41a <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f7fb fd06 	bl	8006728 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ad36:	e370      	b.n	800b41a <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7fb fc71 	bl	8006620 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d112      	bne.n	800ad6e <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7fb fc7f 	bl	800664c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2264      	movs	r2, #100	; 0x64
 800ad52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad74:	2b0a      	cmp	r3, #10
 800ad76:	d004      	beq.n	800ad82 <WiFi_Conn_ND+0x1216>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7e:	2b0d      	cmp	r3, #13
 800ad80:	d10e      	bne.n	800ada0 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7fb fc78 	bl	8006678 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	22c8      	movs	r2, #200	; 0xc8
 800ad8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d005      	beq.n	800adb6 <WiFi_Conn_ND+0x124a>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb0:	2b10      	cmp	r3, #16
 800adb2:	f040 8334 	bne.w	800b41e <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7fb fcb6 	bl	8006728 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800add6:	e322      	b.n	800b41e <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7fb fc21 	bl	8006620 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d112      	bne.n	800ae0e <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7fb fc2f 	bl	800664c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2264      	movs	r2, #100	; 0x64
 800adf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae14:	2b0a      	cmp	r3, #10
 800ae16:	d004      	beq.n	800ae22 <WiFi_Conn_ND+0x12b6>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	2b0d      	cmp	r3, #13
 800ae20:	d10e      	bne.n	800ae40 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7fb fc28 	bl	8006678 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	22c8      	movs	r2, #200	; 0xc8
 800ae2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d005      	beq.n	800ae56 <WiFi_Conn_ND+0x12ea>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	f040 82e6 	bne.w	800b422 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7fb fc66 	bl	8006728 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae76:	e2d4      	b.n	800b422 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7fb fbd1 	bl	8006620 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d112      	bne.n	800aeae <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7fb fbdf 	bl	800664c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2264      	movs	r2, #100	; 0x64
 800ae92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb4:	2b0a      	cmp	r3, #10
 800aeb6:	d004      	beq.n	800aec2 <WiFi_Conn_ND+0x1356>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aebe:	2b0d      	cmp	r3, #13
 800aec0:	d10e      	bne.n	800aee0 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7fb fbd8 	bl	8006678 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	22c8      	movs	r2, #200	; 0xc8
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d005      	beq.n	800aef6 <WiFi_Conn_ND+0x138a>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef0:	2b10      	cmp	r3, #16
 800aef2:	f040 8298 	bne.w	800b426 <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7fb fc16 	bl	8006728 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800af16:	e286      	b.n	800b426 <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7fb fb81 	bl	8006620 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d112      	bne.n	800af56 <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7fb fb8b 	bl	800664c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2264      	movs	r2, #100	; 0x64
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5c:	2b0a      	cmp	r3, #10
 800af5e:	d004      	beq.n	800af6a <WiFi_Conn_ND+0x13fe>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af66:	2b0d      	cmp	r3, #13
 800af68:	d10e      	bne.n	800af88 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7fb fb84 	bl	8006678 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	22c8      	movs	r2, #200	; 0xc8
 800af74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d004      	beq.n	800af9c <WiFi_Conn_ND+0x1430>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af98:	2b10      	cmp	r3, #16
 800af9a:	d10f      	bne.n	800afbc <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7fb fbc3 	bl	8006728 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	f040 8231 	bne.w	800b42a <WiFi_Conn_ND+0x18be>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 822b 	beq.w	800b42a <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7fb fbd3 	bl	8006780 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800aff4:	e219      	b.n	800b42a <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b000:	d063      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d05e      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b012:	2b0a      	cmp	r3, #10
 800b014:	d059      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b01c:	2b0b      	cmp	r3, #11
 800b01e:	d054      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b026:	2b0c      	cmp	r3, #12
 800b028:	d04f      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b030:	2b10      	cmp	r3, #16
 800b032:	d04a      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b03a:	2b11      	cmp	r3, #17
 800b03c:	d045      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b044:	2b12      	cmp	r3, #18
 800b046:	d040      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b04e:	2b13      	cmp	r3, #19
 800b050:	d03b      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b058:	2b16      	cmp	r3, #22
 800b05a:	d036      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b062:	2b19      	cmp	r3, #25
 800b064:	d031      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d02c      	beq.n	800b0ca <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7fb fb85 	bl	8006780 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d124      	bne.n	800b0ca <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7fb fc73 	bl	800696c <AT_ESP8266_ND>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d109      	bne.n	800b0b4 <WiFi_Conn_ND+0x1548>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7f6 fa52 	bl	8001558 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	2364      	movs	r3, #100	; 0x64
 800b0c4:	68b8      	ldr	r0, [r7, #8]
 800b0c6:	f7fa fa45 	bl	8005554 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b0d4:	d154      	bne.n	800b180 <WiFi_Conn_ND+0x1614>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d14f      	bne.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d04a      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b0f0:	2b0a      	cmp	r3, #10
 800b0f2:	d045      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b0fa:	2b0b      	cmp	r3, #11
 800b0fc:	d040      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b104:	2b0c      	cmp	r3, #12
 800b106:	d03b      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b10e:	2b10      	cmp	r3, #16
 800b110:	d036      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b118:	2b11      	cmp	r3, #17
 800b11a:	d031      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b122:	2b12      	cmp	r3, #18
 800b124:	d02c      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b12c:	2b13      	cmp	r3, #19
 800b12e:	d027      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b136:	2b16      	cmp	r3, #22
 800b138:	d022      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b140:	2b19      	cmp	r3, #25
 800b142:	d01d      	beq.n	800b180 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b152:	2b01      	cmp	r3, #1
 800b154:	d109      	bne.n	800b16a <WiFi_Conn_ND+0x15fe>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b162:	4619      	mov	r1, r3
 800b164:	4610      	mov	r0, r2
 800b166:	f7f6 f9f7 	bl	8001558 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b176:	b29a      	uxth	r2, r3
 800b178:	2364      	movs	r3, #100	; 0x64
 800b17a:	68b8      	ldr	r0, [r7, #8]
 800b17c:	f7fa f9ea 	bl	8005554 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b186:	2b13      	cmp	r3, #19
 800b188:	d104      	bne.n	800b194 <WiFi_Conn_ND+0x1628>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f240 328d 	movw	r2, #909	; 0x38d
 800b190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d02d      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d028      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b1ae:	2b0a      	cmp	r3, #10
 800b1b0:	d023      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b8:	2b0b      	cmp	r3, #11
 800b1ba:	d01e      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1c2:	2b0c      	cmp	r3, #12
 800b1c4:	d019      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1cc:	2b10      	cmp	r3, #16
 800b1ce:	d014      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1d6:	2b11      	cmp	r3, #17
 800b1d8:	d00f      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e0:	2b12      	cmp	r3, #18
 800b1e2:	d00a      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1ea:	2b16      	cmp	r3, #22
 800b1ec:	d005      	beq.n	800b1fa <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f4:	2b19      	cmp	r3, #25
 800b1f6:	f040 811a 	bne.w	800b42e <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f240 3289 	movw	r2, #905	; 0x389
 800b200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b204:	e113      	b.n	800b42e <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f7fb fa0a 	bl	8006620 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b212:	2b04      	cmp	r3, #4
 800b214:	d009      	beq.n	800b22a <WiFi_Conn_ND+0x16be>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21c:	2b0b      	cmp	r3, #11
 800b21e:	d004      	beq.n	800b22a <WiFi_Conn_ND+0x16be>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b226:	2b0c      	cmp	r3, #12
 800b228:	d112      	bne.n	800b250 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7fb fa0e 	bl	800664c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2264      	movs	r2, #100	; 0x64
 800b234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b256:	2b0a      	cmp	r3, #10
 800b258:	d004      	beq.n	800b264 <WiFi_Conn_ND+0x16f8>
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b260:	2b0d      	cmp	r3, #13
 800b262:	d10e      	bne.n	800b282 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7fb fa07 	bl	8006678 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	22c8      	movs	r2, #200	; 0xc8
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b288:	2b16      	cmp	r3, #22
 800b28a:	d10c      	bne.n	800b2a6 <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f240 3225 	movw	r2, #805	; 0x325
 800b292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ac:	2b18      	cmp	r3, #24
 800b2ae:	d10c      	bne.n	800b2ca <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f240 3229 	movw	r2, #809	; 0x329
 800b2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d0:	2b19      	cmp	r3, #25
 800b2d2:	d008      	beq.n	800b2e6 <WiFi_Conn_ND+0x177a>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2da:	2b11      	cmp	r3, #17
 800b2dc:	d003      	beq.n	800b2e6 <WiFi_Conn_ND+0x177a>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2212      	movs	r2, #18
 800b2e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	f040 80a0 	bne.w	800b432 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b30c:	e091      	b.n	800b432 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f7fb f986 	bl	8006620 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31a:	2b04      	cmp	r3, #4
 800b31c:	d009      	beq.n	800b332 <WiFi_Conn_ND+0x17c6>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b324:	2b0b      	cmp	r3, #11
 800b326:	d004      	beq.n	800b332 <WiFi_Conn_ND+0x17c6>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b32e:	2b0c      	cmp	r3, #12
 800b330:	d112      	bne.n	800b358 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7fb f98a 	bl	800664c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2264      	movs	r2, #100	; 0x64
 800b33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b35e:	2b0a      	cmp	r3, #10
 800b360:	d004      	beq.n	800b36c <WiFi_Conn_ND+0x1800>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b368:	2b0d      	cmp	r3, #13
 800b36a:	d10e      	bne.n	800b38a <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7fb f983 	bl	8006678 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	22c8      	movs	r2, #200	; 0xc8
 800b376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b390:	2b01      	cmp	r3, #1
 800b392:	d004      	beq.n	800b39e <WiFi_Conn_ND+0x1832>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d14b      	bne.n	800b436 <WiFi_Conn_ND+0x18ca>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d046      	beq.n	800b436 <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f7fb f9e9 	bl	8006780 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b3d8:	e02d      	b.n	800b436 <WiFi_Conn_ND+0x18ca>
			break;
 800b3da:	bf00      	nop
 800b3dc:	e02c      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3de:	bf00      	nop
 800b3e0:	e02a      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3e2:	bf00      	nop
 800b3e4:	e028      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3e6:	bf00      	nop
 800b3e8:	e026      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3ea:	bf00      	nop
 800b3ec:	e024      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3ee:	bf00      	nop
 800b3f0:	e022      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3f2:	bf00      	nop
 800b3f4:	e020      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3f6:	bf00      	nop
 800b3f8:	e01e      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3fa:	bf00      	nop
 800b3fc:	e01c      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b3fe:	bf00      	nop
 800b400:	e01a      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b402:	bf00      	nop
 800b404:	e018      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b406:	bf00      	nop
 800b408:	e016      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b40a:	bf00      	nop
 800b40c:	e014      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b40e:	bf00      	nop
 800b410:	e012      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
			break;
 800b412:	bf00      	nop
 800b414:	e010      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b416:	bf00      	nop
 800b418:	e00e      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b41a:	bf00      	nop
 800b41c:	e00c      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b41e:	bf00      	nop
 800b420:	e00a      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b422:	bf00      	nop
 800b424:	e008      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b426:	bf00      	nop
 800b428:	e006      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b42a:	bf00      	nop
 800b42c:	e004      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b42e:	bf00      	nop
 800b430:	e002      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b432:	bf00      	nop
 800b434:	e000      	b.n	800b438 <WiFi_Conn_ND+0x18cc>
						break;
 800b436:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop

0800b448 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t devId, char  * post, char * body, int max_char)
{
 800b448:	b5b0      	push	{r4, r5, r7, lr}
 800b44a:	b09c      	sub	sp, #112	; 0x70
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b45e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b466:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b46a:	f7f4 fec3 	bl	80001f4 <strlen>
 800b46e:	4603      	mov	r3, r0
 800b470:	461a      	mov	r2, r3
 800b472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b476:	4413      	add	r3, r2
 800b478:	4aeb      	ldr	r2, [pc, #940]	; (800b828 <httpPOST+0x3e0>)
 800b47a:	6810      	ldr	r0, [r2, #0]
 800b47c:	6018      	str	r0, [r3, #0]
 800b47e:	8892      	ldrh	r2, [r2, #4]
 800b480:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7f4 feb6 	bl	80001f4 <strlen>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	68f9      	ldr	r1, [r7, #12]
 800b48e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b492:	f003 fd8e 	bl	800efb2 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b496:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b49a:	f7f4 feab 	bl	80001f4 <strlen>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4a6:	4413      	add	r3, r2
 800b4a8:	49e0      	ldr	r1, [pc, #896]	; (800b82c <httpPOST+0x3e4>)
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	cb03      	ldmia	r3!, {r0, r1}
 800b4b0:	6010      	str	r0, [r2, #0]
 800b4b2:	6051      	str	r1, [r2, #4]
 800b4b4:	8819      	ldrh	r1, [r3, #0]
 800b4b6:	789b      	ldrb	r3, [r3, #2]
 800b4b8:	8111      	strh	r1, [r2, #8]
 800b4ba:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b4bc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4c0:	f7f4 fe98 	bl	80001f4 <strlen>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4cc:	4413      	add	r3, r2
 800b4ce:	4ad8      	ldr	r2, [pc, #864]	; (800b830 <httpPOST+0x3e8>)
 800b4d0:	8811      	ldrh	r1, [r2, #0]
 800b4d2:	7892      	ldrb	r2, [r2, #2]
 800b4d4:	8019      	strh	r1, [r3, #0]
 800b4d6:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b4d8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4dc:	f7f4 fe8a 	bl	80001f4 <strlen>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4ad2      	ldr	r2, [pc, #840]	; (800b834 <httpPOST+0x3ec>)
 800b4ec:	6810      	ldr	r0, [r2, #0]
 800b4ee:	6018      	str	r0, [r3, #0]
 800b4f0:	8891      	ldrh	r1, [r2, #4]
 800b4f2:	7992      	ldrb	r2, [r2, #6]
 800b4f4:	8099      	strh	r1, [r3, #4]
 800b4f6:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b4f8:	68b8      	ldr	r0, [r7, #8]
 800b4fa:	f7f4 fe7b 	bl	80001f4 <strlen>
 800b4fe:	4603      	mov	r3, r0
 800b500:	461a      	mov	r2, r3
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b508:	f003 fd53 	bl	800efb2 <strncat>
	strncat(post,":",1);
 800b50c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b510:	f7f4 fe70 	bl	80001f4 <strlen>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b51c:	4413      	add	r3, r2
 800b51e:	49c6      	ldr	r1, [pc, #792]	; (800b838 <httpPOST+0x3f0>)
 800b520:	461a      	mov	r2, r3
 800b522:	460b      	mov	r3, r1
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7f4 fe63 	bl	80001f4 <strlen>
 800b52e:	4603      	mov	r3, r0
 800b530:	461a      	mov	r2, r3
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b538:	f003 fd3b 	bl	800efb2 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b53c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b540:	f7f4 fe58 	bl	80001f4 <strlen>
 800b544:	4603      	mov	r3, r0
 800b546:	461a      	mov	r2, r3
 800b548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b54c:	4413      	add	r3, r2
 800b54e:	4ab8      	ldr	r2, [pc, #736]	; (800b830 <httpPOST+0x3e8>)
 800b550:	8811      	ldrh	r1, [r2, #0]
 800b552:	7892      	ldrb	r2, [r2, #2]
 800b554:	8019      	strh	r1, [r3, #0]
 800b556:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b558:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b55c:	f7f4 fe4a 	bl	80001f4 <strlen>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b568:	4413      	add	r3, r2
 800b56a:	4ab4      	ldr	r2, [pc, #720]	; (800b83c <httpPOST+0x3f4>)
 800b56c:	461d      	mov	r5, r3
 800b56e:	4614      	mov	r4, r2
 800b570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b572:	6028      	str	r0, [r5, #0]
 800b574:	6069      	str	r1, [r5, #4]
 800b576:	60aa      	str	r2, [r5, #8]
 800b578:	60eb      	str	r3, [r5, #12]
 800b57a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b57c:	6128      	str	r0, [r5, #16]
 800b57e:	6169      	str	r1, [r5, #20]
 800b580:	61aa      	str	r2, [r5, #24]
 800b582:	8823      	ldrh	r3, [r4, #0]
 800b584:	78a2      	ldrb	r2, [r4, #2]
 800b586:	83ab      	strh	r3, [r5, #28]
 800b588:	4613      	mov	r3, r2
 800b58a:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b58c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b590:	f7f4 fe30 	bl	80001f4 <strlen>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b59c:	4413      	add	r3, r2
 800b59e:	4aa4      	ldr	r2, [pc, #656]	; (800b830 <httpPOST+0x3e8>)
 800b5a0:	8811      	ldrh	r1, [r2, #0]
 800b5a2:	7892      	ldrb	r2, [r2, #2]
 800b5a4:	8019      	strh	r1, [r3, #0]
 800b5a6:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b5a8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b5ac:	f7f4 fe22 	bl	80001f4 <strlen>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5b8:	4413      	add	r3, r2
 800b5ba:	4aa1      	ldr	r2, [pc, #644]	; (800b840 <httpPOST+0x3f8>)
 800b5bc:	461c      	mov	r4, r3
 800b5be:	4615      	mov	r5, r2
 800b5c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5c2:	6020      	str	r0, [r4, #0]
 800b5c4:	6061      	str	r1, [r4, #4]
 800b5c6:	60a2      	str	r2, [r4, #8]
 800b5c8:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	FTOA( d1,_d1,2);
 800b5d0:	887b      	ldrh	r3, [r7, #2]
 800b5d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f003 fa4f 	bl	800ea7c <FTOA>

	char _d2[8];
	_d2[0]='\0';
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b5e4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b5e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f003 fa44 	bl	800ea7c <FTOA>

	char _d3[8];
	_d3[0]='\0';
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	FTOA( d3, _d3,2);
 800b5fa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b5fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b602:	2202      	movs	r2, #2
 800b604:	4618      	mov	r0, r3
 800b606:	f003 fa39 	bl	800ea7c <FTOA>

	char _d4[8];
	_d4[0]='\0';
 800b60a:	2300      	movs	r3, #0
 800b60c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	FTOA( d4, _d4,2);
 800b610:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b614:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800b618:	2202      	movs	r2, #2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f003 fa2e 	bl	800ea7c <FTOA>

	char _d5[8];
	_d5[0]='\0';
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	FTOA( d5, _d5,2);
 800b626:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b62a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b62e:	2202      	movs	r2, #2
 800b630:	4618      	mov	r0, r3
 800b632:	f003 fa23 	bl	800ea7c <FTOA>

	char _d6[8];
	_d6[0]='\0';
 800b636:	2300      	movs	r3, #0
 800b638:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d6, _d6);
 800b63c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b640:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b644:	4611      	mov	r1, r2
 800b646:	4618      	mov	r0, r3
 800b648:	f003 f9e4 	bl	800ea14 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	FTOA( d7, _d7,2);
 800b652:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b656:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b65a:	2202      	movs	r2, #2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f003 fa0d 	bl	800ea7c <FTOA>

	char _d8[8];
	_d8[0]='\0';
 800b662:	2300      	movs	r3, #0
 800b664:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	FTOA( d8, _d8,2);
 800b668:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b66c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b670:	2202      	movs	r2, #2
 800b672:	4618      	mov	r0, r3
 800b674:	f003 fa02 	bl	800ea7c <FTOA>

	char _d9[8];
	_d9[0]='\0';
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FTOA( d9, _d9,2);
 800b67e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b682:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b686:	2202      	movs	r2, #2
 800b688:	4618      	mov	r0, r3
 800b68a:	f003 f9f7 	bl	800ea7c <FTOA>

	char _d10[8];
	_d10[0]='\0';
 800b68e:	2300      	movs	r3, #0
 800b690:	f887 3020 	strb.w	r3, [r7, #32]
	FTOA( d10, _d10,2);
 800b694:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b698:	f107 0120 	add.w	r1, r7, #32
 800b69c:	2202      	movs	r2, #2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f003 f9ec 	bl	800ea7c <FTOA>

	char _devId[8];
	_devId[0]='\0';
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b6a8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b6ac:	f107 0218 	add.w	r2, r7, #24
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f003 f9ae 	bl	800ea14 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b6b8:	4862      	ldr	r0, [pc, #392]	; (800b844 <httpPOST+0x3fc>)
 800b6ba:	f7f4 fd9b 	bl	80001f4 <strlen>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4960      	ldr	r1, [pc, #384]	; (800b844 <httpPOST+0x3fc>)
 800b6c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6c8:	f003 fc73 	bl	800efb2 <strncat>
	strncat(body,_d1,strlen(_d1));
 800b6cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7f4 fd8f 	bl	80001f4 <strlen>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6e2:	f003 fc66 	bl	800efb2 <strncat>

	strncat(body,dd2,strlen(dd2));
 800b6e6:	4858      	ldr	r0, [pc, #352]	; (800b848 <httpPOST+0x400>)
 800b6e8:	f7f4 fd84 	bl	80001f4 <strlen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4955      	ldr	r1, [pc, #340]	; (800b848 <httpPOST+0x400>)
 800b6f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6f6:	f003 fc5c 	bl	800efb2 <strncat>
	strncat(body,_d2,strlen(_d2));
 800b6fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f4 fd78 	bl	80001f4 <strlen>
 800b704:	4602      	mov	r2, r0
 800b706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b70a:	4619      	mov	r1, r3
 800b70c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b710:	f003 fc4f 	bl	800efb2 <strncat>

	strncat(body,dd3,strlen(dd3));
 800b714:	484d      	ldr	r0, [pc, #308]	; (800b84c <httpPOST+0x404>)
 800b716:	f7f4 fd6d 	bl	80001f4 <strlen>
 800b71a:	4603      	mov	r3, r0
 800b71c:	461a      	mov	r2, r3
 800b71e:	494b      	ldr	r1, [pc, #300]	; (800b84c <httpPOST+0x404>)
 800b720:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b724:	f003 fc45 	bl	800efb2 <strncat>
	strncat(body,_d3,strlen(_d3));
 800b728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f4 fd61 	bl	80001f4 <strlen>
 800b732:	4602      	mov	r2, r0
 800b734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b738:	4619      	mov	r1, r3
 800b73a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b73e:	f003 fc38 	bl	800efb2 <strncat>

	strncat(body,dd4,strlen(dd4));
 800b742:	4843      	ldr	r0, [pc, #268]	; (800b850 <httpPOST+0x408>)
 800b744:	f7f4 fd56 	bl	80001f4 <strlen>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	4940      	ldr	r1, [pc, #256]	; (800b850 <httpPOST+0x408>)
 800b74e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b752:	f003 fc2e 	bl	800efb2 <strncat>
	strncat(body,_d4,strlen(_d4));
 800b756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f4 fd4a 	bl	80001f4 <strlen>
 800b760:	4602      	mov	r2, r0
 800b762:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b766:	4619      	mov	r1, r3
 800b768:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b76c:	f003 fc21 	bl	800efb2 <strncat>

	strncat(body,dd5,strlen(dd5));
 800b770:	4838      	ldr	r0, [pc, #224]	; (800b854 <httpPOST+0x40c>)
 800b772:	f7f4 fd3f 	bl	80001f4 <strlen>
 800b776:	4603      	mov	r3, r0
 800b778:	461a      	mov	r2, r3
 800b77a:	4936      	ldr	r1, [pc, #216]	; (800b854 <httpPOST+0x40c>)
 800b77c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b780:	f003 fc17 	bl	800efb2 <strncat>
	strncat(body,_d5,strlen(_d5));
 800b784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f4 fd33 	bl	80001f4 <strlen>
 800b78e:	4602      	mov	r2, r0
 800b790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b794:	4619      	mov	r1, r3
 800b796:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b79a:	f003 fc0a 	bl	800efb2 <strncat>

	strncat(body,dd6,strlen(dd6));
 800b79e:	482e      	ldr	r0, [pc, #184]	; (800b858 <httpPOST+0x410>)
 800b7a0:	f7f4 fd28 	bl	80001f4 <strlen>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	492b      	ldr	r1, [pc, #172]	; (800b858 <httpPOST+0x410>)
 800b7aa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7ae:	f003 fc00 	bl	800efb2 <strncat>
	strncat(body,_d6,strlen(_d6));
 800b7b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f4 fd1c 	bl	80001f4 <strlen>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7c8:	f003 fbf3 	bl	800efb2 <strncat>

	strncat(body,dd7,strlen(dd7));
 800b7cc:	4823      	ldr	r0, [pc, #140]	; (800b85c <httpPOST+0x414>)
 800b7ce:	f7f4 fd11 	bl	80001f4 <strlen>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4921      	ldr	r1, [pc, #132]	; (800b85c <httpPOST+0x414>)
 800b7d8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7dc:	f003 fbe9 	bl	800efb2 <strncat>
	strncat(body,_d7,strlen(_d7));
 800b7e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f4 fd05 	bl	80001f4 <strlen>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7f6:	f003 fbdc 	bl	800efb2 <strncat>

	strncat(body,dd8,strlen(dd8));
 800b7fa:	4819      	ldr	r0, [pc, #100]	; (800b860 <httpPOST+0x418>)
 800b7fc:	f7f4 fcfa 	bl	80001f4 <strlen>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	4916      	ldr	r1, [pc, #88]	; (800b860 <httpPOST+0x418>)
 800b806:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b80a:	f003 fbd2 	bl	800efb2 <strncat>
	strncat(body,_d8,strlen(_d8));
 800b80e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b812:	4618      	mov	r0, r3
 800b814:	f7f4 fcee 	bl	80001f4 <strlen>
 800b818:	4602      	mov	r2, r0
 800b81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b81e:	4619      	mov	r1, r3
 800b820:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b824:	e01e      	b.n	800b864 <httpPOST+0x41c>
 800b826:	bf00      	nop
 800b828:	080105f0 	.word	0x080105f0
 800b82c:	080105f8 	.word	0x080105f8
 800b830:	08010604 	.word	0x08010604
 800b834:	08010608 	.word	0x08010608
 800b838:	08010610 	.word	0x08010610
 800b83c:	08010614 	.word	0x08010614
 800b840:	08010634 	.word	0x08010634
 800b844:	20000090 	.word	0x20000090
 800b848:	20000098 	.word	0x20000098
 800b84c:	200000a0 	.word	0x200000a0
 800b850:	200000a8 	.word	0x200000a8
 800b854:	200000b0 	.word	0x200000b0
 800b858:	200000b8 	.word	0x200000b8
 800b85c:	200000c0 	.word	0x200000c0
 800b860:	200000c8 	.word	0x200000c8
 800b864:	f003 fba5 	bl	800efb2 <strncat>

	strncat(body,dd9,strlen(dd9));
 800b868:	484a      	ldr	r0, [pc, #296]	; (800b994 <httpPOST+0x54c>)
 800b86a:	f7f4 fcc3 	bl	80001f4 <strlen>
 800b86e:	4603      	mov	r3, r0
 800b870:	461a      	mov	r2, r3
 800b872:	4948      	ldr	r1, [pc, #288]	; (800b994 <httpPOST+0x54c>)
 800b874:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b878:	f003 fb9b 	bl	800efb2 <strncat>
	strncat(body,_d9,strlen(_d9));
 800b87c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b880:	4618      	mov	r0, r3
 800b882:	f7f4 fcb7 	bl	80001f4 <strlen>
 800b886:	4602      	mov	r2, r0
 800b888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b88c:	4619      	mov	r1, r3
 800b88e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b892:	f003 fb8e 	bl	800efb2 <strncat>

	strncat(body,dd10,strlen(dd10));
 800b896:	4840      	ldr	r0, [pc, #256]	; (800b998 <httpPOST+0x550>)
 800b898:	f7f4 fcac 	bl	80001f4 <strlen>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	493d      	ldr	r1, [pc, #244]	; (800b998 <httpPOST+0x550>)
 800b8a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8a6:	f003 fb84 	bl	800efb2 <strncat>
	strncat(body,_d10,strlen(_d10));
 800b8aa:	f107 0320 	add.w	r3, r7, #32
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f4 fca0 	bl	80001f4 <strlen>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	f107 0320 	add.w	r3, r7, #32
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8c0:	f003 fb77 	bl	800efb2 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800b8c4:	4835      	ldr	r0, [pc, #212]	; (800b99c <httpPOST+0x554>)
 800b8c6:	f7f4 fc95 	bl	80001f4 <strlen>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4933      	ldr	r1, [pc, #204]	; (800b99c <httpPOST+0x554>)
 800b8d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8d4:	f003 fb6d 	bl	800efb2 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b8d8:	f107 0318 	add.w	r3, r7, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f4 fc89 	bl	80001f4 <strlen>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	f107 0318 	add.w	r3, r7, #24
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8ee:	f003 fb60 	bl	800efb2 <strncat>

	strncat(body,"}",strlen("}"));
 800b8f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8f6:	f7f4 fc7d 	bl	80001f4 <strlen>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b902:	4413      	add	r3, r2
 800b904:	4926      	ldr	r1, [pc, #152]	; (800b9a0 <httpPOST+0x558>)
 800b906:	461a      	mov	r2, r3
 800b908:	460b      	mov	r3, r1
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b90e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b912:	f7f4 fc6f 	bl	80001f4 <strlen>
 800b916:	4602      	mov	r2, r0
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	4619      	mov	r1, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	f003 f878 	bl	800ea14 <INTOA>
	strncat(post,length,strlen(length));
 800b924:	f107 0310 	add.w	r3, r7, #16
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f4 fc63 	bl	80001f4 <strlen>
 800b92e:	4602      	mov	r2, r0
 800b930:	f107 0310 	add.w	r3, r7, #16
 800b934:	4619      	mov	r1, r3
 800b936:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b93a:	f003 fb3a 	bl	800efb2 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b93e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b942:	f7f4 fc57 	bl	80001f4 <strlen>
 800b946:	4603      	mov	r3, r0
 800b948:	461a      	mov	r2, r3
 800b94a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b94e:	4413      	add	r3, r2
 800b950:	4a14      	ldr	r2, [pc, #80]	; (800b9a4 <httpPOST+0x55c>)
 800b952:	6810      	ldr	r0, [r2, #0]
 800b954:	6018      	str	r0, [r3, #0]
 800b956:	7912      	ldrb	r2, [r2, #4]
 800b958:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b95a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b95e:	f7f4 fc49 	bl	80001f4 <strlen>
 800b962:	4602      	mov	r2, r0
 800b964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b968:	429a      	cmp	r2, r3
 800b96a:	d20d      	bcs.n	800b988 <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b96c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b970:	f7f4 fc40 	bl	80001f4 <strlen>
 800b974:	4603      	mov	r3, r0
 800b976:	461a      	mov	r2, r3
 800b978:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b97c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b980:	f003 fb17 	bl	800efb2 <strncat>
		return 1 ;
 800b984:	2301      	movs	r3, #1
 800b986:	e000      	b.n	800b98a <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b988:	2300      	movs	r3, #0
		}
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3770      	adds	r7, #112	; 0x70
 800b98e:	46bd      	mov	sp, r7
 800b990:	bdb0      	pop	{r4, r5, r7, pc}
 800b992:	bf00      	nop
 800b994:	200000d0 	.word	0x200000d0
 800b998:	200000d8 	.word	0x200000d8
 800b99c:	200000e0 	.word	0x200000e0
 800b9a0:	08010644 	.word	0x08010644
 800b9a4:	08010648 	.word	0x08010648

0800b9a8 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800b9a8:	b5b0      	push	{r4, r5, r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b9b8:	2bf1      	cmp	r3, #241	; 0xf1
 800b9ba:	dd01      	ble.n	800b9c0 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e099      	b.n	800baf4 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b9ca:	f107 0108 	add.w	r1, r7, #8
 800b9ce:	220a      	movs	r2, #10
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f003 f902 	bl	800ebda <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f7f4 fc05 	bl	80001f4 <strlen>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	4423      	add	r3, r4
 800b9ee:	4943      	ldr	r1, [pc, #268]	; (800bafc <LoRa_Send+0x154>)
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	cb03      	ldmia	r3!, {r0, r1}
 800b9f6:	6010      	str	r0, [r2, #0]
 800b9f8:	6051      	str	r1, [r2, #4]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f103 0516 	add.w	r5, r3, #22
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3316      	adds	r3, #22
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f4 fbf0 	bl	80001f4 <strlen>
 800ba14:	4603      	mov	r3, r0
 800ba16:	461a      	mov	r2, r3
 800ba18:	4629      	mov	r1, r5
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f003 fac9 	bl	800efb2 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7f4 fbe4 	bl	80001f4 <strlen>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4423      	add	r3, r4
 800ba30:	4933      	ldr	r1, [pc, #204]	; (800bb00 <LoRa_Send+0x158>)
 800ba32:	461a      	mov	r2, r3
 800ba34:	460b      	mov	r3, r1
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f4 fbd5 	bl	80001f4 <strlen>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	f107 0308 	add.w	r3, r7, #8
 800ba50:	4619      	mov	r1, r3
 800ba52:	4620      	mov	r0, r4
 800ba54:	f003 faad 	bl	800efb2 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7f4 fbc8 	bl	80001f4 <strlen>
 800ba64:	4603      	mov	r3, r0
 800ba66:	4423      	add	r3, r4
 800ba68:	4925      	ldr	r1, [pc, #148]	; (800bb00 <LoRa_Send+0x158>)
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f4 fbbb 	bl	80001f4 <strlen>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ba92:	e012      	b.n	800baba <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800ba9e:	7819      	ldrb	r1, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	4413      	add	r3, r2
 800baa6:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800baaa:	460a      	mov	r2, r1
 800baac:	701a      	strb	r2, [r3, #0]
			la++;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3301      	adds	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
			lc++;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	3301      	adds	r3, #1
 800bab8:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	429a      	cmp	r2, r3
 800bac0:	dbe8      	blt.n	800ba94 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	617a      	str	r2, [r7, #20]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	220d      	movs	r2, #13
 800bace:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	617a      	str	r2, [r7, #20]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	4413      	add	r3, r2
 800badc:	220a      	movs	r2, #10
 800bade:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	b292      	uxth	r2, r2
 800baec:	4619      	mov	r1, r3
 800baee:	6838      	ldr	r0, [r7, #0]
 800baf0:	f7f9 fdc2 	bl	8005678 <HAL_UART_Transmit_IT>
	}

}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bdb0      	pop	{r4, r5, r7, pc}
 800bafc:	08010650 	.word	0x08010650
 800bb00:	0801065c 	.word	0x0801065c

0800bb04 <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800bb2e:	bf00      	nop
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
	...

0800bb3c <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fa25 	bl	800bf94 <Lora_idSTR>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b10      	cmp	r3, #16
 800bb4e:	f200 820c 	bhi.w	800bf6a <LoRa_decode+0x42e>
 800bb52:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <LoRa_decode+0x1c>)
 800bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb58:	0800bb9d 	.word	0x0800bb9d
 800bb5c:	0800bc75 	.word	0x0800bc75
 800bb60:	0800bea9 	.word	0x0800bea9
 800bb64:	0800beb3 	.word	0x0800beb3
 800bb68:	0800bebd 	.word	0x0800bebd
 800bb6c:	0800bec7 	.word	0x0800bec7
 800bb70:	0800bed1 	.word	0x0800bed1
 800bb74:	0800bedb 	.word	0x0800bedb
 800bb78:	0800bee5 	.word	0x0800bee5
 800bb7c:	0800beef 	.word	0x0800beef
 800bb80:	0800bef9 	.word	0x0800bef9
 800bb84:	0800bf39 	.word	0x0800bf39
 800bb88:	0800bf43 	.word	0x0800bf43
 800bb8c:	0800bf57 	.word	0x0800bf57
 800bb90:	0800bf4d 	.word	0x0800bf4d
 800bb94:	0800be9f 	.word	0x0800be9f
 800bb98:	0800bf61 	.word	0x0800bf61
	{
		case _OK:
		{
			switch(b->estado)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bba2:	3b01      	subs	r3, #1
 800bba4:	2b13      	cmp	r3, #19
 800bba6:	d860      	bhi.n	800bc6a <LoRa_decode+0x12e>
 800bba8:	a201      	add	r2, pc, #4	; (adr r2, 800bbb0 <LoRa_decode+0x74>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bc01 	.word	0x0800bc01
 800bbb4:	0800bc6b 	.word	0x0800bc6b
 800bbb8:	0800bc6b 	.word	0x0800bc6b
 800bbbc:	0800bc6b 	.word	0x0800bc6b
 800bbc0:	0800bc6b 	.word	0x0800bc6b
 800bbc4:	0800bc6b 	.word	0x0800bc6b
 800bbc8:	0800bc0b 	.word	0x0800bc0b
 800bbcc:	0800bc15 	.word	0x0800bc15
 800bbd0:	0800bc6b 	.word	0x0800bc6b
 800bbd4:	0800bc1f 	.word	0x0800bc1f
 800bbd8:	0800bc6b 	.word	0x0800bc6b
 800bbdc:	0800bc29 	.word	0x0800bc29
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bc33 	.word	0x0800bc33
 800bbe8:	0800bc6b 	.word	0x0800bc6b
 800bbec:	0800bc3d 	.word	0x0800bc3d
 800bbf0:	0800bc6b 	.word	0x0800bc6b
 800bbf4:	0800bc47 	.word	0x0800bc47
 800bbf8:	0800bc6b 	.word	0x0800bc6b
 800bbfc:	0800bc51 	.word	0x0800bc51
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc08:	e02f      	b.n	800bc6a <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2206      	movs	r2, #6
 800bc0e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc12:	e02a      	b.n	800bc6a <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2209      	movs	r2, #9
 800bc18:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc1c:	e025      	b.n	800bc6a <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	220b      	movs	r2, #11
 800bc22:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc26:	e020      	b.n	800bc6a <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	220d      	movs	r2, #13
 800bc2c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc30:	e01b      	b.n	800bc6a <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	220f      	movs	r2, #15
 800bc36:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc3a:	e016      	b.n	800bc6a <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2211      	movs	r2, #17
 800bc40:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc44:	e011      	b.n	800bc6a <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2213      	movs	r2, #19
 800bc4a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bc4e:	e00c      	b.n	800bc6a <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2215      	movs	r2, #21
 800bc54:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800bc60:	2111      	movs	r1, #17
 800bc62:	48a8      	ldr	r0, [pc, #672]	; (800bf04 <LoRa_decode+0x3c8>)
 800bc64:	f7f5 fc78 	bl	8001558 <ITM0_Write>
					}
					break;
 800bc68:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bc6a:	210c      	movs	r1, #12
 800bc6c:	48a6      	ldr	r0, [pc, #664]	; (800bf08 <LoRa_decode+0x3cc>)
 800bc6e:	f7f5 fc73 	bl	8001558 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800bc72:	e17f      	b.n	800bf74 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bc74:	210d      	movs	r1, #13
 800bc76:	48a5      	ldr	r0, [pc, #660]	; (800bf0c <LoRa_decode+0x3d0>)
 800bc78:	f7f5 fc6e 	bl	8001558 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	221a      	movs	r2, #26
 800bc80:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
					int j=0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bc98:	e002      	b.n	800bca0 <LoRa_decode+0x164>
					{ i++;}
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	4413      	add	r3, r2
 800bca6:	3356      	adds	r3, #86	; 0x56
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b3d      	cmp	r3, #61	; 0x3d
 800bcac:	d1f5      	bne.n	800bc9a <LoRa_decode+0x15e>
					i++;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bcb4:	e017      	b.n	800bce6 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	4413      	add	r3, r2
 800bcbc:	3356      	adds	r3, #86	; 0x56
 800bcbe:	7819      	ldrb	r1, [r3, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	3306      	adds	r3, #6
 800bcc8:	460a      	mov	r2, r1
 800bcca:	701a      	strb	r2, [r3, #0]
						i++;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	617b      	str	r3, [r7, #20]
						j++;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	2b06      	cmp	r3, #6
 800bcdc:	dd03      	ble.n	800bce6 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fb9a 	bl	800c418 <Lora_rx_del>
							break;
 800bce4:	e006      	b.n	800bcf4 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	4413      	add	r3, r2
 800bcec:	3356      	adds	r3, #86	; 0x56
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b2c      	cmp	r3, #44	; 0x2c
 800bcf2:	d1e0      	bne.n	800bcb6 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3306      	adds	r3, #6
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
					j=0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
					i++;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	3301      	adds	r3, #1
 800bd08:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bd0a:	e017      	b.n	800bd3c <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	4413      	add	r3, r2
 800bd12:	3356      	adds	r3, #86	; 0x56
 800bd14:	7819      	ldrb	r1, [r3, #0]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	460a      	mov	r2, r1
 800bd20:	701a      	strb	r2, [r3, #0]
						i++;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	3301      	adds	r3, #1
 800bd26:	617b      	str	r3, [r7, #20]
						j++;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	dd03      	ble.n	800bd3c <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fb6f 	bl	800c418 <Lora_rx_del>
							break;
 800bd3a:	e006      	b.n	800bd4a <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	4413      	add	r3, r2
 800bd42:	3356      	adds	r3, #86	; 0x56
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b2c      	cmp	r3, #44	; 0x2c
 800bd48:	d1e0      	bne.n	800bd0c <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	4413      	add	r3, r2
 800bd50:	330c      	adds	r3, #12
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
					j=0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	613b      	str	r3, [r7, #16]
					i++;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	330c      	adds	r3, #12
 800bd64:	210a      	movs	r1, #10
 800bd66:	4618      	mov	r0, r3
 800bd68:	f002 ff1b 	bl	800eba2 <atoi>
 800bd6c:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bd6e:	e019      	b.n	800bda4 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	4413      	add	r3, r2
 800bd76:	3356      	adds	r3, #86	; 0x56
 800bd78:	7819      	ldrb	r1, [r3, #0]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bd84:	460a      	mov	r2, r1
 800bd86:	701a      	strb	r2, [r3, #0]
						j++;
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	613b      	str	r3, [r7, #16]
						i++;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	3301      	adds	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	dd03      	ble.n	800bda4 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fb3b 	bl	800c418 <Lora_rx_del>
							break;
 800bda2:	e006      	b.n	800bdb2 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	4413      	add	r3, r2
 800bdaa:	3356      	adds	r3, #86	; 0x56
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b2c      	cmp	r3, #44	; 0x2c
 800bdb0:	d1de      	bne.n	800bd70 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	613b      	str	r3, [r7, #16]
					i++;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bdc4:	e017      	b.n	800bdf6 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	3356      	adds	r3, #86	; 0x56
 800bdce:	7819      	ldrb	r1, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	3310      	adds	r3, #16
 800bdd8:	460a      	mov	r2, r1
 800bdda:	701a      	strb	r2, [r3, #0]
						i++;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3301      	adds	r3, #1
 800bde0:	617b      	str	r3, [r7, #20]
						j++;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3301      	adds	r3, #1
 800bde6:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	dd03      	ble.n	800bdf6 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fb12 	bl	800c418 <Lora_rx_del>
							break;
 800bdf4:	e006      	b.n	800be04 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3356      	adds	r3, #86	; 0x56
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b2c      	cmp	r3, #44	; 0x2c
 800be02:	d1e0      	bne.n	800bdc6 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3310      	adds	r3, #16
 800be08:	210a      	movs	r1, #10
 800be0a:	4618      	mov	r0, r3
 800be0c:	f002 fec9 	bl	800eba2 <atoi>
 800be10:	4602      	mov	r2, r0
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	4413      	add	r3, r2
 800be1e:	3310      	adds	r3, #16
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
					j=0;
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]
					i++;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3301      	adds	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800be2e:	e017      	b.n	800be60 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	4413      	add	r3, r2
 800be36:	3356      	adds	r3, #86	; 0x56
 800be38:	7819      	ldrb	r1, [r3, #0]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	4413      	add	r3, r2
 800be40:	3310      	adds	r3, #16
 800be42:	460a      	mov	r2, r1
 800be44:	701a      	strb	r2, [r3, #0]
						i++;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	3301      	adds	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
						j++;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	3301      	adds	r3, #1
 800be50:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b05      	cmp	r3, #5
 800be56:	dd03      	ble.n	800be60 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fadd 	bl	800c418 <Lora_rx_del>
							break;
 800be5e:	e006      	b.n	800be6e <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4413      	add	r3, r2
 800be66:	3356      	adds	r3, #86	; 0x56
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b0d      	cmp	r3, #13
 800be6c:	d1e0      	bne.n	800be30 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	4413      	add	r3, r2
 800be74:	3310      	adds	r3, #16
 800be76:	2200      	movs	r2, #0
 800be78:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3310      	adds	r3, #16
 800be7e:	210a      	movs	r1, #10
 800be80:	4618      	mov	r0, r3
 800be82:	f002 fe8e 	bl	800eba2 <atoi>
 800be86:	4602      	mov	r2, r0
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800be9c:	e06a      	b.n	800bf74 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800be9e:	210d      	movs	r1, #13
 800bea0:	481b      	ldr	r0, [pc, #108]	; (800bf10 <LoRa_decode+0x3d4>)
 800bea2:	f7f5 fb59 	bl	8001558 <ITM0_Write>
			break;
 800bea6:	e065      	b.n	800bf74 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800bea8:	210f      	movs	r1, #15
 800beaa:	481a      	ldr	r0, [pc, #104]	; (800bf14 <LoRa_decode+0x3d8>)
 800beac:	f7f5 fb54 	bl	8001558 <ITM0_Write>
			break;
 800beb0:	e060      	b.n	800bf74 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800beb2:	210f      	movs	r1, #15
 800beb4:	4818      	ldr	r0, [pc, #96]	; (800bf18 <LoRa_decode+0x3dc>)
 800beb6:	f7f5 fb4f 	bl	8001558 <ITM0_Write>
			break;
 800beba:	e05b      	b.n	800bf74 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800bebc:	210e      	movs	r1, #14
 800bebe:	4817      	ldr	r0, [pc, #92]	; (800bf1c <LoRa_decode+0x3e0>)
 800bec0:	f7f5 fb4a 	bl	8001558 <ITM0_Write>
			break;
 800bec4:	e056      	b.n	800bf74 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800bec6:	210d      	movs	r1, #13
 800bec8:	4815      	ldr	r0, [pc, #84]	; (800bf20 <LoRa_decode+0x3e4>)
 800beca:	f7f5 fb45 	bl	8001558 <ITM0_Write>
			break;
 800bece:	e051      	b.n	800bf74 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800bed0:	2113      	movs	r1, #19
 800bed2:	4814      	ldr	r0, [pc, #80]	; (800bf24 <LoRa_decode+0x3e8>)
 800bed4:	f7f5 fb40 	bl	8001558 <ITM0_Write>
			break;
 800bed8:	e04c      	b.n	800bf74 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800beda:	210e      	movs	r1, #14
 800bedc:	4812      	ldr	r0, [pc, #72]	; (800bf28 <LoRa_decode+0x3ec>)
 800bede:	f7f5 fb3b 	bl	8001558 <ITM0_Write>
			break;
 800bee2:	e047      	b.n	800bf74 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800bee4:	2111      	movs	r1, #17
 800bee6:	4811      	ldr	r0, [pc, #68]	; (800bf2c <LoRa_decode+0x3f0>)
 800bee8:	f7f5 fb36 	bl	8001558 <ITM0_Write>
			break;
 800beec:	e042      	b.n	800bf74 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800beee:	2111      	movs	r1, #17
 800bef0:	480f      	ldr	r0, [pc, #60]	; (800bf30 <LoRa_decode+0x3f4>)
 800bef2:	f7f5 fb31 	bl	8001558 <ITM0_Write>
			break;
 800bef6:	e03d      	b.n	800bf74 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800bef8:	210e      	movs	r1, #14
 800befa:	480e      	ldr	r0, [pc, #56]	; (800bf34 <LoRa_decode+0x3f8>)
 800befc:	f7f5 fb2c 	bl	8001558 <ITM0_Write>
			break;
 800bf00:	e038      	b.n	800bf74 <LoRa_decode+0x438>
 800bf02:	bf00      	nop
 800bf04:	0801068c 	.word	0x0801068c
 800bf08:	080106a0 	.word	0x080106a0
 800bf0c:	080106b0 	.word	0x080106b0
 800bf10:	080106c0 	.word	0x080106c0
 800bf14:	080106d0 	.word	0x080106d0
 800bf18:	080106e0 	.word	0x080106e0
 800bf1c:	080106f0 	.word	0x080106f0
 800bf20:	08010700 	.word	0x08010700
 800bf24:	08010710 	.word	0x08010710
 800bf28:	08010724 	.word	0x08010724
 800bf2c:	08010734 	.word	0x08010734
 800bf30:	08010748 	.word	0x08010748
 800bf34:	0801075c 	.word	0x0801075c
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800bf38:	210f      	movs	r1, #15
 800bf3a:	4810      	ldr	r0, [pc, #64]	; (800bf7c <LoRa_decode+0x440>)
 800bf3c:	f7f5 fb0c 	bl	8001558 <ITM0_Write>
			break;
 800bf40:	e018      	b.n	800bf74 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800bf42:	210e      	movs	r1, #14
 800bf44:	480e      	ldr	r0, [pc, #56]	; (800bf80 <LoRa_decode+0x444>)
 800bf46:	f7f5 fb07 	bl	8001558 <ITM0_Write>
			break;
 800bf4a:	e013      	b.n	800bf74 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800bf4c:	210d      	movs	r1, #13
 800bf4e:	480d      	ldr	r0, [pc, #52]	; (800bf84 <LoRa_decode+0x448>)
 800bf50:	f7f5 fb02 	bl	8001558 <ITM0_Write>
			break;
 800bf54:	e00e      	b.n	800bf74 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800bf56:	210d      	movs	r1, #13
 800bf58:	480b      	ldr	r0, [pc, #44]	; (800bf88 <LoRa_decode+0x44c>)
 800bf5a:	f7f5 fafd 	bl	8001558 <ITM0_Write>
			break;
 800bf5e:	e009      	b.n	800bf74 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800bf60:	2114      	movs	r1, #20
 800bf62:	480a      	ldr	r0, [pc, #40]	; (800bf8c <LoRa_decode+0x450>)
 800bf64:	f7f5 faf8 	bl	8001558 <ITM0_Write>
			break;
 800bf68:	e004      	b.n	800bf74 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800bf6a:	2110      	movs	r1, #16
 800bf6c:	4808      	ldr	r0, [pc, #32]	; (800bf90 <LoRa_decode+0x454>)
 800bf6e:	f7f5 faf3 	bl	8001558 <ITM0_Write>
			break;
 800bf72:	bf00      	nop
	}
 }
 800bf74:	bf00      	nop
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	0801076c 	.word	0x0801076c
 800bf80:	0801077c 	.word	0x0801077c
 800bf84:	0801078c 	.word	0x0801078c
 800bf88:	0801079c 	.word	0x0801079c
 800bf8c:	080107ac 	.word	0x080107ac
 800bf90:	080107c4 	.word	0x080107c4

0800bf94 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b090      	sub	sp, #64	; 0x40
 800bf98:	af06      	add	r7, sp, #24
 800bf9a:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800bfa2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bfa6:	dd01      	ble.n	800bfac <Lora_idSTR+0x18>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	e229      	b.n	800c400 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800bfb0:	2304      	movs	r3, #4
 800bfb2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bfc0:	f107 021c 	add.w	r2, r7, #28
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	f107 0320 	add.w	r3, r7, #32
 800bfcc:	9303      	str	r3, [sp, #12]
 800bfce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	f107 0310 	add.w	r3, r7, #16
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	4ab9      	ldr	r2, [pc, #740]	; (800c2c8 <Lora_idSTR+0x334>)
 800bfe4:	f002 f9e4 	bl	800e3b0 <FT_String_ND>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d101      	bne.n	800bff2 <Lora_idSTR+0x5e>
 800bfee:	2300      	movs	r3, #0
 800bff0:	e206      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800bff2:	2305      	movs	r3, #5
 800bff4:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c002:	f107 021c 	add.w	r2, r7, #28
 800c006:	2300      	movs	r3, #0
 800c008:	9304      	str	r3, [sp, #16]
 800c00a:	f107 0320 	add.w	r3, r7, #32
 800c00e:	9303      	str	r3, [sp, #12]
 800c010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	f107 030c 	add.w	r3, r7, #12
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	f107 0310 	add.w	r3, r7, #16
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4613      	mov	r3, r2
 800c024:	4aa9      	ldr	r2, [pc, #676]	; (800c2cc <Lora_idSTR+0x338>)
 800c026:	f002 f9c3 	bl	800e3b0 <FT_String_ND>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <Lora_idSTR+0xa0>
 800c030:	2301      	movs	r3, #1
 800c032:	e1e5      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800c034:	2305      	movs	r3, #5
 800c036:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c044:	f107 021c 	add.w	r2, r7, #28
 800c048:	2300      	movs	r3, #0
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	f107 0320 	add.w	r3, r7, #32
 800c050:	9303      	str	r3, [sp, #12]
 800c052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	f107 030c 	add.w	r3, r7, #12
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	f107 0310 	add.w	r3, r7, #16
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4613      	mov	r3, r2
 800c066:	4a9a      	ldr	r2, [pc, #616]	; (800c2d0 <Lora_idSTR+0x33c>)
 800c068:	f002 f9a2 	bl	800e3b0 <FT_String_ND>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d101      	bne.n	800c076 <Lora_idSTR+0xe2>
 800c072:	230f      	movs	r3, #15
 800c074:	e1c4      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c076:	2306      	movs	r3, #6
 800c078:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c086:	f107 021c 	add.w	r2, r7, #28
 800c08a:	2300      	movs	r3, #0
 800c08c:	9304      	str	r3, [sp, #16]
 800c08e:	f107 0320 	add.w	r3, r7, #32
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c098:	9302      	str	r3, [sp, #8]
 800c09a:	f107 030c 	add.w	r3, r7, #12
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	f107 0310 	add.w	r3, r7, #16
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	4a8a      	ldr	r2, [pc, #552]	; (800c2d4 <Lora_idSTR+0x340>)
 800c0aa:	f002 f981 	bl	800e3b0 <FT_String_ND>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <Lora_idSTR+0x124>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e1a3      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c0b8:	2306      	movs	r3, #6
 800c0ba:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c0c8:	f107 021c 	add.w	r2, r7, #28
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9304      	str	r3, [sp, #16]
 800c0d0:	f107 0320 	add.w	r3, r7, #32
 800c0d4:	9303      	str	r3, [sp, #12]
 800c0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0da:	9302      	str	r3, [sp, #8]
 800c0dc:	f107 030c 	add.w	r3, r7, #12
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	f107 0310 	add.w	r3, r7, #16
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	4a7b      	ldr	r2, [pc, #492]	; (800c2d8 <Lora_idSTR+0x344>)
 800c0ec:	f002 f960 	bl	800e3b0 <FT_String_ND>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d101      	bne.n	800c0fa <Lora_idSTR+0x166>
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e182      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c0fa:	2306      	movs	r3, #6
 800c0fc:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c10a:	f107 021c 	add.w	r2, r7, #28
 800c10e:	2300      	movs	r3, #0
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	f107 0320 	add.w	r3, r7, #32
 800c116:	9303      	str	r3, [sp, #12]
 800c118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	f107 030c 	add.w	r3, r7, #12
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	f107 0310 	add.w	r3, r7, #16
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	4613      	mov	r3, r2
 800c12c:	4a6b      	ldr	r2, [pc, #428]	; (800c2dc <Lora_idSTR+0x348>)
 800c12e:	f002 f93f 	bl	800e3b0 <FT_String_ND>
 800c132:	4603      	mov	r3, r0
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <Lora_idSTR+0x1a8>
 800c138:	2304      	movs	r3, #4
 800c13a:	e161      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c13c:	2305      	movs	r3, #5
 800c13e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c14c:	f107 021c 	add.w	r2, r7, #28
 800c150:	2300      	movs	r3, #0
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	f107 0320 	add.w	r3, r7, #32
 800c158:	9303      	str	r3, [sp, #12]
 800c15a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c15e:	9302      	str	r3, [sp, #8]
 800c160:	f107 030c 	add.w	r3, r7, #12
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	f107 0310 	add.w	r3, r7, #16
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4613      	mov	r3, r2
 800c16e:	4a5c      	ldr	r2, [pc, #368]	; (800c2e0 <Lora_idSTR+0x34c>)
 800c170:	f002 f91e 	bl	800e3b0 <FT_String_ND>
 800c174:	4603      	mov	r3, r0
 800c176:	2b01      	cmp	r3, #1
 800c178:	d101      	bne.n	800c17e <Lora_idSTR+0x1ea>
 800c17a:	2305      	movs	r3, #5
 800c17c:	e140      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c17e:	230b      	movs	r3, #11
 800c180:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c18e:	f107 021c 	add.w	r2, r7, #28
 800c192:	2300      	movs	r3, #0
 800c194:	9304      	str	r3, [sp, #16]
 800c196:	f107 0320 	add.w	r3, r7, #32
 800c19a:	9303      	str	r3, [sp, #12]
 800c19c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	f107 030c 	add.w	r3, r7, #12
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	f107 0310 	add.w	r3, r7, #16
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	4a4c      	ldr	r2, [pc, #304]	; (800c2e4 <Lora_idSTR+0x350>)
 800c1b2:	f002 f8fd 	bl	800e3b0 <FT_String_ND>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <Lora_idSTR+0x22c>
 800c1bc:	2306      	movs	r3, #6
 800c1be:	e11f      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c1c0:	2306      	movs	r3, #6
 800c1c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1d0:	f107 021c 	add.w	r2, r7, #28
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	f107 0320 	add.w	r3, r7, #32
 800c1dc:	9303      	str	r3, [sp, #12]
 800c1de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	f107 030c 	add.w	r3, r7, #12
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	f107 0310 	add.w	r3, r7, #16
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	4a3d      	ldr	r2, [pc, #244]	; (800c2e8 <Lora_idSTR+0x354>)
 800c1f4:	f002 f8dc 	bl	800e3b0 <FT_String_ND>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <Lora_idSTR+0x26e>
 800c1fe:	2307      	movs	r3, #7
 800c200:	e0fe      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c202:	2309      	movs	r3, #9
 800c204:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c212:	f107 021c 	add.w	r2, r7, #28
 800c216:	2300      	movs	r3, #0
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	f107 0320 	add.w	r3, r7, #32
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c224:	9302      	str	r3, [sp, #8]
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	f107 0310 	add.w	r3, r7, #16
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	4613      	mov	r3, r2
 800c234:	4a2d      	ldr	r2, [pc, #180]	; (800c2ec <Lora_idSTR+0x358>)
 800c236:	f002 f8bb 	bl	800e3b0 <FT_String_ND>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d101      	bne.n	800c244 <Lora_idSTR+0x2b0>
 800c240:	2308      	movs	r3, #8
 800c242:	e0dd      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c244:	2309      	movs	r3, #9
 800c246:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c254:	f107 021c 	add.w	r2, r7, #28
 800c258:	2300      	movs	r3, #0
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	f107 0320 	add.w	r3, r7, #32
 800c260:	9303      	str	r3, [sp, #12]
 800c262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c266:	9302      	str	r3, [sp, #8]
 800c268:	f107 030c 	add.w	r3, r7, #12
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	f107 0310 	add.w	r3, r7, #16
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	4613      	mov	r3, r2
 800c276:	4a1e      	ldr	r2, [pc, #120]	; (800c2f0 <Lora_idSTR+0x35c>)
 800c278:	f002 f89a 	bl	800e3b0 <FT_String_ND>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d101      	bne.n	800c286 <Lora_idSTR+0x2f2>
 800c282:	2309      	movs	r3, #9
 800c284:	e0bc      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c286:	2306      	movs	r3, #6
 800c288:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c296:	f107 021c 	add.w	r2, r7, #28
 800c29a:	2300      	movs	r3, #0
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	f107 0320 	add.w	r3, r7, #32
 800c2a2:	9303      	str	r3, [sp, #12]
 800c2a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a8:	9302      	str	r3, [sp, #8]
 800c2aa:	f107 030c 	add.w	r3, r7, #12
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	f107 0310 	add.w	r3, r7, #16
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <Lora_idSTR+0x360>)
 800c2ba:	f002 f879 	bl	800e3b0 <FT_String_ND>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d119      	bne.n	800c2f8 <Lora_idSTR+0x364>
 800c2c4:	230a      	movs	r3, #10
 800c2c6:	e09b      	b.n	800c400 <Lora_idSTR+0x46c>
 800c2c8:	080107d8 	.word	0x080107d8
 800c2cc:	080107e0 	.word	0x080107e0
 800c2d0:	080107e8 	.word	0x080107e8
 800c2d4:	080107f0 	.word	0x080107f0
 800c2d8:	080107f8 	.word	0x080107f8
 800c2dc:	08010800 	.word	0x08010800
 800c2e0:	08010808 	.word	0x08010808
 800c2e4:	08010810 	.word	0x08010810
 800c2e8:	0801081c 	.word	0x0801081c
 800c2ec:	08010824 	.word	0x08010824
 800c2f0:	08010830 	.word	0x08010830
 800c2f4:	0801083c 	.word	0x0801083c
		i=strlen("+CRFOP=");
 800c2f8:	2307      	movs	r3, #7
 800c2fa:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c308:	f107 021c 	add.w	r2, r7, #28
 800c30c:	2300      	movs	r3, #0
 800c30e:	9304      	str	r3, [sp, #16]
 800c310:	f107 0320 	add.w	r3, r7, #32
 800c314:	9303      	str	r3, [sp, #12]
 800c316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c31a:	9302      	str	r3, [sp, #8]
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	4a37      	ldr	r2, [pc, #220]	; (800c408 <Lora_idSTR+0x474>)
 800c32c:	f002 f840 	bl	800e3b0 <FT_String_ND>
 800c330:	4603      	mov	r3, r0
 800c332:	2b01      	cmp	r3, #1
 800c334:	d101      	bne.n	800c33a <Lora_idSTR+0x3a6>
 800c336:	230b      	movs	r3, #11
 800c338:	e062      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c33a:	2306      	movs	r3, #6
 800c33c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c34a:	f107 021c 	add.w	r2, r7, #28
 800c34e:	2300      	movs	r3, #0
 800c350:	9304      	str	r3, [sp, #16]
 800c352:	f107 0320 	add.w	r3, r7, #32
 800c356:	9303      	str	r3, [sp, #12]
 800c358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	f107 030c 	add.w	r3, r7, #12
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	f107 0310 	add.w	r3, r7, #16
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	4613      	mov	r3, r2
 800c36c:	4a27      	ldr	r2, [pc, #156]	; (800c40c <Lora_idSTR+0x478>)
 800c36e:	f002 f81f 	bl	800e3b0 <FT_String_ND>
 800c372:	4603      	mov	r3, r0
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <Lora_idSTR+0x3e8>
 800c378:	230c      	movs	r3, #12
 800c37a:	e041      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c37c:	2305      	movs	r3, #5
 800c37e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c38c:	f107 021c 	add.w	r2, r7, #28
 800c390:	2300      	movs	r3, #0
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	f107 0320 	add.w	r3, r7, #32
 800c398:	9303      	str	r3, [sp, #12]
 800c39a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c39e:	9302      	str	r3, [sp, #8]
 800c3a0:	f107 030c 	add.w	r3, r7, #12
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	f107 0310 	add.w	r3, r7, #16
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	4a18      	ldr	r2, [pc, #96]	; (800c410 <Lora_idSTR+0x47c>)
 800c3b0:	f001 fffe 	bl	800e3b0 <FT_String_ND>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <Lora_idSTR+0x42a>
 800c3ba:	230e      	movs	r3, #14
 800c3bc:	e020      	b.n	800c400 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c3be:	2305      	movs	r3, #5
 800c3c0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3ce:	f107 021c 	add.w	r2, r7, #28
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9304      	str	r3, [sp, #16]
 800c3d6:	f107 0320 	add.w	r3, r7, #32
 800c3da:	9303      	str	r3, [sp, #12]
 800c3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e0:	9302      	str	r3, [sp, #8]
 800c3e2:	f107 030c 	add.w	r3, r7, #12
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	f107 0310 	add.w	r3, r7, #16
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	4a08      	ldr	r2, [pc, #32]	; (800c414 <Lora_idSTR+0x480>)
 800c3f2:	f001 ffdd 	bl	800e3b0 <FT_String_ND>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <Lora_idSTR+0x46c>
 800c3fc:	230d      	movs	r3, #13
 800c3fe:	e7ff      	b.n	800c400 <Lora_idSTR+0x46c>
}
 800c400:	4618      	mov	r0, r3
 800c402:	3728      	adds	r7, #40	; 0x28
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	08010844 	.word	0x08010844
 800c40c:	0801084c 	.word	0x0801084c
 800c410:	08010854 	.word	0x08010854
 800c414:	0801085c 	.word	0x0801085c

0800c418 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c43e:	bf00      	nop
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
	...

0800c44c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a1c      	ldr	r2, [pc, #112]	; (800c4ec <ModBUS_Config+0xa0>)
 800c47a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2220      	movs	r2, #32
 800c488:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a18      	ldr	r2, [pc, #96]	; (800c4f0 <ModBUS_Config+0xa4>)
 800c490:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2210      	movs	r2, #16
 800c49e:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2210      	movs	r2, #16
 800c4ac:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2220      	movs	r2, #32
 800c4ba:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	f0f0af5a 	.word	0xf0f0af5a
 800c4f0:	a5fa0f0f 	.word	0xa5fa0f0f

0800c4f4 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3305      	adds	r3, #5
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	3306      	adds	r3, #6
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d10b      	bne.n	800c524 <ModBUS_Check+0x30>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3302      	adds	r3, #2
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	3303      	adds	r3, #3
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	4413      	add	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <ModBUS_Check+0x30>
	{
		return(1);
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c524:	2300      	movs	r3, #0
	}
}
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7b5b      	ldrb	r3, [r3, #13]
 800c544:	429a      	cmp	r2, r3
 800c546:	d11d      	bne.n	800c584 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c552:	429a      	cmp	r2, r3
 800c554:	d116      	bne.n	800c584 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c560:	429a      	cmp	r2, r3
 800c562:	d10f      	bne.n	800c584 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c56e:	429a      	cmp	r2, r3
 800c570:	d108      	bne.n	800c584 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d101      	bne.n	800c584 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c584:	2300      	movs	r3, #0
	}
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c592:	b480      	push	{r7}
 800c594:	b085      	sub	sp, #20
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c5ac:	78fa      	ldrb	r2, [r7, #3]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d901      	bls.n	800c5b6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e015      	b.n	800c5e2 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	883a      	ldrh	r2, [r7, #0]
 800c5be:	b2d1      	uxtb	r1, r2
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	460a      	mov	r2, r1
 800c5c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c5ca:	883b      	ldrh	r3, [r7, #0]
 800c5cc:	0a1b      	lsrs	r3, r3, #8
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c5d2:	78fb      	ldrb	r3, [r7, #3]
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	7bfa      	ldrb	r2, [r7, #15]
 800c5dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c5e0:	2300      	movs	r3, #0
	}
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c608:	78fa      	ldrb	r2, [r7, #3]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d901      	bls.n	800c612 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c60e:	2301      	movs	r3, #1
 800c610:	e015      	b.n	800c63e <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	4413      	add	r3, r2
 800c61a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c61e:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c620:	89fb      	ldrh	r3, [r7, #14]
 800c622:	021b      	lsls	r3, r3, #8
 800c624:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c626:	78fb      	ldrb	r3, [r7, #3]
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	3301      	adds	r3, #1
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	4413      	add	r3, r2
 800c630:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c634:	b29a      	uxth	r2, r3
 800c636:	89fb      	ldrh	r3, [r7, #14]
 800c638:	4313      	orrs	r3, r2
 800c63a:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c63c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b083      	sub	sp, #12
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	460b      	mov	r3, r1
 800c654:	807b      	strh	r3, [r7, #2]
 800c656:	4613      	mov	r3, r2
 800c658:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c65a:	887b      	ldrh	r3, [r7, #2]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	461a      	mov	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c66e:	887b      	ldrh	r3, [r7, #2]
 800c670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c674:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c676:	887b      	ldrh	r3, [r7, #2]
 800c678:	0a1b      	lsrs	r3, r3, #8
 800c67a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c67c:	887b      	ldrh	r3, [r7, #2]
 800c67e:	f003 030f 	and.w	r3, r3, #15
 800c682:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2206      	movs	r2, #6
 800c6b0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	781a      	ldrb	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2203      	movs	r2, #3
 800c6c2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c6c6:	887b      	ldrh	r3, [r7, #2]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	787a      	ldrb	r2, [r7, #1]
 800c6dc:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	220c      	movs	r2, #12
 800c6e4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c6e8:	bf00      	nop
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	370c      	adds	r7, #12
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
	...

0800c6f8 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b09c      	sub	sp, #112	; 0x70
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	785b      	ldrb	r3, [r3, #1]
 800c704:	2b01      	cmp	r3, #1
 800c706:	f041 813f 	bne.w	800d988 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f103 020d 	add.w	r2, r3, #13
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f7ff feeb 	bl	800c4f4 <ModBUS_Check>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	f001 812f 	beq.w	800d984 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7d1b      	ldrb	r3, [r3, #20]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	2b0f      	cmp	r3, #15
 800c72e:	f201 80f3 	bhi.w	800d918 <ModBUS+0x1220>
 800c732:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <ModBUS+0x40>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c779 	.word	0x0800c779
 800c73c:	0800c9b9 	.word	0x0800c9b9
 800c740:	0800cbf9 	.word	0x0800cbf9
 800c744:	0800ce31 	.word	0x0800ce31
 800c748:	0800d069 	.word	0x0800d069
 800c74c:	0800d27f 	.word	0x0800d27f
 800c750:	0800d919 	.word	0x0800d919
 800c754:	0800d919 	.word	0x0800d919
 800c758:	0800d919 	.word	0x0800d919
 800c75c:	0800d919 	.word	0x0800d919
 800c760:	0800d919 	.word	0x0800d919
 800c764:	0800d919 	.word	0x0800d919
 800c768:	0800d919 	.word	0x0800d919
 800c76c:	0800d919 	.word	0x0800d919
 800c770:	0800d43b 	.word	0x0800d43b
 800c774:	0800d6cb 	.word	0x0800d6cb

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7c5a      	ldrb	r2, [r3, #17]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7c1a      	ldrb	r2, [r3, #16]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7bda      	ldrb	r2, [r3, #15]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7b9a      	ldrb	r2, [r3, #14]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7b5a      	ldrb	r2, [r3, #13]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	795b      	ldrb	r3, [r3, #5]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	f040 80e6 	bne.w	800c984 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	7d5b      	ldrb	r3, [r3, #21]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c7ca:	021b      	lsls	r3, r3, #8
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c7da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7d9b      	ldrb	r3, [r3, #22]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7ddb      	ldrb	r3, [r3, #23]
 800c800:	b29a      	uxth	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c81e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	7e1b      	ldrb	r3, [r3, #24]
 800c834:	b29b      	uxth	r3, r3
 800c836:	4313      	orrs	r3, r2
 800c838:	b29a      	uxth	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	429a      	cmp	r2, r3
 800c850:	d87e      	bhi.n	800c950 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c858:	461a      	mov	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c860:	4413      	add	r3, r2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800c868:	4293      	cmp	r3, r2
 800c86a:	dc57      	bgt.n	800c91c <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	613b      	str	r3, [r7, #16]
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	2300      	movs	r3, #0
 800c876:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c878:	2300      	movs	r3, #0
 800c87a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800c88c:	40d3      	lsrs	r3, r2
 800c88e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c896:	08db      	lsrs	r3, r3, #3
 800c898:	b29b      	uxth	r3, r3
 800c89a:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c8a2:	f003 0307 	and.w	r3, r3, #7
 800c8a6:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <ModBUS+0x1bc>
									{
										bytes=div;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8b2:	e002      	b.n	800c8ba <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800c8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800c8c4:	e00e      	b.n	800c8e4 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8cc:	b2d1      	uxtb	r1, r2
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	460a      	mov	r2, r1
 800c8d4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800c8d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800c8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800c8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dced      	bgt.n	800c8c6 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c900:	3303      	adds	r3, #3
 800c902:	b2da      	uxtb	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c910:	1d9a      	adds	r2, r3, #6
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c918:	f001 b8d4 	b.w	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2281      	movs	r2, #129	; 0x81
 800c928:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2203      	movs	r2, #3
 800c938:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c942:	1d9a      	adds	r2, r3, #6
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c94a:	2302      	movs	r3, #2
 800c94c:	f001 b8ba 	b.w	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2203      	movs	r2, #3
 800c954:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2281      	movs	r2, #129	; 0x81
 800c95c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2203      	movs	r2, #3
 800c96c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c976:	1d9a      	adds	r2, r3, #6
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c97e:	2303      	movs	r3, #3
 800c980:	f001 b8a0 	b.w	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2281      	movs	r2, #129	; 0x81
 800c990:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2203      	movs	r2, #3
 800c9a0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c9aa:	1d9a      	adds	r2, r3, #6
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f001 b886 	b.w	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	7c5a      	ldrb	r2, [r3, #17]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	7c1a      	ldrb	r2, [r3, #16]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	7bda      	ldrb	r2, [r3, #15]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7b9a      	ldrb	r2, [r3, #14]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7b5a      	ldrb	r2, [r3, #13]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	799b      	ldrb	r3, [r3, #6]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	f040 80e6 	bne.w	800cbc4 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d5b      	ldrb	r3, [r3, #21]
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca0a:	021b      	lsls	r3, r3, #8
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7d9b      	ldrb	r3, [r3, #22]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	4313      	orrs	r3, r2
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7ddb      	ldrb	r3, [r3, #23]
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca4e:	021b      	lsls	r3, r3, #8
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7e1b      	ldrb	r3, [r3, #24]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	4313      	orrs	r3, r2
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d87e      	bhi.n	800cb90 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca98:	461a      	mov	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800caa0:	4413      	add	r3, r2
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800caa8:	4293      	cmp	r3, r2
 800caaa:	dc57      	bgt.n	800cb5c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800caac:	2300      	movs	r3, #0
 800caae:	623b      	str	r3, [r7, #32]
 800cab0:	2300      	movs	r3, #0
 800cab2:	61fb      	str	r3, [r7, #28]
 800cab4:	2300      	movs	r3, #0
 800cab6:	667b      	str	r3, [r7, #100]	; 0x64
 800cab8:	2300      	movs	r3, #0
 800caba:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800cacc:	40d3      	lsrs	r3, r2
 800cace:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cad6:	08db      	lsrs	r3, r3, #3
 800cad8:	b29b      	uxth	r3, r3
 800cada:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d102      	bne.n	800caf4 <ModBUS+0x3fc>
									{
										bytes=div;
 800caee:	6a3b      	ldr	r3, [r7, #32]
 800caf0:	667b      	str	r3, [r7, #100]	; 0x64
 800caf2:	e002      	b.n	800cafa <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	3301      	adds	r3, #1
 800caf8:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800cafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cb04:	e00e      	b.n	800cb24 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cb06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb08:	3308      	adds	r3, #8
 800cb0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb0c:	b2d1      	uxtb	r1, r2
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	4413      	add	r3, r2
 800cb12:	460a      	mov	r2, r1
 800cb14:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cb18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cb1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb20:	3b01      	subs	r3, #1
 800cb22:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cb24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	dced      	bgt.n	800cb06 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb40:	3303      	adds	r3, #3
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb50:	1d9a      	adds	r2, r3, #6
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb58:	f000 bfb4 	b.w	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2282      	movs	r2, #130	; 0x82
 800cb68:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2203      	movs	r2, #3
 800cb78:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb82:	1d9a      	adds	r2, r3, #6
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	f000 bf9a 	b.w	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2203      	movs	r2, #3
 800cb94:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2282      	movs	r2, #130	; 0x82
 800cb9c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2203      	movs	r2, #3
 800cbac:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbb6:	1d9a      	adds	r2, r3, #6
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	f000 bf80 	b.w	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2282      	movs	r2, #130	; 0x82
 800cbd0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2203      	movs	r2, #3
 800cbe0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbea:	1d9a      	adds	r2, r3, #6
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	f000 bf66 	b.w	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7c5a      	ldrb	r2, [r3, #17]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7c1a      	ldrb	r2, [r3, #16]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	7bda      	ldrb	r2, [r3, #15]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7b9a      	ldrb	r2, [r3, #14]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7b5a      	ldrb	r2, [r3, #13]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	79db      	ldrb	r3, [r3, #7]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	f040 80e2 	bne.w	800cdfc <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7d5b      	ldrb	r3, [r3, #21]
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc4a:	021b      	lsls	r3, r3, #8
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7d9b      	ldrb	r3, [r3, #22]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	4313      	orrs	r3, r2
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7ddb      	ldrb	r3, [r3, #23]
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	7e1b      	ldrb	r3, [r3, #24]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d87a      	bhi.n	800cdc8 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ccd8:	461a      	mov	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cce0:	4413      	add	r3, r2
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800cce8:	4293      	cmp	r3, r2
 800ccea:	dc53      	bgt.n	800cd94 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800ccec:	e029      	b.n	800cd42 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf8:	4413      	add	r3, r2
 800ccfa:	005a      	lsls	r2, r3, #1
 800ccfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccfe:	005b      	lsls	r3, r3, #1
 800cd00:	3309      	adds	r3, #9
 800cd02:	6879      	ldr	r1, [r7, #4]
 800cd04:	440a      	add	r2, r1
 800cd06:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	460a      	mov	r2, r1
 800cd10:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd1e:	4413      	add	r3, r2
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd26:	3305      	adds	r3, #5
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	440a      	add	r2, r1
 800cd2e:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	4413      	add	r3, r2
 800cd36:	460a      	mov	r2, r1
 800cd38:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cd3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd3e:	3301      	adds	r3, #1
 800cd40:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	dbce      	blt.n	800ccee <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	b2da      	uxtb	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2203      	movs	r2, #3
 800cd66:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cd78:	3303      	adds	r3, #3
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd88:	1d9a      	adds	r2, r3, #6
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd90:	f000 be98 	b.w	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2283      	movs	r2, #131	; 0x83
 800cda0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2203      	movs	r2, #3
 800cdb0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdba:	1d9a      	adds	r2, r3, #6
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	f000 be7e 	b.w	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2203      	movs	r2, #3
 800cdcc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2283      	movs	r2, #131	; 0x83
 800cdd4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2203      	movs	r2, #3
 800cde4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdee:	1d9a      	adds	r2, r3, #6
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	f000 be64 	b.w	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2283      	movs	r2, #131	; 0x83
 800ce08:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2203      	movs	r2, #3
 800ce18:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce22:	1d9a      	adds	r2, r3, #6
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	f000 be4a 	b.w	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7c5a      	ldrb	r2, [r3, #17]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7c1a      	ldrb	r2, [r3, #16]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	7bda      	ldrb	r2, [r3, #15]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7b9a      	ldrb	r2, [r3, #14]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7b5a      	ldrb	r2, [r3, #13]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7a1b      	ldrb	r3, [r3, #8]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	f040 80e2 	bne.w	800d034 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7d5b      	ldrb	r3, [r3, #21]
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7d9b      	ldrb	r3, [r3, #22]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7ddb      	ldrb	r3, [r3, #23]
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800ced6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	7e1b      	ldrb	r3, [r3, #24]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	4313      	orrs	r3, r2
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d87a      	bhi.n	800d000 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf10:	461a      	mov	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf18:	4413      	add	r3, r2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800cf20:	4293      	cmp	r3, r2
 800cf22:	dc53      	bgt.n	800cfcc <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cf24:	e029      	b.n	800cf7a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf30:	4413      	add	r3, r2
 800cf32:	005a      	lsls	r2, r3, #1
 800cf34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	3309      	adds	r3, #9
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	440a      	add	r2, r1
 800cf3e:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4413      	add	r3, r2
 800cf46:	460a      	mov	r2, r1
 800cf48:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf52:	461a      	mov	r2, r3
 800cf54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf56:	4413      	add	r3, r2
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf5e:	3305      	adds	r3, #5
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	440a      	add	r2, r1
 800cf66:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	460a      	mov	r2, r1
 800cf70:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cf74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf76:	3301      	adds	r3, #1
 800cf78:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf80:	461a      	mov	r2, r3
 800cf82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf84:	4293      	cmp	r3, r2
 800cf86:	dbce      	blt.n	800cf26 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2204      	movs	r2, #4
 800cf9e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cfb0:	3303      	adds	r3, #3
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfc0:	1d9a      	adds	r2, r3, #6
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cfc8:	f000 bd7c 	b.w	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2202      	movs	r2, #2
 800cfd0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2284      	movs	r2, #132	; 0x84
 800cfd8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2203      	movs	r2, #3
 800cfe8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cff2:	1d9a      	adds	r2, r3, #6
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cffa:	2302      	movs	r3, #2
 800cffc:	f000 bd62 	b.w	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2203      	movs	r2, #3
 800d004:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2284      	movs	r2, #132	; 0x84
 800d00c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2203      	movs	r2, #3
 800d01c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d026:	1d9a      	adds	r2, r3, #6
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d02e:	2303      	movs	r3, #3
 800d030:	f000 bd48 	b.w	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2284      	movs	r2, #132	; 0x84
 800d040:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2203      	movs	r2, #3
 800d050:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d05a:	1d9a      	adds	r2, r3, #6
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d062:	2301      	movs	r3, #1
 800d064:	f000 bd2e 	b.w	800dac4 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7c5a      	ldrb	r2, [r3, #17]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7c1a      	ldrb	r2, [r3, #16]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7bda      	ldrb	r2, [r3, #15]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	7b9a      	ldrb	r2, [r3, #14]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7b5a      	ldrb	r2, [r3, #13]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7a5b      	ldrb	r3, [r3, #9]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	f040 80d1 	bne.w	800d24a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	7d5b      	ldrb	r3, [r3, #21]
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d0ba:	021b      	lsls	r3, r3, #8
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d0ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7d9b      	ldrb	r3, [r3, #22]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7ddb      	ldrb	r3, [r3, #23]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d0fe:	021b      	lsls	r3, r3, #8
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d10e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	7e1b      	ldrb	r3, [r3, #24]
 800d124:	b29b      	uxth	r3, r3
 800d126:	4313      	orrs	r3, r2
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d136:	461a      	mov	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d13e:	429a      	cmp	r2, r3
 800d140:	dd69      	ble.n	800d216 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d005      	beq.n	800d158 <ModBUS+0xa60>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d152:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d156:	d144      	bne.n	800d1e2 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d15e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d162:	d10d      	bne.n	800d180 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d170:	4611      	mov	r1, r2
 800d172:	2201      	movs	r2, #1
 800d174:	408a      	lsls	r2, r1
 800d176:	431a      	orrs	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d17e:	e003      	b.n	800d188 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7e1a      	ldrb	r2, [r3, #24]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7dda      	ldrb	r2, [r3, #23]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	7d9a      	ldrb	r2, [r3, #22]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7d5a      	ldrb	r2, [r3, #21]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2205      	movs	r2, #5
 800d1b4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d1c6:	3306      	adds	r3, #6
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1d6:	1d9a      	adds	r2, r3, #6
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d1de:	f000 bc71 	b.w	800dac4 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2285      	movs	r2, #133	; 0x85
 800d1ee:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2203      	movs	r2, #3
 800d1fe:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d208:	1d9a      	adds	r2, r3, #6
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d210:	2302      	movs	r3, #2
 800d212:	f000 bc57 	b.w	800dac4 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2203      	movs	r2, #3
 800d21a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2285      	movs	r2, #133	; 0x85
 800d222:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2203      	movs	r2, #3
 800d232:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d23c:	1d9a      	adds	r2, r3, #6
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d244:	2303      	movs	r3, #3
 800d246:	f000 bc3d 	b.w	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2285      	movs	r2, #133	; 0x85
 800d256:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2203      	movs	r2, #3
 800d266:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d270:	1d9a      	adds	r2, r3, #6
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d278:	2301      	movs	r3, #1
 800d27a:	f000 bc23 	b.w	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	7c5a      	ldrb	r2, [r3, #17]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7c1a      	ldrb	r2, [r3, #16]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7bda      	ldrb	r2, [r3, #15]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7b9a      	ldrb	r2, [r3, #14]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7b5a      	ldrb	r2, [r3, #13]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7a9b      	ldrb	r3, [r3, #10]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	f040 80a3 	bne.w	800d408 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7d5b      	ldrb	r3, [r3, #21]
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7d9b      	ldrb	r3, [r3, #22]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d30c:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7ddb      	ldrb	r3, [r3, #23]
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	b29a      	uxth	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d330:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d334:	b29a      	uxth	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7e1b      	ldrb	r3, [r3, #24]
 800d346:	b29b      	uxth	r3, r3
 800d348:	4313      	orrs	r3, r2
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d35e:	b29b      	uxth	r3, r3
 800d360:	429a      	cmp	r2, r3
 800d362:	d838      	bhi.n	800d3d6 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d364:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	7dd1      	ldrb	r1, [r2, #23]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	460a      	mov	r2, r1
 800d370:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d374:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d376:	3301      	adds	r3, #1
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	7e11      	ldrb	r1, [r2, #24]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	4413      	add	r3, r2
 800d380:	460a      	mov	r2, r1
 800d382:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	7e1a      	ldrb	r2, [r3, #24]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7dda      	ldrb	r2, [r3, #23]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	7d9a      	ldrb	r2, [r3, #22]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7d5a      	ldrb	r2, [r3, #21]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2206      	movs	r2, #6
 800d3b2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2206      	movs	r2, #6
 800d3c2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3cc:	1d9a      	adds	r2, r3, #6
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d3d4:	e376      	b.n	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2202      	movs	r2, #2
 800d3da:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2286      	movs	r2, #134	; 0x86
 800d3e2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2203      	movs	r2, #3
 800d3f2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3fc:	1d9a      	adds	r2, r3, #6
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d404:	2302      	movs	r3, #2
 800d406:	e35d      	b.n	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2286      	movs	r2, #134	; 0x86
 800d414:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2203      	movs	r2, #3
 800d424:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d42e:	1d9a      	adds	r2, r3, #6
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d436:	2301      	movs	r3, #1
 800d438:	e344      	b.n	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7c5a      	ldrb	r2, [r3, #17]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7c1a      	ldrb	r2, [r3, #16]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7bda      	ldrb	r2, [r3, #15]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7b9a      	ldrb	r2, [r3, #14]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	7b5a      	ldrb	r2, [r3, #13]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d46c:	2300      	movs	r3, #0
 800d46e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7adb      	ldrb	r3, [r3, #11]
 800d474:	2b01      	cmp	r3, #1
 800d476:	f040 810f 	bne.w	800d698 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7d5b      	ldrb	r3, [r3, #21]
 800d47e:	b29a      	uxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	b29a      	uxth	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d49c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7d9b      	ldrb	r3, [r3, #22]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7ddb      	ldrb	r3, [r3, #23]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4d0:	021b      	lsls	r3, r3, #8
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	7e1b      	ldrb	r3, [r3, #24]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d50e:	b29b      	uxth	r3, r3
 800d510:	429a      	cmp	r2, r3
 800d512:	f200 80a8 	bhi.w	800d666 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d51c:	461a      	mov	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d524:	4413      	add	r3, r2
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d52c:	4293      	cmp	r3, r2
 800d52e:	f300 8081 	bgt.w	800d634 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d532:	2300      	movs	r3, #0
 800d534:	657b      	str	r3, [r7, #84]	; 0x54
 800d536:	2300      	movs	r3, #0
 800d538:	653b      	str	r3, [r7, #80]	; 0x50
 800d53a:	2300      	movs	r3, #0
 800d53c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d53e:	2300      	movs	r3, #0
 800d540:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	7e5b      	ldrb	r3, [r3, #25]
 800d546:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d548:	e00e      	b.n	800d568 <ModBUS+0xe70>
									{
										data=data<<8;
 800d54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d552:	330c      	adds	r3, #12
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	4413      	add	r3, r2
 800d558:	7b5b      	ldrb	r3, [r3, #13]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d55e:	4313      	orrs	r3, r2
 800d560:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d564:	3b01      	subs	r3, #1
 800d566:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1ed      	bne.n	800d54a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d574:	461a      	mov	r2, r3
 800d576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d578:	4093      	lsls	r3, r2
 800d57a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d57c:	e00f      	b.n	800d59e <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d584:	461a      	mov	r2, r3
 800d586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d588:	4413      	add	r3, r2
 800d58a:	2201      	movs	r2, #1
 800d58c:	fa02 f303 	lsl.w	r3, r2, r3
 800d590:	461a      	mov	r2, r3
 800d592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d594:	4313      	orrs	r3, r2
 800d596:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d59a:	3301      	adds	r3, #1
 800d59c:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d3e8      	bcc.n	800d57e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d5ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ae:	43db      	mvns	r3, r3
 800d5b0:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ba:	401a      	ands	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d5c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c4:	43db      	mvns	r3, r3
 800d5c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7e1a      	ldrb	r2, [r3, #24]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7dda      	ldrb	r2, [r3, #23]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7d9a      	ldrb	r2, [r3, #22]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d5a      	ldrb	r2, [r3, #21]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	220f      	movs	r2, #15
 800d608:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d61a:	3306      	adds	r3, #6
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d62a:	1d9a      	adds	r2, r3, #6
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d632:	e247      	b.n	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	228f      	movs	r2, #143	; 0x8f
 800d640:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2203      	movs	r2, #3
 800d650:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d65a:	1d9a      	adds	r2, r3, #6
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d662:	2302      	movs	r3, #2
 800d664:	e22e      	b.n	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2203      	movs	r2, #3
 800d66a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	228f      	movs	r2, #143	; 0x8f
 800d672:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2203      	movs	r2, #3
 800d682:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d68c:	1d9a      	adds	r2, r3, #6
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d694:	2303      	movs	r3, #3
 800d696:	e215      	b.n	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	228f      	movs	r2, #143	; 0x8f
 800d6a4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2203      	movs	r2, #3
 800d6b4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d6be:	1d9a      	adds	r2, r3, #6
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e1fc      	b.n	800dac4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7c5a      	ldrb	r2, [r3, #17]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7c1a      	ldrb	r2, [r3, #16]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	7bda      	ldrb	r2, [r3, #15]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	7b9a      	ldrb	r2, [r3, #14]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	7b5a      	ldrb	r2, [r3, #13]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d702:	2300      	movs	r3, #0
 800d704:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7b1b      	ldrb	r3, [r3, #12]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	f040 80eb 	bne.w	800d8e6 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	7d5b      	ldrb	r3, [r3, #21]
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d722:	021b      	lsls	r3, r3, #8
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7d9b      	ldrb	r3, [r3, #22]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4313      	orrs	r3, r2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7ddb      	ldrb	r3, [r3, #23]
 800d762:	b29a      	uxth	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	b29a      	uxth	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d780:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d784:	b29a      	uxth	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	7e1b      	ldrb	r3, [r3, #24]
 800d796:	b29b      	uxth	r3, r3
 800d798:	4313      	orrs	r3, r2
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d87f      	bhi.n	800d8b4 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d7c2:	4413      	add	r3, r2
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	dc59      	bgt.n	800d882 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d7ce:	e029      	b.n	800d824 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d7d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7d4:	f103 020d 	add.w	r2, r3, #13
 800d7d8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d7da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7de:	440b      	add	r3, r1
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	440a      	add	r2, r1
 800d7e4:	7b51      	ldrb	r1, [r2, #13]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	460a      	mov	r2, r1
 800d7ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800d7f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d7fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7fe:	f103 020d 	add.w	r2, r3, #13
 800d802:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d808:	440b      	add	r3, r1
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	440a      	add	r2, r1
 800d80e:	7b51      	ldrb	r1, [r2, #13]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4413      	add	r3, r2
 800d814:	460a      	mov	r2, r1
 800d816:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800d81a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d81e:	3301      	adds	r3, #1
 800d820:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7e5b      	ldrb	r3, [r3, #25]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d82e:	429a      	cmp	r2, r3
 800d830:	d3ce      	bcc.n	800d7d0 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	7e1a      	ldrb	r2, [r3, #24]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	7dda      	ldrb	r2, [r3, #23]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	7d9a      	ldrb	r2, [r3, #22]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7d5a      	ldrb	r2, [r3, #21]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2210      	movs	r2, #16
 800d85e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2206      	movs	r2, #6
 800d86e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d878:	1d9a      	adds	r2, r3, #6
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d880:	e120      	b.n	800dac4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2202      	movs	r2, #2
 800d886:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2290      	movs	r2, #144	; 0x90
 800d88e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2203      	movs	r2, #3
 800d89e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8a8:	1d9a      	adds	r2, r3, #6
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	e107      	b.n	800dac4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2290      	movs	r2, #144	; 0x90
 800d8c0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2203      	movs	r2, #3
 800d8d0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8da:	1d9a      	adds	r2, r3, #6
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	e0ee      	b.n	800dac4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2290      	movs	r2, #144	; 0x90
 800d8f2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2203      	movs	r2, #3
 800d902:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d90c:	1d9a      	adds	r2, r3, #6
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d914:	2301      	movs	r3, #1
 800d916:	e0d5      	b.n	800dac4 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	7d1b      	ldrb	r3, [r3, #20]
 800d924:	3b80      	subs	r3, #128	; 0x80
 800d926:	b2da      	uxtb	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7cda      	ldrb	r2, [r3, #19]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2203      	movs	r2, #3
 800d93c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7c5a      	ldrb	r2, [r3, #17]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	7c1a      	ldrb	r2, [r3, #16]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	7bda      	ldrb	r2, [r3, #15]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7b9a      	ldrb	r2, [r3, #14]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7b5a      	ldrb	r2, [r3, #13]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d978:	1d9a      	adds	r2, r3, #6
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800d980:	2301      	movs	r3, #1
 800d982:	e09f      	b.n	800dac4 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800d984:	2301      	movs	r3, #1
 800d986:	e09d      	b.n	800dac4 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	785b      	ldrb	r3, [r3, #1]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f040 8099 	bne.w	800dac4 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f103 020d 	add.w	r2, r3, #13
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7fe fda7 	bl	800c4f4 <ModBUS_Check>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 808b 	beq.w	800dac4 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7fe fdbf 	bl	800c532 <ModBUS_Check_tid>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d04f      	beq.n	800da5a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7d1b      	ldrb	r3, [r3, #20]
 800d9be:	2b03      	cmp	r3, #3
 800d9c0:	d143      	bne.n	800da4a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d9d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d9d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9d6:	021b      	lsls	r3, r3, #8
 800d9d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d9ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9f6:	e022      	b.n	800da3e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	f103 0209 	add.w	r2, r3, #9
 800da00:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800da02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da04:	440b      	add	r3, r1
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	6879      	ldr	r1, [r7, #4]
 800da0a:	440a      	add	r2, r1
 800da0c:	7b51      	ldrb	r1, [r2, #13]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	4413      	add	r3, r2
 800da12:	460a      	mov	r2, r1
 800da14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800da18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1a:	3305      	adds	r3, #5
 800da1c:	005a      	lsls	r2, r3, #1
 800da1e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800da20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da22:	440b      	add	r3, r1
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	3301      	adds	r3, #1
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	440a      	add	r2, r1
 800da2c:	7b51      	ldrb	r1, [r2, #13]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4413      	add	r3, r2
 800da32:	460a      	mov	r2, r1
 800da34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800da38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3a:	3301      	adds	r3, #1
 800da3c:	643b      	str	r3, [r7, #64]	; 0x40
 800da3e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800da42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da44:	429a      	cmp	r2, r3
 800da46:	dbd7      	blt.n	800d9f8 <ModBUS+0x1300>

						}


					}
					break;
 800da48:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7c9b      	ldrb	r3, [r3, #18]
 800da4e:	461a      	mov	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7d5b      	ldrb	r3, [r3, #21]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	63bb      	str	r3, [r7, #56]	; 0x38
 800da58:	e034      	b.n	800dac4 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	3b81      	subs	r3, #129	; 0x81
 800da60:	2b15      	cmp	r3, #21
 800da62:	d82f      	bhi.n	800dac4 <ModBUS+0x13cc>
 800da64:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <ModBUS+0x1374>)
 800da66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6a:	bf00      	nop
 800da6c:	0800dac5 	.word	0x0800dac5
 800da70:	0800dac5 	.word	0x0800dac5
 800da74:	0800dac5 	.word	0x0800dac5
 800da78:	0800dac5 	.word	0x0800dac5
 800da7c:	0800dac5 	.word	0x0800dac5
 800da80:	0800dac5 	.word	0x0800dac5
 800da84:	0800dac5 	.word	0x0800dac5
 800da88:	0800dac5 	.word	0x0800dac5
 800da8c:	0800dac5 	.word	0x0800dac5
 800da90:	0800dac5 	.word	0x0800dac5
 800da94:	0800dac5 	.word	0x0800dac5
 800da98:	0800dac5 	.word	0x0800dac5
 800da9c:	0800dac5 	.word	0x0800dac5
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800dac5 	.word	0x0800dac5
 800daa8:	0800dac5 	.word	0x0800dac5
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dac5 	.word	0x0800dac5
 800dab4:	0800dac5 	.word	0x0800dac5
 800dab8:	0800dac5 	.word	0x0800dac5
 800dabc:	0800dac5 	.word	0x0800dac5
 800dac0:	0800dac5 	.word	0x0800dac5
			}
		}
	}


}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3770      	adds	r7, #112	; 0x70
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6858      	ldr	r0, [r3, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	891b      	ldrh	r3, [r3, #8]
 800dadc:	2200      	movs	r2, #0
 800dade:	4619      	mov	r1, r3
 800dae0:	f7f5 fce6 	bl	80034b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6818      	ldr	r0, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f103 0114 	add.w	r1, r3, #20
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f103 0218 	add.w	r2, r3, #24
 800daf4:	2364      	movs	r3, #100	; 0x64
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2304      	movs	r3, #4
 800dafa:	f7f6 f9ee 	bl	8003eda <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6858      	ldr	r0, [r3, #4]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	891b      	ldrh	r3, [r3, #8]
 800db06:	2201      	movs	r2, #1
 800db08:	4619      	mov	r1, r3
 800db0a:	f7f5 fcd1 	bl	80034b0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	7edb      	ldrb	r3, [r3, #27]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b086      	sub	sp, #24
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	4608      	mov	r0, r1
 800db24:	4611      	mov	r1, r2
 800db26:	461a      	mov	r2, r3
 800db28:	4603      	mov	r3, r0
 800db2a:	70fb      	strb	r3, [r7, #3]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70bb      	strb	r3, [r7, #2]
 800db30:	4613      	mov	r3, r2
 800db32:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800db34:	2300      	movs	r3, #0
 800db36:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	787a      	ldrb	r2, [r7, #1]
 800db3c:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	78fa      	ldrb	r2, [r7, #3]
 800db42:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	78ba      	ldrb	r2, [r7, #2]
 800db48:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800db50:	787b      	ldrb	r3, [r7, #1]
 800db52:	2bf0      	cmp	r3, #240	; 0xf0
 800db54:	d11d      	bne.n	800db92 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800db56:	2300      	movs	r3, #0
 800db58:	613b      	str	r3, [r7, #16]
 800db5a:	e013      	b.n	800db84 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	6a3a      	ldr	r2, [r7, #32]
 800db60:	4413      	add	r3, r2
 800db62:	781a      	ldrb	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ffaf 	bl	800dacc <SPI_ETH>
 800db6e:	4603      	mov	r3, r0
 800db70:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7d9b      	ldrb	r3, [r3, #22]
 800db76:	3301      	adds	r3, #1
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	3301      	adds	r3, #1
 800db82:	613b      	str	r3, [r7, #16]
 800db84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db88:	693a      	ldr	r2, [r7, #16]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	dbe6      	blt.n	800db5c <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800db8e:	8afb      	ldrh	r3, [r7, #22]
 800db90:	e037      	b.n	800dc02 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800db92:	787b      	ldrb	r3, [r7, #1]
 800db94:	2b0f      	cmp	r3, #15
 800db96:	d134      	bne.n	800dc02 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800db9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d120      	bne.n	800dbe8 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800dba6:	2300      	movs	r3, #0
 800dba8:	60fb      	str	r3, [r7, #12]
 800dbaa:	e016      	b.n	800dbda <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ff8d 	bl	800dacc <SPI_ETH>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	8afb      	ldrh	r3, [r7, #22]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7d9b      	ldrb	r3, [r3, #22]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <SPI_ETH_REG+0xba>
 800dbce:	8afb      	ldrh	r3, [r7, #22]
 800dbd0:	021b      	lsls	r3, r3, #8
 800dbd2:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]
 800dbda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	dbe3      	blt.n	800dbac <SPI_ETH_REG+0x92>
			}
		 return(res);
 800dbe4:	8afb      	ldrh	r3, [r7, #22]
 800dbe6:	e00c      	b.n	800dc02 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff ff6f 	bl	800dacc <SPI_ETH>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7d9b      	ldrb	r3, [r3, #22]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	759a      	strb	r2, [r3, #22]
			return(res);
 800dbfe:	8afb      	ldrh	r3, [r7, #22]
 800dc00:	e7ff      	b.n	800dc02 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b086      	sub	sp, #24
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	460b      	mov	r3, r1
 800dc14:	807b      	strh	r3, [r7, #2]
 800dc16:	4613      	mov	r3, r2
 800dc18:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	22f0      	movs	r2, #240	; 0xf0
 800dc22:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800dc24:	883b      	ldrh	r3, [r7, #0]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800dc2a:	883b      	ldrh	r3, [r7, #0]
 800dc2c:	0a1b      	lsrs	r3, r3, #8
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
 800dc38:	e01b      	b.n	800dc72 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800dc3a:	887b      	ldrh	r3, [r7, #2]
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	0a1b      	lsrs	r3, r3, #8
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	755a      	strb	r2, [r3, #21]
		addr++;
 800dc4e:	887b      	ldrh	r3, [r7, #2]
 800dc50:	3301      	adds	r3, #1
 800dc52:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800dc54:	f107 020c 	add.w	r2, r7, #12
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	781a      	ldrb	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff ff32 	bl	800dacc <SPI_ETH>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	dde0      	ble.n	800dc3a <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800dc78:	8afb      	ldrh	r3, [r7, #22]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dc82:	b590      	push	{r4, r7, lr}
 800dc84:	b087      	sub	sp, #28
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	607a      	str	r2, [r7, #4]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	460b      	mov	r3, r1
 800dc90:	817b      	strh	r3, [r7, #10]
 800dc92:	4613      	mov	r3, r2
 800dc94:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	220f      	movs	r2, #15
 800dc9a:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dc9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dca2:	d226      	bcs.n	800dcf2 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800dcaa:	2300      	movs	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
 800dcae:	e01a      	b.n	800dce6 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800dcb0:	897b      	ldrh	r3, [r7, #10]
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dcb8:	897b      	ldrh	r3, [r7, #10]
 800dcba:	0a1b      	lsrs	r3, r3, #8
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800dcc4:	893a      	ldrh	r2, [r7, #8]
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	4413      	add	r3, r2
 800dcca:	461a      	mov	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	189c      	adds	r4, r3, r2
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f7ff fefb 	bl	800dacc <SPI_ETH>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	7023      	strb	r3, [r4, #0]
				addr++;
 800dcda:	897b      	ldrh	r3, [r7, #10]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	3301      	adds	r3, #1
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	dbe0      	blt.n	800dcb0 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dcee:	2300      	movs	r3, #0
 800dcf0:	e000      	b.n	800dcf4 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800dcf2:	2301      	movs	r3, #1
	}
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd90      	pop	{r4, r7, pc}

0800dcfc <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	607a      	str	r2, [r7, #4]
 800dd06:	461a      	mov	r2, r3
 800dd08:	460b      	mov	r3, r1
 800dd0a:	817b      	strh	r3, [r7, #10]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	22f0      	movs	r2, #240	; 0xf0
 800dd14:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dd16:	8c3b      	ldrh	r3, [r7, #32]
 800dd18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd1c:	d223      	bcs.n	800dd66 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800dd1e:	2300      	movs	r3, #0
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	e01a      	b.n	800dd5a <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800dd24:	897b      	ldrh	r3, [r7, #10]
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dd2c:	897b      	ldrh	r3, [r7, #10]
 800dd2e:	0a1b      	lsrs	r3, r3, #8
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800dd38:	893a      	ldrh	r2, [r7, #8]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4413      	add	r3, r2
 800dd42:	7f1a      	ldrb	r2, [r3, #28]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7ff febf 	bl	800dacc <SPI_ETH>
				addr++;
 800dd4e:	897b      	ldrh	r3, [r7, #10]
 800dd50:	3301      	adds	r3, #1
 800dd52:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	3301      	adds	r3, #1
 800dd58:	617b      	str	r3, [r7, #20]
 800dd5a:	8c3b      	ldrh	r3, [r7, #32]
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	dbe0      	blt.n	800dd24 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dd62:	2300      	movs	r3, #0
 800dd64:	e000      	b.n	800dd68 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800dd66:	2301      	movs	r3, #1
	}
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	22f0      	movs	r2, #240	; 0xf0
 800dd84:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dd86:	78fb      	ldrb	r3, [r7, #3]
 800dd88:	3304      	adds	r3, #4
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	78ba      	ldrb	r2, [r7, #2]
 800dd9a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff fe95 	bl	800dacc <SPI_ETH>
}
 800dda2:	bf00      	nop
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	22f0      	movs	r2, #240	; 0xf0
 800ddc0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	78ba      	ldrb	r2, [r7, #2]
 800ddd6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff fe77 	bl	800dacc <SPI_ETH>
}
 800ddde:	bf00      	nop
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af02      	add	r7, sp, #8
 800ddee:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddf6:	331c      	adds	r3, #28
 800ddf8:	2204      	movs	r2, #4
 800ddfa:	9201      	str	r2, [sp, #4]
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	23f0      	movs	r3, #240	; 0xf0
 800de00:	2201      	movs	r2, #1
 800de02:	2100      	movs	r1, #0
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fe88 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800de0a:	2119      	movs	r1, #25
 800de0c:	482d      	ldr	r0, [pc, #180]	; (800dec4 <eth_init+0xdc>)
 800de0e:	f7f3 fba3 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de18:	2204      	movs	r2, #4
 800de1a:	9201      	str	r2, [sp, #4]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	23f0      	movs	r3, #240	; 0xf0
 800de20:	2205      	movs	r2, #5
 800de22:	2100      	movs	r1, #0
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7ff fe78 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800de2a:	2116      	movs	r1, #22
 800de2c:	4826      	ldr	r0, [pc, #152]	; (800dec8 <eth_init+0xe0>)
 800de2e:	f7f3 fb93 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de38:	3304      	adds	r3, #4
 800de3a:	2206      	movs	r2, #6
 800de3c:	9201      	str	r2, [sp, #4]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	23f0      	movs	r3, #240	; 0xf0
 800de42:	2209      	movs	r2, #9
 800de44:	2100      	movs	r1, #0
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fe67 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800de4c:	2113      	movs	r1, #19
 800de4e:	481f      	ldr	r0, [pc, #124]	; (800decc <eth_init+0xe4>)
 800de50:	f7f3 fb82 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de5a:	330a      	adds	r3, #10
 800de5c:	2204      	movs	r2, #4
 800de5e:	9201      	str	r2, [sp, #4]
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	23f0      	movs	r3, #240	; 0xf0
 800de64:	220f      	movs	r2, #15
 800de66:	2100      	movs	r1, #0
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fe56 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800de6e:	2112      	movs	r1, #18
 800de70:	4817      	ldr	r0, [pc, #92]	; (800ded0 <eth_init+0xe8>)
 800de72:	f7f3 fb71 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de7c:	330e      	adds	r3, #14
 800de7e:	2201      	movs	r2, #1
 800de80:	9201      	str	r2, [sp, #4]
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	23f0      	movs	r3, #240	; 0xf0
 800de86:	221a      	movs	r2, #26
 800de88:	2100      	movs	r1, #0
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7ff fe45 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800de90:	2128      	movs	r1, #40	; 0x28
 800de92:	4810      	ldr	r0, [pc, #64]	; (800ded4 <eth_init+0xec>)
 800de94:	f7f3 fb60 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de9e:	330f      	adds	r3, #15
 800dea0:	2201      	movs	r2, #1
 800dea2:	9201      	str	r2, [sp, #4]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	23f0      	movs	r3, #240	; 0xf0
 800dea8:	221b      	movs	r2, #27
 800deaa:	2100      	movs	r1, #0
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7ff fe34 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800deb2:	2128      	movs	r1, #40	; 0x28
 800deb4:	4808      	ldr	r0, [pc, #32]	; (800ded8 <eth_init+0xf0>)
 800deb6:	f7f3 fb4f 	bl	8001558 <ITM0_Write>

}
 800deba:	bf00      	nop
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	08010864 	.word	0x08010864
 800dec8:	08010880 	.word	0x08010880
 800decc:	0801089c 	.word	0x0801089c
 800ded0:	080108b4 	.word	0x080108b4
 800ded4:	080108cc 	.word	0x080108cc
 800ded8:	080108f8 	.word	0x080108f8

0800dedc <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af02      	add	r7, sp, #8
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800dee8:	78fb      	ldrb	r3, [r7, #3]
 800deea:	2201      	movs	r2, #1
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff ff5c 	bl	800ddac <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800def4:	2119      	movs	r1, #25
 800def6:	4830      	ldr	r0, [pc, #192]	; (800dfb8 <eth_socket_init+0xdc>)
 800def8:	f7f3 fb2e 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800df02:	331a      	adds	r3, #26
 800df04:	2202      	movs	r2, #2
 800df06:	9201      	str	r2, [sp, #4]
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	23f0      	movs	r3, #240	; 0xf0
 800df0c:	2204      	movs	r2, #4
 800df0e:	2104      	movs	r1, #4
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff fe02 	bl	800db1a <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800df16:	212c      	movs	r1, #44	; 0x2c
 800df18:	4828      	ldr	r0, [pc, #160]	; (800dfbc <eth_socket_init+0xe0>)
 800df1a:	f7f3 fb1d 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800df24:	331c      	adds	r3, #28
 800df26:	2204      	movs	r2, #4
 800df28:	9201      	str	r2, [sp, #4]
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	23f0      	movs	r3, #240	; 0xf0
 800df2e:	220c      	movs	r2, #12
 800df30:	2104      	movs	r1, #4
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7ff fdf1 	bl	800db1a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800df38:	212e      	movs	r1, #46	; 0x2e
 800df3a:	4821      	ldr	r0, [pc, #132]	; (800dfc0 <eth_socket_init+0xe4>)
 800df3c:	f7f3 fb0c 	bl	8001558 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df46:	2202      	movs	r2, #2
 800df48:	9201      	str	r2, [sp, #4]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	23f0      	movs	r3, #240	; 0xf0
 800df4e:	2210      	movs	r2, #16
 800df50:	2104      	movs	r1, #4
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7ff fde1 	bl	800db1a <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800df58:	2120      	movs	r1, #32
 800df5a:	481a      	ldr	r0, [pc, #104]	; (800dfc4 <eth_socket_init+0xe8>)
 800df5c:	f7f3 fafc 	bl	8001558 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	2201      	movs	r2, #1
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff ff02 	bl	800dd70 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800df6c:	2119      	movs	r1, #25
 800df6e:	4816      	ldr	r0, [pc, #88]	; (800dfc8 <eth_socket_init+0xec>)
 800df70:	f7f3 faf2 	bl	8001558 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d10a      	bne.n	800df98 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800df82:	78fb      	ldrb	r3, [r7, #3]
 800df84:	2202      	movs	r2, #2
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff fef1 	bl	800dd70 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800df8e:	211b      	movs	r1, #27
 800df90:	480e      	ldr	r0, [pc, #56]	; (800dfcc <eth_socket_init+0xf0>)
 800df92:	f7f3 fae1 	bl	8001558 <ITM0_Write>
 800df96:	e009      	b.n	800dfac <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800df98:	78fb      	ldrb	r3, [r7, #3]
 800df9a:	2204      	movs	r2, #4
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7ff fee6 	bl	800dd70 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800dfa4:	2115      	movs	r1, #21
 800dfa6:	480a      	ldr	r0, [pc, #40]	; (800dfd0 <eth_socket_init+0xf4>)
 800dfa8:	f7f3 fad6 	bl	8001558 <ITM0_Write>
	 }
}
 800dfac:	bf00      	nop
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	08010924 	.word	0x08010924
 800dfbc:	08010940 	.word	0x08010940
 800dfc0:	08010970 	.word	0x08010970
 800dfc4:	080109a0 	.word	0x080109a0
 800dfc8:	080109c4 	.word	0x080109c4
 800dfcc:	080109e0 	.word	0x080109e0
 800dfd0:	080109fc 	.word	0x080109fc

0800dfd4 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	220f      	movs	r2, #15
 800dfe4:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800dfe6:	78fb      	ldrb	r3, [r7, #3]
 800dfe8:	3304      	adds	r3, #4
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2203      	movs	r2, #3
 800dff4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff fd65 	bl	800dacc <SPI_ETH>
	return(y->RX[3]);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	7edb      	ldrb	r3, [r3, #27]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b082      	sub	sp, #8
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	460b      	mov	r3, r1
 800e018:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	220f      	movs	r2, #15
 800e01e:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	3304      	adds	r3, #4
 800e024:	b2da      	uxtb	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fd48 	bl	800dacc <SPI_ETH>
	return(y->RX[3]);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	7edb      	ldrb	r3, [r3, #27]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08c      	sub	sp, #48	; 0x30
 800e04c:	af02      	add	r7, sp, #8
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	607a      	str	r2, [r7, #4]
 800e052:	461a      	mov	r2, r3
 800e054:	460b      	mov	r3, r1
 800e056:	72fb      	strb	r3, [r7, #11]
 800e058:	4613      	mov	r3, r2
 800e05a:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e05c:	2300      	movs	r3, #0
 800e05e:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e060:	2300      	movs	r3, #0
 800e062:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e064:	2300      	movs	r3, #0
 800e066:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e068:	2300      	movs	r3, #0
 800e06a:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e06c:	2300      	movs	r3, #0
 800e06e:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e070:	2300      	movs	r3, #0
 800e072:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e074:	2300      	movs	r3, #0
 800e076:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e078:	2300      	movs	r3, #0
 800e07a:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e07c:	2300      	movs	r3, #0
 800e07e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e080:	2300      	movs	r3, #0
 800e082:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	2b03      	cmp	r3, #3
 800e088:	d83e      	bhi.n	800e108 <eth_rd_SOCKET_DATA+0xc0>
 800e08a:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <eth_rd_SOCKET_DATA+0x48>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0a1 	.word	0x0800e0a1
 800e094:	0800e0bb 	.word	0x0800e0bb
 800e098:	0800e0d5 	.word	0x0800e0d5
 800e09c:	0800e0ef 	.word	0x0800e0ef
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e0aa:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0b8:	e033      	b.n	800e122 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e0c4:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e0d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0d2:	e026      	b.n	800e122 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0de:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e0ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0ec:	e019      	b.n	800e122 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e0f8:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e104:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e106:	e00c      	b.n	800e122 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e112:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e11a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e11e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e120:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e122:	7afb      	ldrb	r3, [r7, #11]
 800e124:	3304      	adds	r3, #4
 800e126:	b2d9      	uxtb	r1, r3
 800e128:	2302      	movs	r3, #2
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	f107 0310 	add.w	r3, r7, #16
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	230f      	movs	r3, #15
 800e134:	2228      	movs	r2, #40	; 0x28
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff fcef 	bl	800db1a <SPI_ETH_REG>
 800e13c:	4603      	mov	r3, r0
 800e13e:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e140:	8b7a      	ldrh	r2, [r7, #26]
 800e142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e144:	4013      	ands	r3, r2
 800e146:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e148:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e14a:	8b3b      	ldrh	r3, [r7, #24]
 800e14c:	4413      	add	r3, r2
 800e14e:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e150:	8b3a      	ldrh	r2, [r7, #24]
 800e152:	893b      	ldrh	r3, [r7, #8]
 800e154:	441a      	add	r2, r3
 800e156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e158:	3301      	adds	r3, #1
 800e15a:	429a      	cmp	r2, r3
 800e15c:	dd2c      	ble.n	800e1b8 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e15e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e160:	8b3b      	ldrh	r3, [r7, #24]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	b29b      	uxth	r3, r3
 800e166:	3301      	adds	r3, #1
 800e168:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f103 021c 	add.w	r2, r3, #28
 800e170:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e172:	8af9      	ldrh	r1, [r7, #22]
 800e174:	8bfb      	ldrh	r3, [r7, #30]
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	4603      	mov	r3, r0
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7ff fd81 	bl	800dc82 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e180:	8bba      	ldrh	r2, [r7, #28]
 800e182:	8bfb      	ldrh	r3, [r7, #30]
 800e184:	4413      	add	r3, r2
 800e186:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e188:	893a      	ldrh	r2, [r7, #8]
 800e18a:	8bfb      	ldrh	r3, [r7, #30]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e190:	8bfb      	ldrh	r3, [r7, #30]
 800e192:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f103 021c 	add.w	r2, r3, #28
 800e19a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e19c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e19e:	8c3b      	ldrh	r3, [r7, #32]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7ff fd6c 	bl	800dc82 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e1aa:	8b7a      	ldrh	r2, [r7, #26]
 800e1ac:	893b      	ldrh	r3, [r7, #8]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	801a      	strh	r2, [r3, #0]
 800e1b6:	e010      	b.n	800e1da <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f103 021c 	add.w	r2, r3, #28
 800e1be:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e1c0:	8af9      	ldrh	r1, [r7, #22]
 800e1c2:	893b      	ldrh	r3, [r7, #8]
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff fd5a 	bl	800dc82 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e1ce:	8b7a      	ldrh	r2, [r7, #26]
 800e1d0:	893b      	ldrh	r3, [r7, #8]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	b29b      	uxth	r3, r3
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3728      	adds	r7, #40	; 0x28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop

0800e1e8 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08c      	sub	sp, #48	; 0x30
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	72fb      	strb	r3, [r7, #11]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e200:	2300      	movs	r3, #0
 800e202:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e204:	2300      	movs	r3, #0
 800e206:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e208:	2300      	movs	r3, #0
 800e20a:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e20c:	2300      	movs	r3, #0
 800e20e:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e210:	2300      	movs	r3, #0
 800e212:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e214:	2300      	movs	r3, #0
 800e216:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e218:	2300      	movs	r3, #0
 800e21a:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e21c:	2300      	movs	r3, #0
 800e21e:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e220:	2300      	movs	r3, #0
 800e222:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e224:	2300      	movs	r3, #0
 800e226:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e228:	7afb      	ldrb	r3, [r7, #11]
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d83e      	bhi.n	800e2ac <eth_wr_SOCKET_DATA+0xc4>
 800e22e:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <eth_wr_SOCKET_DATA+0x4c>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e245 	.word	0x0800e245
 800e238:	0800e25f 	.word	0x0800e25f
 800e23c:	0800e279 	.word	0x0800e279
 800e240:	0800e293 	.word	0x0800e293
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e24e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e25a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e25c:	e033      	b.n	800e2c6 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e268:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e274:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e276:	e026      	b.n	800e2c6 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e282:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e28e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e290:	e019      	b.n	800e2c6 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e298:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e29c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2a8:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e2aa:	e00c      	b.n	800e2c6 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e2b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2c2:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e2c4:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e2c6:	e00e      	b.n	800e2e6 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e2c8:	7afb      	ldrb	r3, [r7, #11]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	b2d9      	uxtb	r1, r3
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	f107 0310 	add.w	r3, r7, #16
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	230f      	movs	r3, #15
 800e2da:	2220      	movs	r2, #32
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7ff fc1c 	bl	800db1a <SPI_ETH_REG>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e2e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e2e8:	893b      	ldrh	r3, [r7, #8]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d3ec      	bcc.n	800e2c8 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e2ee:	7afb      	ldrb	r3, [r7, #11]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	b2d9      	uxtb	r1, r3
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	9301      	str	r3, [sp, #4]
 800e2f8:	f107 0310 	add.w	r3, r7, #16
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	230f      	movs	r3, #15
 800e300:	2224      	movs	r2, #36	; 0x24
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f7ff fc09 	bl	800db1a <SPI_ETH_REG>
 800e308:	4603      	mov	r3, r0
 800e30a:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e30c:	8b3a      	ldrh	r2, [r7, #24]
 800e30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e310:	4013      	ands	r3, r2
 800e312:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e314:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e316:	8afb      	ldrh	r3, [r7, #22]
 800e318:	4413      	add	r3, r2
 800e31a:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e31c:	8afa      	ldrh	r2, [r7, #22]
 800e31e:	893b      	ldrh	r3, [r7, #8]
 800e320:	441a      	add	r2, r3
 800e322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e324:	3301      	adds	r3, #1
 800e326:	429a      	cmp	r2, r3
 800e328:	dd2c      	ble.n	800e384 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e32a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e32c:	8afb      	ldrh	r3, [r7, #22]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	b29b      	uxth	r3, r3
 800e332:	3301      	adds	r3, #1
 800e334:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f103 021c 	add.w	r2, r3, #28
 800e33c:	8c38      	ldrh	r0, [r7, #32]
 800e33e:	8ab9      	ldrh	r1, [r7, #20]
 800e340:	8bbb      	ldrh	r3, [r7, #28]
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4603      	mov	r3, r0
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f7ff fcd8 	bl	800dcfc <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e34c:	8b7a      	ldrh	r2, [r7, #26]
 800e34e:	8bbb      	ldrh	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e354:	893a      	ldrh	r2, [r7, #8]
 800e356:	8bbb      	ldrh	r3, [r7, #28]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e35c:	8bbb      	ldrh	r3, [r7, #28]
 800e35e:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f103 021c 	add.w	r2, r3, #28
 800e366:	8c38      	ldrh	r0, [r7, #32]
 800e368:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e36a:	8bfb      	ldrh	r3, [r7, #30]
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	4603      	mov	r3, r0
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f7ff fcc3 	bl	800dcfc <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e376:	8b3a      	ldrh	r2, [r7, #24]
 800e378:	893b      	ldrh	r3, [r7, #8]
 800e37a:	4413      	add	r3, r2
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	801a      	strh	r2, [r3, #0]
 800e382:	e010      	b.n	800e3a6 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f103 021c 	add.w	r2, r3, #28
 800e38a:	8c38      	ldrh	r0, [r7, #32]
 800e38c:	8ab9      	ldrh	r1, [r7, #20]
 800e38e:	893b      	ldrh	r3, [r7, #8]
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4603      	mov	r3, r0
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f7ff fcb1 	bl	800dcfc <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e39a:	8b3a      	ldrh	r2, [r7, #24]
 800e39c:	893b      	ldrh	r3, [r7, #8]
 800e39e:	4413      	add	r3, r2
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	801a      	strh	r2, [r3, #0]
					}

}
 800e3a6:	bf00      	nop
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3728      	adds	r7, #40	; 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b090      	sub	sp, #64	; 0x40
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	623b      	str	r3, [r7, #32]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e3fa:	6a3a      	ldr	r2, [r7, #32]
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	f2c0 82fe 	blt.w	800ea00 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e404:	2300      	movs	r3, #0
 800e406:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e408:	e00c      	b.n	800e424 <FT_String_ND+0x74>
							{
								n++;
 800e40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40c:	3301      	adds	r3, #1
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	441a      	add	r2, r3
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	3301      	adds	r3, #1
 800e41a:	429a      	cmp	r2, r3
 800e41c:	dd02      	ble.n	800e424 <FT_String_ND+0x74>
								{
									estado=0;
 800e41e:	2300      	movs	r3, #0
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e422:	e009      	b.n	800e438 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	4413      	add	r3, r2
 800e42a:	781a      	ldrb	r2, [r3, #0]
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	440b      	add	r3, r1
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d1e8      	bne.n	800e40a <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43a:	3301      	adds	r3, #1
 800e43c:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	3301      	adds	r3, #1
 800e442:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d108      	bne.n	800e45e <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e44c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e456:	601a      	str	r2, [r3, #0]
									estado=1;
 800e458:	2301      	movs	r3, #1
 800e45a:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e45c:	e010      	b.n	800e480 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	429a      	cmp	r2, r3
 800e464:	dd02      	ble.n	800e46c <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e466:	2300      	movs	r3, #0
 800e468:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e46a:	e009      	b.n	800e480 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	4413      	add	r3, r2
 800e472:	781a      	ldrb	r2, [r3, #0]
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	6879      	ldr	r1, [r7, #4]
 800e478:	440b      	add	r3, r1
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d0db      	beq.n	800e438 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	1e5a      	subs	r2, r3, #1
 800e484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e486:	4413      	add	r3, r2
 800e488:	6a3a      	ldr	r2, [r7, #32]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	dd02      	ble.n	800e494 <FT_String_ND+0xe4>
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	2b01      	cmp	r3, #1
 800e492:	d1b7      	bne.n	800e404 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e496:	2b00      	cmp	r3, #0
 800e498:	d101      	bne.n	800e49e <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	e2b1      	b.n	800ea02 <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d12c      	bne.n	800e4fe <FT_String_ND+0x14e>
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d129      	bne.n	800e4fe <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e4aa:	e014      	b.n	800e4d6 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	441a      	add	r2, r3
 800e4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b6:	4413      	add	r3, r2
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	441a      	add	r2, r3
 800e4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c0:	6819      	ldr	r1, [r3, #0]
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c4:	440b      	add	r3, r1
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	68f9      	ldr	r1, [r7, #12]
 800e4ca:	440b      	add	r3, r1
 800e4cc:	7812      	ldrb	r2, [r2, #0]
 800e4ce:	701a      	strb	r2, [r3, #0]
										n3++;
 800e4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4dc:	441a      	add	r2, r3
 800e4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e0:	4413      	add	r3, r2
 800e4e2:	6a3a      	ldr	r2, [r7, #32]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	dae1      	bge.n	800e4ac <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ee:	4413      	add	r3, r2
 800e4f0:	1e5a      	subs	r2, r3, #1
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	601a      	str	r2, [r3, #0]
							estado=3;
 800e4f6:	2303      	movs	r3, #3
 800e4f8:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	e281      	b.n	800ea02 <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e4fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e500:	2b02      	cmp	r3, #2
 800e502:	f040 80b6 	bne.w	800e672 <FT_String_ND+0x2c2>
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	2b01      	cmp	r3, #1
 800e50a:	f040 80b2 	bne.w	800e672 <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e50e:	e012      	b.n	800e536 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	1ad2      	subs	r2, r2, r3
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	4413      	add	r3, r2
 800e51a:	461a      	mov	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	441a      	add	r2, r3
 800e520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e522:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e524:	440b      	add	r3, r1
 800e526:	7812      	ldrb	r2, [r2, #0]
 800e528:	701a      	strb	r2, [r3, #0]
								n4++;
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	3301      	adds	r3, #1
 800e52e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e534:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	1ad2      	subs	r2, r2, r3
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	4413      	add	r3, r2
 800e540:	6a3a      	ldr	r2, [r7, #32]
 800e542:	429a      	cmp	r2, r3
 800e544:	dae4      	bge.n	800e510 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e546:	499e      	ldr	r1, [pc, #632]	; (800e7c0 <FT_String_ND+0x410>)
 800e548:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e54a:	f000 fd45 	bl	800efd8 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e54e:	499d      	ldr	r1, [pc, #628]	; (800e7c4 <FT_String_ND+0x414>)
 800e550:	2000      	movs	r0, #0
 800e552:	f000 fd41 	bl	800efd8 <strtok>
 800e556:	4603      	mov	r3, r0
 800e558:	4618      	mov	r0, r3
 800e55a:	f000 fb22 	bl	800eba2 <atoi>
 800e55e:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e562:	3306      	adds	r3, #6
 800e564:	222c      	movs	r2, #44	; 0x2c
 800e566:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	2b09      	cmp	r3, #9
 800e56c:	dc0d      	bgt.n	800e58a <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e570:	3308      	adds	r3, #8
 800e572:	223a      	movs	r2, #58	; 0x3a
 800e574:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	3309      	adds	r3, #9
 800e57a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e57c:	4413      	add	r3, r2
 800e57e:	2200      	movs	r2, #0
 800e580:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	3309      	adds	r3, #9
 800e586:	62bb      	str	r3, [r7, #40]	; 0x28
 800e588:	e021      	b.n	800e5ce <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	2b63      	cmp	r3, #99	; 0x63
 800e58e:	dc0d      	bgt.n	800e5ac <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e592:	3309      	adds	r3, #9
 800e594:	223a      	movs	r2, #58	; 0x3a
 800e596:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	330a      	adds	r3, #10
 800e59c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e59e:	4413      	add	r3, r2
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	330a      	adds	r3, #10
 800e5a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5aa:	e010      	b.n	800e5ce <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5b2:	da0c      	bge.n	800e5ce <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5b6:	330a      	adds	r3, #10
 800e5b8:	223a      	movs	r2, #58	; 0x3a
 800e5ba:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	330b      	adds	r3, #11
 800e5c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5c2:	4413      	add	r3, r2
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	330b      	adds	r3, #11
 800e5cc:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5d2:	601a      	str	r2, [r3, #0]
							n4=0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5d8:	e016      	b.n	800e608 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e5da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	1ad2      	subs	r2, r2, r3
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	441a      	add	r2, r3
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	4413      	add	r3, r2
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	441a      	add	r2, r3
 800e5ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	1ac9      	subs	r1, r1, r3
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	440b      	add	r3, r1
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	440b      	add	r3, r1
 800e5fe:	7812      	ldrb	r2, [r2, #0]
 800e600:	701a      	strb	r2, [r3, #0]
								n4++;
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	3301      	adds	r3, #1
 800e606:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	1ad2      	subs	r2, r2, r3
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	441a      	add	r2, r3
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	4413      	add	r3, r2
 800e616:	6a3a      	ldr	r2, [r7, #32]
 800e618:	429a      	cmp	r2, r3
 800e61a:	dade      	bge.n	800e5da <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e61c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e620:	441a      	add	r2, r3
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	1e5a      	subs	r2, r3, #1
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e62c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	1ad2      	subs	r2, r2, r3
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	441a      	add	r2, r3
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	4413      	add	r3, r2
 800e63a:	461a      	mov	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	1ad2      	subs	r2, r2, r3
 800e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64c:	4413      	add	r3, r2
 800e64e:	461a      	mov	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4413      	add	r3, r2
 800e654:	2200      	movs	r2, #0
 800e656:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	1ad2      	subs	r2, r2, r3
 800e65e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	440b      	add	r3, r1
 800e664:	429a      	cmp	r2, r3
 800e666:	d102      	bne.n	800e66e <FT_String_ND+0x2be>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e66e:	2303      	movs	r3, #3
 800e670:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e674:	2b03      	cmp	r3, #3
 800e676:	d146      	bne.n	800e706 <FT_String_ND+0x356>
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d143      	bne.n	800e706 <FT_String_ND+0x356>
						{
						n3=0;
 800e67e:	2300      	movs	r3, #0
 800e680:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e682:	e00e      	b.n	800e6a2 <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68a:	4413      	add	r3, r2
 800e68c:	3b01      	subs	r3, #1
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	441a      	add	r2, r3
 800e692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e694:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e696:	440b      	add	r3, r1
 800e698:	7812      	ldrb	r2, [r2, #0]
 800e69a:	701a      	strb	r2, [r3, #0]
										n3++;
 800e69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69e:	3301      	adds	r3, #1
 800e6a0:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	dbec      	blt.n	800e684 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6ae:	e014      	b.n	800e6da <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	441a      	add	r2, r3
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	4413      	add	r3, r2
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	441a      	add	r2, r3
 800e6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6c4:	6819      	ldr	r1, [r3, #0]
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	440b      	add	r3, r1
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	68f9      	ldr	r1, [r7, #12]
 800e6ce:	440b      	add	r3, r1
 800e6d0:	7812      	ldrb	r2, [r2, #0]
 800e6d2:	701a      	strb	r2, [r3, #0]
										n5++;
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	441a      	add	r2, r3
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	441a      	add	r2, r3
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	dde0      	ble.n	800e6b0 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	4413      	add	r3, r2
 800e6f6:	1e5a      	subs	r2, r3, #1
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e700:	601a      	str	r2, [r3, #0]
							estado=3;
 800e702:	2303      	movs	r3, #3
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e708:	2b04      	cmp	r3, #4
 800e70a:	f040 80b6 	bne.w	800e87a <FT_String_ND+0x4ca>
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	2b01      	cmp	r3, #1
 800e712:	f040 80b2 	bne.w	800e87a <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e716:	e012      	b.n	800e73e <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	1ad2      	subs	r2, r2, r3
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	4413      	add	r3, r2
 800e722:	461a      	mov	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	441a      	add	r2, r3
 800e728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e72c:	440b      	add	r3, r1
 800e72e:	7812      	ldrb	r2, [r2, #0]
 800e730:	701a      	strb	r2, [r3, #0]
								n4++;
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	3301      	adds	r3, #1
 800e736:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e73c:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e73e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	1ad2      	subs	r2, r2, r3
 800e744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e746:	4413      	add	r3, r2
 800e748:	6a3a      	ldr	r2, [r7, #32]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	dae4      	bge.n	800e718 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e74e:	491c      	ldr	r1, [pc, #112]	; (800e7c0 <FT_String_ND+0x410>)
 800e750:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e752:	f000 fc41 	bl	800efd8 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e756:	491b      	ldr	r1, [pc, #108]	; (800e7c4 <FT_String_ND+0x414>)
 800e758:	2000      	movs	r0, #0
 800e75a:	f000 fc3d 	bl	800efd8 <strtok>
 800e75e:	4603      	mov	r3, r0
 800e760:	4618      	mov	r0, r3
 800e762:	f000 fa1e 	bl	800eba2 <atoi>
 800e766:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76a:	3306      	adds	r3, #6
 800e76c:	222c      	movs	r2, #44	; 0x2c
 800e76e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	2b09      	cmp	r3, #9
 800e774:	dc07      	bgt.n	800e786 <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e778:	3308      	adds	r3, #8
 800e77a:	223a      	movs	r2, #58	; 0x3a
 800e77c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	3309      	adds	r3, #9
 800e782:	62bb      	str	r3, [r7, #40]	; 0x28
 800e784:	e015      	b.n	800e7b2 <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	2b63      	cmp	r3, #99	; 0x63
 800e78a:	dc07      	bgt.n	800e79c <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e78e:	3309      	adds	r3, #9
 800e790:	223a      	movs	r2, #58	; 0x3a
 800e792:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	330a      	adds	r3, #10
 800e798:	62bb      	str	r3, [r7, #40]	; 0x28
 800e79a:	e00a      	b.n	800e7b2 <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7a2:	da06      	bge.n	800e7b2 <FT_String_ND+0x402>
														{
															c[10]=':';
 800e7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a6:	330a      	adds	r3, #10
 800e7a8:	223a      	movs	r2, #58	; 0x3a
 800e7aa:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	330b      	adds	r3, #11
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7b6:	601a      	str	r2, [r3, #0]
							n4=0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7bc:	e01b      	b.n	800e7f6 <FT_String_ND+0x446>
 800e7be:	bf00      	nop
 800e7c0:	08010a14 	.word	0x08010a14
 800e7c4:	08010a18 	.word	0x08010a18
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	1ad2      	subs	r2, r2, r3
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	441a      	add	r2, r3
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	4413      	add	r3, r2
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	441a      	add	r2, r3
 800e7dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	1ac9      	subs	r1, r1, r3
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e4:	440b      	add	r3, r1
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	440b      	add	r3, r1
 800e7ec:	7812      	ldrb	r2, [r2, #0]
 800e7ee:	701a      	strb	r2, [r3, #0]
								n4++;
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	1ad2      	subs	r2, r2, r3
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	441a      	add	r2, r3
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	4413      	add	r3, r2
 800e804:	6a3a      	ldr	r2, [r7, #32]
 800e806:	429a      	cmp	r2, r3
 800e808:	dade      	bge.n	800e7c8 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	441a      	add	r2, r3
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	1e5a      	subs	r2, r3, #1
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	601a      	str	r2, [r3, #0]
							n5=0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e81e:	e00f      	b.n	800e840 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	1ad2      	subs	r2, r2, r3
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	4413      	add	r3, r2
 800e82a:	461a      	mov	r2, r3
 800e82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e82e:	441a      	add	r2, r3
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e834:	440b      	add	r3, r1
 800e836:	7812      	ldrb	r2, [r2, #0]
 800e838:	701a      	strb	r2, [r3, #0]
								n5++;
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	3301      	adds	r3, #1
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	1ad2      	subs	r2, r2, r3
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	441a      	add	r2, r3
 800e84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	429a      	cmp	r2, r3
 800e850:	dbe6      	blt.n	800e820 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e856:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	441a      	add	r2, r3
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	1ad2      	subs	r2, r2, r3
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4413      	add	r3, r2
 800e86a:	6a3a      	ldr	r2, [r7, #32]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d102      	bne.n	800e876 <FT_String_ND+0x4c6>
							{
								estado=4;
 800e870:	2304      	movs	r3, #4
 800e872:	627b      	str	r3, [r7, #36]	; 0x24
 800e874:	e001      	b.n	800e87a <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e876:	2305      	movs	r3, #5
 800e878:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e87a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e87c:	2b05      	cmp	r3, #5
 800e87e:	f040 80bd 	bne.w	800e9fc <FT_String_ND+0x64c>
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	2b01      	cmp	r3, #1
 800e886:	f040 80b9 	bne.w	800e9fc <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e88a:	e012      	b.n	800e8b2 <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e88c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	4413      	add	r3, r2
 800e896:	461a      	mov	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	441a      	add	r2, r3
 800e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8a0:	440b      	add	r3, r1
 800e8a2:	7812      	ldrb	r2, [r2, #0]
 800e8a4:	701a      	strb	r2, [r3, #0]
								n4++;
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b0:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	1ad2      	subs	r2, r2, r3
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	4413      	add	r3, r2
 800e8bc:	6a3a      	ldr	r2, [r7, #32]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	dae4      	bge.n	800e88c <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e8c2:	4952      	ldr	r1, [pc, #328]	; (800ea0c <FT_String_ND+0x65c>)
 800e8c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e8c6:	f000 fb87 	bl	800efd8 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e8ca:	4951      	ldr	r1, [pc, #324]	; (800ea10 <FT_String_ND+0x660>)
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f000 fb83 	bl	800efd8 <strtok>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 f964 	bl	800eba2 <atoi>
 800e8da:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e8dc:	494c      	ldr	r1, [pc, #304]	; (800ea10 <FT_String_ND+0x660>)
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f000 fb7a 	bl	800efd8 <strtok>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f000 f95b 	bl	800eba2 <atoi>
 800e8ec:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e8ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f0:	3306      	adds	r3, #6
 800e8f2:	222c      	movs	r2, #44	; 0x2c
 800e8f4:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	2b09      	cmp	r3, #9
 800e8fa:	dc07      	bgt.n	800e90c <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8fe:	330a      	adds	r3, #10
 800e900:	223a      	movs	r2, #58	; 0x3a
 800e902:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	330b      	adds	r3, #11
 800e908:	62bb      	str	r3, [r7, #40]	; 0x28
 800e90a:	e015      	b.n	800e938 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	2b63      	cmp	r3, #99	; 0x63
 800e910:	dc07      	bgt.n	800e922 <FT_String_ND+0x572>
														{
															c[11]=':';
 800e912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e914:	330b      	adds	r3, #11
 800e916:	223a      	movs	r2, #58	; 0x3a
 800e918:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	330c      	adds	r3, #12
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e920:	e00a      	b.n	800e938 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e928:	da06      	bge.n	800e938 <FT_String_ND+0x588>
														{
															c[12]=':';
 800e92a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e92c:	330c      	adds	r3, #12
 800e92e:	223a      	movs	r2, #58	; 0x3a
 800e930:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	330d      	adds	r3, #13
 800e936:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e93c:	601a      	str	r2, [r3, #0]
							n4=0;
 800e93e:	2300      	movs	r3, #0
 800e940:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e942:	e016      	b.n	800e972 <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	1ad2      	subs	r2, r2, r3
 800e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94c:	441a      	add	r2, r3
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	4413      	add	r3, r2
 800e952:	461a      	mov	r2, r3
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	441a      	add	r2, r3
 800e958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	1ac9      	subs	r1, r1, r3
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	440b      	add	r3, r1
 800e962:	4619      	mov	r1, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	440b      	add	r3, r1
 800e968:	7812      	ldrb	r2, [r2, #0]
 800e96a:	701a      	strb	r2, [r3, #0]
								n4++;
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	3301      	adds	r3, #1
 800e970:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	1ad2      	subs	r2, r2, r3
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	441a      	add	r2, r3
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	4413      	add	r3, r2
 800e980:	6a3a      	ldr	r2, [r7, #32]
 800e982:	429a      	cmp	r2, r3
 800e984:	dade      	bge.n	800e944 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98a:	441a      	add	r2, r3
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	1e5a      	subs	r2, r3, #1
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	601a      	str	r2, [r3, #0]
							n5=0;
 800e996:	2300      	movs	r3, #0
 800e998:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e99a:	e00f      	b.n	800e9bc <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	1ad2      	subs	r2, r2, r3
 800e9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a4:	4413      	add	r3, r2
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9aa:	441a      	add	r2, r3
 800e9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9b0:	440b      	add	r3, r1
 800e9b2:	7812      	ldrb	r2, [r2, #0]
 800e9b4:	701a      	strb	r2, [r3, #0]
								n5++;
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	1ad2      	subs	r2, r2, r3
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	441a      	add	r2, r3
 800e9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	dbe6      	blt.n	800e99c <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d2:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	441a      	add	r2, r3
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	1ad2      	subs	r2, r2, r3
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	6a3a      	ldr	r2, [r7, #32]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d105      	bne.n	800e9f8 <FT_String_ND+0x648>
							{
								estado=4;
 800e9ec:	2304      	movs	r3, #4
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800e9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	e001      	b.n	800e9fc <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800e9f8:	2305      	movs	r3, #5
 800e9fa:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	e000      	b.n	800ea02 <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ea00:	2302      	movs	r3, #2
			}
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3740      	adds	r7, #64	; 0x40
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	08010a14 	.word	0x08010a14
 800ea10:	08010a18 	.word	0x08010a18

0800ea14 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ea1e:	2330      	movs	r3, #48	; 0x30
 800ea20:	60bb      	str	r3, [r7, #8]
 800ea22:	f107 030c 	add.w	r3, r7, #12
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	605a      	str	r2, [r3, #4]
 800ea2c:	609a      	str	r2, [r3, #8]
 800ea2e:	60da      	str	r2, [r3, #12]
int i=0;	
 800ea30:	2300      	movs	r3, #0
 800ea32:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ea34:	f107 0308 	add.w	r3, r7, #8
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	490f      	ldr	r1, [pc, #60]	; (800ea78 <INTOA+0x64>)
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f000 fa4d 	bl	800eedc <siprintf>
		while(i<=strlen(origbuff))
 800ea42:	e00b      	b.n	800ea5c <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	603a      	str	r2, [r7, #0]
 800ea4a:	f107 0108 	add.w	r1, r7, #8
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	440a      	add	r2, r1
 800ea52:	7812      	ldrb	r2, [r2, #0]
 800ea54:	701a      	strb	r2, [r3, #0]
		i++;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ea5c:	f107 0308 	add.w	r3, r7, #8
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f1 fbc7 	bl	80001f4 <strlen>
 800ea66:	4602      	mov	r2, r0
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d2ea      	bcs.n	800ea44 <INTOA+0x30>
		}
		return(i);
 800ea6e:	69fb      	ldr	r3, [r7, #28]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3720      	adds	r7, #32
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	08010a1c 	.word	0x08010a1c

0800ea7c <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08c      	sub	sp, #48	; 0x30
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
char origbuff[20]="0";
 800ea88:	2330      	movs	r3, #48	; 0x30
 800ea8a:	617b      	str	r3, [r7, #20]
 800ea8c:	f107 0318 	add.w	r3, r7, #24
 800ea90:	2200      	movs	r2, #0
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	605a      	str	r2, [r3, #4]
 800ea96:	609a      	str	r2, [r3, #8]
 800ea98:	60da      	str	r2, [r3, #12]
int i=0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a);
 800eaa2:	f107 0314 	add.w	r3, r7, #20
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	4917      	ldr	r1, [pc, #92]	; (800eb08 <FTOA+0x8c>)
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f000 fa16 	bl	800eedc <siprintf>
		b=strlen(origbuff);
 800eab0:	f107 0314 	add.w	r3, r7, #20
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f1 fb9d 	bl	80001f4 <strlen>
 800eaba:	4603      	mov	r3, r0
 800eabc:	62bb      	str	r3, [r7, #40]	; 0x28
		while(i<=((b)+1))
 800eabe:	e018      	b.n	800eaf2 <FTOA+0x76>
		{
			if((i==comma)&&(comma<(b)))
 800eac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d108      	bne.n	800eada <FTOA+0x5e>
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	429a      	cmp	r2, r3
 800eace:	da04      	bge.n	800eada <FTOA+0x5e>
			{
				*v1++='.';
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	60ba      	str	r2, [r7, #8]
 800ead6:	222e      	movs	r2, #46	; 0x2e
 800ead8:	701a      	strb	r2, [r3, #0]
				//i++;
			}
			*v1++=(unsigned char)origbuff[i];
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	60ba      	str	r2, [r7, #8]
 800eae0:	f107 0114 	add.w	r1, r7, #20
 800eae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eae6:	440a      	add	r2, r1
 800eae8:	7812      	ldrb	r2, [r2, #0]
 800eaea:	701a      	strb	r2, [r3, #0]
			i++;
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	3301      	adds	r3, #1
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(i<=((b)+1))
 800eaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	dde1      	ble.n	800eac0 <FTOA+0x44>
		}
		return(i);
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3730      	adds	r7, #48	; 0x30
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	08010a1c 	.word	0x08010a1c

0800eb0c <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
 800eb18:	603b      	str	r3, [r7, #0]
int x =0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800eb1e:	2300      	movs	r3, #0
 800eb20:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800eb22:	f107 0310 	add.w	r3, r7, #16
 800eb26:	617b      	str	r3, [r7, #20]
if (c==0)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d105      	bne.n	800eb3a <CopiaVector+0x2e>
{
	x=strlen(b);
 800eb2e:	68b8      	ldr	r0, [r7, #8]
 800eb30:	f7f1 fb60 	bl	80001f4 <strlen>
 800eb34:	4603      	mov	r3, r0
 800eb36:	61bb      	str	r3, [r7, #24]
 800eb38:	e02e      	b.n	800eb98 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb44:	dd01      	ble.n	800eb4a <CopiaVector+0x3e>
			{
				return(1);
 800eb46:	2301      	movs	r3, #1
 800eb48:	e027      	b.n	800eb9a <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eb4e:	e00a      	b.n	800eb66 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	1c53      	adds	r3, r2, #1
 800eb54:	60bb      	str	r3, [r7, #8]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	1c59      	adds	r1, r3, #1
 800eb5a:	60f9      	str	r1, [r7, #12]
 800eb5c:	7812      	ldrb	r2, [r2, #0]
 800eb5e:	701a      	strb	r2, [r3, #0]
					p++;
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	3301      	adds	r3, #1
 800eb64:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	dbf0      	blt.n	800eb50 <CopiaVector+0x44>
				}


			if (d==1)
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d111      	bne.n	800eb98 <CopiaVector+0x8c>
			{
			  p=c;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eb78:	e008      	b.n	800eb8c <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	60fa      	str	r2, [r7, #12]
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	7812      	ldrb	r2, [r2, #0]
 800eb84:	701a      	strb	r2, [r3, #0]
				  p++;
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb92:	dbf2      	blt.n	800eb7a <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800eb94:	2300      	movs	r3, #0
 800eb96:	e000      	b.n	800eb9a <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800eb98:	2301      	movs	r3, #1
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <atoi>:
 800eba2:	220a      	movs	r2, #10
 800eba4:	2100      	movs	r1, #0
 800eba6:	f000 b89d 	b.w	800ece4 <strtol>

0800ebaa <__itoa>:
 800ebaa:	1e93      	subs	r3, r2, #2
 800ebac:	2b22      	cmp	r3, #34	; 0x22
 800ebae:	b510      	push	{r4, lr}
 800ebb0:	460c      	mov	r4, r1
 800ebb2:	d904      	bls.n	800ebbe <__itoa+0x14>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	700b      	strb	r3, [r1, #0]
 800ebb8:	461c      	mov	r4, r3
 800ebba:	4620      	mov	r0, r4
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	2a0a      	cmp	r2, #10
 800ebc0:	d109      	bne.n	800ebd6 <__itoa+0x2c>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	da07      	bge.n	800ebd6 <__itoa+0x2c>
 800ebc6:	232d      	movs	r3, #45	; 0x2d
 800ebc8:	700b      	strb	r3, [r1, #0]
 800ebca:	4240      	negs	r0, r0
 800ebcc:	2101      	movs	r1, #1
 800ebce:	4421      	add	r1, r4
 800ebd0:	f000 f892 	bl	800ecf8 <__utoa>
 800ebd4:	e7f1      	b.n	800ebba <__itoa+0x10>
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	e7f9      	b.n	800ebce <__itoa+0x24>

0800ebda <itoa>:
 800ebda:	f7ff bfe6 	b.w	800ebaa <__itoa>
	...

0800ebe0 <_strtol_l.constprop.0>:
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe6:	d001      	beq.n	800ebec <_strtol_l.constprop.0+0xc>
 800ebe8:	2b24      	cmp	r3, #36	; 0x24
 800ebea:	d906      	bls.n	800ebfa <_strtol_l.constprop.0+0x1a>
 800ebec:	f000 fa96 	bl	800f11c <__errno>
 800ebf0:	2316      	movs	r3, #22
 800ebf2:	6003      	str	r3, [r0, #0]
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ece0 <_strtol_l.constprop.0+0x100>
 800ebfe:	460d      	mov	r5, r1
 800ec00:	462e      	mov	r6, r5
 800ec02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec06:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ec0a:	f017 0708 	ands.w	r7, r7, #8
 800ec0e:	d1f7      	bne.n	800ec00 <_strtol_l.constprop.0+0x20>
 800ec10:	2c2d      	cmp	r4, #45	; 0x2d
 800ec12:	d132      	bne.n	800ec7a <_strtol_l.constprop.0+0x9a>
 800ec14:	782c      	ldrb	r4, [r5, #0]
 800ec16:	2701      	movs	r7, #1
 800ec18:	1cb5      	adds	r5, r6, #2
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d05b      	beq.n	800ecd6 <_strtol_l.constprop.0+0xf6>
 800ec1e:	2b10      	cmp	r3, #16
 800ec20:	d109      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ec22:	2c30      	cmp	r4, #48	; 0x30
 800ec24:	d107      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ec26:	782c      	ldrb	r4, [r5, #0]
 800ec28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec2c:	2c58      	cmp	r4, #88	; 0x58
 800ec2e:	d14d      	bne.n	800eccc <_strtol_l.constprop.0+0xec>
 800ec30:	786c      	ldrb	r4, [r5, #1]
 800ec32:	2310      	movs	r3, #16
 800ec34:	3502      	adds	r5, #2
 800ec36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec3e:	f04f 0e00 	mov.w	lr, #0
 800ec42:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec46:	4676      	mov	r6, lr
 800ec48:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ec50:	f1bc 0f09 	cmp.w	ip, #9
 800ec54:	d816      	bhi.n	800ec84 <_strtol_l.constprop.0+0xa4>
 800ec56:	4664      	mov	r4, ip
 800ec58:	42a3      	cmp	r3, r4
 800ec5a:	dd24      	ble.n	800eca6 <_strtol_l.constprop.0+0xc6>
 800ec5c:	f1be 3fff 	cmp.w	lr, #4294967295
 800ec60:	d008      	beq.n	800ec74 <_strtol_l.constprop.0+0x94>
 800ec62:	45b1      	cmp	r9, r6
 800ec64:	d31c      	bcc.n	800eca0 <_strtol_l.constprop.0+0xc0>
 800ec66:	d101      	bne.n	800ec6c <_strtol_l.constprop.0+0x8c>
 800ec68:	45a2      	cmp	sl, r4
 800ec6a:	db19      	blt.n	800eca0 <_strtol_l.constprop.0+0xc0>
 800ec6c:	fb06 4603 	mla	r6, r6, r3, r4
 800ec70:	f04f 0e01 	mov.w	lr, #1
 800ec74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec78:	e7e8      	b.n	800ec4c <_strtol_l.constprop.0+0x6c>
 800ec7a:	2c2b      	cmp	r4, #43	; 0x2b
 800ec7c:	bf04      	itt	eq
 800ec7e:	782c      	ldrbeq	r4, [r5, #0]
 800ec80:	1cb5      	addeq	r5, r6, #2
 800ec82:	e7ca      	b.n	800ec1a <_strtol_l.constprop.0+0x3a>
 800ec84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ec88:	f1bc 0f19 	cmp.w	ip, #25
 800ec8c:	d801      	bhi.n	800ec92 <_strtol_l.constprop.0+0xb2>
 800ec8e:	3c37      	subs	r4, #55	; 0x37
 800ec90:	e7e2      	b.n	800ec58 <_strtol_l.constprop.0+0x78>
 800ec92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ec96:	f1bc 0f19 	cmp.w	ip, #25
 800ec9a:	d804      	bhi.n	800eca6 <_strtol_l.constprop.0+0xc6>
 800ec9c:	3c57      	subs	r4, #87	; 0x57
 800ec9e:	e7db      	b.n	800ec58 <_strtol_l.constprop.0+0x78>
 800eca0:	f04f 3eff 	mov.w	lr, #4294967295
 800eca4:	e7e6      	b.n	800ec74 <_strtol_l.constprop.0+0x94>
 800eca6:	f1be 3fff 	cmp.w	lr, #4294967295
 800ecaa:	d105      	bne.n	800ecb8 <_strtol_l.constprop.0+0xd8>
 800ecac:	2322      	movs	r3, #34	; 0x22
 800ecae:	6003      	str	r3, [r0, #0]
 800ecb0:	4646      	mov	r6, r8
 800ecb2:	b942      	cbnz	r2, 800ecc6 <_strtol_l.constprop.0+0xe6>
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	e79e      	b.n	800ebf6 <_strtol_l.constprop.0+0x16>
 800ecb8:	b107      	cbz	r7, 800ecbc <_strtol_l.constprop.0+0xdc>
 800ecba:	4276      	negs	r6, r6
 800ecbc:	2a00      	cmp	r2, #0
 800ecbe:	d0f9      	beq.n	800ecb4 <_strtol_l.constprop.0+0xd4>
 800ecc0:	f1be 0f00 	cmp.w	lr, #0
 800ecc4:	d000      	beq.n	800ecc8 <_strtol_l.constprop.0+0xe8>
 800ecc6:	1e69      	subs	r1, r5, #1
 800ecc8:	6011      	str	r1, [r2, #0]
 800ecca:	e7f3      	b.n	800ecb4 <_strtol_l.constprop.0+0xd4>
 800eccc:	2430      	movs	r4, #48	; 0x30
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1b1      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecd2:	2308      	movs	r3, #8
 800ecd4:	e7af      	b.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecd6:	2c30      	cmp	r4, #48	; 0x30
 800ecd8:	d0a5      	beq.n	800ec26 <_strtol_l.constprop.0+0x46>
 800ecda:	230a      	movs	r3, #10
 800ecdc:	e7ab      	b.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecde:	bf00      	nop
 800ece0:	08010a5e 	.word	0x08010a5e

0800ece4 <strtol>:
 800ece4:	4613      	mov	r3, r2
 800ece6:	460a      	mov	r2, r1
 800ece8:	4601      	mov	r1, r0
 800ecea:	4802      	ldr	r0, [pc, #8]	; (800ecf4 <strtol+0x10>)
 800ecec:	6800      	ldr	r0, [r0, #0]
 800ecee:	f7ff bf77 	b.w	800ebe0 <_strtol_l.constprop.0>
 800ecf2:	bf00      	nop
 800ecf4:	20000144 	.word	0x20000144

0800ecf8 <__utoa>:
 800ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfa:	4c1f      	ldr	r4, [pc, #124]	; (800ed78 <__utoa+0x80>)
 800ecfc:	b08b      	sub	sp, #44	; 0x2c
 800ecfe:	4605      	mov	r5, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	466e      	mov	r6, sp
 800ed04:	f104 0c20 	add.w	ip, r4, #32
 800ed08:	6820      	ldr	r0, [r4, #0]
 800ed0a:	6861      	ldr	r1, [r4, #4]
 800ed0c:	4637      	mov	r7, r6
 800ed0e:	c703      	stmia	r7!, {r0, r1}
 800ed10:	3408      	adds	r4, #8
 800ed12:	4564      	cmp	r4, ip
 800ed14:	463e      	mov	r6, r7
 800ed16:	d1f7      	bne.n	800ed08 <__utoa+0x10>
 800ed18:	7921      	ldrb	r1, [r4, #4]
 800ed1a:	7139      	strb	r1, [r7, #4]
 800ed1c:	1e91      	subs	r1, r2, #2
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	6038      	str	r0, [r7, #0]
 800ed22:	2922      	cmp	r1, #34	; 0x22
 800ed24:	f04f 0100 	mov.w	r1, #0
 800ed28:	d904      	bls.n	800ed34 <__utoa+0x3c>
 800ed2a:	7019      	strb	r1, [r3, #0]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4618      	mov	r0, r3
 800ed30:	b00b      	add	sp, #44	; 0x2c
 800ed32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed34:	1e58      	subs	r0, r3, #1
 800ed36:	4684      	mov	ip, r0
 800ed38:	fbb5 f7f2 	udiv	r7, r5, r2
 800ed3c:	fb02 5617 	mls	r6, r2, r7, r5
 800ed40:	3628      	adds	r6, #40	; 0x28
 800ed42:	446e      	add	r6, sp
 800ed44:	460c      	mov	r4, r1
 800ed46:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ed4a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ed4e:	462e      	mov	r6, r5
 800ed50:	42b2      	cmp	r2, r6
 800ed52:	f101 0101 	add.w	r1, r1, #1
 800ed56:	463d      	mov	r5, r7
 800ed58:	d9ee      	bls.n	800ed38 <__utoa+0x40>
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	545a      	strb	r2, [r3, r1]
 800ed5e:	1919      	adds	r1, r3, r4
 800ed60:	1aa5      	subs	r5, r4, r2
 800ed62:	42aa      	cmp	r2, r5
 800ed64:	dae3      	bge.n	800ed2e <__utoa+0x36>
 800ed66:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ed6a:	780e      	ldrb	r6, [r1, #0]
 800ed6c:	7006      	strb	r6, [r0, #0]
 800ed6e:	3201      	adds	r2, #1
 800ed70:	f801 5901 	strb.w	r5, [r1], #-1
 800ed74:	e7f4      	b.n	800ed60 <__utoa+0x68>
 800ed76:	bf00      	nop
 800ed78:	08010a38 	.word	0x08010a38

0800ed7c <std>:
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	b510      	push	{r4, lr}
 800ed80:	4604      	mov	r4, r0
 800ed82:	e9c0 3300 	strd	r3, r3, [r0]
 800ed86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed8a:	6083      	str	r3, [r0, #8]
 800ed8c:	8181      	strh	r1, [r0, #12]
 800ed8e:	6643      	str	r3, [r0, #100]	; 0x64
 800ed90:	81c2      	strh	r2, [r0, #14]
 800ed92:	6183      	str	r3, [r0, #24]
 800ed94:	4619      	mov	r1, r3
 800ed96:	2208      	movs	r2, #8
 800ed98:	305c      	adds	r0, #92	; 0x5c
 800ed9a:	f000 f902 	bl	800efa2 <memset>
 800ed9e:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <std+0x38>)
 800eda0:	6263      	str	r3, [r4, #36]	; 0x24
 800eda2:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <std+0x3c>)
 800eda4:	62a3      	str	r3, [r4, #40]	; 0x28
 800eda6:	4b05      	ldr	r3, [pc, #20]	; (800edbc <std+0x40>)
 800eda8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edaa:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <std+0x44>)
 800edac:	6224      	str	r4, [r4, #32]
 800edae:	6323      	str	r3, [r4, #48]	; 0x30
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	bf00      	nop
 800edb4:	0800ef1d 	.word	0x0800ef1d
 800edb8:	0800ef3f 	.word	0x0800ef3f
 800edbc:	0800ef77 	.word	0x0800ef77
 800edc0:	0800ef9b 	.word	0x0800ef9b

0800edc4 <stdio_exit_handler>:
 800edc4:	4a02      	ldr	r2, [pc, #8]	; (800edd0 <stdio_exit_handler+0xc>)
 800edc6:	4903      	ldr	r1, [pc, #12]	; (800edd4 <stdio_exit_handler+0x10>)
 800edc8:	4803      	ldr	r0, [pc, #12]	; (800edd8 <stdio_exit_handler+0x14>)
 800edca:	f000 b869 	b.w	800eea0 <_fwalk_sglue>
 800edce:	bf00      	nop
 800edd0:	200000ec 	.word	0x200000ec
 800edd4:	0800fa9d 	.word	0x0800fa9d
 800edd8:	200000f8 	.word	0x200000f8

0800eddc <cleanup_stdio>:
 800eddc:	6841      	ldr	r1, [r0, #4]
 800edde:	4b0c      	ldr	r3, [pc, #48]	; (800ee10 <cleanup_stdio+0x34>)
 800ede0:	4299      	cmp	r1, r3
 800ede2:	b510      	push	{r4, lr}
 800ede4:	4604      	mov	r4, r0
 800ede6:	d001      	beq.n	800edec <cleanup_stdio+0x10>
 800ede8:	f000 fe58 	bl	800fa9c <_fflush_r>
 800edec:	68a1      	ldr	r1, [r4, #8]
 800edee:	4b09      	ldr	r3, [pc, #36]	; (800ee14 <cleanup_stdio+0x38>)
 800edf0:	4299      	cmp	r1, r3
 800edf2:	d002      	beq.n	800edfa <cleanup_stdio+0x1e>
 800edf4:	4620      	mov	r0, r4
 800edf6:	f000 fe51 	bl	800fa9c <_fflush_r>
 800edfa:	68e1      	ldr	r1, [r4, #12]
 800edfc:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <cleanup_stdio+0x3c>)
 800edfe:	4299      	cmp	r1, r3
 800ee00:	d004      	beq.n	800ee0c <cleanup_stdio+0x30>
 800ee02:	4620      	mov	r0, r4
 800ee04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee08:	f000 be48 	b.w	800fa9c <_fflush_r>
 800ee0c:	bd10      	pop	{r4, pc}
 800ee0e:	bf00      	nop
 800ee10:	20003e28 	.word	0x20003e28
 800ee14:	20003e90 	.word	0x20003e90
 800ee18:	20003ef8 	.word	0x20003ef8

0800ee1c <global_stdio_init.part.0>:
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	4b0b      	ldr	r3, [pc, #44]	; (800ee4c <global_stdio_init.part.0+0x30>)
 800ee20:	4c0b      	ldr	r4, [pc, #44]	; (800ee50 <global_stdio_init.part.0+0x34>)
 800ee22:	4a0c      	ldr	r2, [pc, #48]	; (800ee54 <global_stdio_init.part.0+0x38>)
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	4620      	mov	r0, r4
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2104      	movs	r1, #4
 800ee2c:	f7ff ffa6 	bl	800ed7c <std>
 800ee30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ee34:	2201      	movs	r2, #1
 800ee36:	2109      	movs	r1, #9
 800ee38:	f7ff ffa0 	bl	800ed7c <std>
 800ee3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ee40:	2202      	movs	r2, #2
 800ee42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee46:	2112      	movs	r1, #18
 800ee48:	f7ff bf98 	b.w	800ed7c <std>
 800ee4c:	20003f60 	.word	0x20003f60
 800ee50:	20003e28 	.word	0x20003e28
 800ee54:	0800edc5 	.word	0x0800edc5

0800ee58 <__sfp_lock_acquire>:
 800ee58:	4801      	ldr	r0, [pc, #4]	; (800ee60 <__sfp_lock_acquire+0x8>)
 800ee5a:	f000 b989 	b.w	800f170 <__retarget_lock_acquire_recursive>
 800ee5e:	bf00      	nop
 800ee60:	20003f69 	.word	0x20003f69

0800ee64 <__sfp_lock_release>:
 800ee64:	4801      	ldr	r0, [pc, #4]	; (800ee6c <__sfp_lock_release+0x8>)
 800ee66:	f000 b984 	b.w	800f172 <__retarget_lock_release_recursive>
 800ee6a:	bf00      	nop
 800ee6c:	20003f69 	.word	0x20003f69

0800ee70 <__sinit>:
 800ee70:	b510      	push	{r4, lr}
 800ee72:	4604      	mov	r4, r0
 800ee74:	f7ff fff0 	bl	800ee58 <__sfp_lock_acquire>
 800ee78:	6a23      	ldr	r3, [r4, #32]
 800ee7a:	b11b      	cbz	r3, 800ee84 <__sinit+0x14>
 800ee7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee80:	f7ff bff0 	b.w	800ee64 <__sfp_lock_release>
 800ee84:	4b04      	ldr	r3, [pc, #16]	; (800ee98 <__sinit+0x28>)
 800ee86:	6223      	str	r3, [r4, #32]
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <__sinit+0x2c>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f5      	bne.n	800ee7c <__sinit+0xc>
 800ee90:	f7ff ffc4 	bl	800ee1c <global_stdio_init.part.0>
 800ee94:	e7f2      	b.n	800ee7c <__sinit+0xc>
 800ee96:	bf00      	nop
 800ee98:	0800eddd 	.word	0x0800eddd
 800ee9c:	20003f60 	.word	0x20003f60

0800eea0 <_fwalk_sglue>:
 800eea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea4:	4607      	mov	r7, r0
 800eea6:	4688      	mov	r8, r1
 800eea8:	4614      	mov	r4, r2
 800eeaa:	2600      	movs	r6, #0
 800eeac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eeb0:	f1b9 0901 	subs.w	r9, r9, #1
 800eeb4:	d505      	bpl.n	800eec2 <_fwalk_sglue+0x22>
 800eeb6:	6824      	ldr	r4, [r4, #0]
 800eeb8:	2c00      	cmp	r4, #0
 800eeba:	d1f7      	bne.n	800eeac <_fwalk_sglue+0xc>
 800eebc:	4630      	mov	r0, r6
 800eebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eec2:	89ab      	ldrh	r3, [r5, #12]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d907      	bls.n	800eed8 <_fwalk_sglue+0x38>
 800eec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eecc:	3301      	adds	r3, #1
 800eece:	d003      	beq.n	800eed8 <_fwalk_sglue+0x38>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4638      	mov	r0, r7
 800eed4:	47c0      	blx	r8
 800eed6:	4306      	orrs	r6, r0
 800eed8:	3568      	adds	r5, #104	; 0x68
 800eeda:	e7e9      	b.n	800eeb0 <_fwalk_sglue+0x10>

0800eedc <siprintf>:
 800eedc:	b40e      	push	{r1, r2, r3}
 800eede:	b500      	push	{lr}
 800eee0:	b09c      	sub	sp, #112	; 0x70
 800eee2:	ab1d      	add	r3, sp, #116	; 0x74
 800eee4:	9002      	str	r0, [sp, #8]
 800eee6:	9006      	str	r0, [sp, #24]
 800eee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eeec:	4809      	ldr	r0, [pc, #36]	; (800ef14 <siprintf+0x38>)
 800eeee:	9107      	str	r1, [sp, #28]
 800eef0:	9104      	str	r1, [sp, #16]
 800eef2:	4909      	ldr	r1, [pc, #36]	; (800ef18 <siprintf+0x3c>)
 800eef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef8:	9105      	str	r1, [sp, #20]
 800eefa:	6800      	ldr	r0, [r0, #0]
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	a902      	add	r1, sp, #8
 800ef00:	f000 fab8 	bl	800f474 <_svfiprintf_r>
 800ef04:	9b02      	ldr	r3, [sp, #8]
 800ef06:	2200      	movs	r2, #0
 800ef08:	701a      	strb	r2, [r3, #0]
 800ef0a:	b01c      	add	sp, #112	; 0x70
 800ef0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef10:	b003      	add	sp, #12
 800ef12:	4770      	bx	lr
 800ef14:	20000144 	.word	0x20000144
 800ef18:	ffff0208 	.word	0xffff0208

0800ef1c <__sread>:
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	460c      	mov	r4, r1
 800ef20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef24:	f000 f8d6 	bl	800f0d4 <_read_r>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	bfab      	itete	ge
 800ef2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef30:	181b      	addge	r3, r3, r0
 800ef32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef36:	bfac      	ite	ge
 800ef38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef3a:	81a3      	strhlt	r3, [r4, #12]
 800ef3c:	bd10      	pop	{r4, pc}

0800ef3e <__swrite>:
 800ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	461f      	mov	r7, r3
 800ef44:	898b      	ldrh	r3, [r1, #12]
 800ef46:	05db      	lsls	r3, r3, #23
 800ef48:	4605      	mov	r5, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4616      	mov	r6, r2
 800ef4e:	d505      	bpl.n	800ef5c <__swrite+0x1e>
 800ef50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef54:	2302      	movs	r3, #2
 800ef56:	2200      	movs	r2, #0
 800ef58:	f000 f8aa 	bl	800f0b0 <_lseek_r>
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef66:	81a3      	strh	r3, [r4, #12]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	463b      	mov	r3, r7
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	f000 b8c1 	b.w	800f0f8 <_write_r>

0800ef76 <__sseek>:
 800ef76:	b510      	push	{r4, lr}
 800ef78:	460c      	mov	r4, r1
 800ef7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7e:	f000 f897 	bl	800f0b0 <_lseek_r>
 800ef82:	1c43      	adds	r3, r0, #1
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	bf15      	itete	ne
 800ef88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef92:	81a3      	strheq	r3, [r4, #12]
 800ef94:	bf18      	it	ne
 800ef96:	81a3      	strhne	r3, [r4, #12]
 800ef98:	bd10      	pop	{r4, pc}

0800ef9a <__sclose>:
 800ef9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef9e:	f000 b877 	b.w	800f090 <_close_r>

0800efa2 <memset>:
 800efa2:	4402      	add	r2, r0
 800efa4:	4603      	mov	r3, r0
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d100      	bne.n	800efac <memset+0xa>
 800efaa:	4770      	bx	lr
 800efac:	f803 1b01 	strb.w	r1, [r3], #1
 800efb0:	e7f9      	b.n	800efa6 <memset+0x4>

0800efb2 <strncat>:
 800efb2:	b530      	push	{r4, r5, lr}
 800efb4:	4604      	mov	r4, r0
 800efb6:	7825      	ldrb	r5, [r4, #0]
 800efb8:	4623      	mov	r3, r4
 800efba:	3401      	adds	r4, #1
 800efbc:	2d00      	cmp	r5, #0
 800efbe:	d1fa      	bne.n	800efb6 <strncat+0x4>
 800efc0:	3a01      	subs	r2, #1
 800efc2:	d304      	bcc.n	800efce <strncat+0x1c>
 800efc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efc8:	f803 4b01 	strb.w	r4, [r3], #1
 800efcc:	b904      	cbnz	r4, 800efd0 <strncat+0x1e>
 800efce:	bd30      	pop	{r4, r5, pc}
 800efd0:	2a00      	cmp	r2, #0
 800efd2:	d1f5      	bne.n	800efc0 <strncat+0xe>
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	e7f3      	b.n	800efc0 <strncat+0xe>

0800efd8 <strtok>:
 800efd8:	4b16      	ldr	r3, [pc, #88]	; (800f034 <strtok+0x5c>)
 800efda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efdc:	681e      	ldr	r6, [r3, #0]
 800efde:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800efe0:	4605      	mov	r5, r0
 800efe2:	b9fc      	cbnz	r4, 800f024 <strtok+0x4c>
 800efe4:	2050      	movs	r0, #80	; 0x50
 800efe6:	9101      	str	r1, [sp, #4]
 800efe8:	f000 f936 	bl	800f258 <malloc>
 800efec:	9901      	ldr	r1, [sp, #4]
 800efee:	6470      	str	r0, [r6, #68]	; 0x44
 800eff0:	4602      	mov	r2, r0
 800eff2:	b920      	cbnz	r0, 800effe <strtok+0x26>
 800eff4:	4b10      	ldr	r3, [pc, #64]	; (800f038 <strtok+0x60>)
 800eff6:	4811      	ldr	r0, [pc, #68]	; (800f03c <strtok+0x64>)
 800eff8:	215b      	movs	r1, #91	; 0x5b
 800effa:	f000 f8c3 	bl	800f184 <__assert_func>
 800effe:	e9c0 4400 	strd	r4, r4, [r0]
 800f002:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f006:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f00a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f00e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f012:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f016:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f01a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f01e:	6184      	str	r4, [r0, #24]
 800f020:	7704      	strb	r4, [r0, #28]
 800f022:	6244      	str	r4, [r0, #36]	; 0x24
 800f024:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f026:	2301      	movs	r3, #1
 800f028:	4628      	mov	r0, r5
 800f02a:	b002      	add	sp, #8
 800f02c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f030:	f000 b806 	b.w	800f040 <__strtok_r>
 800f034:	20000144 	.word	0x20000144
 800f038:	08010b5e 	.word	0x08010b5e
 800f03c:	08010b75 	.word	0x08010b75

0800f040 <__strtok_r>:
 800f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f042:	b908      	cbnz	r0, 800f048 <__strtok_r+0x8>
 800f044:	6810      	ldr	r0, [r2, #0]
 800f046:	b188      	cbz	r0, 800f06c <__strtok_r+0x2c>
 800f048:	4604      	mov	r4, r0
 800f04a:	4620      	mov	r0, r4
 800f04c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f050:	460f      	mov	r7, r1
 800f052:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f056:	b91e      	cbnz	r6, 800f060 <__strtok_r+0x20>
 800f058:	b965      	cbnz	r5, 800f074 <__strtok_r+0x34>
 800f05a:	6015      	str	r5, [r2, #0]
 800f05c:	4628      	mov	r0, r5
 800f05e:	e005      	b.n	800f06c <__strtok_r+0x2c>
 800f060:	42b5      	cmp	r5, r6
 800f062:	d1f6      	bne.n	800f052 <__strtok_r+0x12>
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1f0      	bne.n	800f04a <__strtok_r+0xa>
 800f068:	6014      	str	r4, [r2, #0]
 800f06a:	7003      	strb	r3, [r0, #0]
 800f06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f06e:	461c      	mov	r4, r3
 800f070:	e00c      	b.n	800f08c <__strtok_r+0x4c>
 800f072:	b915      	cbnz	r5, 800f07a <__strtok_r+0x3a>
 800f074:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f078:	460e      	mov	r6, r1
 800f07a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f07e:	42ab      	cmp	r3, r5
 800f080:	d1f7      	bne.n	800f072 <__strtok_r+0x32>
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0f3      	beq.n	800f06e <__strtok_r+0x2e>
 800f086:	2300      	movs	r3, #0
 800f088:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f08c:	6014      	str	r4, [r2, #0]
 800f08e:	e7ed      	b.n	800f06c <__strtok_r+0x2c>

0800f090 <_close_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4d06      	ldr	r5, [pc, #24]	; (800f0ac <_close_r+0x1c>)
 800f094:	2300      	movs	r3, #0
 800f096:	4604      	mov	r4, r0
 800f098:	4608      	mov	r0, r1
 800f09a:	602b      	str	r3, [r5, #0]
 800f09c:	f7f3 fc8d 	bl	80029ba <_close>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_close_r+0x1a>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_close_r+0x1a>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	20003f64 	.word	0x20003f64

0800f0b0 <_lseek_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d07      	ldr	r5, [pc, #28]	; (800f0d0 <_lseek_r+0x20>)
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	4608      	mov	r0, r1
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	602a      	str	r2, [r5, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f7f3 fca2 	bl	8002a08 <_lseek>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_lseek_r+0x1e>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_lseek_r+0x1e>
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	20003f64 	.word	0x20003f64

0800f0d4 <_read_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4d07      	ldr	r5, [pc, #28]	; (800f0f4 <_read_r+0x20>)
 800f0d8:	4604      	mov	r4, r0
 800f0da:	4608      	mov	r0, r1
 800f0dc:	4611      	mov	r1, r2
 800f0de:	2200      	movs	r2, #0
 800f0e0:	602a      	str	r2, [r5, #0]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f7f3 fc30 	bl	8002948 <_read>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_read_r+0x1e>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_read_r+0x1e>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	20003f64 	.word	0x20003f64

0800f0f8 <_write_r>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	4d07      	ldr	r5, [pc, #28]	; (800f118 <_write_r+0x20>)
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	4608      	mov	r0, r1
 800f100:	4611      	mov	r1, r2
 800f102:	2200      	movs	r2, #0
 800f104:	602a      	str	r2, [r5, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	f7f3 fc3b 	bl	8002982 <_write>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	d102      	bne.n	800f116 <_write_r+0x1e>
 800f110:	682b      	ldr	r3, [r5, #0]
 800f112:	b103      	cbz	r3, 800f116 <_write_r+0x1e>
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	bd38      	pop	{r3, r4, r5, pc}
 800f118:	20003f64 	.word	0x20003f64

0800f11c <__errno>:
 800f11c:	4b01      	ldr	r3, [pc, #4]	; (800f124 <__errno+0x8>)
 800f11e:	6818      	ldr	r0, [r3, #0]
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	20000144 	.word	0x20000144

0800f128 <__libc_init_array>:
 800f128:	b570      	push	{r4, r5, r6, lr}
 800f12a:	4d0d      	ldr	r5, [pc, #52]	; (800f160 <__libc_init_array+0x38>)
 800f12c:	4c0d      	ldr	r4, [pc, #52]	; (800f164 <__libc_init_array+0x3c>)
 800f12e:	1b64      	subs	r4, r4, r5
 800f130:	10a4      	asrs	r4, r4, #2
 800f132:	2600      	movs	r6, #0
 800f134:	42a6      	cmp	r6, r4
 800f136:	d109      	bne.n	800f14c <__libc_init_array+0x24>
 800f138:	4d0b      	ldr	r5, [pc, #44]	; (800f168 <__libc_init_array+0x40>)
 800f13a:	4c0c      	ldr	r4, [pc, #48]	; (800f16c <__libc_init_array+0x44>)
 800f13c:	f001 f800 	bl	8010140 <_init>
 800f140:	1b64      	subs	r4, r4, r5
 800f142:	10a4      	asrs	r4, r4, #2
 800f144:	2600      	movs	r6, #0
 800f146:	42a6      	cmp	r6, r4
 800f148:	d105      	bne.n	800f156 <__libc_init_array+0x2e>
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f150:	4798      	blx	r3
 800f152:	3601      	adds	r6, #1
 800f154:	e7ee      	b.n	800f134 <__libc_init_array+0xc>
 800f156:	f855 3b04 	ldr.w	r3, [r5], #4
 800f15a:	4798      	blx	r3
 800f15c:	3601      	adds	r6, #1
 800f15e:	e7f2      	b.n	800f146 <__libc_init_array+0x1e>
 800f160:	08010c48 	.word	0x08010c48
 800f164:	08010c48 	.word	0x08010c48
 800f168:	08010c48 	.word	0x08010c48
 800f16c:	08010c4c 	.word	0x08010c4c

0800f170 <__retarget_lock_acquire_recursive>:
 800f170:	4770      	bx	lr

0800f172 <__retarget_lock_release_recursive>:
 800f172:	4770      	bx	lr

0800f174 <strcpy>:
 800f174:	4603      	mov	r3, r0
 800f176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f17a:	f803 2b01 	strb.w	r2, [r3], #1
 800f17e:	2a00      	cmp	r2, #0
 800f180:	d1f9      	bne.n	800f176 <strcpy+0x2>
 800f182:	4770      	bx	lr

0800f184 <__assert_func>:
 800f184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f186:	4614      	mov	r4, r2
 800f188:	461a      	mov	r2, r3
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <__assert_func+0x2c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4605      	mov	r5, r0
 800f190:	68d8      	ldr	r0, [r3, #12]
 800f192:	b14c      	cbz	r4, 800f1a8 <__assert_func+0x24>
 800f194:	4b07      	ldr	r3, [pc, #28]	; (800f1b4 <__assert_func+0x30>)
 800f196:	9100      	str	r1, [sp, #0]
 800f198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f19c:	4906      	ldr	r1, [pc, #24]	; (800f1b8 <__assert_func+0x34>)
 800f19e:	462b      	mov	r3, r5
 800f1a0:	f000 fca4 	bl	800faec <fiprintf>
 800f1a4:	f000 fcec 	bl	800fb80 <abort>
 800f1a8:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <__assert_func+0x38>)
 800f1aa:	461c      	mov	r4, r3
 800f1ac:	e7f3      	b.n	800f196 <__assert_func+0x12>
 800f1ae:	bf00      	nop
 800f1b0:	20000144 	.word	0x20000144
 800f1b4:	08010bcf 	.word	0x08010bcf
 800f1b8:	08010bdc 	.word	0x08010bdc
 800f1bc:	08010c0a 	.word	0x08010c0a

0800f1c0 <_free_r>:
 800f1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1c2:	2900      	cmp	r1, #0
 800f1c4:	d044      	beq.n	800f250 <_free_r+0x90>
 800f1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ca:	9001      	str	r0, [sp, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800f1d2:	bfb8      	it	lt
 800f1d4:	18e4      	addlt	r4, r4, r3
 800f1d6:	f000 f8e7 	bl	800f3a8 <__malloc_lock>
 800f1da:	4a1e      	ldr	r2, [pc, #120]	; (800f254 <_free_r+0x94>)
 800f1dc:	9801      	ldr	r0, [sp, #4]
 800f1de:	6813      	ldr	r3, [r2, #0]
 800f1e0:	b933      	cbnz	r3, 800f1f0 <_free_r+0x30>
 800f1e2:	6063      	str	r3, [r4, #4]
 800f1e4:	6014      	str	r4, [r2, #0]
 800f1e6:	b003      	add	sp, #12
 800f1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ec:	f000 b8e2 	b.w	800f3b4 <__malloc_unlock>
 800f1f0:	42a3      	cmp	r3, r4
 800f1f2:	d908      	bls.n	800f206 <_free_r+0x46>
 800f1f4:	6825      	ldr	r5, [r4, #0]
 800f1f6:	1961      	adds	r1, r4, r5
 800f1f8:	428b      	cmp	r3, r1
 800f1fa:	bf01      	itttt	eq
 800f1fc:	6819      	ldreq	r1, [r3, #0]
 800f1fe:	685b      	ldreq	r3, [r3, #4]
 800f200:	1949      	addeq	r1, r1, r5
 800f202:	6021      	streq	r1, [r4, #0]
 800f204:	e7ed      	b.n	800f1e2 <_free_r+0x22>
 800f206:	461a      	mov	r2, r3
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	b10b      	cbz	r3, 800f210 <_free_r+0x50>
 800f20c:	42a3      	cmp	r3, r4
 800f20e:	d9fa      	bls.n	800f206 <_free_r+0x46>
 800f210:	6811      	ldr	r1, [r2, #0]
 800f212:	1855      	adds	r5, r2, r1
 800f214:	42a5      	cmp	r5, r4
 800f216:	d10b      	bne.n	800f230 <_free_r+0x70>
 800f218:	6824      	ldr	r4, [r4, #0]
 800f21a:	4421      	add	r1, r4
 800f21c:	1854      	adds	r4, r2, r1
 800f21e:	42a3      	cmp	r3, r4
 800f220:	6011      	str	r1, [r2, #0]
 800f222:	d1e0      	bne.n	800f1e6 <_free_r+0x26>
 800f224:	681c      	ldr	r4, [r3, #0]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	6053      	str	r3, [r2, #4]
 800f22a:	440c      	add	r4, r1
 800f22c:	6014      	str	r4, [r2, #0]
 800f22e:	e7da      	b.n	800f1e6 <_free_r+0x26>
 800f230:	d902      	bls.n	800f238 <_free_r+0x78>
 800f232:	230c      	movs	r3, #12
 800f234:	6003      	str	r3, [r0, #0]
 800f236:	e7d6      	b.n	800f1e6 <_free_r+0x26>
 800f238:	6825      	ldr	r5, [r4, #0]
 800f23a:	1961      	adds	r1, r4, r5
 800f23c:	428b      	cmp	r3, r1
 800f23e:	bf04      	itt	eq
 800f240:	6819      	ldreq	r1, [r3, #0]
 800f242:	685b      	ldreq	r3, [r3, #4]
 800f244:	6063      	str	r3, [r4, #4]
 800f246:	bf04      	itt	eq
 800f248:	1949      	addeq	r1, r1, r5
 800f24a:	6021      	streq	r1, [r4, #0]
 800f24c:	6054      	str	r4, [r2, #4]
 800f24e:	e7ca      	b.n	800f1e6 <_free_r+0x26>
 800f250:	b003      	add	sp, #12
 800f252:	bd30      	pop	{r4, r5, pc}
 800f254:	20003f6c 	.word	0x20003f6c

0800f258 <malloc>:
 800f258:	4b02      	ldr	r3, [pc, #8]	; (800f264 <malloc+0xc>)
 800f25a:	4601      	mov	r1, r0
 800f25c:	6818      	ldr	r0, [r3, #0]
 800f25e:	f000 b823 	b.w	800f2a8 <_malloc_r>
 800f262:	bf00      	nop
 800f264:	20000144 	.word	0x20000144

0800f268 <sbrk_aligned>:
 800f268:	b570      	push	{r4, r5, r6, lr}
 800f26a:	4e0e      	ldr	r6, [pc, #56]	; (800f2a4 <sbrk_aligned+0x3c>)
 800f26c:	460c      	mov	r4, r1
 800f26e:	6831      	ldr	r1, [r6, #0]
 800f270:	4605      	mov	r5, r0
 800f272:	b911      	cbnz	r1, 800f27a <sbrk_aligned+0x12>
 800f274:	f000 fc66 	bl	800fb44 <_sbrk_r>
 800f278:	6030      	str	r0, [r6, #0]
 800f27a:	4621      	mov	r1, r4
 800f27c:	4628      	mov	r0, r5
 800f27e:	f000 fc61 	bl	800fb44 <_sbrk_r>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d00a      	beq.n	800f29c <sbrk_aligned+0x34>
 800f286:	1cc4      	adds	r4, r0, #3
 800f288:	f024 0403 	bic.w	r4, r4, #3
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d007      	beq.n	800f2a0 <sbrk_aligned+0x38>
 800f290:	1a21      	subs	r1, r4, r0
 800f292:	4628      	mov	r0, r5
 800f294:	f000 fc56 	bl	800fb44 <_sbrk_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	d101      	bne.n	800f2a0 <sbrk_aligned+0x38>
 800f29c:	f04f 34ff 	mov.w	r4, #4294967295
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bd70      	pop	{r4, r5, r6, pc}
 800f2a4:	20003f70 	.word	0x20003f70

0800f2a8 <_malloc_r>:
 800f2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2ac:	1ccd      	adds	r5, r1, #3
 800f2ae:	f025 0503 	bic.w	r5, r5, #3
 800f2b2:	3508      	adds	r5, #8
 800f2b4:	2d0c      	cmp	r5, #12
 800f2b6:	bf38      	it	cc
 800f2b8:	250c      	movcc	r5, #12
 800f2ba:	2d00      	cmp	r5, #0
 800f2bc:	4607      	mov	r7, r0
 800f2be:	db01      	blt.n	800f2c4 <_malloc_r+0x1c>
 800f2c0:	42a9      	cmp	r1, r5
 800f2c2:	d905      	bls.n	800f2d0 <_malloc_r+0x28>
 800f2c4:	230c      	movs	r3, #12
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3a4 <_malloc_r+0xfc>
 800f2d4:	f000 f868 	bl	800f3a8 <__malloc_lock>
 800f2d8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2dc:	461c      	mov	r4, r3
 800f2de:	bb5c      	cbnz	r4, 800f338 <_malloc_r+0x90>
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	4638      	mov	r0, r7
 800f2e4:	f7ff ffc0 	bl	800f268 <sbrk_aligned>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	d155      	bne.n	800f39a <_malloc_r+0xf2>
 800f2ee:	f8d8 4000 	ldr.w	r4, [r8]
 800f2f2:	4626      	mov	r6, r4
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	d145      	bne.n	800f384 <_malloc_r+0xdc>
 800f2f8:	2c00      	cmp	r4, #0
 800f2fa:	d048      	beq.n	800f38e <_malloc_r+0xe6>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	4631      	mov	r1, r6
 800f300:	4638      	mov	r0, r7
 800f302:	eb04 0903 	add.w	r9, r4, r3
 800f306:	f000 fc1d 	bl	800fb44 <_sbrk_r>
 800f30a:	4581      	cmp	r9, r0
 800f30c:	d13f      	bne.n	800f38e <_malloc_r+0xe6>
 800f30e:	6821      	ldr	r1, [r4, #0]
 800f310:	1a6d      	subs	r5, r5, r1
 800f312:	4629      	mov	r1, r5
 800f314:	4638      	mov	r0, r7
 800f316:	f7ff ffa7 	bl	800f268 <sbrk_aligned>
 800f31a:	3001      	adds	r0, #1
 800f31c:	d037      	beq.n	800f38e <_malloc_r+0xe6>
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	442b      	add	r3, r5
 800f322:	6023      	str	r3, [r4, #0]
 800f324:	f8d8 3000 	ldr.w	r3, [r8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d038      	beq.n	800f39e <_malloc_r+0xf6>
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	42a2      	cmp	r2, r4
 800f330:	d12b      	bne.n	800f38a <_malloc_r+0xe2>
 800f332:	2200      	movs	r2, #0
 800f334:	605a      	str	r2, [r3, #4]
 800f336:	e00f      	b.n	800f358 <_malloc_r+0xb0>
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	1b52      	subs	r2, r2, r5
 800f33c:	d41f      	bmi.n	800f37e <_malloc_r+0xd6>
 800f33e:	2a0b      	cmp	r2, #11
 800f340:	d917      	bls.n	800f372 <_malloc_r+0xca>
 800f342:	1961      	adds	r1, r4, r5
 800f344:	42a3      	cmp	r3, r4
 800f346:	6025      	str	r5, [r4, #0]
 800f348:	bf18      	it	ne
 800f34a:	6059      	strne	r1, [r3, #4]
 800f34c:	6863      	ldr	r3, [r4, #4]
 800f34e:	bf08      	it	eq
 800f350:	f8c8 1000 	streq.w	r1, [r8]
 800f354:	5162      	str	r2, [r4, r5]
 800f356:	604b      	str	r3, [r1, #4]
 800f358:	4638      	mov	r0, r7
 800f35a:	f104 060b 	add.w	r6, r4, #11
 800f35e:	f000 f829 	bl	800f3b4 <__malloc_unlock>
 800f362:	f026 0607 	bic.w	r6, r6, #7
 800f366:	1d23      	adds	r3, r4, #4
 800f368:	1af2      	subs	r2, r6, r3
 800f36a:	d0ae      	beq.n	800f2ca <_malloc_r+0x22>
 800f36c:	1b9b      	subs	r3, r3, r6
 800f36e:	50a3      	str	r3, [r4, r2]
 800f370:	e7ab      	b.n	800f2ca <_malloc_r+0x22>
 800f372:	42a3      	cmp	r3, r4
 800f374:	6862      	ldr	r2, [r4, #4]
 800f376:	d1dd      	bne.n	800f334 <_malloc_r+0x8c>
 800f378:	f8c8 2000 	str.w	r2, [r8]
 800f37c:	e7ec      	b.n	800f358 <_malloc_r+0xb0>
 800f37e:	4623      	mov	r3, r4
 800f380:	6864      	ldr	r4, [r4, #4]
 800f382:	e7ac      	b.n	800f2de <_malloc_r+0x36>
 800f384:	4634      	mov	r4, r6
 800f386:	6876      	ldr	r6, [r6, #4]
 800f388:	e7b4      	b.n	800f2f4 <_malloc_r+0x4c>
 800f38a:	4613      	mov	r3, r2
 800f38c:	e7cc      	b.n	800f328 <_malloc_r+0x80>
 800f38e:	230c      	movs	r3, #12
 800f390:	603b      	str	r3, [r7, #0]
 800f392:	4638      	mov	r0, r7
 800f394:	f000 f80e 	bl	800f3b4 <__malloc_unlock>
 800f398:	e797      	b.n	800f2ca <_malloc_r+0x22>
 800f39a:	6025      	str	r5, [r4, #0]
 800f39c:	e7dc      	b.n	800f358 <_malloc_r+0xb0>
 800f39e:	605b      	str	r3, [r3, #4]
 800f3a0:	deff      	udf	#255	; 0xff
 800f3a2:	bf00      	nop
 800f3a4:	20003f6c 	.word	0x20003f6c

0800f3a8 <__malloc_lock>:
 800f3a8:	4801      	ldr	r0, [pc, #4]	; (800f3b0 <__malloc_lock+0x8>)
 800f3aa:	f7ff bee1 	b.w	800f170 <__retarget_lock_acquire_recursive>
 800f3ae:	bf00      	nop
 800f3b0:	20003f68 	.word	0x20003f68

0800f3b4 <__malloc_unlock>:
 800f3b4:	4801      	ldr	r0, [pc, #4]	; (800f3bc <__malloc_unlock+0x8>)
 800f3b6:	f7ff bedc 	b.w	800f172 <__retarget_lock_release_recursive>
 800f3ba:	bf00      	nop
 800f3bc:	20003f68 	.word	0x20003f68

0800f3c0 <__ssputs_r>:
 800f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c4:	688e      	ldr	r6, [r1, #8]
 800f3c6:	461f      	mov	r7, r3
 800f3c8:	42be      	cmp	r6, r7
 800f3ca:	680b      	ldr	r3, [r1, #0]
 800f3cc:	4682      	mov	sl, r0
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	4690      	mov	r8, r2
 800f3d2:	d82c      	bhi.n	800f42e <__ssputs_r+0x6e>
 800f3d4:	898a      	ldrh	r2, [r1, #12]
 800f3d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3da:	d026      	beq.n	800f42a <__ssputs_r+0x6a>
 800f3dc:	6965      	ldr	r5, [r4, #20]
 800f3de:	6909      	ldr	r1, [r1, #16]
 800f3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3e4:	eba3 0901 	sub.w	r9, r3, r1
 800f3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3ec:	1c7b      	adds	r3, r7, #1
 800f3ee:	444b      	add	r3, r9
 800f3f0:	106d      	asrs	r5, r5, #1
 800f3f2:	429d      	cmp	r5, r3
 800f3f4:	bf38      	it	cc
 800f3f6:	461d      	movcc	r5, r3
 800f3f8:	0553      	lsls	r3, r2, #21
 800f3fa:	d527      	bpl.n	800f44c <__ssputs_r+0x8c>
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	f7ff ff53 	bl	800f2a8 <_malloc_r>
 800f402:	4606      	mov	r6, r0
 800f404:	b360      	cbz	r0, 800f460 <__ssputs_r+0xa0>
 800f406:	6921      	ldr	r1, [r4, #16]
 800f408:	464a      	mov	r2, r9
 800f40a:	f000 fbab 	bl	800fb64 <memcpy>
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f418:	81a3      	strh	r3, [r4, #12]
 800f41a:	6126      	str	r6, [r4, #16]
 800f41c:	6165      	str	r5, [r4, #20]
 800f41e:	444e      	add	r6, r9
 800f420:	eba5 0509 	sub.w	r5, r5, r9
 800f424:	6026      	str	r6, [r4, #0]
 800f426:	60a5      	str	r5, [r4, #8]
 800f428:	463e      	mov	r6, r7
 800f42a:	42be      	cmp	r6, r7
 800f42c:	d900      	bls.n	800f430 <__ssputs_r+0x70>
 800f42e:	463e      	mov	r6, r7
 800f430:	6820      	ldr	r0, [r4, #0]
 800f432:	4632      	mov	r2, r6
 800f434:	4641      	mov	r1, r8
 800f436:	f000 fb6b 	bl	800fb10 <memmove>
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	1b9b      	subs	r3, r3, r6
 800f43e:	60a3      	str	r3, [r4, #8]
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	4433      	add	r3, r6
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	2000      	movs	r0, #0
 800f448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44c:	462a      	mov	r2, r5
 800f44e:	f000 fb9e 	bl	800fb8e <_realloc_r>
 800f452:	4606      	mov	r6, r0
 800f454:	2800      	cmp	r0, #0
 800f456:	d1e0      	bne.n	800f41a <__ssputs_r+0x5a>
 800f458:	6921      	ldr	r1, [r4, #16]
 800f45a:	4650      	mov	r0, sl
 800f45c:	f7ff feb0 	bl	800f1c0 <_free_r>
 800f460:	230c      	movs	r3, #12
 800f462:	f8ca 3000 	str.w	r3, [sl]
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f46c:	81a3      	strh	r3, [r4, #12]
 800f46e:	f04f 30ff 	mov.w	r0, #4294967295
 800f472:	e7e9      	b.n	800f448 <__ssputs_r+0x88>

0800f474 <_svfiprintf_r>:
 800f474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f478:	4698      	mov	r8, r3
 800f47a:	898b      	ldrh	r3, [r1, #12]
 800f47c:	061b      	lsls	r3, r3, #24
 800f47e:	b09d      	sub	sp, #116	; 0x74
 800f480:	4607      	mov	r7, r0
 800f482:	460d      	mov	r5, r1
 800f484:	4614      	mov	r4, r2
 800f486:	d50e      	bpl.n	800f4a6 <_svfiprintf_r+0x32>
 800f488:	690b      	ldr	r3, [r1, #16]
 800f48a:	b963      	cbnz	r3, 800f4a6 <_svfiprintf_r+0x32>
 800f48c:	2140      	movs	r1, #64	; 0x40
 800f48e:	f7ff ff0b 	bl	800f2a8 <_malloc_r>
 800f492:	6028      	str	r0, [r5, #0]
 800f494:	6128      	str	r0, [r5, #16]
 800f496:	b920      	cbnz	r0, 800f4a2 <_svfiprintf_r+0x2e>
 800f498:	230c      	movs	r3, #12
 800f49a:	603b      	str	r3, [r7, #0]
 800f49c:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a0:	e0d0      	b.n	800f644 <_svfiprintf_r+0x1d0>
 800f4a2:	2340      	movs	r3, #64	; 0x40
 800f4a4:	616b      	str	r3, [r5, #20]
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4aa:	2320      	movs	r3, #32
 800f4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4b4:	2330      	movs	r3, #48	; 0x30
 800f4b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f65c <_svfiprintf_r+0x1e8>
 800f4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4be:	f04f 0901 	mov.w	r9, #1
 800f4c2:	4623      	mov	r3, r4
 800f4c4:	469a      	mov	sl, r3
 800f4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ca:	b10a      	cbz	r2, 800f4d0 <_svfiprintf_r+0x5c>
 800f4cc:	2a25      	cmp	r2, #37	; 0x25
 800f4ce:	d1f9      	bne.n	800f4c4 <_svfiprintf_r+0x50>
 800f4d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f4d4:	d00b      	beq.n	800f4ee <_svfiprintf_r+0x7a>
 800f4d6:	465b      	mov	r3, fp
 800f4d8:	4622      	mov	r2, r4
 800f4da:	4629      	mov	r1, r5
 800f4dc:	4638      	mov	r0, r7
 800f4de:	f7ff ff6f 	bl	800f3c0 <__ssputs_r>
 800f4e2:	3001      	adds	r0, #1
 800f4e4:	f000 80a9 	beq.w	800f63a <_svfiprintf_r+0x1c6>
 800f4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ea:	445a      	add	r2, fp
 800f4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 80a1 	beq.w	800f63a <_svfiprintf_r+0x1c6>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f4fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f502:	f10a 0a01 	add.w	sl, sl, #1
 800f506:	9304      	str	r3, [sp, #16]
 800f508:	9307      	str	r3, [sp, #28]
 800f50a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f50e:	931a      	str	r3, [sp, #104]	; 0x68
 800f510:	4654      	mov	r4, sl
 800f512:	2205      	movs	r2, #5
 800f514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f518:	4850      	ldr	r0, [pc, #320]	; (800f65c <_svfiprintf_r+0x1e8>)
 800f51a:	f7f0 fe79 	bl	8000210 <memchr>
 800f51e:	9a04      	ldr	r2, [sp, #16]
 800f520:	b9d8      	cbnz	r0, 800f55a <_svfiprintf_r+0xe6>
 800f522:	06d0      	lsls	r0, r2, #27
 800f524:	bf44      	itt	mi
 800f526:	2320      	movmi	r3, #32
 800f528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f52c:	0711      	lsls	r1, r2, #28
 800f52e:	bf44      	itt	mi
 800f530:	232b      	movmi	r3, #43	; 0x2b
 800f532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f536:	f89a 3000 	ldrb.w	r3, [sl]
 800f53a:	2b2a      	cmp	r3, #42	; 0x2a
 800f53c:	d015      	beq.n	800f56a <_svfiprintf_r+0xf6>
 800f53e:	9a07      	ldr	r2, [sp, #28]
 800f540:	4654      	mov	r4, sl
 800f542:	2000      	movs	r0, #0
 800f544:	f04f 0c0a 	mov.w	ip, #10
 800f548:	4621      	mov	r1, r4
 800f54a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f54e:	3b30      	subs	r3, #48	; 0x30
 800f550:	2b09      	cmp	r3, #9
 800f552:	d94d      	bls.n	800f5f0 <_svfiprintf_r+0x17c>
 800f554:	b1b0      	cbz	r0, 800f584 <_svfiprintf_r+0x110>
 800f556:	9207      	str	r2, [sp, #28]
 800f558:	e014      	b.n	800f584 <_svfiprintf_r+0x110>
 800f55a:	eba0 0308 	sub.w	r3, r0, r8
 800f55e:	fa09 f303 	lsl.w	r3, r9, r3
 800f562:	4313      	orrs	r3, r2
 800f564:	9304      	str	r3, [sp, #16]
 800f566:	46a2      	mov	sl, r4
 800f568:	e7d2      	b.n	800f510 <_svfiprintf_r+0x9c>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	1d19      	adds	r1, r3, #4
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	9103      	str	r1, [sp, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	bfbb      	ittet	lt
 800f576:	425b      	neglt	r3, r3
 800f578:	f042 0202 	orrlt.w	r2, r2, #2
 800f57c:	9307      	strge	r3, [sp, #28]
 800f57e:	9307      	strlt	r3, [sp, #28]
 800f580:	bfb8      	it	lt
 800f582:	9204      	strlt	r2, [sp, #16]
 800f584:	7823      	ldrb	r3, [r4, #0]
 800f586:	2b2e      	cmp	r3, #46	; 0x2e
 800f588:	d10c      	bne.n	800f5a4 <_svfiprintf_r+0x130>
 800f58a:	7863      	ldrb	r3, [r4, #1]
 800f58c:	2b2a      	cmp	r3, #42	; 0x2a
 800f58e:	d134      	bne.n	800f5fa <_svfiprintf_r+0x186>
 800f590:	9b03      	ldr	r3, [sp, #12]
 800f592:	1d1a      	adds	r2, r3, #4
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	9203      	str	r2, [sp, #12]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	bfb8      	it	lt
 800f59c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5a0:	3402      	adds	r4, #2
 800f5a2:	9305      	str	r3, [sp, #20]
 800f5a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f66c <_svfiprintf_r+0x1f8>
 800f5a8:	7821      	ldrb	r1, [r4, #0]
 800f5aa:	2203      	movs	r2, #3
 800f5ac:	4650      	mov	r0, sl
 800f5ae:	f7f0 fe2f 	bl	8000210 <memchr>
 800f5b2:	b138      	cbz	r0, 800f5c4 <_svfiprintf_r+0x150>
 800f5b4:	9b04      	ldr	r3, [sp, #16]
 800f5b6:	eba0 000a 	sub.w	r0, r0, sl
 800f5ba:	2240      	movs	r2, #64	; 0x40
 800f5bc:	4082      	lsls	r2, r0
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	3401      	adds	r4, #1
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c8:	4825      	ldr	r0, [pc, #148]	; (800f660 <_svfiprintf_r+0x1ec>)
 800f5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ce:	2206      	movs	r2, #6
 800f5d0:	f7f0 fe1e 	bl	8000210 <memchr>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d038      	beq.n	800f64a <_svfiprintf_r+0x1d6>
 800f5d8:	4b22      	ldr	r3, [pc, #136]	; (800f664 <_svfiprintf_r+0x1f0>)
 800f5da:	bb1b      	cbnz	r3, 800f624 <_svfiprintf_r+0x1b0>
 800f5dc:	9b03      	ldr	r3, [sp, #12]
 800f5de:	3307      	adds	r3, #7
 800f5e0:	f023 0307 	bic.w	r3, r3, #7
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ea:	4433      	add	r3, r6
 800f5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ee:	e768      	b.n	800f4c2 <_svfiprintf_r+0x4e>
 800f5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	e7a6      	b.n	800f548 <_svfiprintf_r+0xd4>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	3401      	adds	r4, #1
 800f5fe:	9305      	str	r3, [sp, #20]
 800f600:	4619      	mov	r1, r3
 800f602:	f04f 0c0a 	mov.w	ip, #10
 800f606:	4620      	mov	r0, r4
 800f608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f60c:	3a30      	subs	r2, #48	; 0x30
 800f60e:	2a09      	cmp	r2, #9
 800f610:	d903      	bls.n	800f61a <_svfiprintf_r+0x1a6>
 800f612:	2b00      	cmp	r3, #0
 800f614:	d0c6      	beq.n	800f5a4 <_svfiprintf_r+0x130>
 800f616:	9105      	str	r1, [sp, #20]
 800f618:	e7c4      	b.n	800f5a4 <_svfiprintf_r+0x130>
 800f61a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f61e:	4604      	mov	r4, r0
 800f620:	2301      	movs	r3, #1
 800f622:	e7f0      	b.n	800f606 <_svfiprintf_r+0x192>
 800f624:	ab03      	add	r3, sp, #12
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	462a      	mov	r2, r5
 800f62a:	4b0f      	ldr	r3, [pc, #60]	; (800f668 <_svfiprintf_r+0x1f4>)
 800f62c:	a904      	add	r1, sp, #16
 800f62e:	4638      	mov	r0, r7
 800f630:	f3af 8000 	nop.w
 800f634:	1c42      	adds	r2, r0, #1
 800f636:	4606      	mov	r6, r0
 800f638:	d1d6      	bne.n	800f5e8 <_svfiprintf_r+0x174>
 800f63a:	89ab      	ldrh	r3, [r5, #12]
 800f63c:	065b      	lsls	r3, r3, #25
 800f63e:	f53f af2d 	bmi.w	800f49c <_svfiprintf_r+0x28>
 800f642:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f644:	b01d      	add	sp, #116	; 0x74
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64a:	ab03      	add	r3, sp, #12
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	462a      	mov	r2, r5
 800f650:	4b05      	ldr	r3, [pc, #20]	; (800f668 <_svfiprintf_r+0x1f4>)
 800f652:	a904      	add	r1, sp, #16
 800f654:	4638      	mov	r0, r7
 800f656:	f000 f879 	bl	800f74c <_printf_i>
 800f65a:	e7eb      	b.n	800f634 <_svfiprintf_r+0x1c0>
 800f65c:	08010c0b 	.word	0x08010c0b
 800f660:	08010c15 	.word	0x08010c15
 800f664:	00000000 	.word	0x00000000
 800f668:	0800f3c1 	.word	0x0800f3c1
 800f66c:	08010c11 	.word	0x08010c11

0800f670 <_printf_common>:
 800f670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f674:	4616      	mov	r6, r2
 800f676:	4699      	mov	r9, r3
 800f678:	688a      	ldr	r2, [r1, #8]
 800f67a:	690b      	ldr	r3, [r1, #16]
 800f67c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f680:	4293      	cmp	r3, r2
 800f682:	bfb8      	it	lt
 800f684:	4613      	movlt	r3, r2
 800f686:	6033      	str	r3, [r6, #0]
 800f688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f68c:	4607      	mov	r7, r0
 800f68e:	460c      	mov	r4, r1
 800f690:	b10a      	cbz	r2, 800f696 <_printf_common+0x26>
 800f692:	3301      	adds	r3, #1
 800f694:	6033      	str	r3, [r6, #0]
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	0699      	lsls	r1, r3, #26
 800f69a:	bf42      	ittt	mi
 800f69c:	6833      	ldrmi	r3, [r6, #0]
 800f69e:	3302      	addmi	r3, #2
 800f6a0:	6033      	strmi	r3, [r6, #0]
 800f6a2:	6825      	ldr	r5, [r4, #0]
 800f6a4:	f015 0506 	ands.w	r5, r5, #6
 800f6a8:	d106      	bne.n	800f6b8 <_printf_common+0x48>
 800f6aa:	f104 0a19 	add.w	sl, r4, #25
 800f6ae:	68e3      	ldr	r3, [r4, #12]
 800f6b0:	6832      	ldr	r2, [r6, #0]
 800f6b2:	1a9b      	subs	r3, r3, r2
 800f6b4:	42ab      	cmp	r3, r5
 800f6b6:	dc26      	bgt.n	800f706 <_printf_common+0x96>
 800f6b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6bc:	1e13      	subs	r3, r2, #0
 800f6be:	6822      	ldr	r2, [r4, #0]
 800f6c0:	bf18      	it	ne
 800f6c2:	2301      	movne	r3, #1
 800f6c4:	0692      	lsls	r2, r2, #26
 800f6c6:	d42b      	bmi.n	800f720 <_printf_common+0xb0>
 800f6c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	47c0      	blx	r8
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	d01e      	beq.n	800f714 <_printf_common+0xa4>
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	6922      	ldr	r2, [r4, #16]
 800f6da:	f003 0306 	and.w	r3, r3, #6
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	bf02      	ittt	eq
 800f6e2:	68e5      	ldreq	r5, [r4, #12]
 800f6e4:	6833      	ldreq	r3, [r6, #0]
 800f6e6:	1aed      	subeq	r5, r5, r3
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	bf0c      	ite	eq
 800f6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6f0:	2500      	movne	r5, #0
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	bfc4      	itt	gt
 800f6f6:	1a9b      	subgt	r3, r3, r2
 800f6f8:	18ed      	addgt	r5, r5, r3
 800f6fa:	2600      	movs	r6, #0
 800f6fc:	341a      	adds	r4, #26
 800f6fe:	42b5      	cmp	r5, r6
 800f700:	d11a      	bne.n	800f738 <_printf_common+0xc8>
 800f702:	2000      	movs	r0, #0
 800f704:	e008      	b.n	800f718 <_printf_common+0xa8>
 800f706:	2301      	movs	r3, #1
 800f708:	4652      	mov	r2, sl
 800f70a:	4649      	mov	r1, r9
 800f70c:	4638      	mov	r0, r7
 800f70e:	47c0      	blx	r8
 800f710:	3001      	adds	r0, #1
 800f712:	d103      	bne.n	800f71c <_printf_common+0xac>
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f71c:	3501      	adds	r5, #1
 800f71e:	e7c6      	b.n	800f6ae <_printf_common+0x3e>
 800f720:	18e1      	adds	r1, r4, r3
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	2030      	movs	r0, #48	; 0x30
 800f726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f72a:	4422      	add	r2, r4
 800f72c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f734:	3302      	adds	r3, #2
 800f736:	e7c7      	b.n	800f6c8 <_printf_common+0x58>
 800f738:	2301      	movs	r3, #1
 800f73a:	4622      	mov	r2, r4
 800f73c:	4649      	mov	r1, r9
 800f73e:	4638      	mov	r0, r7
 800f740:	47c0      	blx	r8
 800f742:	3001      	adds	r0, #1
 800f744:	d0e6      	beq.n	800f714 <_printf_common+0xa4>
 800f746:	3601      	adds	r6, #1
 800f748:	e7d9      	b.n	800f6fe <_printf_common+0x8e>
	...

0800f74c <_printf_i>:
 800f74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f750:	7e0f      	ldrb	r7, [r1, #24]
 800f752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f754:	2f78      	cmp	r7, #120	; 0x78
 800f756:	4691      	mov	r9, r2
 800f758:	4680      	mov	r8, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	469a      	mov	sl, r3
 800f75e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f762:	d807      	bhi.n	800f774 <_printf_i+0x28>
 800f764:	2f62      	cmp	r7, #98	; 0x62
 800f766:	d80a      	bhi.n	800f77e <_printf_i+0x32>
 800f768:	2f00      	cmp	r7, #0
 800f76a:	f000 80d4 	beq.w	800f916 <_printf_i+0x1ca>
 800f76e:	2f58      	cmp	r7, #88	; 0x58
 800f770:	f000 80c0 	beq.w	800f8f4 <_printf_i+0x1a8>
 800f774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f77c:	e03a      	b.n	800f7f4 <_printf_i+0xa8>
 800f77e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f782:	2b15      	cmp	r3, #21
 800f784:	d8f6      	bhi.n	800f774 <_printf_i+0x28>
 800f786:	a101      	add	r1, pc, #4	; (adr r1, 800f78c <_printf_i+0x40>)
 800f788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f78c:	0800f7e5 	.word	0x0800f7e5
 800f790:	0800f7f9 	.word	0x0800f7f9
 800f794:	0800f775 	.word	0x0800f775
 800f798:	0800f775 	.word	0x0800f775
 800f79c:	0800f775 	.word	0x0800f775
 800f7a0:	0800f775 	.word	0x0800f775
 800f7a4:	0800f7f9 	.word	0x0800f7f9
 800f7a8:	0800f775 	.word	0x0800f775
 800f7ac:	0800f775 	.word	0x0800f775
 800f7b0:	0800f775 	.word	0x0800f775
 800f7b4:	0800f775 	.word	0x0800f775
 800f7b8:	0800f8fd 	.word	0x0800f8fd
 800f7bc:	0800f825 	.word	0x0800f825
 800f7c0:	0800f8b7 	.word	0x0800f8b7
 800f7c4:	0800f775 	.word	0x0800f775
 800f7c8:	0800f775 	.word	0x0800f775
 800f7cc:	0800f91f 	.word	0x0800f91f
 800f7d0:	0800f775 	.word	0x0800f775
 800f7d4:	0800f825 	.word	0x0800f825
 800f7d8:	0800f775 	.word	0x0800f775
 800f7dc:	0800f775 	.word	0x0800f775
 800f7e0:	0800f8bf 	.word	0x0800f8bf
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	1d1a      	adds	r2, r3, #4
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	602a      	str	r2, [r5, #0]
 800f7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e09f      	b.n	800f938 <_printf_i+0x1ec>
 800f7f8:	6820      	ldr	r0, [r4, #0]
 800f7fa:	682b      	ldr	r3, [r5, #0]
 800f7fc:	0607      	lsls	r7, r0, #24
 800f7fe:	f103 0104 	add.w	r1, r3, #4
 800f802:	6029      	str	r1, [r5, #0]
 800f804:	d501      	bpl.n	800f80a <_printf_i+0xbe>
 800f806:	681e      	ldr	r6, [r3, #0]
 800f808:	e003      	b.n	800f812 <_printf_i+0xc6>
 800f80a:	0646      	lsls	r6, r0, #25
 800f80c:	d5fb      	bpl.n	800f806 <_printf_i+0xba>
 800f80e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f812:	2e00      	cmp	r6, #0
 800f814:	da03      	bge.n	800f81e <_printf_i+0xd2>
 800f816:	232d      	movs	r3, #45	; 0x2d
 800f818:	4276      	negs	r6, r6
 800f81a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f81e:	485a      	ldr	r0, [pc, #360]	; (800f988 <_printf_i+0x23c>)
 800f820:	230a      	movs	r3, #10
 800f822:	e012      	b.n	800f84a <_printf_i+0xfe>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	6820      	ldr	r0, [r4, #0]
 800f828:	1d19      	adds	r1, r3, #4
 800f82a:	6029      	str	r1, [r5, #0]
 800f82c:	0605      	lsls	r5, r0, #24
 800f82e:	d501      	bpl.n	800f834 <_printf_i+0xe8>
 800f830:	681e      	ldr	r6, [r3, #0]
 800f832:	e002      	b.n	800f83a <_printf_i+0xee>
 800f834:	0641      	lsls	r1, r0, #25
 800f836:	d5fb      	bpl.n	800f830 <_printf_i+0xe4>
 800f838:	881e      	ldrh	r6, [r3, #0]
 800f83a:	4853      	ldr	r0, [pc, #332]	; (800f988 <_printf_i+0x23c>)
 800f83c:	2f6f      	cmp	r7, #111	; 0x6f
 800f83e:	bf0c      	ite	eq
 800f840:	2308      	moveq	r3, #8
 800f842:	230a      	movne	r3, #10
 800f844:	2100      	movs	r1, #0
 800f846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f84a:	6865      	ldr	r5, [r4, #4]
 800f84c:	60a5      	str	r5, [r4, #8]
 800f84e:	2d00      	cmp	r5, #0
 800f850:	bfa2      	ittt	ge
 800f852:	6821      	ldrge	r1, [r4, #0]
 800f854:	f021 0104 	bicge.w	r1, r1, #4
 800f858:	6021      	strge	r1, [r4, #0]
 800f85a:	b90e      	cbnz	r6, 800f860 <_printf_i+0x114>
 800f85c:	2d00      	cmp	r5, #0
 800f85e:	d04b      	beq.n	800f8f8 <_printf_i+0x1ac>
 800f860:	4615      	mov	r5, r2
 800f862:	fbb6 f1f3 	udiv	r1, r6, r3
 800f866:	fb03 6711 	mls	r7, r3, r1, r6
 800f86a:	5dc7      	ldrb	r7, [r0, r7]
 800f86c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f870:	4637      	mov	r7, r6
 800f872:	42bb      	cmp	r3, r7
 800f874:	460e      	mov	r6, r1
 800f876:	d9f4      	bls.n	800f862 <_printf_i+0x116>
 800f878:	2b08      	cmp	r3, #8
 800f87a:	d10b      	bne.n	800f894 <_printf_i+0x148>
 800f87c:	6823      	ldr	r3, [r4, #0]
 800f87e:	07de      	lsls	r6, r3, #31
 800f880:	d508      	bpl.n	800f894 <_printf_i+0x148>
 800f882:	6923      	ldr	r3, [r4, #16]
 800f884:	6861      	ldr	r1, [r4, #4]
 800f886:	4299      	cmp	r1, r3
 800f888:	bfde      	ittt	le
 800f88a:	2330      	movle	r3, #48	; 0x30
 800f88c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f890:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f894:	1b52      	subs	r2, r2, r5
 800f896:	6122      	str	r2, [r4, #16]
 800f898:	f8cd a000 	str.w	sl, [sp]
 800f89c:	464b      	mov	r3, r9
 800f89e:	aa03      	add	r2, sp, #12
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4640      	mov	r0, r8
 800f8a4:	f7ff fee4 	bl	800f670 <_printf_common>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d14a      	bne.n	800f942 <_printf_i+0x1f6>
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b0:	b004      	add	sp, #16
 800f8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	f043 0320 	orr.w	r3, r3, #32
 800f8bc:	6023      	str	r3, [r4, #0]
 800f8be:	4833      	ldr	r0, [pc, #204]	; (800f98c <_printf_i+0x240>)
 800f8c0:	2778      	movs	r7, #120	; 0x78
 800f8c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f8c6:	6823      	ldr	r3, [r4, #0]
 800f8c8:	6829      	ldr	r1, [r5, #0]
 800f8ca:	061f      	lsls	r7, r3, #24
 800f8cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f8d0:	d402      	bmi.n	800f8d8 <_printf_i+0x18c>
 800f8d2:	065f      	lsls	r7, r3, #25
 800f8d4:	bf48      	it	mi
 800f8d6:	b2b6      	uxthmi	r6, r6
 800f8d8:	07df      	lsls	r7, r3, #31
 800f8da:	bf48      	it	mi
 800f8dc:	f043 0320 	orrmi.w	r3, r3, #32
 800f8e0:	6029      	str	r1, [r5, #0]
 800f8e2:	bf48      	it	mi
 800f8e4:	6023      	strmi	r3, [r4, #0]
 800f8e6:	b91e      	cbnz	r6, 800f8f0 <_printf_i+0x1a4>
 800f8e8:	6823      	ldr	r3, [r4, #0]
 800f8ea:	f023 0320 	bic.w	r3, r3, #32
 800f8ee:	6023      	str	r3, [r4, #0]
 800f8f0:	2310      	movs	r3, #16
 800f8f2:	e7a7      	b.n	800f844 <_printf_i+0xf8>
 800f8f4:	4824      	ldr	r0, [pc, #144]	; (800f988 <_printf_i+0x23c>)
 800f8f6:	e7e4      	b.n	800f8c2 <_printf_i+0x176>
 800f8f8:	4615      	mov	r5, r2
 800f8fa:	e7bd      	b.n	800f878 <_printf_i+0x12c>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	6826      	ldr	r6, [r4, #0]
 800f900:	6961      	ldr	r1, [r4, #20]
 800f902:	1d18      	adds	r0, r3, #4
 800f904:	6028      	str	r0, [r5, #0]
 800f906:	0635      	lsls	r5, r6, #24
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	d501      	bpl.n	800f910 <_printf_i+0x1c4>
 800f90c:	6019      	str	r1, [r3, #0]
 800f90e:	e002      	b.n	800f916 <_printf_i+0x1ca>
 800f910:	0670      	lsls	r0, r6, #25
 800f912:	d5fb      	bpl.n	800f90c <_printf_i+0x1c0>
 800f914:	8019      	strh	r1, [r3, #0]
 800f916:	2300      	movs	r3, #0
 800f918:	6123      	str	r3, [r4, #16]
 800f91a:	4615      	mov	r5, r2
 800f91c:	e7bc      	b.n	800f898 <_printf_i+0x14c>
 800f91e:	682b      	ldr	r3, [r5, #0]
 800f920:	1d1a      	adds	r2, r3, #4
 800f922:	602a      	str	r2, [r5, #0]
 800f924:	681d      	ldr	r5, [r3, #0]
 800f926:	6862      	ldr	r2, [r4, #4]
 800f928:	2100      	movs	r1, #0
 800f92a:	4628      	mov	r0, r5
 800f92c:	f7f0 fc70 	bl	8000210 <memchr>
 800f930:	b108      	cbz	r0, 800f936 <_printf_i+0x1ea>
 800f932:	1b40      	subs	r0, r0, r5
 800f934:	6060      	str	r0, [r4, #4]
 800f936:	6863      	ldr	r3, [r4, #4]
 800f938:	6123      	str	r3, [r4, #16]
 800f93a:	2300      	movs	r3, #0
 800f93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f940:	e7aa      	b.n	800f898 <_printf_i+0x14c>
 800f942:	6923      	ldr	r3, [r4, #16]
 800f944:	462a      	mov	r2, r5
 800f946:	4649      	mov	r1, r9
 800f948:	4640      	mov	r0, r8
 800f94a:	47d0      	blx	sl
 800f94c:	3001      	adds	r0, #1
 800f94e:	d0ad      	beq.n	800f8ac <_printf_i+0x160>
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	079b      	lsls	r3, r3, #30
 800f954:	d413      	bmi.n	800f97e <_printf_i+0x232>
 800f956:	68e0      	ldr	r0, [r4, #12]
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	4298      	cmp	r0, r3
 800f95c:	bfb8      	it	lt
 800f95e:	4618      	movlt	r0, r3
 800f960:	e7a6      	b.n	800f8b0 <_printf_i+0x164>
 800f962:	2301      	movs	r3, #1
 800f964:	4632      	mov	r2, r6
 800f966:	4649      	mov	r1, r9
 800f968:	4640      	mov	r0, r8
 800f96a:	47d0      	blx	sl
 800f96c:	3001      	adds	r0, #1
 800f96e:	d09d      	beq.n	800f8ac <_printf_i+0x160>
 800f970:	3501      	adds	r5, #1
 800f972:	68e3      	ldr	r3, [r4, #12]
 800f974:	9903      	ldr	r1, [sp, #12]
 800f976:	1a5b      	subs	r3, r3, r1
 800f978:	42ab      	cmp	r3, r5
 800f97a:	dcf2      	bgt.n	800f962 <_printf_i+0x216>
 800f97c:	e7eb      	b.n	800f956 <_printf_i+0x20a>
 800f97e:	2500      	movs	r5, #0
 800f980:	f104 0619 	add.w	r6, r4, #25
 800f984:	e7f5      	b.n	800f972 <_printf_i+0x226>
 800f986:	bf00      	nop
 800f988:	08010c1c 	.word	0x08010c1c
 800f98c:	08010c2d 	.word	0x08010c2d

0800f990 <__sflush_r>:
 800f990:	898a      	ldrh	r2, [r1, #12]
 800f992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f996:	4605      	mov	r5, r0
 800f998:	0710      	lsls	r0, r2, #28
 800f99a:	460c      	mov	r4, r1
 800f99c:	d458      	bmi.n	800fa50 <__sflush_r+0xc0>
 800f99e:	684b      	ldr	r3, [r1, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	dc05      	bgt.n	800f9b0 <__sflush_r+0x20>
 800f9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	dc02      	bgt.n	800f9b0 <__sflush_r+0x20>
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9b2:	2e00      	cmp	r6, #0
 800f9b4:	d0f9      	beq.n	800f9aa <__sflush_r+0x1a>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f9bc:	682f      	ldr	r7, [r5, #0]
 800f9be:	6a21      	ldr	r1, [r4, #32]
 800f9c0:	602b      	str	r3, [r5, #0]
 800f9c2:	d032      	beq.n	800fa2a <__sflush_r+0x9a>
 800f9c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f9c6:	89a3      	ldrh	r3, [r4, #12]
 800f9c8:	075a      	lsls	r2, r3, #29
 800f9ca:	d505      	bpl.n	800f9d8 <__sflush_r+0x48>
 800f9cc:	6863      	ldr	r3, [r4, #4]
 800f9ce:	1ac0      	subs	r0, r0, r3
 800f9d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9d2:	b10b      	cbz	r3, 800f9d8 <__sflush_r+0x48>
 800f9d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9d6:	1ac0      	subs	r0, r0, r3
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4602      	mov	r2, r0
 800f9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9de:	6a21      	ldr	r1, [r4, #32]
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	47b0      	blx	r6
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	d106      	bne.n	800f9f8 <__sflush_r+0x68>
 800f9ea:	6829      	ldr	r1, [r5, #0]
 800f9ec:	291d      	cmp	r1, #29
 800f9ee:	d82b      	bhi.n	800fa48 <__sflush_r+0xb8>
 800f9f0:	4a29      	ldr	r2, [pc, #164]	; (800fa98 <__sflush_r+0x108>)
 800f9f2:	410a      	asrs	r2, r1
 800f9f4:	07d6      	lsls	r6, r2, #31
 800f9f6:	d427      	bmi.n	800fa48 <__sflush_r+0xb8>
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	6062      	str	r2, [r4, #4]
 800f9fc:	04d9      	lsls	r1, r3, #19
 800f9fe:	6922      	ldr	r2, [r4, #16]
 800fa00:	6022      	str	r2, [r4, #0]
 800fa02:	d504      	bpl.n	800fa0e <__sflush_r+0x7e>
 800fa04:	1c42      	adds	r2, r0, #1
 800fa06:	d101      	bne.n	800fa0c <__sflush_r+0x7c>
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	b903      	cbnz	r3, 800fa0e <__sflush_r+0x7e>
 800fa0c:	6560      	str	r0, [r4, #84]	; 0x54
 800fa0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa10:	602f      	str	r7, [r5, #0]
 800fa12:	2900      	cmp	r1, #0
 800fa14:	d0c9      	beq.n	800f9aa <__sflush_r+0x1a>
 800fa16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa1a:	4299      	cmp	r1, r3
 800fa1c:	d002      	beq.n	800fa24 <__sflush_r+0x94>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7ff fbce 	bl	800f1c0 <_free_r>
 800fa24:	2000      	movs	r0, #0
 800fa26:	6360      	str	r0, [r4, #52]	; 0x34
 800fa28:	e7c0      	b.n	800f9ac <__sflush_r+0x1c>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b0      	blx	r6
 800fa30:	1c41      	adds	r1, r0, #1
 800fa32:	d1c8      	bne.n	800f9c6 <__sflush_r+0x36>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d0c5      	beq.n	800f9c6 <__sflush_r+0x36>
 800fa3a:	2b1d      	cmp	r3, #29
 800fa3c:	d001      	beq.n	800fa42 <__sflush_r+0xb2>
 800fa3e:	2b16      	cmp	r3, #22
 800fa40:	d101      	bne.n	800fa46 <__sflush_r+0xb6>
 800fa42:	602f      	str	r7, [r5, #0]
 800fa44:	e7b1      	b.n	800f9aa <__sflush_r+0x1a>
 800fa46:	89a3      	ldrh	r3, [r4, #12]
 800fa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa4c:	81a3      	strh	r3, [r4, #12]
 800fa4e:	e7ad      	b.n	800f9ac <__sflush_r+0x1c>
 800fa50:	690f      	ldr	r7, [r1, #16]
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	d0a9      	beq.n	800f9aa <__sflush_r+0x1a>
 800fa56:	0793      	lsls	r3, r2, #30
 800fa58:	680e      	ldr	r6, [r1, #0]
 800fa5a:	bf08      	it	eq
 800fa5c:	694b      	ldreq	r3, [r1, #20]
 800fa5e:	600f      	str	r7, [r1, #0]
 800fa60:	bf18      	it	ne
 800fa62:	2300      	movne	r3, #0
 800fa64:	eba6 0807 	sub.w	r8, r6, r7
 800fa68:	608b      	str	r3, [r1, #8]
 800fa6a:	f1b8 0f00 	cmp.w	r8, #0
 800fa6e:	dd9c      	ble.n	800f9aa <__sflush_r+0x1a>
 800fa70:	6a21      	ldr	r1, [r4, #32]
 800fa72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa74:	4643      	mov	r3, r8
 800fa76:	463a      	mov	r2, r7
 800fa78:	4628      	mov	r0, r5
 800fa7a:	47b0      	blx	r6
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	dc06      	bgt.n	800fa8e <__sflush_r+0xfe>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa86:	81a3      	strh	r3, [r4, #12]
 800fa88:	f04f 30ff 	mov.w	r0, #4294967295
 800fa8c:	e78e      	b.n	800f9ac <__sflush_r+0x1c>
 800fa8e:	4407      	add	r7, r0
 800fa90:	eba8 0800 	sub.w	r8, r8, r0
 800fa94:	e7e9      	b.n	800fa6a <__sflush_r+0xda>
 800fa96:	bf00      	nop
 800fa98:	dfbffffe 	.word	0xdfbffffe

0800fa9c <_fflush_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	690b      	ldr	r3, [r1, #16]
 800faa0:	4605      	mov	r5, r0
 800faa2:	460c      	mov	r4, r1
 800faa4:	b913      	cbnz	r3, 800faac <_fflush_r+0x10>
 800faa6:	2500      	movs	r5, #0
 800faa8:	4628      	mov	r0, r5
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	b118      	cbz	r0, 800fab6 <_fflush_r+0x1a>
 800faae:	6a03      	ldr	r3, [r0, #32]
 800fab0:	b90b      	cbnz	r3, 800fab6 <_fflush_r+0x1a>
 800fab2:	f7ff f9dd 	bl	800ee70 <__sinit>
 800fab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0f3      	beq.n	800faa6 <_fflush_r+0xa>
 800fabe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fac0:	07d0      	lsls	r0, r2, #31
 800fac2:	d404      	bmi.n	800face <_fflush_r+0x32>
 800fac4:	0599      	lsls	r1, r3, #22
 800fac6:	d402      	bmi.n	800face <_fflush_r+0x32>
 800fac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faca:	f7ff fb51 	bl	800f170 <__retarget_lock_acquire_recursive>
 800face:	4628      	mov	r0, r5
 800fad0:	4621      	mov	r1, r4
 800fad2:	f7ff ff5d 	bl	800f990 <__sflush_r>
 800fad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fad8:	07da      	lsls	r2, r3, #31
 800fada:	4605      	mov	r5, r0
 800fadc:	d4e4      	bmi.n	800faa8 <_fflush_r+0xc>
 800fade:	89a3      	ldrh	r3, [r4, #12]
 800fae0:	059b      	lsls	r3, r3, #22
 800fae2:	d4e1      	bmi.n	800faa8 <_fflush_r+0xc>
 800fae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fae6:	f7ff fb44 	bl	800f172 <__retarget_lock_release_recursive>
 800faea:	e7dd      	b.n	800faa8 <_fflush_r+0xc>

0800faec <fiprintf>:
 800faec:	b40e      	push	{r1, r2, r3}
 800faee:	b503      	push	{r0, r1, lr}
 800faf0:	4601      	mov	r1, r0
 800faf2:	ab03      	add	r3, sp, #12
 800faf4:	4805      	ldr	r0, [pc, #20]	; (800fb0c <fiprintf+0x20>)
 800faf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fafa:	6800      	ldr	r0, [r0, #0]
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	f000 f89f 	bl	800fc40 <_vfiprintf_r>
 800fb02:	b002      	add	sp, #8
 800fb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb08:	b003      	add	sp, #12
 800fb0a:	4770      	bx	lr
 800fb0c:	20000144 	.word	0x20000144

0800fb10 <memmove>:
 800fb10:	4288      	cmp	r0, r1
 800fb12:	b510      	push	{r4, lr}
 800fb14:	eb01 0402 	add.w	r4, r1, r2
 800fb18:	d902      	bls.n	800fb20 <memmove+0x10>
 800fb1a:	4284      	cmp	r4, r0
 800fb1c:	4623      	mov	r3, r4
 800fb1e:	d807      	bhi.n	800fb30 <memmove+0x20>
 800fb20:	1e43      	subs	r3, r0, #1
 800fb22:	42a1      	cmp	r1, r4
 800fb24:	d008      	beq.n	800fb38 <memmove+0x28>
 800fb26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb2e:	e7f8      	b.n	800fb22 <memmove+0x12>
 800fb30:	4402      	add	r2, r0
 800fb32:	4601      	mov	r1, r0
 800fb34:	428a      	cmp	r2, r1
 800fb36:	d100      	bne.n	800fb3a <memmove+0x2a>
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb42:	e7f7      	b.n	800fb34 <memmove+0x24>

0800fb44 <_sbrk_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4d06      	ldr	r5, [pc, #24]	; (800fb60 <_sbrk_r+0x1c>)
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	f7f2 ff68 	bl	8002a24 <_sbrk>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_sbrk_r+0x1a>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_sbrk_r+0x1a>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	20003f64 	.word	0x20003f64

0800fb64 <memcpy>:
 800fb64:	440a      	add	r2, r1
 800fb66:	4291      	cmp	r1, r2
 800fb68:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb6c:	d100      	bne.n	800fb70 <memcpy+0xc>
 800fb6e:	4770      	bx	lr
 800fb70:	b510      	push	{r4, lr}
 800fb72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb7a:	4291      	cmp	r1, r2
 800fb7c:	d1f9      	bne.n	800fb72 <memcpy+0xe>
 800fb7e:	bd10      	pop	{r4, pc}

0800fb80 <abort>:
 800fb80:	b508      	push	{r3, lr}
 800fb82:	2006      	movs	r0, #6
 800fb84:	f000 fa34 	bl	800fff0 <raise>
 800fb88:	2001      	movs	r0, #1
 800fb8a:	f7f2 fed3 	bl	8002934 <_exit>

0800fb8e <_realloc_r>:
 800fb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb92:	4680      	mov	r8, r0
 800fb94:	4614      	mov	r4, r2
 800fb96:	460e      	mov	r6, r1
 800fb98:	b921      	cbnz	r1, 800fba4 <_realloc_r+0x16>
 800fb9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb9e:	4611      	mov	r1, r2
 800fba0:	f7ff bb82 	b.w	800f2a8 <_malloc_r>
 800fba4:	b92a      	cbnz	r2, 800fbb2 <_realloc_r+0x24>
 800fba6:	f7ff fb0b 	bl	800f1c0 <_free_r>
 800fbaa:	4625      	mov	r5, r4
 800fbac:	4628      	mov	r0, r5
 800fbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb2:	f000 fa39 	bl	8010028 <_malloc_usable_size_r>
 800fbb6:	4284      	cmp	r4, r0
 800fbb8:	4607      	mov	r7, r0
 800fbba:	d802      	bhi.n	800fbc2 <_realloc_r+0x34>
 800fbbc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbc0:	d812      	bhi.n	800fbe8 <_realloc_r+0x5a>
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	f7ff fb6f 	bl	800f2a8 <_malloc_r>
 800fbca:	4605      	mov	r5, r0
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0ed      	beq.n	800fbac <_realloc_r+0x1e>
 800fbd0:	42bc      	cmp	r4, r7
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	4631      	mov	r1, r6
 800fbd6:	bf28      	it	cs
 800fbd8:	463a      	movcs	r2, r7
 800fbda:	f7ff ffc3 	bl	800fb64 <memcpy>
 800fbde:	4631      	mov	r1, r6
 800fbe0:	4640      	mov	r0, r8
 800fbe2:	f7ff faed 	bl	800f1c0 <_free_r>
 800fbe6:	e7e1      	b.n	800fbac <_realloc_r+0x1e>
 800fbe8:	4635      	mov	r5, r6
 800fbea:	e7df      	b.n	800fbac <_realloc_r+0x1e>

0800fbec <__sfputc_r>:
 800fbec:	6893      	ldr	r3, [r2, #8]
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	b410      	push	{r4}
 800fbf4:	6093      	str	r3, [r2, #8]
 800fbf6:	da08      	bge.n	800fc0a <__sfputc_r+0x1e>
 800fbf8:	6994      	ldr	r4, [r2, #24]
 800fbfa:	42a3      	cmp	r3, r4
 800fbfc:	db01      	blt.n	800fc02 <__sfputc_r+0x16>
 800fbfe:	290a      	cmp	r1, #10
 800fc00:	d103      	bne.n	800fc0a <__sfputc_r+0x1e>
 800fc02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc06:	f000 b935 	b.w	800fe74 <__swbuf_r>
 800fc0a:	6813      	ldr	r3, [r2, #0]
 800fc0c:	1c58      	adds	r0, r3, #1
 800fc0e:	6010      	str	r0, [r2, #0]
 800fc10:	7019      	strb	r1, [r3, #0]
 800fc12:	4608      	mov	r0, r1
 800fc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <__sfputs_r>:
 800fc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	460f      	mov	r7, r1
 800fc20:	4614      	mov	r4, r2
 800fc22:	18d5      	adds	r5, r2, r3
 800fc24:	42ac      	cmp	r4, r5
 800fc26:	d101      	bne.n	800fc2c <__sfputs_r+0x12>
 800fc28:	2000      	movs	r0, #0
 800fc2a:	e007      	b.n	800fc3c <__sfputs_r+0x22>
 800fc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc30:	463a      	mov	r2, r7
 800fc32:	4630      	mov	r0, r6
 800fc34:	f7ff ffda 	bl	800fbec <__sfputc_r>
 800fc38:	1c43      	adds	r3, r0, #1
 800fc3a:	d1f3      	bne.n	800fc24 <__sfputs_r+0xa>
 800fc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc40 <_vfiprintf_r>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	460d      	mov	r5, r1
 800fc46:	b09d      	sub	sp, #116	; 0x74
 800fc48:	4614      	mov	r4, r2
 800fc4a:	4698      	mov	r8, r3
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	b118      	cbz	r0, 800fc58 <_vfiprintf_r+0x18>
 800fc50:	6a03      	ldr	r3, [r0, #32]
 800fc52:	b90b      	cbnz	r3, 800fc58 <_vfiprintf_r+0x18>
 800fc54:	f7ff f90c 	bl	800ee70 <__sinit>
 800fc58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc5a:	07d9      	lsls	r1, r3, #31
 800fc5c:	d405      	bmi.n	800fc6a <_vfiprintf_r+0x2a>
 800fc5e:	89ab      	ldrh	r3, [r5, #12]
 800fc60:	059a      	lsls	r2, r3, #22
 800fc62:	d402      	bmi.n	800fc6a <_vfiprintf_r+0x2a>
 800fc64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc66:	f7ff fa83 	bl	800f170 <__retarget_lock_acquire_recursive>
 800fc6a:	89ab      	ldrh	r3, [r5, #12]
 800fc6c:	071b      	lsls	r3, r3, #28
 800fc6e:	d501      	bpl.n	800fc74 <_vfiprintf_r+0x34>
 800fc70:	692b      	ldr	r3, [r5, #16]
 800fc72:	b99b      	cbnz	r3, 800fc9c <_vfiprintf_r+0x5c>
 800fc74:	4629      	mov	r1, r5
 800fc76:	4630      	mov	r0, r6
 800fc78:	f000 f93a 	bl	800fef0 <__swsetup_r>
 800fc7c:	b170      	cbz	r0, 800fc9c <_vfiprintf_r+0x5c>
 800fc7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc80:	07dc      	lsls	r4, r3, #31
 800fc82:	d504      	bpl.n	800fc8e <_vfiprintf_r+0x4e>
 800fc84:	f04f 30ff 	mov.w	r0, #4294967295
 800fc88:	b01d      	add	sp, #116	; 0x74
 800fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8e:	89ab      	ldrh	r3, [r5, #12]
 800fc90:	0598      	lsls	r0, r3, #22
 800fc92:	d4f7      	bmi.n	800fc84 <_vfiprintf_r+0x44>
 800fc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc96:	f7ff fa6c 	bl	800f172 <__retarget_lock_release_recursive>
 800fc9a:	e7f3      	b.n	800fc84 <_vfiprintf_r+0x44>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800fca0:	2320      	movs	r3, #32
 800fca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fca6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcaa:	2330      	movs	r3, #48	; 0x30
 800fcac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fe60 <_vfiprintf_r+0x220>
 800fcb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcb4:	f04f 0901 	mov.w	r9, #1
 800fcb8:	4623      	mov	r3, r4
 800fcba:	469a      	mov	sl, r3
 800fcbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcc0:	b10a      	cbz	r2, 800fcc6 <_vfiprintf_r+0x86>
 800fcc2:	2a25      	cmp	r2, #37	; 0x25
 800fcc4:	d1f9      	bne.n	800fcba <_vfiprintf_r+0x7a>
 800fcc6:	ebba 0b04 	subs.w	fp, sl, r4
 800fcca:	d00b      	beq.n	800fce4 <_vfiprintf_r+0xa4>
 800fccc:	465b      	mov	r3, fp
 800fcce:	4622      	mov	r2, r4
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7ff ffa1 	bl	800fc1a <__sfputs_r>
 800fcd8:	3001      	adds	r0, #1
 800fcda:	f000 80a9 	beq.w	800fe30 <_vfiprintf_r+0x1f0>
 800fcde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fce0:	445a      	add	r2, fp
 800fce2:	9209      	str	r2, [sp, #36]	; 0x24
 800fce4:	f89a 3000 	ldrb.w	r3, [sl]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 80a1 	beq.w	800fe30 <_vfiprintf_r+0x1f0>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcf8:	f10a 0a01 	add.w	sl, sl, #1
 800fcfc:	9304      	str	r3, [sp, #16]
 800fcfe:	9307      	str	r3, [sp, #28]
 800fd00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd04:	931a      	str	r3, [sp, #104]	; 0x68
 800fd06:	4654      	mov	r4, sl
 800fd08:	2205      	movs	r2, #5
 800fd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd0e:	4854      	ldr	r0, [pc, #336]	; (800fe60 <_vfiprintf_r+0x220>)
 800fd10:	f7f0 fa7e 	bl	8000210 <memchr>
 800fd14:	9a04      	ldr	r2, [sp, #16]
 800fd16:	b9d8      	cbnz	r0, 800fd50 <_vfiprintf_r+0x110>
 800fd18:	06d1      	lsls	r1, r2, #27
 800fd1a:	bf44      	itt	mi
 800fd1c:	2320      	movmi	r3, #32
 800fd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd22:	0713      	lsls	r3, r2, #28
 800fd24:	bf44      	itt	mi
 800fd26:	232b      	movmi	r3, #43	; 0x2b
 800fd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd30:	2b2a      	cmp	r3, #42	; 0x2a
 800fd32:	d015      	beq.n	800fd60 <_vfiprintf_r+0x120>
 800fd34:	9a07      	ldr	r2, [sp, #28]
 800fd36:	4654      	mov	r4, sl
 800fd38:	2000      	movs	r0, #0
 800fd3a:	f04f 0c0a 	mov.w	ip, #10
 800fd3e:	4621      	mov	r1, r4
 800fd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd44:	3b30      	subs	r3, #48	; 0x30
 800fd46:	2b09      	cmp	r3, #9
 800fd48:	d94d      	bls.n	800fde6 <_vfiprintf_r+0x1a6>
 800fd4a:	b1b0      	cbz	r0, 800fd7a <_vfiprintf_r+0x13a>
 800fd4c:	9207      	str	r2, [sp, #28]
 800fd4e:	e014      	b.n	800fd7a <_vfiprintf_r+0x13a>
 800fd50:	eba0 0308 	sub.w	r3, r0, r8
 800fd54:	fa09 f303 	lsl.w	r3, r9, r3
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	46a2      	mov	sl, r4
 800fd5e:	e7d2      	b.n	800fd06 <_vfiprintf_r+0xc6>
 800fd60:	9b03      	ldr	r3, [sp, #12]
 800fd62:	1d19      	adds	r1, r3, #4
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	9103      	str	r1, [sp, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	bfbb      	ittet	lt
 800fd6c:	425b      	neglt	r3, r3
 800fd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800fd72:	9307      	strge	r3, [sp, #28]
 800fd74:	9307      	strlt	r3, [sp, #28]
 800fd76:	bfb8      	it	lt
 800fd78:	9204      	strlt	r2, [sp, #16]
 800fd7a:	7823      	ldrb	r3, [r4, #0]
 800fd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd7e:	d10c      	bne.n	800fd9a <_vfiprintf_r+0x15a>
 800fd80:	7863      	ldrb	r3, [r4, #1]
 800fd82:	2b2a      	cmp	r3, #42	; 0x2a
 800fd84:	d134      	bne.n	800fdf0 <_vfiprintf_r+0x1b0>
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	1d1a      	adds	r2, r3, #4
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	9203      	str	r2, [sp, #12]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	bfb8      	it	lt
 800fd92:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd96:	3402      	adds	r4, #2
 800fd98:	9305      	str	r3, [sp, #20]
 800fd9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fe70 <_vfiprintf_r+0x230>
 800fd9e:	7821      	ldrb	r1, [r4, #0]
 800fda0:	2203      	movs	r2, #3
 800fda2:	4650      	mov	r0, sl
 800fda4:	f7f0 fa34 	bl	8000210 <memchr>
 800fda8:	b138      	cbz	r0, 800fdba <_vfiprintf_r+0x17a>
 800fdaa:	9b04      	ldr	r3, [sp, #16]
 800fdac:	eba0 000a 	sub.w	r0, r0, sl
 800fdb0:	2240      	movs	r2, #64	; 0x40
 800fdb2:	4082      	lsls	r2, r0
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	3401      	adds	r4, #1
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdbe:	4829      	ldr	r0, [pc, #164]	; (800fe64 <_vfiprintf_r+0x224>)
 800fdc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdc4:	2206      	movs	r2, #6
 800fdc6:	f7f0 fa23 	bl	8000210 <memchr>
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d03f      	beq.n	800fe4e <_vfiprintf_r+0x20e>
 800fdce:	4b26      	ldr	r3, [pc, #152]	; (800fe68 <_vfiprintf_r+0x228>)
 800fdd0:	bb1b      	cbnz	r3, 800fe1a <_vfiprintf_r+0x1da>
 800fdd2:	9b03      	ldr	r3, [sp, #12]
 800fdd4:	3307      	adds	r3, #7
 800fdd6:	f023 0307 	bic.w	r3, r3, #7
 800fdda:	3308      	adds	r3, #8
 800fddc:	9303      	str	r3, [sp, #12]
 800fdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde0:	443b      	add	r3, r7
 800fde2:	9309      	str	r3, [sp, #36]	; 0x24
 800fde4:	e768      	b.n	800fcb8 <_vfiprintf_r+0x78>
 800fde6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdea:	460c      	mov	r4, r1
 800fdec:	2001      	movs	r0, #1
 800fdee:	e7a6      	b.n	800fd3e <_vfiprintf_r+0xfe>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	3401      	adds	r4, #1
 800fdf4:	9305      	str	r3, [sp, #20]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	f04f 0c0a 	mov.w	ip, #10
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe02:	3a30      	subs	r2, #48	; 0x30
 800fe04:	2a09      	cmp	r2, #9
 800fe06:	d903      	bls.n	800fe10 <_vfiprintf_r+0x1d0>
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0c6      	beq.n	800fd9a <_vfiprintf_r+0x15a>
 800fe0c:	9105      	str	r1, [sp, #20]
 800fe0e:	e7c4      	b.n	800fd9a <_vfiprintf_r+0x15a>
 800fe10:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe14:	4604      	mov	r4, r0
 800fe16:	2301      	movs	r3, #1
 800fe18:	e7f0      	b.n	800fdfc <_vfiprintf_r+0x1bc>
 800fe1a:	ab03      	add	r3, sp, #12
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	462a      	mov	r2, r5
 800fe20:	4b12      	ldr	r3, [pc, #72]	; (800fe6c <_vfiprintf_r+0x22c>)
 800fe22:	a904      	add	r1, sp, #16
 800fe24:	4630      	mov	r0, r6
 800fe26:	f3af 8000 	nop.w
 800fe2a:	4607      	mov	r7, r0
 800fe2c:	1c78      	adds	r0, r7, #1
 800fe2e:	d1d6      	bne.n	800fdde <_vfiprintf_r+0x19e>
 800fe30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe32:	07d9      	lsls	r1, r3, #31
 800fe34:	d405      	bmi.n	800fe42 <_vfiprintf_r+0x202>
 800fe36:	89ab      	ldrh	r3, [r5, #12]
 800fe38:	059a      	lsls	r2, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_vfiprintf_r+0x202>
 800fe3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe3e:	f7ff f998 	bl	800f172 <__retarget_lock_release_recursive>
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	065b      	lsls	r3, r3, #25
 800fe46:	f53f af1d 	bmi.w	800fc84 <_vfiprintf_r+0x44>
 800fe4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe4c:	e71c      	b.n	800fc88 <_vfiprintf_r+0x48>
 800fe4e:	ab03      	add	r3, sp, #12
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	462a      	mov	r2, r5
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <_vfiprintf_r+0x22c>)
 800fe56:	a904      	add	r1, sp, #16
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f7ff fc77 	bl	800f74c <_printf_i>
 800fe5e:	e7e4      	b.n	800fe2a <_vfiprintf_r+0x1ea>
 800fe60:	08010c0b 	.word	0x08010c0b
 800fe64:	08010c15 	.word	0x08010c15
 800fe68:	00000000 	.word	0x00000000
 800fe6c:	0800fc1b 	.word	0x0800fc1b
 800fe70:	08010c11 	.word	0x08010c11

0800fe74 <__swbuf_r>:
 800fe74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe76:	460e      	mov	r6, r1
 800fe78:	4614      	mov	r4, r2
 800fe7a:	4605      	mov	r5, r0
 800fe7c:	b118      	cbz	r0, 800fe86 <__swbuf_r+0x12>
 800fe7e:	6a03      	ldr	r3, [r0, #32]
 800fe80:	b90b      	cbnz	r3, 800fe86 <__swbuf_r+0x12>
 800fe82:	f7fe fff5 	bl	800ee70 <__sinit>
 800fe86:	69a3      	ldr	r3, [r4, #24]
 800fe88:	60a3      	str	r3, [r4, #8]
 800fe8a:	89a3      	ldrh	r3, [r4, #12]
 800fe8c:	071a      	lsls	r2, r3, #28
 800fe8e:	d525      	bpl.n	800fedc <__swbuf_r+0x68>
 800fe90:	6923      	ldr	r3, [r4, #16]
 800fe92:	b31b      	cbz	r3, 800fedc <__swbuf_r+0x68>
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	6922      	ldr	r2, [r4, #16]
 800fe98:	1a98      	subs	r0, r3, r2
 800fe9a:	6963      	ldr	r3, [r4, #20]
 800fe9c:	b2f6      	uxtb	r6, r6
 800fe9e:	4283      	cmp	r3, r0
 800fea0:	4637      	mov	r7, r6
 800fea2:	dc04      	bgt.n	800feae <__swbuf_r+0x3a>
 800fea4:	4621      	mov	r1, r4
 800fea6:	4628      	mov	r0, r5
 800fea8:	f7ff fdf8 	bl	800fa9c <_fflush_r>
 800feac:	b9e0      	cbnz	r0, 800fee8 <__swbuf_r+0x74>
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	3b01      	subs	r3, #1
 800feb2:	60a3      	str	r3, [r4, #8]
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	6022      	str	r2, [r4, #0]
 800feba:	701e      	strb	r6, [r3, #0]
 800febc:	6962      	ldr	r2, [r4, #20]
 800febe:	1c43      	adds	r3, r0, #1
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d004      	beq.n	800fece <__swbuf_r+0x5a>
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	07db      	lsls	r3, r3, #31
 800fec8:	d506      	bpl.n	800fed8 <__swbuf_r+0x64>
 800feca:	2e0a      	cmp	r6, #10
 800fecc:	d104      	bne.n	800fed8 <__swbuf_r+0x64>
 800fece:	4621      	mov	r1, r4
 800fed0:	4628      	mov	r0, r5
 800fed2:	f7ff fde3 	bl	800fa9c <_fflush_r>
 800fed6:	b938      	cbnz	r0, 800fee8 <__swbuf_r+0x74>
 800fed8:	4638      	mov	r0, r7
 800feda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fedc:	4621      	mov	r1, r4
 800fede:	4628      	mov	r0, r5
 800fee0:	f000 f806 	bl	800fef0 <__swsetup_r>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d0d5      	beq.n	800fe94 <__swbuf_r+0x20>
 800fee8:	f04f 37ff 	mov.w	r7, #4294967295
 800feec:	e7f4      	b.n	800fed8 <__swbuf_r+0x64>
	...

0800fef0 <__swsetup_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4b2a      	ldr	r3, [pc, #168]	; (800ff9c <__swsetup_r+0xac>)
 800fef4:	4605      	mov	r5, r0
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	460c      	mov	r4, r1
 800fefa:	b118      	cbz	r0, 800ff04 <__swsetup_r+0x14>
 800fefc:	6a03      	ldr	r3, [r0, #32]
 800fefe:	b90b      	cbnz	r3, 800ff04 <__swsetup_r+0x14>
 800ff00:	f7fe ffb6 	bl	800ee70 <__sinit>
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff0a:	0718      	lsls	r0, r3, #28
 800ff0c:	d422      	bmi.n	800ff54 <__swsetup_r+0x64>
 800ff0e:	06d9      	lsls	r1, r3, #27
 800ff10:	d407      	bmi.n	800ff22 <__swsetup_r+0x32>
 800ff12:	2309      	movs	r3, #9
 800ff14:	602b      	str	r3, [r5, #0]
 800ff16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff20:	e034      	b.n	800ff8c <__swsetup_r+0x9c>
 800ff22:	0758      	lsls	r0, r3, #29
 800ff24:	d512      	bpl.n	800ff4c <__swsetup_r+0x5c>
 800ff26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff28:	b141      	cbz	r1, 800ff3c <__swsetup_r+0x4c>
 800ff2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	d002      	beq.n	800ff38 <__swsetup_r+0x48>
 800ff32:	4628      	mov	r0, r5
 800ff34:	f7ff f944 	bl	800f1c0 <_free_r>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff42:	81a3      	strh	r3, [r4, #12]
 800ff44:	2300      	movs	r3, #0
 800ff46:	6063      	str	r3, [r4, #4]
 800ff48:	6923      	ldr	r3, [r4, #16]
 800ff4a:	6023      	str	r3, [r4, #0]
 800ff4c:	89a3      	ldrh	r3, [r4, #12]
 800ff4e:	f043 0308 	orr.w	r3, r3, #8
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	6923      	ldr	r3, [r4, #16]
 800ff56:	b94b      	cbnz	r3, 800ff6c <__swsetup_r+0x7c>
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff62:	d003      	beq.n	800ff6c <__swsetup_r+0x7c>
 800ff64:	4621      	mov	r1, r4
 800ff66:	4628      	mov	r0, r5
 800ff68:	f000 f88c 	bl	8010084 <__smakebuf_r>
 800ff6c:	89a0      	ldrh	r0, [r4, #12]
 800ff6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff72:	f010 0301 	ands.w	r3, r0, #1
 800ff76:	d00a      	beq.n	800ff8e <__swsetup_r+0x9e>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60a3      	str	r3, [r4, #8]
 800ff7c:	6963      	ldr	r3, [r4, #20]
 800ff7e:	425b      	negs	r3, r3
 800ff80:	61a3      	str	r3, [r4, #24]
 800ff82:	6923      	ldr	r3, [r4, #16]
 800ff84:	b943      	cbnz	r3, 800ff98 <__swsetup_r+0xa8>
 800ff86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff8a:	d1c4      	bne.n	800ff16 <__swsetup_r+0x26>
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	0781      	lsls	r1, r0, #30
 800ff90:	bf58      	it	pl
 800ff92:	6963      	ldrpl	r3, [r4, #20]
 800ff94:	60a3      	str	r3, [r4, #8]
 800ff96:	e7f4      	b.n	800ff82 <__swsetup_r+0x92>
 800ff98:	2000      	movs	r0, #0
 800ff9a:	e7f7      	b.n	800ff8c <__swsetup_r+0x9c>
 800ff9c:	20000144 	.word	0x20000144

0800ffa0 <_raise_r>:
 800ffa0:	291f      	cmp	r1, #31
 800ffa2:	b538      	push	{r3, r4, r5, lr}
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	460d      	mov	r5, r1
 800ffa8:	d904      	bls.n	800ffb4 <_raise_r+0x14>
 800ffaa:	2316      	movs	r3, #22
 800ffac:	6003      	str	r3, [r0, #0]
 800ffae:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb2:	bd38      	pop	{r3, r4, r5, pc}
 800ffb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ffb6:	b112      	cbz	r2, 800ffbe <_raise_r+0x1e>
 800ffb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffbc:	b94b      	cbnz	r3, 800ffd2 <_raise_r+0x32>
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f000 f830 	bl	8010024 <_getpid_r>
 800ffc4:	462a      	mov	r2, r5
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	4620      	mov	r0, r4
 800ffca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffce:	f000 b817 	b.w	8010000 <_kill_r>
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d00a      	beq.n	800ffec <_raise_r+0x4c>
 800ffd6:	1c59      	adds	r1, r3, #1
 800ffd8:	d103      	bne.n	800ffe2 <_raise_r+0x42>
 800ffda:	2316      	movs	r3, #22
 800ffdc:	6003      	str	r3, [r0, #0]
 800ffde:	2001      	movs	r0, #1
 800ffe0:	e7e7      	b.n	800ffb2 <_raise_r+0x12>
 800ffe2:	2400      	movs	r4, #0
 800ffe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ffe8:	4628      	mov	r0, r5
 800ffea:	4798      	blx	r3
 800ffec:	2000      	movs	r0, #0
 800ffee:	e7e0      	b.n	800ffb2 <_raise_r+0x12>

0800fff0 <raise>:
 800fff0:	4b02      	ldr	r3, [pc, #8]	; (800fffc <raise+0xc>)
 800fff2:	4601      	mov	r1, r0
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	f7ff bfd3 	b.w	800ffa0 <_raise_r>
 800fffa:	bf00      	nop
 800fffc:	20000144 	.word	0x20000144

08010000 <_kill_r>:
 8010000:	b538      	push	{r3, r4, r5, lr}
 8010002:	4d07      	ldr	r5, [pc, #28]	; (8010020 <_kill_r+0x20>)
 8010004:	2300      	movs	r3, #0
 8010006:	4604      	mov	r4, r0
 8010008:	4608      	mov	r0, r1
 801000a:	4611      	mov	r1, r2
 801000c:	602b      	str	r3, [r5, #0]
 801000e:	f7f2 fc81 	bl	8002914 <_kill>
 8010012:	1c43      	adds	r3, r0, #1
 8010014:	d102      	bne.n	801001c <_kill_r+0x1c>
 8010016:	682b      	ldr	r3, [r5, #0]
 8010018:	b103      	cbz	r3, 801001c <_kill_r+0x1c>
 801001a:	6023      	str	r3, [r4, #0]
 801001c:	bd38      	pop	{r3, r4, r5, pc}
 801001e:	bf00      	nop
 8010020:	20003f64 	.word	0x20003f64

08010024 <_getpid_r>:
 8010024:	f7f2 bc6e 	b.w	8002904 <_getpid>

08010028 <_malloc_usable_size_r>:
 8010028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801002c:	1f18      	subs	r0, r3, #4
 801002e:	2b00      	cmp	r3, #0
 8010030:	bfbc      	itt	lt
 8010032:	580b      	ldrlt	r3, [r1, r0]
 8010034:	18c0      	addlt	r0, r0, r3
 8010036:	4770      	bx	lr

08010038 <__swhatbuf_r>:
 8010038:	b570      	push	{r4, r5, r6, lr}
 801003a:	460c      	mov	r4, r1
 801003c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010040:	2900      	cmp	r1, #0
 8010042:	b096      	sub	sp, #88	; 0x58
 8010044:	4615      	mov	r5, r2
 8010046:	461e      	mov	r6, r3
 8010048:	da0d      	bge.n	8010066 <__swhatbuf_r+0x2e>
 801004a:	89a3      	ldrh	r3, [r4, #12]
 801004c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010050:	f04f 0100 	mov.w	r1, #0
 8010054:	bf0c      	ite	eq
 8010056:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801005a:	2340      	movne	r3, #64	; 0x40
 801005c:	2000      	movs	r0, #0
 801005e:	6031      	str	r1, [r6, #0]
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	b016      	add	sp, #88	; 0x58
 8010064:	bd70      	pop	{r4, r5, r6, pc}
 8010066:	466a      	mov	r2, sp
 8010068:	f000 f848 	bl	80100fc <_fstat_r>
 801006c:	2800      	cmp	r0, #0
 801006e:	dbec      	blt.n	801004a <__swhatbuf_r+0x12>
 8010070:	9901      	ldr	r1, [sp, #4]
 8010072:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010076:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801007a:	4259      	negs	r1, r3
 801007c:	4159      	adcs	r1, r3
 801007e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010082:	e7eb      	b.n	801005c <__swhatbuf_r+0x24>

08010084 <__smakebuf_r>:
 8010084:	898b      	ldrh	r3, [r1, #12]
 8010086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010088:	079d      	lsls	r5, r3, #30
 801008a:	4606      	mov	r6, r0
 801008c:	460c      	mov	r4, r1
 801008e:	d507      	bpl.n	80100a0 <__smakebuf_r+0x1c>
 8010090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	6123      	str	r3, [r4, #16]
 8010098:	2301      	movs	r3, #1
 801009a:	6163      	str	r3, [r4, #20]
 801009c:	b002      	add	sp, #8
 801009e:	bd70      	pop	{r4, r5, r6, pc}
 80100a0:	ab01      	add	r3, sp, #4
 80100a2:	466a      	mov	r2, sp
 80100a4:	f7ff ffc8 	bl	8010038 <__swhatbuf_r>
 80100a8:	9900      	ldr	r1, [sp, #0]
 80100aa:	4605      	mov	r5, r0
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7ff f8fb 	bl	800f2a8 <_malloc_r>
 80100b2:	b948      	cbnz	r0, 80100c8 <__smakebuf_r+0x44>
 80100b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b8:	059a      	lsls	r2, r3, #22
 80100ba:	d4ef      	bmi.n	801009c <__smakebuf_r+0x18>
 80100bc:	f023 0303 	bic.w	r3, r3, #3
 80100c0:	f043 0302 	orr.w	r3, r3, #2
 80100c4:	81a3      	strh	r3, [r4, #12]
 80100c6:	e7e3      	b.n	8010090 <__smakebuf_r+0xc>
 80100c8:	89a3      	ldrh	r3, [r4, #12]
 80100ca:	6020      	str	r0, [r4, #0]
 80100cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	9b00      	ldr	r3, [sp, #0]
 80100d4:	6163      	str	r3, [r4, #20]
 80100d6:	9b01      	ldr	r3, [sp, #4]
 80100d8:	6120      	str	r0, [r4, #16]
 80100da:	b15b      	cbz	r3, 80100f4 <__smakebuf_r+0x70>
 80100dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100e0:	4630      	mov	r0, r6
 80100e2:	f000 f81d 	bl	8010120 <_isatty_r>
 80100e6:	b128      	cbz	r0, 80100f4 <__smakebuf_r+0x70>
 80100e8:	89a3      	ldrh	r3, [r4, #12]
 80100ea:	f023 0303 	bic.w	r3, r3, #3
 80100ee:	f043 0301 	orr.w	r3, r3, #1
 80100f2:	81a3      	strh	r3, [r4, #12]
 80100f4:	89a3      	ldrh	r3, [r4, #12]
 80100f6:	431d      	orrs	r5, r3
 80100f8:	81a5      	strh	r5, [r4, #12]
 80100fa:	e7cf      	b.n	801009c <__smakebuf_r+0x18>

080100fc <_fstat_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	4d07      	ldr	r5, [pc, #28]	; (801011c <_fstat_r+0x20>)
 8010100:	2300      	movs	r3, #0
 8010102:	4604      	mov	r4, r0
 8010104:	4608      	mov	r0, r1
 8010106:	4611      	mov	r1, r2
 8010108:	602b      	str	r3, [r5, #0]
 801010a:	f7f2 fc62 	bl	80029d2 <_fstat>
 801010e:	1c43      	adds	r3, r0, #1
 8010110:	d102      	bne.n	8010118 <_fstat_r+0x1c>
 8010112:	682b      	ldr	r3, [r5, #0]
 8010114:	b103      	cbz	r3, 8010118 <_fstat_r+0x1c>
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	bd38      	pop	{r3, r4, r5, pc}
 801011a:	bf00      	nop
 801011c:	20003f64 	.word	0x20003f64

08010120 <_isatty_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4d06      	ldr	r5, [pc, #24]	; (801013c <_isatty_r+0x1c>)
 8010124:	2300      	movs	r3, #0
 8010126:	4604      	mov	r4, r0
 8010128:	4608      	mov	r0, r1
 801012a:	602b      	str	r3, [r5, #0]
 801012c:	f7f2 fc61 	bl	80029f2 <_isatty>
 8010130:	1c43      	adds	r3, r0, #1
 8010132:	d102      	bne.n	801013a <_isatty_r+0x1a>
 8010134:	682b      	ldr	r3, [r5, #0]
 8010136:	b103      	cbz	r3, 801013a <_isatty_r+0x1a>
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	20003f64 	.word	0x20003f64

08010140 <_init>:
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010142:	bf00      	nop
 8010144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010146:	bc08      	pop	{r3}
 8010148:	469e      	mov	lr, r3
 801014a:	4770      	bx	lr

0801014c <_fini>:
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	bf00      	nop
 8010150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010152:	bc08      	pop	{r3}
 8010154:	469e      	mov	lr, r3
 8010156:	4770      	bx	lr
