
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010144  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  080102e4  080102e4  000202e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dcc  08010dcc  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08010dcc  08010dcc  00020dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dd4  08010dd4  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dd4  08010dd4  00020dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dd8  08010dd8  00020dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08010ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e2c  20000178  08010f54  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fa4  08010f54  00033fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158cf  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003034  00000000  00000000  00045aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00048af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e27  00000000  00000000  00049c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187f0  00000000  00000000  0004aa8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ec8  00000000  00000000  0006327f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009395f  00000000  00000000  0007b147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055e8  00000000  00000000  0010eaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00114090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102cc 	.word	0x080102cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	080102cc 	.word	0x080102cc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a4      	sub	sp, #144	; 0x90
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc7      	ldr	r3, [pc, #796]	; (80009d8 <main+0x344>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc4      	ldr	r3, [pc, #784]	; (80009d8 <main+0x344>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc1      	ldr	r3, [pc, #772]	; (80009d8 <main+0x344>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbe      	ldr	r3, [pc, #760]	; (80009d8 <main+0x344>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbb      	ldr	r3, [pc, #748]	; (80009d8 <main+0x344>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb8      	ldr	r3, [pc, #736]	; (80009d8 <main+0x344>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb5      	ldr	r3, [pc, #724]	; (80009d8 <main+0x344>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb2      	ldr	r3, [pc, #712]	; (80009d8 <main+0x344>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4baf      	ldr	r3, [pc, #700]	; (80009d8 <main+0x344>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bac      	ldr	r3, [pc, #688]	; (80009d8 <main+0x344>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4ba9      	ldr	r3, [pc, #676]	; (80009d8 <main+0x344>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba6      	ldr	r3, [pc, #664]	; (80009d8 <main+0x344>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba3      	ldr	r3, [pc, #652]	; (80009d8 <main+0x344>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <main+0x344>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9d      	ldr	r3, [pc, #628]	; (80009d8 <main+0x344>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9a      	ldr	r3, [pc, #616]	; (80009d8 <main+0x344>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b97      	ldr	r3, [pc, #604]	; (80009d8 <main+0x344>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <main+0x344>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <main+0x344>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8e      	ldr	r3, [pc, #568]	; (80009d8 <main+0x344>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <main+0x344>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b88      	ldr	r3, [pc, #544]	; (80009d8 <main+0x344>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <main+0x344>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b82      	ldr	r3, [pc, #520]	; (80009d8 <main+0x344>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <main+0x344>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <main+0x344>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <main+0x344>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b75      	ldr	r3, [pc, #468]	; (80009d8 <main+0x344>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b72      	ldr	r3, [pc, #456]	; (80009d8 <main+0x344>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <main+0x344>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x344>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <main+0x344>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <main+0x344>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <main+0x344>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <main+0x344>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <main+0x344>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <main+0x344>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <main+0x344>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <main+0x348>)
 80008d2:	f005 ffb5 	bl	8006840 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008d6:	4942      	ldr	r1, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	f00e fd11 	bl	800f300 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x354>)
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x358>)
 80008e2:	f00e fd0d 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008e6:	4942      	ldr	r1, [pc, #264]	; (80009f0 <main+0x35c>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x360>)
 80008ea:	f00e fd09 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008ee:	4942      	ldr	r1, [pc, #264]	; (80009f8 <main+0x364>)
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x368>)
 80008f2:	f00e fd05 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x36c>)
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <main+0x370>)
 80008fa:	f00e fd01 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80008fe:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x374>)
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x378>)
 8000902:	f00e fcfd 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x37c>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x380>)
 800090a:	f00e fcf9 	bl	800f300 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800090e:	4942      	ldr	r1, [pc, #264]	; (8000a18 <main+0x384>)
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <main+0x388>)
 8000912:	f00e fcf5 	bl	800f300 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <main+0x348>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <main+0x348>)
 8000948:	2206      	movs	r2, #6
 800094a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <main+0x348>)
 8000950:	2201      	movs	r2, #1
 8000952:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <main+0x348>)
 8000958:	2203      	movs	r2, #3
 800095a:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x348>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <main+0x348>)
 8000978:	220a      	movs	r2, #10
 800097a:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <main+0x348>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <main+0x348>)
 8000988:	2233      	movs	r2, #51	; 0x33
 800098a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <main+0x348>)
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x348>)
 8000998:	2235      	movs	r2, #53	; 0x35
 800099a:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <main+0x348>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x348>)
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <main+0x348>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <main+0x348>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x38c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <main+0x344>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <main+0x390>)
 80009c8:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <main+0x344>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <main+0x344>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <main+0x394>)
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e029      	b.n	8000a2c <main+0x398>
 80009d8:	20002744 	.word	0x20002744
 80009dc:	20000b58 	.word	0x20000b58
 80009e0:	20000024 	.word	0x20000024
 80009e4:	20000b5e 	.word	0x20000b5e
 80009e8:	2000002c 	.word	0x2000002c
 80009ec:	20000b7e 	.word	0x20000b7e
 80009f0:	20000038 	.word	0x20000038
 80009f4:	20000b8e 	.word	0x20000b8e
 80009f8:	20000048 	.word	0x20000048
 80009fc:	20000b9e 	.word	0x20000b9e
 8000a00:	20000050 	.word	0x20000050
 8000a04:	20000ba4 	.word	0x20000ba4
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	20000bba 	.word	0x20000bba
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20000bca 	.word	0x20000bca
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20000bb4 	.word	0x20000bb4
 8000a20:	200037f4 	.word	0x200037f4
 8000a24:	40020000 	.word	0x40020000
 8000a28:	20000194 	.word	0x20000194

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a2e:	f00b fe1b 	bl	800c668 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x4d4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a38:	484c      	ldr	r0, [pc, #304]	; (8000b6c <main+0x4d8>)
 8000a3a:	f00b fe15 	bl	800c668 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <main+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a44:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a48:	2103      	movs	r1, #3
 8000a4a:	4848      	ldr	r0, [pc, #288]	; (8000b6c <main+0x4d8>)
 8000a4c:	f00b feaf 	bl	800c7ae <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f002 f88e 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 fb1a 	bl	800108c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x4dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <main+0x4e0>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	099b      	lsrs	r3, r3, #6
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdcb 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fd21 	bl	80014b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a6e:	f000 fb75 	bl	800115c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a72:	f000 fc9f 	bl	80013b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a76:	f000 fcc7 	bl	8001408 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a7a:	f000 fcef 	bl	800145c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a7e:	f000 fba3 	bl	80011c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a82:	f000 fc1b 	bl	80012bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	483b      	ldr	r0, [pc, #236]	; (8000b78 <main+0x4e4>)
 8000a8c:	f002 fd44 	bl	8003518 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a90:	210e      	movs	r1, #14
 8000a92:	483a      	ldr	r0, [pc, #232]	; (8000b7c <main+0x4e8>)
 8000a94:	f000 fd94 	bl	80015c0 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000a98:	f001 fc84 	bl	80023a4 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <main+0x4ec>)
 8000a9e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <main+0x41a>
 8000aa6:	2113      	movs	r1, #19
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <main+0x4f0>)
 8000aaa:	f000 fd89 	bl	80015c0 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4935      	ldr	r1, [pc, #212]	; (8000b88 <main+0x4f4>)
 8000ab2:	4836      	ldr	r0, [pc, #216]	; (8000b8c <main+0x4f8>)
 8000ab4:	f004 fe59 	bl	800576a <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4935      	ldr	r1, [pc, #212]	; (8000b90 <main+0x4fc>)
 8000abc:	4835      	ldr	r0, [pc, #212]	; (8000b94 <main+0x500>)
 8000abe:	f004 fe54 	bl	800576a <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <main+0x504>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <main+0x43e>
 8000aca:	2112      	movs	r1, #18
 8000acc:	4833      	ldr	r0, [pc, #204]	; (8000b9c <main+0x508>)
 8000ace:	f000 fd77 	bl	80015c0 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <main+0x50c>)
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <main+0x50c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <main+0x50c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <main+0x50c>)
 8000ae6:	22c0      	movs	r2, #192	; 0xc0
 8000ae8:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0x50c>)
 8000aec:	f00d fa8a 	bl	800e004 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <main+0x50c>)
 8000af4:	f00d fb00 	bl	800e0f8 <eth_socket_init>

   SPI_READ_EN=1;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x510>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <main+0x50c>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <main+0x50c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <main+0x50c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <main+0x50c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <main+0x4f8>)
 8000b18:	f001 fc6c 	bl	80023f4 <ESP8266_HW_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <main+0x514>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <main+0x4ec>)
 8000b2a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04a      	beq.n	8000bc8 <main+0x534>
 8000b32:	2113      	movs	r1, #19
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <main+0x518>)
 8000b36:	f000 fd43 	bl	80015c0 <ITM0_Write>
 8000b3a:	e045      	b.n	8000bc8 <main+0x534>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b3c:	f001 fc32 	bl	80023a4 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <main+0x4f8>)
 8000b42:	f001 fc57 	bl	80023f4 <ESP8266_HW_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d131      	bne.n	8000bb0 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <main+0x514>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <main+0x4ec>)
 8000b54:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d035      	beq.n	8000bc8 <main+0x534>
 8000b5c:	2113      	movs	r1, #19
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <main+0x518>)
 8000b60:	f000 fd2e 	bl	80015c0 <ITM0_Write>
 8000b64:	e030      	b.n	8000bc8 <main+0x534>
 8000b66:	bf00      	nop
 8000b68:	200018a4 	.word	0x200018a4
 8000b6c:	20001df0 	.word	0x20001df0
 8000b70:	20000084 	.word	0x20000084
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	080102e4 	.word	0x080102e4
 8000b80:	20000b58 	.word	0x20000b58
 8000b84:	080102f4 	.word	0x080102f4
 8000b88:	20003e0c 	.word	0x20003e0c
 8000b8c:	2000027c 	.word	0x2000027c
 8000b90:	20003e10 	.word	0x20003e10
 8000b94:	200002c0 	.word	0x200002c0
 8000b98:	2000273c 	.word	0x2000273c
 8000b9c:	08010308 	.word	0x08010308
 8000ba0:	20002744 	.word	0x20002744
 8000ba4:	20003804 	.word	0x20003804
 8000ba8:	200037f7 	.word	0x200037f7
 8000bac:	0801031c 	.word	0x0801031c
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb0:	4baa      	ldr	r3, [pc, #680]	; (8000e5c <main+0x7c8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb6:	4baa      	ldr	r3, [pc, #680]	; (8000e60 <main+0x7cc>)
 8000bb8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <main+0x534>
 8000bc0:	2115      	movs	r1, #21
 8000bc2:	48a8      	ldr	r0, [pc, #672]	; (8000e64 <main+0x7d0>)
 8000bc4:	f000 fcfc 	bl	80015c0 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f002 f842 	bl	8002c54 <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 8000bd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bd4:	48a4      	ldr	r0, [pc, #656]	; (8000e68 <main+0x7d4>)
 8000bd6:	f00b f8a3 	bl	800bd20 <LoRa_set_sndTIMER>





	  	  if (ESP_HW_Init==1)
 8000bda:	4ba0      	ldr	r3, [pc, #640]	; (8000e5c <main+0x7c8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 80cd 	bne.w	8000d7e <main+0x6ea>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000be4:	4ba1      	ldr	r3, [pc, #644]	; (8000e6c <main+0x7d8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	f040 80c8 	bne.w	8000d7e <main+0x6ea>
 8000bee:	4b9c      	ldr	r3, [pc, #624]	; (8000e60 <main+0x7cc>)
 8000bf0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 80c2 	bne.w	8000d7e <main+0x6ea>
 8000bfa:	4b99      	ldr	r3, [pc, #612]	; (8000e60 <main+0x7cc>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c00:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c04:	f340 80bb 	ble.w	8000d7e <main+0x6ea>
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <main+0x7dc>)
 8000c0a:	7c9b      	ldrb	r3, [r3, #18]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 80b6 	beq.w	8000d7e <main+0x6ea>
	  			{	ETH.S0_data_available=0;
 8000c12:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <main+0x7dc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c18:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <main+0x7e0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c1e:	4b93      	ldr	r3, [pc, #588]	; (8000e6c <main+0x7d8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c24:	2100      	movs	r1, #0
 8000c26:	4894      	ldr	r0, [pc, #592]	; (8000e78 <main+0x7e4>)
 8000c28:	f00b fdef 	bl	800c80a <ModBUS_F03_Read>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4698      	mov	r8, r3
 8000c30:	2101      	movs	r1, #1
 8000c32:	4891      	ldr	r0, [pc, #580]	; (8000e78 <main+0x7e4>)
 8000c34:	f00b fde9 	bl	800c80a <ModBUS_F03_Read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	488e      	ldr	r0, [pc, #568]	; (8000e78 <main+0x7e4>)
 8000c40:	f00b fde3 	bl	800c80a <ModBUS_F03_Read>
 8000c44:	4603      	mov	r3, r0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	2103      	movs	r1, #3
 8000c4a:	488b      	ldr	r0, [pc, #556]	; (8000e78 <main+0x7e4>)
 8000c4c:	f00b fddd 	bl	800c80a <ModBUS_F03_Read>
 8000c50:	4603      	mov	r3, r0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
 8000c54:	2104      	movs	r1, #4
 8000c56:	4888      	ldr	r0, [pc, #544]	; (8000e78 <main+0x7e4>)
 8000c58:	f00b fdd7 	bl	800c80a <ModBUS_F03_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	623b      	str	r3, [r7, #32]
 8000c60:	2105      	movs	r1, #5
 8000c62:	4885      	ldr	r0, [pc, #532]	; (8000e78 <main+0x7e4>)
 8000c64:	f00b fdd1 	bl	800c80a <ModBUS_F03_Read>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	61fb      	str	r3, [r7, #28]
 8000c6c:	2106      	movs	r1, #6
 8000c6e:	4882      	ldr	r0, [pc, #520]	; (8000e78 <main+0x7e4>)
 8000c70:	f00b fdcb 	bl	800c80a <ModBUS_F03_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	2107      	movs	r1, #7
 8000c7a:	487f      	ldr	r0, [pc, #508]	; (8000e78 <main+0x7e4>)
 8000c7c:	f00b fdc5 	bl	800c80a <ModBUS_F03_Read>
 8000c80:	4603      	mov	r3, r0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	2108      	movs	r1, #8
 8000c86:	487c      	ldr	r0, [pc, #496]	; (8000e78 <main+0x7e4>)
 8000c88:	f00b fdbf 	bl	800c80a <ModBUS_F03_Read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	2109      	movs	r1, #9
 8000c92:	4879      	ldr	r0, [pc, #484]	; (8000e78 <main+0x7e4>)
 8000c94:	f00b fdb9 	bl	800c80a <ModBUS_F03_Read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	210a      	movs	r1, #10
 8000c9e:	4876      	ldr	r0, [pc, #472]	; (8000e78 <main+0x7e4>)
 8000ca0:	f00b fdb3 	bl	800c80a <ModBUS_F03_Read>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	210b      	movs	r1, #11
 8000caa:	4873      	ldr	r0, [pc, #460]	; (8000e78 <main+0x7e4>)
 8000cac:	f00b fdad 	bl	800c80a <ModBUS_F03_Read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	4870      	ldr	r0, [pc, #448]	; (8000e78 <main+0x7e4>)
 8000cb8:	f00b fda7 	bl	800c80a <ModBUS_F03_Read>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461e      	mov	r6, r3
 8000cc0:	210d      	movs	r1, #13
 8000cc2:	486d      	ldr	r0, [pc, #436]	; (8000e78 <main+0x7e4>)
 8000cc4:	f00b fda1 	bl	800c80a <ModBUS_F03_Read>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461d      	mov	r5, r3
 8000ccc:	210e      	movs	r1, #14
 8000cce:	486a      	ldr	r0, [pc, #424]	; (8000e78 <main+0x7e4>)
 8000cd0:	f00b fd9b 	bl	800c80a <ModBUS_F03_Read>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461c      	mov	r4, r3
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4867      	ldr	r0, [pc, #412]	; (8000e78 <main+0x7e4>)
 8000cdc:	f00b fd95 	bl	800c80a <ModBUS_F03_Read>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce8:	9312      	str	r3, [sp, #72]	; 0x48
 8000cea:	4b64      	ldr	r3, [pc, #400]	; (8000e7c <main+0x7e8>)
 8000cec:	9311      	str	r3, [sp, #68]	; 0x44
 8000cee:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <main+0x7ec>)
 8000cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cf6:	920e      	str	r2, [sp, #56]	; 0x38
 8000cf8:	940d      	str	r4, [sp, #52]	; 0x34
 8000cfa:	950c      	str	r5, [sp, #48]	; 0x30
 8000cfc:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	920a      	str	r2, [sp, #40]	; 0x28
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	9209      	str	r2, [sp, #36]	; 0x24
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	9208      	str	r2, [sp, #32]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	9207      	str	r2, [sp, #28]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	9206      	str	r2, [sp, #24]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	9205      	str	r2, [sp, #20]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	9204      	str	r2, [sp, #16]
 8000d1a:	6a3a      	ldr	r2, [r7, #32]
 8000d1c:	9203      	str	r2, [sp, #12]
 8000d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d20:	9202      	str	r2, [sp, #8]
 8000d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	4a55      	ldr	r2, [pc, #340]	; (8000e84 <main+0x7f0>)
 8000d2e:	4956      	ldr	r1, [pc, #344]	; (8000e88 <main+0x7f4>)
 8000d30:	4856      	ldr	r0, [pc, #344]	; (8000e8c <main+0x7f8>)
 8000d32:	f00a fbbd 	bl	800b4b0 <httpPOST>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d020      	beq.n	8000d7e <main+0x6ea>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d3c:	4850      	ldr	r0, [pc, #320]	; (8000e80 <main+0x7ec>)
 8000d3e:	f7ff fa59 	bl	80001f4 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	2341      	movs	r3, #65	; 0x41
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	494c      	ldr	r1, [pc, #304]	; (8000e80 <main+0x7ec>)
 8000d4e:	4850      	ldr	r0, [pc, #320]	; (8000e90 <main+0x7fc>)
 8000d50:	f00d ffa2 	bl	800ec98 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d54:	484a      	ldr	r0, [pc, #296]	; (8000e80 <main+0x7ec>)
 8000d56:	f7ff fa4d 	bl	80001f4 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <main+0x7cc>)
 8000d60:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <main+0x7cc>)
 8000d66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d807      	bhi.n	8000d7e <main+0x6ea>
	  							{
	  								EnviarDatos(&wf);
 8000d6e:	483c      	ldr	r0, [pc, #240]	; (8000e60 <main+0x7cc>)
 8000d70:	f005 fd50 	bl	8006814 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d74:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <main+0x7cc>)
 8000d76:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <main+0x800>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d004      	beq.n	8000d90 <main+0x6fc>
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <main+0x804>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	f040 80ab 	bne.w	8000ee6 <main+0x852>
	  		{
	  			if(FLAG_UART1==1)
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <main+0x800>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d11c      	bne.n	8000dd2 <main+0x73e>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <main+0x808>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <main+0x80c>)
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	4940      	ldr	r1, [pc, #256]	; (8000ea4 <main+0x810>)
 8000da4:	4840      	ldr	r0, [pc, #256]	; (8000ea8 <main+0x814>)
 8000da6:	f00d ff77 	bl	800ec98 <CopiaVector>
	  					FLAG_UART1=0;
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <main+0x800>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <main+0x818>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d102      	bne.n	8000dbe <main+0x72a>
	  						{
	  							error_rxdata=0;
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <main+0x818>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x818>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d105      	bne.n	8000dd2 <main+0x73e>
	  						{
	  							error_rxdata=5;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <main+0x818>)
 8000dc8:	2205      	movs	r2, #5
 8000dca:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <main+0x818>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <main+0x804>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d102      	bne.n	8000de0 <main+0x74c>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <main+0x7c8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d17e      	bne.n	8000ee6 <main+0x852>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x808>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <main+0x7cc>)
 8000dee:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <main+0x808>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <main+0x80c>)
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4929      	ldr	r1, [pc, #164]	; (8000ea4 <main+0x810>)
 8000dfe:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <main+0x814>)
 8000e00:	f00d ff4a 	bl	800ec98 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000e04:	4816      	ldr	r0, [pc, #88]	; (8000e60 <main+0x7cc>)
 8000e06:	f005 fde5 	bl	80069d4 <AT_ESP8266_ND>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <main+0x81c>)
 8000e10:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <main+0x7cc>)
 8000e14:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d164      	bne.n	8000ee6 <main+0x852>
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <main+0x7cc>)
 8000e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e22:	2b63      	cmp	r3, #99	; 0x63
 8000e24:	d15f      	bne.n	8000ee6 <main+0x852>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <main+0x7cc>)
 8000e28:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e2c:	2341      	movs	r3, #65	; 0x41
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	4920      	ldr	r1, [pc, #128]	; (8000eb4 <main+0x820>)
 8000e34:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <main+0x824>)
 8000e36:	f00d ff2f 	bl	800ec98 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <main+0x7cc>)
 8000e3c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <main+0x828>)
 8000e42:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000e46:	481d      	ldr	r0, [pc, #116]	; (8000ebc <main+0x828>)
 8000e48:	f00b fd64 	bl	800c914 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <main+0x828>)
 8000e4e:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000e52:	2341      	movs	r3, #65	; 0x41
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	4919      	ldr	r1, [pc, #100]	; (8000ec0 <main+0x82c>)
 8000e5a:	e033      	b.n	8000ec4 <main+0x830>
 8000e5c:	200037f7 	.word	0x200037f7
 8000e60:	20000b58 	.word	0x20000b58
 8000e64:	08010330 	.word	0x08010330
 8000e68:	20000350 	.word	0x20000350
 8000e6c:	2000273d 	.word	0x2000273d
 8000e70:	20002744 	.word	0x20002744
 8000e74:	20002740 	.word	0x20002740
 8000e78:	200018a4 	.word	0x200018a4
 8000e7c:	2000253c 	.word	0x2000253c
 8000e80:	2000233c 	.word	0x2000233c
 8000e84:	2000001c 	.word	0x2000001c
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000dec 	.word	0x20000dec
 8000e94:	200037fc 	.word	0x200037fc
 8000e98:	200037fb 	.word	0x200037fb
 8000e9c:	20003e18 	.word	0x20003e18
 8000ea0:	20003e08 	.word	0x20003e08
 8000ea4:	20003c08 	.word	0x20003c08
 8000ea8:	200011ec 	.word	0x200011ec
 8000eac:	200037ff 	.word	0x200037ff
 8000eb0:	200037fe 	.word	0x200037fe
 8000eb4:	20000bec 	.word	0x20000bec
 8000eb8:	20001dfd 	.word	0x20001dfd
 8000ebc:	20001df0 	.word	0x20001df0
 8000ec0:	20001f84 	.word	0x20001f84
 8000ec4:	485e      	ldr	r0, [pc, #376]	; (8001040 <main+0x9ac>)
 8000ec6:	f00d fee7 	bl	800ec98 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000eca:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <main+0x9b0>)
 8000ecc:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000ed0:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <main+0x9b4>)
 8000ed2:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <main+0x9b4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <main+0x9b4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <main+0x9b8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d004      	beq.n	8000ef8 <main+0x864>
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <main+0x9bc>)
 8000ef0:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d170      	bne.n	8000fda <main+0x946>
	  		{
	  			if(FLAG_UART2==1)
 8000ef8:	4b54      	ldr	r3, [pc, #336]	; (800104c <main+0x9b8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <main+0x878>
	  				{
	  				FLAG_UART2=0;
 8000f00:	4b52      	ldr	r3, [pc, #328]	; (800104c <main+0x9b8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000f06:	4852      	ldr	r0, [pc, #328]	; (8001050 <main+0x9bc>)
 8000f08:	f00a ff26 	bl	800bd58 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000f0c:	4b50      	ldr	r3, [pc, #320]	; (8001050 <main+0x9bc>)
 8000f0e:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d161      	bne.n	8000fda <main+0x946>
	  				{
	  					lr.tmr_dly_ON=0;
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <main+0x9bc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000f1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f22:	484b      	ldr	r0, [pc, #300]	; (8001050 <main+0x9bc>)
 8000f24:	f00a fefc 	bl	800bd20 <LoRa_set_sndTIMER>
						lr.dest_address[0]='\0';
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <main+0x9bc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <main+0x9bc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

			  			/*strncat(lr.dest_address,"1",1);
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");*/
		  				lr.estado=_SENT;
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <main+0x9bc>)
 8000f38:	2214      	movs	r2, #20
 8000f3a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000f3e:	4845      	ldr	r0, [pc, #276]	; (8001054 <main+0x9c0>)
 8000f40:	f7ff f958 	bl	80001f4 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b42      	ldr	r3, [pc, #264]	; (8001054 <main+0x9c0>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4942      	ldr	r1, [pc, #264]	; (8001058 <main+0x9c4>)
 8000f4e:	461a      	mov	r2, r3
 8000f50:	460b      	mov	r3, r1
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
		  				while(n<16)//while(n<11)
 8000f5a:	e02b      	b.n	8000fb4 <main+0x920>
		  					{
			  					data[0]='\0';
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  					itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
 8000f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	483c      	ldr	r0, [pc, #240]	; (800105c <main+0x9c8>)
 8000f6a:	f00b fc4e 	bl	800c80a <ModBUS_F03_Read>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f76:	220a      	movs	r2, #10
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f00d fef4 	bl	800ed66 <itoa>
								strncat(lr.txbuff,data,strlen(data));
 8000f7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f936 	bl	80001f4 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4833      	ldr	r0, [pc, #204]	; (8001060 <main+0x9cc>)
 8000f92:	f00e f8d4 	bl	800f13e <strncat>
								strncat(lr.txbuff,";",1);
 8000f96:	4832      	ldr	r0, [pc, #200]	; (8001060 <main+0x9cc>)
 8000f98:	f7ff f92c 	bl	80001f4 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <main+0x9cc>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	492f      	ldr	r1, [pc, #188]	; (8001064 <main+0x9d0>)
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	8013      	strh	r3, [r2, #0]
								n++;
 8000fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  				while(n<16)//while(n<11)
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	ddd0      	ble.n	8000f5c <main+0x8c8>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000fba:	4829      	ldr	r0, [pc, #164]	; (8001060 <main+0x9cc>)
 8000fbc:	f7ff f91a 	bl	80001f4 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <main+0x9bc>)
 8000fc6:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000fca:	4927      	ldr	r1, [pc, #156]	; (8001068 <main+0x9d4>)
 8000fcc:	4820      	ldr	r0, [pc, #128]	; (8001050 <main+0x9bc>)
 8000fce:	f00a fdf9 	bl	800bbc4 <LoRa_Send>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <main+0x9d8>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <main+0x9dc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d108      	bne.n	8000ff4 <main+0x960>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4923      	ldr	r1, [pc, #140]	; (8001074 <main+0x9e0>)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <main+0x9b4>)
 8000fe8:	f008 fdf4 	bl	8009bd4 <WiFi_Conn_ND>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <main+0x9e4>)
 8000ff2:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <main+0x9e8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f47f adee 	bne.w	8000bda <main+0x546>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <main+0x9ec>)
 8001006:	f002 fa87 	bl	8003518 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800100a:	2115      	movs	r1, #21
 800100c:	481d      	ldr	r0, [pc, #116]	; (8001084 <main+0x9f0>)
 800100e:	f000 fad7 	bl	80015c0 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8001012:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001016:	f001 fe1d 	bl	8002c54 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <main+0x9ec>)
 8001022:	f002 fa79 	bl	8003518 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8001026:	2118      	movs	r1, #24
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <main+0x9f4>)
 800102a:	f000 fac9 	bl	80015c0 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 800102e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001032:	f001 fe0f 	bl	8002c54 <HAL_Delay>
	  				esp_restart=0;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <main+0x9e8>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 800103c:	e5cd      	b.n	8000bda <main+0x546>
 800103e:	bf00      	nop
 8001040:	20000dec 	.word	0x20000dec
 8001044:	20001df0 	.word	0x20001df0
 8001048:	20000b58 	.word	0x20000b58
 800104c:	200037fd 	.word	0x200037fd
 8001050:	20000350 	.word	0x20000350
 8001054:	20000366 	.word	0x20000366
 8001058:	08010348 	.word	0x08010348
 800105c:	200018a4 	.word	0x200018a4
 8001060:	2000082c 	.word	0x2000082c
 8001064:	0801034c 	.word	0x0801034c
 8001068:	200002c0 	.word	0x200002c0
 800106c:	20000b54 	.word	0x20000b54
 8001070:	200037f7 	.word	0x200037f7
 8001074:	2000027c 	.word	0x2000027c
 8001078:	20003801 	.word	0x20003801
 800107c:	20003800 	.word	0x20003800
 8001080:	40020000 	.word	0x40020000
 8001084:	08010350 	.word	0x08010350
 8001088:	08010368 	.word	0x08010368

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00e f847 	bl	800f12e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SystemClock_Config+0xc8>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <SystemClock_Config+0xc8>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <SystemClock_Config+0xc8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <SystemClock_Config+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <SystemClock_Config+0xcc>)
 80010d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <SystemClock_Config+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010fc:	230c      	movs	r3, #12
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fa35 	bl	8003580 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800111c:	f001 fa14 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2103      	movs	r1, #3
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fc97 	bl	8003a70 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001148:	f001 f9fe 	bl	8002548 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <MX_SPI1_Init+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001190:	2210      	movs	r2, #16
 8001192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_SPI1_Init+0x64>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_SPI1_Init+0x64>)
 80011ae:	f002 fe3f 	bl	8003e30 <HAL_SPI_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b8:	f001 f9c6 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000194 	.word	0x20000194
 80011c4:	40013000 	.word	0x40013000

080011c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_TIM2_Init+0xf0>)
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_TIM2_Init+0xf0>)
 8001202:	2264      	movs	r2, #100	; 0x64
 8001204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_TIM2_Init+0xf0>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800120e:	2264      	movs	r2, #100	; 0x64
 8001210:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_TIM2_Init+0xf0>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121e:	4826      	ldr	r0, [pc, #152]	; (80012b8 <MX_TIM2_Init+0xf0>)
 8001220:	f003 f8fc 	bl	800441c <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800122a:	f001 f98d 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001238:	4619      	mov	r1, r3
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800123c:	f003 fd04 	bl	8004c48 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001246:	f001 f97f 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800124a:	481b      	ldr	r0, [pc, #108]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800124c:	f003 f935 	bl	80044ba <HAL_TIM_OC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001256:	f001 f977 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800125a:	2108      	movs	r1, #8
 800125c:	4816      	ldr	r0, [pc, #88]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800125e:	f003 fb35 	bl	80048cc <HAL_TIM_OnePulse_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001268:	f001 f96e 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4619      	mov	r1, r3
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_TIM2_Init+0xf0>)
 800127c:	f004 f8a0 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001286:	f001 f95f 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800128a:	2320      	movs	r3, #32
 800128c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM2_Init+0xf0>)
 80012a2:	f003 fc75 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80012ac:	f001 f94c 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001ec 	.word	0x200001ec

080012bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_TIM3_Init+0xf0>)
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <MX_TIM3_Init+0xf4>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_TIM3_Init+0xf0>)
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_TIM3_Init+0xf0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_TIM3_Init+0xf0>)
 8001300:	2296      	movs	r2, #150	; 0x96
 8001302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_TIM3_Init+0xf0>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_TIM3_Init+0xf0>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <MX_TIM3_Init+0xf0>)
 8001312:	f003 f883 	bl	800441c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800131c:	f001 f914 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	4619      	mov	r1, r3
 800132c:	481f      	ldr	r0, [pc, #124]	; (80013ac <MX_TIM3_Init+0xf0>)
 800132e:	f003 fc8b 	bl	8004c48 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001338:	f001 f906 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800133c:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_TIM3_Init+0xf0>)
 800133e:	f003 f8bc 	bl	80044ba <HAL_TIM_OC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001348:	f001 f8fe 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800134c:	2108      	movs	r1, #8
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <MX_TIM3_Init+0xf0>)
 8001350:	f003 fabc 	bl	80048cc <HAL_TIM_OnePulse_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800135a:	f001 f8f5 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <MX_TIM3_Init+0xf0>)
 800136e:	f004 f827 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001378:	f001 f8e6 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800137c:	2320      	movs	r3, #32
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM3_Init+0xf0>)
 8001394:	f003 fbfc 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800139e:	f001 f8d3 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000234 	.word	0x20000234
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ec:	f004 f86a 	bl	80054c4 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f001 f8a7 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000027c 	.word	0x2000027c
 8001404:	40011000 	.word	0x40011000

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f004 f840 	bl	80054c4 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f001 f87d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002c0 	.word	0x200002c0
 8001458:	40004400 	.word	0x40004400

0800145c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_USART6_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART6_UART_Init+0x4c>)
 8001494:	f004 f816 	bl	80054c4 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f001 f853 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000304 	.word	0x20000304
 80014ac:	40011400 	.word	0x40011400

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_GPIO_Init+0x104>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	481e      	ldr	r0, [pc, #120]	; (80015b8 <MX_GPIO_Init+0x108>)
 800153e:	f001 ffeb 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2102      	movs	r1, #2
 8001546:	481d      	ldr	r0, [pc, #116]	; (80015bc <MX_GPIO_Init+0x10c>)
 8001548:	f001 ffe6 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <MX_GPIO_Init+0x10c>)
 8001552:	f001 ffe1 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001570:	f001 fd6a 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8001574:	f240 1301 	movw	r3, #257	; 0x101
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0x10c>)
 800158a:	f001 fd5d 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 800158e:	2312      	movs	r3, #18
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_GPIO_Init+0x10c>)
 80015a6:	f001 fd4f 	bl	8003048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020000 	.word	0x40020000

080015c0 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e009      	b.n	80015e4 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f833 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <ITM0_Write+0x10>
  }
  return len;
 80015ec:	683b      	ldr	r3, [r7, #0]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <SysTick_Handler+0x1a8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a66      	ldr	r2, [pc, #408]	; (80017a0 <SysTick_Handler+0x1a8>)
 8001606:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <SysTick_Handler+0x1ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <SysTick_Handler+0x1ac>)
 8001610:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <SysTick_Handler+0x1b0>)
 8001614:	791b      	ldrb	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <SysTick_Handler+0x2c>
 800161a:	4b64      	ldr	r3, [pc, #400]	; (80017ac <SysTick_Handler+0x1b4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <SysTick_Handler+0x1b4>)
 8001622:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <SysTick_Handler+0x1b0>)
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00c      	beq.n	8001646 <SysTick_Handler+0x4e>
 800162c:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <SysTick_Handler+0x1b0>)
 800162e:	885b      	ldrh	r3, [r3, #2]
 8001630:	461a      	mov	r2, r3
 8001632:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <SysTick_Handler+0x1b4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	da05      	bge.n	8001646 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <SysTick_Handler+0x1b0>)
 800163c:	2200      	movs	r2, #0
 800163e:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 8001640:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <SysTick_Handler+0x1b4>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001648:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 800164c:	2b01      	cmp	r3, #1
 800164e:	d116      	bne.n	800167e <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001652:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 8001656:	3301      	adds	r3, #1
 8001658:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <SysTick_Handler+0x1b8>)
 800165a:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001660:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001666:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 800166a:	429a      	cmp	r2, r3
 800166c:	dd07      	ble.n	800167e <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 800166e:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001670:	2201      	movs	r2, #1
 8001672:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <SysTick_Handler+0x1b8>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <SysTick_Handler+0x1bc>)
 8001680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001684:	f240 2261 	movw	r2, #609	; 0x261
 8001688:	4293      	cmp	r3, r2
 800168a:	d005      	beq.n	8001698 <SysTick_Handler+0xa0>
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <SysTick_Handler+0x1bc>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001692:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001696:	d109      	bne.n	80016ac <SysTick_Handler+0xb4>
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <SysTick_Handler+0x1bc>)
 800169a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d104      	bne.n	80016ac <SysTick_Handler+0xb4>
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <SysTick_Handler+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <SysTick_Handler+0x1c0>)
 80016aa:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 80016ac:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <SysTick_Handler+0x1c0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016b4:	db0c      	blt.n	80016d0 <SysTick_Handler+0xd8>
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <SysTick_Handler+0x1bc>)
 80016b8:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d007      	beq.n	80016d0 <SysTick_Handler+0xd8>
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <SysTick_Handler+0x1bc>)
 80016c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <SysTick_Handler+0xd8>
 80016ca:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <SysTick_Handler+0x1c4>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <SysTick_Handler+0x1c8>)
 80016d2:	7b9b      	ldrb	r3, [r3, #14]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10e      	bne.n	80016f6 <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <SysTick_Handler+0x1c8>)
 80016da:	899b      	ldrh	r3, [r3, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <SysTick_Handler+0x1c8>)
 80016e2:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <SysTick_Handler+0x1c8>)
 80016e6:	899b      	ldrh	r3, [r3, #12]
 80016e8:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80016ec:	d303      	bcc.n	80016f6 <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <SysTick_Handler+0x1c8>)
 80016f0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80016f4:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <SysTick_Handler+0x1a8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	f040 8420 	bne.w	8001f40 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <SysTick_Handler+0x1cc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <SysTick_Handler+0x1cc>)
 8001708:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SysTick_Handler+0x1a8>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <SysTick_Handler+0x1d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <SysTick_Handler+0x1d0>)
 8001718:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <SysTick_Handler+0x1d4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001722:	d102      	bne.n	800172a <SysTick_Handler+0x132>
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <SysTick_Handler+0x1d4>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <SysTick_Handler+0x1d8>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <SysTick_Handler+0x144>
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <SysTick_Handler+0x1d4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <SysTick_Handler+0x1d4>)
 800173a:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <SysTick_Handler+0x1d4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b64      	cmp	r3, #100	; 0x64
 8001742:	d102      	bne.n	800174a <SysTick_Handler+0x152>
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <SysTick_Handler+0x1d8>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <SysTick_Handler+0x1d8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d104      	bne.n	800175c <SysTick_Handler+0x164>
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <SysTick_Handler+0x1d4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <SysTick_Handler+0x1d4>)
 800175a:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <SysTick_Handler+0x1d4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <SysTick_Handler+0x172>
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <SysTick_Handler+0x1d8>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800176a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176e:	4819      	ldr	r0, [pc, #100]	; (80017d4 <SysTick_Handler+0x1dc>)
 8001770:	f001 feeb 	bl	800354a <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <SysTick_Handler+0x1e0>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 83d1 	beq.w	8001f20 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <SysTick_Handler+0x1e4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 83d0 	beq.w	8001f28 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <SysTick_Handler+0x1c8>)
 800178c:	f00c fd30 	bl	800e1f0 <eth_rd_SOCKET_STAT>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <SysTick_Handler+0x1c8>)
 8001796:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <SysTick_Handler+0x1c8>)
 800179a:	7b9b      	ldrb	r3, [r3, #14]
 800179c:	e020      	b.n	80017e0 <SysTick_Handler+0x1e8>
 800179e:	bf00      	nop
 80017a0:	20000348 	.word	0x20000348
 80017a4:	20003e20 	.word	0x20003e20
 80017a8:	200018a4 	.word	0x200018a4
 80017ac:	20003e28 	.word	0x20003e28
 80017b0:	20000350 	.word	0x20000350
 80017b4:	20000b58 	.word	0x20000b58
 80017b8:	20002740 	.word	0x20002740
 80017bc:	2000273d 	.word	0x2000273d
 80017c0:	20002744 	.word	0x20002744
 80017c4:	20003e4c 	.word	0x20003e4c
 80017c8:	2000034c 	.word	0x2000034c
 80017cc:	20003e24 	.word	0x20003e24
 80017d0:	20003802 	.word	0x20003802
 80017d4:	40020800 	.word	0x40020800
 80017d8:	200037f4 	.word	0x200037f4
 80017dc:	20003804 	.word	0x20003804
 80017e0:	2b5f      	cmp	r3, #95	; 0x5f
 80017e2:	f200 83a6 	bhi.w	8001f32 <SysTick_Handler+0x93a>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <SysTick_Handler+0x1f4>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	0800196d 	.word	0x0800196d
 80017f0:	08001f33 	.word	0x08001f33
 80017f4:	08001f33 	.word	0x08001f33
 80017f8:	08001f33 	.word	0x08001f33
 80017fc:	08001f33 	.word	0x08001f33
 8001800:	08001f33 	.word	0x08001f33
 8001804:	08001f33 	.word	0x08001f33
 8001808:	08001f33 	.word	0x08001f33
 800180c:	08001f33 	.word	0x08001f33
 8001810:	08001f33 	.word	0x08001f33
 8001814:	08001f33 	.word	0x08001f33
 8001818:	08001f33 	.word	0x08001f33
 800181c:	08001f33 	.word	0x08001f33
 8001820:	08001f33 	.word	0x08001f33
 8001824:	08001f33 	.word	0x08001f33
 8001828:	08001f33 	.word	0x08001f33
 800182c:	08001f33 	.word	0x08001f33
 8001830:	08001f33 	.word	0x08001f33
 8001834:	08001f33 	.word	0x08001f33
 8001838:	080019a5 	.word	0x080019a5
 800183c:	080019f7 	.word	0x080019f7
 8001840:	08001a0f 	.word	0x08001a0f
 8001844:	08001a27 	.word	0x08001a27
 8001848:	08001a3f 	.word	0x08001a3f
 800184c:	08001d9b 	.word	0x08001d9b
 8001850:	08001f33 	.word	0x08001f33
 8001854:	08001db3 	.word	0x08001db3
 8001858:	08001dcb 	.word	0x08001dcb
 800185c:	08001e09 	.word	0x08001e09
 8001860:	08001e47 	.word	0x08001e47
 8001864:	08001f33 	.word	0x08001f33
 8001868:	08001f33 	.word	0x08001f33
 800186c:	08001f33 	.word	0x08001f33
 8001870:	08001f33 	.word	0x08001f33
 8001874:	08001e5f 	.word	0x08001e5f
 8001878:	08001f33 	.word	0x08001f33
 800187c:	08001f33 	.word	0x08001f33
 8001880:	08001f33 	.word	0x08001f33
 8001884:	08001f33 	.word	0x08001f33
 8001888:	08001f33 	.word	0x08001f33
 800188c:	08001f33 	.word	0x08001f33
 8001890:	08001f33 	.word	0x08001f33
 8001894:	08001f33 	.word	0x08001f33
 8001898:	08001f33 	.word	0x08001f33
 800189c:	08001f33 	.word	0x08001f33
 80018a0:	08001f33 	.word	0x08001f33
 80018a4:	08001f33 	.word	0x08001f33
 80018a8:	08001f33 	.word	0x08001f33
 80018ac:	08001f33 	.word	0x08001f33
 80018b0:	08001f33 	.word	0x08001f33
 80018b4:	08001ed9 	.word	0x08001ed9
 80018b8:	08001f33 	.word	0x08001f33
 80018bc:	08001f33 	.word	0x08001f33
 80018c0:	08001f33 	.word	0x08001f33
 80018c4:	08001f33 	.word	0x08001f33
 80018c8:	08001f33 	.word	0x08001f33
 80018cc:	08001f33 	.word	0x08001f33
 80018d0:	08001f33 	.word	0x08001f33
 80018d4:	08001f33 	.word	0x08001f33
 80018d8:	08001f33 	.word	0x08001f33
 80018dc:	08001f33 	.word	0x08001f33
 80018e0:	08001f33 	.word	0x08001f33
 80018e4:	08001f33 	.word	0x08001f33
 80018e8:	08001f33 	.word	0x08001f33
 80018ec:	08001f33 	.word	0x08001f33
 80018f0:	08001f33 	.word	0x08001f33
 80018f4:	08001ef1 	.word	0x08001ef1
 80018f8:	08001f33 	.word	0x08001f33
 80018fc:	08001f33 	.word	0x08001f33
 8001900:	08001f33 	.word	0x08001f33
 8001904:	08001f33 	.word	0x08001f33
 8001908:	08001f33 	.word	0x08001f33
 800190c:	08001f33 	.word	0x08001f33
 8001910:	08001f33 	.word	0x08001f33
 8001914:	08001f33 	.word	0x08001f33
 8001918:	08001f33 	.word	0x08001f33
 800191c:	08001f33 	.word	0x08001f33
 8001920:	08001f33 	.word	0x08001f33
 8001924:	08001f33 	.word	0x08001f33
 8001928:	08001f33 	.word	0x08001f33
 800192c:	08001f33 	.word	0x08001f33
 8001930:	08001f33 	.word	0x08001f33
 8001934:	08001f33 	.word	0x08001f33
 8001938:	08001f33 	.word	0x08001f33
 800193c:	08001f33 	.word	0x08001f33
 8001940:	08001f33 	.word	0x08001f33
 8001944:	08001f33 	.word	0x08001f33
 8001948:	08001f33 	.word	0x08001f33
 800194c:	08001f33 	.word	0x08001f33
 8001950:	08001f33 	.word	0x08001f33
 8001954:	08001f33 	.word	0x08001f33
 8001958:	08001f33 	.word	0x08001f33
 800195c:	08001f33 	.word	0x08001f33
 8001960:	08001f33 	.word	0x08001f33
 8001964:	08001f33 	.word	0x08001f33
 8001968:	08001f09 	.word	0x08001f09
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 800196c:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <SysTick_Handler+0x580>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <SysTick_Handler+0x384>
 8001974:	2113      	movs	r1, #19
 8001976:	4881      	ldr	r0, [pc, #516]	; (8001b7c <SysTick_Handler+0x584>)
 8001978:	f7ff fe22 	bl	80015c0 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 800197c:	2201      	movs	r2, #1
 800197e:	2100      	movs	r1, #0
 8001980:	487f      	ldr	r0, [pc, #508]	; (8001b80 <SysTick_Handler+0x588>)
 8001982:	f00c fb03 	bl	800df8c <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001986:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <SysTick_Handler+0x588>)
 8001988:	899b      	ldrh	r3, [r3, #12]
 800198a:	f241 3287 	movw	r2, #4999	; 0x1387
 800198e:	4293      	cmp	r3, r2
 8001990:	f240 82cc 	bls.w	8001f2c <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001994:	487a      	ldr	r0, [pc, #488]	; (8001b80 <SysTick_Handler+0x588>)
 8001996:	f00c fb35 	bl	800e004 <eth_init>

						 eth_socket_init(&ETH,0);
 800199a:	2100      	movs	r1, #0
 800199c:	4878      	ldr	r0, [pc, #480]	; (8001b80 <SysTick_Handler+0x588>)
 800199e:	f00c fbab 	bl	800e0f8 <eth_socket_init>
					 }

				 }
			 break;
 80019a2:	e2c3      	b.n	8001f2c <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 80019a4:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <SysTick_Handler+0x588>)
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d110      	bne.n	80019d4 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80019b2:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <SysTick_Handler+0x580>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <SysTick_Handler+0x3ca>
 80019ba:	2111      	movs	r1, #17
 80019bc:	4871      	ldr	r0, [pc, #452]	; (8001b84 <SysTick_Handler+0x58c>)
 80019be:	f7ff fdff 	bl	80015c0 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 80019c2:	2202      	movs	r2, #2
 80019c4:	2100      	movs	r1, #0
 80019c6:	486e      	ldr	r0, [pc, #440]	; (8001b80 <SysTick_Handler+0x588>)
 80019c8:	f00c fae0 	bl	800df8c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80019cc:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <SysTick_Handler+0x588>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80019d2:	e2ae      	b.n	8001f32 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80019d4:	2204      	movs	r2, #4
 80019d6:	2100      	movs	r1, #0
 80019d8:	4869      	ldr	r0, [pc, #420]	; (8001b80 <SysTick_Handler+0x588>)
 80019da:	f00c fad7 	bl	800df8c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80019de:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <SysTick_Handler+0x580>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <SysTick_Handler+0x3f6>
 80019e6:	2115      	movs	r1, #21
 80019e8:	4867      	ldr	r0, [pc, #412]	; (8001b88 <SysTick_Handler+0x590>)
 80019ea:	f7ff fde9 	bl	80015c0 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80019ee:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <SysTick_Handler+0x588>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	819a      	strh	r2, [r3, #12]
			 break;
 80019f4:	e29d      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80019f6:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <SysTick_Handler+0x580>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <SysTick_Handler+0x40e>
 80019fe:	2113      	movs	r1, #19
 8001a00:	4862      	ldr	r0, [pc, #392]	; (8001b8c <SysTick_Handler+0x594>)
 8001a02:	f7ff fddd 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a06:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <SysTick_Handler+0x588>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a0c:	e291      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <SysTick_Handler+0x580>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <SysTick_Handler+0x426>
 8001a16:	2114      	movs	r1, #20
 8001a18:	485d      	ldr	r0, [pc, #372]	; (8001b90 <SysTick_Handler+0x598>)
 8001a1a:	f7ff fdd1 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a1e:	4b58      	ldr	r3, [pc, #352]	; (8001b80 <SysTick_Handler+0x588>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a24:	e285      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001a26:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <SysTick_Handler+0x580>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <SysTick_Handler+0x43e>
 8001a2e:	2114      	movs	r1, #20
 8001a30:	4858      	ldr	r0, [pc, #352]	; (8001b94 <SysTick_Handler+0x59c>)
 8001a32:	f7ff fdc5 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a36:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <SysTick_Handler+0x588>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a3c:	e279      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <SysTick_Handler+0x580>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <SysTick_Handler+0x456>
 8001a46:	2118      	movs	r1, #24
 8001a48:	4853      	ldr	r0, [pc, #332]	; (8001b98 <SysTick_Handler+0x5a0>)
 8001a4a:	f7ff fdb9 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <SysTick_Handler+0x588>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001a54:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <SysTick_Handler+0x588>)
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	f040 80b0 	bne.w	8001bc4 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a64:	2302      	movs	r3, #2
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <SysTick_Handler+0x5a4>)
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	2226      	movs	r2, #38	; 0x26
 8001a70:	2104      	movs	r1, #4
 8001a72:	4843      	ldr	r0, [pc, #268]	; (8001b80 <SysTick_Handler+0x588>)
 8001a74:	f00c f95f 	bl	800dd36 <SPI_ETH_REG>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001a7e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8253 	beq.w	8001f30 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <SysTick_Handler+0x5ac>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	483b      	ldr	r0, [pc, #236]	; (8001b80 <SysTick_Handler+0x588>)
 8001a94:	f00c fbe6 	bl	800e264 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <SysTick_Handler+0x5ac>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001aa2:	4837      	ldr	r0, [pc, #220]	; (8001b80 <SysTick_Handler+0x588>)
 8001aa4:	f00c f9bf 	bl	800de26 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4834      	ldr	r0, [pc, #208]	; (8001b80 <SysTick_Handler+0x588>)
 8001aae:	f00c fa6d 	bl	800df8c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ab2:	bf00      	nop
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4832      	ldr	r0, [pc, #200]	; (8001b80 <SysTick_Handler+0x588>)
 8001ab8:	f00c fbb7 	bl	800e22a <eth_rd_SOCKET_CMD>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f8      	bne.n	8001ab4 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	4936      	ldr	r1, [pc, #216]	; (8001ba8 <SysTick_Handler+0x5b0>)
 8001ad0:	4836      	ldr	r0, [pc, #216]	; (8001bac <SysTick_Handler+0x5b4>)
 8001ad2:	f00d f8e1 	bl	800ec98 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <SysTick_Handler+0x5b8>)
 8001ade:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <SysTick_Handler+0x5a8>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <SysTick_Handler+0x4f8>
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <SysTick_Handler+0x588>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <SysTick_Handler+0x5b8>)
 8001af2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001af6:	4619      	mov	r1, r3
 8001af8:	482c      	ldr	r0, [pc, #176]	; (8001bac <SysTick_Handler+0x5b4>)
 8001afa:	f00a fe09 	bl	800c710 <ModBUS_Check>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <SysTick_Handler+0x5b8>)
 8001b06:	f00a ff05 	bl	800c914 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <SysTick_Handler+0x5b8>)
 8001b0c:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <SysTick_Handler+0x5bc>)
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <SysTick_Handler+0x5b0>)
 8001b1a:	f00d f8bd 	bl	800ec98 <CopiaVector>
 8001b1e:	e007      	b.n	8001b30 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <SysTick_Handler+0x580>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <SysTick_Handler+0x538>
 8001b28:	2111      	movs	r1, #17
 8001b2a:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <SysTick_Handler+0x5c0>)
 8001b2c:	f7ff fd48 	bl	80015c0 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <SysTick_Handler+0x5b8>)
 8001b32:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <SysTick_Handler+0x5c4>)
 8001b3a:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <SysTick_Handler+0x5c4>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <SysTick_Handler+0x5c8>)
 8001b42:	2100      	movs	r1, #0
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <SysTick_Handler+0x588>)
 8001b46:	f00c fc5d 	bl	800e404 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <SysTick_Handler+0x5c8>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f240 4124 	movw	r1, #1060	; 0x424
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <SysTick_Handler+0x588>)
 8001b56:	f00c f966 	bl	800de26 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <SysTick_Handler+0x588>)
 8001b60:	f00c fa14 	bl	800df8c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b64:	bf00      	nop
 8001b66:	2100      	movs	r1, #0
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <SysTick_Handler+0x588>)
 8001b6a:	f00c fb5e 	bl	800e22a <eth_rd_SOCKET_CMD>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f8      	bne.n	8001b66 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001b74:	e1dc      	b.n	8001f30 <SysTick_Handler+0x938>
 8001b76:	bf00      	nop
 8001b78:	2000273c 	.word	0x2000273c
 8001b7c:	08010384 	.word	0x08010384
 8001b80:	20002744 	.word	0x20002744
 8001b84:	08010398 	.word	0x08010398
 8001b88:	080103ac 	.word	0x080103ac
 8001b8c:	080103c4 	.word	0x080103c4
 8001b90:	080103d8 	.word	0x080103d8
 8001b94:	080103f0 	.word	0x080103f0
 8001b98:	08010408 	.word	0x08010408
 8001b9c:	200037b4 	.word	0x200037b4
 8001ba0:	200037ac 	.word	0x200037ac
 8001ba4:	200037b0 	.word	0x200037b0
 8001ba8:	20002760 	.word	0x20002760
 8001bac:	200018b1 	.word	0x200018b1
 8001bb0:	200018a4 	.word	0x200018a4
 8001bb4:	20001a38 	.word	0x20001a38
 8001bb8:	08010424 	.word	0x08010424
 8001bbc:	200037b2 	.word	0x200037b2
 8001bc0:	200037ae 	.word	0x200037ae
						if (mb_eth._w_answer==0)
 8001bc4:	4bac      	ldr	r3, [pc, #688]	; (8001e78 <SysTick_Handler+0x880>)
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d167      	bne.n	8001c9c <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001bcc:	4bab      	ldr	r3, [pc, #684]	; (8001e7c <SysTick_Handler+0x884>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001bd2:	4baa      	ldr	r3, [pc, #680]	; (8001e7c <SysTick_Handler+0x884>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001bd8:	4ba8      	ldr	r3, [pc, #672]	; (8001e7c <SysTick_Handler+0x884>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001bde:	4ba7      	ldr	r3, [pc, #668]	; (8001e7c <SysTick_Handler+0x884>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001be4:	4ba5      	ldr	r3, [pc, #660]	; (8001e7c <SysTick_Handler+0x884>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001bec:	4ba3      	ldr	r3, [pc, #652]	; (8001e7c <SysTick_Handler+0x884>)
 8001bee:	2206      	movs	r2, #6
 8001bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001bf4:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <SysTick_Handler+0x884>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001bfc:	4b9f      	ldr	r3, [pc, #636]	; (8001e7c <SysTick_Handler+0x884>)
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001c04:	4b9d      	ldr	r3, [pc, #628]	; (8001e7c <SysTick_Handler+0x884>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001c0c:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <SysTick_Handler+0x884>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001c14:	4b99      	ldr	r3, [pc, #612]	; (8001e7c <SysTick_Handler+0x884>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001c1c:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <SysTick_Handler+0x884>)
 8001c1e:	220a      	movs	r2, #10
 8001c20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001c24:	4b96      	ldr	r3, [pc, #600]	; (8001e80 <SysTick_Handler+0x888>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4892      	ldr	r0, [pc, #584]	; (8001e78 <SysTick_Handler+0x880>)
 8001c30:	f00a fe19 	bl	800c866 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4991      	ldr	r1, [pc, #580]	; (8001e84 <SysTick_Handler+0x88c>)
 8001c3e:	4892      	ldr	r0, [pc, #584]	; (8001e88 <SysTick_Handler+0x890>)
 8001c40:	f00d f82a 	bl	800ec98 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <SysTick_Handler+0x888>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4a90      	ldr	r2, [pc, #576]	; (8001e8c <SysTick_Handler+0x894>)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	488b      	ldr	r0, [pc, #556]	; (8001e7c <SysTick_Handler+0x884>)
 8001c4e:	f00c fbd9 	bl	800e404 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <SysTick_Handler+0x894>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f240 4124 	movw	r1, #1060	; 0x424
 8001c5c:	4887      	ldr	r0, [pc, #540]	; (8001e7c <SysTick_Handler+0x884>)
 8001c5e:	f00c f8e2 	bl	800de26 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	4885      	ldr	r0, [pc, #532]	; (8001e7c <SysTick_Handler+0x884>)
 8001c68:	f00c f990 	bl	800df8c <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c6c:	bf00      	nop
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4882      	ldr	r0, [pc, #520]	; (8001e7c <SysTick_Handler+0x884>)
 8001c72:	f00c fada 	bl	800e22a <eth_rd_SOCKET_CMD>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f8      	bne.n	8001c6e <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001c7c:	4b7e      	ldr	r3, [pc, #504]	; (8001e78 <SysTick_Handler+0x880>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001c82:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <SysTick_Handler+0x898>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c88:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <SysTick_Handler+0x89c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 814f 	beq.w	8001f30 <SysTick_Handler+0x938>
 8001c92:	2117      	movs	r1, #23
 8001c94:	4880      	ldr	r0, [pc, #512]	; (8001e98 <SysTick_Handler+0x8a0>)
 8001c96:	f7ff fc93 	bl	80015c0 <ITM0_Write>
			 break;
 8001c9a:	e149      	b.n	8001f30 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	4b7e      	ldr	r3, [pc, #504]	; (8001e9c <SysTick_Handler+0x8a4>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	2226      	movs	r2, #38	; 0x26
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4874      	ldr	r0, [pc, #464]	; (8001e7c <SysTick_Handler+0x884>)
 8001cac:	f00c f843 	bl	800dd36 <SPI_ETH_REG>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b7a      	ldr	r3, [pc, #488]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001cb6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001cb8:	4b79      	ldr	r3, [pc, #484]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8137 	beq.w	8001f30 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001cc2:	4b77      	ldr	r3, [pc, #476]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <SysTick_Handler+0x8ac>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	486c      	ldr	r0, [pc, #432]	; (8001e7c <SysTick_Handler+0x884>)
 8001ccc:	f00c faca 	bl	800e264 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001cd0:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <SysTick_Handler+0x8ac>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001cda:	4868      	ldr	r0, [pc, #416]	; (8001e7c <SysTick_Handler+0x884>)
 8001cdc:	f00c f8a3 	bl	800de26 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4865      	ldr	r0, [pc, #404]	; (8001e7c <SysTick_Handler+0x884>)
 8001ce6:	f00c f951 	bl	800df8c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001cea:	bf00      	nop
 8001cec:	2100      	movs	r1, #0
 8001cee:	4863      	ldr	r0, [pc, #396]	; (8001e7c <SysTick_Handler+0x884>)
 8001cf0:	f00c fa9b 	bl	800e22a <eth_rd_SOCKET_CMD>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f8      	bne.n	8001cec <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001cfa:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	4960      	ldr	r1, [pc, #384]	; (8001e88 <SysTick_Handler+0x890>)
 8001d08:	4867      	ldr	r0, [pc, #412]	; (8001ea8 <SysTick_Handler+0x8b0>)
 8001d0a:	f00c ffc5 	bl	800ec98 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <SysTick_Handler+0x880>)
 8001d16:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <SysTick_Handler+0x8a8>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <SysTick_Handler+0x730>
 8001d22:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <SysTick_Handler+0x884>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <SysTick_Handler+0x880>)
 8001d2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001d2e:	4619      	mov	r1, r3
 8001d30:	485d      	ldr	r0, [pc, #372]	; (8001ea8 <SysTick_Handler+0x8b0>)
 8001d32:	f00a fced 	bl	800c710 <ModBUS_Check>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d024      	beq.n	8001d86 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <SysTick_Handler+0x880>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001d42:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <SysTick_Handler+0x898>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d48:	484b      	ldr	r0, [pc, #300]	; (8001e78 <SysTick_Handler+0x880>)
 8001d4a:	f00a fde3 	bl	800c914 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <SysTick_Handler+0x880>)
 8001d50:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4953      	ldr	r1, [pc, #332]	; (8001ea8 <SysTick_Handler+0x8b0>)
 8001d5c:	4853      	ldr	r0, [pc, #332]	; (8001eac <SysTick_Handler+0x8b4>)
 8001d5e:	f00c ff9b 	bl	800ec98 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	4951      	ldr	r1, [pc, #324]	; (8001eb0 <SysTick_Handler+0x8b8>)
 8001d6c:	4851      	ldr	r0, [pc, #324]	; (8001eb4 <SysTick_Handler+0x8bc>)
 8001d6e:	f00c ff93 	bl	800ec98 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <SysTick_Handler+0x89c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80da 	beq.w	8001f30 <SysTick_Handler+0x938>
 8001d7c:	2117      	movs	r1, #23
 8001d7e:	484e      	ldr	r0, [pc, #312]	; (8001eb8 <SysTick_Handler+0x8c0>)
 8001d80:	f7ff fc1e 	bl	80015c0 <ITM0_Write>
			 break;
 8001d84:	e0d4      	b.n	8001f30 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <SysTick_Handler+0x89c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80d0 	beq.w	8001f30 <SysTick_Handler+0x938>
 8001d90:	2111      	movs	r1, #17
 8001d92:	484a      	ldr	r0, [pc, #296]	; (8001ebc <SysTick_Handler+0x8c4>)
 8001d94:	f7ff fc14 	bl	80015c0 <ITM0_Write>
			 break;
 8001d98:	e0ca      	b.n	8001f30 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <SysTick_Handler+0x89c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <SysTick_Handler+0x7b2>
 8001da2:	2115      	movs	r1, #21
 8001da4:	4846      	ldr	r0, [pc, #280]	; (8001ec0 <SysTick_Handler+0x8c8>)
 8001da6:	f7ff fc0b 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <SysTick_Handler+0x884>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001db0:	e0bf      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <SysTick_Handler+0x89c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <SysTick_Handler+0x7ca>
 8001dba:	2114      	movs	r1, #20
 8001dbc:	4841      	ldr	r0, [pc, #260]	; (8001ec4 <SysTick_Handler+0x8cc>)
 8001dbe:	f7ff fbff 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <SysTick_Handler+0x884>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dc8:	e0b3      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <SysTick_Handler+0x89c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <SysTick_Handler+0x7e2>
 8001dd2:	2116      	movs	r1, #22
 8001dd4:	483c      	ldr	r0, [pc, #240]	; (8001ec8 <SysTick_Handler+0x8d0>)
 8001dd6:	f7ff fbf3 	bl	80015c0 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001dda:	2208      	movs	r2, #8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4827      	ldr	r0, [pc, #156]	; (8001e7c <SysTick_Handler+0x884>)
 8001de0:	f00c f8d4 	bl	800df8c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001de4:	bf00      	nop
 8001de6:	2301      	movs	r3, #1
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <SysTick_Handler+0x8a4>)
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	230f      	movs	r3, #15
 8001df0:	2201      	movs	r2, #1
 8001df2:	2104      	movs	r1, #4
 8001df4:	4821      	ldr	r0, [pc, #132]	; (8001e7c <SysTick_Handler+0x884>)
 8001df6:	f00b ff9e 	bl	800dd36 <SPI_ETH_REG>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f2      	bne.n	8001de6 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <SysTick_Handler+0x884>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e06:	e094      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <SysTick_Handler+0x89c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <SysTick_Handler+0x820>
 8001e10:	2117      	movs	r1, #23
 8001e12:	482e      	ldr	r0, [pc, #184]	; (8001ecc <SysTick_Handler+0x8d4>)
 8001e14:	f7ff fbd4 	bl	80015c0 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001e18:	2208      	movs	r2, #8
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4817      	ldr	r0, [pc, #92]	; (8001e7c <SysTick_Handler+0x884>)
 8001e1e:	f00c f8b5 	bl	800df8c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e22:	bf00      	nop
 8001e24:	2301      	movs	r3, #1
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <SysTick_Handler+0x8a4>)
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2104      	movs	r1, #4
 8001e32:	4812      	ldr	r0, [pc, #72]	; (8001e7c <SysTick_Handler+0x884>)
 8001e34:	f00b ff7f 	bl	800dd36 <SPI_ETH_REG>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <SysTick_Handler+0x884>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e44:	e075      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <SysTick_Handler+0x89c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <SysTick_Handler+0x85e>
 8001e4e:	2115      	movs	r1, #21
 8001e50:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <SysTick_Handler+0x8d8>)
 8001e52:	f7ff fbb5 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <SysTick_Handler+0x884>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e5c:	e069      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <SysTick_Handler+0x89c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <SysTick_Handler+0x876>
 8001e66:	2110      	movs	r1, #16
 8001e68:	481a      	ldr	r0, [pc, #104]	; (8001ed4 <SysTick_Handler+0x8dc>)
 8001e6a:	f7ff fba9 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <SysTick_Handler+0x884>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e74:	e05d      	b.n	8001f32 <SysTick_Handler+0x93a>
 8001e76:	bf00      	nop
 8001e78:	200018a4 	.word	0x200018a4
 8001e7c:	20002744 	.word	0x20002744
 8001e80:	200037b2 	.word	0x200037b2
 8001e84:	20001a38 	.word	0x20001a38
 8001e88:	20002760 	.word	0x20002760
 8001e8c:	200037ae 	.word	0x200037ae
 8001e90:	20003e28 	.word	0x20003e28
 8001e94:	2000273c 	.word	0x2000273c
 8001e98:	08010434 	.word	0x08010434
 8001e9c:	200037b4 	.word	0x200037b4
 8001ea0:	200037ac 	.word	0x200037ac
 8001ea4:	200037b0 	.word	0x200037b0
 8001ea8:	200018b1 	.word	0x200018b1
 8001eac:	20002f60 	.word	0x20002f60
 8001eb0:	20001bc4 	.word	0x20001bc4
 8001eb4:	20002110 	.word	0x20002110
 8001eb8:	08010448 	.word	0x08010448
 8001ebc:	08010424 	.word	0x08010424
 8001ec0:	0801045c 	.word	0x0801045c
 8001ec4:	08010474 	.word	0x08010474
 8001ec8:	0801048c 	.word	0x0801048c
 8001ecc:	080104a4 	.word	0x080104a4
 8001ed0:	080104bc 	.word	0x080104bc
 8001ed4:	080104d4 	.word	0x080104d4
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001ed8:	4b62      	ldr	r3, [pc, #392]	; (8002064 <SysTick_Handler+0xa6c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <SysTick_Handler+0x8f0>
 8001ee0:	2112      	movs	r1, #18
 8001ee2:	4861      	ldr	r0, [pc, #388]	; (8002068 <SysTick_Handler+0xa70>)
 8001ee4:	f7ff fb6c 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ee8:	4b60      	ldr	r3, [pc, #384]	; (800206c <SysTick_Handler+0xa74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001eee:	e020      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001ef0:	4b5c      	ldr	r3, [pc, #368]	; (8002064 <SysTick_Handler+0xa6c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <SysTick_Handler+0x908>
 8001ef8:	2113      	movs	r1, #19
 8001efa:	485d      	ldr	r0, [pc, #372]	; (8002070 <SysTick_Handler+0xa78>)
 8001efc:	f7ff fb60 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f00:	4b5a      	ldr	r3, [pc, #360]	; (800206c <SysTick_Handler+0xa74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f06:	e014      	b.n	8001f32 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001f08:	4b56      	ldr	r3, [pc, #344]	; (8002064 <SysTick_Handler+0xa6c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <SysTick_Handler+0x920>
 8001f10:	2111      	movs	r1, #17
 8001f12:	4858      	ldr	r0, [pc, #352]	; (8002074 <SysTick_Handler+0xa7c>)
 8001f14:	f7ff fb54 	bl	80015c0 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f18:	4b54      	ldr	r3, [pc, #336]	; (800206c <SysTick_Handler+0xa74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f1e:	e008      	b.n	8001f32 <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001f20:	4852      	ldr	r0, [pc, #328]	; (800206c <SysTick_Handler+0xa74>)
 8001f22:	f00b fee1 	bl	800dce8 <SPI_ETH>
 8001f26:	e004      	b.n	8001f32 <SysTick_Handler+0x93a>
			 default:
 8001f28:	bf00      	nop
 8001f2a:	e002      	b.n	8001f32 <SysTick_Handler+0x93a>
			 break;
 8001f2c:	bf00      	nop
 8001f2e:	e000      	b.n	8001f32 <SysTick_Handler+0x93a>
			 break;
 8001f30:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001f32:	4b51      	ldr	r3, [pc, #324]	; (8002078 <SysTick_Handler+0xa80>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d102      	bne.n	8001f40 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001f3a:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <SysTick_Handler+0xa80>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <SysTick_Handler+0xa84>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d104      	bne.n	8001f52 <SysTick_Handler+0x95a>
 8001f48:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <SysTick_Handler+0xa88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <SysTick_Handler+0xa88>)
 8001f50:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <SysTick_Handler+0xa88>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	dd0f      	ble.n	8001f7a <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <SysTick_Handler+0xa88>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <SysTick_Handler+0xa8c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <SysTick_Handler+0xa84>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <SysTick_Handler+0xa90>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a46      	ldr	r2, [pc, #280]	; (800208c <SysTick_Handler+0xa94>)
 8001f72:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001f74:	4b44      	ldr	r3, [pc, #272]	; (8002088 <SysTick_Handler+0xa90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7a:	f000 fe4b 	bl	8002c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <SysTick_Handler+0xa98>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d105      	bne.n	8001f94 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <SysTick_Handler+0xa9c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a41      	ldr	r2, [pc, #260]	; (8002094 <SysTick_Handler+0xa9c>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e002      	b.n	8001f9a <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <SysTick_Handler+0xa9c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <SysTick_Handler+0xa98>)
 8001f9c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d158      	bne.n	8002056 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <SysTick_Handler+0xaa0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d017      	beq.n	8001fdc <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <SysTick_Handler+0xa98>)
 8001fae:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d006      	beq.n	8001fc4 <SysTick_Handler+0x9cc>
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <SysTick_Handler+0xa98>)
 8001fb8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a34      	ldr	r2, [pc, #208]	; (8002090 <SysTick_Handler+0xa98>)
 8001fc0:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <SysTick_Handler+0xa98>)
 8001fc6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d106      	bne.n	8001fdc <SysTick_Handler+0x9e4>
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <SysTick_Handler+0xa98>)
 8001fd0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <SysTick_Handler+0xa98>)
 8001fd8:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <SysTick_Handler+0xa98>)
 8001fde:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d018      	beq.n	8002018 <SysTick_Handler+0xa20>
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <SysTick_Handler+0xa98>)
 8001fe8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001fec:	f241 527c 	movw	r2, #5500	; 0x157c
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	dd11      	ble.n	8002018 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <SysTick_Handler+0xaa0>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <SysTick_Handler+0xaa4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f242 020c 	movw	r2, #8204	; 0x200c
 8002004:	4293      	cmp	r3, r2
 8002006:	d107      	bne.n	8002018 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002008:	2201      	movs	r2, #1
 800200a:	4925      	ldr	r1, [pc, #148]	; (80020a0 <SysTick_Handler+0xaa8>)
 800200c:	4823      	ldr	r0, [pc, #140]	; (800209c <SysTick_Handler+0xaa4>)
 800200e:	f003 fbac 	bl	800576a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <SysTick_Handler+0xaac>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <SysTick_Handler+0xa98>)
 800201a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800201e:	2b02      	cmp	r3, #2
 8002020:	d11d      	bne.n	800205e <SysTick_Handler+0xa66>
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <SysTick_Handler+0xa98>)
 8002024:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002028:	f245 0214 	movw	r2, #20500	; 0x5014
 800202c:	4293      	cmp	r3, r2
 800202e:	dd16      	ble.n	800205e <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <SysTick_Handler+0xaa0>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <SysTick_Handler+0xaa4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002040:	4293      	cmp	r3, r2
 8002042:	d10c      	bne.n	800205e <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002044:	2201      	movs	r2, #1
 8002046:	4916      	ldr	r1, [pc, #88]	; (80020a0 <SysTick_Handler+0xaa8>)
 8002048:	4814      	ldr	r0, [pc, #80]	; (800209c <SysTick_Handler+0xaa4>)
 800204a:	f003 fb8e 	bl	800576a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <SysTick_Handler+0xaac>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	e003      	b.n	800205e <SysTick_Handler+0xa66>
		wf._ticks=0;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <SysTick_Handler+0xa98>)
 8002058:	2200      	movs	r2, #0
 800205a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000273c 	.word	0x2000273c
 8002068:	080104e8 	.word	0x080104e8
 800206c:	20002744 	.word	0x20002744
 8002070:	080104fc 	.word	0x080104fc
 8002074:	08010510 	.word	0x08010510
 8002078:	2000034c 	.word	0x2000034c
 800207c:	200037fa 	.word	0x200037fa
 8002080:	20003e38 	.word	0x20003e38
 8002084:	20003e3c 	.word	0x20003e3c
 8002088:	20003e34 	.word	0x20003e34
 800208c:	20003e40 	.word	0x20003e40
 8002090:	20000b58 	.word	0x20000b58
 8002094:	20003e2c 	.word	0x20003e2c
 8002098:	200037fb 	.word	0x200037fb
 800209c:	2000027c 	.word	0x2000027c
 80020a0:	20003e0c 	.word	0x20003e0c
 80020a4:	200037f8 	.word	0x200037f8

080020a8 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_UART_ErrorCallback+0x98>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11c      	bne.n	80020f4 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_UART_ErrorCallback+0x9c>)
 80020c4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_UART_ErrorCallback+0x9c>)
 80020cc:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f003 fa3c 	bl	800555e <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 80020e6:	f7ff f965 	bl	80013b4 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80020ea:	2201      	movs	r2, #1
 80020ec:	4916      	ldr	r1, [pc, #88]	; (8002148 <HAL_UART_ErrorCallback+0xa0>)
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f003 fb3b 	bl	800576a <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <HAL_UART_ErrorCallback+0xa4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11c      	bne.n	8002138 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_UART_ErrorCallback+0x9c>)
 8002108:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 800210c:	3301      	adds	r3, #1
 800210e:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_UART_ErrorCallback+0x9c>)
 8002110:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f003 fa1a 	bl	800555e <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 800212a:	f7ff f96d 	bl	8001408 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800212e:	2201      	movs	r2, #1
 8002130:	4905      	ldr	r1, [pc, #20]	; (8002148 <HAL_UART_ErrorCallback+0xa0>)
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f003 fb19 	bl	800576a <HAL_UART_Receive_IT>
	}
}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40011000 	.word	0x40011000
 8002144:	20000b58 	.word	0x20000b58
 8002148:	20003e0c 	.word	0x20003e0c
 800214c:	40004400 	.word	0x40004400

08002150 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <HAL_UART_RxCpltCallback+0xc0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d123      	bne.n	80021aa <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_UART_RxCpltCallback+0xc4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <HAL_UART_RxCpltCallback+0xc8>)
 8002168:	7811      	ldrb	r1, [r2, #0]
 800216a:	4a2c      	ldr	r2, [pc, #176]	; (800221c <HAL_UART_RxCpltCallback+0xcc>)
 800216c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_UART_RxCpltCallback+0xc4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <HAL_UART_RxCpltCallback+0xc4>)
 8002176:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_UART_RxCpltCallback+0xc4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002180:	db03      	blt.n	800218a <HAL_UART_RxCpltCallback+0x3a>
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_UART_RxCpltCallback+0xc4>)
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800218a:	2100      	movs	r1, #0
 800218c:	4824      	ldr	r0, [pc, #144]	; (8002220 <HAL_UART_RxCpltCallback+0xd0>)
 800218e:	f002 f9ed 	bl	800456c <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002196:	2201      	movs	r2, #1
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_UART_RxCpltCallback+0xd4>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	491d      	ldr	r1, [pc, #116]	; (8002218 <HAL_UART_RxCpltCallback+0xc8>)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f003 fae0 	bl	800576a <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_UART_RxCpltCallback+0xd8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d128      	bne.n	8002206 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_UART_RxCpltCallback+0xdc>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_UART_RxCpltCallback+0xe0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2d1      	uxtb	r1, r2
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_UART_RxCpltCallback+0xe4>)
 80021c0:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_UART_RxCpltCallback+0xe0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_UART_RxCpltCallback+0xe0>)
 80021ca:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_UART_RxCpltCallback+0xe0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	db03      	blt.n	80021de <HAL_UART_RxCpltCallback+0x8e>
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_UART_RxCpltCallback+0xe0>)
 80021d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80021de:	2201      	movs	r2, #1
 80021e0:	2102      	movs	r1, #2
 80021e2:	4815      	ldr	r0, [pc, #84]	; (8002238 <HAL_UART_RxCpltCallback+0xe8>)
 80021e4:	f001 f998 	bl	8003518 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80021e8:	2100      	movs	r1, #0
 80021ea:	4814      	ldr	r0, [pc, #80]	; (800223c <HAL_UART_RxCpltCallback+0xec>)
 80021ec:	f002 f9be 	bl	800456c <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_UART_RxCpltCallback+0xf0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_UART_RxCpltCallback+0xf4>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80021fc:	2201      	movs	r2, #1
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <HAL_UART_RxCpltCallback+0xdc>)
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f003 fab2 	bl	800576a <HAL_UART_Receive_IT>
		 }
 }
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40011000 	.word	0x40011000
 8002214:	20003e44 	.word	0x20003e44
 8002218:	20003e0c 	.word	0x20003e0c
 800221c:	20003808 	.word	0x20003808
 8002220:	200001ec 	.word	0x200001ec
 8002224:	200037f8 	.word	0x200037f8
 8002228:	40004400 	.word	0x40004400
 800222c:	20003e10 	.word	0x20003e10
 8002230:	20003e48 	.word	0x20003e48
 8002234:	20003a08 	.word	0x20003a08
 8002238:	40020000 	.word	0x40020000
 800223c:	20000234 	.word	0x20000234
 8002240:	40000400 	.word	0x40000400
 8002244:	200037f9 	.word	0x200037f9

08002248 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d12d      	bne.n	80022b6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800225a:	2100      	movs	r1, #0
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f002 fa83 	bl	8004768 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002274:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	4932      	ldr	r1, [pc, #200]	; (8002358 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002290:	4833      	ldr	r0, [pc, #204]	; (8002360 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002292:	f00c fd01 	bl	800ec98 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002296:	2201      	movs	r2, #1
 8002298:	4932      	ldr	r1, [pc, #200]	; (8002364 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800229a:	4833      	ldr	r0, [pc, #204]	; (8002368 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800229c:	f003 fa65 	bl	800576a <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80022a2:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	482b      	ldr	r0, [pc, #172]	; (8002360 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80022b2:	f7ff f985 	bl	80015c0 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d13f      	bne.n	8002340 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80022c0:	2100      	movs	r1, #0
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f002 fa50 	bl	8004768 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2102      	movs	r1, #2
 80022cc:	4829      	ldr	r0, [pc, #164]	; (8002374 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80022ce:	f001 f923 	bl	8003518 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 80022d8:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022e4:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80022ec:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002300:	4822      	ldr	r0, [pc, #136]	; (800238c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8002302:	f00c fcc9 	bl	800ec98 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 800230c:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002310:	2201      	movs	r2, #1
 8002312:	4920      	ldr	r1, [pc, #128]	; (8002394 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8002314:	4820      	ldr	r0, [pc, #128]	; (8002398 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8002316:	f003 fa28 	bl	800576a <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800231c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10d      	bne.n	8002340 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8002324:	2117      	movs	r1, #23
 8002326:	481d      	ldr	r0, [pc, #116]	; (800239c <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8002328:	f7ff f94a 	bl	80015c0 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	4815      	ldr	r0, [pc, #84]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002334:	f7ff f944 	bl	80015c0 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8002338:	2102      	movs	r1, #2
 800233a:	4819      	ldr	r0, [pc, #100]	; (80023a0 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 800233c:	f7ff f940 	bl	80015c0 <ITM0_Write>
				 }
		}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200037fc 	.word	0x200037fc
 800234c:	200037f8 	.word	0x200037f8
 8002350:	20003e44 	.word	0x20003e44
 8002354:	20003e18 	.word	0x20003e18
 8002358:	20003808 	.word	0x20003808
 800235c:	20003e08 	.word	0x20003e08
 8002360:	20003c08 	.word	0x20003c08
 8002364:	20003e0c 	.word	0x20003e0c
 8002368:	2000027c 	.word	0x2000027c
 800236c:	20000b58 	.word	0x20000b58
 8002370:	40000400 	.word	0x40000400
 8002374:	40020000 	.word	0x40020000
 8002378:	200037fd 	.word	0x200037fd
 800237c:	200037f9 	.word	0x200037f9
 8002380:	20003e48 	.word	0x20003e48
 8002384:	20003e1c 	.word	0x20003e1c
 8002388:	20003a08 	.word	0x20003a08
 800238c:	200003a6 	.word	0x200003a6
 8002390:	20000350 	.word	0x20000350
 8002394:	20003e10 	.word	0x20003e10
 8002398:	200002c0 	.word	0x200002c0
 800239c:	08010524 	.word	0x08010524
 80023a0:	0801053c 	.word	0x0801053c

080023a4 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <ESP8266_HW_Reset+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <ESP8266_HW_Reset+0x44>)
 80023b6:	f001 f8af 	bl	8003518 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80023ba:	2115      	movs	r1, #21
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <ESP8266_HW_Reset+0x48>)
 80023be:	f7ff f8ff 	bl	80015c0 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 80023c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023c6:	f000 fc45 	bl	8002c54 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 80023ca:	210f      	movs	r1, #15
 80023cc:	4808      	ldr	r0, [pc, #32]	; (80023f0 <ESP8266_HW_Reset+0x4c>)
 80023ce:	f7ff f8f7 	bl	80015c0 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <ESP8266_HW_Reset+0x44>)
 80023da:	f001 f89d 	bl	8003518 <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200037f5 	.word	0x200037f5
 80023e8:	40020000 	.word	0x40020000
 80023ec:	08010350 	.word	0x08010350
 80023f0:	08010540 	.word	0x08010540

080023f4 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af06      	add	r7, sp, #24
 80023fa:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80023fc:	2364      	movs	r3, #100	; 0x64
 80023fe:	220c      	movs	r2, #12
 8002400:	4943      	ldr	r1, [pc, #268]	; (8002510 <ESP8266_HW_Init+0x11c>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f003 f8da 	bl	80055bc <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002408:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800240c:	f000 fc22 	bl	8002c54 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <ESP8266_HW_Init+0x120>)
 8002412:	2205      	movs	r2, #5
 8002414:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <ESP8266_HW_Init+0x124>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <ESP8266_HW_Init+0x120>)
 800241e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002422:	e00e      	b.n	8002442 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002424:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <ESP8266_HW_Init+0x124>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <ESP8266_HW_Init+0x120>)
 800242a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <ESP8266_HW_Init+0x128>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f241 3287 	movw	r2, #4999	; 0x1387
 8002436:	4293      	cmp	r3, r2
 8002438:	dd03      	ble.n	8002442 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <ESP8266_HW_Init+0x12c>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002440:	e012      	b.n	8002468 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002442:	2300      	movs	r3, #0
 8002444:	9304      	str	r3, [sp, #16]
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <ESP8266_HW_Init+0x130>)
 8002448:	9303      	str	r3, [sp, #12]
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <ESP8266_HW_Init+0x134>)
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <ESP8266_HW_Init+0x138>)
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <ESP8266_HW_Init+0x13c>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <ESP8266_HW_Init+0x140>)
 8002458:	4a37      	ldr	r2, [pc, #220]	; (8002538 <ESP8266_HW_Init+0x144>)
 800245a:	4938      	ldr	r1, [pc, #224]	; (800253c <ESP8266_HW_Init+0x148>)
 800245c:	4838      	ldr	r0, [pc, #224]	; (8002540 <ESP8266_HW_Init+0x14c>)
 800245e:	f00c f8b5 	bl	800e5cc <FT_String_ND>
 8002462:	4603      	mov	r3, r0
 8002464:	2b01      	cmp	r3, #1
 8002466:	d1dd      	bne.n	8002424 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <ESP8266_HW_Init+0x12c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d129      	bne.n	80024c4 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <ESP8266_HW_Init+0x120>)
 8002472:	2205      	movs	r2, #5
 8002474:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <ESP8266_HW_Init+0x124>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <ESP8266_HW_Init+0x120>)
 800247e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002482:	e00a      	b.n	800249a <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <ESP8266_HW_Init+0x124>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <ESP8266_HW_Init+0x120>)
 800248a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <ESP8266_HW_Init+0x128>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f241 3287 	movw	r2, #4999	; 0x1387
 8002496:	4293      	cmp	r3, r2
 8002498:	dc13      	bgt.n	80024c2 <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800249a:	2300      	movs	r3, #0
 800249c:	9304      	str	r3, [sp, #16]
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <ESP8266_HW_Init+0x130>)
 80024a0:	9303      	str	r3, [sp, #12]
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <ESP8266_HW_Init+0x134>)
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <ESP8266_HW_Init+0x138>)
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <ESP8266_HW_Init+0x13c>)
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <ESP8266_HW_Init+0x140>)
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <ESP8266_HW_Init+0x144>)
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <ESP8266_HW_Init+0x148>)
 80024b4:	4822      	ldr	r0, [pc, #136]	; (8002540 <ESP8266_HW_Init+0x14c>)
 80024b6:	f00c f889 	bl	800e5cc <FT_String_ND>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d1e1      	bne.n	8002484 <ESP8266_HW_Init+0x90>
 80024c0:	e000      	b.n	80024c4 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 80024c2:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <ESP8266_HW_Init+0x128>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f241 3287 	movw	r2, #4999	; 0x1387
 80024cc:	4293      	cmp	r3, r2
 80024ce:	dc06      	bgt.n	80024de <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <ESP8266_HW_Init+0x150>)
 80024d2:	220a      	movs	r2, #10
 80024d4:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <ESP8266_HW_Init+0x128>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e008      	b.n	80024f0 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <ESP8266_HW_Init+0x150>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <ESP8266_HW_Init+0x150>)
 80024e8:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <ESP8266_HW_Init+0x128>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <ESP8266_HW_Init+0x150>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d981      	bls.n	80023fc <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <ESP8266_HW_Init+0x150>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b0a      	cmp	r3, #10
 80024fe:	d101      	bne.n	8002504 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 8002504:	2300      	movs	r3, #0
	  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	08010550 	.word	0x08010550
 8002514:	20000b58 	.word	0x20000b58
 8002518:	20003e18 	.word	0x20003e18
 800251c:	20003e20 	.word	0x20003e20
 8002520:	200037f6 	.word	0x200037f6
 8002524:	200015ec 	.word	0x200015ec
 8002528:	20003e30 	.word	0x20003e30
 800252c:	20001838 	.word	0x20001838
 8002530:	200013ec 	.word	0x200013ec
 8002534:	20001844 	.word	0x20001844
 8002538:	08010560 	.word	0x08010560
 800253c:	20001830 	.word	0x20001830
 8002540:	20003c08 	.word	0x20003c08
 8002544:	200037f5 	.word	0x200037f5

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	e7fe      	b.n	8002550 <Error_Handler+0x8>
	...

08002554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_MspInit+0x4c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_MspInit+0x4c>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_MspInit+0x4c>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_MspInit+0x4c>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_MspInit+0x4c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_SPI_MspInit+0x84>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12b      	bne.n	800261e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_SPI_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025fe:	23e0      	movs	r3, #224	; 0xe0
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800260e:	2305      	movs	r3, #5
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_SPI_MspInit+0x8c>)
 800261a:	f000 fd15 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40013000 	.word	0x40013000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d116      	bne.n	8002674 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	201c      	movs	r0, #28
 8002668:	f000 fc17 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800266c:	201c      	movs	r0, #28
 800266e:	f000 fc30 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002672:	e01a      	b.n	80026aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <HAL_TIM_Base_MspInit+0x84>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d115      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_TIM_Base_MspInit+0x80>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	201d      	movs	r0, #29
 80026a0:	f000 fbfb 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a4:	201d      	movs	r0, #29
 80026a6:	f000 fc14 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40000400 	.word	0x40000400

080026bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <HAL_UART_MspInit+0x170>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d135      	bne.n	800274a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_UART_MspInit+0x174>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_UART_MspInit+0x174>)
 80026e8:	f043 0310 	orr.w	r3, r3, #16
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_UART_MspInit+0x174>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <HAL_UART_MspInit+0x174>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_UART_MspInit+0x174>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b49      	ldr	r3, [pc, #292]	; (8002830 <HAL_UART_MspInit+0x174>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002716:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002728:	2307      	movs	r3, #7
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4840      	ldr	r0, [pc, #256]	; (8002834 <HAL_UART_MspInit+0x178>)
 8002734:	f000 fc88 	bl	8003048 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2025      	movs	r0, #37	; 0x25
 800273e:	f000 fbac 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002742:	2025      	movs	r0, #37	; 0x25
 8002744:	f000 fbc5 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002748:	e06b      	b.n	8002822 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_UART_MspInit+0x17c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d134      	bne.n	80027be <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_UART_MspInit+0x174>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_UART_MspInit+0x174>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_UART_MspInit+0x174>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_UART_MspInit+0x174>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_UART_MspInit+0x174>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_UART_MspInit+0x174>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800278c:	230c      	movs	r3, #12
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279c:	2307      	movs	r3, #7
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a4:	4619      	mov	r1, r3
 80027a6:	4823      	ldr	r0, [pc, #140]	; (8002834 <HAL_UART_MspInit+0x178>)
 80027a8:	f000 fc4e 	bl	8003048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	2026      	movs	r0, #38	; 0x26
 80027b2:	f000 fb72 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027b6:	2026      	movs	r0, #38	; 0x26
 80027b8:	f000 fb8b 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80027bc:	e031      	b.n	8002822 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_UART_MspInit+0x180>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d12c      	bne.n	8002822 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	4a17      	ldr	r2, [pc, #92]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027d2:	f043 0320 	orr.w	r3, r3, #32
 80027d6:	6453      	str	r3, [r2, #68]	; 0x44
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a10      	ldr	r2, [pc, #64]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_UART_MspInit+0x174>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002800:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002812:	2308      	movs	r3, #8
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <HAL_UART_MspInit+0x178>)
 800281e:	f000 fc13 	bl	8003048 <HAL_GPIO_Init>
}
 8002822:	bf00      	nop
 8002824:	3738      	adds	r7, #56	; 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40011000 	.word	0x40011000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000
 8002838:	40004400 	.word	0x40004400
 800283c:	40011400 	.word	0x40011400

08002840 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_UART_MspDeInit+0x80>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10e      	bne.n	8002870 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800285e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002862:	4819      	ldr	r0, [pc, #100]	; (80028c8 <HAL_UART_MspDeInit+0x88>)
 8002864:	f000 fd74 	bl	8003350 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002868:	2025      	movs	r0, #37	; 0x25
 800286a:	f000 fb40 	bl	8002eee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800286e:	e022      	b.n	80028b6 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_UART_MspDeInit+0x8c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10d      	bne.n	8002896 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 8002880:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002886:	210c      	movs	r1, #12
 8002888:	480f      	ldr	r0, [pc, #60]	; (80028c8 <HAL_UART_MspDeInit+0x88>)
 800288a:	f000 fd61 	bl	8003350 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800288e:	2026      	movs	r0, #38	; 0x26
 8002890:	f000 fb2d 	bl	8002eee <HAL_NVIC_DisableIRQ>
}
 8002894:	e00f      	b.n	80028b6 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <HAL_UART_MspDeInit+0x90>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10a      	bne.n	80028b6 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <HAL_UART_MspDeInit+0x84>)
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80028ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_UART_MspDeInit+0x88>)
 80028b2:	f000 fd4d 	bl	8003350 <HAL_GPIO_DeInit>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40011400 	.word	0x40011400

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <NMI_Handler+0x4>

080028da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler+0x4>

080028e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <TIM2_IRQHandler+0x10>)
 8002922:	f002 f82d 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200001ec 	.word	0x200001ec

08002930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <TIM3_IRQHandler+0x10>)
 8002936:	f002 f823 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000234 	.word	0x20000234

08002944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <USART1_IRQHandler+0x10>)
 800294a:	f002 ff3f 	bl	80057cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000027c 	.word	0x2000027c

08002958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <USART2_IRQHandler+0x10>)
 800295e:	f002 ff35 	bl	80057cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200002c0 	.word	0x200002c0

0800296c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
	return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_kill>:

int _kill(int pid, int sig)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002986:	f00c fc8f 	bl	800f2a8 <__errno>
 800298a:	4603      	mov	r3, r0
 800298c:	2216      	movs	r2, #22
 800298e:	601a      	str	r2, [r3, #0]
	return -1;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_exit>:

void _exit (int status)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ffe7 	bl	800297c <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ae:	e7fe      	b.n	80029ae <_exit+0x12>

080029b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e00a      	b.n	80029d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029c2:	f3af 8000 	nop.w
 80029c6:	4601      	mov	r1, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60ba      	str	r2, [r7, #8]
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	dbf0      	blt.n	80029c2 <_read+0x12>
	}

return len;
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e009      	b.n	8002a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	60ba      	str	r2, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	dbf1      	blt.n	80029fc <_write+0x12>
	}
	return len;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_close>:

int _close(int file)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
	return -1;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_isatty>:

int _isatty(int file)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	return 1;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <_sbrk+0x5c>)
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <_sbrk+0x60>)
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <_sbrk+0x64>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <_sbrk+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002abc:	f00c fbf4 	bl	800f2a8 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e009      	b.n	8002ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <_sbrk+0x64>)
 8002adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20020000 	.word	0x20020000
 8002aec:	00000400 	.word	0x00000400
 8002af0:	20003e50 	.word	0x20003e50
 8002af4:	20003fa8 	.word	0x20003fa8

08002af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <SystemInit+0x20>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <SystemInit+0x20>)
 8002b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b28:	e002      	b.n	8002b30 <LoopCopyDataInit>

08002b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2e:	3304      	adds	r3, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b34:	d3f9      	bcc.n	8002b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b38:	4c0b      	ldr	r4, [pc, #44]	; (8002b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b3c:	e001      	b.n	8002b42 <LoopFillZerobss>

08002b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b40:	3204      	adds	r2, #4

08002b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b44:	d3fb      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b46:	f7ff ffd7 	bl	8002af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f00c fbb3 	bl	800f2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7fd fda1 	bl	8000694 <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002b60:	08010ddc 	.word	0x08010ddc
  ldr r2, =_sbss
 8002b64:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002b68:	20003fa4 	.word	0x20003fa4

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <HAL_Init+0x40>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_Init+0x40>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_Init+0x40>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f973 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f000 f808 	bl	8002bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff fcd6 	bl	8002554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_InitTick+0x54>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x58>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f999 	bl	8002f0a <HAL_SYSTICK_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00e      	b.n	8002c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d80a      	bhi.n	8002bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be8:	2200      	movs	r2, #0
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f000 f953 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <HAL_InitTick+0x5c>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000084 	.word	0x20000084
 8002c0c:	2000008c 	.word	0x2000008c
 8002c10:	20000088 	.word	0x20000088

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2000008c 	.word	0x2000008c
 8002c38:	20003e54 	.word	0x20003e54

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20003e54 	.word	0x20003e54

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000008c 	.word	0x2000008c

08002c9c <__NVIC_SetPriorityGrouping>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_DisableIRQ>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db12      	blt.n	8002d74 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	490a      	ldr	r1, [pc, #40]	; (8002d80 <__NVIC_DisableIRQ+0x44>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d62:	3320      	adds	r3, #32
 8002d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d68:	f3bf 8f4f 	dsb	sy
}
 8002d6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d6e:	f3bf 8f6f 	isb	sy
}
 8002d72:	bf00      	nop
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff05 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff1a 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff8e 	bl	8002dd8 <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff0d 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff1d 	bl	8002d3c <__NVIC_DisableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff94 	bl	8002e40 <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7ff fe84 	bl	8002c3c <HAL_GetTick>
 8002f34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d008      	beq.n	8002f54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e052      	b.n	8002ffa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0216 	bic.w	r2, r2, #22
 8002f62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_DMA_Abort+0x62>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0208 	bic.w	r2, r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa4:	e013      	b.n	8002fce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa6:	f7ff fe49 	bl	8002c3c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d90c      	bls.n	8002fce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e015      	b.n	8002ffa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e4      	bne.n	8002fa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	223f      	movs	r2, #63	; 0x3f
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d004      	beq.n	8003020 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e00c      	b.n	800303a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2205      	movs	r2, #5
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e159      	b.n	8003318 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	f040 8148 	bne.w	8003312 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d005      	beq.n	800309a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003096:	2b02      	cmp	r3, #2
 8003098:	d130      	bne.n	80030fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d017      	beq.n	8003138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d123      	bne.n	800318c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80a2 	beq.w	8003312 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <HAL_GPIO_Init+0x2e8>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a56      	ldr	r2, [pc, #344]	; (8003330 <HAL_GPIO_Init+0x2e8>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	4b54      	ldr	r3, [pc, #336]	; (8003330 <HAL_GPIO_Init+0x2e8>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ea:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_GPIO_Init+0x2ec>)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	220f      	movs	r2, #15
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_GPIO_Init+0x2f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d019      	beq.n	800324a <HAL_GPIO_Init+0x202>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a48      	ldr	r2, [pc, #288]	; (800333c <HAL_GPIO_Init+0x2f4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x1fe>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a47      	ldr	r2, [pc, #284]	; (8003340 <HAL_GPIO_Init+0x2f8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00d      	beq.n	8003242 <HAL_GPIO_Init+0x1fa>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a46      	ldr	r2, [pc, #280]	; (8003344 <HAL_GPIO_Init+0x2fc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_GPIO_Init+0x1f6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a45      	ldr	r2, [pc, #276]	; (8003348 <HAL_GPIO_Init+0x300>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_GPIO_Init+0x1f2>
 8003236:	2304      	movs	r3, #4
 8003238:	e008      	b.n	800324c <HAL_GPIO_Init+0x204>
 800323a:	2307      	movs	r3, #7
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x204>
 800323e:	2303      	movs	r3, #3
 8003240:	e004      	b.n	800324c <HAL_GPIO_Init+0x204>
 8003242:	2302      	movs	r3, #2
 8003244:	e002      	b.n	800324c <HAL_GPIO_Init+0x204>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x204>
 800324a:	2300      	movs	r3, #0
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	f002 0203 	and.w	r2, r2, #3
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	4093      	lsls	r3, r2
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800325c:	4935      	ldr	r1, [pc, #212]	; (8003334 <HAL_GPIO_Init+0x2ec>)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326a:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_GPIO_Init+0x304>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <HAL_GPIO_Init+0x304>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_GPIO_Init+0x304>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b8:	4a24      	ldr	r2, [pc, #144]	; (800334c <HAL_GPIO_Init+0x304>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <HAL_GPIO_Init+0x304>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e2:	4a1a      	ldr	r2, [pc, #104]	; (800334c <HAL_GPIO_Init+0x304>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e8:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_GPIO_Init+0x304>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800330c:	4a0f      	ldr	r2, [pc, #60]	; (800334c <HAL_GPIO_Init+0x304>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3301      	adds	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	f67f aea2 	bls.w	8003064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3724      	adds	r7, #36	; 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	40013800 	.word	0x40013800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40013c00 	.word	0x40013c00

08003350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e0bb      	b.n	80034e4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800336c:	2201      	movs	r2, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	f040 80ab 	bne.w	80034de <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003388:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_GPIO_DeInit+0x1ac>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003394:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_GPIO_DeInit+0x1b0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_DeInit+0x96>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a53      	ldr	r2, [pc, #332]	; (8003504 <HAL_GPIO_DeInit+0x1b4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_DeInit+0x92>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_GPIO_DeInit+0x1b8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_DeInit+0x8e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a51      	ldr	r2, [pc, #324]	; (800350c <HAL_GPIO_DeInit+0x1bc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_DeInit+0x8a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a50      	ldr	r2, [pc, #320]	; (8003510 <HAL_GPIO_DeInit+0x1c0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_DeInit+0x86>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033e6:	2300      	movs	r3, #0
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d132      	bne.n	800345e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	4944      	ldr	r1, [pc, #272]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 8003402:	4013      	ands	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	4941      	ldr	r1, [pc, #260]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 8003410:	4013      	ands	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43db      	mvns	r3, r3
 800341c:	493d      	ldr	r1, [pc, #244]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 800341e:	4013      	ands	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003422:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	493a      	ldr	r1, [pc, #232]	; (8003514 <HAL_GPIO_DeInit+0x1c4>)
 800342c:	4013      	ands	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_GPIO_DeInit+0x1ac>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	43da      	mvns	r2, r3
 8003450:	482a      	ldr	r0, [pc, #168]	; (80034fc <HAL_GPIO_DeInit+0x1ac>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	400a      	ands	r2, r1
 8003458:	3302      	adds	r3, #2
 800345a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2103      	movs	r1, #3
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	08d2      	lsrs	r2, r2, #3
 8003494:	4019      	ands	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2103      	movs	r1, #3
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	2101      	movs	r1, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	401a      	ands	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2103      	movs	r1, #3
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	401a      	ands	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f af40 	bls.w	800336c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40013c00 	.word	0x40013c00

08003518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	619a      	str	r2, [r3, #24]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43d9      	mvns	r1, r3
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	400b      	ands	r3, r1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e267      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e242      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff fb00 	bl	8002c3c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7ff fafc 	bl	8002c3c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e207      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff faec 	bl	8002c3c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7ff fae8 	bl	8002c3c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1f3      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff faa1 	bl	8002c3c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff fa9d 	bl	8002c3c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7ff fa80 	bl	8002c3c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff fa7c 	bl	8002c3c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e187      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7ff fa60 	bl	8002c3c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7ff fa5c 	bl	8002c3c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e167      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7ff fa49 	bl	8002c3c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff fa45 	bl	8002c3c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e150      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7d      	ldr	r3, [pc, #500]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a7c      	ldr	r2, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b77      	ldr	r3, [pc, #476]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b74      	ldr	r3, [pc, #464]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7ff fa05 	bl	8002c3c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7ff fa01 	bl	8002c3c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5e      	ldr	r2, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a5b      	ldr	r2, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7ff f9c6 	bl	8002c3c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7ff f9c2 	bl	8002c3c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0cb      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7ff f9b0 	bl	8002c3c <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7ff f9ac 	bl	8002c3c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4a38      	ldr	r2, [pc, #224]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a1 	beq.w	8003a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d05c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d141      	bne.n	80039b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7ff f980 	bl	8002c3c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7ff f97c 	bl	8002c3c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	491b      	ldr	r1, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7ff f955 	bl	8002c3c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003996:	f7ff f951 	bl	8002c3c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x416>
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7ff f93e 	bl	8002c3c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7ff f93a 	bl	8002c3c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e038      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7ff f86c 	bl	8002c3c <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7ff f868 	bl	8002c3c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe ffcc 	bl	8002bb4 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08010bac 	.word	0x08010bac
 8003c34:	20000084 	.word	0x20000084
 8003c38:	20000088 	.word	0x20000088

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b090      	sub	sp, #64	; 0x40
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80a1 	bhi.w	8003da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e09b      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c74:	e09b      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c7a:	e098      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca8:	fb03 f201 	mul.w	r2, r3, r1
 8003cac:	2300      	movs	r3, #0
 8003cae:	fb00 f303 	mul.w	r3, r0, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a43      	ldr	r2, [pc, #268]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	2200      	movs	r2, #0
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	61fa      	str	r2, [r7, #28]
 8003cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cd6:	f7fc faeb 	bl	80002b0 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4613      	mov	r3, r2
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce2:	e053      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	2200      	movs	r2, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	617a      	str	r2, [r7, #20]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cf6:	f04f 0b00 	mov.w	fp, #0
 8003cfa:	4652      	mov	r2, sl
 8003cfc:	465b      	mov	r3, fp
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	0159      	lsls	r1, r3, #5
 8003d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0c:	0150      	lsls	r0, r2, #5
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	ebb2 080a 	subs.w	r8, r2, sl
 8003d16:	eb63 090b 	sbc.w	r9, r3, fp
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d32:	eb63 0509 	sbc.w	r5, r3, r9
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	00eb      	lsls	r3, r5, #3
 8003d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d44:	00e2      	lsls	r2, r4, #3
 8003d46:	4614      	mov	r4, r2
 8003d48:	461d      	mov	r5, r3
 8003d4a:	eb14 030a 	adds.w	r3, r4, sl
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	eb45 030b 	adc.w	r3, r5, fp
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d62:	4629      	mov	r1, r5
 8003d64:	028b      	lsls	r3, r1, #10
 8003d66:	4621      	mov	r1, r4
 8003d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	028a      	lsls	r2, r1, #10
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	2200      	movs	r2, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	60fa      	str	r2, [r7, #12]
 8003d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d80:	f7fc fa96 	bl	80002b0 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da6:	e002      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3740      	adds	r7, #64	; 0x40
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	017d7840 	.word	0x017d7840

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000084 	.word	0x20000084

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de4:	f7ff fff0 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	08010bbc 	.word	0x08010bbc

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e0c:	f7ff ffdc 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0b5b      	lsrs	r3, r3, #13
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	08010bbc 	.word	0x08010bbc

08003e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07b      	b.n	8003f3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d108      	bne.n	8003e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e52:	d009      	beq.n	8003e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	61da      	str	r2, [r3, #28]
 8003e5a:	e005      	b.n	8003e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fb8e 	bl	80025a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	ea42 0103 	orr.w	r1, r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	f003 0104 	and.w	r1, r3, #4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f003 0210 	and.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08c      	sub	sp, #48	; 0x30
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x26>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e18a      	b.n	800427e <HAL_SPI_TransmitReceive+0x33c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f70:	f7fe fe64 	bl	8002c3c <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f86:	887b      	ldrh	r3, [r7, #2]
 8003f88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00f      	beq.n	8003fb2 <HAL_SPI_TransmitReceive+0x70>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f98:	d107      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x68>
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fb0:	e15b      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x82>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x82>
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fca:	e14e      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d003      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2205      	movs	r2, #5
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	887a      	ldrh	r2, [r7, #2]
 8004002:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403c:	d178      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SPI_TransmitReceive+0x10a>
 8004046:	8b7b      	ldrh	r3, [r7, #26]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d166      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e053      	b.n	800411a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11b      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x176>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x176>
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d113      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d119      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x1b8>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d014      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	b292      	uxth	r2, r2
 80040dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f6:	2301      	movs	r3, #1
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040fa:	f7fe fd9f 	bl	8002c3c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004106:	429a      	cmp	r2, r3
 8004108:	d807      	bhi.n	800411a <HAL_SPI_TransmitReceive+0x1d8>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d003      	beq.n	800411a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004118:	e0a7      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1a6      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x130>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1a1      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x130>
 800412e:	e07c      	b.n	800422a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_TransmitReceive+0x1fc>
 8004138:	8b7b      	ldrh	r3, [r7, #26]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d16b      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004164:	e057      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d11c      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x26c>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d017      	beq.n	80041ae <HAL_SPI_TransmitReceive+0x26c>
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d114      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d119      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x2ae>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d014      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041ec:	2301      	movs	r3, #1
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041f0:	f7fe fd24 	bl	8002c3c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d803      	bhi.n	8004208 <HAL_SPI_TransmitReceive+0x2c6>
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d102      	bne.n	800420e <HAL_SPI_TransmitReceive+0x2cc>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004214:	e029      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1a2      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x224>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d19d      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8b2 	bl	8004398 <SPI_EndRxTxTransaction>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004246:	e010      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e000      	b.n	800426a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004268:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800427a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800427e:	4618      	mov	r0, r3
 8004280:	3730      	adds	r7, #48	; 0x30
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004298:	f7fe fcd0 	bl	8002c3c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a8:	f7fe fcc8 	bl	8002c3c <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	e054      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d050      	beq.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c8:	f7fe fcb8 	bl	8002c3c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d902      	bls.n	80042de <SPI_WaitFlagStateUntilTimeout+0x56>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13d      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d111      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d004      	beq.n	800430c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d107      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d10f      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e017      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3b01      	subs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d19b      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000084 	.word	0x20000084

08004398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <SPI_EndRxTxTransaction+0x7c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <SPI_EndRxTxTransaction+0x80>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	0d5b      	lsrs	r3, r3, #21
 80043b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c2:	d112      	bne.n	80043ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff5a 	bl	8004288 <SPI_WaitFlagStateUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d0f2      	beq.n	80043ea <SPI_EndRxTxTransaction+0x52>
 8004404:	e000      	b.n	8004408 <SPI_EndRxTxTransaction+0x70>
        break;
 8004406:	bf00      	nop
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000084 	.word	0x20000084
 8004418:	165e9f81 	.word	0x165e9f81

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe f8f6 	bl	8002634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fce4 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e041      	b.n	8004550 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f839 	bl	8004558 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 fc95 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_TIM_OC_Start_IT+0x28>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e022      	b.n	80045da <HAL_TIM_OC_Start_IT+0x6e>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d109      	bne.n	80045ae <HAL_TIM_OC_Start_IT+0x42>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e015      	b.n	80045da <HAL_TIM_OC_Start_IT+0x6e>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_OC_Start_IT+0x5c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e008      	b.n	80045da <HAL_TIM_OC_Start_IT+0x6e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0b3      	b.n	800474a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_OC_Start_IT+0x86>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	e013      	b.n	800461a <HAL_TIM_OC_Start_IT+0xae>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_OC_Start_IT+0x96>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	e00b      	b.n	800461a <HAL_TIM_OC_Start_IT+0xae>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_OC_Start_IT+0xa6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	e003      	b.n	800461a <HAL_TIM_OC_Start_IT+0xae>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d841      	bhi.n	80046a4 <HAL_TIM_OC_Start_IT+0x138>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_TIM_OC_Start_IT+0xbc>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	0800465d 	.word	0x0800465d
 800462c:	080046a5 	.word	0x080046a5
 8004630:	080046a5 	.word	0x080046a5
 8004634:	080046a5 	.word	0x080046a5
 8004638:	0800466f 	.word	0x0800466f
 800463c:	080046a5 	.word	0x080046a5
 8004640:	080046a5 	.word	0x080046a5
 8004644:	080046a5 	.word	0x080046a5
 8004648:	08004681 	.word	0x08004681
 800464c:	080046a5 	.word	0x080046a5
 8004650:	080046a5 	.word	0x080046a5
 8004654:	080046a5 	.word	0x080046a5
 8004658:	08004693 	.word	0x08004693
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0202 	orr.w	r2, r2, #2
 800466a:	60da      	str	r2, [r3, #12]
      break;
 800466c:	e01d      	b.n	80046aa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0204 	orr.w	r2, r2, #4
 800467c:	60da      	str	r2, [r3, #12]
      break;
 800467e:	e014      	b.n	80046aa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	60da      	str	r2, [r3, #12]
      break;
 8004690:	e00b      	b.n	80046aa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0210 	orr.w	r2, r2, #16
 80046a0:	60da      	str	r2, [r3, #12]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d14b      	bne.n	8004748 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fe5b 	bl	8005374 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_TIM_OC_Start_IT+0x1e8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_TIM_OC_Start_IT+0x1e8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_OC_Start_IT+0x1a8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_OC_Start_IT+0x1a8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_TIM_OC_Start_IT+0x1ec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_OC_Start_IT+0x1a8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIM_OC_Start_IT+0x1f0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_OC_Start_IT+0x1a8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_OC_Start_IT+0x1a8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d111      	bne.n	8004738 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d010      	beq.n	8004748 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	e007      	b.n	8004748 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40010000 	.word	0x40010000
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40014000 	.word	0x40014000

08004768 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d841      	bhi.n	8004800 <HAL_TIM_OC_Stop_IT+0x98>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_TIM_OC_Stop_IT+0x1c>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047b9 	.word	0x080047b9
 8004788:	08004801 	.word	0x08004801
 800478c:	08004801 	.word	0x08004801
 8004790:	08004801 	.word	0x08004801
 8004794:	080047cb 	.word	0x080047cb
 8004798:	08004801 	.word	0x08004801
 800479c:	08004801 	.word	0x08004801
 80047a0:	08004801 	.word	0x08004801
 80047a4:	080047dd 	.word	0x080047dd
 80047a8:	08004801 	.word	0x08004801
 80047ac:	08004801 	.word	0x08004801
 80047b0:	08004801 	.word	0x08004801
 80047b4:	080047ef 	.word	0x080047ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0202 	bic.w	r2, r2, #2
 80047c6:	60da      	str	r2, [r3, #12]
      break;
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	60da      	str	r2, [r3, #12]
      break;
 80047da:	e014      	b.n	8004806 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0208 	bic.w	r2, r2, #8
 80047ea:	60da      	str	r2, [r3, #12]
      break;
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0210 	bic.w	r2, r2, #16
 80047fc:	60da      	str	r2, [r3, #12]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	bf00      	nop
  }

  if (status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d157      	bne.n	80048bc <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fdad 	bl	8005374 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <HAL_TIM_OC_Stop_IT+0x160>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d117      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f241 1311 	movw	r3, #4369	; 0x1111
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0xec>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	f240 4344 	movw	r3, #1092	; 0x444
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0xec>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004852:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	f241 1311 	movw	r3, #4369	; 0x1111
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <HAL_TIM_OC_Stop_IT+0x11c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	f240 4344 	movw	r3, #1092	; 0x444
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_TIM_OC_Stop_IT+0x11c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_TIM_OC_Stop_IT+0x12c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004892:	e013      	b.n	80048bc <HAL_TIM_OC_Stop_IT+0x154>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_OC_Stop_IT+0x13c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a2:	e00b      	b.n	80048bc <HAL_TIM_OC_Stop_IT+0x154>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d104      	bne.n	80048b4 <HAL_TIM_OC_Stop_IT+0x14c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b2:	e003      	b.n	80048bc <HAL_TIM_OC_Stop_IT+0x154>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000

080048cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e041      	b.n	8004964 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f839 	bl	800496c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fa8b 	bl	8004e28 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0208 	bic.w	r2, r2, #8
 8004920:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa11 	bl	8004dea <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd fc3c 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa14 	bl	8004dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9e7 	bl	8004dea <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fc12 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f9ea 	bl	8004dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9bd 	bl	8004dea <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fbe8 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9c0 	bl	8004dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f993 	bl	8004dea <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd fbbe 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f996 	bl	8004dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f969 	bl	8004dd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fcc0 	bl	80054b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f95b 	bl	8004e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc8a 	bl	800549c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e048      	b.n	8004c40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d839      	bhi.n	8004c30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c23 	.word	0x08004c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f992 	bl	8004f28 <TIM_OC1_SetConfig>
      break;
 8004c04:	e017      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f9f1 	bl	8004ff4 <TIM_OC2_SetConfig>
      break;
 8004c12:	e010      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fa56 	bl	80050cc <TIM_OC3_SetConfig>
      break;
 8004c20:	e009      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fab9 	bl	80051a0 <TIM_OC4_SetConfig>
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_ConfigClockSource+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e0b4      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x186>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	d03e      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0xd4>
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca2:	f200 8087 	bhi.w	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	f000 8086 	beq.w	8004dba <HAL_TIM_ConfigClockSource+0x172>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d87f      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d01a      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xa6>
 8004cb8:	2b70      	cmp	r3, #112	; 0x70
 8004cba:	d87b      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d050      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x11a>
 8004cc0:	2b60      	cmp	r3, #96	; 0x60
 8004cc2:	d877      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d03c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0xfa>
 8004cc8:	2b50      	cmp	r3, #80	; 0x50
 8004cca:	d873      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d058      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x13a>
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d86f      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d064      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b30      	cmp	r3, #48	; 0x30
 8004cda:	d86b      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d060      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d867      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d05a      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	e062      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f000 fb19 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	609a      	str	r2, [r3, #8]
      break;
 8004d1a:	e04f      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6899      	ldr	r1, [r3, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f000 fb02 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3e:	609a      	str	r2, [r3, #8]
      break;
 8004d40:	e03c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fa76 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2150      	movs	r1, #80	; 0x50
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 facf 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004d60:	e02c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 fa95 	bl	800529e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2160      	movs	r1, #96	; 0x60
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fabf 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004d80:	e01c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fa56 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 faaf 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004da0:	e00c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f000 faa6 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004db2:	e003      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
      break;
 8004db8:	e000      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <TIM_Base_SetConfig+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <TIM_Base_SetConfig+0xec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <TIM_Base_SetConfig+0xf0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d017      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <TIM_Base_SetConfig+0xe8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <TIM_Base_SetConfig+0xec>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <TIM_Base_SetConfig+0xf0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <TIM_Base_SetConfig+0xf4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <TIM_Base_SetConfig+0xf8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <TIM_Base_SetConfig+0xfc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0302 	bic.w	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <TIM_OC1_SetConfig+0xc8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10c      	bne.n	8004f9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0308 	bic.w	r3, r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <TIM_OC1_SetConfig+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0210 	bic.w	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0320 	bic.w	r3, r3, #32
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <TIM_OC2_SetConfig+0xd4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10d      	bne.n	8005070 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <TIM_OC2_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d113      	bne.n	80050a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000

080050cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <TIM_OC3_SetConfig+0xd0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d10d      	bne.n	8005146 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <TIM_OC3_SetConfig+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40010000 	.word	0x40010000

080051a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a10      	ldr	r2, [pc, #64]	; (800523c <TIM_OC4_SetConfig+0x9c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d109      	bne.n	8005214 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40010000 	.word	0x40010000

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	f043 0307 	orr.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	431a      	orrs	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2201      	movs	r2, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e050      	b.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d013      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10c      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40014000 	.word	0x40014000

0800549c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03f      	b.n	8005556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd f8e6 	bl	80026bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fe49 	bl	80061a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e021      	b.n	80055b4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	; 0x24
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005586:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fd f959 	bl	8002840 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d17c      	bne.n	80056d6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_UART_Transmit+0x2c>
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e075      	b.n	80056d8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Transmit+0x3e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e06e      	b.n	80056d8 <HAL_UART_Transmit+0x11c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2221      	movs	r2, #33	; 0x21
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005610:	f7fd fb14 	bl	8002c3c <HAL_GetTick>
 8005614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d108      	bne.n	800563e <HAL_UART_Transmit+0x82>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e003      	b.n	8005646 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800564e:	e02a      	b.n	80056a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fb5a 	bl	8005d14 <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e036      	b.n	80056d8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800567e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	3302      	adds	r3, #2
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e007      	b.n	8005698 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1cf      	bne.n	8005650 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fb2a 	bl	8005d14 <UART_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d130      	bne.n	800575c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_Transmit_IT+0x26>
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e029      	b.n	800575e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UART_Transmit_IT+0x38>
 8005714:	2302      	movs	r3, #2
 8005716:	e022      	b.n	800575e <HAL_UART_Transmit_IT+0x7e>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2221      	movs	r2, #33	; 0x21
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005756:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	e000      	b.n	800575e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	d11d      	bne.n	80057c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Receive_IT+0x26>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e016      	b.n	80057c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Receive_IT+0x38>
 800579e:	2302      	movs	r3, #2
 80057a0:	e00f      	b.n	80057c2 <HAL_UART_Receive_IT+0x58>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	461a      	mov	r2, r3
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fb1a 	bl	8005df0 <UART_Start_Receive_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b0ba      	sub	sp, #232	; 0xe8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800580a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_UART_IRQHandler+0x66>
 800581e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbfd 	bl	800602a <UART_Receive_IT>
      return;
 8005830:	e256      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80de 	beq.w	80059f8 <HAL_UART_IRQHandler+0x22c>
 800583c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80d1 	beq.w	80059f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0xae>
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xd2>
 8005886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f043 0202 	orr.w	r2, r3, #2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_UART_IRQHandler+0xf6>
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0204 	orr.w	r2, r3, #4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d011      	beq.n	80058f2 <HAL_UART_IRQHandler+0x126>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f043 0208 	orr.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 81ed 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_UART_IRQHandler+0x14e>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb88 	bl	800602a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_UART_IRQHandler+0x17a>
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d04f      	beq.n	80059e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa90 	bl	8005e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d141      	bne.n	80059de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800598a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800599e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1d9      	bne.n	800595a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d013      	beq.n	80059d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	4a7d      	ldr	r2, [pc, #500]	; (8005ba8 <HAL_UART_IRQHandler+0x3dc>)
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fb21 	bl	8003002 <HAL_DMA_Abort_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	e00e      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc fb66 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	e00a      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc fb62 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	e006      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fb5e 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059f2:	e170      	b.n	8005cd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	bf00      	nop
    return;
 80059f6:	e16e      	b.n	8005cd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	f040 814a 	bne.w	8005c96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8143 	beq.w	8005c96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 813c 	beq.w	8005c96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	f040 80b4 	bne.w	8005bac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8140 	beq.w	8005cda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f080 8139 	bcs.w	8005cda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	f000 8088 	beq.w	8005b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1d9      	bne.n	8005a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e1      	bne.n	8005aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e3      	bne.n	8005b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b70:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e3      	bne.n	8005b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd f9ca 	bl	8002f22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8ac 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ba4:	e099      	b.n	8005cda <HAL_UART_IRQHandler+0x50e>
 8005ba6:	bf00      	nop
 8005ba8:	08005f33 	.word	0x08005f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 808b 	beq.w	8005cde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8086 	beq.w	8005cde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bf6:	647a      	str	r2, [r7, #68]	; 0x44
 8005bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e3      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e3      	bne.n	8005c0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0310 	bic.w	r3, r3, #16
 8005c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c74:	61fa      	str	r2, [r7, #28]
 8005c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	69b9      	ldr	r1, [r7, #24]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	617b      	str	r3, [r7, #20]
   return(result);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e3      	bne.n	8005c50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f834 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c94:	e023      	b.n	8005cde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x4ea>
 8005ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f953 	bl	8005f5a <UART_Transmit_IT>
    return;
 8005cb4:	e014      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x514>
 8005cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f993 	bl	8005ffa <UART_EndTransmit_IT>
    return;
 8005cd4:	e004      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
    return;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8005cde:	bf00      	nop
  }
}
 8005ce0:	37e8      	adds	r7, #232	; 0xe8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop

08005ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b090      	sub	sp, #64	; 0x40
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	e050      	b.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d04c      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d34:	f7fc ff82 	bl	8002c3c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d241      	bcs.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d64:	637a      	str	r2, [r7, #52]	; 0x34
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	613b      	str	r3, [r7, #16]
   return(result);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d98:	623a      	str	r2, [r7, #32]
 8005d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e00f      	b.n	8005de8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d09f      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3740      	adds	r7, #64	; 0x40
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2222      	movs	r2, #34	; 0x22
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0220 	orr.w	r2, r2, #32
 8005e5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b095      	sub	sp, #84	; 0x54
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e94:	643a      	str	r2, [r7, #64]	; 0x40
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e5      	bne.n	8005e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d119      	bne.n	8005f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f04:	61ba      	str	r2, [r7, #24]
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6979      	ldr	r1, [r7, #20]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	613b      	str	r3, [r7, #16]
   return(result);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f26:	bf00      	nop
 8005f28:	3754      	adds	r7, #84	; 0x54
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7fc f8ab 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b21      	cmp	r3, #33	; 0x21
 8005f6c:	d13e      	bne.n	8005fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d114      	bne.n	8005fa2 <UART_Transmit_IT+0x48>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	621a      	str	r2, [r3, #32]
 8005fa0:	e008      	b.n	8005fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6211      	str	r1, [r2, #32]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fe64 	bl	8005ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	; 0x30
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b22      	cmp	r3, #34	; 0x22
 800603c:	f040 80ab 	bne.w	8006196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d117      	bne.n	800607a <UART_Receive_IT+0x50>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d113      	bne.n	800607a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	b29a      	uxth	r2, r3
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
 8006078:	e026      	b.n	80060c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608c:	d007      	beq.n	800609e <UART_Receive_IT+0x74>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <UART_Receive_IT+0x82>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e008      	b.n	80060be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4619      	mov	r1, r3
 80060d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d15a      	bne.n	8006192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0220 	bic.w	r2, r2, #32
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d135      	bne.n	8006188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 0310 	bic.w	r3, r3, #16
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	623a      	str	r2, [r7, #32]
 8006144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b10      	cmp	r3, #16
 8006162:	d10a      	bne.n	800617a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fdbb 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
 8006186:	e002      	b.n	800618e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fb ffe1 	bl	8002150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e002      	b.n	8006198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b0c0      	sub	sp, #256	; 0x100
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	68d9      	ldr	r1, [r3, #12]
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	ea40 0301 	orr.w	r3, r0, r1
 80061c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	431a      	orrs	r2, r3
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f8:	f021 010c 	bic.w	r1, r1, #12
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006206:	430b      	orrs	r3, r1
 8006208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	6999      	ldr	r1, [r3, #24]
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	ea40 0301 	orr.w	r3, r0, r1
 8006226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b8f      	ldr	r3, [pc, #572]	; (800646c <UART_SetConfig+0x2cc>)
 8006230:	429a      	cmp	r2, r3
 8006232:	d005      	beq.n	8006240 <UART_SetConfig+0xa0>
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <UART_SetConfig+0x2d0>)
 800623c:	429a      	cmp	r2, r3
 800623e:	d104      	bne.n	800624a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006240:	f7fd fde2 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8006244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006248:	e003      	b.n	8006252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800624a:	f7fd fdc9 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 800624e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625c:	f040 810c 	bne.w	8006478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800626e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	1891      	adds	r1, r2, r2
 8006278:	65b9      	str	r1, [r7, #88]	; 0x58
 800627a:	415b      	adcs	r3, r3
 800627c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006282:	4621      	mov	r1, r4
 8006284:	eb12 0801 	adds.w	r8, r2, r1
 8006288:	4629      	mov	r1, r5
 800628a:	eb43 0901 	adc.w	r9, r3, r1
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800629a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800629e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062a2:	4690      	mov	r8, r2
 80062a4:	4699      	mov	r9, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	eb18 0303 	adds.w	r3, r8, r3
 80062ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b0:	462b      	mov	r3, r5
 80062b2:	eb49 0303 	adc.w	r3, r9, r3
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062ce:	460b      	mov	r3, r1
 80062d0:	18db      	adds	r3, r3, r3
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
 80062d4:	4613      	mov	r3, r2
 80062d6:	eb42 0303 	adc.w	r3, r2, r3
 80062da:	657b      	str	r3, [r7, #84]	; 0x54
 80062dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062e4:	f7f9 ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b61      	ldr	r3, [pc, #388]	; (8006474 <UART_SetConfig+0x2d4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006310:	415b      	adcs	r3, r3
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006318:	4641      	mov	r1, r8
 800631a:	eb12 0a01 	adds.w	sl, r2, r1
 800631e:	4649      	mov	r1, r9
 8006320:	eb43 0b01 	adc.w	fp, r3, r1
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006338:	4692      	mov	sl, r2
 800633a:	469b      	mov	fp, r3
 800633c:	4643      	mov	r3, r8
 800633e:	eb1a 0303 	adds.w	r3, sl, r3
 8006342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006346:	464b      	mov	r3, r9
 8006348:	eb4b 0303 	adc.w	r3, fp, r3
 800634c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800635c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006364:	460b      	mov	r3, r1
 8006366:	18db      	adds	r3, r3, r3
 8006368:	643b      	str	r3, [r7, #64]	; 0x40
 800636a:	4613      	mov	r3, r2
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	647b      	str	r3, [r7, #68]	; 0x44
 8006372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800637a:	f7f9 ff99 	bl	80002b0 <__aeabi_uldivmod>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4611      	mov	r1, r2
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <UART_SetConfig+0x2d4>)
 8006386:	fba3 2301 	umull	r2, r3, r3, r1
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2264      	movs	r2, #100	; 0x64
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	1acb      	subs	r3, r1, r3
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <UART_SetConfig+0x2d4>)
 800639c:	fba3 2302 	umull	r2, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063a8:	441c      	add	r4, r3
 80063aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80063c4:	415b      	adcs	r3, r3
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6339      	str	r1, [r7, #48]	; 0x30
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006400:	464b      	mov	r3, r9
 8006402:	460a      	mov	r2, r1
 8006404:	eb42 0303 	adc.w	r3, r2, r3
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800641c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006420:	460b      	mov	r3, r1
 8006422:	18db      	adds	r3, r3, r3
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
 8006426:	4613      	mov	r3, r2
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006436:	f7f9 ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <UART_SetConfig+0x2d4>)
 8006440:	fba3 1302 	umull	r1, r3, r3, r2
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	2164      	movs	r1, #100	; 0x64
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	3332      	adds	r3, #50	; 0x32
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <UART_SetConfig+0x2d4>)
 8006454:	fba2 2303 	umull	r2, r3, r2, r3
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	f003 0207 	and.w	r2, r3, #7
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4422      	add	r2, r4
 8006466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006468:	e106      	b.n	8006678 <UART_SetConfig+0x4d8>
 800646a:	bf00      	nop
 800646c:	40011000 	.word	0x40011000
 8006470:	40011400 	.word	0x40011400
 8006474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	1891      	adds	r1, r2, r2
 8006490:	6239      	str	r1, [r7, #32]
 8006492:	415b      	adcs	r3, r3
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800649a:	4641      	mov	r1, r8
 800649c:	1854      	adds	r4, r2, r1
 800649e:	4649      	mov	r1, r9
 80064a0:	eb43 0501 	adc.w	r5, r3, r1
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	00eb      	lsls	r3, r5, #3
 80064ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b2:	00e2      	lsls	r2, r4, #3
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	4643      	mov	r3, r8
 80064ba:	18e3      	adds	r3, r4, r3
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c0:	464b      	mov	r3, r9
 80064c2:	eb45 0303 	adc.w	r3, r5, r3
 80064c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064e6:	4629      	mov	r1, r5
 80064e8:	008b      	lsls	r3, r1, #2
 80064ea:	4621      	mov	r1, r4
 80064ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f0:	4621      	mov	r1, r4
 80064f2:	008a      	lsls	r2, r1, #2
 80064f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064f8:	f7f9 feda 	bl	80002b0 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4b60      	ldr	r3, [pc, #384]	; (8006684 <UART_SetConfig+0x4e4>)
 8006502:	fba3 2302 	umull	r2, r3, r3, r2
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	011c      	lsls	r4, r3, #4
 800650a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	1891      	adds	r1, r2, r2
 8006522:	61b9      	str	r1, [r7, #24]
 8006524:	415b      	adcs	r3, r3
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652c:	4641      	mov	r1, r8
 800652e:	1851      	adds	r1, r2, r1
 8006530:	6139      	str	r1, [r7, #16]
 8006532:	4649      	mov	r1, r9
 8006534:	414b      	adcs	r3, r1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006544:	4659      	mov	r1, fp
 8006546:	00cb      	lsls	r3, r1, #3
 8006548:	4651      	mov	r1, sl
 800654a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800654e:	4651      	mov	r1, sl
 8006550:	00ca      	lsls	r2, r1, #3
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	4603      	mov	r3, r0
 8006558:	4642      	mov	r2, r8
 800655a:	189b      	adds	r3, r3, r2
 800655c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006560:	464b      	mov	r3, r9
 8006562:	460a      	mov	r2, r1
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	67bb      	str	r3, [r7, #120]	; 0x78
 8006576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006584:	4649      	mov	r1, r9
 8006586:	008b      	lsls	r3, r1, #2
 8006588:	4641      	mov	r1, r8
 800658a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658e:	4641      	mov	r1, r8
 8006590:	008a      	lsls	r2, r1, #2
 8006592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006596:	f7f9 fe8b 	bl	80002b0 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	4b38      	ldr	r3, [pc, #224]	; (8006684 <UART_SetConfig+0x4e4>)
 80065a2:	fba3 2301 	umull	r2, r3, r3, r1
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	2264      	movs	r2, #100	; 0x64
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	1acb      	subs	r3, r1, r3
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	3332      	adds	r3, #50	; 0x32
 80065b4:	4a33      	ldr	r2, [pc, #204]	; (8006684 <UART_SetConfig+0x4e4>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c0:	441c      	add	r4, r3
 80065c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c6:	2200      	movs	r2, #0
 80065c8:	673b      	str	r3, [r7, #112]	; 0x70
 80065ca:	677a      	str	r2, [r7, #116]	; 0x74
 80065cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	1891      	adds	r1, r2, r2
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	415b      	adcs	r3, r3
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e0:	4641      	mov	r1, r8
 80065e2:	1851      	adds	r1, r2, r1
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	4649      	mov	r1, r9
 80065e8:	414b      	adcs	r3, r1
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065f8:	4659      	mov	r1, fp
 80065fa:	00cb      	lsls	r3, r1, #3
 80065fc:	4651      	mov	r1, sl
 80065fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006602:	4651      	mov	r1, sl
 8006604:	00ca      	lsls	r2, r1, #3
 8006606:	4610      	mov	r0, r2
 8006608:	4619      	mov	r1, r3
 800660a:	4603      	mov	r3, r0
 800660c:	4642      	mov	r2, r8
 800660e:	189b      	adds	r3, r3, r2
 8006610:	66bb      	str	r3, [r7, #104]	; 0x68
 8006612:	464b      	mov	r3, r9
 8006614:	460a      	mov	r2, r1
 8006616:	eb42 0303 	adc.w	r3, r2, r3
 800661a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	663b      	str	r3, [r7, #96]	; 0x60
 8006626:	667a      	str	r2, [r7, #100]	; 0x64
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006634:	4649      	mov	r1, r9
 8006636:	008b      	lsls	r3, r1, #2
 8006638:	4641      	mov	r1, r8
 800663a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663e:	4641      	mov	r1, r8
 8006640:	008a      	lsls	r2, r1, #2
 8006642:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006646:	f7f9 fe33 	bl	80002b0 <__aeabi_uldivmod>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <UART_SetConfig+0x4e4>)
 8006650:	fba3 1302 	umull	r1, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	2164      	movs	r1, #100	; 0x64
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	3332      	adds	r3, #50	; 0x32
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <UART_SetConfig+0x4e4>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4422      	add	r2, r4
 8006676:	609a      	str	r2, [r3, #8]
}
 8006678:	bf00      	nop
 800667a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800667e:	46bd      	mov	sp, r7
 8006680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006684:	51eb851f 	.word	0x51eb851f

08006688 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <MUX>:
void MUX(struct WIFI *a)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2205      	movs	r2, #5
 8006744:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2206      	movs	r2, #6
 800679c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2208      	movs	r2, #8
 80067c8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2209      	movs	r2, #9
 80067f4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2207      	movs	r2, #7
 8006820:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80069d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d6:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80069da:	af06      	add	r7, sp, #24
 80069dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e4:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80069fe:	2300      	movs	r3, #0
 8006a00:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006a04:	2320      	movs	r3, #32
 8006a06:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006a0a:	2322      	movs	r3, #34	; 0x22
 8006a0c:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006a10:	4b71      	ldr	r3, [pc, #452]	; (8006bd8 <AT_ESP8266_ND+0x204>)
 8006a12:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006a16:	4a71      	ldr	r2, [pc, #452]	; (8006bdc <AT_ESP8266_ND+0x208>)
 8006a18:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	8019      	strh	r1, [r3, #0]
 8006a22:	3302      	adds	r3, #2
 8006a24:	0c12      	lsrs	r2, r2, #16
 8006a26:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006a28:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006a2c:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006a30:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006a34:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fbc6 	bl	80001f4 <strlen>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7f9 fbab 	bl	80001f4 <strlen>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006ab0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2206      	movs	r2, #6
 8006abc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006af8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006afc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b06:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b0a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b0e:	6809      	ldr	r1, [r1, #0]
 8006b10:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b14:	2600      	movs	r6, #0
 8006b16:	9604      	str	r6, [sp, #16]
 8006b18:	9103      	str	r1, [sp, #12]
 8006b1a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b1e:	9102      	str	r1, [sp, #8]
 8006b20:	9201      	str	r2, [sp, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	462b      	mov	r3, r5
 8006b26:	4a2e      	ldr	r2, [pc, #184]	; (8006be0 <AT_ESP8266_ND+0x20c>)
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f007 fd4f 	bl	800e5cc <FT_String_ND>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	f040 812a 	bne.w	8006d8a <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006b36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2206      	movs	r2, #6
 8006b42:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d145      	bne.n	8006be4 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b94:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b9e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ba2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ba6:	6809      	ldr	r1, [r1, #0]
 8006ba8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bac:	2604      	movs	r6, #4
 8006bae:	9604      	str	r6, [sp, #16]
 8006bb0:	9103      	str	r1, [sp, #12]
 8006bb2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bb6:	9102      	str	r1, [sp, #8]
 8006bb8:	9201      	str	r2, [sp, #4]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <AT_ESP8266_ND+0x20c>)
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	f007 fd03 	bl	800e5cc <FT_String_ND>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006bd6:	e044      	b.n	8006c62 <AT_ESP8266_ND+0x28e>
 8006bd8:	00222c22 	.word	0x00222c22
 8006bdc:	08010768 	.word	0x08010768
 8006be0:	08010590 	.word	0x08010590
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c20:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c2a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c2e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c32:	6809      	ldr	r1, [r1, #0]
 8006c34:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c38:	2605      	movs	r6, #5
 8006c3a:	9604      	str	r6, [sp, #16]
 8006c3c:	9103      	str	r1, [sp, #12]
 8006c3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c42:	9102      	str	r1, [sp, #8]
 8006c44:	9201      	str	r2, [sp, #4]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	462b      	mov	r3, r5
 8006c4a:	4ac1      	ldr	r2, [pc, #772]	; (8006f50 <AT_ESP8266_ND+0x57c>)
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f007 fcbd 	bl	800e5cc <FT_String_ND>
 8006c52:	4602      	mov	r2, r0
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d15a      	bne.n	8006d2a <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2263      	movs	r2, #99	; 0x63
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006cca:	2341      	movs	r3, #65	; 0x41
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f007 ffe2 	bl	800ec98 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006cf0:	2341      	movs	r3, #65	; 0x41
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	f007 ffce 	bl	800ec98 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006d38:	2b05      	cmp	r3, #5
 8006d3a:	d126      	bne.n	8006d8a <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2237      	movs	r2, #55	; 0x37
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2204      	movs	r2, #4
 8006d96:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dd2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dd6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dda:	6812      	ldr	r2, [r2, #0]
 8006ddc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006de0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006de4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006de8:	6809      	ldr	r1, [r1, #0]
 8006dea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dee:	2600      	movs	r6, #0
 8006df0:	9604      	str	r6, [sp, #16]
 8006df2:	9103      	str	r1, [sp, #12]
 8006df4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006df8:	9102      	str	r1, [sp, #8]
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	462b      	mov	r3, r5
 8006e00:	4a54      	ldr	r2, [pc, #336]	; (8006f54 <AT_ESP8266_ND+0x580>)
 8006e02:	4621      	mov	r1, r4
 8006e04:	f007 fbe2 	bl	800e5cc <FT_String_ND>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	f040 8334 	bne.w	8007478 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2206      	movs	r2, #6
 8006e22:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006e26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e5e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e62:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e6c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e70:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e74:	6809      	ldr	r1, [r1, #0]
 8006e76:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	9604      	str	r6, [sp, #16]
 8006e7e:	9103      	str	r1, [sp, #12]
 8006e80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e84:	9102      	str	r1, [sp, #8]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <AT_ESP8266_ND+0x584>)
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f007 fb9c 	bl	800e5cc <FT_String_ND>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d113      	bne.n	8006ec2 <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e9a:	2313      	movs	r3, #19
 8006e9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006ebe:	f001 b981 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006eee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f0a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f0e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f18:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f1c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f20:	6809      	ldr	r1, [r1, #0]
 8006f22:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f26:	2600      	movs	r6, #0
 8006f28:	9604      	str	r6, [sp, #16]
 8006f2a:	9103      	str	r1, [sp, #12]
 8006f2c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f30:	9102      	str	r1, [sp, #8]
 8006f32:	9201      	str	r2, [sp, #4]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	462b      	mov	r3, r5
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <AT_ESP8266_ND+0x588>)
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	f007 fb46 	bl	800e5cc <FT_String_ND>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d10c      	bne.n	8006f60 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006f46:	230d      	movs	r3, #13
 8006f48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f4c:	f001 b93a 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
 8006f50:	08010590 	.word	0x08010590
 8006f54:	08010598 	.word	0x08010598
 8006f58:	080105a0 	.word	0x080105a0
 8006f5c:	080105a8 	.word	0x080105a8
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fa8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fb6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fbe:	6809      	ldr	r1, [r1, #0]
 8006fc0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	9604      	str	r6, [sp, #16]
 8006fc8:	9103      	str	r1, [sp, #12]
 8006fca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fce:	9102      	str	r1, [sp, #8]
 8006fd0:	9201      	str	r2, [sp, #4]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	4ab7      	ldr	r2, [pc, #732]	; (80072b4 <AT_ESP8266_ND+0x8e0>)
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f007 faf7 	bl	800e5cc <FT_String_ND>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d104      	bne.n	8006fee <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006fe4:	231c      	movs	r3, #28
 8006fe6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fea:	f001 b8eb 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	220f      	movs	r2, #15
 8006ffa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800700c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007010:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800701a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800701e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800702c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007036:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800703a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007044:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007048:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800704c:	6809      	ldr	r1, [r1, #0]
 800704e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007052:	2600      	movs	r6, #0
 8007054:	9604      	str	r6, [sp, #16]
 8007056:	9103      	str	r1, [sp, #12]
 8007058:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800705c:	9102      	str	r1, [sp, #8]
 800705e:	9201      	str	r2, [sp, #4]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	462b      	mov	r3, r5
 8007064:	4a94      	ldr	r2, [pc, #592]	; (80072b8 <AT_ESP8266_ND+0x8e4>)
 8007066:	4621      	mov	r1, r4
 8007068:	f007 fab0 	bl	800e5cc <FT_String_ND>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d104      	bne.n	800707c <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8007072:	2317      	movs	r3, #23
 8007074:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007078:	f001 b8a4 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 800707c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2203      	movs	r2, #3
 8007088:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 800708c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800709a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070c4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070c8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070d2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070d6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070da:	6809      	ldr	r1, [r1, #0]
 80070dc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070e0:	2600      	movs	r6, #0
 80070e2:	9604      	str	r6, [sp, #16]
 80070e4:	9103      	str	r1, [sp, #12]
 80070e6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070ea:	9102      	str	r1, [sp, #8]
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	462b      	mov	r3, r5
 80070f2:	4a72      	ldr	r2, [pc, #456]	; (80072bc <AT_ESP8266_ND+0x8e8>)
 80070f4:	4621      	mov	r1, r4
 80070f6:	f007 fa69 	bl	800e5cc <FT_String_ND>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d104      	bne.n	800710a <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8007100:	2314      	movs	r3, #20
 8007102:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007106:	f001 b85d 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 800710a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	220c      	movs	r2, #12
 8007116:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800711a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007152:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007156:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007160:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007164:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007168:	6809      	ldr	r1, [r1, #0]
 800716a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800716e:	2600      	movs	r6, #0
 8007170:	9604      	str	r6, [sp, #16]
 8007172:	9103      	str	r1, [sp, #12]
 8007174:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007178:	9102      	str	r1, [sp, #8]
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	462b      	mov	r3, r5
 8007180:	4a4f      	ldr	r2, [pc, #316]	; (80072c0 <AT_ESP8266_ND+0x8ec>)
 8007182:	4621      	mov	r1, r4
 8007184:	f007 fa22 	bl	800e5cc <FT_String_ND>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d104      	bne.n	8007198 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800718e:	2315      	movs	r3, #21
 8007190:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007194:	f001 b816 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	220b      	movs	r2, #11
 80071a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80071a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071f6:	6809      	ldr	r1, [r1, #0]
 80071f8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071fc:	2600      	movs	r6, #0
 80071fe:	9604      	str	r6, [sp, #16]
 8007200:	9103      	str	r1, [sp, #12]
 8007202:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007206:	9102      	str	r1, [sp, #8]
 8007208:	9201      	str	r2, [sp, #4]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	462b      	mov	r3, r5
 800720e:	4a2d      	ldr	r2, [pc, #180]	; (80072c4 <AT_ESP8266_ND+0x8f0>)
 8007210:	4621      	mov	r1, r4
 8007212:	f007 f9db 	bl	800e5cc <FT_String_ND>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d104      	bne.n	8007226 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 800721c:	2309      	movs	r3, #9
 800721e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007222:	f000 bfcf 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	220b      	movs	r2, #11
 8007232:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800723a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800726e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007272:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800727c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007280:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007284:	6809      	ldr	r1, [r1, #0]
 8007286:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800728a:	2600      	movs	r6, #0
 800728c:	9604      	str	r6, [sp, #16]
 800728e:	9103      	str	r1, [sp, #12]
 8007290:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007294:	9102      	str	r1, [sp, #8]
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	462b      	mov	r3, r5
 800729c:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <AT_ESP8266_ND+0x8f4>)
 800729e:	4621      	mov	r1, r4
 80072a0:	f007 f994 	bl	800e5cc <FT_String_ND>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d110      	bne.n	80072cc <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 80072aa:	2307      	movs	r3, #7
 80072ac:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072b0:	f000 bf88 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
 80072b4:	080105b4 	.word	0x080105b4
 80072b8:	080105c0 	.word	0x080105c0
 80072bc:	080105d0 	.word	0x080105d0
 80072c0:	080105d4 	.word	0x080105d4
 80072c4:	080105e4 	.word	0x080105e4
 80072c8:	080105f0 	.word	0x080105f0
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 80072cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	220b      	movs	r2, #11
 80072d8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800730a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007314:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007318:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007322:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007326:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800732a:	6809      	ldr	r1, [r1, #0]
 800732c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007330:	2600      	movs	r6, #0
 8007332:	9604      	str	r6, [sp, #16]
 8007334:	9103      	str	r1, [sp, #12]
 8007336:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800733a:	9102      	str	r1, [sp, #8]
 800733c:	9201      	str	r2, [sp, #4]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	462b      	mov	r3, r5
 8007342:	4ab7      	ldr	r2, [pc, #732]	; (8007620 <AT_ESP8266_ND+0xc4c>)
 8007344:	4621      	mov	r1, r4
 8007346:	f007 f941 	bl	800e5cc <FT_String_ND>
 800734a:	4603      	mov	r3, r0
 800734c:	2b01      	cmp	r3, #1
 800734e:	d104      	bne.n	800735a <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007350:	2308      	movs	r3, #8
 8007352:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007356:	f000 bf35 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 800735a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	220a      	movs	r2, #10
 8007366:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800736a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007398:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073b8:	6809      	ldr	r1, [r1, #0]
 80073ba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073be:	2600      	movs	r6, #0
 80073c0:	9604      	str	r6, [sp, #16]
 80073c2:	9103      	str	r1, [sp, #12]
 80073c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073c8:	9102      	str	r1, [sp, #8]
 80073ca:	9201      	str	r2, [sp, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	462b      	mov	r3, r5
 80073d0:	4a94      	ldr	r2, [pc, #592]	; (8007624 <AT_ESP8266_ND+0xc50>)
 80073d2:	4621      	mov	r1, r4
 80073d4:	f007 f8fa 	bl	800e5cc <FT_String_ND>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d104      	bne.n	80073e8 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 80073de:	231b      	movs	r3, #27
 80073e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073e4:	f000 beee 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 80073e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2207      	movs	r2, #7
 80073f4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80073f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007422:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007426:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007430:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007434:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800743e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007442:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007446:	6809      	ldr	r1, [r1, #0]
 8007448:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800744c:	2600      	movs	r6, #0
 800744e:	9604      	str	r6, [sp, #16]
 8007450:	9103      	str	r1, [sp, #12]
 8007452:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007456:	9102      	str	r1, [sp, #8]
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	462b      	mov	r3, r5
 800745e:	4a72      	ldr	r2, [pc, #456]	; (8007628 <AT_ESP8266_ND+0xc54>)
 8007460:	4621      	mov	r1, r4
 8007462:	f007 f8b3 	bl	800e5cc <FT_String_ND>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	f040 86ab 	bne.w	80081c4 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 800746e:	230f      	movs	r3, #15
 8007470:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007474:	f000 bea6 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2207      	movs	r2, #7
 8007484:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800748c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074c4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074ce:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074d2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d6:	6809      	ldr	r1, [r1, #0]
 80074d8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074dc:	2600      	movs	r6, #0
 80074de:	9604      	str	r6, [sp, #16]
 80074e0:	9103      	str	r1, [sp, #12]
 80074e2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074e6:	9102      	str	r1, [sp, #8]
 80074e8:	9201      	str	r2, [sp, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	462b      	mov	r3, r5
 80074ee:	4a4f      	ldr	r2, [pc, #316]	; (800762c <AT_ESP8266_ND+0xc58>)
 80074f0:	4621      	mov	r1, r4
 80074f2:	f007 f86b 	bl	800e5cc <FT_String_ND>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 8326 	bne.w	8007b4a <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 80074fe:	2302      	movs	r3, #2
 8007500:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2208      	movs	r2, #8
 8007510:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 8007514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800753e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800754c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007550:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800755a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800755e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007562:	6809      	ldr	r1, [r1, #0]
 8007564:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007568:	2600      	movs	r6, #0
 800756a:	9604      	str	r6, [sp, #16]
 800756c:	9103      	str	r1, [sp, #12]
 800756e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007572:	9102      	str	r1, [sp, #8]
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	462b      	mov	r3, r5
 800757a:	4a2d      	ldr	r2, [pc, #180]	; (8007630 <AT_ESP8266_ND+0xc5c>)
 800757c:	4621      	mov	r1, r4
 800757e:	f007 f825 	bl	800e5cc <FT_String_ND>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d104      	bne.n	8007592 <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007588:	2306      	movs	r3, #6
 800758a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800758e:	f000 be19 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2215      	movs	r2, #21
 800759e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80075a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80075be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075da:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075de:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075e8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075ec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075f0:	6809      	ldr	r1, [r1, #0]
 80075f2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075f6:	2600      	movs	r6, #0
 80075f8:	9604      	str	r6, [sp, #16]
 80075fa:	9103      	str	r1, [sp, #12]
 80075fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007600:	9102      	str	r1, [sp, #8]
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462b      	mov	r3, r5
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <AT_ESP8266_ND+0xc60>)
 800760a:	4621      	mov	r1, r4
 800760c:	f006 ffde 	bl	800e5cc <FT_String_ND>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d110      	bne.n	8007638 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007616:	230e      	movs	r3, #14
 8007618:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800761c:	f000 bdd2 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
 8007620:	080105fc 	.word	0x080105fc
 8007624:	08010608 	.word	0x08010608
 8007628:	08010614 	.word	0x08010614
 800762c:	0801061c 	.word	0x0801061c
 8007630:	08010624 	.word	0x08010624
 8007634:	08010630 	.word	0x08010630
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	220c      	movs	r2, #12
 8007644:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007680:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007684:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800768e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007692:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007696:	6809      	ldr	r1, [r1, #0]
 8007698:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800769c:	2600      	movs	r6, #0
 800769e:	9604      	str	r6, [sp, #16]
 80076a0:	9103      	str	r1, [sp, #12]
 80076a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076a6:	9102      	str	r1, [sp, #8]
 80076a8:	9201      	str	r2, [sp, #4]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	462b      	mov	r3, r5
 80076ae:	4ab7      	ldr	r2, [pc, #732]	; (800798c <AT_ESP8266_ND+0xfb8>)
 80076b0:	4621      	mov	r1, r4
 80076b2:	f006 ff8b 	bl	800e5cc <FT_String_ND>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d104      	bne.n	80076c6 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 80076bc:	2316      	movs	r3, #22
 80076be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076c2:	f000 bd7f 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 80076c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	220b      	movs	r2, #11
 80076d2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80076d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800770e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007712:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800771c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007720:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007724:	6809      	ldr	r1, [r1, #0]
 8007726:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800772a:	2600      	movs	r6, #0
 800772c:	9604      	str	r6, [sp, #16]
 800772e:	9103      	str	r1, [sp, #12]
 8007730:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007734:	9102      	str	r1, [sp, #8]
 8007736:	9201      	str	r2, [sp, #4]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462b      	mov	r3, r5
 800773c:	4a94      	ldr	r2, [pc, #592]	; (8007990 <AT_ESP8266_ND+0xfbc>)
 800773e:	4621      	mov	r1, r4
 8007740:	f006 ff44 	bl	800e5cc <FT_String_ND>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d104      	bne.n	8007754 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 800774a:	231a      	movs	r3, #26
 800774c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007750:	f000 bd38 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8007754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2211      	movs	r2, #17
 8007760:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007764:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007768:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800778e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007792:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800779c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077a0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077aa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077ae:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077b2:	6809      	ldr	r1, [r1, #0]
 80077b4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077b8:	2600      	movs	r6, #0
 80077ba:	9604      	str	r6, [sp, #16]
 80077bc:	9103      	str	r1, [sp, #12]
 80077be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077c2:	9102      	str	r1, [sp, #8]
 80077c4:	9201      	str	r2, [sp, #4]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462b      	mov	r3, r5
 80077ca:	4a72      	ldr	r2, [pc, #456]	; (8007994 <AT_ESP8266_ND+0xfc0>)
 80077cc:	4621      	mov	r1, r4
 80077ce:	f006 fefd 	bl	800e5cc <FT_String_ND>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d104      	bne.n	80077e2 <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 80077d8:	2311      	movs	r3, #17
 80077da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077de:	f000 bcf1 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80077e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	220a      	movs	r2, #10
 80077ee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80077f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800780e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800781c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800782a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800782e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007838:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800783c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007840:	6809      	ldr	r1, [r1, #0]
 8007842:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007846:	2600      	movs	r6, #0
 8007848:	9604      	str	r6, [sp, #16]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007850:	9102      	str	r1, [sp, #8]
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	462b      	mov	r3, r5
 8007858:	4a4f      	ldr	r2, [pc, #316]	; (8007998 <AT_ESP8266_ND+0xfc4>)
 800785a:	4621      	mov	r1, r4
 800785c:	f006 feb6 	bl	800e5cc <FT_String_ND>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d104      	bne.n	8007870 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8007866:	231d      	movs	r3, #29
 8007868:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800786c:	f000 bcaa 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	220b      	movs	r2, #11
 800787c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800788e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007892:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800789c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078b8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078bc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078c6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078ca:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078ce:	6809      	ldr	r1, [r1, #0]
 80078d0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078d4:	2600      	movs	r6, #0
 80078d6:	9604      	str	r6, [sp, #16]
 80078d8:	9103      	str	r1, [sp, #12]
 80078da:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078de:	9102      	str	r1, [sp, #8]
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	462b      	mov	r3, r5
 80078e6:	4a2d      	ldr	r2, [pc, #180]	; (800799c <AT_ESP8266_ND+0xfc8>)
 80078e8:	4621      	mov	r1, r4
 80078ea:	f006 fe6f 	bl	800e5cc <FT_String_ND>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d104      	bne.n	80078fe <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 80078f4:	231e      	movs	r3, #30
 80078f6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078fa:	f000 bc63 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 80078fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007902:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	220b      	movs	r2, #11
 800790a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800790e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800791c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800792a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007946:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800794a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007954:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007958:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800795c:	6809      	ldr	r1, [r1, #0]
 800795e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007962:	2600      	movs	r6, #0
 8007964:	9604      	str	r6, [sp, #16]
 8007966:	9103      	str	r1, [sp, #12]
 8007968:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800796c:	9102      	str	r1, [sp, #8]
 800796e:	9201      	str	r2, [sp, #4]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	462b      	mov	r3, r5
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <AT_ESP8266_ND+0xfcc>)
 8007976:	4621      	mov	r1, r4
 8007978:	f006 fe28 	bl	800e5cc <FT_String_ND>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d110      	bne.n	80079a4 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007982:	231f      	movs	r3, #31
 8007984:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007988:	f000 bc1c 	b.w	80081c4 <AT_ESP8266_ND+0x17f0>
 800798c:	080105d4 	.word	0x080105d4
 8007990:	080105e4 	.word	0x080105e4
 8007994:	08010648 	.word	0x08010648
 8007998:	080105b4 	.word	0x080105b4
 800799c:	080105f0 	.word	0x080105f0
 80079a0:	080105fc 	.word	0x080105fc
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 80079a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2208      	movs	r2, #8
 80079b0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80079b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80079de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a02:	6809      	ldr	r1, [r1, #0]
 8007a04:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a08:	2600      	movs	r6, #0
 8007a0a:	9604      	str	r6, [sp, #16]
 8007a0c:	9103      	str	r1, [sp, #12]
 8007a0e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a12:	9102      	str	r1, [sp, #8]
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462b      	mov	r3, r5
 8007a1a:	4ac4      	ldr	r2, [pc, #784]	; (8007d2c <AT_ESP8266_ND+0x1358>)
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	f006 fdd5 	bl	800e5cc <FT_String_ND>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d103      	bne.n	8007a30 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a2e:	e3c9      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	220a      	movs	r2, #10
 8007a3c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a78:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a7c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a8a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a8e:	6809      	ldr	r1, [r1, #0]
 8007a90:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a94:	2600      	movs	r6, #0
 8007a96:	9604      	str	r6, [sp, #16]
 8007a98:	9103      	str	r1, [sp, #12]
 8007a9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a9e:	9102      	str	r1, [sp, #8]
 8007aa0:	9201      	str	r2, [sp, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	4aa2      	ldr	r2, [pc, #648]	; (8007d30 <AT_ESP8266_ND+0x135c>)
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	f006 fd8f 	bl	800e5cc <FT_String_ND>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d103      	bne.n	8007abc <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007ab4:	2321      	movs	r3, #33	; 0x21
 8007ab6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aba:	e383      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2205      	movs	r2, #5
 8007ac8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b1a:	6809      	ldr	r1, [r1, #0]
 8007b1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b20:	2600      	movs	r6, #0
 8007b22:	9604      	str	r6, [sp, #16]
 8007b24:	9103      	str	r1, [sp, #12]
 8007b26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b2a:	9102      	str	r1, [sp, #8]
 8007b2c:	9201      	str	r2, [sp, #4]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462b      	mov	r3, r5
 8007b32:	4a80      	ldr	r2, [pc, #512]	; (8007d34 <AT_ESP8266_ND+0x1360>)
 8007b34:	4621      	mov	r1, r4
 8007b36:	f006 fd49 	bl	800e5cc <FT_String_ND>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	f040 8341 	bne.w	80081c4 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007b42:	2322      	movs	r3, #34	; 0x22
 8007b44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b48:	e33c      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	220f      	movs	r2, #15
 8007b56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ba0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ba4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ba8:	6809      	ldr	r1, [r1, #0]
 8007baa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bae:	2600      	movs	r6, #0
 8007bb0:	9604      	str	r6, [sp, #16]
 8007bb2:	9103      	str	r1, [sp, #12]
 8007bb4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bb8:	9102      	str	r1, [sp, #8]
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	4a5d      	ldr	r2, [pc, #372]	; (8007d38 <AT_ESP8266_ND+0x1364>)
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	f006 fd02 	bl	800e5cc <FT_String_ND>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d112      	bne.n	8007bf4 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007bce:	230a      	movs	r3, #10
 8007bd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007bf2:	e2e7      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2209      	movs	r2, #9
 8007c00:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c52:	6809      	ldr	r1, [r1, #0]
 8007c54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c58:	2600      	movs	r6, #0
 8007c5a:	9604      	str	r6, [sp, #16]
 8007c5c:	9103      	str	r1, [sp, #12]
 8007c5e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c62:	9102      	str	r1, [sp, #8]
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	462b      	mov	r3, r5
 8007c6a:	4a34      	ldr	r2, [pc, #208]	; (8007d3c <AT_ESP8266_ND+0x1368>)
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f006 fcad 	bl	800e5cc <FT_String_ND>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d112      	bne.n	8007c9e <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007c78:	2319      	movs	r3, #25
 8007c7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007c9c:	e292      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ce6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cf4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cf8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cfc:	6809      	ldr	r1, [r1, #0]
 8007cfe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d02:	2600      	movs	r6, #0
 8007d04:	9604      	str	r6, [sp, #16]
 8007d06:	9103      	str	r1, [sp, #12]
 8007d08:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d0c:	9102      	str	r1, [sp, #8]
 8007d0e:	9201      	str	r2, [sp, #4]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	462b      	mov	r3, r5
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <AT_ESP8266_ND+0x136c>)
 8007d16:	4621      	mov	r1, r4
 8007d18:	f006 fc58 	bl	800e5cc <FT_String_ND>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d110      	bne.n	8007d44 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007d22:	2310      	movs	r3, #16
 8007d24:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d28:	e24c      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
 8007d2a:	bf00      	nop
 8007d2c:	0801065c 	.word	0x0801065c
 8007d30:	08010608 	.word	0x08010608
 8007d34:	08010668 	.word	0x08010668
 8007d38:	08010670 	.word	0x08010670
 8007d3c:	08010680 	.word	0x08010680
 8007d40:	08010624 	.word	0x08010624
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d90:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d9a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d9e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007da2:	6809      	ldr	r1, [r1, #0]
 8007da4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007da8:	2300      	movs	r3, #0
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	9103      	str	r1, [sp, #12]
 8007dae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007db2:	9102      	str	r1, [sp, #8]
 8007db4:	9201      	str	r2, [sp, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4633      	mov	r3, r6
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	f006 fc04 	bl	800e5cc <FT_String_ND>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d112      	bne.n	8007df0 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 81f3 	beq.w	80081c4 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007dee:	e1e9      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	220d      	movs	r2, #13
 8007dfc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e38:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e3c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e46:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e4a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e4e:	6809      	ldr	r1, [r1, #0]
 8007e50:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e54:	2600      	movs	r6, #0
 8007e56:	9604      	str	r6, [sp, #16]
 8007e58:	9103      	str	r1, [sp, #12]
 8007e5a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e5e:	9102      	str	r1, [sp, #8]
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	462b      	mov	r3, r5
 8007e66:	4aaf      	ldr	r2, [pc, #700]	; (8008124 <AT_ESP8266_ND+0x1750>)
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f006 fbaf 	bl	800e5cc <FT_String_ND>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d112      	bne.n	8007e9a <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007e74:	2312      	movs	r3, #18
 8007e76:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007e98:	e194      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	220d      	movs	r2, #13
 8007ea6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ec6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ee2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ee6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ef0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ef4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ef8:	6809      	ldr	r1, [r1, #0]
 8007efa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007efe:	2600      	movs	r6, #0
 8007f00:	9604      	str	r6, [sp, #16]
 8007f02:	9103      	str	r1, [sp, #12]
 8007f04:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f08:	9102      	str	r1, [sp, #8]
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462b      	mov	r3, r5
 8007f10:	4a85      	ldr	r2, [pc, #532]	; (8008128 <AT_ESP8266_ND+0x1754>)
 8007f12:	4621      	mov	r1, r4
 8007f14:	f006 fb5a 	bl	800e5cc <FT_String_ND>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d112      	bne.n	8007f44 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f42:	e13f      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	220e      	movs	r2, #14
 8007f50:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f8c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f90:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f9a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f9e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fa2:	6809      	ldr	r1, [r1, #0]
 8007fa4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fa8:	2600      	movs	r6, #0
 8007faa:	9604      	str	r6, [sp, #16]
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fb2:	9102      	str	r1, [sp, #8]
 8007fb4:	9201      	str	r2, [sp, #4]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	462b      	mov	r3, r5
 8007fba:	4a5c      	ldr	r2, [pc, #368]	; (800812c <AT_ESP8266_ND+0x1758>)
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f006 fb05 	bl	800e5cc <FT_String_ND>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d112      	bne.n	8007fee <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007fe6:	230b      	movs	r3, #11
 8007fe8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007fec:	e0ea      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800800c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008010:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800801a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008036:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800803a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008044:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008048:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800804c:	6809      	ldr	r1, [r1, #0]
 800804e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008052:	2600      	movs	r6, #0
 8008054:	9604      	str	r6, [sp, #16]
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800805c:	9102      	str	r1, [sp, #8]
 800805e:	9201      	str	r2, [sp, #4]
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	462b      	mov	r3, r5
 8008064:	4a32      	ldr	r2, [pc, #200]	; (8008130 <AT_ESP8266_ND+0x175c>)
 8008066:	4621      	mov	r1, r4
 8008068:	f006 fab0 	bl	800e5cc <FT_String_ND>
 800806c:	4603      	mov	r3, r0
 800806e:	2b01      	cmp	r3, #1
 8008070:	d112      	bne.n	8008098 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8008072:	2318      	movs	r3, #24
 8008074:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008096:	e095      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2208      	movs	r2, #8
 80080a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80080a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80080b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80080c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80080d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080e4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080f2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080f6:	6809      	ldr	r1, [r1, #0]
 80080f8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080fc:	2600      	movs	r6, #0
 80080fe:	9604      	str	r6, [sp, #16]
 8008100:	9103      	str	r1, [sp, #12]
 8008102:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008106:	9102      	str	r1, [sp, #8]
 8008108:	9201      	str	r2, [sp, #4]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	462b      	mov	r3, r5
 800810e:	4a09      	ldr	r2, [pc, #36]	; (8008134 <AT_ESP8266_ND+0x1760>)
 8008110:	4621      	mov	r1, r4
 8008112:	f006 fa5b 	bl	800e5cc <FT_String_ND>
 8008116:	4603      	mov	r3, r0
 8008118:	2b01      	cmp	r3, #1
 800811a:	d10d      	bne.n	8008138 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 800811c:	2303      	movs	r3, #3
 800811e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008122:	e04f      	b.n	80081c4 <AT_ESP8266_ND+0x17f0>
 8008124:	0801068c 	.word	0x0801068c
 8008128:	0801069c 	.word	0x0801069c
 800812c:	080106ac 	.word	0x080106ac
 8008130:	080106bc 	.word	0x080106bc
 8008134:	080106c8 	.word	0x080106c8
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8008138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800813c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2209      	movs	r2, #9
 8008144:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008172:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008176:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008180:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008184:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800818e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008192:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008196:	6809      	ldr	r1, [r1, #0]
 8008198:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800819c:	2600      	movs	r6, #0
 800819e:	9604      	str	r6, [sp, #16]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081a6:	9102      	str	r1, [sp, #8]
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	462b      	mov	r3, r5
 80081ae:	4a77      	ldr	r2, [pc, #476]	; (800838c <AT_ESP8266_ND+0x19b8>)
 80081b0:	4621      	mov	r1, r4
 80081b2:	f006 fa0b 	bl	800e5cc <FT_String_ND>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d103      	bne.n	80081c4 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 80081bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80081c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	f201 84c6 	bhi.w	8009b66 <AT_ESP8266_ND+0x3192>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <AT_ESP8266_ND+0x180c>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008205 	.word	0x08008205
 80081e4:	08008395 	.word	0x08008395
 80081e8:	08008617 	.word	0x08008617
 80081ec:	08008795 	.word	0x08008795
 80081f0:	0800896d 	.word	0x0800896d
 80081f4:	08008c41 	.word	0x08008c41
 80081f8:	08008ef9 	.word	0x08008ef9
 80081fc:	08009411 	.word	0x08009411
 8008200:	080095e7 	.word	0x080095e7
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008218:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008222:	2b01      	cmp	r3, #1
 8008224:	d14f      	bne.n	80082c6 <AT_ESP8266_ND+0x18f2>
 8008226:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800822a:	2b01      	cmp	r3, #1
 800822c:	d04b      	beq.n	80082c6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 800822e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008232:	2b02      	cmp	r3, #2
 8008234:	d047      	beq.n	80082c6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 8008236:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800823a:	2b04      	cmp	r3, #4
 800823c:	d043      	beq.n	80082c6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800823e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008242:	2b13      	cmp	r3, #19
 8008244:	d03f      	beq.n	80082c6 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 8008246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2200      	movs	r2, #0
 8008252:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008256:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800825a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2201      	movs	r2, #1
 8008262:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008274:	4620      	mov	r0, r4
 8008276:	f7f7 ffbd 	bl	80001f4 <strlen>
 800827a:	4603      	mov	r3, r0
 800827c:	4423      	add	r3, r4
 800827e:	4a44      	ldr	r2, [pc, #272]	; (8008390 <AT_ESP8266_ND+0x19bc>)
 8008280:	461c      	mov	r4, r3
 8008282:	4613      	mov	r3, r2
 8008284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	6061      	str	r1, [r4, #4]
 800828a:	60a2      	str	r2, [r4, #8]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f7 ffa8 	bl	80001f4 <strlen>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 80082b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2264      	movs	r2, #100	; 0x64
 80082c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80082e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d11b      	bne.n	800832e <AT_ESP8266_ND+0x195a>
 80082f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d023      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
 80082fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008302:	2b1c      	cmp	r3, #28
 8008304:	d01f      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8008306:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800830a:	2b02      	cmp	r3, #2
 800830c:	d01b      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 800830e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008312:	2b04      	cmp	r3, #4
 8008314:	d017      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 8008316:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800831a:	2b0b      	cmp	r3, #11
 800831c:	d013      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 800831e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008322:	2b0c      	cmp	r3, #12
 8008324:	d00f      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008326:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800832a:	2b13      	cmp	r3, #19
 800832c:	d00b      	beq.n	8008346 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800832e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008332:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800833c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008340:	4293      	cmp	r3, r2
 8008342:	f341 841a 	ble.w	8009b7a <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008388:	f001 bbf7 	b.w	8009b7a <AT_ESP8266_ND+0x31a6>
 800838c:	080106d4 	.word	0x080106d4
 8008390:	080106e0 	.word	0x080106e0
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008398:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80083a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	f040 80c8 	bne.w	8008548 <AT_ESP8266_ND+0x1b74>
 80083b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f000 80c3 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 80083c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	f000 80be 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 80083cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	f000 80b9 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 80083d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083da:	2b04      	cmp	r3, #4
 80083dc:	f000 80b4 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 80083e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083e4:	2b0a      	cmp	r3, #10
 80083e6:	f000 80af 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 80083ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ee:	2b0b      	cmp	r3, #11
 80083f0:	f000 80aa 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 80083f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083f8:	2b0c      	cmp	r3, #12
 80083fa:	f000 80a5 	beq.w	8008548 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 80083fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800840e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008412:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2201      	movs	r2, #1
 800841a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800841e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008422:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800842c:	4620      	mov	r0, r4
 800842e:	f7f7 fee1 	bl	80001f4 <strlen>
 8008432:	4603      	mov	r3, r0
 8008434:	4423      	add	r3, r4
 8008436:	49d5      	ldr	r1, [pc, #852]	; (800878c <AT_ESP8266_ND+0x1db8>)
 8008438:	461a      	mov	r2, r3
 800843a:	460b      	mov	r3, r1
 800843c:	cb03      	ldmia	r3!, {r0, r1}
 800843e:	6010      	str	r0, [r2, #0]
 8008440:	6051      	str	r1, [r2, #4]
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008446:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008454:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008458:	2201      	movs	r2, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f006 fe6f 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800846e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	1d9d      	adds	r5, r3, #6
 800847a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3306      	adds	r3, #6
 8008486:	4618      	mov	r0, r3
 8008488:	f7f7 feb4 	bl	80001f4 <strlen>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	4629      	mov	r1, r5
 8008492:	4620      	mov	r0, r4
 8008494:	f006 fe53 	bl	800f13e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f7 fea2 	bl	80001f4 <strlen>
 80084b0:	4602      	mov	r2, r0
 80084b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80084b6:	4619      	mov	r1, r3
 80084b8:	4620      	mov	r0, r4
 80084ba:	f006 fe40 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80084be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80084da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3326      	adds	r3, #38	; 0x26
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f7 fe84 	bl	80001f4 <strlen>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	4629      	mov	r1, r5
 80084f2:	4620      	mov	r0, r4
 80084f4:	f006 fe23 	bl	800f13e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008506:	f507 7109 	add.w	r1, r7, #548	; 0x224
 800850a:	2203      	movs	r2, #3
 800850c:	4618      	mov	r0, r3
 800850e:	f006 fe16 	bl	800f13e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8008512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008520:	4618      	mov	r0, r3
 8008522:	f7f7 fe67 	bl	80001f4 <strlen>
 8008526:	4603      	mov	r3, r0
 8008528:	461a      	mov	r2, r3
 800852a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800852e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800853c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	22c8      	movs	r2, #200	; 0xc8
 8008544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d11b      	bne.n	80085b0 <AT_ESP8266_ND+0x1bdc>
 8008578:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800857c:	2b01      	cmp	r3, #1
 800857e:	d023      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
 8008580:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008584:	2b02      	cmp	r3, #2
 8008586:	d01f      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008588:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800858c:	2b03      	cmp	r3, #3
 800858e:	d01b      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8008590:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008594:	2b04      	cmp	r3, #4
 8008596:	d017      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008598:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800859c:	2b0a      	cmp	r3, #10
 800859e:	d013      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 80085a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a4:	2b0b      	cmp	r3, #11
 80085a6:	d00f      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 80085a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	d00b      	beq.n	80085c8 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80085b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80085be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f341 82db 	ble.w	8009b7e <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80085da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085de:	2b0a      	cmp	r3, #10
 80085e0:	d00f      	beq.n	8008602 <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80085e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80085f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008602:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008606:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8008612:	f001 bab4 	b.w	8009b7e <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800861a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008626:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800862a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008634:	2b01      	cmp	r3, #1
 8008636:	d14d      	bne.n	80086d4 <AT_ESP8266_ND+0x1d00>
 8008638:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800863c:	2b04      	cmp	r3, #4
 800863e:	d049      	beq.n	80086d4 <AT_ESP8266_ND+0x1d00>
 8008640:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008644:	2b0a      	cmp	r3, #10
 8008646:	d045      	beq.n	80086d4 <AT_ESP8266_ND+0x1d00>
 8008648:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800864c:	2b0d      	cmp	r3, #13
 800864e:	d041      	beq.n	80086d4 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 8008650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2201      	movs	r2, #1
 800866c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008670:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008674:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800867e:	4620      	mov	r0, r4
 8008680:	f7f7 fdb8 	bl	80001f4 <strlen>
 8008684:	4603      	mov	r3, r0
 8008686:	4423      	add	r3, r4
 8008688:	4941      	ldr	r1, [pc, #260]	; (8008790 <AT_ESP8266_ND+0x1dbc>)
 800868a:	461a      	mov	r2, r3
 800868c:	460b      	mov	r3, r1
 800868e:	cb03      	ldmia	r3!, {r0, r1}
 8008690:	6010      	str	r0, [r2, #0]
 8008692:	6051      	str	r1, [r2, #4]
 8008694:	8819      	ldrh	r1, [r3, #0]
 8008696:	789b      	ldrb	r3, [r3, #2]
 8008698:	8111      	strh	r1, [r2, #8]
 800869a:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800869c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7f7 fda2 	bl	80001f4 <strlen>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80086c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80086d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80086f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d113      	bne.n	800872c <AT_ESP8266_ND+0x1d58>
 8008704:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008708:	2b0a      	cmp	r3, #10
 800870a:	d01b      	beq.n	8008744 <AT_ESP8266_ND+0x1d70>
 800870c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008710:	2b0b      	cmp	r3, #11
 8008712:	d017      	beq.n	8008744 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8008714:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d013      	beq.n	8008744 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 800871c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008720:	2b04      	cmp	r3, #4
 8008722:	d00f      	beq.n	8008744 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8008724:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008728:	2b0d      	cmp	r3, #13
 800872a:	d00b      	beq.n	8008744 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800873a:	f241 3288 	movw	r2, #5000	; 0x1388
 800873e:	4293      	cmp	r3, r2
 8008740:	f341 821f 	ble.w	8009b82 <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800875a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008786:	f001 b9fc 	b.w	8009b82 <AT_ESP8266_ND+0x31ae>
 800878a:	bf00      	nop
 800878c:	080106f0 	.word	0x080106f0
 8008790:	080106fc 	.word	0x080106fc
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80087a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d16b      	bne.n	800888e <AT_ESP8266_ND+0x1eba>
 80087b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d067      	beq.n	800888e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 80087be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d063      	beq.n	800888e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 80087c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d05f      	beq.n	800888e <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 80087ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80087de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80087ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d115      	bne.n	800882c <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800880e:	4620      	mov	r0, r4
 8008810:	f7f7 fcf0 	bl	80001f4 <strlen>
 8008814:	4603      	mov	r3, r0
 8008816:	4423      	add	r3, r4
 8008818:	4a52      	ldr	r2, [pc, #328]	; (8008964 <AT_ESP8266_ND+0x1f90>)
 800881a:	461c      	mov	r4, r3
 800881c:	4613      	mov	r3, r2
 800881e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008820:	6020      	str	r0, [r4, #0]
 8008822:	6061      	str	r1, [r4, #4]
 8008824:	60a2      	str	r2, [r4, #8]
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	e014      	b.n	8008856 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 800882c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008830:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800883a:	4620      	mov	r0, r4
 800883c:	f7f7 fcda 	bl	80001f4 <strlen>
 8008840:	4603      	mov	r3, r0
 8008842:	4423      	add	r3, r4
 8008844:	4a48      	ldr	r2, [pc, #288]	; (8008968 <AT_ESP8266_ND+0x1f94>)
 8008846:	461c      	mov	r4, r3
 8008848:	4613      	mov	r3, r2
 800884a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800884c:	6020      	str	r0, [r4, #0]
 800884e:	6061      	str	r1, [r4, #4]
 8008850:	60a2      	str	r2, [r4, #8]
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008864:	4618      	mov	r0, r3
 8008866:	f7f7 fcc5 	bl	80001f4 <strlen>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 800887c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800888a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800888e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008892:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80088ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d123      	bne.n	8008906 <AT_ESP8266_ND+0x1f32>
 80088be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d02b      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
 80088c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ca:	2b0b      	cmp	r3, #11
 80088cc:	d027      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 80088ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088d2:	2b0c      	cmp	r3, #12
 80088d4:	d023      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 80088d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d01f      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 80088de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d01b      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 80088e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d017      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 80088ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d013      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 80088f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088fa:	2b1e      	cmp	r3, #30
 80088fc:	d00f      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 80088fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008902:	2b1f      	cmp	r3, #31
 8008904:	d00b      	beq.n	800891e <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008906:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008914:	f241 3288 	movw	r2, #5000	; 0x1388
 8008918:	4293      	cmp	r3, r2
 800891a:	f341 8134 	ble.w	8009b86 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800891e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800892c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008960:	f001 b911 	b.w	8009b86 <AT_ESP8266_ND+0x31b2>
 8008964:	08010708 	.word	0x08010708
 8008968:	08010718 	.word	0x08010718
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800896c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 800897c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800898a:	2b01      	cmp	r3, #1
 800898c:	f040 80f3 	bne.w	8008b76 <AT_ESP8266_ND+0x21a2>
 8008990:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008994:	2b04      	cmp	r3, #4
 8008996:	f000 80ee 	beq.w	8008b76 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 800899a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	f000 80e9 	beq.w	8008b76 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 80089a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	f000 80e4 	beq.w	8008b76 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 80089ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b2:	2b21      	cmp	r3, #33	; 0x21
 80089b4:	f000 80df 	beq.w	8008b76 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 80089b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089bc:	2b1b      	cmp	r3, #27
 80089be:	f000 80da 	beq.w	8008b76 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 80089c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80089d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2201      	movs	r2, #1
 80089de:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80089e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7f7 fbff 	bl	80001f4 <strlen>
 80089f6:	4603      	mov	r3, r0
 80089f8:	4423      	add	r3, r4
 80089fa:	4990      	ldr	r1, [pc, #576]	; (8008c3c <AT_ESP8266_ND+0x2268>)
 80089fc:	461a      	mov	r2, r3
 80089fe:	460b      	mov	r3, r1
 8008a00:	cb03      	ldmia	r3!, {r0, r1}
 8008a02:	6010      	str	r0, [r2, #0]
 8008a04:	6051      	str	r1, [r2, #4]
 8008a06:	8819      	ldrh	r1, [r3, #0]
 8008a08:	789b      	ldrb	r3, [r3, #2]
 8008a0a:	8111      	strh	r1, [r2, #8]
 8008a0c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a1c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008a20:	2201      	movs	r2, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f006 fb8b 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	334c      	adds	r3, #76	; 0x4c
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f7 fbcf 	bl	80001f4 <strlen>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f006 fb6e 	bl	800f13e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a70:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008a74:	2203      	movs	r2, #3
 8008a76:	4618      	mov	r0, r3
 8008a78:	f006 fb61 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3362      	adds	r3, #98	; 0x62
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7f7 fba5 	bl	80001f4 <strlen>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	461a      	mov	r2, r3
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f006 fb44 	bl	800f13e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ac4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ac8:	2203      	movs	r2, #3
 8008aca:	4618      	mov	r0, r3
 8008acc:	f006 fb37 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3372      	adds	r3, #114	; 0x72
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f7 fb7b 	bl	80001f4 <strlen>
 8008afe:	4603      	mov	r3, r0
 8008b00:	461a      	mov	r2, r3
 8008b02:	4629      	mov	r1, r5
 8008b04:	4620      	mov	r0, r4
 8008b06:	f006 fb1a 	bl	800f13e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008b0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b18:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f006 fb0d 	bl	800f13e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b32:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008b36:	2202      	movs	r2, #2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f006 fb00 	bl	800f13e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7f7 fb51 	bl	80001f4 <strlen>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d11b      	bne.n	8008bde <AT_ESP8266_ND+0x220a>
 8008ba6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d023      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
 8008bae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bb2:	2b0b      	cmp	r3, #11
 8008bb4:	d01f      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008bb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bba:	2b0c      	cmp	r3, #12
 8008bbc:	d01b      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008bbe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d017      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008bc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d013      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008bce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bd2:	2b21      	cmp	r3, #33	; 0x21
 8008bd4:	d00f      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008bd6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bda:	2b1b      	cmp	r3, #27
 8008bdc:	d00b      	beq.n	8008bf6 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	f340 87ca 	ble.w	8009b8a <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008c38:	f000 bfa7 	b.w	8009b8a <AT_ESP8266_ND+0x31b6>
 8008c3c:	08010608 	.word	0x08010608
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	f040 80e2 	bne.w	8008e28 <AT_ESP8266_ND+0x2454>
 8008c64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	f000 80dd 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008c6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c72:	2b0c      	cmp	r3, #12
 8008c74:	f000 80d8 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008c78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c7c:	2b0e      	cmp	r3, #14
 8008c7e:	f000 80d3 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008c82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	f000 80ce 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008c8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	f000 80c9 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008c96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	f000 80c4 	beq.w	8008e28 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7f7 fa90 	bl	80001f4 <strlen>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4423      	add	r3, r4
 8008cd8:	4aa1      	ldr	r2, [pc, #644]	; (8008f60 <AT_ESP8266_ND+0x258c>)
 8008cda:	461c      	mov	r4, r3
 8008cdc:	4613      	mov	r3, r2
 8008cde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ce0:	6020      	str	r0, [r4, #0]
 8008ce2:	6061      	str	r1, [r4, #4]
 8008ce4:	60a2      	str	r2, [r4, #8]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008cea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cf8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f006 fa1d 	bl	800f13e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7f7 fa6e 	bl	80001f4 <strlen>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4423      	add	r3, r4
 8008d1c:	4a91      	ldr	r2, [pc, #580]	; (8008f64 <AT_ESP8266_ND+0x2590>)
 8008d1e:	6810      	ldr	r0, [r2, #0]
 8008d20:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d30:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d34:	2203      	movs	r2, #3
 8008d36:	4618      	mov	r0, r3
 8008d38:	f006 fa01 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3336      	adds	r3, #54	; 0x36
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f7 fa45 	bl	80001f4 <strlen>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4620      	mov	r0, r4
 8008d72:	f006 f9e4 	bl	800f13e <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d84:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008d88:	2202      	movs	r2, #2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f006 f9d7 	bl	800f13e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3346      	adds	r3, #70	; 0x46
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7f7 fa1b 	bl	80001f4 <strlen>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f006 f9ba 	bl	800f13e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dd8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f7 fa09 	bl	80001f4 <strlen>
 8008de2:	4602      	mov	r2, r0
 8008de4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008de8:	4619      	mov	r1, r3
 8008dea:	4620      	mov	r0, r4
 8008dec:	f006 f9a7 	bl	800f13e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f7 f9f8 	bl	80001f4 <strlen>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d120      	bne.n	8008e9a <AT_ESP8266_ND+0x24c6>
 8008e58:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e5c:	2b0a      	cmp	r3, #10
 8008e5e:	d028      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
 8008e60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e64:	2b0b      	cmp	r3, #11
 8008e66:	d024      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008e68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e6c:	2b0c      	cmp	r3, #12
 8008e6e:	d020      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008e70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e74:	2b0e      	cmp	r3, #14
 8008e76:	d01c      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008e78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d018      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008e80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e84:	2b10      	cmp	r3, #16
 8008e86:	d014      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008e88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d010      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008e90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e98:	d00b      	beq.n	8008eb2 <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f340 866e 	ble.w	8009b8e <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008ef4:	f000 be4b 	b.w	8009b8e <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008efc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008f08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f0c:	2b10      	cmp	r3, #16
 8008f0e:	d003      	beq.n	8008f18 <AT_ESP8266_ND+0x2544>
 8008f10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f14:	2b0a      	cmp	r3, #10
 8008f16:	d127      	bne.n	8008f68 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008f18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008f5a:	f000 be1a 	b.w	8009b92 <AT_ESP8266_ND+0x31be>
 8008f5e:	bf00      	nop
 8008f60:	08010728 	.word	0x08010728
 8008f64:	08010738 	.word	0x08010738
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	f040 80d1 	bne.w	800911e <AT_ESP8266_ND+0x274a>
 8008f7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 80c7 	bne.w	800911e <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2218      	movs	r2, #24
 8008fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008fb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008fde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800900c:	4620      	mov	r0, r4
 800900e:	f7f7 f8f1 	bl	80001f4 <strlen>
 8009012:	4603      	mov	r3, r0
 8009014:	4423      	add	r3, r4
 8009016:	4abe      	ldr	r2, [pc, #760]	; (8009310 <AT_ESP8266_ND+0x293c>)
 8009018:	461c      	mov	r4, r3
 800901a:	4613      	mov	r3, r2
 800901c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800901e:	6020      	str	r0, [r4, #0]
 8009020:	6061      	str	r1, [r4, #4]
 8009022:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009032:	f107 0214 	add.w	r2, r7, #20
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f005 fdf9 	bl	800ec30 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800903e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009042:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800904c:	f107 0314 	add.w	r3, r7, #20
 8009050:	4618      	mov	r0, r3
 8009052:	f7f7 f8cf 	bl	80001f4 <strlen>
 8009056:	4602      	mov	r2, r0
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	4619      	mov	r1, r3
 800905e:	4620      	mov	r0, r4
 8009060:	f006 f86d 	bl	800f13e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f006 f93c 	bl	800f300 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009096:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800909a:	2202      	movs	r2, #2
 800909c:	4618      	mov	r0, r3
 800909e:	f006 f84e 	bl	800f13e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80090a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7f7 f89f 	bl	80001f4 <strlen>
 80090b6:	4603      	mov	r3, r0
 80090b8:	461a      	mov	r2, r3
 80090ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80090c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7f7 f88c 	bl	80001f4 <strlen>
 80090dc:	4603      	mov	r3, r0
 80090de:	4423      	add	r3, r4
 80090e0:	4a8c      	ldr	r2, [pc, #560]	; (8009314 <AT_ESP8266_ND+0x2940>)
 80090e2:	461c      	mov	r4, r3
 80090e4:	4613      	mov	r3, r2
 80090e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090e8:	6020      	str	r0, [r4, #0]
 80090ea:	6061      	str	r1, [r4, #4]
 80090ec:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80090ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009102:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 800910c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800911a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800911e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009122:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 800913c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 80a6 	bne.w	800929c <AT_ESP8266_ND+0x28c8>
 8009150:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009154:	2b13      	cmp	r3, #19
 8009156:	f000 80a1 	beq.w	800929c <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 800915a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f7f7 f831 	bl	80001e0 <strcmp>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01b      	beq.n	80091bc <AT_ESP8266_ND+0x27e8>
 8009184:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009188:	2b01      	cmp	r3, #1
 800918a:	d017      	beq.n	80091bc <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 800918c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009190:	2b14      	cmp	r3, #20
 8009192:	d013      	beq.n	80091bc <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a6:	4293      	cmp	r3, r2
 80091a8:	dd78      	ble.n	800929c <AT_ESP8266_ND+0x28c8>
 80091aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d16f      	bne.n	800929c <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 80091bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ce:	4293      	cmp	r3, r2
 80091d0:	dd0e      	ble.n	80091f0 <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80091d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80091f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800920e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009212:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800922c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009230:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800923c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800924a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009266:	2361      	movs	r3, #97	; 0x61
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	2301      	movs	r3, #1
 800926c:	f005 fd14 	bl	800ec98 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800927e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800928c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 800929c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092aa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80092ae:	f040 8470 	bne.w	8009b92 <AT_ESP8266_ND+0x31be>
 80092b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092b6:	2b13      	cmp	r3, #19
 80092b8:	d02e      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
 80092ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092cc:	4293      	cmp	r3, r2
 80092ce:	dc23      	bgt.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 80092d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092d4:	2b0a      	cmp	r3, #10
 80092d6:	d01f      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 80092d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092dc:	2b0b      	cmp	r3, #11
 80092de:	d01b      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 80092e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092e4:	2b0c      	cmp	r3, #12
 80092e6:	d017      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 80092e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d013      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 80092f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092f4:	2b11      	cmp	r3, #17
 80092f6:	d00f      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 80092f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092fc:	2b12      	cmp	r3, #18
 80092fe:	d00b      	beq.n	8009318 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 8009300:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009308:	f040 8443 	bne.w	8009b92 <AT_ESP8266_ND+0x31be>
 800930c:	e004      	b.n	8009318 <AT_ESP8266_ND+0x2944>
 800930e:	bf00      	nop
 8009310:	0801073c 	.word	0x0801073c
 8009314:	08010748 	.word	0x08010748
									a->_debug_count5++;
 8009318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009344:	f241 3288 	movw	r2, #5000	; 0x1388
 8009348:	4293      	cmp	r3, r2
 800934a:	dd25      	ble.n	8009398 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 800934c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800936a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	dd10      	ble.n	80093cc <AT_ESP8266_ND+0x29f8>
 80093aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d00c      	beq.n	80093cc <AT_ESP8266_ND+0x29f8>
 80093b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093b6:	2b0a      	cmp	r3, #10
 80093b8:	d008      	beq.n	80093cc <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80093ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	220f      	movs	r2, #15
 80093c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80093ca:	e008      	b.n	80093de <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80093cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80093de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80093ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80093fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800940e:	e3c0      	b.n	8009b92 <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800942e:	2b01      	cmp	r3, #1
 8009430:	d16f      	bne.n	8009512 <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 8009432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2200      	movs	r2, #0
 800943e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8009442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2201      	movs	r2, #1
 800944e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8009452:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009456:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009460:	4620      	mov	r0, r4
 8009462:	f7f6 fec7 	bl	80001f4 <strlen>
 8009466:	4603      	mov	r3, r0
 8009468:	4423      	add	r3, r4
 800946a:	4a78      	ldr	r2, [pc, #480]	; (800964c <AT_ESP8266_ND+0x2c78>)
 800946c:	461c      	mov	r4, r3
 800946e:	4615      	mov	r5, r2
 8009470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009472:	6020      	str	r0, [r4, #0]
 8009474:	6061      	str	r1, [r4, #4]
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	335c      	adds	r3, #92	; 0x5c
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f6 fea6 	bl	80001f4 <strlen>
 80094a8:	4603      	mov	r3, r0
 80094aa:	461a      	mov	r2, r3
 80094ac:	4629      	mov	r1, r5
 80094ae:	4620      	mov	r0, r4
 80094b0:	f005 fe45 	bl	800f13e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80094b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80094c2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7f6 fe94 	bl	80001f4 <strlen>
 80094cc:	4602      	mov	r2, r0
 80094ce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80094d2:	4619      	mov	r1, r3
 80094d4:	4620      	mov	r0, r4
 80094d6:	f005 fe32 	bl	800f13e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80094da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f6 fe83 	bl	80001f4 <strlen>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d123      	bne.n	800958a <AT_ESP8266_ND+0x2bb6>
 8009542:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009546:	2b0a      	cmp	r3, #10
 8009548:	d02b      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 800954a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800954e:	2b0b      	cmp	r3, #11
 8009550:	d027      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 8009552:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009556:	2b0c      	cmp	r3, #12
 8009558:	d023      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 800955a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800955e:	2b0e      	cmp	r3, #14
 8009560:	d01f      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 8009562:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d01b      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 800956a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800956e:	2b10      	cmp	r3, #16
 8009570:	d017      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 8009572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009576:	2b15      	cmp	r3, #21
 8009578:	d013      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 800957a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800957e:	2b16      	cmp	r3, #22
 8009580:	d00f      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 8009582:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009586:	2b17      	cmp	r3, #23
 8009588:	d00b      	beq.n	80095a2 <AT_ESP8266_ND+0x2bce>
 800958a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009598:	f241 3288 	movw	r2, #5000	; 0x1388
 800959c:	4293      	cmp	r3, r2
 800959e:	f340 82fa 	ble.w	8009b96 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80095a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80095b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80095b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80095c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80095d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80095e4:	e2d7      	b.n	8009b96 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80095f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d003      	beq.n	8009606 <AT_ESP8266_ND+0x2c32>
 80095fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009602:	2b0a      	cmp	r3, #10
 8009604:	d124      	bne.n	8009650 <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8009606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009628:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009648:	e2a7      	b.n	8009b9a <AT_ESP8266_ND+0x31c6>
 800964a:	bf00      	nop
 800964c:	08010754 	.word	0x08010754
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800965e:	2b01      	cmp	r3, #1
 8009660:	f040 8102 	bne.w	8009868 <AT_ESP8266_ND+0x2e94>
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 80f8 	bne.w	8009868 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2201      	movs	r2, #1
 8009684:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2218      	movs	r2, #24
 8009694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800969c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80096a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80096c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80096d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80096e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7f6 fd7d 	bl	80001f4 <strlen>
 80096fa:	4603      	mov	r3, r0
 80096fc:	4423      	add	r3, r4
 80096fe:	4a83      	ldr	r2, [pc, #524]	; (800990c <AT_ESP8266_ND+0x2f38>)
 8009700:	461c      	mov	r4, r3
 8009702:	4613      	mov	r3, r2
 8009704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009706:	6020      	str	r0, [r4, #0]
 8009708:	6061      	str	r1, [r4, #4]
 800970a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 800970c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009710:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 800971a:	f107 020c 	add.w	r2, r7, #12
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f005 fa85 	bl	800ec30 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009734:	f107 030c 	add.w	r3, r7, #12
 8009738:	4618      	mov	r0, r3
 800973a:	f7f6 fd5b 	bl	80001f4 <strlen>
 800973e:	4602      	mov	r2, r0
 8009740:	f107 030c 	add.w	r3, r7, #12
 8009744:	4619      	mov	r1, r3
 8009746:	4620      	mov	r0, r4
 8009748:	f005 fcf9 	bl	800f13e <strncat>
										strncat(a->_uart2snd,",",1);
 800974c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800975a:	4620      	mov	r0, r4
 800975c:	f7f6 fd4a 	bl	80001f4 <strlen>
 8009760:	4603      	mov	r3, r0
 8009762:	4423      	add	r3, r4
 8009764:	496a      	ldr	r1, [pc, #424]	; (8009910 <AT_ESP8266_ND+0x2f3c>)
 8009766:	461a      	mov	r2, r3
 8009768:	460b      	mov	r3, r1
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800976e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800977c:	f107 020c 	add.w	r2, r7, #12
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f005 fa54 	bl	800ec30 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	4618      	mov	r0, r3
 800979c:	f7f6 fd2a 	bl	80001f4 <strlen>
 80097a0:	4602      	mov	r2, r0
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4619      	mov	r1, r3
 80097a8:	4620      	mov	r0, r4
 80097aa:	f005 fcc8 	bl	800f13e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80097ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80097bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f005 fd97 	bl	800f300 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80097d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80097e0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80097e4:	2202      	movs	r2, #2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f005 fca9 	bl	800f13e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80097ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7f6 fcfa 	bl	80001f4 <strlen>
 8009800:	4603      	mov	r3, r0
 8009802:	461a      	mov	r2, r3
 8009804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009812:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009816:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009820:	4620      	mov	r0, r4
 8009822:	f7f6 fce7 	bl	80001f4 <strlen>
 8009826:	4603      	mov	r3, r0
 8009828:	4423      	add	r3, r4
 800982a:	4a3a      	ldr	r2, [pc, #232]	; (8009914 <AT_ESP8266_ND+0x2f40>)
 800982c:	461c      	mov	r4, r3
 800982e:	4613      	mov	r3, r2
 8009830:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009832:	6020      	str	r0, [r4, #0]
 8009834:	6061      	str	r1, [r4, #4]
 8009836:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009868:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800986c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 80b8 	bne.w	8009a0a <AT_ESP8266_ND+0x3036>
 800989a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800989e:	2b13      	cmp	r3, #19
 80098a0:	f000 80b3 	beq.w	8009a0a <AT_ESP8266_ND+0x3036>
 80098a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80098b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7f6 fc8c 	bl	80001e0 <strcmp>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d024      	beq.n	8009918 <AT_ESP8266_ND+0x2f44>
 80098ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d020      	beq.n	8009918 <AT_ESP8266_ND+0x2f44>
 80098d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098da:	2b14      	cmp	r3, #20
 80098dc:	d01c      	beq.n	8009918 <AT_ESP8266_ND+0x2f44>
 80098de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f0:	4293      	cmp	r3, r2
 80098f2:	f340 808a 	ble.w	8009a0a <AT_ESP8266_ND+0x3036>
 80098f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009904:	2b01      	cmp	r3, #1
 8009906:	f040 8080 	bne.w	8009a0a <AT_ESP8266_ND+0x3036>
 800990a:	e005      	b.n	8009918 <AT_ESP8266_ND+0x2f44>
 800990c:	0801073c 	.word	0x0801073c
 8009910:	08010764 	.word	0x08010764
 8009914:	08010748 	.word	0x08010748
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800991c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009926:	f241 3288 	movw	r2, #5000	; 0x1388
 800992a:	4293      	cmp	r3, r2
 800992c:	dd17      	ble.n	800995e <AT_ESP8266_ND+0x2f8a>
 800992e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10e      	bne.n	800995e <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800995e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009962:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800997c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800999a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800999e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80099aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80099b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80099c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80099d4:	2361      	movs	r3, #97	; 0x61
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2301      	movs	r3, #1
 80099da:	f005 f95d 	bl	800ec98 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80099de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80099ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80099fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009a0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a18:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009a1c:	f040 80bd 	bne.w	8009b9a <AT_ESP8266_ND+0x31c6>
 8009a20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a24:	2b13      	cmp	r3, #19
 8009a26:	d02b      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a2c:	2b0b      	cmp	r3, #11
 8009a2e:	d027      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a34:	2b0c      	cmp	r3, #12
 8009a36:	d023      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	dc18      	bgt.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	d014      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a5a:	2b10      	cmp	r3, #16
 8009a5c:	d010      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a62:	2b11      	cmp	r3, #17
 8009a64:	d00c      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a6a:	2b12      	cmp	r3, #18
 8009a6c:	d008      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a72:	2b16      	cmp	r3, #22
 8009a74:	d004      	beq.n	8009a80 <AT_ESP8266_ND+0x30ac>
 8009a76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a7a:	2b19      	cmp	r3, #25
 8009a7c:	f040 808d 	bne.w	8009b9a <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	dd25      	ble.n	8009b00 <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	dd07      	ble.n	8009b22 <AT_ESP8266_ND+0x314e>
 8009b12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d003      	beq.n	8009b22 <AT_ESP8266_ND+0x314e>
 8009b1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b1e:	2b0a      	cmp	r3, #10
 8009b20:	d108      	bne.n	8009b34 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009b64:	e019      	b.n	8009b9a <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009b78:	e010      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b7a:	bf00      	nop
 8009b7c:	e00e      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b7e:	bf00      	nop
 8009b80:	e00c      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b82:	bf00      	nop
 8009b84:	e00a      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b86:	bf00      	nop
 8009b88:	e008      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b8a:	bf00      	nop
 8009b8c:	e006      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b8e:	bf00      	nop
 8009b90:	e004      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b92:	bf00      	nop
 8009b94:	e002      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b96:	bf00      	nop
 8009b98:	e000      	b.n	8009b9c <AT_ESP8266_ND+0x31c8>
			break;
 8009b9a:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bd4 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be6:	f240 328d 	movw	r2, #909	; 0x38d
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f001 83c3 	beq.w	800b376 <WiFi_Conn_ND+0x17a2>
 8009bf0:	f240 328d 	movw	r2, #909	; 0x38d
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	f301 8453 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009bfa:	f240 3289 	movw	r2, #905	; 0x389
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	f001 8335 	beq.w	800b26e <WiFi_Conn_ND+0x169a>
 8009c04:	f240 3289 	movw	r2, #905	; 0x389
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	f301 8449 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c0e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c12:	f001 8224 	beq.w	800b05e <WiFi_Conn_ND+0x148a>
 8009c16:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c1a:	f301 8441 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c1e:	f240 3229 	movw	r2, #809	; 0x329
 8009c22:	4293      	cmp	r3, r2
 8009c24:	f301 843c 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009c2c:	f280 80a5 	bge.w	8009d7a <WiFi_Conn_ND+0x1a6>
 8009c30:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009c34:	4293      	cmp	r3, r2
 8009c36:	f000 8776 	beq.w	800ab26 <WiFi_Conn_ND+0xf52>
 8009c3a:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	f301 842e 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c44:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f000 86fc 	beq.w	800aa46 <WiFi_Conn_ND+0xe72>
 8009c4e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009c52:	4293      	cmp	r3, r2
 8009c54:	f301 8424 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c58:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009c5c:	f000 862b 	beq.w	800a8b6 <WiFi_Conn_ND+0xce2>
 8009c60:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009c64:	f301 841c 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c68:	f240 2261 	movw	r2, #609	; 0x261
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	f000 85b1 	beq.w	800a7d4 <WiFi_Conn_ND+0xc00>
 8009c72:	f240 2261 	movw	r2, #609	; 0x261
 8009c76:	4293      	cmp	r3, r2
 8009c78:	f301 8412 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c7c:	f240 225d 	movw	r2, #605	; 0x25d
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f000 8551 	beq.w	800a728 <WiFi_Conn_ND+0xb54>
 8009c86:	f240 225d 	movw	r2, #605	; 0x25d
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	f301 8408 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009c90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c94:	f000 84cf 	beq.w	800a636 <WiFi_Conn_ND+0xa62>
 8009c98:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c9c:	f301 8400 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009ca0:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	f000 846a 	beq.w	800a57e <WiFi_Conn_ND+0x9aa>
 8009caa:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009cae:	f281 83f7 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009cb2:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	f000 8425 	beq.w	800a506 <WiFi_Conn_ND+0x932>
 8009cbc:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009cc0:	f281 83ee 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009cc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009cc8:	f000 83b0 	beq.w	800a42c <WiFi_Conn_ND+0x858>
 8009ccc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009cd0:	f301 83e6 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009cd4:	f240 1299 	movw	r2, #409	; 0x199
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	f000 8369 	beq.w	800a3b0 <WiFi_Conn_ND+0x7dc>
 8009cde:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009ce2:	f281 83dd 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009ce6:	f240 1295 	movw	r2, #405	; 0x195
 8009cea:	4293      	cmp	r3, r2
 8009cec:	f000 8329 	beq.w	800a342 <WiFi_Conn_ND+0x76e>
 8009cf0:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009cf4:	f281 83d4 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009cf8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009cfc:	f000 82a0 	beq.w	800a240 <WiFi_Conn_ND+0x66c>
 8009d00:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009d04:	f301 83cc 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d08:	f240 1235 	movw	r2, #309	; 0x135
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f000 8271 	beq.w	800a1f4 <WiFi_Conn_ND+0x620>
 8009d12:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009d16:	f281 83c3 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d1a:	f240 1231 	movw	r2, #305	; 0x131
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f000 8263 	beq.w	800a1ea <WiFi_Conn_ND+0x616>
 8009d24:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009d28:	f281 83ba 	bge.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d30:	f000 8207 	beq.w	800a142 <WiFi_Conn_ND+0x56e>
 8009d34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d38:	f301 83b2 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d3c:	2bd1      	cmp	r3, #209	; 0xd1
 8009d3e:	f000 81a0 	beq.w	800a082 <WiFi_Conn_ND+0x4ae>
 8009d42:	2bd1      	cmp	r3, #209	; 0xd1
 8009d44:	f301 83ac 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d48:	2bcd      	cmp	r3, #205	; 0xcd
 8009d4a:	f000 8170 	beq.w	800a02e <WiFi_Conn_ND+0x45a>
 8009d4e:	2bcd      	cmp	r3, #205	; 0xcd
 8009d50:	f301 83a6 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d54:	2bc8      	cmp	r3, #200	; 0xc8
 8009d56:	f000 80f1 	beq.w	8009f3c <WiFi_Conn_ND+0x368>
 8009d5a:	2bc8      	cmp	r3, #200	; 0xc8
 8009d5c:	f301 83a0 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d60:	2b6d      	cmp	r3, #109	; 0x6d
 8009d62:	f000 80b3 	beq.w	8009ecc <WiFi_Conn_ND+0x2f8>
 8009d66:	2b6d      	cmp	r3, #109	; 0x6d
 8009d68:	f301 839a 	bgt.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d6c:	2b64      	cmp	r3, #100	; 0x64
 8009d6e:	d021      	beq.n	8009db4 <WiFi_Conn_ND+0x1e0>
 8009d70:	2b69      	cmp	r3, #105	; 0x69
 8009d72:	f000 8096 	beq.w	8009ea2 <WiFi_Conn_ND+0x2ce>
 8009d76:	f001 bb93 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d7a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	f201 838e 	bhi.w	800b4a0 <WiFi_Conn_ND+0x18cc>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <WiFi_Conn_ND+0x1b8>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	0800ac33 	.word	0x0800ac33
 8009d90:	0800b4a1 	.word	0x0800b4a1
 8009d94:	0800b4a1 	.word	0x0800b4a1
 8009d98:	0800b4a1 	.word	0x0800b4a1
 8009d9c:	0800b4a1 	.word	0x0800b4a1
 8009da0:	0800ad01 	.word	0x0800ad01
 8009da4:	0800ada1 	.word	0x0800ada1
 8009da8:	0800ae41 	.word	0x0800ae41
 8009dac:	0800aee1 	.word	0x0800aee1
 8009db0:	0800af81 	.word	0x0800af81
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	2b64      	cmp	r3, #100	; 0x64
 8009dbc:	d046      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d041      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dce:	2b1c      	cmp	r3, #28
 8009dd0:	d03c      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d037      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d032      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	2b13      	cmp	r3, #19
 8009dee:	d02d      	beq.n	8009e4c <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7fc fc5f 	bl	80066b4 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d14e      	bne.n	8009e9e <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7fc fde7 	bl	80069d4 <AT_ESP8266_ND>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d109      	bne.n	8009e34 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7f7 fbc6 	bl	80015c0 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	2364      	movs	r3, #100	; 0x64
 8009e44:	68b8      	ldr	r0, [r7, #8]
 8009e46:	f7fb fbb9 	bl	80055bc <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009e4a:	e028      	b.n	8009e9e <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d004      	beq.n	8009e60 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009e5c:	2b1c      	cmp	r3, #28
 8009e5e:	d103      	bne.n	8009e68 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	226d      	movs	r2, #109	; 0x6d
 8009e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d00f      	beq.n	8009e92 <WiFi_Conn_ND+0x2be>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d00a      	beq.n	8009e92 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	2b0b      	cmp	r3, #11
 8009e84:	d005      	beq.n	8009e92 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	f041 82d8 	bne.w	800b442 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2269      	movs	r2, #105	; 0x69
 8009e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009e9a:	f001 bad2 	b.w	800b442 <WiFi_Conn_ND+0x186e>
 8009e9e:	f001 bad0 	b.w	800b442 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7fc fc06 	bl	80066b4 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2264      	movs	r2, #100	; 0x64
 8009eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009ec8:	f001 baea 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00c      	beq.n	8009ef0 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7fc fc18 	bl	800670c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009eee:	e00e      	b.n	8009f0e <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7fc fbf5 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	22c8      	movs	r2, #200	; 0xc8
 8009efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	f041 8296 	bne.w	800b446 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7fc fbca 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2264      	movs	r2, #100	; 0x64
 8009f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009f38:	f001 ba85 	b.w	800b446 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	2bc8      	cmp	r3, #200	; 0xc8
 8009f44:	d04f      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d04a      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d045      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d040      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d03b      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f74:	2b0a      	cmp	r3, #10
 8009f76:	d036      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7e:	2b0b      	cmp	r3, #11
 8009f80:	d031      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f88:	2b0c      	cmp	r3, #12
 8009f8a:	d02c      	beq.n	8009fe6 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7fc fba7 	bl	80066e0 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d124      	bne.n	8009fe6 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7fc fd19 	bl	80069d4 <AT_ESP8266_ND>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d109      	bne.n	8009fd0 <WiFi_Conn_ND+0x3fc>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7f7 faf8 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	2364      	movs	r3, #100	; 0x64
 8009fe0:	68b8      	ldr	r0, [r7, #8]
 8009fe2:	f7fb faeb 	bl	80055bc <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d004      	beq.n	8009ffa <WiFi_Conn_ND+0x426>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff6:	2b0c      	cmp	r3, #12
 8009ff8:	d103      	bne.n	800a002 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22d1      	movs	r2, #209	; 0xd1
 8009ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d00a      	beq.n	800a022 <WiFi_Conn_ND+0x44e>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a012:	2b03      	cmp	r3, #3
 800a014:	d005      	beq.n	800a022 <WiFi_Conn_ND+0x44e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01c:	2b20      	cmp	r3, #32
 800a01e:	f041 8214 	bne.w	800b44a <WiFi_Conn_ND+0x1876>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	22cd      	movs	r2, #205	; 0xcd
 800a026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a02a:	f001 ba0e 	b.w	800b44a <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a02e:	f241 3088 	movw	r0, #5000	; 0x1388
 800a032:	f7f8 fe0f 	bl	8002c54 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7fc fb52 	bl	80066e0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	22c8      	movs	r2, #200	; 0xc8
 800a040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	f041 81f7 	bne.w	800b44e <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7fc fb27 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2264      	movs	r2, #100	; 0x64
 800a06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a07e:	f001 b9e6 	b.w	800b44e <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a090:	2b01      	cmp	r3, #1
 800a092:	d108      	bne.n	800a0a6 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f240 3229 	movw	r2, #809	; 0x329
 800a09a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ac:	2b0a      	cmp	r3, #10
 800a0ae:	d004      	beq.n	800a0ba <WiFi_Conn_ND+0x4e6>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	2b0d      	cmp	r3, #13
 800a0b8:	d10a      	bne.n	800a0d0 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7fc fb10 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	22c8      	movs	r2, #200	; 0xc8
 800a0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d10e      	bne.n	800a0f8 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7fc faea 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2264      	movs	r2, #100	; 0x64
 800a0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d011      	beq.n	800a126 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7fc fb5a 	bl	80067bc <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a10e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a122:	f001 b9bd 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7fc faf0 	bl	800670c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a13e:	f001 b9af 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a14c:	d03b      	beq.n	800a1c6 <WiFi_Conn_ND+0x5f2>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	2b04      	cmp	r3, #4
 800a156:	d036      	beq.n	800a1c6 <WiFi_Conn_ND+0x5f2>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	2b0a      	cmp	r3, #10
 800a160:	d031      	beq.n	800a1c6 <WiFi_Conn_ND+0x5f2>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	2b0d      	cmp	r3, #13
 800a16a:	d02c      	beq.n	800a1c6 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7fc faf9 	bl	8006764 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d124      	bne.n	800a1c6 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7fc fc29 	bl	80069d4 <AT_ESP8266_ND>
 800a182:	4602      	mov	r2, r0
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d109      	bne.n	800a1b0 <WiFi_Conn_ND+0x5dc>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f7f7 fa08 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	2364      	movs	r3, #100	; 0x64
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f7fb f9fb 	bl	80055bc <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1cc:	2b0a      	cmp	r3, #10
 800a1ce:	d005      	beq.n	800a1dc <WiFi_Conn_ND+0x608>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d6:	2b0d      	cmp	r3, #13
 800a1d8:	f041 813b 	bne.w	800b452 <WiFi_Conn_ND+0x187e>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f240 1235 	movw	r2, #309	; 0x135
 800a1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a1e6:	f001 b934 	b.w	800b452 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7fc fa4c 	bl	8006688 <NOP>
			}
			break;
 800a1f0:	f001 b956 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7fc fa6f 	bl	80066e0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	22c8      	movs	r2, #200	; 0xc8
 800a206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a218:	2b04      	cmp	r3, #4
 800a21a:	f041 811c 	bne.w	800b456 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7fc fa48 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2264      	movs	r2, #100	; 0x64
 800a228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a23c:	f001 b90b 	b.w	800b456 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a24a:	d04f      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	2b04      	cmp	r3, #4
 800a254:	d04a      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d045      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	2b02      	cmp	r3, #2
 800a268:	d040      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a270:	2b07      	cmp	r3, #7
 800a272:	d03b      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d036      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	2b1e      	cmp	r3, #30
 800a286:	d031      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28e:	2b1f      	cmp	r3, #31
 800a290:	d02c      	beq.n	800a2ec <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7fc fa3a 	bl	800670c <MUX>
						if(b->_enviaruart==1)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d124      	bne.n	800a2ec <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7fc fb96 	bl	80069d4 <AT_ESP8266_ND>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d109      	bne.n	800a2d6 <WiFi_Conn_ND+0x702>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7f7 f975 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	2364      	movs	r3, #100	; 0x64
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f7fb f968 	bl	80055bc <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d009      	beq.n	800a30a <WiFi_Conn_ND+0x736>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	2b07      	cmp	r3, #7
 800a2fe:	d004      	beq.n	800a30a <WiFi_Conn_ND+0x736>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a306:	2b08      	cmp	r3, #8
 800a308:	d104      	bne.n	800a314 <WiFi_Conn_ND+0x740>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f240 1299 	movw	r2, #409	; 0x199
 800a310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d00a      	beq.n	800a334 <WiFi_Conn_ND+0x760>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a324:	2b1e      	cmp	r3, #30
 800a326:	d005      	beq.n	800a334 <WiFi_Conn_ND+0x760>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32e:	2b1f      	cmp	r3, #31
 800a330:	f041 8093 	bne.w	800b45a <WiFi_Conn_ND+0x1886>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f240 1295 	movw	r2, #405	; 0x195
 800a33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a33e:	f001 b88c 	b.w	800b45a <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7fc f9a0 	bl	8006688 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d112      	bne.n	800a378 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7fc f9ae 	bl	80066b4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2264      	movs	r2, #100	; 0x64
 800a35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	2b0a      	cmp	r3, #10
 800a380:	d005      	beq.n	800a38e <WiFi_Conn_ND+0x7ba>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	2b0d      	cmp	r3, #13
 800a38a:	f041 8068 	bne.w	800b45e <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7fc f9a6 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	22c8      	movs	r2, #200	; 0xc8
 800a398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a3ac:	f001 b857 	b.w	800b45e <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7fc f969 	bl	8006688 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d10e      	bne.n	800a3e6 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7fc f973 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2264      	movs	r2, #100	; 0x64
 800a3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ec:	2b0a      	cmp	r3, #10
 800a3ee:	d004      	beq.n	800a3fa <WiFi_Conn_ND+0x826>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f6:	2b0d      	cmp	r3, #13
 800a3f8:	d10a      	bne.n	800a410 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7fc f970 	bl	80066e0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	22c8      	movs	r2, #200	; 0xc8
 800a404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7fc f991 	bl	8006738 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a428:	f001 b83a 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a436:	d045      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d040      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d03b      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	2b02      	cmp	r3, #2
 800a454:	d036      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45c:	2b1b      	cmp	r3, #27
 800a45e:	d031      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a466:	2b21      	cmp	r3, #33	; 0x21
 800a468:	d02c      	beq.n	800a4c4 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7fc f964 	bl	8006738 <IPDef>
						if(b->_enviaruart==1)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a476:	2b01      	cmp	r3, #1
 800a478:	d124      	bne.n	800a4c4 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7fc faaa 	bl	80069d4 <AT_ESP8266_ND>
 800a480:	4602      	mov	r2, r0
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a496:	2b01      	cmp	r3, #1
 800a498:	d109      	bne.n	800a4ae <WiFi_Conn_ND+0x8da>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	f7f7 f889 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	2364      	movs	r3, #100	; 0x64
 800a4be:	68b8      	ldr	r0, [r7, #8]
 800a4c0:	f7fb f87c 	bl	80055bc <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d004      	beq.n	800a4d8 <WiFi_Conn_ND+0x904>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	2b1b      	cmp	r3, #27
 800a4d6:	d104      	bne.n	800a4e2 <WiFi_Conn_ND+0x90e>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d005      	beq.n	800a4f8 <WiFi_Conn_ND+0x924>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b21      	cmp	r3, #33	; 0x21
 800a4f4:	f040 87b5 	bne.w	800b462 <WiFi_Conn_ND+0x188e>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a502:	f000 bfae 	b.w	800b462 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7fc f8be 	bl	8006688 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a512:	2b04      	cmp	r3, #4
 800a514:	d004      	beq.n	800a520 <WiFi_Conn_ND+0x94c>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d112      	bne.n	800a546 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7fc f8c7 	bl	80066b4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2264      	movs	r2, #100	; 0x64
 800a52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54c:	2b0a      	cmp	r3, #10
 800a54e:	d005      	beq.n	800a55c <WiFi_Conn_ND+0x988>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	2b0d      	cmp	r3, #13
 800a558:	f040 8785 	bne.w	800b466 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7fc f8bf 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	22c8      	movs	r2, #200	; 0xc8
 800a566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a57a:	f000 bf74 	b.w	800b466 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7fc f882 	bl	8006688 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d112      	bne.n	800a5b4 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7fc f890 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2264      	movs	r2, #100	; 0x64
 800a598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ba:	2b0a      	cmp	r3, #10
 800a5bc:	d004      	beq.n	800a5c8 <WiFi_Conn_ND+0x9f4>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c4:	2b0d      	cmp	r3, #13
 800a5c6:	d10e      	bne.n	800a5e6 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7fc f889 	bl	80066e0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	22c8      	movs	r2, #200	; 0xc8
 800a5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d111      	bne.n	800a614 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7fc f8cd 	bl	8006790 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a610:	f000 bf46 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7fc f863 	bl	80066e0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	22c8      	movs	r2, #200	; 0xc8
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a632:	f000 bf35 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a640:	d04a      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d045      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b01      	cmp	r3, #1
 800a654:	d040      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	2b0a      	cmp	r3, #10
 800a65e:	d03b      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b0e      	cmp	r3, #14
 800a668:	d036      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a670:	2b0f      	cmp	r3, #15
 800a672:	d031      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	d02c      	beq.n	800a6d8 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7fc f886 	bl	8006790 <ConectarTCP>
						if(b->_enviaruart==1)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d124      	bne.n	800a6d8 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7fc f9a0 	bl	80069d4 <AT_ESP8266_ND>
 800a694:	4602      	mov	r2, r0
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d109      	bne.n	800a6c2 <WiFi_Conn_ND+0xaee>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f7f6 ff7f 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	2364      	movs	r3, #100	; 0x64
 800a6d2:	68b8      	ldr	r0, [r7, #8]
 800a6d4:	f7fa ff72 	bl	80055bc <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d009      	beq.n	800a6f6 <WiFi_Conn_ND+0xb22>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	2b0e      	cmp	r3, #14
 800a6ea:	d004      	beq.n	800a6f6 <WiFi_Conn_ND+0xb22>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b0f      	cmp	r3, #15
 800a6f4:	d106      	bne.n	800a704 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f240 2261 	movw	r2, #609	; 0x261
 800a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a700:	f000 beb3 	b.w	800b46a <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d005      	beq.n	800a71a <WiFi_Conn_ND+0xb46>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a714:	2b10      	cmp	r3, #16
 800a716:	f040 86a8 	bne.w	800b46a <WiFi_Conn_ND+0x1896>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f240 225d 	movw	r2, #605	; 0x25d
 800a720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a724:	f000 bea1 	b.w	800b46a <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7fb ffad 	bl	8006688 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	2b04      	cmp	r3, #4
 800a736:	d112      	bne.n	800a75e <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7fb ffbb 	bl	80066b4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2264      	movs	r2, #100	; 0x64
 800a742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a764:	2b0a      	cmp	r3, #10
 800a766:	d004      	beq.n	800a772 <WiFi_Conn_ND+0xb9e>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76e:	2b0d      	cmp	r3, #13
 800a770:	d10e      	bne.n	800a790 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7fb ffb4 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	22c8      	movs	r2, #200	; 0xc8
 800a77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a796:	2b02      	cmp	r3, #2
 800a798:	d00a      	beq.n	800a7b0 <WiFi_Conn_ND+0xbdc>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d005      	beq.n	800a7b0 <WiFi_Conn_ND+0xbdc>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7aa:	2b0e      	cmp	r3, #14
 800a7ac:	f040 865f 	bne.w	800b46e <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7fb ffed 	bl	8006790 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a7d0:	f000 be4d 	b.w	800b46e <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7fb ff57 	bl	8006688 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d112      	bne.n	800a80a <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7fb ff65 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2264      	movs	r2, #100	; 0x64
 800a7ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a810:	2b0a      	cmp	r3, #10
 800a812:	d004      	beq.n	800a81e <WiFi_Conn_ND+0xc4a>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81a:	2b0d      	cmp	r3, #13
 800a81c:	d10e      	bne.n	800a83c <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7fb ff5e 	bl	80066e0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	22c8      	movs	r2, #200	; 0xc8
 800a828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a842:	2b02      	cmp	r3, #2
 800a844:	d004      	beq.n	800a850 <WiFi_Conn_ND+0xc7c>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84c:	2b10      	cmp	r3, #16
 800a84e:	d10f      	bne.n	800a870 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f7fb ff9d 	bl	8006790 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	2b0e      	cmp	r3, #14
 800a878:	d005      	beq.n	800a886 <WiFi_Conn_ND+0xcb2>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a880:	2b0f      	cmp	r3, #15
 800a882:	f040 85f6 	bne.w	800b472 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	f240 85f0 	bls.w	800b472 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7fb ffbe 	bl	8006814 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a8b2:	f000 bdde 	b.w	800b472 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a8c0:	d054      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d04f      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d2:	2b0a      	cmp	r3, #10
 800a8d4:	d04a      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d045      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e6:	2b11      	cmp	r3, #17
 800a8e8:	d040      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f0:	2b14      	cmp	r3, #20
 800a8f2:	d03b      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fa:	2b12      	cmp	r3, #18
 800a8fc:	d036      	beq.n	800a96c <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a904:	2b02      	cmp	r3, #2
 800a906:	d907      	bls.n	800a918 <WiFi_Conn_ND+0xd44>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7fb ff7e 	bl	8006814 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d124      	bne.n	800a96c <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7fc f856 	bl	80069d4 <AT_ESP8266_ND>
 800a928:	4602      	mov	r2, r0
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d109      	bne.n	800a956 <WiFi_Conn_ND+0xd82>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7f6 fe35 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a962:	b29a      	uxth	r2, r3
 800a964:	2364      	movs	r3, #100	; 0x64
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f7fa fe28 	bl	80055bc <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a972:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a976:	d13b      	bne.n	800a9f0 <WiFi_Conn_ND+0xe1c>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d136      	bne.n	800a9f0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d031      	beq.n	800a9f0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b0a      	cmp	r3, #10
 800a994:	d02c      	beq.n	800a9f0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d027      	beq.n	800a9f0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a6:	2b11      	cmp	r3, #17
 800a9a8:	d022      	beq.n	800a9f0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b0:	2b12      	cmp	r3, #18
 800a9b2:	d01d      	beq.n	800a9f0 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d109      	bne.n	800a9da <WiFi_Conn_ND+0xe06>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f7f6 fdf3 	bl	80015c0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	2364      	movs	r3, #100	; 0x64
 800a9ea:	68b8      	ldr	r0, [r7, #8]
 800a9ec:	f7fa fde6 	bl	80055bc <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f6:	2b13      	cmp	r3, #19
 800a9f8:	d104      	bne.n	800aa04 <WiFi_Conn_ND+0xe30>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f240 22c5 	movw	r2, #709	; 0x2c5
 800aa00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d014      	beq.n	800aa38 <WiFi_Conn_ND+0xe64>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa14:	2b0a      	cmp	r3, #10
 800aa16:	d00f      	beq.n	800aa38 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1e:	2b10      	cmp	r3, #16
 800aa20:	d00a      	beq.n	800aa38 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa28:	2b11      	cmp	r3, #17
 800aa2a:	d005      	beq.n	800aa38 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa32:	2b12      	cmp	r3, #18
 800aa34:	f040 851f 	bne.w	800b476 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800aa3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800aa42:	f000 bd18 	b.w	800b476 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7fb fe1e 	bl	8006688 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d112      	bne.n	800aa7c <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fb fe2c 	bl	80066b4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2264      	movs	r2, #100	; 0x64
 800aa60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa82:	2b0a      	cmp	r3, #10
 800aa84:	d004      	beq.n	800aa90 <WiFi_Conn_ND+0xebc>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa8c:	2b0d      	cmp	r3, #13
 800aa8e:	d10e      	bne.n	800aaae <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7fb fe25 	bl	80066e0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	22c8      	movs	r2, #200	; 0xc8
 800aa9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab4:	2b0c      	cmp	r3, #12
 800aab6:	d10f      	bne.n	800aad8 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7fb fe69 	bl	8006790 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d00f      	beq.n	800ab02 <WiFi_Conn_ND+0xf2e>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae8:	2b10      	cmp	r3, #16
 800aaea:	d00a      	beq.n	800ab02 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf2:	2b11      	cmp	r3, #17
 800aaf4:	d005      	beq.n	800ab02 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafc:	2b12      	cmp	r3, #18
 800aafe:	f040 84bc 	bne.w	800b47a <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7fb fe44 	bl	8006790 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ab22:	f000 bcaa 	b.w	800b47a <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7fb fdae 	bl	8006688 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d112      	bne.n	800ab5c <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7fb fdbc 	bl	80066b4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2264      	movs	r2, #100	; 0x64
 800ab40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab62:	2b0a      	cmp	r3, #10
 800ab64:	d004      	beq.n	800ab70 <WiFi_Conn_ND+0xf9c>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	2b0d      	cmp	r3, #13
 800ab6e:	d10e      	bne.n	800ab8e <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7fb fdb5 	bl	80066e0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	22c8      	movs	r2, #200	; 0xc8
 800ab7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d00e      	beq.n	800abb6 <WiFi_Conn_ND+0xfe2>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9e:	2b0b      	cmp	r3, #11
 800aba0:	d009      	beq.n	800abb6 <WiFi_Conn_ND+0xfe2>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba8:	2b0c      	cmp	r3, #12
 800abaa:	d004      	beq.n	800abb6 <WiFi_Conn_ND+0xfe2>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb2:	2b10      	cmp	r3, #16
 800abb4:	d10f      	bne.n	800abd6 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7fb fdea 	bl	8006790 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800abd6:	20c8      	movs	r0, #200	; 0xc8
 800abd8:	f7f8 f83c 	bl	8002c54 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d916      	bls.n	800ac14 <WiFi_Conn_ND+0x1040>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d011      	beq.n	800ac14 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7fb fe0f 	bl	8006814 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800abfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ac10:	f000 bc46 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f240 2261 	movw	r2, #609	; 0x261
 800ac1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ac2e:	f000 bc37 	b.w	800b4a0 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ac3c:	d045      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d040      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	2b0a      	cmp	r3, #10
 800ac50:	d03b      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac58:	2b15      	cmp	r3, #21
 800ac5a:	d036      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac62:	2b16      	cmp	r3, #22
 800ac64:	d031      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6c:	2b17      	cmp	r3, #23
 800ac6e:	d02c      	beq.n	800acca <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7fb fda3 	bl	80067bc <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d124      	bne.n	800acca <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7fb fea7 	bl	80069d4 <AT_ESP8266_ND>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d109      	bne.n	800acb4 <WiFi_Conn_ND+0x10e0>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f7f6 fc86 	bl	80015c0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	2364      	movs	r3, #100	; 0x64
 800acc4:	68b8      	ldr	r0, [r7, #8]
 800acc6:	f7fa fc79 	bl	80055bc <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd0:	2b15      	cmp	r3, #21
 800acd2:	d004      	beq.n	800acde <WiFi_Conn_ND+0x110a>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acda:	2b17      	cmp	r3, #23
 800acdc:	d104      	bne.n	800ace8 <WiFi_Conn_ND+0x1114>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f240 3229 	movw	r2, #809	; 0x329
 800ace4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	2b16      	cmp	r3, #22
 800acf0:	f040 83c5 	bne.w	800b47e <WiFi_Conn_ND+0x18aa>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f240 3225 	movw	r2, #805	; 0x325
 800acfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800acfe:	e3be      	b.n	800b47e <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7fb fcc1 	bl	8006688 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d112      	bne.n	800ad36 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7fb fccf 	bl	80066b4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2264      	movs	r2, #100	; 0x64
 800ad1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	2b0a      	cmp	r3, #10
 800ad3e:	d004      	beq.n	800ad4a <WiFi_Conn_ND+0x1176>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad46:	2b0d      	cmp	r3, #13
 800ad48:	d10e      	bne.n	800ad68 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7fb fcc8 	bl	80066e0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	22c8      	movs	r2, #200	; 0xc8
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d005      	beq.n	800ad7e <WiFi_Conn_ND+0x11aa>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad78:	2b10      	cmp	r3, #16
 800ad7a:	f040 8382 	bne.w	800b482 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7fb fd06 	bl	8006790 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ad9e:	e370      	b.n	800b482 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7fb fc71 	bl	8006688 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adac:	2b04      	cmp	r3, #4
 800adae:	d112      	bne.n	800add6 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7fb fc7f 	bl	80066b4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2264      	movs	r2, #100	; 0x64
 800adba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800addc:	2b0a      	cmp	r3, #10
 800adde:	d004      	beq.n	800adea <WiFi_Conn_ND+0x1216>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade6:	2b0d      	cmp	r3, #13
 800ade8:	d10e      	bne.n	800ae08 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7fb fc78 	bl	80066e0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	22c8      	movs	r2, #200	; 0xc8
 800adf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d005      	beq.n	800ae1e <WiFi_Conn_ND+0x124a>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	2b10      	cmp	r3, #16
 800ae1a:	f040 8334 	bne.w	800b486 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7fb fcb6 	bl	8006790 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae3e:	e322      	b.n	800b486 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7fb fc21 	bl	8006688 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d112      	bne.n	800ae76 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7fb fc2f 	bl	80066b4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2264      	movs	r2, #100	; 0x64
 800ae5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7c:	2b0a      	cmp	r3, #10
 800ae7e:	d004      	beq.n	800ae8a <WiFi_Conn_ND+0x12b6>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae86:	2b0d      	cmp	r3, #13
 800ae88:	d10e      	bne.n	800aea8 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7fb fc28 	bl	80066e0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	22c8      	movs	r2, #200	; 0xc8
 800ae94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d005      	beq.n	800aebe <WiFi_Conn_ND+0x12ea>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b10      	cmp	r3, #16
 800aeba:	f040 82e6 	bne.w	800b48a <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7fb fc66 	bl	8006790 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aeca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800aede:	e2d4      	b.n	800b48a <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7fb fbd1 	bl	8006688 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d112      	bne.n	800af16 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f7fb fbdf 	bl	80066b4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2264      	movs	r2, #100	; 0x64
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1c:	2b0a      	cmp	r3, #10
 800af1e:	d004      	beq.n	800af2a <WiFi_Conn_ND+0x1356>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af26:	2b0d      	cmp	r3, #13
 800af28:	d10e      	bne.n	800af48 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7fb fbd8 	bl	80066e0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	22c8      	movs	r2, #200	; 0xc8
 800af34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d005      	beq.n	800af5e <WiFi_Conn_ND+0x138a>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af58:	2b10      	cmp	r3, #16
 800af5a:	f040 8298 	bne.w	800b48e <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7fb fc16 	bl	8006790 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800af7e:	e286      	b.n	800b48e <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7fb fb81 	bl	8006688 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af94:	2b04      	cmp	r3, #4
 800af96:	d112      	bne.n	800afbe <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7fb fb8b 	bl	80066b4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2264      	movs	r2, #100	; 0x64
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc4:	2b0a      	cmp	r3, #10
 800afc6:	d004      	beq.n	800afd2 <WiFi_Conn_ND+0x13fe>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afce:	2b0d      	cmp	r3, #13
 800afd0:	d10e      	bne.n	800aff0 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7fb fb84 	bl	80066e0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	22c8      	movs	r2, #200	; 0xc8
 800afdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d004      	beq.n	800b004 <WiFi_Conn_ND+0x1430>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b000:	2b10      	cmp	r3, #16
 800b002:	d10f      	bne.n	800b024 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7fb fbc3 	bl	8006790 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	f040 8231 	bne.w	800b492 <WiFi_Conn_ND+0x18be>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 822b 	beq.w	800b492 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7fb fbd3 	bl	80067e8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b05c:	e219      	b.n	800b492 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b068:	d063      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b070:	2b02      	cmp	r3, #2
 800b072:	d05e      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b07a:	2b0a      	cmp	r3, #10
 800b07c:	d059      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b084:	2b0b      	cmp	r3, #11
 800b086:	d054      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b08e:	2b0c      	cmp	r3, #12
 800b090:	d04f      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b098:	2b10      	cmp	r3, #16
 800b09a:	d04a      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b0a2:	2b11      	cmp	r3, #17
 800b0a4:	d045      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b0ac:	2b12      	cmp	r3, #18
 800b0ae:	d040      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b0b6:	2b13      	cmp	r3, #19
 800b0b8:	d03b      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b0c0:	2b16      	cmp	r3, #22
 800b0c2:	d036      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ca:	2b19      	cmp	r3, #25
 800b0cc:	d031      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d02c      	beq.n	800b132 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7fb fb85 	bl	80067e8 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d124      	bne.n	800b132 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7fb fc73 	bl	80069d4 <AT_ESP8266_ND>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b104:	2b01      	cmp	r3, #1
 800b106:	d109      	bne.n	800b11c <WiFi_Conn_ND+0x1548>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b114:	4619      	mov	r1, r3
 800b116:	4610      	mov	r0, r2
 800b118:	f7f6 fa52 	bl	80015c0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b128:	b29a      	uxth	r2, r3
 800b12a:	2364      	movs	r3, #100	; 0x64
 800b12c:	68b8      	ldr	r0, [r7, #8]
 800b12e:	f7fa fa45 	bl	80055bc <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b138:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b13c:	d154      	bne.n	800b1e8 <WiFi_Conn_ND+0x1614>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b144:	2b01      	cmp	r3, #1
 800b146:	d14f      	bne.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d04a      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b158:	2b0a      	cmp	r3, #10
 800b15a:	d045      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b162:	2b0b      	cmp	r3, #11
 800b164:	d040      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b16c:	2b0c      	cmp	r3, #12
 800b16e:	d03b      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b176:	2b10      	cmp	r3, #16
 800b178:	d036      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b180:	2b11      	cmp	r3, #17
 800b182:	d031      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b18a:	2b12      	cmp	r3, #18
 800b18c:	d02c      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b194:	2b13      	cmp	r3, #19
 800b196:	d027      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b19e:	2b16      	cmp	r3, #22
 800b1a0:	d022      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a8:	2b19      	cmp	r3, #25
 800b1aa:	d01d      	beq.n	800b1e8 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d109      	bne.n	800b1d2 <WiFi_Conn_ND+0x15fe>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f7f6 f9f7 	bl	80015c0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	2364      	movs	r3, #100	; 0x64
 800b1e2:	68b8      	ldr	r0, [r7, #8]
 800b1e4:	f7fa f9ea 	bl	80055bc <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ee:	2b13      	cmp	r3, #19
 800b1f0:	d104      	bne.n	800b1fc <WiFi_Conn_ND+0x1628>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f240 328d 	movw	r2, #909	; 0x38d
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b202:	2b02      	cmp	r3, #2
 800b204:	d02d      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d028      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b216:	2b0a      	cmp	r3, #10
 800b218:	d023      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b220:	2b0b      	cmp	r3, #11
 800b222:	d01e      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b22a:	2b0c      	cmp	r3, #12
 800b22c:	d019      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b234:	2b10      	cmp	r3, #16
 800b236:	d014      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b23e:	2b11      	cmp	r3, #17
 800b240:	d00f      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b248:	2b12      	cmp	r3, #18
 800b24a:	d00a      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b252:	2b16      	cmp	r3, #22
 800b254:	d005      	beq.n	800b262 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25c:	2b19      	cmp	r3, #25
 800b25e:	f040 811a 	bne.w	800b496 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f240 3289 	movw	r2, #905	; 0x389
 800b268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b26c:	e113      	b.n	800b496 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7fb fa0a 	bl	8006688 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d009      	beq.n	800b292 <WiFi_Conn_ND+0x16be>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	2b0b      	cmp	r3, #11
 800b286:	d004      	beq.n	800b292 <WiFi_Conn_ND+0x16be>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28e:	2b0c      	cmp	r3, #12
 800b290:	d112      	bne.n	800b2b8 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7fb fa0e 	bl	80066b4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2264      	movs	r2, #100	; 0x64
 800b29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2be:	2b0a      	cmp	r3, #10
 800b2c0:	d004      	beq.n	800b2cc <WiFi_Conn_ND+0x16f8>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c8:	2b0d      	cmp	r3, #13
 800b2ca:	d10e      	bne.n	800b2ea <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f7fb fa07 	bl	80066e0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22c8      	movs	r2, #200	; 0xc8
 800b2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f0:	2b16      	cmp	r3, #22
 800b2f2:	d10c      	bne.n	800b30e <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f240 3225 	movw	r2, #805	; 0x325
 800b2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b314:	2b18      	cmp	r3, #24
 800b316:	d10c      	bne.n	800b332 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f240 3229 	movw	r2, #809	; 0x329
 800b31e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b338:	2b19      	cmp	r3, #25
 800b33a:	d008      	beq.n	800b34e <WiFi_Conn_ND+0x177a>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b342:	2b11      	cmp	r3, #17
 800b344:	d003      	beq.n	800b34e <WiFi_Conn_ND+0x177a>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2212      	movs	r2, #18
 800b34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b354:	2b01      	cmp	r3, #1
 800b356:	f040 80a0 	bne.w	800b49a <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b374:	e091      	b.n	800b49a <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7fb f986 	bl	8006688 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b382:	2b04      	cmp	r3, #4
 800b384:	d009      	beq.n	800b39a <WiFi_Conn_ND+0x17c6>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38c:	2b0b      	cmp	r3, #11
 800b38e:	d004      	beq.n	800b39a <WiFi_Conn_ND+0x17c6>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b396:	2b0c      	cmp	r3, #12
 800b398:	d112      	bne.n	800b3c0 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7fb f98a 	bl	80066b4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2264      	movs	r2, #100	; 0x64
 800b3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c6:	2b0a      	cmp	r3, #10
 800b3c8:	d004      	beq.n	800b3d4 <WiFi_Conn_ND+0x1800>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d0:	2b0d      	cmp	r3, #13
 800b3d2:	d10e      	bne.n	800b3f2 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f7fb f983 	bl	80066e0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	22c8      	movs	r2, #200	; 0xc8
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d004      	beq.n	800b406 <WiFi_Conn_ND+0x1832>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b402:	2b01      	cmp	r3, #1
 800b404:	d14b      	bne.n	800b49e <WiFi_Conn_ND+0x18ca>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d046      	beq.n	800b49e <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f7fb f9e9 	bl	80067e8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b440:	e02d      	b.n	800b49e <WiFi_Conn_ND+0x18ca>
			break;
 800b442:	bf00      	nop
 800b444:	e02c      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b446:	bf00      	nop
 800b448:	e02a      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b44a:	bf00      	nop
 800b44c:	e028      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b44e:	bf00      	nop
 800b450:	e026      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b452:	bf00      	nop
 800b454:	e024      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b456:	bf00      	nop
 800b458:	e022      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b45a:	bf00      	nop
 800b45c:	e020      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b45e:	bf00      	nop
 800b460:	e01e      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b462:	bf00      	nop
 800b464:	e01c      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b466:	bf00      	nop
 800b468:	e01a      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b46a:	bf00      	nop
 800b46c:	e018      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b46e:	bf00      	nop
 800b470:	e016      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b472:	bf00      	nop
 800b474:	e014      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b476:	bf00      	nop
 800b478:	e012      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
			break;
 800b47a:	bf00      	nop
 800b47c:	e010      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b47e:	bf00      	nop
 800b480:	e00e      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b482:	bf00      	nop
 800b484:	e00c      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b486:	bf00      	nop
 800b488:	e00a      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b48a:	bf00      	nop
 800b48c:	e008      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b48e:	bf00      	nop
 800b490:	e006      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b492:	bf00      	nop
 800b494:	e004      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b496:	bf00      	nop
 800b498:	e002      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b49a:	bf00      	nop
 800b49c:	e000      	b.n	800b4a0 <WiFi_Conn_ND+0x18cc>
						break;
 800b49e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop

0800b4b0 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b4b0:	b5b0      	push	{r4, r5, r7, lr}
 800b4b2:	b0a8      	sub	sp, #160	; 0xa0
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b4be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b4ce:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4d2:	f7f4 fe8f 	bl	80001f4 <strlen>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4de:	4413      	add	r3, r2
 800b4e0:	4aed      	ldr	r2, [pc, #948]	; (800b898 <httpPOST+0x3e8>)
 800b4e2:	6810      	ldr	r0, [r2, #0]
 800b4e4:	6018      	str	r0, [r3, #0]
 800b4e6:	8892      	ldrh	r2, [r2, #4]
 800b4e8:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7f4 fe82 	bl	80001f4 <strlen>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	68f9      	ldr	r1, [r7, #12]
 800b4f6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b4fa:	f003 fe20 	bl	800f13e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b4fe:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b502:	f7f4 fe77 	bl	80001f4 <strlen>
 800b506:	4603      	mov	r3, r0
 800b508:	461a      	mov	r2, r3
 800b50a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b50e:	4413      	add	r3, r2
 800b510:	49e2      	ldr	r1, [pc, #904]	; (800b89c <httpPOST+0x3ec>)
 800b512:	461a      	mov	r2, r3
 800b514:	460b      	mov	r3, r1
 800b516:	cb03      	ldmia	r3!, {r0, r1}
 800b518:	6010      	str	r0, [r2, #0]
 800b51a:	6051      	str	r1, [r2, #4]
 800b51c:	8819      	ldrh	r1, [r3, #0]
 800b51e:	789b      	ldrb	r3, [r3, #2]
 800b520:	8111      	strh	r1, [r2, #8]
 800b522:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b524:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b528:	f7f4 fe64 	bl	80001f4 <strlen>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b534:	4413      	add	r3, r2
 800b536:	4ada      	ldr	r2, [pc, #872]	; (800b8a0 <httpPOST+0x3f0>)
 800b538:	8811      	ldrh	r1, [r2, #0]
 800b53a:	7892      	ldrb	r2, [r2, #2]
 800b53c:	8019      	strh	r1, [r3, #0]
 800b53e:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b540:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b544:	f7f4 fe56 	bl	80001f4 <strlen>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b550:	4413      	add	r3, r2
 800b552:	4ad4      	ldr	r2, [pc, #848]	; (800b8a4 <httpPOST+0x3f4>)
 800b554:	6810      	ldr	r0, [r2, #0]
 800b556:	6018      	str	r0, [r3, #0]
 800b558:	8891      	ldrh	r1, [r2, #4]
 800b55a:	7992      	ldrb	r2, [r2, #6]
 800b55c:	8099      	strh	r1, [r3, #4]
 800b55e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b560:	68b8      	ldr	r0, [r7, #8]
 800b562:	f7f4 fe47 	bl	80001f4 <strlen>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b570:	f003 fde5 	bl	800f13e <strncat>
	strncat(post,":",1);
 800b574:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b578:	f7f4 fe3c 	bl	80001f4 <strlen>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b584:	4413      	add	r3, r2
 800b586:	49c8      	ldr	r1, [pc, #800]	; (800b8a8 <httpPOST+0x3f8>)
 800b588:	461a      	mov	r2, r3
 800b58a:	460b      	mov	r3, r1
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7f4 fe2f 	bl	80001f4 <strlen>
 800b596:	4603      	mov	r3, r0
 800b598:	461a      	mov	r2, r3
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5a0:	f003 fdcd 	bl	800f13e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b5a4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5a8:	f7f4 fe24 	bl	80001f4 <strlen>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b5b4:	4413      	add	r3, r2
 800b5b6:	4aba      	ldr	r2, [pc, #744]	; (800b8a0 <httpPOST+0x3f0>)
 800b5b8:	8811      	ldrh	r1, [r2, #0]
 800b5ba:	7892      	ldrb	r2, [r2, #2]
 800b5bc:	8019      	strh	r1, [r3, #0]
 800b5be:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b5c0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5c4:	f7f4 fe16 	bl	80001f4 <strlen>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b5d0:	4413      	add	r3, r2
 800b5d2:	4ab6      	ldr	r2, [pc, #728]	; (800b8ac <httpPOST+0x3fc>)
 800b5d4:	461d      	mov	r5, r3
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5da:	6028      	str	r0, [r5, #0]
 800b5dc:	6069      	str	r1, [r5, #4]
 800b5de:	60aa      	str	r2, [r5, #8]
 800b5e0:	60eb      	str	r3, [r5, #12]
 800b5e2:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b5e4:	6128      	str	r0, [r5, #16]
 800b5e6:	6169      	str	r1, [r5, #20]
 800b5e8:	61aa      	str	r2, [r5, #24]
 800b5ea:	8823      	ldrh	r3, [r4, #0]
 800b5ec:	78a2      	ldrb	r2, [r4, #2]
 800b5ee:	83ab      	strh	r3, [r5, #28]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b5f4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5f8:	f7f4 fdfc 	bl	80001f4 <strlen>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461a      	mov	r2, r3
 800b600:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b604:	4413      	add	r3, r2
 800b606:	4aa6      	ldr	r2, [pc, #664]	; (800b8a0 <httpPOST+0x3f0>)
 800b608:	8811      	ldrh	r1, [r2, #0]
 800b60a:	7892      	ldrb	r2, [r2, #2]
 800b60c:	8019      	strh	r1, [r3, #0]
 800b60e:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b610:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b614:	f7f4 fdee 	bl	80001f4 <strlen>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b620:	4413      	add	r3, r2
 800b622:	4aa3      	ldr	r2, [pc, #652]	; (800b8b0 <httpPOST+0x400>)
 800b624:	461c      	mov	r4, r3
 800b626:	4615      	mov	r5, r2
 800b628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b62a:	6020      	str	r0, [r4, #0]
 800b62c:	6061      	str	r1, [r4, #4]
 800b62e:	60a2      	str	r2, [r4, #8]
 800b630:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b632:	2300      	movs	r3, #0
 800b634:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b638:	887b      	ldrh	r3, [r7, #2]
 800b63a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f003 faf5 	bl	800ec30 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b646:	2300      	movs	r3, #0
 800b648:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b64c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b650:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b654:	4611      	mov	r1, r2
 800b656:	4618      	mov	r0, r3
 800b658:	f003 faea 	bl	800ec30 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b65c:	2300      	movs	r3, #0
 800b65e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b662:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b666:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b66a:	4611      	mov	r1, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f003 fadf 	bl	800ec30 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b672:	2300      	movs	r3, #0
 800b674:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b678:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b67c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f003 fad4 	bl	800ec30 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b688:	2300      	movs	r3, #0
 800b68a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b68e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b692:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f003 fac9 	bl	800ec30 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b6a4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b6a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f003 fabe 	bl	800ec30 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b6ba:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b6be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f003 fab3 	bl	800ec30 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b6d0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b6d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f003 faa8 	bl	800ec30 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b6e6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b6ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f003 fa9d 	bl	800ec30 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b6fc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b700:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b704:	4611      	mov	r1, r2
 800b706:	4618      	mov	r0, r3
 800b708:	f003 fa92 	bl	800ec30 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b712:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b716:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f003 fa87 	bl	800ec30 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b722:	2300      	movs	r3, #0
 800b724:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b728:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b72c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f003 fa7c 	bl	800ec30 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b73e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b742:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f003 fa71 	bl	800ec30 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b74e:	2300      	movs	r3, #0
 800b750:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b754:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b758:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f003 fa66 	bl	800ec30 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b764:	2300      	movs	r3, #0
 800b766:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b76a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b76e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f003 fa5b 	bl	800ec30 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b77a:	2300      	movs	r3, #0
 800b77c:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b780:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b784:	f107 0220 	add.w	r2, r7, #32
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f003 fa50 	bl	800ec30 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b790:	2300      	movs	r3, #0
 800b792:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b794:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b798:	f107 0218 	add.w	r2, r7, #24
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f003 fa46 	bl	800ec30 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b7a4:	4843      	ldr	r0, [pc, #268]	; (800b8b4 <httpPOST+0x404>)
 800b7a6:	f7f4 fd25 	bl	80001f4 <strlen>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4941      	ldr	r1, [pc, #260]	; (800b8b4 <httpPOST+0x404>)
 800b7b0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7b4:	f003 fcc3 	bl	800f13e <strncat>
	strncat(body,_d1,strlen(_d1));
 800b7b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7f4 fd19 	bl	80001f4 <strlen>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7ce:	f003 fcb6 	bl	800f13e <strncat>

	strncat(body,dd2,strlen(dd2));
 800b7d2:	4839      	ldr	r0, [pc, #228]	; (800b8b8 <httpPOST+0x408>)
 800b7d4:	f7f4 fd0e 	bl	80001f4 <strlen>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4936      	ldr	r1, [pc, #216]	; (800b8b8 <httpPOST+0x408>)
 800b7de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7e2:	f003 fcac 	bl	800f13e <strncat>
	strncat(body,_d2,strlen(_d2));
 800b7e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f4 fd02 	bl	80001f4 <strlen>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7fc:	f003 fc9f 	bl	800f13e <strncat>

	strncat(body,dd3,strlen(dd3));
 800b800:	482e      	ldr	r0, [pc, #184]	; (800b8bc <httpPOST+0x40c>)
 800b802:	f7f4 fcf7 	bl	80001f4 <strlen>
 800b806:	4603      	mov	r3, r0
 800b808:	461a      	mov	r2, r3
 800b80a:	492c      	ldr	r1, [pc, #176]	; (800b8bc <httpPOST+0x40c>)
 800b80c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b810:	f003 fc95 	bl	800f13e <strncat>
	strncat(body,_d3,strlen(_d3));
 800b814:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f4 fceb 	bl	80001f4 <strlen>
 800b81e:	4602      	mov	r2, r0
 800b820:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b824:	4619      	mov	r1, r3
 800b826:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b82a:	f003 fc88 	bl	800f13e <strncat>

	strncat(body,dd4,strlen(dd4));
 800b82e:	4824      	ldr	r0, [pc, #144]	; (800b8c0 <httpPOST+0x410>)
 800b830:	f7f4 fce0 	bl	80001f4 <strlen>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	4921      	ldr	r1, [pc, #132]	; (800b8c0 <httpPOST+0x410>)
 800b83a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b83e:	f003 fc7e 	bl	800f13e <strncat>
	strncat(body,_d4,strlen(_d4));
 800b842:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b846:	4618      	mov	r0, r3
 800b848:	f7f4 fcd4 	bl	80001f4 <strlen>
 800b84c:	4602      	mov	r2, r0
 800b84e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b852:	4619      	mov	r1, r3
 800b854:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b858:	f003 fc71 	bl	800f13e <strncat>

	strncat(body,dd5,strlen(dd5));
 800b85c:	4819      	ldr	r0, [pc, #100]	; (800b8c4 <httpPOST+0x414>)
 800b85e:	f7f4 fcc9 	bl	80001f4 <strlen>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	4917      	ldr	r1, [pc, #92]	; (800b8c4 <httpPOST+0x414>)
 800b868:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b86c:	f003 fc67 	bl	800f13e <strncat>
	strncat(body,_d5,strlen(_d5));
 800b870:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b874:	4618      	mov	r0, r3
 800b876:	f7f4 fcbd 	bl	80001f4 <strlen>
 800b87a:	4602      	mov	r2, r0
 800b87c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b880:	4619      	mov	r1, r3
 800b882:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b886:	f003 fc5a 	bl	800f13e <strncat>

	strncat(body,dd6,strlen(dd6));
 800b88a:	480f      	ldr	r0, [pc, #60]	; (800b8c8 <httpPOST+0x418>)
 800b88c:	f7f4 fcb2 	bl	80001f4 <strlen>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	e01a      	b.n	800b8cc <httpPOST+0x41c>
 800b896:	bf00      	nop
 800b898:	0801077c 	.word	0x0801077c
 800b89c:	08010784 	.word	0x08010784
 800b8a0:	08010790 	.word	0x08010790
 800b8a4:	08010794 	.word	0x08010794
 800b8a8:	0801079c 	.word	0x0801079c
 800b8ac:	080107a0 	.word	0x080107a0
 800b8b0:	080107c0 	.word	0x080107c0
 800b8b4:	20000090 	.word	0x20000090
 800b8b8:	20000098 	.word	0x20000098
 800b8bc:	200000a0 	.word	0x200000a0
 800b8c0:	200000a8 	.word	0x200000a8
 800b8c4:	200000b0 	.word	0x200000b0
 800b8c8:	200000b8 	.word	0x200000b8
 800b8cc:	49af      	ldr	r1, [pc, #700]	; (800bb8c <httpPOST+0x6dc>)
 800b8ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8d2:	f003 fc34 	bl	800f13e <strncat>
	strncat(body,_d6,strlen(_d6));
 800b8d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f4 fc8a 	bl	80001f4 <strlen>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8ec:	f003 fc27 	bl	800f13e <strncat>

	strncat(body,dd7,strlen(dd7));
 800b8f0:	48a7      	ldr	r0, [pc, #668]	; (800bb90 <httpPOST+0x6e0>)
 800b8f2:	f7f4 fc7f 	bl	80001f4 <strlen>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	49a5      	ldr	r1, [pc, #660]	; (800bb90 <httpPOST+0x6e0>)
 800b8fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b900:	f003 fc1d 	bl	800f13e <strncat>
	strncat(body,_d7,strlen(_d7));
 800b904:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f4 fc73 	bl	80001f4 <strlen>
 800b90e:	4602      	mov	r2, r0
 800b910:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b914:	4619      	mov	r1, r3
 800b916:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b91a:	f003 fc10 	bl	800f13e <strncat>

	strncat(body,dd8,strlen(dd8));
 800b91e:	489d      	ldr	r0, [pc, #628]	; (800bb94 <httpPOST+0x6e4>)
 800b920:	f7f4 fc68 	bl	80001f4 <strlen>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	499a      	ldr	r1, [pc, #616]	; (800bb94 <httpPOST+0x6e4>)
 800b92a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b92e:	f003 fc06 	bl	800f13e <strncat>
	strncat(body,_d8,strlen(_d8));
 800b932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b936:	4618      	mov	r0, r3
 800b938:	f7f4 fc5c 	bl	80001f4 <strlen>
 800b93c:	4602      	mov	r2, r0
 800b93e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b942:	4619      	mov	r1, r3
 800b944:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b948:	f003 fbf9 	bl	800f13e <strncat>

	strncat(body,dd9,strlen(dd9));
 800b94c:	4892      	ldr	r0, [pc, #584]	; (800bb98 <httpPOST+0x6e8>)
 800b94e:	f7f4 fc51 	bl	80001f4 <strlen>
 800b952:	4603      	mov	r3, r0
 800b954:	461a      	mov	r2, r3
 800b956:	4990      	ldr	r1, [pc, #576]	; (800bb98 <httpPOST+0x6e8>)
 800b958:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b95c:	f003 fbef 	bl	800f13e <strncat>
	strncat(body,_d9,strlen(_d9));
 800b960:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b964:	4618      	mov	r0, r3
 800b966:	f7f4 fc45 	bl	80001f4 <strlen>
 800b96a:	4602      	mov	r2, r0
 800b96c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b970:	4619      	mov	r1, r3
 800b972:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b976:	f003 fbe2 	bl	800f13e <strncat>

	strncat(body,dd10,strlen(dd10));
 800b97a:	4888      	ldr	r0, [pc, #544]	; (800bb9c <httpPOST+0x6ec>)
 800b97c:	f7f4 fc3a 	bl	80001f4 <strlen>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	4985      	ldr	r1, [pc, #532]	; (800bb9c <httpPOST+0x6ec>)
 800b986:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b98a:	f003 fbd8 	bl	800f13e <strncat>
	strncat(body,_d10,strlen(_d10));
 800b98e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b992:	4618      	mov	r0, r3
 800b994:	f7f4 fc2e 	bl	80001f4 <strlen>
 800b998:	4602      	mov	r2, r0
 800b99a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b99e:	4619      	mov	r1, r3
 800b9a0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9a4:	f003 fbcb 	bl	800f13e <strncat>

	strncat(body,dd11,strlen(dd11));
 800b9a8:	487d      	ldr	r0, [pc, #500]	; (800bba0 <httpPOST+0x6f0>)
 800b9aa:	f7f4 fc23 	bl	80001f4 <strlen>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	497b      	ldr	r1, [pc, #492]	; (800bba0 <httpPOST+0x6f0>)
 800b9b4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9b8:	f003 fbc1 	bl	800f13e <strncat>
	strncat(body,_d11,strlen(_d11));
 800b9bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f4 fc17 	bl	80001f4 <strlen>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9d2:	f003 fbb4 	bl	800f13e <strncat>

	strncat(body,dd12,strlen(dd12));
 800b9d6:	4873      	ldr	r0, [pc, #460]	; (800bba4 <httpPOST+0x6f4>)
 800b9d8:	f7f4 fc0c 	bl	80001f4 <strlen>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4970      	ldr	r1, [pc, #448]	; (800bba4 <httpPOST+0x6f4>)
 800b9e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9e6:	f003 fbaa 	bl	800f13e <strncat>
	strncat(body,_d12,strlen(_d12));
 800b9ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f4 fc00 	bl	80001f4 <strlen>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba00:	f003 fb9d 	bl	800f13e <strncat>

	strncat(body,dd13,strlen(dd13));
 800ba04:	4868      	ldr	r0, [pc, #416]	; (800bba8 <httpPOST+0x6f8>)
 800ba06:	f7f4 fbf5 	bl	80001f4 <strlen>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	4966      	ldr	r1, [pc, #408]	; (800bba8 <httpPOST+0x6f8>)
 800ba10:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba14:	f003 fb93 	bl	800f13e <strncat>
	strncat(body,_d13,strlen(_d13));
 800ba18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7f4 fbe9 	bl	80001f4 <strlen>
 800ba22:	4602      	mov	r2, r0
 800ba24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba2e:	f003 fb86 	bl	800f13e <strncat>

	strncat(body,dd14,strlen(dd14));
 800ba32:	485e      	ldr	r0, [pc, #376]	; (800bbac <httpPOST+0x6fc>)
 800ba34:	f7f4 fbde 	bl	80001f4 <strlen>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	495b      	ldr	r1, [pc, #364]	; (800bbac <httpPOST+0x6fc>)
 800ba3e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba42:	f003 fb7c 	bl	800f13e <strncat>
	strncat(body,_d14,strlen(_d14));
 800ba46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7f4 fbd2 	bl	80001f4 <strlen>
 800ba50:	4602      	mov	r2, r0
 800ba52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba56:	4619      	mov	r1, r3
 800ba58:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba5c:	f003 fb6f 	bl	800f13e <strncat>

	strncat(body,dd15,strlen(dd15));
 800ba60:	4853      	ldr	r0, [pc, #332]	; (800bbb0 <httpPOST+0x700>)
 800ba62:	f7f4 fbc7 	bl	80001f4 <strlen>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4951      	ldr	r1, [pc, #324]	; (800bbb0 <httpPOST+0x700>)
 800ba6c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba70:	f003 fb65 	bl	800f13e <strncat>
	strncat(body,_d15,strlen(_d15));
 800ba74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f4 fbbb 	bl	80001f4 <strlen>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba84:	4619      	mov	r1, r3
 800ba86:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba8a:	f003 fb58 	bl	800f13e <strncat>

	strncat(body,dd16,strlen(dd16));
 800ba8e:	4849      	ldr	r0, [pc, #292]	; (800bbb4 <httpPOST+0x704>)
 800ba90:	f7f4 fbb0 	bl	80001f4 <strlen>
 800ba94:	4603      	mov	r3, r0
 800ba96:	461a      	mov	r2, r3
 800ba98:	4946      	ldr	r1, [pc, #280]	; (800bbb4 <httpPOST+0x704>)
 800ba9a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba9e:	f003 fb4e 	bl	800f13e <strncat>
	strncat(body,_d16,strlen(_d16));
 800baa2:	f107 0320 	add.w	r3, r7, #32
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f4 fba4 	bl	80001f4 <strlen>
 800baac:	4602      	mov	r2, r0
 800baae:	f107 0320 	add.w	r3, r7, #32
 800bab2:	4619      	mov	r1, r3
 800bab4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bab8:	f003 fb41 	bl	800f13e <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800babc:	483e      	ldr	r0, [pc, #248]	; (800bbb8 <httpPOST+0x708>)
 800babe:	f7f4 fb99 	bl	80001f4 <strlen>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461a      	mov	r2, r3
 800bac6:	493c      	ldr	r1, [pc, #240]	; (800bbb8 <httpPOST+0x708>)
 800bac8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bacc:	f003 fb37 	bl	800f13e <strncat>
	strncat(body,_devId,strlen(_devId));
 800bad0:	f107 0318 	add.w	r3, r7, #24
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f4 fb8d 	bl	80001f4 <strlen>
 800bada:	4602      	mov	r2, r0
 800badc:	f107 0318 	add.w	r3, r7, #24
 800bae0:	4619      	mov	r1, r3
 800bae2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bae6:	f003 fb2a 	bl	800f13e <strncat>

	strncat(body,"}",strlen("}"));
 800baea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800baee:	f7f4 fb81 	bl	80001f4 <strlen>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafa:	4413      	add	r3, r2
 800bafc:	492f      	ldr	r1, [pc, #188]	; (800bbbc <httpPOST+0x70c>)
 800bafe:	461a      	mov	r2, r3
 800bb00:	460b      	mov	r3, r1
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bb06:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb0a:	f7f4 fb73 	bl	80001f4 <strlen>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	f107 0310 	add.w	r3, r7, #16
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f003 f88a 	bl	800ec30 <INTOA>
	strncat(post,length,strlen(length));
 800bb1c:	f107 0310 	add.w	r3, r7, #16
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7f4 fb67 	bl	80001f4 <strlen>
 800bb26:	4602      	mov	r2, r0
 800bb28:	f107 0310 	add.w	r3, r7, #16
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb32:	f003 fb04 	bl	800f13e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bb36:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb3a:	f7f4 fb5b 	bl	80001f4 <strlen>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	461a      	mov	r2, r3
 800bb42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb46:	4413      	add	r3, r2
 800bb48:	4a1d      	ldr	r2, [pc, #116]	; (800bbc0 <httpPOST+0x710>)
 800bb4a:	6810      	ldr	r0, [r2, #0]
 800bb4c:	6018      	str	r0, [r3, #0]
 800bb4e:	7912      	ldrb	r2, [r2, #4]
 800bb50:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bb52:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb56:	f7f4 fb4d 	bl	80001f4 <strlen>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d20d      	bcs.n	800bb80 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800bb64:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb68:	f7f4 fb44 	bl	80001f4 <strlen>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800bb74:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb78:	f003 fae1 	bl	800f13e <strncat>
		return 1 ;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e000      	b.n	800bb82 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800bb80:	2300      	movs	r3, #0
		}
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	37a0      	adds	r7, #160	; 0xa0
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bdb0      	pop	{r4, r5, r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200000b8 	.word	0x200000b8
 800bb90:	200000c0 	.word	0x200000c0
 800bb94:	200000c8 	.word	0x200000c8
 800bb98:	200000d0 	.word	0x200000d0
 800bb9c:	200000d8 	.word	0x200000d8
 800bba0:	200000e0 	.word	0x200000e0
 800bba4:	200000e8 	.word	0x200000e8
 800bba8:	200000f0 	.word	0x200000f0
 800bbac:	200000f8 	.word	0x200000f8
 800bbb0:	20000100 	.word	0x20000100
 800bbb4:	20000108 	.word	0x20000108
 800bbb8:	20000110 	.word	0x20000110
 800bbbc:	080107d0 	.word	0x080107d0
 800bbc0:	080107d4 	.word	0x080107d4

0800bbc4 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bbc4:	b5b0      	push	{r4, r5, r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bbd4:	2bf1      	cmp	r3, #241	; 0xf1
 800bbd6:	dd01      	ble.n	800bbdc <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e099      	b.n	800bd10 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bbdc:	2300      	movs	r3, #0
 800bbde:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bbe6:	f107 0108 	add.w	r1, r7, #8
 800bbea:	220a      	movs	r2, #10
 800bbec:	4618      	mov	r0, r3
 800bbee:	f003 f8ba 	bl	800ed66 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc00:	4620      	mov	r0, r4
 800bc02:	f7f4 faf7 	bl	80001f4 <strlen>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4423      	add	r3, r4
 800bc0a:	4943      	ldr	r1, [pc, #268]	; (800bd18 <LoRa_Send+0x154>)
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	460b      	mov	r3, r1
 800bc10:	cb03      	ldmia	r3!, {r0, r1}
 800bc12:	6010      	str	r0, [r2, #0]
 800bc14:	6051      	str	r1, [r2, #4]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f103 0516 	add.w	r5, r3, #22
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3316      	adds	r3, #22
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f4 fae2 	bl	80001f4 <strlen>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f003 fa81 	bl	800f13e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc42:	4620      	mov	r0, r4
 800bc44:	f7f4 fad6 	bl	80001f4 <strlen>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	4423      	add	r3, r4
 800bc4c:	4933      	ldr	r1, [pc, #204]	; (800bd1c <LoRa_Send+0x158>)
 800bc4e:	461a      	mov	r2, r3
 800bc50:	460b      	mov	r3, r1
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc5c:	f107 0308 	add.w	r3, r7, #8
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7f4 fac7 	bl	80001f4 <strlen>
 800bc66:	4602      	mov	r2, r0
 800bc68:	f107 0308 	add.w	r3, r7, #8
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f003 fa65 	bl	800f13e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f7f4 faba 	bl	80001f4 <strlen>
 800bc80:	4603      	mov	r3, r0
 800bc82:	4423      	add	r3, r4
 800bc84:	4925      	ldr	r1, [pc, #148]	; (800bd1c <LoRa_Send+0x158>)
 800bc86:	461a      	mov	r2, r3
 800bc88:	460b      	mov	r3, r1
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f4 faad 	bl	80001f4 <strlen>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4413      	add	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bcae:	e012      	b.n	800bcd6 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bcba:	7819      	ldrb	r1, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bcc6:	460a      	mov	r2, r1
 800bcc8:	701a      	strb	r2, [r3, #0]
			la++;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	3301      	adds	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
			lc++;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	dbe8      	blt.n	800bcb0 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	617a      	str	r2, [r7, #20]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	4413      	add	r3, r2
 800bce8:	220d      	movs	r2, #13
 800bcea:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	617a      	str	r2, [r7, #20]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	b292      	uxth	r2, r2
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6838      	ldr	r0, [r7, #0]
 800bd0c:	f7f9 fce8 	bl	80056e0 <HAL_UART_Transmit_IT>
	}

}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bdb0      	pop	{r4, r5, r7, pc}
 800bd18:	080107dc 	.word	0x080107dc
 800bd1c:	080107e8 	.word	0x080107e8

0800bd20 <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
	...

0800bd58 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fa25 	bl	800c1b0 <Lora_idSTR>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b10      	cmp	r3, #16
 800bd6a:	f200 820c 	bhi.w	800c186 <LoRa_decode+0x42e>
 800bd6e:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <LoRa_decode+0x1c>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bdb9 	.word	0x0800bdb9
 800bd78:	0800be91 	.word	0x0800be91
 800bd7c:	0800c0c5 	.word	0x0800c0c5
 800bd80:	0800c0cf 	.word	0x0800c0cf
 800bd84:	0800c0d9 	.word	0x0800c0d9
 800bd88:	0800c0e3 	.word	0x0800c0e3
 800bd8c:	0800c0ed 	.word	0x0800c0ed
 800bd90:	0800c0f7 	.word	0x0800c0f7
 800bd94:	0800c101 	.word	0x0800c101
 800bd98:	0800c10b 	.word	0x0800c10b
 800bd9c:	0800c115 	.word	0x0800c115
 800bda0:	0800c155 	.word	0x0800c155
 800bda4:	0800c15f 	.word	0x0800c15f
 800bda8:	0800c173 	.word	0x0800c173
 800bdac:	0800c169 	.word	0x0800c169
 800bdb0:	0800c0bb 	.word	0x0800c0bb
 800bdb4:	0800c17d 	.word	0x0800c17d
	{
		case _OK:
		{
			switch(b->estado)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	2b13      	cmp	r3, #19
 800bdc2:	d860      	bhi.n	800be86 <LoRa_decode+0x12e>
 800bdc4:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <LoRa_decode+0x74>)
 800bdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdca:	bf00      	nop
 800bdcc:	0800be1d 	.word	0x0800be1d
 800bdd0:	0800be87 	.word	0x0800be87
 800bdd4:	0800be87 	.word	0x0800be87
 800bdd8:	0800be87 	.word	0x0800be87
 800bddc:	0800be87 	.word	0x0800be87
 800bde0:	0800be87 	.word	0x0800be87
 800bde4:	0800be27 	.word	0x0800be27
 800bde8:	0800be31 	.word	0x0800be31
 800bdec:	0800be87 	.word	0x0800be87
 800bdf0:	0800be3b 	.word	0x0800be3b
 800bdf4:	0800be87 	.word	0x0800be87
 800bdf8:	0800be45 	.word	0x0800be45
 800bdfc:	0800be87 	.word	0x0800be87
 800be00:	0800be4f 	.word	0x0800be4f
 800be04:	0800be87 	.word	0x0800be87
 800be08:	0800be59 	.word	0x0800be59
 800be0c:	0800be87 	.word	0x0800be87
 800be10:	0800be63 	.word	0x0800be63
 800be14:	0800be87 	.word	0x0800be87
 800be18:	0800be6d 	.word	0x0800be6d
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be24:	e02f      	b.n	800be86 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2206      	movs	r2, #6
 800be2a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be2e:	e02a      	b.n	800be86 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2209      	movs	r2, #9
 800be34:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be38:	e025      	b.n	800be86 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	220b      	movs	r2, #11
 800be3e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be42:	e020      	b.n	800be86 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	220d      	movs	r2, #13
 800be48:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be4c:	e01b      	b.n	800be86 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	220f      	movs	r2, #15
 800be52:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be56:	e016      	b.n	800be86 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2211      	movs	r2, #17
 800be5c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be60:	e011      	b.n	800be86 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2213      	movs	r2, #19
 800be66:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be6a:	e00c      	b.n	800be86 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2215      	movs	r2, #21
 800be70:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800be7c:	2111      	movs	r1, #17
 800be7e:	48a8      	ldr	r0, [pc, #672]	; (800c120 <LoRa_decode+0x3c8>)
 800be80:	f7f5 fb9e 	bl	80015c0 <ITM0_Write>
					}
					break;
 800be84:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800be86:	210c      	movs	r1, #12
 800be88:	48a6      	ldr	r0, [pc, #664]	; (800c124 <LoRa_decode+0x3cc>)
 800be8a:	f7f5 fb99 	bl	80015c0 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800be8e:	e17f      	b.n	800c190 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800be90:	210d      	movs	r1, #13
 800be92:	48a5      	ldr	r0, [pc, #660]	; (800c128 <LoRa_decode+0x3d0>)
 800be94:	f7f5 fb94 	bl	80015c0 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	221a      	movs	r2, #26
 800be9c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
					int j=0;
 800beac:	2300      	movs	r3, #0
 800beae:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800beb4:	e002      	b.n	800bebc <LoRa_decode+0x164>
					{ i++;}
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	3301      	adds	r3, #1
 800beba:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	4413      	add	r3, r2
 800bec2:	3356      	adds	r3, #86	; 0x56
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b3d      	cmp	r3, #61	; 0x3d
 800bec8:	d1f5      	bne.n	800beb6 <LoRa_decode+0x15e>
					i++;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	3301      	adds	r3, #1
 800bece:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bed0:	e017      	b.n	800bf02 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	4413      	add	r3, r2
 800bed8:	3356      	adds	r3, #86	; 0x56
 800beda:	7819      	ldrb	r1, [r3, #0]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	4413      	add	r3, r2
 800bee2:	3306      	adds	r3, #6
 800bee4:	460a      	mov	r2, r1
 800bee6:	701a      	strb	r2, [r3, #0]
						i++;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	3301      	adds	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
						j++;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3301      	adds	r3, #1
 800bef2:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b06      	cmp	r3, #6
 800bef8:	dd03      	ble.n	800bf02 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fb9a 	bl	800c634 <Lora_rx_del>
							break;
 800bf00:	e006      	b.n	800bf10 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	4413      	add	r3, r2
 800bf08:	3356      	adds	r3, #86	; 0x56
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	2b2c      	cmp	r3, #44	; 0x2c
 800bf0e:	d1e0      	bne.n	800bed2 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	4413      	add	r3, r2
 800bf16:	3306      	adds	r3, #6
 800bf18:	2200      	movs	r2, #0
 800bf1a:	701a      	strb	r2, [r3, #0]
					j=0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	613b      	str	r3, [r7, #16]
					i++;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	3301      	adds	r3, #1
 800bf24:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bf26:	e017      	b.n	800bf58 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	3356      	adds	r3, #86	; 0x56
 800bf30:	7819      	ldrb	r1, [r3, #0]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4413      	add	r3, r2
 800bf38:	330c      	adds	r3, #12
 800bf3a:	460a      	mov	r2, r1
 800bf3c:	701a      	strb	r2, [r3, #0]
						i++;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	3301      	adds	r3, #1
 800bf42:	617b      	str	r3, [r7, #20]
						j++;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3301      	adds	r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	dd03      	ble.n	800bf58 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fb6f 	bl	800c634 <Lora_rx_del>
							break;
 800bf56:	e006      	b.n	800bf66 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	3356      	adds	r3, #86	; 0x56
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b2c      	cmp	r3, #44	; 0x2c
 800bf64:	d1e0      	bne.n	800bf28 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	330c      	adds	r3, #12
 800bf6e:	2200      	movs	r2, #0
 800bf70:	701a      	strb	r2, [r3, #0]
					j=0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
					i++;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	330c      	adds	r3, #12
 800bf80:	210a      	movs	r1, #10
 800bf82:	4618      	mov	r0, r3
 800bf84:	f002 fed3 	bl	800ed2e <atoi>
 800bf88:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bf8a:	e019      	b.n	800bfc0 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	4413      	add	r3, r2
 800bf92:	3356      	adds	r3, #86	; 0x56
 800bf94:	7819      	ldrb	r1, [r3, #0]
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	701a      	strb	r2, [r3, #0]
						j++;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	613b      	str	r3, [r7, #16]
						i++;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	3301      	adds	r3, #1
 800bfae:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	dd03      	ble.n	800bfc0 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fb3b 	bl	800c634 <Lora_rx_del>
							break;
 800bfbe:	e006      	b.n	800bfce <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	3356      	adds	r3, #86	; 0x56
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b2c      	cmp	r3, #44	; 0x2c
 800bfcc:	d1de      	bne.n	800bf8c <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	613b      	str	r3, [r7, #16]
					i++;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bfe0:	e017      	b.n	800c012 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3356      	adds	r3, #86	; 0x56
 800bfea:	7819      	ldrb	r1, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	4413      	add	r3, r2
 800bff2:	3310      	adds	r3, #16
 800bff4:	460a      	mov	r2, r1
 800bff6:	701a      	strb	r2, [r3, #0]
						i++;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	3301      	adds	r3, #1
 800bffc:	617b      	str	r3, [r7, #20]
						j++;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	3301      	adds	r3, #1
 800c002:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	2b05      	cmp	r3, #5
 800c008:	dd03      	ble.n	800c012 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fb12 	bl	800c634 <Lora_rx_del>
							break;
 800c010:	e006      	b.n	800c020 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	4413      	add	r3, r2
 800c018:	3356      	adds	r3, #86	; 0x56
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b2c      	cmp	r3, #44	; 0x2c
 800c01e:	d1e0      	bne.n	800bfe2 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	3310      	adds	r3, #16
 800c024:	210a      	movs	r1, #10
 800c026:	4618      	mov	r0, r3
 800c028:	f002 fe81 	bl	800ed2e <atoi>
 800c02c:	4602      	mov	r2, r0
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	4413      	add	r3, r2
 800c03a:	3310      	adds	r3, #16
 800c03c:	2200      	movs	r2, #0
 800c03e:	701a      	strb	r2, [r3, #0]
					j=0;
 800c040:	2300      	movs	r3, #0
 800c042:	613b      	str	r3, [r7, #16]
					i++;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	3301      	adds	r3, #1
 800c048:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c04a:	e017      	b.n	800c07c <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	4413      	add	r3, r2
 800c052:	3356      	adds	r3, #86	; 0x56
 800c054:	7819      	ldrb	r1, [r3, #0]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	4413      	add	r3, r2
 800c05c:	3310      	adds	r3, #16
 800c05e:	460a      	mov	r2, r1
 800c060:	701a      	strb	r2, [r3, #0]
						i++;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	3301      	adds	r3, #1
 800c066:	617b      	str	r3, [r7, #20]
						j++;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3301      	adds	r3, #1
 800c06c:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b05      	cmp	r3, #5
 800c072:	dd03      	ble.n	800c07c <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fadd 	bl	800c634 <Lora_rx_del>
							break;
 800c07a:	e006      	b.n	800c08a <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	4413      	add	r3, r2
 800c082:	3356      	adds	r3, #86	; 0x56
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b0d      	cmp	r3, #13
 800c088:	d1e0      	bne.n	800c04c <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	3310      	adds	r3, #16
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	3310      	adds	r3, #16
 800c09a:	210a      	movs	r1, #10
 800c09c:	4618      	mov	r0, r3
 800c09e:	f002 fe46 	bl	800ed2e <atoi>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c0b8:	e06a      	b.n	800c190 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c0ba:	210d      	movs	r1, #13
 800c0bc:	481b      	ldr	r0, [pc, #108]	; (800c12c <LoRa_decode+0x3d4>)
 800c0be:	f7f5 fa7f 	bl	80015c0 <ITM0_Write>
			break;
 800c0c2:	e065      	b.n	800c190 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c0c4:	210f      	movs	r1, #15
 800c0c6:	481a      	ldr	r0, [pc, #104]	; (800c130 <LoRa_decode+0x3d8>)
 800c0c8:	f7f5 fa7a 	bl	80015c0 <ITM0_Write>
			break;
 800c0cc:	e060      	b.n	800c190 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c0ce:	210f      	movs	r1, #15
 800c0d0:	4818      	ldr	r0, [pc, #96]	; (800c134 <LoRa_decode+0x3dc>)
 800c0d2:	f7f5 fa75 	bl	80015c0 <ITM0_Write>
			break;
 800c0d6:	e05b      	b.n	800c190 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c0d8:	210e      	movs	r1, #14
 800c0da:	4817      	ldr	r0, [pc, #92]	; (800c138 <LoRa_decode+0x3e0>)
 800c0dc:	f7f5 fa70 	bl	80015c0 <ITM0_Write>
			break;
 800c0e0:	e056      	b.n	800c190 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c0e2:	210d      	movs	r1, #13
 800c0e4:	4815      	ldr	r0, [pc, #84]	; (800c13c <LoRa_decode+0x3e4>)
 800c0e6:	f7f5 fa6b 	bl	80015c0 <ITM0_Write>
			break;
 800c0ea:	e051      	b.n	800c190 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c0ec:	2113      	movs	r1, #19
 800c0ee:	4814      	ldr	r0, [pc, #80]	; (800c140 <LoRa_decode+0x3e8>)
 800c0f0:	f7f5 fa66 	bl	80015c0 <ITM0_Write>
			break;
 800c0f4:	e04c      	b.n	800c190 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c0f6:	210e      	movs	r1, #14
 800c0f8:	4812      	ldr	r0, [pc, #72]	; (800c144 <LoRa_decode+0x3ec>)
 800c0fa:	f7f5 fa61 	bl	80015c0 <ITM0_Write>
			break;
 800c0fe:	e047      	b.n	800c190 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c100:	2111      	movs	r1, #17
 800c102:	4811      	ldr	r0, [pc, #68]	; (800c148 <LoRa_decode+0x3f0>)
 800c104:	f7f5 fa5c 	bl	80015c0 <ITM0_Write>
			break;
 800c108:	e042      	b.n	800c190 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c10a:	2111      	movs	r1, #17
 800c10c:	480f      	ldr	r0, [pc, #60]	; (800c14c <LoRa_decode+0x3f4>)
 800c10e:	f7f5 fa57 	bl	80015c0 <ITM0_Write>
			break;
 800c112:	e03d      	b.n	800c190 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c114:	210e      	movs	r1, #14
 800c116:	480e      	ldr	r0, [pc, #56]	; (800c150 <LoRa_decode+0x3f8>)
 800c118:	f7f5 fa52 	bl	80015c0 <ITM0_Write>
			break;
 800c11c:	e038      	b.n	800c190 <LoRa_decode+0x438>
 800c11e:	bf00      	nop
 800c120:	08010818 	.word	0x08010818
 800c124:	0801082c 	.word	0x0801082c
 800c128:	0801083c 	.word	0x0801083c
 800c12c:	0801084c 	.word	0x0801084c
 800c130:	0801085c 	.word	0x0801085c
 800c134:	0801086c 	.word	0x0801086c
 800c138:	0801087c 	.word	0x0801087c
 800c13c:	0801088c 	.word	0x0801088c
 800c140:	0801089c 	.word	0x0801089c
 800c144:	080108b0 	.word	0x080108b0
 800c148:	080108c0 	.word	0x080108c0
 800c14c:	080108d4 	.word	0x080108d4
 800c150:	080108e8 	.word	0x080108e8
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c154:	210f      	movs	r1, #15
 800c156:	4810      	ldr	r0, [pc, #64]	; (800c198 <LoRa_decode+0x440>)
 800c158:	f7f5 fa32 	bl	80015c0 <ITM0_Write>
			break;
 800c15c:	e018      	b.n	800c190 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c15e:	210e      	movs	r1, #14
 800c160:	480e      	ldr	r0, [pc, #56]	; (800c19c <LoRa_decode+0x444>)
 800c162:	f7f5 fa2d 	bl	80015c0 <ITM0_Write>
			break;
 800c166:	e013      	b.n	800c190 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c168:	210d      	movs	r1, #13
 800c16a:	480d      	ldr	r0, [pc, #52]	; (800c1a0 <LoRa_decode+0x448>)
 800c16c:	f7f5 fa28 	bl	80015c0 <ITM0_Write>
			break;
 800c170:	e00e      	b.n	800c190 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c172:	210d      	movs	r1, #13
 800c174:	480b      	ldr	r0, [pc, #44]	; (800c1a4 <LoRa_decode+0x44c>)
 800c176:	f7f5 fa23 	bl	80015c0 <ITM0_Write>
			break;
 800c17a:	e009      	b.n	800c190 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c17c:	2114      	movs	r1, #20
 800c17e:	480a      	ldr	r0, [pc, #40]	; (800c1a8 <LoRa_decode+0x450>)
 800c180:	f7f5 fa1e 	bl	80015c0 <ITM0_Write>
			break;
 800c184:	e004      	b.n	800c190 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c186:	2110      	movs	r1, #16
 800c188:	4808      	ldr	r0, [pc, #32]	; (800c1ac <LoRa_decode+0x454>)
 800c18a:	f7f5 fa19 	bl	80015c0 <ITM0_Write>
			break;
 800c18e:	bf00      	nop
	}
 }
 800c190:	bf00      	nop
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	080108f8 	.word	0x080108f8
 800c19c:	08010908 	.word	0x08010908
 800c1a0:	08010918 	.word	0x08010918
 800c1a4:	08010928 	.word	0x08010928
 800c1a8:	08010938 	.word	0x08010938
 800c1ac:	08010950 	.word	0x08010950

0800c1b0 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b090      	sub	sp, #64	; 0x40
 800c1b4:	af06      	add	r7, sp, #24
 800c1b6:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c1be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c1c2:	dd01      	ble.n	800c1c8 <Lora_idSTR+0x18>
 800c1c4:	2310      	movs	r3, #16
 800c1c6:	e229      	b.n	800c61c <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1dc:	f107 021c 	add.w	r2, r7, #28
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	f107 0320 	add.w	r3, r7, #32
 800c1e8:	9303      	str	r3, [sp, #12]
 800c1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ee:	9302      	str	r3, [sp, #8]
 800c1f0:	f107 030c 	add.w	r3, r7, #12
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	f107 0310 	add.w	r3, r7, #16
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	4ab9      	ldr	r2, [pc, #740]	; (800c4e4 <Lora_idSTR+0x334>)
 800c200:	f002 f9e4 	bl	800e5cc <FT_String_ND>
 800c204:	4603      	mov	r3, r0
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <Lora_idSTR+0x5e>
 800c20a:	2300      	movs	r3, #0
 800c20c:	e206      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800c20e:	2305      	movs	r3, #5
 800c210:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c21e:	f107 021c 	add.w	r2, r7, #28
 800c222:	2300      	movs	r3, #0
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	f107 0320 	add.w	r3, r7, #32
 800c22a:	9303      	str	r3, [sp, #12]
 800c22c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c230:	9302      	str	r3, [sp, #8]
 800c232:	f107 030c 	add.w	r3, r7, #12
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	f107 0310 	add.w	r3, r7, #16
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	4613      	mov	r3, r2
 800c240:	4aa9      	ldr	r2, [pc, #676]	; (800c4e8 <Lora_idSTR+0x338>)
 800c242:	f002 f9c3 	bl	800e5cc <FT_String_ND>
 800c246:	4603      	mov	r3, r0
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d101      	bne.n	800c250 <Lora_idSTR+0xa0>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e1e5      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800c250:	2305      	movs	r3, #5
 800c252:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c260:	f107 021c 	add.w	r2, r7, #28
 800c264:	2300      	movs	r3, #0
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	f107 0320 	add.w	r3, r7, #32
 800c26c:	9303      	str	r3, [sp, #12]
 800c26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c272:	9302      	str	r3, [sp, #8]
 800c274:	f107 030c 	add.w	r3, r7, #12
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	f107 0310 	add.w	r3, r7, #16
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	4613      	mov	r3, r2
 800c282:	4a9a      	ldr	r2, [pc, #616]	; (800c4ec <Lora_idSTR+0x33c>)
 800c284:	f002 f9a2 	bl	800e5cc <FT_String_ND>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <Lora_idSTR+0xe2>
 800c28e:	230f      	movs	r3, #15
 800c290:	e1c4      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c292:	2306      	movs	r3, #6
 800c294:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2a2:	f107 021c 	add.w	r2, r7, #28
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	f107 0320 	add.w	r3, r7, #32
 800c2ae:	9303      	str	r3, [sp, #12]
 800c2b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2b4:	9302      	str	r3, [sp, #8]
 800c2b6:	f107 030c 	add.w	r3, r7, #12
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	f107 0310 	add.w	r3, r7, #16
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	4a8a      	ldr	r2, [pc, #552]	; (800c4f0 <Lora_idSTR+0x340>)
 800c2c6:	f002 f981 	bl	800e5cc <FT_String_ND>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <Lora_idSTR+0x124>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e1a3      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2e4:	f107 021c 	add.w	r2, r7, #28
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	f107 0320 	add.w	r3, r7, #32
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	f107 030c 	add.w	r3, r7, #12
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	f107 0310 	add.w	r3, r7, #16
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	4613      	mov	r3, r2
 800c306:	4a7b      	ldr	r2, [pc, #492]	; (800c4f4 <Lora_idSTR+0x344>)
 800c308:	f002 f960 	bl	800e5cc <FT_String_ND>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <Lora_idSTR+0x166>
 800c312:	2303      	movs	r3, #3
 800c314:	e182      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c316:	2306      	movs	r3, #6
 800c318:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c326:	f107 021c 	add.w	r2, r7, #28
 800c32a:	2300      	movs	r3, #0
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	f107 0320 	add.w	r3, r7, #32
 800c332:	9303      	str	r3, [sp, #12]
 800c334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c338:	9302      	str	r3, [sp, #8]
 800c33a:	f107 030c 	add.w	r3, r7, #12
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	f107 0310 	add.w	r3, r7, #16
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	4613      	mov	r3, r2
 800c348:	4a6b      	ldr	r2, [pc, #428]	; (800c4f8 <Lora_idSTR+0x348>)
 800c34a:	f002 f93f 	bl	800e5cc <FT_String_ND>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <Lora_idSTR+0x1a8>
 800c354:	2304      	movs	r3, #4
 800c356:	e161      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c358:	2305      	movs	r3, #5
 800c35a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c368:	f107 021c 	add.w	r2, r7, #28
 800c36c:	2300      	movs	r3, #0
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	f107 0320 	add.w	r3, r7, #32
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c37a:	9302      	str	r3, [sp, #8]
 800c37c:	f107 030c 	add.w	r3, r7, #12
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	f107 0310 	add.w	r3, r7, #16
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	4613      	mov	r3, r2
 800c38a:	4a5c      	ldr	r2, [pc, #368]	; (800c4fc <Lora_idSTR+0x34c>)
 800c38c:	f002 f91e 	bl	800e5cc <FT_String_ND>
 800c390:	4603      	mov	r3, r0
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <Lora_idSTR+0x1ea>
 800c396:	2305      	movs	r3, #5
 800c398:	e140      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c39a:	230b      	movs	r3, #11
 800c39c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3aa:	f107 021c 	add.w	r2, r7, #28
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	f107 0320 	add.w	r3, r7, #32
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3bc:	9302      	str	r3, [sp, #8]
 800c3be:	f107 030c 	add.w	r3, r7, #12
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	f107 0310 	add.w	r3, r7, #16
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	4a4c      	ldr	r2, [pc, #304]	; (800c500 <Lora_idSTR+0x350>)
 800c3ce:	f002 f8fd 	bl	800e5cc <FT_String_ND>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <Lora_idSTR+0x22c>
 800c3d8:	2306      	movs	r3, #6
 800c3da:	e11f      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c3dc:	2306      	movs	r3, #6
 800c3de:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3ec:	f107 021c 	add.w	r2, r7, #28
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	f107 0320 	add.w	r3, r7, #32
 800c3f8:	9303      	str	r3, [sp, #12]
 800c3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3fe:	9302      	str	r3, [sp, #8]
 800c400:	f107 030c 	add.w	r3, r7, #12
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	f107 0310 	add.w	r3, r7, #16
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4613      	mov	r3, r2
 800c40e:	4a3d      	ldr	r2, [pc, #244]	; (800c504 <Lora_idSTR+0x354>)
 800c410:	f002 f8dc 	bl	800e5cc <FT_String_ND>
 800c414:	4603      	mov	r3, r0
 800c416:	2b01      	cmp	r3, #1
 800c418:	d101      	bne.n	800c41e <Lora_idSTR+0x26e>
 800c41a:	2307      	movs	r3, #7
 800c41c:	e0fe      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c41e:	2309      	movs	r3, #9
 800c420:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c42e:	f107 021c 	add.w	r2, r7, #28
 800c432:	2300      	movs	r3, #0
 800c434:	9304      	str	r3, [sp, #16]
 800c436:	f107 0320 	add.w	r3, r7, #32
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c440:	9302      	str	r3, [sp, #8]
 800c442:	f107 030c 	add.w	r3, r7, #12
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	f107 0310 	add.w	r3, r7, #16
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	4a2d      	ldr	r2, [pc, #180]	; (800c508 <Lora_idSTR+0x358>)
 800c452:	f002 f8bb 	bl	800e5cc <FT_String_ND>
 800c456:	4603      	mov	r3, r0
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <Lora_idSTR+0x2b0>
 800c45c:	2308      	movs	r3, #8
 800c45e:	e0dd      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c460:	2309      	movs	r3, #9
 800c462:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c470:	f107 021c 	add.w	r2, r7, #28
 800c474:	2300      	movs	r3, #0
 800c476:	9304      	str	r3, [sp, #16]
 800c478:	f107 0320 	add.w	r3, r7, #32
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	f107 030c 	add.w	r3, r7, #12
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	f107 0310 	add.w	r3, r7, #16
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	4613      	mov	r3, r2
 800c492:	4a1e      	ldr	r2, [pc, #120]	; (800c50c <Lora_idSTR+0x35c>)
 800c494:	f002 f89a 	bl	800e5cc <FT_String_ND>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d101      	bne.n	800c4a2 <Lora_idSTR+0x2f2>
 800c49e:	2309      	movs	r3, #9
 800c4a0:	e0bc      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c4a2:	2306      	movs	r3, #6
 800c4a4:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4b2:	f107 021c 	add.w	r2, r7, #28
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9304      	str	r3, [sp, #16]
 800c4ba:	f107 0320 	add.w	r3, r7, #32
 800c4be:	9303      	str	r3, [sp, #12]
 800c4c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	f107 0310 	add.w	r3, r7, #16
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	4a0e      	ldr	r2, [pc, #56]	; (800c510 <Lora_idSTR+0x360>)
 800c4d6:	f002 f879 	bl	800e5cc <FT_String_ND>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d119      	bne.n	800c514 <Lora_idSTR+0x364>
 800c4e0:	230a      	movs	r3, #10
 800c4e2:	e09b      	b.n	800c61c <Lora_idSTR+0x46c>
 800c4e4:	08010964 	.word	0x08010964
 800c4e8:	0801096c 	.word	0x0801096c
 800c4ec:	08010974 	.word	0x08010974
 800c4f0:	0801097c 	.word	0x0801097c
 800c4f4:	08010984 	.word	0x08010984
 800c4f8:	0801098c 	.word	0x0801098c
 800c4fc:	08010994 	.word	0x08010994
 800c500:	0801099c 	.word	0x0801099c
 800c504:	080109a8 	.word	0x080109a8
 800c508:	080109b0 	.word	0x080109b0
 800c50c:	080109bc 	.word	0x080109bc
 800c510:	080109c8 	.word	0x080109c8
		i=strlen("+CRFOP=");
 800c514:	2307      	movs	r3, #7
 800c516:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c524:	f107 021c 	add.w	r2, r7, #28
 800c528:	2300      	movs	r3, #0
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	f107 0320 	add.w	r3, r7, #32
 800c530:	9303      	str	r3, [sp, #12]
 800c532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	f107 030c 	add.w	r3, r7, #12
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	f107 0310 	add.w	r3, r7, #16
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	4a37      	ldr	r2, [pc, #220]	; (800c624 <Lora_idSTR+0x474>)
 800c548:	f002 f840 	bl	800e5cc <FT_String_ND>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d101      	bne.n	800c556 <Lora_idSTR+0x3a6>
 800c552:	230b      	movs	r3, #11
 800c554:	e062      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c556:	2306      	movs	r3, #6
 800c558:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c566:	f107 021c 	add.w	r2, r7, #28
 800c56a:	2300      	movs	r3, #0
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	f107 0320 	add.w	r3, r7, #32
 800c572:	9303      	str	r3, [sp, #12]
 800c574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c578:	9302      	str	r3, [sp, #8]
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	f107 0310 	add.w	r3, r7, #16
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	4613      	mov	r3, r2
 800c588:	4a27      	ldr	r2, [pc, #156]	; (800c628 <Lora_idSTR+0x478>)
 800c58a:	f002 f81f 	bl	800e5cc <FT_String_ND>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <Lora_idSTR+0x3e8>
 800c594:	230c      	movs	r3, #12
 800c596:	e041      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c598:	2305      	movs	r3, #5
 800c59a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5a8:	f107 021c 	add.w	r2, r7, #28
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9304      	str	r3, [sp, #16]
 800c5b0:	f107 0320 	add.w	r3, r7, #32
 800c5b4:	9303      	str	r3, [sp, #12]
 800c5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ba:	9302      	str	r3, [sp, #8]
 800c5bc:	f107 030c 	add.w	r3, r7, #12
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	f107 0310 	add.w	r3, r7, #16
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	4a18      	ldr	r2, [pc, #96]	; (800c62c <Lora_idSTR+0x47c>)
 800c5cc:	f001 fffe 	bl	800e5cc <FT_String_ND>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <Lora_idSTR+0x42a>
 800c5d6:	230e      	movs	r3, #14
 800c5d8:	e020      	b.n	800c61c <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c5da:	2305      	movs	r3, #5
 800c5dc:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5ea:	f107 021c 	add.w	r2, r7, #28
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	f107 0320 	add.w	r3, r7, #32
 800c5f6:	9303      	str	r3, [sp, #12]
 800c5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5fc:	9302      	str	r3, [sp, #8]
 800c5fe:	f107 030c 	add.w	r3, r7, #12
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	f107 0310 	add.w	r3, r7, #16
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	4613      	mov	r3, r2
 800c60c:	4a08      	ldr	r2, [pc, #32]	; (800c630 <Lora_idSTR+0x480>)
 800c60e:	f001 ffdd 	bl	800e5cc <FT_String_ND>
 800c612:	4603      	mov	r3, r0
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <Lora_idSTR+0x46c>
 800c618:	230d      	movs	r3, #13
 800c61a:	e7ff      	b.n	800c61c <Lora_idSTR+0x46c>
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3728      	adds	r7, #40	; 0x28
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	080109d0 	.word	0x080109d0
 800c628:	080109d8 	.word	0x080109d8
 800c62c:	080109e0 	.word	0x080109e0
 800c630:	080109e8 	.word	0x080109e8

0800c634 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c65a:	bf00      	nop
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c682:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2220      	movs	r2, #32
 800c68e:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a1c      	ldr	r2, [pc, #112]	; (800c708 <ModBUS_Config+0xa0>)
 800c696:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a18      	ldr	r2, [pc, #96]	; (800c70c <ModBUS_Config+0xa4>)
 800c6ac:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2210      	movs	r2, #16
 800c6ba:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2210      	movs	r2, #16
 800c6c8:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2220      	movs	r2, #32
 800c6ea:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	f0f0af5a 	.word	0xf0f0af5a
 800c70c:	a5fa0f0f 	.word	0xa5fa0f0f

0800c710 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	3305      	adds	r3, #5
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	3306      	adds	r3, #6
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d10b      	bne.n	800c740 <ModBUS_Check+0x30>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3302      	adds	r3, #2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	3303      	adds	r3, #3
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	4413      	add	r3, r2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <ModBUS_Check+0x30>
	{
		return(1);
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c740:	2300      	movs	r3, #0
	}
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7b5b      	ldrb	r3, [r3, #13]
 800c760:	429a      	cmp	r2, r3
 800c762:	d11d      	bne.n	800c7a0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c76e:	429a      	cmp	r2, r3
 800c770:	d116      	bne.n	800c7a0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d10f      	bne.n	800c7a0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d108      	bne.n	800c7a0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c798:	429a      	cmp	r2, r3
 800c79a:	d101      	bne.n	800c7a0 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c79c:	2301      	movs	r3, #1
 800c79e:	e000      	b.n	800c7a2 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c7a0:	2300      	movs	r3, #0
	}
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b085      	sub	sp, #20
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d901      	bls.n	800c7d2 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e015      	b.n	800c7fe <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	883a      	ldrh	r2, [r7, #0]
 800c7da:	b2d1      	uxtb	r1, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	460a      	mov	r2, r1
 800c7e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c7e6:	883b      	ldrh	r3, [r7, #0]
 800c7e8:	0a1b      	lsrs	r3, r3, #8
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c7ee:	78fb      	ldrb	r3, [r7, #3]
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	7bfa      	ldrb	r2, [r7, #15]
 800c7f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c7fc:	2300      	movs	r3, #0
	}
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b085      	sub	sp, #20
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c816:	2300      	movs	r3, #0
 800c818:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c824:	78fa      	ldrb	r2, [r7, #3]
 800c826:	429a      	cmp	r2, r3
 800c828:	d901      	bls.n	800c82e <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c82a:	2301      	movs	r3, #1
 800c82c:	e015      	b.n	800c85a <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c82e:	78fb      	ldrb	r3, [r7, #3]
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	4413      	add	r3, r2
 800c836:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c83a:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	021b      	lsls	r3, r3, #8
 800c840:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c842:	78fb      	ldrb	r3, [r7, #3]
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	3301      	adds	r3, #1
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	4413      	add	r3, r2
 800c84c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c850:	b29a      	uxth	r2, r3
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	4313      	orrs	r3, r2
 800c856:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c858:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c866:	b480      	push	{r7}
 800c868:	b083      	sub	sp, #12
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	460b      	mov	r3, r1
 800c870:	807b      	strh	r3, [r7, #2]
 800c872:	4613      	mov	r3, r2
 800c874:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c876:	887b      	ldrh	r3, [r7, #2]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bf14      	ite	ne
 800c87c:	2301      	movne	r3, #1
 800c87e:	2300      	moveq	r3, #0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	461a      	mov	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c890:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	0a1b      	lsrs	r3, r3, #8
 800c896:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c898:	887b      	ldrh	r3, [r7, #2]
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2206      	movs	r2, #6
 800c8cc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	781a      	ldrb	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2203      	movs	r2, #3
 800c8de:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c8e2:	887b      	ldrh	r3, [r7, #2]
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	787a      	ldrb	r2, [r7, #1]
 800c8f8:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	220c      	movs	r2, #12
 800c900:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c904:	bf00      	nop
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b09c      	sub	sp, #112	; 0x70
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	785b      	ldrb	r3, [r3, #1]
 800c920:	2b01      	cmp	r3, #1
 800c922:	f041 813f 	bne.w	800dba4 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f103 020d 	add.w	r2, r3, #13
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c932:	4619      	mov	r1, r3
 800c934:	4610      	mov	r0, r2
 800c936:	f7ff feeb 	bl	800c710 <ModBUS_Check>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f001 812f 	beq.w	800dba0 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7d1b      	ldrb	r3, [r3, #20]
 800c946:	3b01      	subs	r3, #1
 800c948:	2b0f      	cmp	r3, #15
 800c94a:	f201 80f3 	bhi.w	800db34 <ModBUS+0x1220>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <ModBUS+0x40>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c995 	.word	0x0800c995
 800c958:	0800cbd5 	.word	0x0800cbd5
 800c95c:	0800ce15 	.word	0x0800ce15
 800c960:	0800d04d 	.word	0x0800d04d
 800c964:	0800d285 	.word	0x0800d285
 800c968:	0800d49b 	.word	0x0800d49b
 800c96c:	0800db35 	.word	0x0800db35
 800c970:	0800db35 	.word	0x0800db35
 800c974:	0800db35 	.word	0x0800db35
 800c978:	0800db35 	.word	0x0800db35
 800c97c:	0800db35 	.word	0x0800db35
 800c980:	0800db35 	.word	0x0800db35
 800c984:	0800db35 	.word	0x0800db35
 800c988:	0800db35 	.word	0x0800db35
 800c98c:	0800d657 	.word	0x0800d657
 800c990:	0800d8e7 	.word	0x0800d8e7

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7c5a      	ldrb	r2, [r3, #17]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7c1a      	ldrb	r2, [r3, #16]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7bda      	ldrb	r2, [r3, #15]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7b9a      	ldrb	r2, [r3, #14]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7b5a      	ldrb	r2, [r3, #13]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	795b      	ldrb	r3, [r3, #5]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	f040 80e6 	bne.w	800cba0 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d5b      	ldrb	r3, [r3, #21]
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c9f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7d9b      	ldrb	r3, [r3, #22]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	7ddb      	ldrb	r3, [r3, #23]
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca2a:	021b      	lsls	r3, r3, #8
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7e1b      	ldrb	r3, [r3, #24]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	4313      	orrs	r3, r2
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d87e      	bhi.n	800cb6c <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ca74:	461a      	mov	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca7c:	4413      	add	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800ca84:	4293      	cmp	r3, r2
 800ca86:	dc57      	bgt.n	800cb38 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	2300      	movs	r3, #0
 800ca92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca94:	2300      	movs	r3, #0
 800ca96:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800caa8:	40d3      	lsrs	r3, r2
 800caaa:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cab2:	08db      	lsrs	r3, r3, #3
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cabe:	f003 0307 	and.w	r3, r3, #7
 800cac2:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <ModBUS+0x1bc>
									{
										bytes=div;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cace:	e002      	b.n	800cad6 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	3301      	adds	r3, #1
 800cad4:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cae0:	e00e      	b.n	800cb00 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae4:	3308      	adds	r3, #8
 800cae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cae8:	b2d1      	uxtb	r1, r2
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	460a      	mov	r2, r1
 800caf0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800caf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caf6:	0a1b      	lsrs	r3, r3, #8
 800caf8:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cafc:	3b01      	subs	r3, #1
 800cafe:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cb00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dced      	bgt.n	800cae2 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb1c:	3303      	adds	r3, #3
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb2c:	1d9a      	adds	r2, r3, #6
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb34:	f001 b8d4 	b.w	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2281      	movs	r2, #129	; 0x81
 800cb44:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2203      	movs	r2, #3
 800cb54:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb5e:	1d9a      	adds	r2, r3, #6
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb66:	2302      	movs	r3, #2
 800cb68:	f001 b8ba 	b.w	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2203      	movs	r2, #3
 800cb70:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2281      	movs	r2, #129	; 0x81
 800cb78:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2203      	movs	r2, #3
 800cb88:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb92:	1d9a      	adds	r2, r3, #6
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	f001 b8a0 	b.w	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2281      	movs	r2, #129	; 0x81
 800cbac:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2203      	movs	r2, #3
 800cbbc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbc6:	1d9a      	adds	r2, r3, #6
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f001 b886 	b.w	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7c5a      	ldrb	r2, [r3, #17]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7c1a      	ldrb	r2, [r3, #16]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7bda      	ldrb	r2, [r3, #15]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	7b9a      	ldrb	r2, [r3, #14]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7b5a      	ldrb	r2, [r3, #13]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	799b      	ldrb	r3, [r3, #6]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	f040 80e6 	bne.w	800cde0 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7d5b      	ldrb	r3, [r3, #21]
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cc36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d9b      	ldrb	r3, [r3, #22]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	7ddb      	ldrb	r3, [r3, #23]
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cc7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	7e1b      	ldrb	r3, [r3, #24]
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d87e      	bhi.n	800cdac <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccbc:	4413      	add	r3, r2
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	dc57      	bgt.n	800cd78 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	623b      	str	r3, [r7, #32]
 800cccc:	2300      	movs	r3, #0
 800ccce:	61fb      	str	r3, [r7, #28]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	667b      	str	r3, [r7, #100]	; 0x64
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800cce8:	40d3      	lsrs	r3, r2
 800ccea:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccf2:	08db      	lsrs	r3, r3, #3
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccfe:	f003 0307 	and.w	r3, r3, #7
 800cd02:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <ModBUS+0x3fc>
									{
										bytes=div;
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	667b      	str	r3, [r7, #100]	; 0x64
 800cd0e:	e002      	b.n	800cd16 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	3301      	adds	r3, #1
 800cd14:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800cd16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cd20:	e00e      	b.n	800cd40 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cd22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd24:	3308      	adds	r3, #8
 800cd26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd28:	b2d1      	uxtb	r1, r2
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	460a      	mov	r2, r1
 800cd30:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cd34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd36:	0a1b      	lsrs	r3, r3, #8
 800cd38:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cd3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cd40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	dced      	bgt.n	800cd22 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cd5c:	3303      	adds	r3, #3
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd6c:	1d9a      	adds	r2, r3, #6
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd74:	f000 bfb4 	b.w	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2282      	movs	r2, #130	; 0x82
 800cd84:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd9e:	1d9a      	adds	r2, r3, #6
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cda6:	2302      	movs	r3, #2
 800cda8:	f000 bf9a 	b.w	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2203      	movs	r2, #3
 800cdb0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2282      	movs	r2, #130	; 0x82
 800cdb8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2203      	movs	r2, #3
 800cdc8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdd2:	1d9a      	adds	r2, r3, #6
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cdda:	2303      	movs	r3, #3
 800cddc:	f000 bf80 	b.w	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2282      	movs	r2, #130	; 0x82
 800cdec:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2203      	movs	r2, #3
 800cdfc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce06:	1d9a      	adds	r2, r3, #6
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f000 bf66 	b.w	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7c5a      	ldrb	r2, [r3, #17]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7c1a      	ldrb	r2, [r3, #16]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7bda      	ldrb	r2, [r3, #15]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7b9a      	ldrb	r2, [r3, #14]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7b5a      	ldrb	r2, [r3, #13]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	79db      	ldrb	r3, [r3, #7]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	f040 80e2 	bne.w	800d018 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	7d5b      	ldrb	r3, [r3, #21]
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ce76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	7d9b      	ldrb	r3, [r3, #22]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7ddb      	ldrb	r3, [r3, #23]
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800ceba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7e1b      	ldrb	r3, [r3, #24]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	4313      	orrs	r3, r2
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d87a      	bhi.n	800cfe4 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cef4:	461a      	mov	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cefc:	4413      	add	r3, r2
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800cf04:	4293      	cmp	r3, r2
 800cf06:	dc53      	bgt.n	800cfb0 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cf08:	e029      	b.n	800cf5e <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf10:	461a      	mov	r2, r3
 800cf12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf14:	4413      	add	r3, r2
 800cf16:	005a      	lsls	r2, r3, #1
 800cf18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	3309      	adds	r3, #9
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	440a      	add	r2, r1
 800cf22:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	4413      	add	r3, r2
 800cf2a:	460a      	mov	r2, r1
 800cf2c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf36:	461a      	mov	r2, r3
 800cf38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf3a:	4413      	add	r3, r2
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf42:	3305      	adds	r3, #5
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	440a      	add	r2, r1
 800cf4a:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	4413      	add	r3, r2
 800cf52:	460a      	mov	r2, r1
 800cf54:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cf58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf64:	461a      	mov	r2, r3
 800cf66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	dbce      	blt.n	800cf0a <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2203      	movs	r2, #3
 800cf82:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cf94:	3303      	adds	r3, #3
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfa4:	1d9a      	adds	r2, r3, #6
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cfac:	f000 be98 	b.w	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2283      	movs	r2, #131	; 0x83
 800cfbc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfd6:	1d9a      	adds	r2, r3, #6
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cfde:	2302      	movs	r3, #2
 800cfe0:	f000 be7e 	b.w	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2203      	movs	r2, #3
 800cfe8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2283      	movs	r2, #131	; 0x83
 800cff0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2203      	movs	r2, #3
 800d000:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d00a:	1d9a      	adds	r2, r3, #6
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d012:	2303      	movs	r3, #3
 800d014:	f000 be64 	b.w	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2283      	movs	r2, #131	; 0x83
 800d024:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2203      	movs	r2, #3
 800d034:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d03e:	1d9a      	adds	r2, r3, #6
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d046:	2301      	movs	r3, #1
 800d048:	f000 be4a 	b.w	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7c5a      	ldrb	r2, [r3, #17]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7c1a      	ldrb	r2, [r3, #16]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7bda      	ldrb	r2, [r3, #15]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7b9a      	ldrb	r2, [r3, #14]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	7b5a      	ldrb	r2, [r3, #13]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d07e:	2300      	movs	r3, #0
 800d080:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7a1b      	ldrb	r3, [r3, #8]
 800d086:	2b01      	cmp	r3, #1
 800d088:	f040 80e2 	bne.w	800d250 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7d5b      	ldrb	r3, [r3, #21]
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d09e:	021b      	lsls	r3, r3, #8
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d0ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	7d9b      	ldrb	r3, [r3, #22]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7ddb      	ldrb	r3, [r3, #23]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d0f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	7e1b      	ldrb	r3, [r3, #24]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4313      	orrs	r3, r2
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800d120:	b29b      	uxth	r3, r3
 800d122:	429a      	cmp	r2, r3
 800d124:	d87a      	bhi.n	800d21c <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d12c:	461a      	mov	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d134:	4413      	add	r3, r2
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800d13c:	4293      	cmp	r3, r2
 800d13e:	dc53      	bgt.n	800d1e8 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d140:	e029      	b.n	800d196 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d148:	461a      	mov	r2, r3
 800d14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14c:	4413      	add	r3, r2
 800d14e:	005a      	lsls	r2, r3, #1
 800d150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	3309      	adds	r3, #9
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	440a      	add	r2, r1
 800d15a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	4413      	add	r3, r2
 800d162:	460a      	mov	r2, r1
 800d164:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d16e:	461a      	mov	r2, r3
 800d170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d172:	4413      	add	r3, r2
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d17a:	3305      	adds	r3, #5
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	6879      	ldr	r1, [r7, #4]
 800d180:	440a      	add	r2, r1
 800d182:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	4413      	add	r3, r2
 800d18a:	460a      	mov	r2, r1
 800d18c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800d190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d192:	3301      	adds	r3, #1
 800d194:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d19c:	461a      	mov	r2, r3
 800d19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	dbce      	blt.n	800d142 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2204      	movs	r2, #4
 800d1ba:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d1cc:	3303      	adds	r3, #3
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1dc:	1d9a      	adds	r2, r3, #6
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d1e4:	f000 bd7c 	b.w	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2284      	movs	r2, #132	; 0x84
 800d1f4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2203      	movs	r2, #3
 800d204:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d20e:	1d9a      	adds	r2, r3, #6
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d216:	2302      	movs	r3, #2
 800d218:	f000 bd62 	b.w	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2203      	movs	r2, #3
 800d220:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2284      	movs	r2, #132	; 0x84
 800d228:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2203      	movs	r2, #3
 800d238:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d242:	1d9a      	adds	r2, r3, #6
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d24a:	2303      	movs	r3, #3
 800d24c:	f000 bd48 	b.w	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2284      	movs	r2, #132	; 0x84
 800d25c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2203      	movs	r2, #3
 800d26c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d276:	1d9a      	adds	r2, r3, #6
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d27e:	2301      	movs	r3, #1
 800d280:	f000 bd2e 	b.w	800dce0 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	7c5a      	ldrb	r2, [r3, #17]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	7c1a      	ldrb	r2, [r3, #16]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7bda      	ldrb	r2, [r3, #15]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	7b9a      	ldrb	r2, [r3, #14]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	7b5a      	ldrb	r2, [r3, #13]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	7a5b      	ldrb	r3, [r3, #9]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	f040 80d1 	bne.w	800d466 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7d5b      	ldrb	r3, [r3, #21]
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d2d6:	021b      	lsls	r3, r3, #8
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d2e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	7d9b      	ldrb	r3, [r3, #22]
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	b29a      	uxth	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7ddb      	ldrb	r3, [r3, #23]
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d31a:	021b      	lsls	r3, r3, #8
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d32a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7e1b      	ldrb	r3, [r3, #24]
 800d340:	b29b      	uxth	r3, r3
 800d342:	4313      	orrs	r3, r2
 800d344:	b29a      	uxth	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d35a:	429a      	cmp	r2, r3
 800d35c:	dd69      	ble.n	800d432 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d364:	2b00      	cmp	r3, #0
 800d366:	d005      	beq.n	800d374 <ModBUS+0xa60>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d36e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d372:	d144      	bne.n	800d3fe <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d37a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d37e:	d10d      	bne.n	800d39c <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d38c:	4611      	mov	r1, r2
 800d38e:	2201      	movs	r2, #1
 800d390:	408a      	lsls	r2, r1
 800d392:	431a      	orrs	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d39a:	e003      	b.n	800d3a4 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7e1a      	ldrb	r2, [r3, #24]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7dda      	ldrb	r2, [r3, #23]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7d9a      	ldrb	r2, [r3, #22]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7d5a      	ldrb	r2, [r3, #21]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d3e2:	3306      	adds	r3, #6
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3f2:	1d9a      	adds	r2, r3, #6
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d3fa:	f000 bc71 	b.w	800dce0 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2202      	movs	r2, #2
 800d402:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2285      	movs	r2, #133	; 0x85
 800d40a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2203      	movs	r2, #3
 800d41a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d424:	1d9a      	adds	r2, r3, #6
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d42c:	2302      	movs	r3, #2
 800d42e:	f000 bc57 	b.w	800dce0 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2203      	movs	r2, #3
 800d436:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2285      	movs	r2, #133	; 0x85
 800d43e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2203      	movs	r2, #3
 800d44e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d458:	1d9a      	adds	r2, r3, #6
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d460:	2303      	movs	r3, #3
 800d462:	f000 bc3d 	b.w	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2285      	movs	r2, #133	; 0x85
 800d472:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2203      	movs	r2, #3
 800d482:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d48c:	1d9a      	adds	r2, r3, #6
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d494:	2301      	movs	r3, #1
 800d496:	f000 bc23 	b.w	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	7c5a      	ldrb	r2, [r3, #17]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7c1a      	ldrb	r2, [r3, #16]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7bda      	ldrb	r2, [r3, #15]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7b9a      	ldrb	r2, [r3, #14]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7b5a      	ldrb	r2, [r3, #13]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7a9b      	ldrb	r3, [r3, #10]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	f040 80a3 	bne.w	800d624 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7d5b      	ldrb	r3, [r3, #21]
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d4f0:	021b      	lsls	r3, r3, #8
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d500:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d504:	b29a      	uxth	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	7d9b      	ldrb	r3, [r3, #22]
 800d516:	b29b      	uxth	r3, r3
 800d518:	4313      	orrs	r3, r2
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d528:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7ddb      	ldrb	r3, [r3, #23]
 800d52e:	b29a      	uxth	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d53c:	021b      	lsls	r3, r3, #8
 800d53e:	b29a      	uxth	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d54c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d550:	b29a      	uxth	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7e1b      	ldrb	r3, [r3, #24]
 800d562:	b29b      	uxth	r3, r3
 800d564:	4313      	orrs	r3, r2
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d838      	bhi.n	800d5f2 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d580:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	7dd1      	ldrb	r1, [r2, #23]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	4413      	add	r3, r2
 800d58a:	460a      	mov	r2, r1
 800d58c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d590:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d592:	3301      	adds	r3, #1
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	7e11      	ldrb	r1, [r2, #24]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4413      	add	r3, r2
 800d59c:	460a      	mov	r2, r1
 800d59e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7e1a      	ldrb	r2, [r3, #24]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7dda      	ldrb	r2, [r3, #23]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7d9a      	ldrb	r2, [r3, #22]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7d5a      	ldrb	r2, [r3, #21]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2206      	movs	r2, #6
 800d5ce:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2206      	movs	r2, #6
 800d5de:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d5e8:	1d9a      	adds	r2, r3, #6
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d5f0:	e376      	b.n	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2286      	movs	r2, #134	; 0x86
 800d5fe:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2203      	movs	r2, #3
 800d60e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d618:	1d9a      	adds	r2, r3, #6
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d620:	2302      	movs	r3, #2
 800d622:	e35d      	b.n	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2286      	movs	r2, #134	; 0x86
 800d630:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2203      	movs	r2, #3
 800d640:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d64a:	1d9a      	adds	r2, r3, #6
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d652:	2301      	movs	r3, #1
 800d654:	e344      	b.n	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7c5a      	ldrb	r2, [r3, #17]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7c1a      	ldrb	r2, [r3, #16]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7bda      	ldrb	r2, [r3, #15]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7b9a      	ldrb	r2, [r3, #14]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7b5a      	ldrb	r2, [r3, #13]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d688:	2300      	movs	r3, #0
 800d68a:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7adb      	ldrb	r3, [r3, #11]
 800d690:	2b01      	cmp	r3, #1
 800d692:	f040 810f 	bne.w	800d8b4 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7d5b      	ldrb	r3, [r3, #21]
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d6a8:	021b      	lsls	r3, r3, #8
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d6b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7d9b      	ldrb	r3, [r3, #22]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7ddb      	ldrb	r3, [r3, #23]
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d6ec:	021b      	lsls	r3, r3, #8
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d6fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d700:	b29a      	uxth	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	7e1b      	ldrb	r3, [r3, #24]
 800d712:	b29b      	uxth	r3, r3
 800d714:	4313      	orrs	r3, r2
 800d716:	b29a      	uxth	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	429a      	cmp	r2, r3
 800d72e:	f200 80a8 	bhi.w	800d882 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d738:	461a      	mov	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d740:	4413      	add	r3, r2
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d748:	4293      	cmp	r3, r2
 800d74a:	f300 8081 	bgt.w	800d850 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d74e:	2300      	movs	r3, #0
 800d750:	657b      	str	r3, [r7, #84]	; 0x54
 800d752:	2300      	movs	r3, #0
 800d754:	653b      	str	r3, [r7, #80]	; 0x50
 800d756:	2300      	movs	r3, #0
 800d758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d75a:	2300      	movs	r3, #0
 800d75c:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7e5b      	ldrb	r3, [r3, #25]
 800d762:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d764:	e00e      	b.n	800d784 <ModBUS+0xe70>
									{
										data=data<<8;
 800d766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d768:	021b      	lsls	r3, r3, #8
 800d76a:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d76e:	330c      	adds	r3, #12
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4413      	add	r3, r2
 800d774:	7b5b      	ldrb	r3, [r3, #13]
 800d776:	461a      	mov	r2, r3
 800d778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77a:	4313      	orrs	r3, r2
 800d77c:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d780:	3b01      	subs	r3, #1
 800d782:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1ed      	bne.n	800d766 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d790:	461a      	mov	r2, r3
 800d792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d794:	4093      	lsls	r3, r2
 800d796:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d798:	e00f      	b.n	800d7ba <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a4:	4413      	add	r3, r2
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d3e8      	bcc.n	800d79a <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7ca:	43db      	mvns	r3, r3
 800d7cc:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7d6:	401a      	ands	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e0:	43db      	mvns	r3, r3
 800d7e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d7ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	7e1a      	ldrb	r2, [r3, #24]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7dda      	ldrb	r2, [r3, #23]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7d9a      	ldrb	r2, [r3, #22]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7d5a      	ldrb	r2, [r3, #21]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	220f      	movs	r2, #15
 800d824:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d836:	3306      	adds	r3, #6
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d846:	1d9a      	adds	r2, r3, #6
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d84e:	e247      	b.n	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	228f      	movs	r2, #143	; 0x8f
 800d85c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2203      	movs	r2, #3
 800d86c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d876:	1d9a      	adds	r2, r3, #6
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d87e:	2302      	movs	r3, #2
 800d880:	e22e      	b.n	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2203      	movs	r2, #3
 800d886:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	228f      	movs	r2, #143	; 0x8f
 800d88e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2203      	movs	r2, #3
 800d89e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8a8:	1d9a      	adds	r2, r3, #6
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d8b0:	2303      	movs	r3, #3
 800d8b2:	e215      	b.n	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	228f      	movs	r2, #143	; 0x8f
 800d8c0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2203      	movs	r2, #3
 800d8d0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8da:	1d9a      	adds	r2, r3, #6
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e1fc      	b.n	800dce0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7c5a      	ldrb	r2, [r3, #17]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7c1a      	ldrb	r2, [r3, #16]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7bda      	ldrb	r2, [r3, #15]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	7b9a      	ldrb	r2, [r3, #14]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7b5a      	ldrb	r2, [r3, #13]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d918:	2300      	movs	r3, #0
 800d91a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d91e:	2300      	movs	r3, #0
 800d920:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7b1b      	ldrb	r3, [r3, #12]
 800d926:	2b01      	cmp	r3, #1
 800d928:	f040 80eb 	bne.w	800db02 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7d5b      	ldrb	r3, [r3, #21]
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d93e:	021b      	lsls	r3, r3, #8
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d94e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d952:	b29a      	uxth	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7d9b      	ldrb	r3, [r3, #22]
 800d964:	b29b      	uxth	r3, r3
 800d966:	4313      	orrs	r3, r2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7ddb      	ldrb	r3, [r3, #23]
 800d97e:	b29a      	uxth	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d98c:	021b      	lsls	r3, r3, #8
 800d98e:	b29a      	uxth	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d99c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7e1b      	ldrb	r3, [r3, #24]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d87f      	bhi.n	800dad0 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d9de:	4413      	add	r3, r2
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	dc59      	bgt.n	800da9e <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d9ea:	e029      	b.n	800da40 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d9ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d9f0:	f103 020d 	add.w	r2, r3, #13
 800d9f4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d9f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d9fa:	440b      	add	r3, r1
 800d9fc:	6879      	ldr	r1, [r7, #4]
 800d9fe:	440a      	add	r2, r1
 800da00:	7b51      	ldrb	r1, [r2, #13]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	4413      	add	r3, r2
 800da06:	460a      	mov	r2, r1
 800da08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800da0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da10:	3301      	adds	r3, #1
 800da12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800da16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da1a:	f103 020d 	add.w	r2, r3, #13
 800da1e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800da20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da24:	440b      	add	r3, r1
 800da26:	6879      	ldr	r1, [r7, #4]
 800da28:	440a      	add	r2, r1
 800da2a:	7b51      	ldrb	r1, [r2, #13]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	4413      	add	r3, r2
 800da30:	460a      	mov	r2, r1
 800da32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800da36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da3a:	3301      	adds	r3, #1
 800da3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	7e5b      	ldrb	r3, [r3, #25]
 800da44:	b29b      	uxth	r3, r3
 800da46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d3ce      	bcc.n	800d9ec <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7e1a      	ldrb	r2, [r3, #24]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	7dda      	ldrb	r2, [r3, #23]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7d9a      	ldrb	r2, [r3, #22]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7d5a      	ldrb	r2, [r3, #21]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2210      	movs	r2, #16
 800da7a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2206      	movs	r2, #6
 800da8a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800da94:	1d9a      	adds	r2, r3, #6
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800da9c:	e120      	b.n	800dce0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2202      	movs	r2, #2
 800daa2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2290      	movs	r2, #144	; 0x90
 800daaa:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2203      	movs	r2, #3
 800daba:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dac4:	1d9a      	adds	r2, r3, #6
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800dacc:	2302      	movs	r3, #2
 800dace:	e107      	b.n	800dce0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2203      	movs	r2, #3
 800dad4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2290      	movs	r2, #144	; 0x90
 800dadc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2203      	movs	r2, #3
 800daec:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800daf6:	1d9a      	adds	r2, r3, #6
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800dafe:	2303      	movs	r3, #3
 800db00:	e0ee      	b.n	800dce0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2290      	movs	r2, #144	; 0x90
 800db0e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2203      	movs	r2, #3
 800db1e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db28:	1d9a      	adds	r2, r3, #6
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800db30:	2301      	movs	r3, #1
 800db32:	e0d5      	b.n	800dce0 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
 800db40:	3b80      	subs	r3, #128	; 0x80
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	7cda      	ldrb	r2, [r3, #19]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2203      	movs	r2, #3
 800db58:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7c5a      	ldrb	r2, [r3, #17]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	7c1a      	ldrb	r2, [r3, #16]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7bda      	ldrb	r2, [r3, #15]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	7b9a      	ldrb	r2, [r3, #14]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7b5a      	ldrb	r2, [r3, #13]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db94:	1d9a      	adds	r2, r3, #6
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800db9c:	2301      	movs	r3, #1
 800db9e:	e09f      	b.n	800dce0 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dba0:	2301      	movs	r3, #1
 800dba2:	e09d      	b.n	800dce0 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f040 8099 	bne.w	800dce0 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f103 020d 	add.w	r2, r3, #13
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	f7fe fda7 	bl	800c710 <ModBUS_Check>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 808b 	beq.w	800dce0 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7fe fdbf 	bl	800c74e <ModBUS_Check_tid>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d04f      	beq.n	800dc76 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7d1b      	ldrb	r3, [r3, #20]
 800dbda:	2b03      	cmp	r3, #3
 800dbdc:	d143      	bne.n	800dc66 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800dbee:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800dbf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc00:	4313      	orrs	r3, r2
 800dc02:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800dc0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800dc0e:	2300      	movs	r3, #0
 800dc10:	643b      	str	r3, [r7, #64]	; 0x40
 800dc12:	e022      	b.n	800dc5a <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800dc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	f103 0209 	add.w	r2, r3, #9
 800dc1c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	440b      	add	r3, r1
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	440a      	add	r2, r1
 800dc28:	7b51      	ldrb	r1, [r2, #13]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	460a      	mov	r2, r1
 800dc30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800dc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc36:	3305      	adds	r3, #5
 800dc38:	005a      	lsls	r2, r3, #1
 800dc3a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc3e:	440b      	add	r3, r1
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	3301      	adds	r3, #1
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	440a      	add	r2, r1
 800dc48:	7b51      	ldrb	r1, [r2, #13]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	460a      	mov	r2, r1
 800dc50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800dc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc56:	3301      	adds	r3, #1
 800dc58:	643b      	str	r3, [r7, #64]	; 0x40
 800dc5a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dc5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc60:	429a      	cmp	r2, r3
 800dc62:	dbd7      	blt.n	800dc14 <ModBUS+0x1300>

						}


					}
					break;
 800dc64:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	7c9b      	ldrb	r3, [r3, #18]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7d5b      	ldrb	r3, [r3, #21]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc74:	e034      	b.n	800dce0 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	7d1b      	ldrb	r3, [r3, #20]
 800dc7a:	3b81      	subs	r3, #129	; 0x81
 800dc7c:	2b15      	cmp	r3, #21
 800dc7e:	d82f      	bhi.n	800dce0 <ModBUS+0x13cc>
 800dc80:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <ModBUS+0x1374>)
 800dc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dce1 	.word	0x0800dce1
 800dc8c:	0800dce1 	.word	0x0800dce1
 800dc90:	0800dce1 	.word	0x0800dce1
 800dc94:	0800dce1 	.word	0x0800dce1
 800dc98:	0800dce1 	.word	0x0800dce1
 800dc9c:	0800dce1 	.word	0x0800dce1
 800dca0:	0800dce1 	.word	0x0800dce1
 800dca4:	0800dce1 	.word	0x0800dce1
 800dca8:	0800dce1 	.word	0x0800dce1
 800dcac:	0800dce1 	.word	0x0800dce1
 800dcb0:	0800dce1 	.word	0x0800dce1
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	0800dce1 	.word	0x0800dce1
 800dcbc:	0800dce1 	.word	0x0800dce1
 800dcc0:	0800dce1 	.word	0x0800dce1
 800dcc4:	0800dce1 	.word	0x0800dce1
 800dcc8:	0800dce1 	.word	0x0800dce1
 800dccc:	0800dce1 	.word	0x0800dce1
 800dcd0:	0800dce1 	.word	0x0800dce1
 800dcd4:	0800dce1 	.word	0x0800dce1
 800dcd8:	0800dce1 	.word	0x0800dce1
 800dcdc:	0800dce1 	.word	0x0800dce1
			}
		}
	}


}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3770      	adds	r7, #112	; 0x70
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6858      	ldr	r0, [r3, #4]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	891b      	ldrh	r3, [r3, #8]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	f7f5 fc0c 	bl	8003518 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f103 0114 	add.w	r1, r3, #20
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f103 0218 	add.w	r2, r3, #24
 800dd10:	2364      	movs	r3, #100	; 0x64
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	2304      	movs	r3, #4
 800dd16:	f7f6 f914 	bl	8003f42 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6858      	ldr	r0, [r3, #4]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	891b      	ldrh	r3, [r3, #8]
 800dd22:	2201      	movs	r2, #1
 800dd24:	4619      	mov	r1, r3
 800dd26:	f7f5 fbf7 	bl	8003518 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	7edb      	ldrb	r3, [r3, #27]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	461a      	mov	r2, r3
 800dd44:	4603      	mov	r3, r0
 800dd46:	70fb      	strb	r3, [r7, #3]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70bb      	strb	r3, [r7, #2]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	787a      	ldrb	r2, [r7, #1]
 800dd58:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	78fa      	ldrb	r2, [r7, #3]
 800dd5e:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	78ba      	ldrb	r2, [r7, #2]
 800dd64:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800dd6c:	787b      	ldrb	r3, [r7, #1]
 800dd6e:	2bf0      	cmp	r3, #240	; 0xf0
 800dd70:	d11d      	bne.n	800ddae <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800dd72:	2300      	movs	r3, #0
 800dd74:	613b      	str	r3, [r7, #16]
 800dd76:	e013      	b.n	800dda0 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	6a3a      	ldr	r2, [r7, #32]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	781a      	ldrb	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff ffaf 	bl	800dce8 <SPI_ETH>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	7d9b      	ldrb	r3, [r3, #22]
 800dd92:	3301      	adds	r3, #1
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	613b      	str	r3, [r7, #16]
 800dda0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	dbe6      	blt.n	800dd78 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800ddaa:	8afb      	ldrh	r3, [r7, #22]
 800ddac:	e037      	b.n	800de1e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800ddae:	787b      	ldrb	r3, [r7, #1]
 800ddb0:	2b0f      	cmp	r3, #15
 800ddb2:	d134      	bne.n	800de1e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800ddba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d120      	bne.n	800de04 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	e016      	b.n	800ddf6 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff ff8d 	bl	800dce8 <SPI_ETH>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	8afb      	ldrh	r3, [r7, #22]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7d9b      	ldrb	r3, [r3, #22]
 800dddc:	3301      	adds	r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <SPI_ETH_REG+0xba>
 800ddea:	8afb      	ldrh	r3, [r7, #22]
 800ddec:	021b      	lsls	r3, r3, #8
 800ddee:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	dbe3      	blt.n	800ddc8 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800de00:	8afb      	ldrh	r3, [r7, #22]
 800de02:	e00c      	b.n	800de1e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ff6f 	bl	800dce8 <SPI_ETH>
 800de0a:	4603      	mov	r3, r0
 800de0c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7d9b      	ldrb	r3, [r3, #22]
 800de12:	3301      	adds	r3, #1
 800de14:	b2da      	uxtb	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	759a      	strb	r2, [r3, #22]
			return(res);
 800de1a:	8afb      	ldrh	r3, [r7, #22]
 800de1c:	e7ff      	b.n	800de1e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	807b      	strh	r3, [r7, #2]
 800de32:	4613      	mov	r3, r2
 800de34:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800de36:	2300      	movs	r3, #0
 800de38:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	22f0      	movs	r2, #240	; 0xf0
 800de3e:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800de40:	883b      	ldrh	r3, [r7, #0]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800de46:	883b      	ldrh	r3, [r7, #0]
 800de48:	0a1b      	lsrs	r3, r3, #8
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800de50:	2300      	movs	r3, #0
 800de52:	613b      	str	r3, [r7, #16]
 800de54:	e01b      	b.n	800de8e <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800de56:	887b      	ldrh	r3, [r7, #2]
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800de5e:	887b      	ldrh	r3, [r7, #2]
 800de60:	0a1b      	lsrs	r3, r3, #8
 800de62:	b29b      	uxth	r3, r3
 800de64:	b2da      	uxtb	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	755a      	strb	r2, [r3, #21]
		addr++;
 800de6a:	887b      	ldrh	r3, [r7, #2]
 800de6c:	3301      	adds	r3, #1
 800de6e:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800de70:	f107 020c 	add.w	r2, r7, #12
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	4413      	add	r3, r2
 800de78:	781a      	ldrb	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff ff32 	bl	800dce8 <SPI_ETH>
 800de84:	4603      	mov	r3, r0
 800de86:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	3301      	adds	r3, #1
 800de8c:	613b      	str	r3, [r7, #16]
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b01      	cmp	r3, #1
 800de92:	dde0      	ble.n	800de56 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800de94:	8afb      	ldrh	r3, [r7, #22]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800de9e:	b590      	push	{r4, r7, lr}
 800dea0:	b087      	sub	sp, #28
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	461a      	mov	r2, r3
 800deaa:	460b      	mov	r3, r1
 800deac:	817b      	strh	r3, [r7, #10]
 800deae:	4613      	mov	r3, r2
 800deb0:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	220f      	movs	r2, #15
 800deb6:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800deb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800deba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800debe:	d226      	bcs.n	800df0e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	e01a      	b.n	800df02 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800decc:	897b      	ldrh	r3, [r7, #10]
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800ded4:	897b      	ldrh	r3, [r7, #10]
 800ded6:	0a1b      	lsrs	r3, r3, #8
 800ded8:	b29b      	uxth	r3, r3
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800dee0:	893a      	ldrh	r2, [r7, #8]
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	4413      	add	r3, r2
 800dee6:	461a      	mov	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	189c      	adds	r4, r3, r2
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7ff fefb 	bl	800dce8 <SPI_ETH>
 800def2:	4603      	mov	r3, r0
 800def4:	7023      	strb	r3, [r4, #0]
				addr++;
 800def6:	897b      	ldrh	r3, [r7, #10]
 800def8:	3301      	adds	r3, #1
 800defa:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	3301      	adds	r3, #1
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	429a      	cmp	r2, r3
 800df08:	dbe0      	blt.n	800decc <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800df0a:	2300      	movs	r3, #0
 800df0c:	e000      	b.n	800df10 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800df0e:	2301      	movs	r3, #1
	}
}
 800df10:	4618      	mov	r0, r3
 800df12:	371c      	adds	r7, #28
 800df14:	46bd      	mov	sp, r7
 800df16:	bd90      	pop	{r4, r7, pc}

0800df18 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	607a      	str	r2, [r7, #4]
 800df22:	461a      	mov	r2, r3
 800df24:	460b      	mov	r3, r1
 800df26:	817b      	strh	r3, [r7, #10]
 800df28:	4613      	mov	r3, r2
 800df2a:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	22f0      	movs	r2, #240	; 0xf0
 800df30:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800df32:	8c3b      	ldrh	r3, [r7, #32]
 800df34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df38:	d223      	bcs.n	800df82 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
 800df3e:	e01a      	b.n	800df76 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800df40:	897b      	ldrh	r3, [r7, #10]
 800df42:	b2da      	uxtb	r2, r3
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800df48:	897b      	ldrh	r3, [r7, #10]
 800df4a:	0a1b      	lsrs	r3, r3, #8
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800df54:	893a      	ldrh	r2, [r7, #8]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	4413      	add	r3, r2
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4413      	add	r3, r2
 800df5e:	7f1a      	ldrb	r2, [r3, #28]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7ff febf 	bl	800dce8 <SPI_ETH>
				addr++;
 800df6a:	897b      	ldrh	r3, [r7, #10]
 800df6c:	3301      	adds	r3, #1
 800df6e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	3301      	adds	r3, #1
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	8c3b      	ldrh	r3, [r7, #32]
 800df78:	697a      	ldr	r2, [r7, #20]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	dbe0      	blt.n	800df40 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800df7e:	2300      	movs	r3, #0
 800df80:	e000      	b.n	800df84 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800df82:	2301      	movs	r3, #1
	}
}
 800df84:	4618      	mov	r0, r3
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	70fb      	strb	r3, [r7, #3]
 800df98:	4613      	mov	r3, r2
 800df9a:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	22f0      	movs	r2, #240	; 0xf0
 800dfa0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dfa2:	78fb      	ldrb	r3, [r7, #3]
 800dfa4:	3304      	adds	r3, #4
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	78ba      	ldrb	r2, [r7, #2]
 800dfb6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff fe95 	bl	800dce8 <SPI_ETH>
}
 800dfbe:	bf00      	nop
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	22f0      	movs	r2, #240	; 0xf0
 800dfdc:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800dfde:	78fb      	ldrb	r3, [r7, #3]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	78ba      	ldrb	r2, [r7, #2]
 800dff2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff fe77 	bl	800dce8 <SPI_ETH>
}
 800dffa:	bf00      	nop
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af02      	add	r7, sp, #8
 800e00a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e012:	331c      	adds	r3, #28
 800e014:	2204      	movs	r2, #4
 800e016:	9201      	str	r2, [sp, #4]
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	23f0      	movs	r3, #240	; 0xf0
 800e01c:	2201      	movs	r2, #1
 800e01e:	2100      	movs	r1, #0
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff fe88 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e026:	2119      	movs	r1, #25
 800e028:	482d      	ldr	r0, [pc, #180]	; (800e0e0 <eth_init+0xdc>)
 800e02a:	f7f3 fac9 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e034:	2204      	movs	r2, #4
 800e036:	9201      	str	r2, [sp, #4]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	23f0      	movs	r3, #240	; 0xf0
 800e03c:	2205      	movs	r2, #5
 800e03e:	2100      	movs	r1, #0
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff fe78 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e046:	2116      	movs	r1, #22
 800e048:	4826      	ldr	r0, [pc, #152]	; (800e0e4 <eth_init+0xe0>)
 800e04a:	f7f3 fab9 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e054:	3304      	adds	r3, #4
 800e056:	2206      	movs	r2, #6
 800e058:	9201      	str	r2, [sp, #4]
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	23f0      	movs	r3, #240	; 0xf0
 800e05e:	2209      	movs	r2, #9
 800e060:	2100      	movs	r1, #0
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fe67 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e068:	2113      	movs	r1, #19
 800e06a:	481f      	ldr	r0, [pc, #124]	; (800e0e8 <eth_init+0xe4>)
 800e06c:	f7f3 faa8 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e076:	330a      	adds	r3, #10
 800e078:	2204      	movs	r2, #4
 800e07a:	9201      	str	r2, [sp, #4]
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	23f0      	movs	r3, #240	; 0xf0
 800e080:	220f      	movs	r2, #15
 800e082:	2100      	movs	r1, #0
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff fe56 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e08a:	2112      	movs	r1, #18
 800e08c:	4817      	ldr	r0, [pc, #92]	; (800e0ec <eth_init+0xe8>)
 800e08e:	f7f3 fa97 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e098:	330e      	adds	r3, #14
 800e09a:	2201      	movs	r2, #1
 800e09c:	9201      	str	r2, [sp, #4]
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	23f0      	movs	r3, #240	; 0xf0
 800e0a2:	221a      	movs	r2, #26
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff fe45 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e0ac:	2128      	movs	r1, #40	; 0x28
 800e0ae:	4810      	ldr	r0, [pc, #64]	; (800e0f0 <eth_init+0xec>)
 800e0b0:	f7f3 fa86 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0ba:	330f      	adds	r3, #15
 800e0bc:	2201      	movs	r2, #1
 800e0be:	9201      	str	r2, [sp, #4]
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	23f0      	movs	r3, #240	; 0xf0
 800e0c4:	221b      	movs	r2, #27
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff fe34 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e0ce:	2128      	movs	r1, #40	; 0x28
 800e0d0:	4808      	ldr	r0, [pc, #32]	; (800e0f4 <eth_init+0xf0>)
 800e0d2:	f7f3 fa75 	bl	80015c0 <ITM0_Write>

}
 800e0d6:	bf00      	nop
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	080109f0 	.word	0x080109f0
 800e0e4:	08010a0c 	.word	0x08010a0c
 800e0e8:	08010a28 	.word	0x08010a28
 800e0ec:	08010a40 	.word	0x08010a40
 800e0f0:	08010a58 	.word	0x08010a58
 800e0f4:	08010a84 	.word	0x08010a84

0800e0f8 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af02      	add	r7, sp, #8
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	2201      	movs	r2, #1
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff ff5c 	bl	800dfc8 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e110:	2119      	movs	r1, #25
 800e112:	4830      	ldr	r0, [pc, #192]	; (800e1d4 <eth_socket_init+0xdc>)
 800e114:	f7f3 fa54 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e11e:	331a      	adds	r3, #26
 800e120:	2202      	movs	r2, #2
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	23f0      	movs	r3, #240	; 0xf0
 800e128:	2204      	movs	r2, #4
 800e12a:	2104      	movs	r1, #4
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff fe02 	bl	800dd36 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e132:	212c      	movs	r1, #44	; 0x2c
 800e134:	4828      	ldr	r0, [pc, #160]	; (800e1d8 <eth_socket_init+0xe0>)
 800e136:	f7f3 fa43 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e140:	331c      	adds	r3, #28
 800e142:	2204      	movs	r2, #4
 800e144:	9201      	str	r2, [sp, #4]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	23f0      	movs	r3, #240	; 0xf0
 800e14a:	220c      	movs	r2, #12
 800e14c:	2104      	movs	r1, #4
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff fdf1 	bl	800dd36 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e154:	212e      	movs	r1, #46	; 0x2e
 800e156:	4821      	ldr	r0, [pc, #132]	; (800e1dc <eth_socket_init+0xe4>)
 800e158:	f7f3 fa32 	bl	80015c0 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e162:	2202      	movs	r2, #2
 800e164:	9201      	str	r2, [sp, #4]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	23f0      	movs	r3, #240	; 0xf0
 800e16a:	2210      	movs	r2, #16
 800e16c:	2104      	movs	r1, #4
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff fde1 	bl	800dd36 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e174:	2120      	movs	r1, #32
 800e176:	481a      	ldr	r0, [pc, #104]	; (800e1e0 <eth_socket_init+0xe8>)
 800e178:	f7f3 fa22 	bl	80015c0 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	2201      	movs	r2, #1
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff ff02 	bl	800df8c <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e188:	2119      	movs	r1, #25
 800e18a:	4816      	ldr	r0, [pc, #88]	; (800e1e4 <eth_socket_init+0xec>)
 800e18c:	f7f3 fa18 	bl	80015c0 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d10a      	bne.n	800e1b4 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e19e:	78fb      	ldrb	r3, [r7, #3]
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7ff fef1 	bl	800df8c <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e1aa:	211b      	movs	r1, #27
 800e1ac:	480e      	ldr	r0, [pc, #56]	; (800e1e8 <eth_socket_init+0xf0>)
 800e1ae:	f7f3 fa07 	bl	80015c0 <ITM0_Write>
 800e1b2:	e009      	b.n	800e1c8 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	2204      	movs	r2, #4
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fee6 	bl	800df8c <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e1c0:	2115      	movs	r1, #21
 800e1c2:	480a      	ldr	r0, [pc, #40]	; (800e1ec <eth_socket_init+0xf4>)
 800e1c4:	f7f3 f9fc 	bl	80015c0 <ITM0_Write>
	 }
}
 800e1c8:	bf00      	nop
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	08010ab0 	.word	0x08010ab0
 800e1d8:	08010acc 	.word	0x08010acc
 800e1dc:	08010afc 	.word	0x08010afc
 800e1e0:	08010b2c 	.word	0x08010b2c
 800e1e4:	08010b50 	.word	0x08010b50
 800e1e8:	08010b6c 	.word	0x08010b6c
 800e1ec:	08010b88 	.word	0x08010b88

0800e1f0 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	220f      	movs	r2, #15
 800e200:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e202:	78fb      	ldrb	r3, [r7, #3]
 800e204:	3304      	adds	r3, #4
 800e206:	b2da      	uxtb	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2203      	movs	r2, #3
 800e210:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff fd65 	bl	800dce8 <SPI_ETH>
	return(y->RX[3]);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	7edb      	ldrb	r3, [r3, #27]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	460b      	mov	r3, r1
 800e234:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	220f      	movs	r2, #15
 800e23a:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e23c:	78fb      	ldrb	r3, [r7, #3]
 800e23e:	3304      	adds	r3, #4
 800e240:	b2da      	uxtb	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff fd48 	bl	800dce8 <SPI_ETH>
	return(y->RX[3]);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	7edb      	ldrb	r3, [r3, #27]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af02      	add	r7, sp, #8
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	607a      	str	r2, [r7, #4]
 800e26e:	461a      	mov	r2, r3
 800e270:	460b      	mov	r3, r1
 800e272:	72fb      	strb	r3, [r7, #11]
 800e274:	4613      	mov	r3, r2
 800e276:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e278:	2300      	movs	r3, #0
 800e27a:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e27c:	2300      	movs	r3, #0
 800e27e:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e280:	2300      	movs	r3, #0
 800e282:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e284:	2300      	movs	r3, #0
 800e286:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e288:	2300      	movs	r3, #0
 800e28a:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e28c:	2300      	movs	r3, #0
 800e28e:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e290:	2300      	movs	r3, #0
 800e292:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e294:	2300      	movs	r3, #0
 800e296:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e298:	2300      	movs	r3, #0
 800e29a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d83e      	bhi.n	800e324 <eth_rd_SOCKET_DATA+0xc0>
 800e2a6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <eth_rd_SOCKET_DATA+0x48>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e2bd 	.word	0x0800e2bd
 800e2b0:	0800e2d7 	.word	0x0800e2d7
 800e2b4:	0800e2f1 	.word	0x0800e2f1
 800e2b8:	0800e30b 	.word	0x0800e30b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2c6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e2d4:	e033      	b.n	800e33e <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2dc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e2e0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e2ee:	e026      	b.n	800e33e <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2fa:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e302:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e306:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e308:	e019      	b.n	800e33e <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e310:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e314:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e31c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e320:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e322:	e00c      	b.n	800e33e <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e32e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e33a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e33c:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e33e:	7afb      	ldrb	r3, [r7, #11]
 800e340:	3304      	adds	r3, #4
 800e342:	b2d9      	uxtb	r1, r3
 800e344:	2302      	movs	r3, #2
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	f107 0310 	add.w	r3, r7, #16
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	230f      	movs	r3, #15
 800e350:	2228      	movs	r2, #40	; 0x28
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7ff fcef 	bl	800dd36 <SPI_ETH_REG>
 800e358:	4603      	mov	r3, r0
 800e35a:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e35c:	8b7a      	ldrh	r2, [r7, #26]
 800e35e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e360:	4013      	ands	r3, r2
 800e362:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e366:	8b3b      	ldrh	r3, [r7, #24]
 800e368:	4413      	add	r3, r2
 800e36a:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e36c:	8b3a      	ldrh	r2, [r7, #24]
 800e36e:	893b      	ldrh	r3, [r7, #8]
 800e370:	441a      	add	r2, r3
 800e372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e374:	3301      	adds	r3, #1
 800e376:	429a      	cmp	r2, r3
 800e378:	dd2c      	ble.n	800e3d4 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e37a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e37c:	8b3b      	ldrh	r3, [r7, #24]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	b29b      	uxth	r3, r3
 800e382:	3301      	adds	r3, #1
 800e384:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f103 021c 	add.w	r2, r3, #28
 800e38c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e38e:	8af9      	ldrh	r1, [r7, #22]
 800e390:	8bfb      	ldrh	r3, [r7, #30]
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	4603      	mov	r3, r0
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f7ff fd81 	bl	800de9e <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e39c:	8bba      	ldrh	r2, [r7, #28]
 800e39e:	8bfb      	ldrh	r3, [r7, #30]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e3a4:	893a      	ldrh	r2, [r7, #8]
 800e3a6:	8bfb      	ldrh	r3, [r7, #30]
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e3ac:	8bfb      	ldrh	r3, [r7, #30]
 800e3ae:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f103 021c 	add.w	r2, r3, #28
 800e3b6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e3b8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e3ba:	8c3b      	ldrh	r3, [r7, #32]
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	4603      	mov	r3, r0
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7ff fd6c 	bl	800de9e <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e3c6:	8b7a      	ldrh	r2, [r7, #26]
 800e3c8:	893b      	ldrh	r3, [r7, #8]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	801a      	strh	r2, [r3, #0]
 800e3d2:	e010      	b.n	800e3f6 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f103 021c 	add.w	r2, r3, #28
 800e3da:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e3dc:	8af9      	ldrh	r1, [r7, #22]
 800e3de:	893b      	ldrh	r3, [r7, #8]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7ff fd5a 	bl	800de9e <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e3ea:	8b7a      	ldrh	r2, [r7, #26]
 800e3ec:	893b      	ldrh	r3, [r7, #8]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	b29b      	uxth	r3, r3
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop

0800e404 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08c      	sub	sp, #48	; 0x30
 800e408:	af02      	add	r7, sp, #8
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	607a      	str	r2, [r7, #4]
 800e40e:	461a      	mov	r2, r3
 800e410:	460b      	mov	r3, r1
 800e412:	72fb      	strb	r3, [r7, #11]
 800e414:	4613      	mov	r3, r2
 800e416:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e418:	2300      	movs	r3, #0
 800e41a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e41c:	2300      	movs	r3, #0
 800e41e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e420:	2300      	movs	r3, #0
 800e422:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e424:	2300      	movs	r3, #0
 800e426:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e428:	2300      	movs	r3, #0
 800e42a:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e42c:	2300      	movs	r3, #0
 800e42e:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e430:	2300      	movs	r3, #0
 800e432:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e434:	2300      	movs	r3, #0
 800e436:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e438:	2300      	movs	r3, #0
 800e43a:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e43c:	2300      	movs	r3, #0
 800e43e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e440:	2300      	movs	r3, #0
 800e442:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e444:	7afb      	ldrb	r3, [r7, #11]
 800e446:	2b03      	cmp	r3, #3
 800e448:	d83e      	bhi.n	800e4c8 <eth_wr_SOCKET_DATA+0xc4>
 800e44a:	a201      	add	r2, pc, #4	; (adr r2, 800e450 <eth_wr_SOCKET_DATA+0x4c>)
 800e44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e450:	0800e461 	.word	0x0800e461
 800e454:	0800e47b 	.word	0x0800e47b
 800e458:	0800e495 	.word	0x0800e495
 800e45c:	0800e4af 	.word	0x0800e4af
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e466:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e46a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e472:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e476:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e478:	e033      	b.n	800e4e2 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e484:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e48c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e490:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e492:	e026      	b.n	800e4e2 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e49e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4aa:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4ac:	e019      	b.n	800e4e2 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e4b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4c4:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4c6:	e00c      	b.n	800e4e2 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4d2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e4de:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4e0:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e4e2:	e00e      	b.n	800e502 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e4e4:	7afb      	ldrb	r3, [r7, #11]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	b2d9      	uxtb	r1, r3
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	f107 0310 	add.w	r3, r7, #16
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	230f      	movs	r3, #15
 800e4f6:	2220      	movs	r2, #32
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff fc1c 	bl	800dd36 <SPI_ETH_REG>
 800e4fe:	4603      	mov	r3, r0
 800e500:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e504:	893b      	ldrh	r3, [r7, #8]
 800e506:	429a      	cmp	r2, r3
 800e508:	d3ec      	bcc.n	800e4e4 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e50a:	7afb      	ldrb	r3, [r7, #11]
 800e50c:	3304      	adds	r3, #4
 800e50e:	b2d9      	uxtb	r1, r3
 800e510:	2302      	movs	r3, #2
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	f107 0310 	add.w	r3, r7, #16
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	230f      	movs	r3, #15
 800e51c:	2224      	movs	r2, #36	; 0x24
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f7ff fc09 	bl	800dd36 <SPI_ETH_REG>
 800e524:	4603      	mov	r3, r0
 800e526:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e528:	8b3a      	ldrh	r2, [r7, #24]
 800e52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52c:	4013      	ands	r3, r2
 800e52e:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e530:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e532:	8afb      	ldrh	r3, [r7, #22]
 800e534:	4413      	add	r3, r2
 800e536:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e538:	8afa      	ldrh	r2, [r7, #22]
 800e53a:	893b      	ldrh	r3, [r7, #8]
 800e53c:	441a      	add	r2, r3
 800e53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e540:	3301      	adds	r3, #1
 800e542:	429a      	cmp	r2, r3
 800e544:	dd2c      	ble.n	800e5a0 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e548:	8afb      	ldrh	r3, [r7, #22]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	3301      	adds	r3, #1
 800e550:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f103 021c 	add.w	r2, r3, #28
 800e558:	8c38      	ldrh	r0, [r7, #32]
 800e55a:	8ab9      	ldrh	r1, [r7, #20]
 800e55c:	8bbb      	ldrh	r3, [r7, #28]
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	4603      	mov	r3, r0
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7ff fcd8 	bl	800df18 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e568:	8b7a      	ldrh	r2, [r7, #26]
 800e56a:	8bbb      	ldrh	r3, [r7, #28]
 800e56c:	4413      	add	r3, r2
 800e56e:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e570:	893a      	ldrh	r2, [r7, #8]
 800e572:	8bbb      	ldrh	r3, [r7, #28]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e578:	8bbb      	ldrh	r3, [r7, #28]
 800e57a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f103 021c 	add.w	r2, r3, #28
 800e582:	8c38      	ldrh	r0, [r7, #32]
 800e584:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e586:	8bfb      	ldrh	r3, [r7, #30]
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	4603      	mov	r3, r0
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7ff fcc3 	bl	800df18 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e592:	8b3a      	ldrh	r2, [r7, #24]
 800e594:	893b      	ldrh	r3, [r7, #8]
 800e596:	4413      	add	r3, r2
 800e598:	b29a      	uxth	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	801a      	strh	r2, [r3, #0]
 800e59e:	e010      	b.n	800e5c2 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f103 021c 	add.w	r2, r3, #28
 800e5a6:	8c38      	ldrh	r0, [r7, #32]
 800e5a8:	8ab9      	ldrh	r1, [r7, #20]
 800e5aa:	893b      	ldrh	r3, [r7, #8]
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7ff fcb1 	bl	800df18 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e5b6:	8b3a      	ldrh	r2, [r7, #24]
 800e5b8:	893b      	ldrh	r3, [r7, #8]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	801a      	strh	r2, [r3, #0]
					}

}
 800e5c2:	bf00      	nop
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3728      	adds	r7, #40	; 0x28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b090      	sub	sp, #64	; 0x40
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5de:	2300      	movs	r3, #0
 800e5e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	623b      	str	r3, [r7, #32]
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	61fb      	str	r3, [r7, #28]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	61bb      	str	r3, [r7, #24]
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5fe:	2300      	movs	r3, #0
 800e600:	617b      	str	r3, [r7, #20]
 800e602:	2300      	movs	r3, #0
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
 800e606:	2300      	movs	r3, #0
 800e608:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e616:	6a3a      	ldr	r2, [r7, #32]
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	f2c0 82fe 	blt.w	800ec1c <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e620:	2300      	movs	r3, #0
 800e622:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e624:	e00c      	b.n	800e640 <FT_String_ND+0x74>
							{
								n++;
 800e626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e628:	3301      	adds	r3, #1
 800e62a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e62c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	441a      	add	r2, r3
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	3301      	adds	r3, #1
 800e636:	429a      	cmp	r2, r3
 800e638:	dd02      	ble.n	800e640 <FT_String_ND+0x74>
								{
									estado=0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e63e:	e009      	b.n	800e654 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	4413      	add	r3, r2
 800e646:	781a      	ldrb	r2, [r3, #0]
 800e648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64a:	6879      	ldr	r1, [r7, #4]
 800e64c:	440b      	add	r3, r1
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	429a      	cmp	r2, r3
 800e652:	d1e8      	bne.n	800e626 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e656:	3301      	adds	r3, #1
 800e658:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	3301      	adds	r3, #1
 800e65e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	429a      	cmp	r2, r3
 800e666:	d108      	bne.n	800e67a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e672:	601a      	str	r2, [r3, #0]
									estado=1;
 800e674:	2301      	movs	r3, #1
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e678:	e010      	b.n	800e69c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	429a      	cmp	r2, r3
 800e680:	dd02      	ble.n	800e688 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e682:	2300      	movs	r3, #0
 800e684:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e686:	e009      	b.n	800e69c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	4413      	add	r3, r2
 800e68e:	781a      	ldrb	r2, [r3, #0]
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	440b      	add	r3, r1
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d0db      	beq.n	800e654 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	1e5a      	subs	r2, r3, #1
 800e6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a2:	4413      	add	r3, r2
 800e6a4:	6a3a      	ldr	r2, [r7, #32]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	dd02      	ble.n	800e6b0 <FT_String_ND+0xe4>
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d1b7      	bne.n	800e620 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d101      	bne.n	800e6ba <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	e2b1      	b.n	800ec1e <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d12c      	bne.n	800e71a <FT_String_ND+0x14e>
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d129      	bne.n	800e71a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e6c6:	e014      	b.n	800e6f2 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	441a      	add	r2, r3
 800e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	441a      	add	r2, r3
 800e6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6dc:	6819      	ldr	r1, [r3, #0]
 800e6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e0:	440b      	add	r3, r1
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	68f9      	ldr	r1, [r7, #12]
 800e6e6:	440b      	add	r3, r1
 800e6e8:	7812      	ldrb	r2, [r2, #0]
 800e6ea:	701a      	strb	r2, [r3, #0]
										n3++;
 800e6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	441a      	add	r2, r3
 800e6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fc:	4413      	add	r3, r2
 800e6fe:	6a3a      	ldr	r2, [r7, #32]
 800e700:	429a      	cmp	r2, r3
 800e702:	dae1      	bge.n	800e6c8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70a:	4413      	add	r3, r2
 800e70c:	1e5a      	subs	r2, r3, #1
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	601a      	str	r2, [r3, #0]
							estado=3;
 800e712:	2303      	movs	r3, #3
 800e714:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	e281      	b.n	800ec1e <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e71a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	f040 80b6 	bne.w	800e88e <FT_String_ND+0x2c2>
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	2b01      	cmp	r3, #1
 800e726:	f040 80b2 	bne.w	800e88e <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e72a:	e012      	b.n	800e752 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e72c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	1ad2      	subs	r2, r2, r3
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	4413      	add	r3, r2
 800e736:	461a      	mov	r2, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	441a      	add	r2, r3
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e740:	440b      	add	r3, r1
 800e742:	7812      	ldrb	r2, [r2, #0]
 800e744:	701a      	strb	r2, [r3, #0]
								n4++;
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	3301      	adds	r3, #1
 800e74a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e74e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e750:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	1ad2      	subs	r2, r2, r3
 800e758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75a:	4413      	add	r3, r2
 800e75c:	6a3a      	ldr	r2, [r7, #32]
 800e75e:	429a      	cmp	r2, r3
 800e760:	dae4      	bge.n	800e72c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e762:	499e      	ldr	r1, [pc, #632]	; (800e9dc <FT_String_ND+0x410>)
 800e764:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e766:	f000 fcfd 	bl	800f164 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e76a:	499d      	ldr	r1, [pc, #628]	; (800e9e0 <FT_String_ND+0x414>)
 800e76c:	2000      	movs	r0, #0
 800e76e:	f000 fcf9 	bl	800f164 <strtok>
 800e772:	4603      	mov	r3, r0
 800e774:	4618      	mov	r0, r3
 800e776:	f000 fada 	bl	800ed2e <atoi>
 800e77a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e77e:	3306      	adds	r3, #6
 800e780:	222c      	movs	r2, #44	; 0x2c
 800e782:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	2b09      	cmp	r3, #9
 800e788:	dc0d      	bgt.n	800e7a6 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e78c:	3308      	adds	r3, #8
 800e78e:	223a      	movs	r2, #58	; 0x3a
 800e790:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	3309      	adds	r3, #9
 800e796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e798:	4413      	add	r3, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	3309      	adds	r3, #9
 800e7a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7a4:	e021      	b.n	800e7ea <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	2b63      	cmp	r3, #99	; 0x63
 800e7aa:	dc0d      	bgt.n	800e7c8 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ae:	3309      	adds	r3, #9
 800e7b0:	223a      	movs	r2, #58	; 0x3a
 800e7b2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	330a      	adds	r3, #10
 800e7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ba:	4413      	add	r3, r2
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	330a      	adds	r3, #10
 800e7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7c6:	e010      	b.n	800e7ea <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7ce:	da0c      	bge.n	800e7ea <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7d2:	330a      	adds	r3, #10
 800e7d4:	223a      	movs	r2, #58	; 0x3a
 800e7d6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	330b      	adds	r3, #11
 800e7dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7de:	4413      	add	r3, r2
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	330b      	adds	r3, #11
 800e7e8:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ee:	601a      	str	r2, [r3, #0]
							n4=0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7f4:	e016      	b.n	800e824 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e7f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	1ad2      	subs	r2, r2, r3
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	441a      	add	r2, r3
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	4413      	add	r3, r2
 800e804:	461a      	mov	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	441a      	add	r2, r3
 800e80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	1ac9      	subs	r1, r1, r3
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	440b      	add	r3, r1
 800e814:	4619      	mov	r1, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	440b      	add	r3, r1
 800e81a:	7812      	ldrb	r2, [r2, #0]
 800e81c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	3301      	adds	r3, #1
 800e822:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	441a      	add	r2, r3
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	4413      	add	r3, r2
 800e832:	6a3a      	ldr	r2, [r7, #32]
 800e834:	429a      	cmp	r2, r3
 800e836:	dade      	bge.n	800e7f6 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83c:	441a      	add	r2, r3
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	1e5a      	subs	r2, r3, #1
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e850:	441a      	add	r2, r3
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	4413      	add	r3, r2
 800e856:	461a      	mov	r2, r3
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	2200      	movs	r2, #0
 800e85e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	1ad2      	subs	r2, r2, r3
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	4413      	add	r3, r2
 800e86a:	461a      	mov	r2, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4413      	add	r3, r2
 800e870:	2200      	movs	r2, #0
 800e872:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	1ad2      	subs	r2, r2, r3
 800e87a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87e:	440b      	add	r3, r1
 800e880:	429a      	cmp	r2, r3
 800e882:	d102      	bne.n	800e88a <FT_String_ND+0x2be>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2200      	movs	r2, #0
 800e888:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e88a:	2303      	movs	r3, #3
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e88e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e890:	2b03      	cmp	r3, #3
 800e892:	d146      	bne.n	800e922 <FT_String_ND+0x356>
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	2b01      	cmp	r3, #1
 800e898:	d143      	bne.n	800e922 <FT_String_ND+0x356>
						{
						n3=0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e89e:	e00e      	b.n	800e8be <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a6:	4413      	add	r3, r2
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	441a      	add	r2, r3
 800e8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8b2:	440b      	add	r3, r1
 800e8b4:	7812      	ldrb	r2, [r2, #0]
 800e8b6:	701a      	strb	r2, [r3, #0]
										n3++;
 800e8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	dbec      	blt.n	800e8a0 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e8ca:	e014      	b.n	800e8f6 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	441a      	add	r2, r3
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	4413      	add	r3, r2
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	441a      	add	r2, r3
 800e8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e0:	6819      	ldr	r1, [r3, #0]
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	68f9      	ldr	r1, [r7, #12]
 800e8ea:	440b      	add	r3, r1
 800e8ec:	7812      	ldrb	r2, [r2, #0]
 800e8ee:	701a      	strb	r2, [r3, #0]
										n5++;
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	441a      	add	r2, r3
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	441a      	add	r2, r3
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	dde0      	ble.n	800e8cc <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e90a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	4413      	add	r3, r2
 800e912:	1e5a      	subs	r2, r3, #1
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e91c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e91e:	2303      	movs	r3, #3
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e924:	2b04      	cmp	r3, #4
 800e926:	f040 80b6 	bne.w	800ea96 <FT_String_ND+0x4ca>
 800e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	f040 80b2 	bne.w	800ea96 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e932:	e012      	b.n	800e95a <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	4413      	add	r3, r2
 800e93e:	461a      	mov	r2, r3
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	441a      	add	r2, r3
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e948:	440b      	add	r3, r1
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	3301      	adds	r3, #1
 800e952:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e958:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e95a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	4413      	add	r3, r2
 800e964:	6a3a      	ldr	r2, [r7, #32]
 800e966:	429a      	cmp	r2, r3
 800e968:	dae4      	bge.n	800e934 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e96a:	491c      	ldr	r1, [pc, #112]	; (800e9dc <FT_String_ND+0x410>)
 800e96c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e96e:	f000 fbf9 	bl	800f164 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e972:	491b      	ldr	r1, [pc, #108]	; (800e9e0 <FT_String_ND+0x414>)
 800e974:	2000      	movs	r0, #0
 800e976:	f000 fbf5 	bl	800f164 <strtok>
 800e97a:	4603      	mov	r3, r0
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f9d6 	bl	800ed2e <atoi>
 800e982:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e986:	3306      	adds	r3, #6
 800e988:	222c      	movs	r2, #44	; 0x2c
 800e98a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	2b09      	cmp	r3, #9
 800e990:	dc07      	bgt.n	800e9a2 <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e994:	3308      	adds	r3, #8
 800e996:	223a      	movs	r2, #58	; 0x3a
 800e998:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	3309      	adds	r3, #9
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a0:	e015      	b.n	800e9ce <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	2b63      	cmp	r3, #99	; 0x63
 800e9a6:	dc07      	bgt.n	800e9b8 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9aa:	3309      	adds	r3, #9
 800e9ac:	223a      	movs	r2, #58	; 0x3a
 800e9ae:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	330a      	adds	r3, #10
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	e00a      	b.n	800e9ce <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9be:	da06      	bge.n	800e9ce <FT_String_ND+0x402>
														{
															c[10]=':';
 800e9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9c2:	330a      	adds	r3, #10
 800e9c4:	223a      	movs	r2, #58	; 0x3a
 800e9c6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	330b      	adds	r3, #11
 800e9cc:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9d2:	601a      	str	r2, [r3, #0]
							n4=0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9d8:	e01b      	b.n	800ea12 <FT_String_ND+0x446>
 800e9da:	bf00      	nop
 800e9dc:	08010ba0 	.word	0x08010ba0
 800e9e0:	08010ba4 	.word	0x08010ba4
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e9e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	1ad2      	subs	r2, r2, r3
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	441a      	add	r2, r3
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	4413      	add	r3, r2
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	441a      	add	r2, r3
 800e9f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	1ac9      	subs	r1, r1, r3
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	440b      	add	r3, r1
 800ea02:	4619      	mov	r1, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	440b      	add	r3, r1
 800ea08:	7812      	ldrb	r2, [r2, #0]
 800ea0a:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	3301      	adds	r3, #1
 800ea10:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ea12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	1ad2      	subs	r2, r2, r3
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	441a      	add	r2, r3
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	4413      	add	r3, r2
 800ea20:	6a3a      	ldr	r2, [r7, #32]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	dade      	bge.n	800e9e4 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ea26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	441a      	add	r2, r3
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	1e5a      	subs	r2, r3, #1
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	601a      	str	r2, [r3, #0]
							n5=0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea3a:	e00f      	b.n	800ea5c <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ea3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	1ad2      	subs	r2, r2, r3
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	4413      	add	r3, r2
 800ea46:	461a      	mov	r2, r3
 800ea48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4a:	441a      	add	r2, r3
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea50:	440b      	add	r3, r1
 800ea52:	7812      	ldrb	r2, [r2, #0]
 800ea54:	701a      	strb	r2, [r3, #0]
								n5++;
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	3301      	adds	r3, #1
 800ea5a:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	1ad2      	subs	r2, r2, r3
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	441a      	add	r2, r3
 800ea66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	dbe6      	blt.n	800ea3c <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ea6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea72:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ea74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7a:	441a      	add	r2, r3
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	1ad2      	subs	r2, r2, r3
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4413      	add	r3, r2
 800ea86:	6a3a      	ldr	r2, [r7, #32]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d102      	bne.n	800ea92 <FT_String_ND+0x4c6>
							{
								estado=4;
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea90:	e001      	b.n	800ea96 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800ea92:	2305      	movs	r3, #5
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ea96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea98:	2b05      	cmp	r3, #5
 800ea9a:	f040 80bd 	bne.w	800ec18 <FT_String_ND+0x64c>
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	f040 80b9 	bne.w	800ec18 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eaa6:	e012      	b.n	800eace <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eaa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	1ad2      	subs	r2, r2, r3
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	4413      	add	r3, r2
 800eab2:	461a      	mov	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	441a      	add	r2, r3
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eabc:	440b      	add	r3, r1
 800eabe:	7812      	ldrb	r2, [r2, #0]
 800eac0:	701a      	strb	r2, [r3, #0]
								n4++;
 800eac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac4:	3301      	adds	r3, #1
 800eac6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800eac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eacc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	1ad2      	subs	r2, r2, r3
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	4413      	add	r3, r2
 800ead8:	6a3a      	ldr	r2, [r7, #32]
 800eada:	429a      	cmp	r2, r3
 800eadc:	dae4      	bge.n	800eaa8 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eade:	4952      	ldr	r1, [pc, #328]	; (800ec28 <FT_String_ND+0x65c>)
 800eae0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eae2:	f000 fb3f 	bl	800f164 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800eae6:	4951      	ldr	r1, [pc, #324]	; (800ec2c <FT_String_ND+0x660>)
 800eae8:	2000      	movs	r0, #0
 800eaea:	f000 fb3b 	bl	800f164 <strtok>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f000 f91c 	bl	800ed2e <atoi>
 800eaf6:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eaf8:	494c      	ldr	r1, [pc, #304]	; (800ec2c <FT_String_ND+0x660>)
 800eafa:	2000      	movs	r0, #0
 800eafc:	f000 fb32 	bl	800f164 <strtok>
 800eb00:	4603      	mov	r3, r0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f913 	bl	800ed2e <atoi>
 800eb08:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800eb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb0c:	3306      	adds	r3, #6
 800eb0e:	222c      	movs	r2, #44	; 0x2c
 800eb10:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	2b09      	cmp	r3, #9
 800eb16:	dc07      	bgt.n	800eb28 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800eb18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb1a:	330a      	adds	r3, #10
 800eb1c:	223a      	movs	r2, #58	; 0x3a
 800eb1e:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	330b      	adds	r3, #11
 800eb24:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb26:	e015      	b.n	800eb54 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	2b63      	cmp	r3, #99	; 0x63
 800eb2c:	dc07      	bgt.n	800eb3e <FT_String_ND+0x572>
														{
															c[11]=':';
 800eb2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb30:	330b      	adds	r3, #11
 800eb32:	223a      	movs	r2, #58	; 0x3a
 800eb34:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	330c      	adds	r3, #12
 800eb3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb3c:	e00a      	b.n	800eb54 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb44:	da06      	bge.n	800eb54 <FT_String_ND+0x588>
														{
															c[12]=':';
 800eb46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb48:	330c      	adds	r3, #12
 800eb4a:	223a      	movs	r2, #58	; 0x3a
 800eb4c:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	330d      	adds	r3, #13
 800eb52:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eb54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb58:	601a      	str	r2, [r3, #0]
							n4=0;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb5e:	e016      	b.n	800eb8e <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eb60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	1ad2      	subs	r2, r2, r3
 800eb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb68:	441a      	add	r2, r3
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	4413      	add	r3, r2
 800eb6e:	461a      	mov	r2, r3
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	441a      	add	r2, r3
 800eb74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	1ac9      	subs	r1, r1, r3
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	440b      	add	r3, r1
 800eb7e:	4619      	mov	r1, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	440b      	add	r3, r1
 800eb84:	7812      	ldrb	r2, [r2, #0]
 800eb86:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	1ad2      	subs	r2, r2, r3
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	441a      	add	r2, r3
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	4413      	add	r3, r2
 800eb9c:	6a3a      	ldr	r2, [r7, #32]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	dade      	bge.n	800eb60 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba6:	441a      	add	r2, r3
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	601a      	str	r2, [r3, #0]
							n5=0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebb6:	e00f      	b.n	800ebd8 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ebb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	1ad2      	subs	r2, r2, r3
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	4413      	add	r3, r2
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc6:	441a      	add	r2, r3
 800ebc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebcc:	440b      	add	r3, r1
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	701a      	strb	r2, [r3, #0]
								n5++;
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	1ad2      	subs	r2, r2, r3
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	441a      	add	r2, r3
 800ebe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	dbe6      	blt.n	800ebb8 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ebea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebee:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ebf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	441a      	add	r2, r3
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	1ad2      	subs	r2, r2, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4413      	add	r3, r2
 800ec02:	6a3a      	ldr	r2, [r7, #32]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d105      	bne.n	800ec14 <FT_String_ND+0x648>
							{
								estado=4;
 800ec08:	2304      	movs	r3, #4
 800ec0a:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ec0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	e001      	b.n	800ec18 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800ec14:	2305      	movs	r3, #5
 800ec16:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	e000      	b.n	800ec1e <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ec1c:	2302      	movs	r3, #2
			}
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3740      	adds	r7, #64	; 0x40
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	08010ba0 	.word	0x08010ba0
 800ec2c:	08010ba4 	.word	0x08010ba4

0800ec30 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b088      	sub	sp, #32
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ec3a:	2330      	movs	r3, #48	; 0x30
 800ec3c:	60bb      	str	r3, [r7, #8]
 800ec3e:	f107 030c 	add.w	r3, r7, #12
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	605a      	str	r2, [r3, #4]
 800ec48:	609a      	str	r2, [r3, #8]
 800ec4a:	60da      	str	r2, [r3, #12]
int i=0;	
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ec50:	f107 0308 	add.w	r3, r7, #8
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	490f      	ldr	r1, [pc, #60]	; (800ec94 <INTOA+0x64>)
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 fa05 	bl	800f068 <siprintf>
		while(i<=strlen(origbuff))
 800ec5e:	e00b      	b.n	800ec78 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	603a      	str	r2, [r7, #0]
 800ec66:	f107 0108 	add.w	r1, r7, #8
 800ec6a:	69fa      	ldr	r2, [r7, #28]
 800ec6c:	440a      	add	r2, r1
 800ec6e:	7812      	ldrb	r2, [r2, #0]
 800ec70:	701a      	strb	r2, [r3, #0]
		i++;
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	3301      	adds	r3, #1
 800ec76:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ec78:	f107 0308 	add.w	r3, r7, #8
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7f1 fab9 	bl	80001f4 <strlen>
 800ec82:	4602      	mov	r2, r0
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d2ea      	bcs.n	800ec60 <INTOA+0x30>
		}
		return(i);
 800ec8a:	69fb      	ldr	r3, [r7, #28]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	08010ba8 	.word	0x08010ba8

0800ec98 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
int x =0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ecaa:	2300      	movs	r3, #0
 800ecac:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ecae:	f107 0310 	add.w	r3, r7, #16
 800ecb2:	617b      	str	r3, [r7, #20]
if (c==0)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <CopiaVector+0x2e>
{
	x=strlen(b);
 800ecba:	68b8      	ldr	r0, [r7, #8]
 800ecbc:	f7f1 fa9a 	bl	80001f4 <strlen>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	61bb      	str	r3, [r7, #24]
 800ecc4:	e02e      	b.n	800ed24 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecd0:	dd01      	ble.n	800ecd6 <CopiaVector+0x3e>
			{
				return(1);
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e027      	b.n	800ed26 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ecda:	e00a      	b.n	800ecf2 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ecdc:	68ba      	ldr	r2, [r7, #8]
 800ecde:	1c53      	adds	r3, r2, #1
 800ece0:	60bb      	str	r3, [r7, #8]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	1c59      	adds	r1, r3, #1
 800ece6:	60f9      	str	r1, [r7, #12]
 800ece8:	7812      	ldrb	r2, [r2, #0]
 800ecea:	701a      	strb	r2, [r3, #0]
					p++;
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ecf2:	69fa      	ldr	r2, [r7, #28]
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	dbf0      	blt.n	800ecdc <CopiaVector+0x44>
				}


			if (d==1)
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d111      	bne.n	800ed24 <CopiaVector+0x8c>
			{
			  p=c;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ed04:	e008      	b.n	800ed18 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	60fa      	str	r2, [r7, #12]
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	7812      	ldrb	r2, [r2, #0]
 800ed10:	701a      	strb	r2, [r3, #0]
				  p++;
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	3301      	adds	r3, #1
 800ed16:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed1e:	dbf2      	blt.n	800ed06 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800ed20:	2300      	movs	r3, #0
 800ed22:	e000      	b.n	800ed26 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ed24:	2301      	movs	r3, #1
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <atoi>:
 800ed2e:	220a      	movs	r2, #10
 800ed30:	2100      	movs	r1, #0
 800ed32:	f000 b89d 	b.w	800ee70 <strtol>

0800ed36 <__itoa>:
 800ed36:	1e93      	subs	r3, r2, #2
 800ed38:	2b22      	cmp	r3, #34	; 0x22
 800ed3a:	b510      	push	{r4, lr}
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	d904      	bls.n	800ed4a <__itoa+0x14>
 800ed40:	2300      	movs	r3, #0
 800ed42:	700b      	strb	r3, [r1, #0]
 800ed44:	461c      	mov	r4, r3
 800ed46:	4620      	mov	r0, r4
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	2a0a      	cmp	r2, #10
 800ed4c:	d109      	bne.n	800ed62 <__itoa+0x2c>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	da07      	bge.n	800ed62 <__itoa+0x2c>
 800ed52:	232d      	movs	r3, #45	; 0x2d
 800ed54:	700b      	strb	r3, [r1, #0]
 800ed56:	4240      	negs	r0, r0
 800ed58:	2101      	movs	r1, #1
 800ed5a:	4421      	add	r1, r4
 800ed5c:	f000 f892 	bl	800ee84 <__utoa>
 800ed60:	e7f1      	b.n	800ed46 <__itoa+0x10>
 800ed62:	2100      	movs	r1, #0
 800ed64:	e7f9      	b.n	800ed5a <__itoa+0x24>

0800ed66 <itoa>:
 800ed66:	f7ff bfe6 	b.w	800ed36 <__itoa>
	...

0800ed6c <_strtol_l.constprop.0>:
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed72:	d001      	beq.n	800ed78 <_strtol_l.constprop.0+0xc>
 800ed74:	2b24      	cmp	r3, #36	; 0x24
 800ed76:	d906      	bls.n	800ed86 <_strtol_l.constprop.0+0x1a>
 800ed78:	f000 fa96 	bl	800f2a8 <__errno>
 800ed7c:	2316      	movs	r3, #22
 800ed7e:	6003      	str	r3, [r0, #0]
 800ed80:	2000      	movs	r0, #0
 800ed82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ee6c <_strtol_l.constprop.0+0x100>
 800ed8a:	460d      	mov	r5, r1
 800ed8c:	462e      	mov	r6, r5
 800ed8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ed96:	f017 0708 	ands.w	r7, r7, #8
 800ed9a:	d1f7      	bne.n	800ed8c <_strtol_l.constprop.0+0x20>
 800ed9c:	2c2d      	cmp	r4, #45	; 0x2d
 800ed9e:	d132      	bne.n	800ee06 <_strtol_l.constprop.0+0x9a>
 800eda0:	782c      	ldrb	r4, [r5, #0]
 800eda2:	2701      	movs	r7, #1
 800eda4:	1cb5      	adds	r5, r6, #2
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d05b      	beq.n	800ee62 <_strtol_l.constprop.0+0xf6>
 800edaa:	2b10      	cmp	r3, #16
 800edac:	d109      	bne.n	800edc2 <_strtol_l.constprop.0+0x56>
 800edae:	2c30      	cmp	r4, #48	; 0x30
 800edb0:	d107      	bne.n	800edc2 <_strtol_l.constprop.0+0x56>
 800edb2:	782c      	ldrb	r4, [r5, #0]
 800edb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800edb8:	2c58      	cmp	r4, #88	; 0x58
 800edba:	d14d      	bne.n	800ee58 <_strtol_l.constprop.0+0xec>
 800edbc:	786c      	ldrb	r4, [r5, #1]
 800edbe:	2310      	movs	r3, #16
 800edc0:	3502      	adds	r5, #2
 800edc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800edc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800edca:	f04f 0e00 	mov.w	lr, #0
 800edce:	fbb8 f9f3 	udiv	r9, r8, r3
 800edd2:	4676      	mov	r6, lr
 800edd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800edd8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eddc:	f1bc 0f09 	cmp.w	ip, #9
 800ede0:	d816      	bhi.n	800ee10 <_strtol_l.constprop.0+0xa4>
 800ede2:	4664      	mov	r4, ip
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	dd24      	ble.n	800ee32 <_strtol_l.constprop.0+0xc6>
 800ede8:	f1be 3fff 	cmp.w	lr, #4294967295
 800edec:	d008      	beq.n	800ee00 <_strtol_l.constprop.0+0x94>
 800edee:	45b1      	cmp	r9, r6
 800edf0:	d31c      	bcc.n	800ee2c <_strtol_l.constprop.0+0xc0>
 800edf2:	d101      	bne.n	800edf8 <_strtol_l.constprop.0+0x8c>
 800edf4:	45a2      	cmp	sl, r4
 800edf6:	db19      	blt.n	800ee2c <_strtol_l.constprop.0+0xc0>
 800edf8:	fb06 4603 	mla	r6, r6, r3, r4
 800edfc:	f04f 0e01 	mov.w	lr, #1
 800ee00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee04:	e7e8      	b.n	800edd8 <_strtol_l.constprop.0+0x6c>
 800ee06:	2c2b      	cmp	r4, #43	; 0x2b
 800ee08:	bf04      	itt	eq
 800ee0a:	782c      	ldrbeq	r4, [r5, #0]
 800ee0c:	1cb5      	addeq	r5, r6, #2
 800ee0e:	e7ca      	b.n	800eda6 <_strtol_l.constprop.0+0x3a>
 800ee10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ee14:	f1bc 0f19 	cmp.w	ip, #25
 800ee18:	d801      	bhi.n	800ee1e <_strtol_l.constprop.0+0xb2>
 800ee1a:	3c37      	subs	r4, #55	; 0x37
 800ee1c:	e7e2      	b.n	800ede4 <_strtol_l.constprop.0+0x78>
 800ee1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ee22:	f1bc 0f19 	cmp.w	ip, #25
 800ee26:	d804      	bhi.n	800ee32 <_strtol_l.constprop.0+0xc6>
 800ee28:	3c57      	subs	r4, #87	; 0x57
 800ee2a:	e7db      	b.n	800ede4 <_strtol_l.constprop.0+0x78>
 800ee2c:	f04f 3eff 	mov.w	lr, #4294967295
 800ee30:	e7e6      	b.n	800ee00 <_strtol_l.constprop.0+0x94>
 800ee32:	f1be 3fff 	cmp.w	lr, #4294967295
 800ee36:	d105      	bne.n	800ee44 <_strtol_l.constprop.0+0xd8>
 800ee38:	2322      	movs	r3, #34	; 0x22
 800ee3a:	6003      	str	r3, [r0, #0]
 800ee3c:	4646      	mov	r6, r8
 800ee3e:	b942      	cbnz	r2, 800ee52 <_strtol_l.constprop.0+0xe6>
 800ee40:	4630      	mov	r0, r6
 800ee42:	e79e      	b.n	800ed82 <_strtol_l.constprop.0+0x16>
 800ee44:	b107      	cbz	r7, 800ee48 <_strtol_l.constprop.0+0xdc>
 800ee46:	4276      	negs	r6, r6
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	d0f9      	beq.n	800ee40 <_strtol_l.constprop.0+0xd4>
 800ee4c:	f1be 0f00 	cmp.w	lr, #0
 800ee50:	d000      	beq.n	800ee54 <_strtol_l.constprop.0+0xe8>
 800ee52:	1e69      	subs	r1, r5, #1
 800ee54:	6011      	str	r1, [r2, #0]
 800ee56:	e7f3      	b.n	800ee40 <_strtol_l.constprop.0+0xd4>
 800ee58:	2430      	movs	r4, #48	; 0x30
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1b1      	bne.n	800edc2 <_strtol_l.constprop.0+0x56>
 800ee5e:	2308      	movs	r3, #8
 800ee60:	e7af      	b.n	800edc2 <_strtol_l.constprop.0+0x56>
 800ee62:	2c30      	cmp	r4, #48	; 0x30
 800ee64:	d0a5      	beq.n	800edb2 <_strtol_l.constprop.0+0x46>
 800ee66:	230a      	movs	r3, #10
 800ee68:	e7ab      	b.n	800edc2 <_strtol_l.constprop.0+0x56>
 800ee6a:	bf00      	nop
 800ee6c:	08010bea 	.word	0x08010bea

0800ee70 <strtol>:
 800ee70:	4613      	mov	r3, r2
 800ee72:	460a      	mov	r2, r1
 800ee74:	4601      	mov	r1, r0
 800ee76:	4802      	ldr	r0, [pc, #8]	; (800ee80 <strtol+0x10>)
 800ee78:	6800      	ldr	r0, [r0, #0]
 800ee7a:	f7ff bf77 	b.w	800ed6c <_strtol_l.constprop.0>
 800ee7e:	bf00      	nop
 800ee80:	20000174 	.word	0x20000174

0800ee84 <__utoa>:
 800ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee86:	4c1f      	ldr	r4, [pc, #124]	; (800ef04 <__utoa+0x80>)
 800ee88:	b08b      	sub	sp, #44	; 0x2c
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	466e      	mov	r6, sp
 800ee90:	f104 0c20 	add.w	ip, r4, #32
 800ee94:	6820      	ldr	r0, [r4, #0]
 800ee96:	6861      	ldr	r1, [r4, #4]
 800ee98:	4637      	mov	r7, r6
 800ee9a:	c703      	stmia	r7!, {r0, r1}
 800ee9c:	3408      	adds	r4, #8
 800ee9e:	4564      	cmp	r4, ip
 800eea0:	463e      	mov	r6, r7
 800eea2:	d1f7      	bne.n	800ee94 <__utoa+0x10>
 800eea4:	7921      	ldrb	r1, [r4, #4]
 800eea6:	7139      	strb	r1, [r7, #4]
 800eea8:	1e91      	subs	r1, r2, #2
 800eeaa:	6820      	ldr	r0, [r4, #0]
 800eeac:	6038      	str	r0, [r7, #0]
 800eeae:	2922      	cmp	r1, #34	; 0x22
 800eeb0:	f04f 0100 	mov.w	r1, #0
 800eeb4:	d904      	bls.n	800eec0 <__utoa+0x3c>
 800eeb6:	7019      	strb	r1, [r3, #0]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4618      	mov	r0, r3
 800eebc:	b00b      	add	sp, #44	; 0x2c
 800eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec0:	1e58      	subs	r0, r3, #1
 800eec2:	4684      	mov	ip, r0
 800eec4:	fbb5 f7f2 	udiv	r7, r5, r2
 800eec8:	fb02 5617 	mls	r6, r2, r7, r5
 800eecc:	3628      	adds	r6, #40	; 0x28
 800eece:	446e      	add	r6, sp
 800eed0:	460c      	mov	r4, r1
 800eed2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800eed6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800eeda:	462e      	mov	r6, r5
 800eedc:	42b2      	cmp	r2, r6
 800eede:	f101 0101 	add.w	r1, r1, #1
 800eee2:	463d      	mov	r5, r7
 800eee4:	d9ee      	bls.n	800eec4 <__utoa+0x40>
 800eee6:	2200      	movs	r2, #0
 800eee8:	545a      	strb	r2, [r3, r1]
 800eeea:	1919      	adds	r1, r3, r4
 800eeec:	1aa5      	subs	r5, r4, r2
 800eeee:	42aa      	cmp	r2, r5
 800eef0:	dae3      	bge.n	800eeba <__utoa+0x36>
 800eef2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800eef6:	780e      	ldrb	r6, [r1, #0]
 800eef8:	7006      	strb	r6, [r0, #0]
 800eefa:	3201      	adds	r2, #1
 800eefc:	f801 5901 	strb.w	r5, [r1], #-1
 800ef00:	e7f4      	b.n	800eeec <__utoa+0x68>
 800ef02:	bf00      	nop
 800ef04:	08010bc4 	.word	0x08010bc4

0800ef08 <std>:
 800ef08:	2300      	movs	r3, #0
 800ef0a:	b510      	push	{r4, lr}
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ef12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef16:	6083      	str	r3, [r0, #8]
 800ef18:	8181      	strh	r1, [r0, #12]
 800ef1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ef1c:	81c2      	strh	r2, [r0, #14]
 800ef1e:	6183      	str	r3, [r0, #24]
 800ef20:	4619      	mov	r1, r3
 800ef22:	2208      	movs	r2, #8
 800ef24:	305c      	adds	r0, #92	; 0x5c
 800ef26:	f000 f902 	bl	800f12e <memset>
 800ef2a:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <std+0x38>)
 800ef2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ef2e:	4b05      	ldr	r3, [pc, #20]	; (800ef44 <std+0x3c>)
 800ef30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef32:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <std+0x40>)
 800ef34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef36:	4b05      	ldr	r3, [pc, #20]	; (800ef4c <std+0x44>)
 800ef38:	6224      	str	r4, [r4, #32]
 800ef3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop
 800ef40:	0800f0a9 	.word	0x0800f0a9
 800ef44:	0800f0cb 	.word	0x0800f0cb
 800ef48:	0800f103 	.word	0x0800f103
 800ef4c:	0800f127 	.word	0x0800f127

0800ef50 <stdio_exit_handler>:
 800ef50:	4a02      	ldr	r2, [pc, #8]	; (800ef5c <stdio_exit_handler+0xc>)
 800ef52:	4903      	ldr	r1, [pc, #12]	; (800ef60 <stdio_exit_handler+0x10>)
 800ef54:	4803      	ldr	r0, [pc, #12]	; (800ef64 <stdio_exit_handler+0x14>)
 800ef56:	f000 b869 	b.w	800f02c <_fwalk_sglue>
 800ef5a:	bf00      	nop
 800ef5c:	2000011c 	.word	0x2000011c
 800ef60:	0800fc29 	.word	0x0800fc29
 800ef64:	20000128 	.word	0x20000128

0800ef68 <cleanup_stdio>:
 800ef68:	6841      	ldr	r1, [r0, #4]
 800ef6a:	4b0c      	ldr	r3, [pc, #48]	; (800ef9c <cleanup_stdio+0x34>)
 800ef6c:	4299      	cmp	r1, r3
 800ef6e:	b510      	push	{r4, lr}
 800ef70:	4604      	mov	r4, r0
 800ef72:	d001      	beq.n	800ef78 <cleanup_stdio+0x10>
 800ef74:	f000 fe58 	bl	800fc28 <_fflush_r>
 800ef78:	68a1      	ldr	r1, [r4, #8]
 800ef7a:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <cleanup_stdio+0x38>)
 800ef7c:	4299      	cmp	r1, r3
 800ef7e:	d002      	beq.n	800ef86 <cleanup_stdio+0x1e>
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 fe51 	bl	800fc28 <_fflush_r>
 800ef86:	68e1      	ldr	r1, [r4, #12]
 800ef88:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <cleanup_stdio+0x3c>)
 800ef8a:	4299      	cmp	r1, r3
 800ef8c:	d004      	beq.n	800ef98 <cleanup_stdio+0x30>
 800ef8e:	4620      	mov	r0, r4
 800ef90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef94:	f000 be48 	b.w	800fc28 <_fflush_r>
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20003e58 	.word	0x20003e58
 800efa0:	20003ec0 	.word	0x20003ec0
 800efa4:	20003f28 	.word	0x20003f28

0800efa8 <global_stdio_init.part.0>:
 800efa8:	b510      	push	{r4, lr}
 800efaa:	4b0b      	ldr	r3, [pc, #44]	; (800efd8 <global_stdio_init.part.0+0x30>)
 800efac:	4c0b      	ldr	r4, [pc, #44]	; (800efdc <global_stdio_init.part.0+0x34>)
 800efae:	4a0c      	ldr	r2, [pc, #48]	; (800efe0 <global_stdio_init.part.0+0x38>)
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	4620      	mov	r0, r4
 800efb4:	2200      	movs	r2, #0
 800efb6:	2104      	movs	r1, #4
 800efb8:	f7ff ffa6 	bl	800ef08 <std>
 800efbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800efc0:	2201      	movs	r2, #1
 800efc2:	2109      	movs	r1, #9
 800efc4:	f7ff ffa0 	bl	800ef08 <std>
 800efc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800efcc:	2202      	movs	r2, #2
 800efce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efd2:	2112      	movs	r1, #18
 800efd4:	f7ff bf98 	b.w	800ef08 <std>
 800efd8:	20003f90 	.word	0x20003f90
 800efdc:	20003e58 	.word	0x20003e58
 800efe0:	0800ef51 	.word	0x0800ef51

0800efe4 <__sfp_lock_acquire>:
 800efe4:	4801      	ldr	r0, [pc, #4]	; (800efec <__sfp_lock_acquire+0x8>)
 800efe6:	f000 b989 	b.w	800f2fc <__retarget_lock_acquire_recursive>
 800efea:	bf00      	nop
 800efec:	20003f99 	.word	0x20003f99

0800eff0 <__sfp_lock_release>:
 800eff0:	4801      	ldr	r0, [pc, #4]	; (800eff8 <__sfp_lock_release+0x8>)
 800eff2:	f000 b984 	b.w	800f2fe <__retarget_lock_release_recursive>
 800eff6:	bf00      	nop
 800eff8:	20003f99 	.word	0x20003f99

0800effc <__sinit>:
 800effc:	b510      	push	{r4, lr}
 800effe:	4604      	mov	r4, r0
 800f000:	f7ff fff0 	bl	800efe4 <__sfp_lock_acquire>
 800f004:	6a23      	ldr	r3, [r4, #32]
 800f006:	b11b      	cbz	r3, 800f010 <__sinit+0x14>
 800f008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f00c:	f7ff bff0 	b.w	800eff0 <__sfp_lock_release>
 800f010:	4b04      	ldr	r3, [pc, #16]	; (800f024 <__sinit+0x28>)
 800f012:	6223      	str	r3, [r4, #32]
 800f014:	4b04      	ldr	r3, [pc, #16]	; (800f028 <__sinit+0x2c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f5      	bne.n	800f008 <__sinit+0xc>
 800f01c:	f7ff ffc4 	bl	800efa8 <global_stdio_init.part.0>
 800f020:	e7f2      	b.n	800f008 <__sinit+0xc>
 800f022:	bf00      	nop
 800f024:	0800ef69 	.word	0x0800ef69
 800f028:	20003f90 	.word	0x20003f90

0800f02c <_fwalk_sglue>:
 800f02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f030:	4607      	mov	r7, r0
 800f032:	4688      	mov	r8, r1
 800f034:	4614      	mov	r4, r2
 800f036:	2600      	movs	r6, #0
 800f038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f03c:	f1b9 0901 	subs.w	r9, r9, #1
 800f040:	d505      	bpl.n	800f04e <_fwalk_sglue+0x22>
 800f042:	6824      	ldr	r4, [r4, #0]
 800f044:	2c00      	cmp	r4, #0
 800f046:	d1f7      	bne.n	800f038 <_fwalk_sglue+0xc>
 800f048:	4630      	mov	r0, r6
 800f04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f04e:	89ab      	ldrh	r3, [r5, #12]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d907      	bls.n	800f064 <_fwalk_sglue+0x38>
 800f054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f058:	3301      	adds	r3, #1
 800f05a:	d003      	beq.n	800f064 <_fwalk_sglue+0x38>
 800f05c:	4629      	mov	r1, r5
 800f05e:	4638      	mov	r0, r7
 800f060:	47c0      	blx	r8
 800f062:	4306      	orrs	r6, r0
 800f064:	3568      	adds	r5, #104	; 0x68
 800f066:	e7e9      	b.n	800f03c <_fwalk_sglue+0x10>

0800f068 <siprintf>:
 800f068:	b40e      	push	{r1, r2, r3}
 800f06a:	b500      	push	{lr}
 800f06c:	b09c      	sub	sp, #112	; 0x70
 800f06e:	ab1d      	add	r3, sp, #116	; 0x74
 800f070:	9002      	str	r0, [sp, #8]
 800f072:	9006      	str	r0, [sp, #24]
 800f074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f078:	4809      	ldr	r0, [pc, #36]	; (800f0a0 <siprintf+0x38>)
 800f07a:	9107      	str	r1, [sp, #28]
 800f07c:	9104      	str	r1, [sp, #16]
 800f07e:	4909      	ldr	r1, [pc, #36]	; (800f0a4 <siprintf+0x3c>)
 800f080:	f853 2b04 	ldr.w	r2, [r3], #4
 800f084:	9105      	str	r1, [sp, #20]
 800f086:	6800      	ldr	r0, [r0, #0]
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	a902      	add	r1, sp, #8
 800f08c:	f000 fab8 	bl	800f600 <_svfiprintf_r>
 800f090:	9b02      	ldr	r3, [sp, #8]
 800f092:	2200      	movs	r2, #0
 800f094:	701a      	strb	r2, [r3, #0]
 800f096:	b01c      	add	sp, #112	; 0x70
 800f098:	f85d eb04 	ldr.w	lr, [sp], #4
 800f09c:	b003      	add	sp, #12
 800f09e:	4770      	bx	lr
 800f0a0:	20000174 	.word	0x20000174
 800f0a4:	ffff0208 	.word	0xffff0208

0800f0a8 <__sread>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	f000 f8d6 	bl	800f260 <_read_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	bfab      	itete	ge
 800f0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f0bc:	181b      	addge	r3, r3, r0
 800f0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0c2:	bfac      	ite	ge
 800f0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0c6:	81a3      	strhlt	r3, [r4, #12]
 800f0c8:	bd10      	pop	{r4, pc}

0800f0ca <__swrite>:
 800f0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ce:	461f      	mov	r7, r3
 800f0d0:	898b      	ldrh	r3, [r1, #12]
 800f0d2:	05db      	lsls	r3, r3, #23
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	4616      	mov	r6, r2
 800f0da:	d505      	bpl.n	800f0e8 <__swrite+0x1e>
 800f0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f000 f8aa 	bl	800f23c <_lseek_r>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	4632      	mov	r2, r6
 800f0f6:	463b      	mov	r3, r7
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fe:	f000 b8c1 	b.w	800f284 <_write_r>

0800f102 <__sseek>:
 800f102:	b510      	push	{r4, lr}
 800f104:	460c      	mov	r4, r1
 800f106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f10a:	f000 f897 	bl	800f23c <_lseek_r>
 800f10e:	1c43      	adds	r3, r0, #1
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	bf15      	itete	ne
 800f114:	6560      	strne	r0, [r4, #84]	; 0x54
 800f116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f11e:	81a3      	strheq	r3, [r4, #12]
 800f120:	bf18      	it	ne
 800f122:	81a3      	strhne	r3, [r4, #12]
 800f124:	bd10      	pop	{r4, pc}

0800f126 <__sclose>:
 800f126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f12a:	f000 b877 	b.w	800f21c <_close_r>

0800f12e <memset>:
 800f12e:	4402      	add	r2, r0
 800f130:	4603      	mov	r3, r0
 800f132:	4293      	cmp	r3, r2
 800f134:	d100      	bne.n	800f138 <memset+0xa>
 800f136:	4770      	bx	lr
 800f138:	f803 1b01 	strb.w	r1, [r3], #1
 800f13c:	e7f9      	b.n	800f132 <memset+0x4>

0800f13e <strncat>:
 800f13e:	b530      	push	{r4, r5, lr}
 800f140:	4604      	mov	r4, r0
 800f142:	7825      	ldrb	r5, [r4, #0]
 800f144:	4623      	mov	r3, r4
 800f146:	3401      	adds	r4, #1
 800f148:	2d00      	cmp	r5, #0
 800f14a:	d1fa      	bne.n	800f142 <strncat+0x4>
 800f14c:	3a01      	subs	r2, #1
 800f14e:	d304      	bcc.n	800f15a <strncat+0x1c>
 800f150:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f154:	f803 4b01 	strb.w	r4, [r3], #1
 800f158:	b904      	cbnz	r4, 800f15c <strncat+0x1e>
 800f15a:	bd30      	pop	{r4, r5, pc}
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d1f5      	bne.n	800f14c <strncat+0xe>
 800f160:	701a      	strb	r2, [r3, #0]
 800f162:	e7f3      	b.n	800f14c <strncat+0xe>

0800f164 <strtok>:
 800f164:	4b16      	ldr	r3, [pc, #88]	; (800f1c0 <strtok+0x5c>)
 800f166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f168:	681e      	ldr	r6, [r3, #0]
 800f16a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f16c:	4605      	mov	r5, r0
 800f16e:	b9fc      	cbnz	r4, 800f1b0 <strtok+0x4c>
 800f170:	2050      	movs	r0, #80	; 0x50
 800f172:	9101      	str	r1, [sp, #4]
 800f174:	f000 f936 	bl	800f3e4 <malloc>
 800f178:	9901      	ldr	r1, [sp, #4]
 800f17a:	6470      	str	r0, [r6, #68]	; 0x44
 800f17c:	4602      	mov	r2, r0
 800f17e:	b920      	cbnz	r0, 800f18a <strtok+0x26>
 800f180:	4b10      	ldr	r3, [pc, #64]	; (800f1c4 <strtok+0x60>)
 800f182:	4811      	ldr	r0, [pc, #68]	; (800f1c8 <strtok+0x64>)
 800f184:	215b      	movs	r1, #91	; 0x5b
 800f186:	f000 f8c3 	bl	800f310 <__assert_func>
 800f18a:	e9c0 4400 	strd	r4, r4, [r0]
 800f18e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f192:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f196:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f19a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f19e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f1a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f1a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f1aa:	6184      	str	r4, [r0, #24]
 800f1ac:	7704      	strb	r4, [r0, #28]
 800f1ae:	6244      	str	r4, [r0, #36]	; 0x24
 800f1b0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	b002      	add	sp, #8
 800f1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1bc:	f000 b806 	b.w	800f1cc <__strtok_r>
 800f1c0:	20000174 	.word	0x20000174
 800f1c4:	08010cea 	.word	0x08010cea
 800f1c8:	08010d01 	.word	0x08010d01

0800f1cc <__strtok_r>:
 800f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ce:	b908      	cbnz	r0, 800f1d4 <__strtok_r+0x8>
 800f1d0:	6810      	ldr	r0, [r2, #0]
 800f1d2:	b188      	cbz	r0, 800f1f8 <__strtok_r+0x2c>
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f1dc:	460f      	mov	r7, r1
 800f1de:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f1e2:	b91e      	cbnz	r6, 800f1ec <__strtok_r+0x20>
 800f1e4:	b965      	cbnz	r5, 800f200 <__strtok_r+0x34>
 800f1e6:	6015      	str	r5, [r2, #0]
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	e005      	b.n	800f1f8 <__strtok_r+0x2c>
 800f1ec:	42b5      	cmp	r5, r6
 800f1ee:	d1f6      	bne.n	800f1de <__strtok_r+0x12>
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1f0      	bne.n	800f1d6 <__strtok_r+0xa>
 800f1f4:	6014      	str	r4, [r2, #0]
 800f1f6:	7003      	strb	r3, [r0, #0]
 800f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1fa:	461c      	mov	r4, r3
 800f1fc:	e00c      	b.n	800f218 <__strtok_r+0x4c>
 800f1fe:	b915      	cbnz	r5, 800f206 <__strtok_r+0x3a>
 800f200:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f204:	460e      	mov	r6, r1
 800f206:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f20a:	42ab      	cmp	r3, r5
 800f20c:	d1f7      	bne.n	800f1fe <__strtok_r+0x32>
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d0f3      	beq.n	800f1fa <__strtok_r+0x2e>
 800f212:	2300      	movs	r3, #0
 800f214:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f218:	6014      	str	r4, [r2, #0]
 800f21a:	e7ed      	b.n	800f1f8 <__strtok_r+0x2c>

0800f21c <_close_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4d06      	ldr	r5, [pc, #24]	; (800f238 <_close_r+0x1c>)
 800f220:	2300      	movs	r3, #0
 800f222:	4604      	mov	r4, r0
 800f224:	4608      	mov	r0, r1
 800f226:	602b      	str	r3, [r5, #0]
 800f228:	f7f3 fbfb 	bl	8002a22 <_close>
 800f22c:	1c43      	adds	r3, r0, #1
 800f22e:	d102      	bne.n	800f236 <_close_r+0x1a>
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	b103      	cbz	r3, 800f236 <_close_r+0x1a>
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	bd38      	pop	{r3, r4, r5, pc}
 800f238:	20003f94 	.word	0x20003f94

0800f23c <_lseek_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	4d07      	ldr	r5, [pc, #28]	; (800f25c <_lseek_r+0x20>)
 800f240:	4604      	mov	r4, r0
 800f242:	4608      	mov	r0, r1
 800f244:	4611      	mov	r1, r2
 800f246:	2200      	movs	r2, #0
 800f248:	602a      	str	r2, [r5, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	f7f3 fc10 	bl	8002a70 <_lseek>
 800f250:	1c43      	adds	r3, r0, #1
 800f252:	d102      	bne.n	800f25a <_lseek_r+0x1e>
 800f254:	682b      	ldr	r3, [r5, #0]
 800f256:	b103      	cbz	r3, 800f25a <_lseek_r+0x1e>
 800f258:	6023      	str	r3, [r4, #0]
 800f25a:	bd38      	pop	{r3, r4, r5, pc}
 800f25c:	20003f94 	.word	0x20003f94

0800f260 <_read_r>:
 800f260:	b538      	push	{r3, r4, r5, lr}
 800f262:	4d07      	ldr	r5, [pc, #28]	; (800f280 <_read_r+0x20>)
 800f264:	4604      	mov	r4, r0
 800f266:	4608      	mov	r0, r1
 800f268:	4611      	mov	r1, r2
 800f26a:	2200      	movs	r2, #0
 800f26c:	602a      	str	r2, [r5, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	f7f3 fb9e 	bl	80029b0 <_read>
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	d102      	bne.n	800f27e <_read_r+0x1e>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	b103      	cbz	r3, 800f27e <_read_r+0x1e>
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	bd38      	pop	{r3, r4, r5, pc}
 800f280:	20003f94 	.word	0x20003f94

0800f284 <_write_r>:
 800f284:	b538      	push	{r3, r4, r5, lr}
 800f286:	4d07      	ldr	r5, [pc, #28]	; (800f2a4 <_write_r+0x20>)
 800f288:	4604      	mov	r4, r0
 800f28a:	4608      	mov	r0, r1
 800f28c:	4611      	mov	r1, r2
 800f28e:	2200      	movs	r2, #0
 800f290:	602a      	str	r2, [r5, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	f7f3 fba9 	bl	80029ea <_write>
 800f298:	1c43      	adds	r3, r0, #1
 800f29a:	d102      	bne.n	800f2a2 <_write_r+0x1e>
 800f29c:	682b      	ldr	r3, [r5, #0]
 800f29e:	b103      	cbz	r3, 800f2a2 <_write_r+0x1e>
 800f2a0:	6023      	str	r3, [r4, #0]
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	20003f94 	.word	0x20003f94

0800f2a8 <__errno>:
 800f2a8:	4b01      	ldr	r3, [pc, #4]	; (800f2b0 <__errno+0x8>)
 800f2aa:	6818      	ldr	r0, [r3, #0]
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	20000174 	.word	0x20000174

0800f2b4 <__libc_init_array>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	4d0d      	ldr	r5, [pc, #52]	; (800f2ec <__libc_init_array+0x38>)
 800f2b8:	4c0d      	ldr	r4, [pc, #52]	; (800f2f0 <__libc_init_array+0x3c>)
 800f2ba:	1b64      	subs	r4, r4, r5
 800f2bc:	10a4      	asrs	r4, r4, #2
 800f2be:	2600      	movs	r6, #0
 800f2c0:	42a6      	cmp	r6, r4
 800f2c2:	d109      	bne.n	800f2d8 <__libc_init_array+0x24>
 800f2c4:	4d0b      	ldr	r5, [pc, #44]	; (800f2f4 <__libc_init_array+0x40>)
 800f2c6:	4c0c      	ldr	r4, [pc, #48]	; (800f2f8 <__libc_init_array+0x44>)
 800f2c8:	f001 f800 	bl	80102cc <_init>
 800f2cc:	1b64      	subs	r4, r4, r5
 800f2ce:	10a4      	asrs	r4, r4, #2
 800f2d0:	2600      	movs	r6, #0
 800f2d2:	42a6      	cmp	r6, r4
 800f2d4:	d105      	bne.n	800f2e2 <__libc_init_array+0x2e>
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}
 800f2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2dc:	4798      	blx	r3
 800f2de:	3601      	adds	r6, #1
 800f2e0:	e7ee      	b.n	800f2c0 <__libc_init_array+0xc>
 800f2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2e6:	4798      	blx	r3
 800f2e8:	3601      	adds	r6, #1
 800f2ea:	e7f2      	b.n	800f2d2 <__libc_init_array+0x1e>
 800f2ec:	08010dd4 	.word	0x08010dd4
 800f2f0:	08010dd4 	.word	0x08010dd4
 800f2f4:	08010dd4 	.word	0x08010dd4
 800f2f8:	08010dd8 	.word	0x08010dd8

0800f2fc <__retarget_lock_acquire_recursive>:
 800f2fc:	4770      	bx	lr

0800f2fe <__retarget_lock_release_recursive>:
 800f2fe:	4770      	bx	lr

0800f300 <strcpy>:
 800f300:	4603      	mov	r3, r0
 800f302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f306:	f803 2b01 	strb.w	r2, [r3], #1
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	d1f9      	bne.n	800f302 <strcpy+0x2>
 800f30e:	4770      	bx	lr

0800f310 <__assert_func>:
 800f310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f312:	4614      	mov	r4, r2
 800f314:	461a      	mov	r2, r3
 800f316:	4b09      	ldr	r3, [pc, #36]	; (800f33c <__assert_func+0x2c>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4605      	mov	r5, r0
 800f31c:	68d8      	ldr	r0, [r3, #12]
 800f31e:	b14c      	cbz	r4, 800f334 <__assert_func+0x24>
 800f320:	4b07      	ldr	r3, [pc, #28]	; (800f340 <__assert_func+0x30>)
 800f322:	9100      	str	r1, [sp, #0]
 800f324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f328:	4906      	ldr	r1, [pc, #24]	; (800f344 <__assert_func+0x34>)
 800f32a:	462b      	mov	r3, r5
 800f32c:	f000 fca4 	bl	800fc78 <fiprintf>
 800f330:	f000 fcec 	bl	800fd0c <abort>
 800f334:	4b04      	ldr	r3, [pc, #16]	; (800f348 <__assert_func+0x38>)
 800f336:	461c      	mov	r4, r3
 800f338:	e7f3      	b.n	800f322 <__assert_func+0x12>
 800f33a:	bf00      	nop
 800f33c:	20000174 	.word	0x20000174
 800f340:	08010d5b 	.word	0x08010d5b
 800f344:	08010d68 	.word	0x08010d68
 800f348:	08010d96 	.word	0x08010d96

0800f34c <_free_r>:
 800f34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f34e:	2900      	cmp	r1, #0
 800f350:	d044      	beq.n	800f3dc <_free_r+0x90>
 800f352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f356:	9001      	str	r0, [sp, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f1a1 0404 	sub.w	r4, r1, #4
 800f35e:	bfb8      	it	lt
 800f360:	18e4      	addlt	r4, r4, r3
 800f362:	f000 f8e7 	bl	800f534 <__malloc_lock>
 800f366:	4a1e      	ldr	r2, [pc, #120]	; (800f3e0 <_free_r+0x94>)
 800f368:	9801      	ldr	r0, [sp, #4]
 800f36a:	6813      	ldr	r3, [r2, #0]
 800f36c:	b933      	cbnz	r3, 800f37c <_free_r+0x30>
 800f36e:	6063      	str	r3, [r4, #4]
 800f370:	6014      	str	r4, [r2, #0]
 800f372:	b003      	add	sp, #12
 800f374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f378:	f000 b8e2 	b.w	800f540 <__malloc_unlock>
 800f37c:	42a3      	cmp	r3, r4
 800f37e:	d908      	bls.n	800f392 <_free_r+0x46>
 800f380:	6825      	ldr	r5, [r4, #0]
 800f382:	1961      	adds	r1, r4, r5
 800f384:	428b      	cmp	r3, r1
 800f386:	bf01      	itttt	eq
 800f388:	6819      	ldreq	r1, [r3, #0]
 800f38a:	685b      	ldreq	r3, [r3, #4]
 800f38c:	1949      	addeq	r1, r1, r5
 800f38e:	6021      	streq	r1, [r4, #0]
 800f390:	e7ed      	b.n	800f36e <_free_r+0x22>
 800f392:	461a      	mov	r2, r3
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	b10b      	cbz	r3, 800f39c <_free_r+0x50>
 800f398:	42a3      	cmp	r3, r4
 800f39a:	d9fa      	bls.n	800f392 <_free_r+0x46>
 800f39c:	6811      	ldr	r1, [r2, #0]
 800f39e:	1855      	adds	r5, r2, r1
 800f3a0:	42a5      	cmp	r5, r4
 800f3a2:	d10b      	bne.n	800f3bc <_free_r+0x70>
 800f3a4:	6824      	ldr	r4, [r4, #0]
 800f3a6:	4421      	add	r1, r4
 800f3a8:	1854      	adds	r4, r2, r1
 800f3aa:	42a3      	cmp	r3, r4
 800f3ac:	6011      	str	r1, [r2, #0]
 800f3ae:	d1e0      	bne.n	800f372 <_free_r+0x26>
 800f3b0:	681c      	ldr	r4, [r3, #0]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	6053      	str	r3, [r2, #4]
 800f3b6:	440c      	add	r4, r1
 800f3b8:	6014      	str	r4, [r2, #0]
 800f3ba:	e7da      	b.n	800f372 <_free_r+0x26>
 800f3bc:	d902      	bls.n	800f3c4 <_free_r+0x78>
 800f3be:	230c      	movs	r3, #12
 800f3c0:	6003      	str	r3, [r0, #0]
 800f3c2:	e7d6      	b.n	800f372 <_free_r+0x26>
 800f3c4:	6825      	ldr	r5, [r4, #0]
 800f3c6:	1961      	adds	r1, r4, r5
 800f3c8:	428b      	cmp	r3, r1
 800f3ca:	bf04      	itt	eq
 800f3cc:	6819      	ldreq	r1, [r3, #0]
 800f3ce:	685b      	ldreq	r3, [r3, #4]
 800f3d0:	6063      	str	r3, [r4, #4]
 800f3d2:	bf04      	itt	eq
 800f3d4:	1949      	addeq	r1, r1, r5
 800f3d6:	6021      	streq	r1, [r4, #0]
 800f3d8:	6054      	str	r4, [r2, #4]
 800f3da:	e7ca      	b.n	800f372 <_free_r+0x26>
 800f3dc:	b003      	add	sp, #12
 800f3de:	bd30      	pop	{r4, r5, pc}
 800f3e0:	20003f9c 	.word	0x20003f9c

0800f3e4 <malloc>:
 800f3e4:	4b02      	ldr	r3, [pc, #8]	; (800f3f0 <malloc+0xc>)
 800f3e6:	4601      	mov	r1, r0
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	f000 b823 	b.w	800f434 <_malloc_r>
 800f3ee:	bf00      	nop
 800f3f0:	20000174 	.word	0x20000174

0800f3f4 <sbrk_aligned>:
 800f3f4:	b570      	push	{r4, r5, r6, lr}
 800f3f6:	4e0e      	ldr	r6, [pc, #56]	; (800f430 <sbrk_aligned+0x3c>)
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	6831      	ldr	r1, [r6, #0]
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	b911      	cbnz	r1, 800f406 <sbrk_aligned+0x12>
 800f400:	f000 fc66 	bl	800fcd0 <_sbrk_r>
 800f404:	6030      	str	r0, [r6, #0]
 800f406:	4621      	mov	r1, r4
 800f408:	4628      	mov	r0, r5
 800f40a:	f000 fc61 	bl	800fcd0 <_sbrk_r>
 800f40e:	1c43      	adds	r3, r0, #1
 800f410:	d00a      	beq.n	800f428 <sbrk_aligned+0x34>
 800f412:	1cc4      	adds	r4, r0, #3
 800f414:	f024 0403 	bic.w	r4, r4, #3
 800f418:	42a0      	cmp	r0, r4
 800f41a:	d007      	beq.n	800f42c <sbrk_aligned+0x38>
 800f41c:	1a21      	subs	r1, r4, r0
 800f41e:	4628      	mov	r0, r5
 800f420:	f000 fc56 	bl	800fcd0 <_sbrk_r>
 800f424:	3001      	adds	r0, #1
 800f426:	d101      	bne.n	800f42c <sbrk_aligned+0x38>
 800f428:	f04f 34ff 	mov.w	r4, #4294967295
 800f42c:	4620      	mov	r0, r4
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	20003fa0 	.word	0x20003fa0

0800f434 <_malloc_r>:
 800f434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f438:	1ccd      	adds	r5, r1, #3
 800f43a:	f025 0503 	bic.w	r5, r5, #3
 800f43e:	3508      	adds	r5, #8
 800f440:	2d0c      	cmp	r5, #12
 800f442:	bf38      	it	cc
 800f444:	250c      	movcc	r5, #12
 800f446:	2d00      	cmp	r5, #0
 800f448:	4607      	mov	r7, r0
 800f44a:	db01      	blt.n	800f450 <_malloc_r+0x1c>
 800f44c:	42a9      	cmp	r1, r5
 800f44e:	d905      	bls.n	800f45c <_malloc_r+0x28>
 800f450:	230c      	movs	r3, #12
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	2600      	movs	r6, #0
 800f456:	4630      	mov	r0, r6
 800f458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f530 <_malloc_r+0xfc>
 800f460:	f000 f868 	bl	800f534 <__malloc_lock>
 800f464:	f8d8 3000 	ldr.w	r3, [r8]
 800f468:	461c      	mov	r4, r3
 800f46a:	bb5c      	cbnz	r4, 800f4c4 <_malloc_r+0x90>
 800f46c:	4629      	mov	r1, r5
 800f46e:	4638      	mov	r0, r7
 800f470:	f7ff ffc0 	bl	800f3f4 <sbrk_aligned>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	4604      	mov	r4, r0
 800f478:	d155      	bne.n	800f526 <_malloc_r+0xf2>
 800f47a:	f8d8 4000 	ldr.w	r4, [r8]
 800f47e:	4626      	mov	r6, r4
 800f480:	2e00      	cmp	r6, #0
 800f482:	d145      	bne.n	800f510 <_malloc_r+0xdc>
 800f484:	2c00      	cmp	r4, #0
 800f486:	d048      	beq.n	800f51a <_malloc_r+0xe6>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	4631      	mov	r1, r6
 800f48c:	4638      	mov	r0, r7
 800f48e:	eb04 0903 	add.w	r9, r4, r3
 800f492:	f000 fc1d 	bl	800fcd0 <_sbrk_r>
 800f496:	4581      	cmp	r9, r0
 800f498:	d13f      	bne.n	800f51a <_malloc_r+0xe6>
 800f49a:	6821      	ldr	r1, [r4, #0]
 800f49c:	1a6d      	subs	r5, r5, r1
 800f49e:	4629      	mov	r1, r5
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7ff ffa7 	bl	800f3f4 <sbrk_aligned>
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d037      	beq.n	800f51a <_malloc_r+0xe6>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	442b      	add	r3, r5
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d038      	beq.n	800f52a <_malloc_r+0xf6>
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	42a2      	cmp	r2, r4
 800f4bc:	d12b      	bne.n	800f516 <_malloc_r+0xe2>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	605a      	str	r2, [r3, #4]
 800f4c2:	e00f      	b.n	800f4e4 <_malloc_r+0xb0>
 800f4c4:	6822      	ldr	r2, [r4, #0]
 800f4c6:	1b52      	subs	r2, r2, r5
 800f4c8:	d41f      	bmi.n	800f50a <_malloc_r+0xd6>
 800f4ca:	2a0b      	cmp	r2, #11
 800f4cc:	d917      	bls.n	800f4fe <_malloc_r+0xca>
 800f4ce:	1961      	adds	r1, r4, r5
 800f4d0:	42a3      	cmp	r3, r4
 800f4d2:	6025      	str	r5, [r4, #0]
 800f4d4:	bf18      	it	ne
 800f4d6:	6059      	strne	r1, [r3, #4]
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	bf08      	it	eq
 800f4dc:	f8c8 1000 	streq.w	r1, [r8]
 800f4e0:	5162      	str	r2, [r4, r5]
 800f4e2:	604b      	str	r3, [r1, #4]
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f104 060b 	add.w	r6, r4, #11
 800f4ea:	f000 f829 	bl	800f540 <__malloc_unlock>
 800f4ee:	f026 0607 	bic.w	r6, r6, #7
 800f4f2:	1d23      	adds	r3, r4, #4
 800f4f4:	1af2      	subs	r2, r6, r3
 800f4f6:	d0ae      	beq.n	800f456 <_malloc_r+0x22>
 800f4f8:	1b9b      	subs	r3, r3, r6
 800f4fa:	50a3      	str	r3, [r4, r2]
 800f4fc:	e7ab      	b.n	800f456 <_malloc_r+0x22>
 800f4fe:	42a3      	cmp	r3, r4
 800f500:	6862      	ldr	r2, [r4, #4]
 800f502:	d1dd      	bne.n	800f4c0 <_malloc_r+0x8c>
 800f504:	f8c8 2000 	str.w	r2, [r8]
 800f508:	e7ec      	b.n	800f4e4 <_malloc_r+0xb0>
 800f50a:	4623      	mov	r3, r4
 800f50c:	6864      	ldr	r4, [r4, #4]
 800f50e:	e7ac      	b.n	800f46a <_malloc_r+0x36>
 800f510:	4634      	mov	r4, r6
 800f512:	6876      	ldr	r6, [r6, #4]
 800f514:	e7b4      	b.n	800f480 <_malloc_r+0x4c>
 800f516:	4613      	mov	r3, r2
 800f518:	e7cc      	b.n	800f4b4 <_malloc_r+0x80>
 800f51a:	230c      	movs	r3, #12
 800f51c:	603b      	str	r3, [r7, #0]
 800f51e:	4638      	mov	r0, r7
 800f520:	f000 f80e 	bl	800f540 <__malloc_unlock>
 800f524:	e797      	b.n	800f456 <_malloc_r+0x22>
 800f526:	6025      	str	r5, [r4, #0]
 800f528:	e7dc      	b.n	800f4e4 <_malloc_r+0xb0>
 800f52a:	605b      	str	r3, [r3, #4]
 800f52c:	deff      	udf	#255	; 0xff
 800f52e:	bf00      	nop
 800f530:	20003f9c 	.word	0x20003f9c

0800f534 <__malloc_lock>:
 800f534:	4801      	ldr	r0, [pc, #4]	; (800f53c <__malloc_lock+0x8>)
 800f536:	f7ff bee1 	b.w	800f2fc <__retarget_lock_acquire_recursive>
 800f53a:	bf00      	nop
 800f53c:	20003f98 	.word	0x20003f98

0800f540 <__malloc_unlock>:
 800f540:	4801      	ldr	r0, [pc, #4]	; (800f548 <__malloc_unlock+0x8>)
 800f542:	f7ff bedc 	b.w	800f2fe <__retarget_lock_release_recursive>
 800f546:	bf00      	nop
 800f548:	20003f98 	.word	0x20003f98

0800f54c <__ssputs_r>:
 800f54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f550:	688e      	ldr	r6, [r1, #8]
 800f552:	461f      	mov	r7, r3
 800f554:	42be      	cmp	r6, r7
 800f556:	680b      	ldr	r3, [r1, #0]
 800f558:	4682      	mov	sl, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	4690      	mov	r8, r2
 800f55e:	d82c      	bhi.n	800f5ba <__ssputs_r+0x6e>
 800f560:	898a      	ldrh	r2, [r1, #12]
 800f562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f566:	d026      	beq.n	800f5b6 <__ssputs_r+0x6a>
 800f568:	6965      	ldr	r5, [r4, #20]
 800f56a:	6909      	ldr	r1, [r1, #16]
 800f56c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f570:	eba3 0901 	sub.w	r9, r3, r1
 800f574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f578:	1c7b      	adds	r3, r7, #1
 800f57a:	444b      	add	r3, r9
 800f57c:	106d      	asrs	r5, r5, #1
 800f57e:	429d      	cmp	r5, r3
 800f580:	bf38      	it	cc
 800f582:	461d      	movcc	r5, r3
 800f584:	0553      	lsls	r3, r2, #21
 800f586:	d527      	bpl.n	800f5d8 <__ssputs_r+0x8c>
 800f588:	4629      	mov	r1, r5
 800f58a:	f7ff ff53 	bl	800f434 <_malloc_r>
 800f58e:	4606      	mov	r6, r0
 800f590:	b360      	cbz	r0, 800f5ec <__ssputs_r+0xa0>
 800f592:	6921      	ldr	r1, [r4, #16]
 800f594:	464a      	mov	r2, r9
 800f596:	f000 fbab 	bl	800fcf0 <memcpy>
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a4:	81a3      	strh	r3, [r4, #12]
 800f5a6:	6126      	str	r6, [r4, #16]
 800f5a8:	6165      	str	r5, [r4, #20]
 800f5aa:	444e      	add	r6, r9
 800f5ac:	eba5 0509 	sub.w	r5, r5, r9
 800f5b0:	6026      	str	r6, [r4, #0]
 800f5b2:	60a5      	str	r5, [r4, #8]
 800f5b4:	463e      	mov	r6, r7
 800f5b6:	42be      	cmp	r6, r7
 800f5b8:	d900      	bls.n	800f5bc <__ssputs_r+0x70>
 800f5ba:	463e      	mov	r6, r7
 800f5bc:	6820      	ldr	r0, [r4, #0]
 800f5be:	4632      	mov	r2, r6
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	f000 fb6b 	bl	800fc9c <memmove>
 800f5c6:	68a3      	ldr	r3, [r4, #8]
 800f5c8:	1b9b      	subs	r3, r3, r6
 800f5ca:	60a3      	str	r3, [r4, #8]
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	4433      	add	r3, r6
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d8:	462a      	mov	r2, r5
 800f5da:	f000 fb9e 	bl	800fd1a <_realloc_r>
 800f5de:	4606      	mov	r6, r0
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d1e0      	bne.n	800f5a6 <__ssputs_r+0x5a>
 800f5e4:	6921      	ldr	r1, [r4, #16]
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	f7ff feb0 	bl	800f34c <_free_r>
 800f5ec:	230c      	movs	r3, #12
 800f5ee:	f8ca 3000 	str.w	r3, [sl]
 800f5f2:	89a3      	ldrh	r3, [r4, #12]
 800f5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f8:	81a3      	strh	r3, [r4, #12]
 800f5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fe:	e7e9      	b.n	800f5d4 <__ssputs_r+0x88>

0800f600 <_svfiprintf_r>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	4698      	mov	r8, r3
 800f606:	898b      	ldrh	r3, [r1, #12]
 800f608:	061b      	lsls	r3, r3, #24
 800f60a:	b09d      	sub	sp, #116	; 0x74
 800f60c:	4607      	mov	r7, r0
 800f60e:	460d      	mov	r5, r1
 800f610:	4614      	mov	r4, r2
 800f612:	d50e      	bpl.n	800f632 <_svfiprintf_r+0x32>
 800f614:	690b      	ldr	r3, [r1, #16]
 800f616:	b963      	cbnz	r3, 800f632 <_svfiprintf_r+0x32>
 800f618:	2140      	movs	r1, #64	; 0x40
 800f61a:	f7ff ff0b 	bl	800f434 <_malloc_r>
 800f61e:	6028      	str	r0, [r5, #0]
 800f620:	6128      	str	r0, [r5, #16]
 800f622:	b920      	cbnz	r0, 800f62e <_svfiprintf_r+0x2e>
 800f624:	230c      	movs	r3, #12
 800f626:	603b      	str	r3, [r7, #0]
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	e0d0      	b.n	800f7d0 <_svfiprintf_r+0x1d0>
 800f62e:	2340      	movs	r3, #64	; 0x40
 800f630:	616b      	str	r3, [r5, #20]
 800f632:	2300      	movs	r3, #0
 800f634:	9309      	str	r3, [sp, #36]	; 0x24
 800f636:	2320      	movs	r3, #32
 800f638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f63c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f640:	2330      	movs	r3, #48	; 0x30
 800f642:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f7e8 <_svfiprintf_r+0x1e8>
 800f646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f64a:	f04f 0901 	mov.w	r9, #1
 800f64e:	4623      	mov	r3, r4
 800f650:	469a      	mov	sl, r3
 800f652:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f656:	b10a      	cbz	r2, 800f65c <_svfiprintf_r+0x5c>
 800f658:	2a25      	cmp	r2, #37	; 0x25
 800f65a:	d1f9      	bne.n	800f650 <_svfiprintf_r+0x50>
 800f65c:	ebba 0b04 	subs.w	fp, sl, r4
 800f660:	d00b      	beq.n	800f67a <_svfiprintf_r+0x7a>
 800f662:	465b      	mov	r3, fp
 800f664:	4622      	mov	r2, r4
 800f666:	4629      	mov	r1, r5
 800f668:	4638      	mov	r0, r7
 800f66a:	f7ff ff6f 	bl	800f54c <__ssputs_r>
 800f66e:	3001      	adds	r0, #1
 800f670:	f000 80a9 	beq.w	800f7c6 <_svfiprintf_r+0x1c6>
 800f674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f676:	445a      	add	r2, fp
 800f678:	9209      	str	r2, [sp, #36]	; 0x24
 800f67a:	f89a 3000 	ldrb.w	r3, [sl]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 80a1 	beq.w	800f7c6 <_svfiprintf_r+0x1c6>
 800f684:	2300      	movs	r3, #0
 800f686:	f04f 32ff 	mov.w	r2, #4294967295
 800f68a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f68e:	f10a 0a01 	add.w	sl, sl, #1
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	9307      	str	r3, [sp, #28]
 800f696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f69a:	931a      	str	r3, [sp, #104]	; 0x68
 800f69c:	4654      	mov	r4, sl
 800f69e:	2205      	movs	r2, #5
 800f6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6a4:	4850      	ldr	r0, [pc, #320]	; (800f7e8 <_svfiprintf_r+0x1e8>)
 800f6a6:	f7f0 fdb3 	bl	8000210 <memchr>
 800f6aa:	9a04      	ldr	r2, [sp, #16]
 800f6ac:	b9d8      	cbnz	r0, 800f6e6 <_svfiprintf_r+0xe6>
 800f6ae:	06d0      	lsls	r0, r2, #27
 800f6b0:	bf44      	itt	mi
 800f6b2:	2320      	movmi	r3, #32
 800f6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6b8:	0711      	lsls	r1, r2, #28
 800f6ba:	bf44      	itt	mi
 800f6bc:	232b      	movmi	r3, #43	; 0x2b
 800f6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6c8:	d015      	beq.n	800f6f6 <_svfiprintf_r+0xf6>
 800f6ca:	9a07      	ldr	r2, [sp, #28]
 800f6cc:	4654      	mov	r4, sl
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	f04f 0c0a 	mov.w	ip, #10
 800f6d4:	4621      	mov	r1, r4
 800f6d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6da:	3b30      	subs	r3, #48	; 0x30
 800f6dc:	2b09      	cmp	r3, #9
 800f6de:	d94d      	bls.n	800f77c <_svfiprintf_r+0x17c>
 800f6e0:	b1b0      	cbz	r0, 800f710 <_svfiprintf_r+0x110>
 800f6e2:	9207      	str	r2, [sp, #28]
 800f6e4:	e014      	b.n	800f710 <_svfiprintf_r+0x110>
 800f6e6:	eba0 0308 	sub.w	r3, r0, r8
 800f6ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	46a2      	mov	sl, r4
 800f6f4:	e7d2      	b.n	800f69c <_svfiprintf_r+0x9c>
 800f6f6:	9b03      	ldr	r3, [sp, #12]
 800f6f8:	1d19      	adds	r1, r3, #4
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	9103      	str	r1, [sp, #12]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bfbb      	ittet	lt
 800f702:	425b      	neglt	r3, r3
 800f704:	f042 0202 	orrlt.w	r2, r2, #2
 800f708:	9307      	strge	r3, [sp, #28]
 800f70a:	9307      	strlt	r3, [sp, #28]
 800f70c:	bfb8      	it	lt
 800f70e:	9204      	strlt	r2, [sp, #16]
 800f710:	7823      	ldrb	r3, [r4, #0]
 800f712:	2b2e      	cmp	r3, #46	; 0x2e
 800f714:	d10c      	bne.n	800f730 <_svfiprintf_r+0x130>
 800f716:	7863      	ldrb	r3, [r4, #1]
 800f718:	2b2a      	cmp	r3, #42	; 0x2a
 800f71a:	d134      	bne.n	800f786 <_svfiprintf_r+0x186>
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	1d1a      	adds	r2, r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	9203      	str	r2, [sp, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	bfb8      	it	lt
 800f728:	f04f 33ff 	movlt.w	r3, #4294967295
 800f72c:	3402      	adds	r4, #2
 800f72e:	9305      	str	r3, [sp, #20]
 800f730:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f7f8 <_svfiprintf_r+0x1f8>
 800f734:	7821      	ldrb	r1, [r4, #0]
 800f736:	2203      	movs	r2, #3
 800f738:	4650      	mov	r0, sl
 800f73a:	f7f0 fd69 	bl	8000210 <memchr>
 800f73e:	b138      	cbz	r0, 800f750 <_svfiprintf_r+0x150>
 800f740:	9b04      	ldr	r3, [sp, #16]
 800f742:	eba0 000a 	sub.w	r0, r0, sl
 800f746:	2240      	movs	r2, #64	; 0x40
 800f748:	4082      	lsls	r2, r0
 800f74a:	4313      	orrs	r3, r2
 800f74c:	3401      	adds	r4, #1
 800f74e:	9304      	str	r3, [sp, #16]
 800f750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f754:	4825      	ldr	r0, [pc, #148]	; (800f7ec <_svfiprintf_r+0x1ec>)
 800f756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f75a:	2206      	movs	r2, #6
 800f75c:	f7f0 fd58 	bl	8000210 <memchr>
 800f760:	2800      	cmp	r0, #0
 800f762:	d038      	beq.n	800f7d6 <_svfiprintf_r+0x1d6>
 800f764:	4b22      	ldr	r3, [pc, #136]	; (800f7f0 <_svfiprintf_r+0x1f0>)
 800f766:	bb1b      	cbnz	r3, 800f7b0 <_svfiprintf_r+0x1b0>
 800f768:	9b03      	ldr	r3, [sp, #12]
 800f76a:	3307      	adds	r3, #7
 800f76c:	f023 0307 	bic.w	r3, r3, #7
 800f770:	3308      	adds	r3, #8
 800f772:	9303      	str	r3, [sp, #12]
 800f774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f776:	4433      	add	r3, r6
 800f778:	9309      	str	r3, [sp, #36]	; 0x24
 800f77a:	e768      	b.n	800f64e <_svfiprintf_r+0x4e>
 800f77c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f780:	460c      	mov	r4, r1
 800f782:	2001      	movs	r0, #1
 800f784:	e7a6      	b.n	800f6d4 <_svfiprintf_r+0xd4>
 800f786:	2300      	movs	r3, #0
 800f788:	3401      	adds	r4, #1
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	4619      	mov	r1, r3
 800f78e:	f04f 0c0a 	mov.w	ip, #10
 800f792:	4620      	mov	r0, r4
 800f794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f798:	3a30      	subs	r2, #48	; 0x30
 800f79a:	2a09      	cmp	r2, #9
 800f79c:	d903      	bls.n	800f7a6 <_svfiprintf_r+0x1a6>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0c6      	beq.n	800f730 <_svfiprintf_r+0x130>
 800f7a2:	9105      	str	r1, [sp, #20]
 800f7a4:	e7c4      	b.n	800f730 <_svfiprintf_r+0x130>
 800f7a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e7f0      	b.n	800f792 <_svfiprintf_r+0x192>
 800f7b0:	ab03      	add	r3, sp, #12
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	4b0f      	ldr	r3, [pc, #60]	; (800f7f4 <_svfiprintf_r+0x1f4>)
 800f7b8:	a904      	add	r1, sp, #16
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	f3af 8000 	nop.w
 800f7c0:	1c42      	adds	r2, r0, #1
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	d1d6      	bne.n	800f774 <_svfiprintf_r+0x174>
 800f7c6:	89ab      	ldrh	r3, [r5, #12]
 800f7c8:	065b      	lsls	r3, r3, #25
 800f7ca:	f53f af2d 	bmi.w	800f628 <_svfiprintf_r+0x28>
 800f7ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7d0:	b01d      	add	sp, #116	; 0x74
 800f7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d6:	ab03      	add	r3, sp, #12
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	462a      	mov	r2, r5
 800f7dc:	4b05      	ldr	r3, [pc, #20]	; (800f7f4 <_svfiprintf_r+0x1f4>)
 800f7de:	a904      	add	r1, sp, #16
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f000 f879 	bl	800f8d8 <_printf_i>
 800f7e6:	e7eb      	b.n	800f7c0 <_svfiprintf_r+0x1c0>
 800f7e8:	08010d97 	.word	0x08010d97
 800f7ec:	08010da1 	.word	0x08010da1
 800f7f0:	00000000 	.word	0x00000000
 800f7f4:	0800f54d 	.word	0x0800f54d
 800f7f8:	08010d9d 	.word	0x08010d9d

0800f7fc <_printf_common>:
 800f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f800:	4616      	mov	r6, r2
 800f802:	4699      	mov	r9, r3
 800f804:	688a      	ldr	r2, [r1, #8]
 800f806:	690b      	ldr	r3, [r1, #16]
 800f808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f80c:	4293      	cmp	r3, r2
 800f80e:	bfb8      	it	lt
 800f810:	4613      	movlt	r3, r2
 800f812:	6033      	str	r3, [r6, #0]
 800f814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f818:	4607      	mov	r7, r0
 800f81a:	460c      	mov	r4, r1
 800f81c:	b10a      	cbz	r2, 800f822 <_printf_common+0x26>
 800f81e:	3301      	adds	r3, #1
 800f820:	6033      	str	r3, [r6, #0]
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	0699      	lsls	r1, r3, #26
 800f826:	bf42      	ittt	mi
 800f828:	6833      	ldrmi	r3, [r6, #0]
 800f82a:	3302      	addmi	r3, #2
 800f82c:	6033      	strmi	r3, [r6, #0]
 800f82e:	6825      	ldr	r5, [r4, #0]
 800f830:	f015 0506 	ands.w	r5, r5, #6
 800f834:	d106      	bne.n	800f844 <_printf_common+0x48>
 800f836:	f104 0a19 	add.w	sl, r4, #25
 800f83a:	68e3      	ldr	r3, [r4, #12]
 800f83c:	6832      	ldr	r2, [r6, #0]
 800f83e:	1a9b      	subs	r3, r3, r2
 800f840:	42ab      	cmp	r3, r5
 800f842:	dc26      	bgt.n	800f892 <_printf_common+0x96>
 800f844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f848:	1e13      	subs	r3, r2, #0
 800f84a:	6822      	ldr	r2, [r4, #0]
 800f84c:	bf18      	it	ne
 800f84e:	2301      	movne	r3, #1
 800f850:	0692      	lsls	r2, r2, #26
 800f852:	d42b      	bmi.n	800f8ac <_printf_common+0xb0>
 800f854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f858:	4649      	mov	r1, r9
 800f85a:	4638      	mov	r0, r7
 800f85c:	47c0      	blx	r8
 800f85e:	3001      	adds	r0, #1
 800f860:	d01e      	beq.n	800f8a0 <_printf_common+0xa4>
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	6922      	ldr	r2, [r4, #16]
 800f866:	f003 0306 	and.w	r3, r3, #6
 800f86a:	2b04      	cmp	r3, #4
 800f86c:	bf02      	ittt	eq
 800f86e:	68e5      	ldreq	r5, [r4, #12]
 800f870:	6833      	ldreq	r3, [r6, #0]
 800f872:	1aed      	subeq	r5, r5, r3
 800f874:	68a3      	ldr	r3, [r4, #8]
 800f876:	bf0c      	ite	eq
 800f878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f87c:	2500      	movne	r5, #0
 800f87e:	4293      	cmp	r3, r2
 800f880:	bfc4      	itt	gt
 800f882:	1a9b      	subgt	r3, r3, r2
 800f884:	18ed      	addgt	r5, r5, r3
 800f886:	2600      	movs	r6, #0
 800f888:	341a      	adds	r4, #26
 800f88a:	42b5      	cmp	r5, r6
 800f88c:	d11a      	bne.n	800f8c4 <_printf_common+0xc8>
 800f88e:	2000      	movs	r0, #0
 800f890:	e008      	b.n	800f8a4 <_printf_common+0xa8>
 800f892:	2301      	movs	r3, #1
 800f894:	4652      	mov	r2, sl
 800f896:	4649      	mov	r1, r9
 800f898:	4638      	mov	r0, r7
 800f89a:	47c0      	blx	r8
 800f89c:	3001      	adds	r0, #1
 800f89e:	d103      	bne.n	800f8a8 <_printf_common+0xac>
 800f8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a8:	3501      	adds	r5, #1
 800f8aa:	e7c6      	b.n	800f83a <_printf_common+0x3e>
 800f8ac:	18e1      	adds	r1, r4, r3
 800f8ae:	1c5a      	adds	r2, r3, #1
 800f8b0:	2030      	movs	r0, #48	; 0x30
 800f8b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8b6:	4422      	add	r2, r4
 800f8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8c0:	3302      	adds	r3, #2
 800f8c2:	e7c7      	b.n	800f854 <_printf_common+0x58>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	4622      	mov	r2, r4
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	47c0      	blx	r8
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	d0e6      	beq.n	800f8a0 <_printf_common+0xa4>
 800f8d2:	3601      	adds	r6, #1
 800f8d4:	e7d9      	b.n	800f88a <_printf_common+0x8e>
	...

0800f8d8 <_printf_i>:
 800f8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8dc:	7e0f      	ldrb	r7, [r1, #24]
 800f8de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f8e0:	2f78      	cmp	r7, #120	; 0x78
 800f8e2:	4691      	mov	r9, r2
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	469a      	mov	sl, r3
 800f8ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f8ee:	d807      	bhi.n	800f900 <_printf_i+0x28>
 800f8f0:	2f62      	cmp	r7, #98	; 0x62
 800f8f2:	d80a      	bhi.n	800f90a <_printf_i+0x32>
 800f8f4:	2f00      	cmp	r7, #0
 800f8f6:	f000 80d4 	beq.w	800faa2 <_printf_i+0x1ca>
 800f8fa:	2f58      	cmp	r7, #88	; 0x58
 800f8fc:	f000 80c0 	beq.w	800fa80 <_printf_i+0x1a8>
 800f900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f908:	e03a      	b.n	800f980 <_printf_i+0xa8>
 800f90a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f90e:	2b15      	cmp	r3, #21
 800f910:	d8f6      	bhi.n	800f900 <_printf_i+0x28>
 800f912:	a101      	add	r1, pc, #4	; (adr r1, 800f918 <_printf_i+0x40>)
 800f914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f918:	0800f971 	.word	0x0800f971
 800f91c:	0800f985 	.word	0x0800f985
 800f920:	0800f901 	.word	0x0800f901
 800f924:	0800f901 	.word	0x0800f901
 800f928:	0800f901 	.word	0x0800f901
 800f92c:	0800f901 	.word	0x0800f901
 800f930:	0800f985 	.word	0x0800f985
 800f934:	0800f901 	.word	0x0800f901
 800f938:	0800f901 	.word	0x0800f901
 800f93c:	0800f901 	.word	0x0800f901
 800f940:	0800f901 	.word	0x0800f901
 800f944:	0800fa89 	.word	0x0800fa89
 800f948:	0800f9b1 	.word	0x0800f9b1
 800f94c:	0800fa43 	.word	0x0800fa43
 800f950:	0800f901 	.word	0x0800f901
 800f954:	0800f901 	.word	0x0800f901
 800f958:	0800faab 	.word	0x0800faab
 800f95c:	0800f901 	.word	0x0800f901
 800f960:	0800f9b1 	.word	0x0800f9b1
 800f964:	0800f901 	.word	0x0800f901
 800f968:	0800f901 	.word	0x0800f901
 800f96c:	0800fa4b 	.word	0x0800fa4b
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	1d1a      	adds	r2, r3, #4
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f980:	2301      	movs	r3, #1
 800f982:	e09f      	b.n	800fac4 <_printf_i+0x1ec>
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	682b      	ldr	r3, [r5, #0]
 800f988:	0607      	lsls	r7, r0, #24
 800f98a:	f103 0104 	add.w	r1, r3, #4
 800f98e:	6029      	str	r1, [r5, #0]
 800f990:	d501      	bpl.n	800f996 <_printf_i+0xbe>
 800f992:	681e      	ldr	r6, [r3, #0]
 800f994:	e003      	b.n	800f99e <_printf_i+0xc6>
 800f996:	0646      	lsls	r6, r0, #25
 800f998:	d5fb      	bpl.n	800f992 <_printf_i+0xba>
 800f99a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f99e:	2e00      	cmp	r6, #0
 800f9a0:	da03      	bge.n	800f9aa <_printf_i+0xd2>
 800f9a2:	232d      	movs	r3, #45	; 0x2d
 800f9a4:	4276      	negs	r6, r6
 800f9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9aa:	485a      	ldr	r0, [pc, #360]	; (800fb14 <_printf_i+0x23c>)
 800f9ac:	230a      	movs	r3, #10
 800f9ae:	e012      	b.n	800f9d6 <_printf_i+0xfe>
 800f9b0:	682b      	ldr	r3, [r5, #0]
 800f9b2:	6820      	ldr	r0, [r4, #0]
 800f9b4:	1d19      	adds	r1, r3, #4
 800f9b6:	6029      	str	r1, [r5, #0]
 800f9b8:	0605      	lsls	r5, r0, #24
 800f9ba:	d501      	bpl.n	800f9c0 <_printf_i+0xe8>
 800f9bc:	681e      	ldr	r6, [r3, #0]
 800f9be:	e002      	b.n	800f9c6 <_printf_i+0xee>
 800f9c0:	0641      	lsls	r1, r0, #25
 800f9c2:	d5fb      	bpl.n	800f9bc <_printf_i+0xe4>
 800f9c4:	881e      	ldrh	r6, [r3, #0]
 800f9c6:	4853      	ldr	r0, [pc, #332]	; (800fb14 <_printf_i+0x23c>)
 800f9c8:	2f6f      	cmp	r7, #111	; 0x6f
 800f9ca:	bf0c      	ite	eq
 800f9cc:	2308      	moveq	r3, #8
 800f9ce:	230a      	movne	r3, #10
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9d6:	6865      	ldr	r5, [r4, #4]
 800f9d8:	60a5      	str	r5, [r4, #8]
 800f9da:	2d00      	cmp	r5, #0
 800f9dc:	bfa2      	ittt	ge
 800f9de:	6821      	ldrge	r1, [r4, #0]
 800f9e0:	f021 0104 	bicge.w	r1, r1, #4
 800f9e4:	6021      	strge	r1, [r4, #0]
 800f9e6:	b90e      	cbnz	r6, 800f9ec <_printf_i+0x114>
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	d04b      	beq.n	800fa84 <_printf_i+0x1ac>
 800f9ec:	4615      	mov	r5, r2
 800f9ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800f9f2:	fb03 6711 	mls	r7, r3, r1, r6
 800f9f6:	5dc7      	ldrb	r7, [r0, r7]
 800f9f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f9fc:	4637      	mov	r7, r6
 800f9fe:	42bb      	cmp	r3, r7
 800fa00:	460e      	mov	r6, r1
 800fa02:	d9f4      	bls.n	800f9ee <_printf_i+0x116>
 800fa04:	2b08      	cmp	r3, #8
 800fa06:	d10b      	bne.n	800fa20 <_printf_i+0x148>
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	07de      	lsls	r6, r3, #31
 800fa0c:	d508      	bpl.n	800fa20 <_printf_i+0x148>
 800fa0e:	6923      	ldr	r3, [r4, #16]
 800fa10:	6861      	ldr	r1, [r4, #4]
 800fa12:	4299      	cmp	r1, r3
 800fa14:	bfde      	ittt	le
 800fa16:	2330      	movle	r3, #48	; 0x30
 800fa18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa20:	1b52      	subs	r2, r2, r5
 800fa22:	6122      	str	r2, [r4, #16]
 800fa24:	f8cd a000 	str.w	sl, [sp]
 800fa28:	464b      	mov	r3, r9
 800fa2a:	aa03      	add	r2, sp, #12
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4640      	mov	r0, r8
 800fa30:	f7ff fee4 	bl	800f7fc <_printf_common>
 800fa34:	3001      	adds	r0, #1
 800fa36:	d14a      	bne.n	800face <_printf_i+0x1f6>
 800fa38:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3c:	b004      	add	sp, #16
 800fa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	f043 0320 	orr.w	r3, r3, #32
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	4833      	ldr	r0, [pc, #204]	; (800fb18 <_printf_i+0x240>)
 800fa4c:	2778      	movs	r7, #120	; 0x78
 800fa4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	6829      	ldr	r1, [r5, #0]
 800fa56:	061f      	lsls	r7, r3, #24
 800fa58:	f851 6b04 	ldr.w	r6, [r1], #4
 800fa5c:	d402      	bmi.n	800fa64 <_printf_i+0x18c>
 800fa5e:	065f      	lsls	r7, r3, #25
 800fa60:	bf48      	it	mi
 800fa62:	b2b6      	uxthmi	r6, r6
 800fa64:	07df      	lsls	r7, r3, #31
 800fa66:	bf48      	it	mi
 800fa68:	f043 0320 	orrmi.w	r3, r3, #32
 800fa6c:	6029      	str	r1, [r5, #0]
 800fa6e:	bf48      	it	mi
 800fa70:	6023      	strmi	r3, [r4, #0]
 800fa72:	b91e      	cbnz	r6, 800fa7c <_printf_i+0x1a4>
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	f023 0320 	bic.w	r3, r3, #32
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	2310      	movs	r3, #16
 800fa7e:	e7a7      	b.n	800f9d0 <_printf_i+0xf8>
 800fa80:	4824      	ldr	r0, [pc, #144]	; (800fb14 <_printf_i+0x23c>)
 800fa82:	e7e4      	b.n	800fa4e <_printf_i+0x176>
 800fa84:	4615      	mov	r5, r2
 800fa86:	e7bd      	b.n	800fa04 <_printf_i+0x12c>
 800fa88:	682b      	ldr	r3, [r5, #0]
 800fa8a:	6826      	ldr	r6, [r4, #0]
 800fa8c:	6961      	ldr	r1, [r4, #20]
 800fa8e:	1d18      	adds	r0, r3, #4
 800fa90:	6028      	str	r0, [r5, #0]
 800fa92:	0635      	lsls	r5, r6, #24
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	d501      	bpl.n	800fa9c <_printf_i+0x1c4>
 800fa98:	6019      	str	r1, [r3, #0]
 800fa9a:	e002      	b.n	800faa2 <_printf_i+0x1ca>
 800fa9c:	0670      	lsls	r0, r6, #25
 800fa9e:	d5fb      	bpl.n	800fa98 <_printf_i+0x1c0>
 800faa0:	8019      	strh	r1, [r3, #0]
 800faa2:	2300      	movs	r3, #0
 800faa4:	6123      	str	r3, [r4, #16]
 800faa6:	4615      	mov	r5, r2
 800faa8:	e7bc      	b.n	800fa24 <_printf_i+0x14c>
 800faaa:	682b      	ldr	r3, [r5, #0]
 800faac:	1d1a      	adds	r2, r3, #4
 800faae:	602a      	str	r2, [r5, #0]
 800fab0:	681d      	ldr	r5, [r3, #0]
 800fab2:	6862      	ldr	r2, [r4, #4]
 800fab4:	2100      	movs	r1, #0
 800fab6:	4628      	mov	r0, r5
 800fab8:	f7f0 fbaa 	bl	8000210 <memchr>
 800fabc:	b108      	cbz	r0, 800fac2 <_printf_i+0x1ea>
 800fabe:	1b40      	subs	r0, r0, r5
 800fac0:	6060      	str	r0, [r4, #4]
 800fac2:	6863      	ldr	r3, [r4, #4]
 800fac4:	6123      	str	r3, [r4, #16]
 800fac6:	2300      	movs	r3, #0
 800fac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800facc:	e7aa      	b.n	800fa24 <_printf_i+0x14c>
 800face:	6923      	ldr	r3, [r4, #16]
 800fad0:	462a      	mov	r2, r5
 800fad2:	4649      	mov	r1, r9
 800fad4:	4640      	mov	r0, r8
 800fad6:	47d0      	blx	sl
 800fad8:	3001      	adds	r0, #1
 800fada:	d0ad      	beq.n	800fa38 <_printf_i+0x160>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	079b      	lsls	r3, r3, #30
 800fae0:	d413      	bmi.n	800fb0a <_printf_i+0x232>
 800fae2:	68e0      	ldr	r0, [r4, #12]
 800fae4:	9b03      	ldr	r3, [sp, #12]
 800fae6:	4298      	cmp	r0, r3
 800fae8:	bfb8      	it	lt
 800faea:	4618      	movlt	r0, r3
 800faec:	e7a6      	b.n	800fa3c <_printf_i+0x164>
 800faee:	2301      	movs	r3, #1
 800faf0:	4632      	mov	r2, r6
 800faf2:	4649      	mov	r1, r9
 800faf4:	4640      	mov	r0, r8
 800faf6:	47d0      	blx	sl
 800faf8:	3001      	adds	r0, #1
 800fafa:	d09d      	beq.n	800fa38 <_printf_i+0x160>
 800fafc:	3501      	adds	r5, #1
 800fafe:	68e3      	ldr	r3, [r4, #12]
 800fb00:	9903      	ldr	r1, [sp, #12]
 800fb02:	1a5b      	subs	r3, r3, r1
 800fb04:	42ab      	cmp	r3, r5
 800fb06:	dcf2      	bgt.n	800faee <_printf_i+0x216>
 800fb08:	e7eb      	b.n	800fae2 <_printf_i+0x20a>
 800fb0a:	2500      	movs	r5, #0
 800fb0c:	f104 0619 	add.w	r6, r4, #25
 800fb10:	e7f5      	b.n	800fafe <_printf_i+0x226>
 800fb12:	bf00      	nop
 800fb14:	08010da8 	.word	0x08010da8
 800fb18:	08010db9 	.word	0x08010db9

0800fb1c <__sflush_r>:
 800fb1c:	898a      	ldrh	r2, [r1, #12]
 800fb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb22:	4605      	mov	r5, r0
 800fb24:	0710      	lsls	r0, r2, #28
 800fb26:	460c      	mov	r4, r1
 800fb28:	d458      	bmi.n	800fbdc <__sflush_r+0xc0>
 800fb2a:	684b      	ldr	r3, [r1, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	dc05      	bgt.n	800fb3c <__sflush_r+0x20>
 800fb30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dc02      	bgt.n	800fb3c <__sflush_r+0x20>
 800fb36:	2000      	movs	r0, #0
 800fb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb3e:	2e00      	cmp	r6, #0
 800fb40:	d0f9      	beq.n	800fb36 <__sflush_r+0x1a>
 800fb42:	2300      	movs	r3, #0
 800fb44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb48:	682f      	ldr	r7, [r5, #0]
 800fb4a:	6a21      	ldr	r1, [r4, #32]
 800fb4c:	602b      	str	r3, [r5, #0]
 800fb4e:	d032      	beq.n	800fbb6 <__sflush_r+0x9a>
 800fb50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb52:	89a3      	ldrh	r3, [r4, #12]
 800fb54:	075a      	lsls	r2, r3, #29
 800fb56:	d505      	bpl.n	800fb64 <__sflush_r+0x48>
 800fb58:	6863      	ldr	r3, [r4, #4]
 800fb5a:	1ac0      	subs	r0, r0, r3
 800fb5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb5e:	b10b      	cbz	r3, 800fb64 <__sflush_r+0x48>
 800fb60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb62:	1ac0      	subs	r0, r0, r3
 800fb64:	2300      	movs	r3, #0
 800fb66:	4602      	mov	r2, r0
 800fb68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb6a:	6a21      	ldr	r1, [r4, #32]
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b0      	blx	r6
 800fb70:	1c43      	adds	r3, r0, #1
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	d106      	bne.n	800fb84 <__sflush_r+0x68>
 800fb76:	6829      	ldr	r1, [r5, #0]
 800fb78:	291d      	cmp	r1, #29
 800fb7a:	d82b      	bhi.n	800fbd4 <__sflush_r+0xb8>
 800fb7c:	4a29      	ldr	r2, [pc, #164]	; (800fc24 <__sflush_r+0x108>)
 800fb7e:	410a      	asrs	r2, r1
 800fb80:	07d6      	lsls	r6, r2, #31
 800fb82:	d427      	bmi.n	800fbd4 <__sflush_r+0xb8>
 800fb84:	2200      	movs	r2, #0
 800fb86:	6062      	str	r2, [r4, #4]
 800fb88:	04d9      	lsls	r1, r3, #19
 800fb8a:	6922      	ldr	r2, [r4, #16]
 800fb8c:	6022      	str	r2, [r4, #0]
 800fb8e:	d504      	bpl.n	800fb9a <__sflush_r+0x7e>
 800fb90:	1c42      	adds	r2, r0, #1
 800fb92:	d101      	bne.n	800fb98 <__sflush_r+0x7c>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	b903      	cbnz	r3, 800fb9a <__sflush_r+0x7e>
 800fb98:	6560      	str	r0, [r4, #84]	; 0x54
 800fb9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb9c:	602f      	str	r7, [r5, #0]
 800fb9e:	2900      	cmp	r1, #0
 800fba0:	d0c9      	beq.n	800fb36 <__sflush_r+0x1a>
 800fba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fba6:	4299      	cmp	r1, r3
 800fba8:	d002      	beq.n	800fbb0 <__sflush_r+0x94>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f7ff fbce 	bl	800f34c <_free_r>
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	6360      	str	r0, [r4, #52]	; 0x34
 800fbb4:	e7c0      	b.n	800fb38 <__sflush_r+0x1c>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4628      	mov	r0, r5
 800fbba:	47b0      	blx	r6
 800fbbc:	1c41      	adds	r1, r0, #1
 800fbbe:	d1c8      	bne.n	800fb52 <__sflush_r+0x36>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0c5      	beq.n	800fb52 <__sflush_r+0x36>
 800fbc6:	2b1d      	cmp	r3, #29
 800fbc8:	d001      	beq.n	800fbce <__sflush_r+0xb2>
 800fbca:	2b16      	cmp	r3, #22
 800fbcc:	d101      	bne.n	800fbd2 <__sflush_r+0xb6>
 800fbce:	602f      	str	r7, [r5, #0]
 800fbd0:	e7b1      	b.n	800fb36 <__sflush_r+0x1a>
 800fbd2:	89a3      	ldrh	r3, [r4, #12]
 800fbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbd8:	81a3      	strh	r3, [r4, #12]
 800fbda:	e7ad      	b.n	800fb38 <__sflush_r+0x1c>
 800fbdc:	690f      	ldr	r7, [r1, #16]
 800fbde:	2f00      	cmp	r7, #0
 800fbe0:	d0a9      	beq.n	800fb36 <__sflush_r+0x1a>
 800fbe2:	0793      	lsls	r3, r2, #30
 800fbe4:	680e      	ldr	r6, [r1, #0]
 800fbe6:	bf08      	it	eq
 800fbe8:	694b      	ldreq	r3, [r1, #20]
 800fbea:	600f      	str	r7, [r1, #0]
 800fbec:	bf18      	it	ne
 800fbee:	2300      	movne	r3, #0
 800fbf0:	eba6 0807 	sub.w	r8, r6, r7
 800fbf4:	608b      	str	r3, [r1, #8]
 800fbf6:	f1b8 0f00 	cmp.w	r8, #0
 800fbfa:	dd9c      	ble.n	800fb36 <__sflush_r+0x1a>
 800fbfc:	6a21      	ldr	r1, [r4, #32]
 800fbfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc00:	4643      	mov	r3, r8
 800fc02:	463a      	mov	r2, r7
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b0      	blx	r6
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	dc06      	bgt.n	800fc1a <__sflush_r+0xfe>
 800fc0c:	89a3      	ldrh	r3, [r4, #12]
 800fc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc12:	81a3      	strh	r3, [r4, #12]
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	e78e      	b.n	800fb38 <__sflush_r+0x1c>
 800fc1a:	4407      	add	r7, r0
 800fc1c:	eba8 0800 	sub.w	r8, r8, r0
 800fc20:	e7e9      	b.n	800fbf6 <__sflush_r+0xda>
 800fc22:	bf00      	nop
 800fc24:	dfbffffe 	.word	0xdfbffffe

0800fc28 <_fflush_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	690b      	ldr	r3, [r1, #16]
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	b913      	cbnz	r3, 800fc38 <_fflush_r+0x10>
 800fc32:	2500      	movs	r5, #0
 800fc34:	4628      	mov	r0, r5
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	b118      	cbz	r0, 800fc42 <_fflush_r+0x1a>
 800fc3a:	6a03      	ldr	r3, [r0, #32]
 800fc3c:	b90b      	cbnz	r3, 800fc42 <_fflush_r+0x1a>
 800fc3e:	f7ff f9dd 	bl	800effc <__sinit>
 800fc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0f3      	beq.n	800fc32 <_fflush_r+0xa>
 800fc4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc4c:	07d0      	lsls	r0, r2, #31
 800fc4e:	d404      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc50:	0599      	lsls	r1, r3, #22
 800fc52:	d402      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc56:	f7ff fb51 	bl	800f2fc <__retarget_lock_acquire_recursive>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f7ff ff5d 	bl	800fb1c <__sflush_r>
 800fc62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc64:	07da      	lsls	r2, r3, #31
 800fc66:	4605      	mov	r5, r0
 800fc68:	d4e4      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	059b      	lsls	r3, r3, #22
 800fc6e:	d4e1      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc72:	f7ff fb44 	bl	800f2fe <__retarget_lock_release_recursive>
 800fc76:	e7dd      	b.n	800fc34 <_fflush_r+0xc>

0800fc78 <fiprintf>:
 800fc78:	b40e      	push	{r1, r2, r3}
 800fc7a:	b503      	push	{r0, r1, lr}
 800fc7c:	4601      	mov	r1, r0
 800fc7e:	ab03      	add	r3, sp, #12
 800fc80:	4805      	ldr	r0, [pc, #20]	; (800fc98 <fiprintf+0x20>)
 800fc82:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc86:	6800      	ldr	r0, [r0, #0]
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	f000 f89f 	bl	800fdcc <_vfiprintf_r>
 800fc8e:	b002      	add	sp, #8
 800fc90:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc94:	b003      	add	sp, #12
 800fc96:	4770      	bx	lr
 800fc98:	20000174 	.word	0x20000174

0800fc9c <memmove>:
 800fc9c:	4288      	cmp	r0, r1
 800fc9e:	b510      	push	{r4, lr}
 800fca0:	eb01 0402 	add.w	r4, r1, r2
 800fca4:	d902      	bls.n	800fcac <memmove+0x10>
 800fca6:	4284      	cmp	r4, r0
 800fca8:	4623      	mov	r3, r4
 800fcaa:	d807      	bhi.n	800fcbc <memmove+0x20>
 800fcac:	1e43      	subs	r3, r0, #1
 800fcae:	42a1      	cmp	r1, r4
 800fcb0:	d008      	beq.n	800fcc4 <memmove+0x28>
 800fcb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcba:	e7f8      	b.n	800fcae <memmove+0x12>
 800fcbc:	4402      	add	r2, r0
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	428a      	cmp	r2, r1
 800fcc2:	d100      	bne.n	800fcc6 <memmove+0x2a>
 800fcc4:	bd10      	pop	{r4, pc}
 800fcc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcce:	e7f7      	b.n	800fcc0 <memmove+0x24>

0800fcd0 <_sbrk_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4d06      	ldr	r5, [pc, #24]	; (800fcec <_sbrk_r+0x1c>)
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	4608      	mov	r0, r1
 800fcda:	602b      	str	r3, [r5, #0]
 800fcdc:	f7f2 fed6 	bl	8002a8c <_sbrk>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_sbrk_r+0x1a>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_sbrk_r+0x1a>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	20003f94 	.word	0x20003f94

0800fcf0 <memcpy>:
 800fcf0:	440a      	add	r2, r1
 800fcf2:	4291      	cmp	r1, r2
 800fcf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcf8:	d100      	bne.n	800fcfc <memcpy+0xc>
 800fcfa:	4770      	bx	lr
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd06:	4291      	cmp	r1, r2
 800fd08:	d1f9      	bne.n	800fcfe <memcpy+0xe>
 800fd0a:	bd10      	pop	{r4, pc}

0800fd0c <abort>:
 800fd0c:	b508      	push	{r3, lr}
 800fd0e:	2006      	movs	r0, #6
 800fd10:	f000 fa34 	bl	801017c <raise>
 800fd14:	2001      	movs	r0, #1
 800fd16:	f7f2 fe41 	bl	800299c <_exit>

0800fd1a <_realloc_r>:
 800fd1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd1e:	4680      	mov	r8, r0
 800fd20:	4614      	mov	r4, r2
 800fd22:	460e      	mov	r6, r1
 800fd24:	b921      	cbnz	r1, 800fd30 <_realloc_r+0x16>
 800fd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	f7ff bb82 	b.w	800f434 <_malloc_r>
 800fd30:	b92a      	cbnz	r2, 800fd3e <_realloc_r+0x24>
 800fd32:	f7ff fb0b 	bl	800f34c <_free_r>
 800fd36:	4625      	mov	r5, r4
 800fd38:	4628      	mov	r0, r5
 800fd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3e:	f000 fa39 	bl	80101b4 <_malloc_usable_size_r>
 800fd42:	4284      	cmp	r4, r0
 800fd44:	4607      	mov	r7, r0
 800fd46:	d802      	bhi.n	800fd4e <_realloc_r+0x34>
 800fd48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd4c:	d812      	bhi.n	800fd74 <_realloc_r+0x5a>
 800fd4e:	4621      	mov	r1, r4
 800fd50:	4640      	mov	r0, r8
 800fd52:	f7ff fb6f 	bl	800f434 <_malloc_r>
 800fd56:	4605      	mov	r5, r0
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d0ed      	beq.n	800fd38 <_realloc_r+0x1e>
 800fd5c:	42bc      	cmp	r4, r7
 800fd5e:	4622      	mov	r2, r4
 800fd60:	4631      	mov	r1, r6
 800fd62:	bf28      	it	cs
 800fd64:	463a      	movcs	r2, r7
 800fd66:	f7ff ffc3 	bl	800fcf0 <memcpy>
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	f7ff faed 	bl	800f34c <_free_r>
 800fd72:	e7e1      	b.n	800fd38 <_realloc_r+0x1e>
 800fd74:	4635      	mov	r5, r6
 800fd76:	e7df      	b.n	800fd38 <_realloc_r+0x1e>

0800fd78 <__sfputc_r>:
 800fd78:	6893      	ldr	r3, [r2, #8]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	b410      	push	{r4}
 800fd80:	6093      	str	r3, [r2, #8]
 800fd82:	da08      	bge.n	800fd96 <__sfputc_r+0x1e>
 800fd84:	6994      	ldr	r4, [r2, #24]
 800fd86:	42a3      	cmp	r3, r4
 800fd88:	db01      	blt.n	800fd8e <__sfputc_r+0x16>
 800fd8a:	290a      	cmp	r1, #10
 800fd8c:	d103      	bne.n	800fd96 <__sfputc_r+0x1e>
 800fd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd92:	f000 b935 	b.w	8010000 <__swbuf_r>
 800fd96:	6813      	ldr	r3, [r2, #0]
 800fd98:	1c58      	adds	r0, r3, #1
 800fd9a:	6010      	str	r0, [r2, #0]
 800fd9c:	7019      	strb	r1, [r3, #0]
 800fd9e:	4608      	mov	r0, r1
 800fda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fda4:	4770      	bx	lr

0800fda6 <__sfputs_r>:
 800fda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda8:	4606      	mov	r6, r0
 800fdaa:	460f      	mov	r7, r1
 800fdac:	4614      	mov	r4, r2
 800fdae:	18d5      	adds	r5, r2, r3
 800fdb0:	42ac      	cmp	r4, r5
 800fdb2:	d101      	bne.n	800fdb8 <__sfputs_r+0x12>
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	e007      	b.n	800fdc8 <__sfputs_r+0x22>
 800fdb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdbc:	463a      	mov	r2, r7
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f7ff ffda 	bl	800fd78 <__sfputc_r>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d1f3      	bne.n	800fdb0 <__sfputs_r+0xa>
 800fdc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fdcc <_vfiprintf_r>:
 800fdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd0:	460d      	mov	r5, r1
 800fdd2:	b09d      	sub	sp, #116	; 0x74
 800fdd4:	4614      	mov	r4, r2
 800fdd6:	4698      	mov	r8, r3
 800fdd8:	4606      	mov	r6, r0
 800fdda:	b118      	cbz	r0, 800fde4 <_vfiprintf_r+0x18>
 800fddc:	6a03      	ldr	r3, [r0, #32]
 800fdde:	b90b      	cbnz	r3, 800fde4 <_vfiprintf_r+0x18>
 800fde0:	f7ff f90c 	bl	800effc <__sinit>
 800fde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fde6:	07d9      	lsls	r1, r3, #31
 800fde8:	d405      	bmi.n	800fdf6 <_vfiprintf_r+0x2a>
 800fdea:	89ab      	ldrh	r3, [r5, #12]
 800fdec:	059a      	lsls	r2, r3, #22
 800fdee:	d402      	bmi.n	800fdf6 <_vfiprintf_r+0x2a>
 800fdf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdf2:	f7ff fa83 	bl	800f2fc <__retarget_lock_acquire_recursive>
 800fdf6:	89ab      	ldrh	r3, [r5, #12]
 800fdf8:	071b      	lsls	r3, r3, #28
 800fdfa:	d501      	bpl.n	800fe00 <_vfiprintf_r+0x34>
 800fdfc:	692b      	ldr	r3, [r5, #16]
 800fdfe:	b99b      	cbnz	r3, 800fe28 <_vfiprintf_r+0x5c>
 800fe00:	4629      	mov	r1, r5
 800fe02:	4630      	mov	r0, r6
 800fe04:	f000 f93a 	bl	801007c <__swsetup_r>
 800fe08:	b170      	cbz	r0, 800fe28 <_vfiprintf_r+0x5c>
 800fe0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe0c:	07dc      	lsls	r4, r3, #31
 800fe0e:	d504      	bpl.n	800fe1a <_vfiprintf_r+0x4e>
 800fe10:	f04f 30ff 	mov.w	r0, #4294967295
 800fe14:	b01d      	add	sp, #116	; 0x74
 800fe16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1a:	89ab      	ldrh	r3, [r5, #12]
 800fe1c:	0598      	lsls	r0, r3, #22
 800fe1e:	d4f7      	bmi.n	800fe10 <_vfiprintf_r+0x44>
 800fe20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe22:	f7ff fa6c 	bl	800f2fe <__retarget_lock_release_recursive>
 800fe26:	e7f3      	b.n	800fe10 <_vfiprintf_r+0x44>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe2c:	2320      	movs	r3, #32
 800fe2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe32:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe36:	2330      	movs	r3, #48	; 0x30
 800fe38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ffec <_vfiprintf_r+0x220>
 800fe3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe40:	f04f 0901 	mov.w	r9, #1
 800fe44:	4623      	mov	r3, r4
 800fe46:	469a      	mov	sl, r3
 800fe48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe4c:	b10a      	cbz	r2, 800fe52 <_vfiprintf_r+0x86>
 800fe4e:	2a25      	cmp	r2, #37	; 0x25
 800fe50:	d1f9      	bne.n	800fe46 <_vfiprintf_r+0x7a>
 800fe52:	ebba 0b04 	subs.w	fp, sl, r4
 800fe56:	d00b      	beq.n	800fe70 <_vfiprintf_r+0xa4>
 800fe58:	465b      	mov	r3, fp
 800fe5a:	4622      	mov	r2, r4
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7ff ffa1 	bl	800fda6 <__sfputs_r>
 800fe64:	3001      	adds	r0, #1
 800fe66:	f000 80a9 	beq.w	800ffbc <_vfiprintf_r+0x1f0>
 800fe6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe6c:	445a      	add	r2, fp
 800fe6e:	9209      	str	r2, [sp, #36]	; 0x24
 800fe70:	f89a 3000 	ldrb.w	r3, [sl]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 80a1 	beq.w	800ffbc <_vfiprintf_r+0x1f0>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe84:	f10a 0a01 	add.w	sl, sl, #1
 800fe88:	9304      	str	r3, [sp, #16]
 800fe8a:	9307      	str	r3, [sp, #28]
 800fe8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe90:	931a      	str	r3, [sp, #104]	; 0x68
 800fe92:	4654      	mov	r4, sl
 800fe94:	2205      	movs	r2, #5
 800fe96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe9a:	4854      	ldr	r0, [pc, #336]	; (800ffec <_vfiprintf_r+0x220>)
 800fe9c:	f7f0 f9b8 	bl	8000210 <memchr>
 800fea0:	9a04      	ldr	r2, [sp, #16]
 800fea2:	b9d8      	cbnz	r0, 800fedc <_vfiprintf_r+0x110>
 800fea4:	06d1      	lsls	r1, r2, #27
 800fea6:	bf44      	itt	mi
 800fea8:	2320      	movmi	r3, #32
 800feaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feae:	0713      	lsls	r3, r2, #28
 800feb0:	bf44      	itt	mi
 800feb2:	232b      	movmi	r3, #43	; 0x2b
 800feb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feb8:	f89a 3000 	ldrb.w	r3, [sl]
 800febc:	2b2a      	cmp	r3, #42	; 0x2a
 800febe:	d015      	beq.n	800feec <_vfiprintf_r+0x120>
 800fec0:	9a07      	ldr	r2, [sp, #28]
 800fec2:	4654      	mov	r4, sl
 800fec4:	2000      	movs	r0, #0
 800fec6:	f04f 0c0a 	mov.w	ip, #10
 800feca:	4621      	mov	r1, r4
 800fecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fed0:	3b30      	subs	r3, #48	; 0x30
 800fed2:	2b09      	cmp	r3, #9
 800fed4:	d94d      	bls.n	800ff72 <_vfiprintf_r+0x1a6>
 800fed6:	b1b0      	cbz	r0, 800ff06 <_vfiprintf_r+0x13a>
 800fed8:	9207      	str	r2, [sp, #28]
 800feda:	e014      	b.n	800ff06 <_vfiprintf_r+0x13a>
 800fedc:	eba0 0308 	sub.w	r3, r0, r8
 800fee0:	fa09 f303 	lsl.w	r3, r9, r3
 800fee4:	4313      	orrs	r3, r2
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	46a2      	mov	sl, r4
 800feea:	e7d2      	b.n	800fe92 <_vfiprintf_r+0xc6>
 800feec:	9b03      	ldr	r3, [sp, #12]
 800feee:	1d19      	adds	r1, r3, #4
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	9103      	str	r1, [sp, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	bfbb      	ittet	lt
 800fef8:	425b      	neglt	r3, r3
 800fefa:	f042 0202 	orrlt.w	r2, r2, #2
 800fefe:	9307      	strge	r3, [sp, #28]
 800ff00:	9307      	strlt	r3, [sp, #28]
 800ff02:	bfb8      	it	lt
 800ff04:	9204      	strlt	r2, [sp, #16]
 800ff06:	7823      	ldrb	r3, [r4, #0]
 800ff08:	2b2e      	cmp	r3, #46	; 0x2e
 800ff0a:	d10c      	bne.n	800ff26 <_vfiprintf_r+0x15a>
 800ff0c:	7863      	ldrb	r3, [r4, #1]
 800ff0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff10:	d134      	bne.n	800ff7c <_vfiprintf_r+0x1b0>
 800ff12:	9b03      	ldr	r3, [sp, #12]
 800ff14:	1d1a      	adds	r2, r3, #4
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	9203      	str	r2, [sp, #12]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	bfb8      	it	lt
 800ff1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff22:	3402      	adds	r4, #2
 800ff24:	9305      	str	r3, [sp, #20]
 800ff26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fffc <_vfiprintf_r+0x230>
 800ff2a:	7821      	ldrb	r1, [r4, #0]
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	4650      	mov	r0, sl
 800ff30:	f7f0 f96e 	bl	8000210 <memchr>
 800ff34:	b138      	cbz	r0, 800ff46 <_vfiprintf_r+0x17a>
 800ff36:	9b04      	ldr	r3, [sp, #16]
 800ff38:	eba0 000a 	sub.w	r0, r0, sl
 800ff3c:	2240      	movs	r2, #64	; 0x40
 800ff3e:	4082      	lsls	r2, r0
 800ff40:	4313      	orrs	r3, r2
 800ff42:	3401      	adds	r4, #1
 800ff44:	9304      	str	r3, [sp, #16]
 800ff46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff4a:	4829      	ldr	r0, [pc, #164]	; (800fff0 <_vfiprintf_r+0x224>)
 800ff4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff50:	2206      	movs	r2, #6
 800ff52:	f7f0 f95d 	bl	8000210 <memchr>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d03f      	beq.n	800ffda <_vfiprintf_r+0x20e>
 800ff5a:	4b26      	ldr	r3, [pc, #152]	; (800fff4 <_vfiprintf_r+0x228>)
 800ff5c:	bb1b      	cbnz	r3, 800ffa6 <_vfiprintf_r+0x1da>
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	3307      	adds	r3, #7
 800ff62:	f023 0307 	bic.w	r3, r3, #7
 800ff66:	3308      	adds	r3, #8
 800ff68:	9303      	str	r3, [sp, #12]
 800ff6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff6c:	443b      	add	r3, r7
 800ff6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff70:	e768      	b.n	800fe44 <_vfiprintf_r+0x78>
 800ff72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff76:	460c      	mov	r4, r1
 800ff78:	2001      	movs	r0, #1
 800ff7a:	e7a6      	b.n	800feca <_vfiprintf_r+0xfe>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	3401      	adds	r4, #1
 800ff80:	9305      	str	r3, [sp, #20]
 800ff82:	4619      	mov	r1, r3
 800ff84:	f04f 0c0a 	mov.w	ip, #10
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff8e:	3a30      	subs	r2, #48	; 0x30
 800ff90:	2a09      	cmp	r2, #9
 800ff92:	d903      	bls.n	800ff9c <_vfiprintf_r+0x1d0>
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d0c6      	beq.n	800ff26 <_vfiprintf_r+0x15a>
 800ff98:	9105      	str	r1, [sp, #20]
 800ff9a:	e7c4      	b.n	800ff26 <_vfiprintf_r+0x15a>
 800ff9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e7f0      	b.n	800ff88 <_vfiprintf_r+0x1bc>
 800ffa6:	ab03      	add	r3, sp, #12
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	462a      	mov	r2, r5
 800ffac:	4b12      	ldr	r3, [pc, #72]	; (800fff8 <_vfiprintf_r+0x22c>)
 800ffae:	a904      	add	r1, sp, #16
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f3af 8000 	nop.w
 800ffb6:	4607      	mov	r7, r0
 800ffb8:	1c78      	adds	r0, r7, #1
 800ffba:	d1d6      	bne.n	800ff6a <_vfiprintf_r+0x19e>
 800ffbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffbe:	07d9      	lsls	r1, r3, #31
 800ffc0:	d405      	bmi.n	800ffce <_vfiprintf_r+0x202>
 800ffc2:	89ab      	ldrh	r3, [r5, #12]
 800ffc4:	059a      	lsls	r2, r3, #22
 800ffc6:	d402      	bmi.n	800ffce <_vfiprintf_r+0x202>
 800ffc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffca:	f7ff f998 	bl	800f2fe <__retarget_lock_release_recursive>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	065b      	lsls	r3, r3, #25
 800ffd2:	f53f af1d 	bmi.w	800fe10 <_vfiprintf_r+0x44>
 800ffd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffd8:	e71c      	b.n	800fe14 <_vfiprintf_r+0x48>
 800ffda:	ab03      	add	r3, sp, #12
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	462a      	mov	r2, r5
 800ffe0:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <_vfiprintf_r+0x22c>)
 800ffe2:	a904      	add	r1, sp, #16
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f7ff fc77 	bl	800f8d8 <_printf_i>
 800ffea:	e7e4      	b.n	800ffb6 <_vfiprintf_r+0x1ea>
 800ffec:	08010d97 	.word	0x08010d97
 800fff0:	08010da1 	.word	0x08010da1
 800fff4:	00000000 	.word	0x00000000
 800fff8:	0800fda7 	.word	0x0800fda7
 800fffc:	08010d9d 	.word	0x08010d9d

08010000 <__swbuf_r>:
 8010000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010002:	460e      	mov	r6, r1
 8010004:	4614      	mov	r4, r2
 8010006:	4605      	mov	r5, r0
 8010008:	b118      	cbz	r0, 8010012 <__swbuf_r+0x12>
 801000a:	6a03      	ldr	r3, [r0, #32]
 801000c:	b90b      	cbnz	r3, 8010012 <__swbuf_r+0x12>
 801000e:	f7fe fff5 	bl	800effc <__sinit>
 8010012:	69a3      	ldr	r3, [r4, #24]
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	071a      	lsls	r2, r3, #28
 801001a:	d525      	bpl.n	8010068 <__swbuf_r+0x68>
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	b31b      	cbz	r3, 8010068 <__swbuf_r+0x68>
 8010020:	6823      	ldr	r3, [r4, #0]
 8010022:	6922      	ldr	r2, [r4, #16]
 8010024:	1a98      	subs	r0, r3, r2
 8010026:	6963      	ldr	r3, [r4, #20]
 8010028:	b2f6      	uxtb	r6, r6
 801002a:	4283      	cmp	r3, r0
 801002c:	4637      	mov	r7, r6
 801002e:	dc04      	bgt.n	801003a <__swbuf_r+0x3a>
 8010030:	4621      	mov	r1, r4
 8010032:	4628      	mov	r0, r5
 8010034:	f7ff fdf8 	bl	800fc28 <_fflush_r>
 8010038:	b9e0      	cbnz	r0, 8010074 <__swbuf_r+0x74>
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	3b01      	subs	r3, #1
 801003e:	60a3      	str	r3, [r4, #8]
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	6022      	str	r2, [r4, #0]
 8010046:	701e      	strb	r6, [r3, #0]
 8010048:	6962      	ldr	r2, [r4, #20]
 801004a:	1c43      	adds	r3, r0, #1
 801004c:	429a      	cmp	r2, r3
 801004e:	d004      	beq.n	801005a <__swbuf_r+0x5a>
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	07db      	lsls	r3, r3, #31
 8010054:	d506      	bpl.n	8010064 <__swbuf_r+0x64>
 8010056:	2e0a      	cmp	r6, #10
 8010058:	d104      	bne.n	8010064 <__swbuf_r+0x64>
 801005a:	4621      	mov	r1, r4
 801005c:	4628      	mov	r0, r5
 801005e:	f7ff fde3 	bl	800fc28 <_fflush_r>
 8010062:	b938      	cbnz	r0, 8010074 <__swbuf_r+0x74>
 8010064:	4638      	mov	r0, r7
 8010066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010068:	4621      	mov	r1, r4
 801006a:	4628      	mov	r0, r5
 801006c:	f000 f806 	bl	801007c <__swsetup_r>
 8010070:	2800      	cmp	r0, #0
 8010072:	d0d5      	beq.n	8010020 <__swbuf_r+0x20>
 8010074:	f04f 37ff 	mov.w	r7, #4294967295
 8010078:	e7f4      	b.n	8010064 <__swbuf_r+0x64>
	...

0801007c <__swsetup_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4b2a      	ldr	r3, [pc, #168]	; (8010128 <__swsetup_r+0xac>)
 8010080:	4605      	mov	r5, r0
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	460c      	mov	r4, r1
 8010086:	b118      	cbz	r0, 8010090 <__swsetup_r+0x14>
 8010088:	6a03      	ldr	r3, [r0, #32]
 801008a:	b90b      	cbnz	r3, 8010090 <__swsetup_r+0x14>
 801008c:	f7fe ffb6 	bl	800effc <__sinit>
 8010090:	89a3      	ldrh	r3, [r4, #12]
 8010092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010096:	0718      	lsls	r0, r3, #28
 8010098:	d422      	bmi.n	80100e0 <__swsetup_r+0x64>
 801009a:	06d9      	lsls	r1, r3, #27
 801009c:	d407      	bmi.n	80100ae <__swsetup_r+0x32>
 801009e:	2309      	movs	r3, #9
 80100a0:	602b      	str	r3, [r5, #0]
 80100a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ac:	e034      	b.n	8010118 <__swsetup_r+0x9c>
 80100ae:	0758      	lsls	r0, r3, #29
 80100b0:	d512      	bpl.n	80100d8 <__swsetup_r+0x5c>
 80100b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100b4:	b141      	cbz	r1, 80100c8 <__swsetup_r+0x4c>
 80100b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100ba:	4299      	cmp	r1, r3
 80100bc:	d002      	beq.n	80100c4 <__swsetup_r+0x48>
 80100be:	4628      	mov	r0, r5
 80100c0:	f7ff f944 	bl	800f34c <_free_r>
 80100c4:	2300      	movs	r3, #0
 80100c6:	6363      	str	r3, [r4, #52]	; 0x34
 80100c8:	89a3      	ldrh	r3, [r4, #12]
 80100ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100ce:	81a3      	strh	r3, [r4, #12]
 80100d0:	2300      	movs	r3, #0
 80100d2:	6063      	str	r3, [r4, #4]
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	6023      	str	r3, [r4, #0]
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	f043 0308 	orr.w	r3, r3, #8
 80100de:	81a3      	strh	r3, [r4, #12]
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	b94b      	cbnz	r3, 80100f8 <__swsetup_r+0x7c>
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ee:	d003      	beq.n	80100f8 <__swsetup_r+0x7c>
 80100f0:	4621      	mov	r1, r4
 80100f2:	4628      	mov	r0, r5
 80100f4:	f000 f88c 	bl	8010210 <__smakebuf_r>
 80100f8:	89a0      	ldrh	r0, [r4, #12]
 80100fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100fe:	f010 0301 	ands.w	r3, r0, #1
 8010102:	d00a      	beq.n	801011a <__swsetup_r+0x9e>
 8010104:	2300      	movs	r3, #0
 8010106:	60a3      	str	r3, [r4, #8]
 8010108:	6963      	ldr	r3, [r4, #20]
 801010a:	425b      	negs	r3, r3
 801010c:	61a3      	str	r3, [r4, #24]
 801010e:	6923      	ldr	r3, [r4, #16]
 8010110:	b943      	cbnz	r3, 8010124 <__swsetup_r+0xa8>
 8010112:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010116:	d1c4      	bne.n	80100a2 <__swsetup_r+0x26>
 8010118:	bd38      	pop	{r3, r4, r5, pc}
 801011a:	0781      	lsls	r1, r0, #30
 801011c:	bf58      	it	pl
 801011e:	6963      	ldrpl	r3, [r4, #20]
 8010120:	60a3      	str	r3, [r4, #8]
 8010122:	e7f4      	b.n	801010e <__swsetup_r+0x92>
 8010124:	2000      	movs	r0, #0
 8010126:	e7f7      	b.n	8010118 <__swsetup_r+0x9c>
 8010128:	20000174 	.word	0x20000174

0801012c <_raise_r>:
 801012c:	291f      	cmp	r1, #31
 801012e:	b538      	push	{r3, r4, r5, lr}
 8010130:	4604      	mov	r4, r0
 8010132:	460d      	mov	r5, r1
 8010134:	d904      	bls.n	8010140 <_raise_r+0x14>
 8010136:	2316      	movs	r3, #22
 8010138:	6003      	str	r3, [r0, #0]
 801013a:	f04f 30ff 	mov.w	r0, #4294967295
 801013e:	bd38      	pop	{r3, r4, r5, pc}
 8010140:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010142:	b112      	cbz	r2, 801014a <_raise_r+0x1e>
 8010144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010148:	b94b      	cbnz	r3, 801015e <_raise_r+0x32>
 801014a:	4620      	mov	r0, r4
 801014c:	f000 f830 	bl	80101b0 <_getpid_r>
 8010150:	462a      	mov	r2, r5
 8010152:	4601      	mov	r1, r0
 8010154:	4620      	mov	r0, r4
 8010156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801015a:	f000 b817 	b.w	801018c <_kill_r>
 801015e:	2b01      	cmp	r3, #1
 8010160:	d00a      	beq.n	8010178 <_raise_r+0x4c>
 8010162:	1c59      	adds	r1, r3, #1
 8010164:	d103      	bne.n	801016e <_raise_r+0x42>
 8010166:	2316      	movs	r3, #22
 8010168:	6003      	str	r3, [r0, #0]
 801016a:	2001      	movs	r0, #1
 801016c:	e7e7      	b.n	801013e <_raise_r+0x12>
 801016e:	2400      	movs	r4, #0
 8010170:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010174:	4628      	mov	r0, r5
 8010176:	4798      	blx	r3
 8010178:	2000      	movs	r0, #0
 801017a:	e7e0      	b.n	801013e <_raise_r+0x12>

0801017c <raise>:
 801017c:	4b02      	ldr	r3, [pc, #8]	; (8010188 <raise+0xc>)
 801017e:	4601      	mov	r1, r0
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	f7ff bfd3 	b.w	801012c <_raise_r>
 8010186:	bf00      	nop
 8010188:	20000174 	.word	0x20000174

0801018c <_kill_r>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	4d07      	ldr	r5, [pc, #28]	; (80101ac <_kill_r+0x20>)
 8010190:	2300      	movs	r3, #0
 8010192:	4604      	mov	r4, r0
 8010194:	4608      	mov	r0, r1
 8010196:	4611      	mov	r1, r2
 8010198:	602b      	str	r3, [r5, #0]
 801019a:	f7f2 fbef 	bl	800297c <_kill>
 801019e:	1c43      	adds	r3, r0, #1
 80101a0:	d102      	bne.n	80101a8 <_kill_r+0x1c>
 80101a2:	682b      	ldr	r3, [r5, #0]
 80101a4:	b103      	cbz	r3, 80101a8 <_kill_r+0x1c>
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	bd38      	pop	{r3, r4, r5, pc}
 80101aa:	bf00      	nop
 80101ac:	20003f94 	.word	0x20003f94

080101b0 <_getpid_r>:
 80101b0:	f7f2 bbdc 	b.w	800296c <_getpid>

080101b4 <_malloc_usable_size_r>:
 80101b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b8:	1f18      	subs	r0, r3, #4
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	bfbc      	itt	lt
 80101be:	580b      	ldrlt	r3, [r1, r0]
 80101c0:	18c0      	addlt	r0, r0, r3
 80101c2:	4770      	bx	lr

080101c4 <__swhatbuf_r>:
 80101c4:	b570      	push	{r4, r5, r6, lr}
 80101c6:	460c      	mov	r4, r1
 80101c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101cc:	2900      	cmp	r1, #0
 80101ce:	b096      	sub	sp, #88	; 0x58
 80101d0:	4615      	mov	r5, r2
 80101d2:	461e      	mov	r6, r3
 80101d4:	da0d      	bge.n	80101f2 <__swhatbuf_r+0x2e>
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80101dc:	f04f 0100 	mov.w	r1, #0
 80101e0:	bf0c      	ite	eq
 80101e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80101e6:	2340      	movne	r3, #64	; 0x40
 80101e8:	2000      	movs	r0, #0
 80101ea:	6031      	str	r1, [r6, #0]
 80101ec:	602b      	str	r3, [r5, #0]
 80101ee:	b016      	add	sp, #88	; 0x58
 80101f0:	bd70      	pop	{r4, r5, r6, pc}
 80101f2:	466a      	mov	r2, sp
 80101f4:	f000 f848 	bl	8010288 <_fstat_r>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	dbec      	blt.n	80101d6 <__swhatbuf_r+0x12>
 80101fc:	9901      	ldr	r1, [sp, #4]
 80101fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010202:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010206:	4259      	negs	r1, r3
 8010208:	4159      	adcs	r1, r3
 801020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801020e:	e7eb      	b.n	80101e8 <__swhatbuf_r+0x24>

08010210 <__smakebuf_r>:
 8010210:	898b      	ldrh	r3, [r1, #12]
 8010212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010214:	079d      	lsls	r5, r3, #30
 8010216:	4606      	mov	r6, r0
 8010218:	460c      	mov	r4, r1
 801021a:	d507      	bpl.n	801022c <__smakebuf_r+0x1c>
 801021c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	6123      	str	r3, [r4, #16]
 8010224:	2301      	movs	r3, #1
 8010226:	6163      	str	r3, [r4, #20]
 8010228:	b002      	add	sp, #8
 801022a:	bd70      	pop	{r4, r5, r6, pc}
 801022c:	ab01      	add	r3, sp, #4
 801022e:	466a      	mov	r2, sp
 8010230:	f7ff ffc8 	bl	80101c4 <__swhatbuf_r>
 8010234:	9900      	ldr	r1, [sp, #0]
 8010236:	4605      	mov	r5, r0
 8010238:	4630      	mov	r0, r6
 801023a:	f7ff f8fb 	bl	800f434 <_malloc_r>
 801023e:	b948      	cbnz	r0, 8010254 <__smakebuf_r+0x44>
 8010240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010244:	059a      	lsls	r2, r3, #22
 8010246:	d4ef      	bmi.n	8010228 <__smakebuf_r+0x18>
 8010248:	f023 0303 	bic.w	r3, r3, #3
 801024c:	f043 0302 	orr.w	r3, r3, #2
 8010250:	81a3      	strh	r3, [r4, #12]
 8010252:	e7e3      	b.n	801021c <__smakebuf_r+0xc>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	6020      	str	r0, [r4, #0]
 8010258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801025c:	81a3      	strh	r3, [r4, #12]
 801025e:	9b00      	ldr	r3, [sp, #0]
 8010260:	6163      	str	r3, [r4, #20]
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	6120      	str	r0, [r4, #16]
 8010266:	b15b      	cbz	r3, 8010280 <__smakebuf_r+0x70>
 8010268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801026c:	4630      	mov	r0, r6
 801026e:	f000 f81d 	bl	80102ac <_isatty_r>
 8010272:	b128      	cbz	r0, 8010280 <__smakebuf_r+0x70>
 8010274:	89a3      	ldrh	r3, [r4, #12]
 8010276:	f023 0303 	bic.w	r3, r3, #3
 801027a:	f043 0301 	orr.w	r3, r3, #1
 801027e:	81a3      	strh	r3, [r4, #12]
 8010280:	89a3      	ldrh	r3, [r4, #12]
 8010282:	431d      	orrs	r5, r3
 8010284:	81a5      	strh	r5, [r4, #12]
 8010286:	e7cf      	b.n	8010228 <__smakebuf_r+0x18>

08010288 <_fstat_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d07      	ldr	r5, [pc, #28]	; (80102a8 <_fstat_r+0x20>)
 801028c:	2300      	movs	r3, #0
 801028e:	4604      	mov	r4, r0
 8010290:	4608      	mov	r0, r1
 8010292:	4611      	mov	r1, r2
 8010294:	602b      	str	r3, [r5, #0]
 8010296:	f7f2 fbd0 	bl	8002a3a <_fstat>
 801029a:	1c43      	adds	r3, r0, #1
 801029c:	d102      	bne.n	80102a4 <_fstat_r+0x1c>
 801029e:	682b      	ldr	r3, [r5, #0]
 80102a0:	b103      	cbz	r3, 80102a4 <_fstat_r+0x1c>
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	bf00      	nop
 80102a8:	20003f94 	.word	0x20003f94

080102ac <_isatty_r>:
 80102ac:	b538      	push	{r3, r4, r5, lr}
 80102ae:	4d06      	ldr	r5, [pc, #24]	; (80102c8 <_isatty_r+0x1c>)
 80102b0:	2300      	movs	r3, #0
 80102b2:	4604      	mov	r4, r0
 80102b4:	4608      	mov	r0, r1
 80102b6:	602b      	str	r3, [r5, #0]
 80102b8:	f7f2 fbcf 	bl	8002a5a <_isatty>
 80102bc:	1c43      	adds	r3, r0, #1
 80102be:	d102      	bne.n	80102c6 <_isatty_r+0x1a>
 80102c0:	682b      	ldr	r3, [r5, #0]
 80102c2:	b103      	cbz	r3, 80102c6 <_isatty_r+0x1a>
 80102c4:	6023      	str	r3, [r4, #0]
 80102c6:	bd38      	pop	{r3, r4, r5, pc}
 80102c8:	20003f94 	.word	0x20003f94

080102cc <_init>:
 80102cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ce:	bf00      	nop
 80102d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102d2:	bc08      	pop	{r3}
 80102d4:	469e      	mov	lr, r3
 80102d6:	4770      	bx	lr

080102d8 <_fini>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	bf00      	nop
 80102dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102de:	bc08      	pop	{r3}
 80102e0:	469e      	mov	lr, r3
 80102e2:	4770      	bx	lr
