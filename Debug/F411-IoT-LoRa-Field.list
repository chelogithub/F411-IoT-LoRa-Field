
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0800f29c  0800f29c  0001f29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fce4  0800fce4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcec  0800fcec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcf0  0800fcf0  0001fcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800fcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a20  20000068  0800fd5c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a88  0800fd5c  00023a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151b7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb0  00000000  00000000  00035292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00038148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0c  00000000  00000000  00039298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018605  00000000  00000000  0003a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173fd  00000000  00000000  000526a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093882  00000000  00000000  00069aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005578  00000000  00000000  000fd328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001028a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f284 	.word	0x0800f284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800f284 	.word	0x0800f284

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bd1      	ldr	r3, [pc, #836]	; (80009e0 <main+0x34c>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a4:	4bce      	ldr	r3, [pc, #824]	; (80009e0 <main+0x34c>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22a8      	movs	r2, #168	; 0xa8
 80006ac:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006ae:	4bcc      	ldr	r3, [pc, #816]	; (80009e0 <main+0x34c>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	2200      	movs	r2, #0
 80006b6:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006b8:	4bc9      	ldr	r3, [pc, #804]	; (80009e0 <main+0x34c>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2201      	movs	r2, #1
 80006c0:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c2:	4bc7      	ldr	r3, [pc, #796]	; (80009e0 <main+0x34c>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006ce:	4bc4      	ldr	r3, [pc, #784]	; (80009e0 <main+0x34c>)
 80006d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006da:	4bc1      	ldr	r3, [pc, #772]	; (80009e0 <main+0x34c>)
 80006dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e6:	4bbe      	ldr	r3, [pc, #760]	; (80009e0 <main+0x34c>)
 80006e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f2:	4bbb      	ldr	r3, [pc, #748]	; (80009e0 <main+0x34c>)
 80006f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 80006fe:	4bb8      	ldr	r3, [pc, #736]	; (80009e0 <main+0x34c>)
 8000700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000704:	2208      	movs	r2, #8
 8000706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070a:	4bb5      	ldr	r3, [pc, #724]	; (80009e0 <main+0x34c>)
 800070c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000710:	22dc      	movs	r2, #220	; 0xdc
 8000712:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000716:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x34c>)
 8000718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000722:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <main+0x34c>)
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 800072e:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <main+0x34c>)
 8000730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073a:	4ba9      	ldr	r3, [pc, #676]	; (80009e0 <main+0x34c>)
 800073c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000740:	22c0      	movs	r2, #192	; 0xc0
 8000742:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000746:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <main+0x34c>)
 8000748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074c:	22a8      	movs	r2, #168	; 0xa8
 800074e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000752:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <main+0x34c>)
 8000754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000758:	2200      	movs	r2, #0
 800075a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 800075e:	4ba0      	ldr	r3, [pc, #640]	; (80009e0 <main+0x34c>)
 8000760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000764:	2206      	movs	r2, #6
 8000766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076a:	4b9d      	ldr	r3, [pc, #628]	; (80009e0 <main+0x34c>)
 800076c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000770:	2255      	movs	r2, #85	; 0x55
 8000772:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <main+0x34c>)
 8000778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077c:	2255      	movs	r2, #85	; 0x55
 800077e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000782:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <main+0x34c>)
 8000784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000788:	2201      	movs	r2, #1
 800078a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 800078e:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <main+0x34c>)
 8000790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000794:	22f6      	movs	r2, #246	; 0xf6
 8000796:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079a:	4b91      	ldr	r3, [pc, #580]	; (80009e0 <main+0x34c>)
 800079c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a0:	22c0      	movs	r2, #192	; 0xc0
 80007a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a6:	4b8e      	ldr	r3, [pc, #568]	; (80009e0 <main+0x34c>)
 80007a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ac:	22a8      	movs	r2, #168	; 0xa8
 80007ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b2:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <main+0x34c>)
 80007b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007be:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <main+0x34c>)
 80007c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c4:	2203      	movs	r2, #3
 80007c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007ca:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <main+0x34c>)
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d6:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <main+0x34c>)
 80007d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007dc:	22f6      	movs	r2, #246	; 0xf6
 80007de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e2:	4b7f      	ldr	r3, [pc, #508]	; (80009e0 <main+0x34c>)
 80007e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f0:	4b7b      	ldr	r3, [pc, #492]	; (80009e0 <main+0x34c>)
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <main+0x34c>)
 8000800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000804:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080c:	4b74      	ldr	r3, [pc, #464]	; (80009e0 <main+0x34c>)
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081a:	4b71      	ldr	r3, [pc, #452]	; (80009e0 <main+0x34c>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000820:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000828:	4b6d      	ldr	r3, [pc, #436]	; (80009e0 <main+0x34c>)
 800082a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <main+0x34c>)
 8000838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083c:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000844:	4b66      	ldr	r3, [pc, #408]	; (80009e0 <main+0x34c>)
 8000846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800084e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000852:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <main+0x34c>)
 8000854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000860:	4b5f      	ldr	r3, [pc, #380]	; (80009e0 <main+0x34c>)
 8000862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000866:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 800086e:	4b5c      	ldr	r3, [pc, #368]	; (80009e0 <main+0x34c>)
 8000870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000874:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087c:	4b58      	ldr	r3, [pc, #352]	; (80009e0 <main+0x34c>)
 800087e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000882:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088a:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <main+0x34c>)
 800088c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000890:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 8000898:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <main+0x34c>)
 800089a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <main+0x34c>)
 80008a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ac:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <main+0x34c>)
 80008b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c2:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <main+0x34c>)
 80008c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		wf._data2SND[14]=0x34;
		wf._data2SND[15]=0x35;
		wf._n_D2SND=12;
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;*/
		wf._DBG_EN=1;
 80008ce:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <main+0x350>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <main+0x354>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	4a43      	ldr	r2, [pc, #268]	; (80009ec <main+0x358>)
 80008e0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <main+0x34c>)
 80008e4:	2210      	movs	r2, #16
 80008e6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <main+0x34c>)
 80008ea:	4a41      	ldr	r2, [pc, #260]	; (80009f0 <main+0x35c>)
 80008ec:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00a fe96 	bl	800b620 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <main+0x360>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 80008fa:	483f      	ldr	r0, [pc, #252]	; (80009f8 <main+0x364>)
 80008fc:	f00a fe90 	bl	800b620 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000900:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <main+0x364>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000906:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800090a:	2103      	movs	r1, #3
 800090c:	483a      	ldr	r0, [pc, #232]	; (80009f8 <main+0x364>)
 800090e:	f00a ff2a 	bl	800b766 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f001 fd5d 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f94f 	bl	8000bb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <main+0x368>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <main+0x36c>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	099b      	lsrs	r3, r3, #6
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe6a 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f000 fb56 	bl	8000fdc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000930:	f000 f9aa 	bl	8000c88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000934:	f000 fad4 	bl	8000ee0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000938:	f000 fafc 	bl	8000f34 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800093c:	f000 fb24 	bl	8000f88 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000940:	f000 f9d8 	bl	8000cf4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000944:	f000 fa50 	bl	8000de8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	4827      	ldr	r0, [pc, #156]	; (80009ec <main+0x358>)
 800094e:	f002 fa13 	bl	8002d78 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000952:	210e      	movs	r1, #14
 8000954:	482b      	ldr	r0, [pc, #172]	; (8000a04 <main+0x370>)
 8000956:	f000 fbc9 	bl	80010ec <ITM0_Write>
     //240103 ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
     //240103 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800095a:	2201      	movs	r2, #1
 800095c:	492a      	ldr	r1, [pc, #168]	; (8000a08 <main+0x374>)
 800095e:	482b      	ldr	r0, [pc, #172]	; (8000a0c <main+0x378>)
 8000960:	f004 fb33 	bl	8004fca <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000964:	2201      	movs	r2, #1
 8000966:	492a      	ldr	r1, [pc, #168]	; (8000a10 <main+0x37c>)
 8000968:	482a      	ldr	r0, [pc, #168]	; (8000a14 <main+0x380>)
 800096a:	f004 fb2e 	bl	8004fca <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <main+0x384>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <main+0x2ea>
 8000976:	2112      	movs	r1, #18
 8000978:	4828      	ldr	r0, [pc, #160]	; (8000a1c <main+0x388>)
 800097a:	f000 fbb7 	bl	80010ec <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 8000980:	22f0      	movs	r2, #240	; 0xf0
 8000982:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	2200      	movs	r2, #0
 8000988:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <main+0x34c>)
 800098c:	2201      	movs	r2, #1
 800098e:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <main+0x34c>)
 8000992:	22c0      	movs	r2, #192	; 0xc0
 8000994:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <main+0x34c>)
 8000998:	f00c fb10 	bl	800cfbc <eth_init>

   	 eth_socket_init(&ETH,0);
 800099c:	2100      	movs	r1, #0
 800099e:	4810      	ldr	r0, [pc, #64]	; (80009e0 <main+0x34c>)
 80009a0:	f00c fb86 	bl	800d0b0 <eth_socket_init>

   SPI_READ_EN=1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <main+0x38c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <main+0x34c>)
 80009ac:	220f      	movs	r2, #15
 80009ae:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <main+0x34c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	75da      	strb	r2, [r3, #23]
   		  ESP_HW_Init=0;
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
   	  }
     }*/

     HAL_Delay(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f001 fd75 	bl	80024b4 <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 80009ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <main+0x390>)
 80009d0:	f00a f982 	bl	800acd8 <LoRa_set_sndTIMER>
	  						}
	  					}

	  		}*/
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <main+0x394>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d02c      	beq.n	8000a36 <main+0x3a2>
 80009dc:	e026      	b.n	8000a2c <main+0x398>
 80009de:	bf00      	nop
 80009e0:	20002234 	.word	0x20002234
 80009e4:	20000a48 	.word	0x20000a48
 80009e8:	200032e4 	.word	0x200032e4
 80009ec:	40020000 	.word	0x40020000
 80009f0:	20000084 	.word	0x20000084
 80009f4:	20001794 	.word	0x20001794
 80009f8:	20001ce0 	.word	0x20001ce0
 80009fc:	20000000 	.word	0x20000000
 8000a00:	10624dd3 	.word	0x10624dd3
 8000a04:	0800f29c 	.word	0x0800f29c
 8000a08:	200038f8 	.word	0x200038f8
 8000a0c:	2000016c 	.word	0x2000016c
 8000a10:	200038fc 	.word	0x200038fc
 8000a14:	200001b0 	.word	0x200001b0
 8000a18:	2000222c 	.word	0x2000222c
 8000a1c:	0800f2ac 	.word	0x0800f2ac
 8000a20:	200032f0 	.word	0x200032f0
 8000a24:	20000240 	.word	0x20000240
 8000a28:	200032ea 	.word	0x200032ea
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <main+0x4e0>)
 8000a2e:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d16c      	bne.n	8000b10 <main+0x47c>
	  		{
	  			if(FLAG_UART2==1)
 8000a36:	4b50      	ldr	r3, [pc, #320]	; (8000b78 <main+0x4e4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d105      	bne.n	8000a4a <main+0x3b6>
	  				{
	  				FLAG_UART2=0;
 8000a3e:	4b4e      	ldr	r3, [pc, #312]	; (8000b78 <main+0x4e4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000a44:	484b      	ldr	r0, [pc, #300]	; (8000b74 <main+0x4e0>)
 8000a46:	f00a f963 	bl	800ad10 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <main+0x4e0>)
 8000a4c:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d15d      	bne.n	8000b10 <main+0x47c>
	  				{
	  					lr.tmr_dly_ON=0;
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <main+0x4e0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000a5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a60:	4844      	ldr	r0, [pc, #272]	; (8000b74 <main+0x4e0>)
 8000a62:	f00a f939 	bl	800acd8 <LoRa_set_sndTIMER>
						lr.dest_address[0]='\0';
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <main+0x4e0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <main+0x4e0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

			  			/*strncat(lr.dest_address,"1",1);
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");*/
		  				lr.estado=_SENT;
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <main+0x4e0>)
 8000a76:	2214      	movs	r2, #20
 8000a78:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000a7c:	483f      	ldr	r0, [pc, #252]	; (8000b7c <main+0x4e8>)
 8000a7e:	f7ff fbb9 	bl	80001f4 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <main+0x4e8>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	493d      	ldr	r1, [pc, #244]	; (8000b80 <main+0x4ec>)
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000a98:	e027      	b.n	8000aea <main+0x456>
		  					{
			  					data[0]='\0';
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	713b      	strb	r3, [r7, #4]
			  					itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4837      	ldr	r0, [pc, #220]	; (8000b84 <main+0x4f0>)
 8000aa6:	f00a fe8c 	bl	800b7c2 <ModBUS_F03_Read>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f00d f933 	bl	800dd1e <itoa>
								strncat(lr.txbuff,data,strlen(data));
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fb9a 	bl	80001f4 <strlen>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4830      	ldr	r0, [pc, #192]	; (8000b88 <main+0x4f4>)
 8000ac8:	f00d fb15 	bl	800e0f6 <strncat>
								strncat(lr.txbuff,";",1);
 8000acc:	482e      	ldr	r0, [pc, #184]	; (8000b88 <main+0x4f4>)
 8000ace:	f7ff fb91 	bl	80001f4 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <main+0x4f4>)
 8000ad8:	4413      	add	r3, r2
 8000ada:	492c      	ldr	r1, [pc, #176]	; (8000b8c <main+0x4f8>)
 8000adc:	461a      	mov	r2, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	8013      	strh	r3, [r2, #0]
								n++;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	ddd4      	ble.n	8000a9a <main+0x406>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000af0:	4825      	ldr	r0, [pc, #148]	; (8000b88 <main+0x4f4>)
 8000af2:	f7ff fb7f 	bl	80001f4 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <main+0x4e0>)
 8000afc:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000b00:	4923      	ldr	r1, [pc, #140]	; (8000b90 <main+0x4fc>)
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <main+0x4e0>)
 8000b04:	f00a f83a 	bl	800ab7c <LoRa_Send>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <main+0x500>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <main+0x504>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <main+0x496>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4920      	ldr	r1, [pc, #128]	; (8000b9c <main+0x508>)
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <main+0x50c>)
 8000b1e:	f008 fbbf 	bl	80092a0 <WiFi_Conn_ND>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x510>)
 8000b28:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <main+0x514>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	f47f af50 	bne.w	80009d4 <main+0x340>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	481c      	ldr	r0, [pc, #112]	; (8000bac <main+0x518>)
 8000b3c:	f002 f91c 	bl	8002d78 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000b40:	2115      	movs	r1, #21
 8000b42:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <main+0x51c>)
 8000b44:	f000 fad2 	bl	80010ec <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000b48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4c:	f001 fcb2 	bl	80024b4 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <main+0x518>)
 8000b58:	f002 f90e 	bl	8002d78 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000b5c:	2118      	movs	r1, #24
 8000b5e:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <main+0x520>)
 8000b60:	f000 fac4 	bl	80010ec <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000b64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b68:	f001 fca4 	bl	80024b4 <HAL_Delay>
	  				esp_restart=0;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <main+0x514>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000b72:	e72f      	b.n	80009d4 <main+0x340>
 8000b74:	20000240 	.word	0x20000240
 8000b78:	200032ea 	.word	0x200032ea
 8000b7c:	20000256 	.word	0x20000256
 8000b80:	0800f2c0 	.word	0x0800f2c0
 8000b84:	20001794 	.word	0x20001794
 8000b88:	2000071c 	.word	0x2000071c
 8000b8c:	0800f2c4 	.word	0x0800f2c4
 8000b90:	200001b0 	.word	0x200001b0
 8000b94:	20000a44 	.word	0x20000a44
 8000b98:	200032e5 	.word	0x200032e5
 8000b9c:	2000016c 	.word	0x2000016c
 8000ba0:	20000a48 	.word	0x20000a48
 8000ba4:	200032ec 	.word	0x200032ec
 8000ba8:	200032eb 	.word	0x200032eb
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	0800f2c8 	.word	0x0800f2c8
 8000bb4:	0800f2e0 	.word	0x0800f2e0

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00d fa8d 	bl	800e0e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <SystemClock_Config+0xc8>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a26      	ldr	r2, [pc, #152]	; (8000c80 <SystemClock_Config+0xc8>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <SystemClock_Config+0xc8>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <SystemClock_Config+0xcc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <SystemClock_Config+0xcc>)
 8000c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <SystemClock_Config+0xcc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c2c:	2360      	movs	r3, #96	; 0x60
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 f8cf 	bl	8002de0 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c48:	f001 f8ae 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2103      	movs	r1, #3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fb31 	bl	80032d0 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c74:	f001 f898 	bl	8001da8 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3750      	adds	r7, #80	; 0x50
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <MX_SPI1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cbc:	2210      	movs	r2, #16
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cda:	f002 fcd9 	bl	8003690 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f001 f860 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d2e:	2264      	movs	r2, #100	; 0x64
 8000d30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d3a:	2264      	movs	r2, #100	; 0x64
 8000d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4a:	4826      	ldr	r0, [pc, #152]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d4c:	f002 ff96 	bl	8003c7c <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d56:	f001 f827 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d68:	f003 fb9e 	bl	80044a8 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d72:	f001 f819 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000d76:	481b      	ldr	r0, [pc, #108]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d78:	f002 ffcf 	bl	8003d1a <HAL_TIM_OC_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d82:	f001 f811 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d86:	2108      	movs	r1, #8
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000d8a:	f003 f9cf 	bl	800412c <HAL_TIM_OnePulse_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d94:	f001 f808 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4619      	mov	r1, r3
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000da8:	f003 ff3a 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000db2:	f000 fff9 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000db6:	2320      	movs	r3, #32
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0xf0>)
 8000dce:	f003 fb0f 	bl	80043f0 <HAL_TIM_OC_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000dd8:	f000 ffe6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3738      	adds	r7, #56	; 0x38
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000dc 	.word	0x200000dc

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <MX_TIM3_Init+0xf4>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e20:	2264      	movs	r2, #100	; 0x64
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e2c:	2296      	movs	r2, #150	; 0x96
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e3e:	f002 ff1d 	bl	8003c7c <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e48:	f000 ffae 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e5a:	f003 fb25 	bl	80044a8 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e64:	f000 ffa0 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e68:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e6a:	f002 ff56 	bl	8003d1a <HAL_TIM_OC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e74:	f000 ff98 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e7c:	f003 f956 	bl	800412c <HAL_TIM_OnePulse_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000e86:	f000 ff8f 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	4619      	mov	r1, r3
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000e9a:	f003 fec1 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000ea4:	f000 ff80 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM3_Init+0xf0>)
 8000ec0:	f003 fa96 	bl	80043f0 <HAL_TIM_OC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000eca:	f000 ff6d 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	; 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000124 	.word	0x20000124
 8000edc:	40000400 	.word	0x40000400

08000ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f003 ff04 	bl	8004d24 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 ff41 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000016c 	.word	0x2000016c
 8000f30:	40011000 	.word	0x40011000

08000f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART2_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f003 feda 	bl	8004d24 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f000 ff17 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001b0 	.word	0x200001b0
 8000f84:	40004400 	.word	0x40004400

08000f88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	f003 feb0 	bl	8004d24 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 feed 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f4 	.word	0x200001f4
 8000fd8:	40011400 	.word	0x40011400

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <MX_GPIO_Init+0x104>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <MX_GPIO_Init+0x104>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_GPIO_Init+0x104>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_GPIO_Init+0x104>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_GPIO_Init+0x104>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	481e      	ldr	r0, [pc, #120]	; (80010e4 <MX_GPIO_Init+0x108>)
 800106a:	f001 fe85 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	481d      	ldr	r0, [pc, #116]	; (80010e8 <MX_GPIO_Init+0x10c>)
 8001074:	f001 fe80 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2110      	movs	r1, #16
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x10c>)
 800107e:	f001 fe7b 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4812      	ldr	r0, [pc, #72]	; (80010e4 <MX_GPIO_Init+0x108>)
 800109c:	f001 fc04 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80010a0:	f240 1301 	movw	r3, #257	; 0x101
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_GPIO_Init+0x10c>)
 80010b6:	f001 fbf7 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 80010ba:	2312      	movs	r3, #18
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x10c>)
 80010d2:	f001 fbe9 	bl	80028a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020000 	.word	0x40020000

080010ec <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e009      	b.n	8001110 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa9d 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf1      	blt.n	80010fc <ITM0_Write+0x10>
  }
  return len;
 8001118:	683b      	ldr	r3, [r7, #0]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800112a:	4bbf      	ldr	r3, [pc, #764]	; (8001428 <SysTick_Handler+0x304>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4abd      	ldr	r2, [pc, #756]	; (8001428 <SysTick_Handler+0x304>)
 8001132:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001134:	4bbd      	ldr	r3, [pc, #756]	; (800142c <SysTick_Handler+0x308>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4abc      	ldr	r2, [pc, #752]	; (800142c <SysTick_Handler+0x308>)
 800113c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800113e:	4bbc      	ldr	r3, [pc, #752]	; (8001430 <SysTick_Handler+0x30c>)
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <SysTick_Handler+0x2c>
 8001146:	4bbb      	ldr	r3, [pc, #748]	; (8001434 <SysTick_Handler+0x310>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4ab9      	ldr	r2, [pc, #740]	; (8001434 <SysTick_Handler+0x310>)
 800114e:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001150:	4bb7      	ldr	r3, [pc, #732]	; (8001430 <SysTick_Handler+0x30c>)
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <SysTick_Handler+0x4e>
 8001158:	4bb5      	ldr	r3, [pc, #724]	; (8001430 <SysTick_Handler+0x30c>)
 800115a:	885b      	ldrh	r3, [r3, #2]
 800115c:	461a      	mov	r2, r3
 800115e:	4bb5      	ldr	r3, [pc, #724]	; (8001434 <SysTick_Handler+0x310>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	da05      	bge.n	8001172 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001166:	4bb2      	ldr	r3, [pc, #712]	; (8001430 <SysTick_Handler+0x30c>)
 8001168:	2200      	movs	r2, #0
 800116a:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 800116c:	4bb1      	ldr	r3, [pc, #708]	; (8001434 <SysTick_Handler+0x310>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 8001172:	4bb1      	ldr	r3, [pc, #708]	; (8001438 <SysTick_Handler+0x314>)
 8001174:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001178:	2b01      	cmp	r3, #1
 800117a:	d116      	bne.n	80011aa <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 800117c:	4bae      	ldr	r3, [pc, #696]	; (8001438 <SysTick_Handler+0x314>)
 800117e:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 8001182:	3301      	adds	r3, #1
 8001184:	4aac      	ldr	r2, [pc, #688]	; (8001438 <SysTick_Handler+0x314>)
 8001186:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 800118a:	4bab      	ldr	r3, [pc, #684]	; (8001438 <SysTick_Handler+0x314>)
 800118c:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001190:	4ba9      	ldr	r3, [pc, #676]	; (8001438 <SysTick_Handler+0x314>)
 8001192:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001196:	429a      	cmp	r2, r3
 8001198:	dd07      	ble.n	80011aa <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 800119a:	4ba7      	ldr	r3, [pc, #668]	; (8001438 <SysTick_Handler+0x314>)
 800119c:	2201      	movs	r2, #1
 800119e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 80011a2:	4ba5      	ldr	r3, [pc, #660]	; (8001438 <SysTick_Handler+0x314>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	//240103 if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 80011aa:	4ba4      	ldr	r3, [pc, #656]	; (800143c <SysTick_Handler+0x318>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011b2:	db0c      	blt.n	80011ce <SysTick_Handler+0xaa>
 80011b4:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <SysTick_Handler+0x31c>)
 80011b6:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d007      	beq.n	80011ce <SysTick_Handler+0xaa>
 80011be:	4ba0      	ldr	r3, [pc, #640]	; (8001440 <SysTick_Handler+0x31c>)
 80011c0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <SysTick_Handler+0xaa>
 80011c8:	4b9e      	ldr	r3, [pc, #632]	; (8001444 <SysTick_Handler+0x320>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80011ce:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <SysTick_Handler+0x324>)
 80011d0:	7b9b      	ldrb	r3, [r3, #14]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <SysTick_Handler+0xd0>
	{
		ETH.ETH_WDG++;
 80011d6:	4b9c      	ldr	r3, [pc, #624]	; (8001448 <SysTick_Handler+0x324>)
 80011d8:	899b      	ldrh	r3, [r3, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b9a      	ldr	r3, [pc, #616]	; (8001448 <SysTick_Handler+0x324>)
 80011e0:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 80011e2:	4b99      	ldr	r3, [pc, #612]	; (8001448 <SysTick_Handler+0x324>)
 80011e4:	899b      	ldrh	r3, [r3, #12]
 80011e6:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80011ea:	d303      	bcc.n	80011f4 <SysTick_Handler+0xd0>
		{
			ETH.ETH_WDG=64000;
 80011ec:	4b96      	ldr	r3, [pc, #600]	; (8001448 <SysTick_Handler+0x324>)
 80011ee:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80011f2:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80011f4:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <SysTick_Handler+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	f040 841f 	bne.w	8001a3c <SysTick_Handler+0x918>
  {
	  dbgn++;
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <SysTick_Handler+0x328>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a91      	ldr	r2, [pc, #580]	; (800144c <SysTick_Handler+0x328>)
 8001206:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001208:	4b87      	ldr	r3, [pc, #540]	; (8001428 <SysTick_Handler+0x304>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800120e:	4b90      	ldr	r3, [pc, #576]	; (8001450 <SysTick_Handler+0x32c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a8e      	ldr	r2, [pc, #568]	; (8001450 <SysTick_Handler+0x32c>)
 8001216:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001218:	4b8e      	ldr	r3, [pc, #568]	; (8001454 <SysTick_Handler+0x330>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001220:	d102      	bne.n	8001228 <SysTick_Handler+0x104>
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <SysTick_Handler+0x330>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001228:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <SysTick_Handler+0x334>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <SysTick_Handler+0x116>
 8001230:	4b88      	ldr	r3, [pc, #544]	; (8001454 <SysTick_Handler+0x330>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a87      	ldr	r2, [pc, #540]	; (8001454 <SysTick_Handler+0x330>)
 8001238:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <SysTick_Handler+0x330>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d102      	bne.n	8001248 <SysTick_Handler+0x124>
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <SysTick_Handler+0x334>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001248:	4b83      	ldr	r3, [pc, #524]	; (8001458 <SysTick_Handler+0x334>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d104      	bne.n	800125a <SysTick_Handler+0x136>
 8001250:	4b80      	ldr	r3, [pc, #512]	; (8001454 <SysTick_Handler+0x330>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a7f      	ldr	r2, [pc, #508]	; (8001454 <SysTick_Handler+0x330>)
 8001258:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 800125a:	4b7e      	ldr	r3, [pc, #504]	; (8001454 <SysTick_Handler+0x330>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <SysTick_Handler+0x144>
 8001262:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <SysTick_Handler+0x334>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	487b      	ldr	r0, [pc, #492]	; (800145c <SysTick_Handler+0x338>)
 800126e:	f001 fd9c 	bl	8002daa <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001272:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <SysTick_Handler+0x33c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 83d0 	beq.w	8001a1c <SysTick_Handler+0x8f8>
	  	  {
	  if(SPI_READ_EN)
 800127c:	4b79      	ldr	r3, [pc, #484]	; (8001464 <SysTick_Handler+0x340>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 83cf 	beq.w	8001a24 <SysTick_Handler+0x900>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001286:	2100      	movs	r1, #0
 8001288:	486f      	ldr	r0, [pc, #444]	; (8001448 <SysTick_Handler+0x324>)
 800128a:	f00b ff8d 	bl	800d1a8 <eth_rd_SOCKET_STAT>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <SysTick_Handler+0x324>)
 8001294:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001296:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <SysTick_Handler+0x324>)
 8001298:	7b9b      	ldrb	r3, [r3, #14]
 800129a:	2b5f      	cmp	r3, #95	; 0x5f
 800129c:	f200 83c7 	bhi.w	8001a2e <SysTick_Handler+0x90a>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <SysTick_Handler+0x184>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	08001469 	.word	0x08001469
 80012ac:	08001a2f 	.word	0x08001a2f
 80012b0:	08001a2f 	.word	0x08001a2f
 80012b4:	08001a2f 	.word	0x08001a2f
 80012b8:	08001a2f 	.word	0x08001a2f
 80012bc:	08001a2f 	.word	0x08001a2f
 80012c0:	08001a2f 	.word	0x08001a2f
 80012c4:	08001a2f 	.word	0x08001a2f
 80012c8:	08001a2f 	.word	0x08001a2f
 80012cc:	08001a2f 	.word	0x08001a2f
 80012d0:	08001a2f 	.word	0x08001a2f
 80012d4:	08001a2f 	.word	0x08001a2f
 80012d8:	08001a2f 	.word	0x08001a2f
 80012dc:	08001a2f 	.word	0x08001a2f
 80012e0:	08001a2f 	.word	0x08001a2f
 80012e4:	08001a2f 	.word	0x08001a2f
 80012e8:	08001a2f 	.word	0x08001a2f
 80012ec:	08001a2f 	.word	0x08001a2f
 80012f0:	08001a2f 	.word	0x08001a2f
 80012f4:	080014a1 	.word	0x080014a1
 80012f8:	080014f3 	.word	0x080014f3
 80012fc:	0800150b 	.word	0x0800150b
 8001300:	08001523 	.word	0x08001523
 8001304:	0800153b 	.word	0x0800153b
 8001308:	08001897 	.word	0x08001897
 800130c:	08001a2f 	.word	0x08001a2f
 8001310:	080018af 	.word	0x080018af
 8001314:	080018c7 	.word	0x080018c7
 8001318:	08001905 	.word	0x08001905
 800131c:	08001943 	.word	0x08001943
 8001320:	08001a2f 	.word	0x08001a2f
 8001324:	08001a2f 	.word	0x08001a2f
 8001328:	08001a2f 	.word	0x08001a2f
 800132c:	08001a2f 	.word	0x08001a2f
 8001330:	0800195b 	.word	0x0800195b
 8001334:	08001a2f 	.word	0x08001a2f
 8001338:	08001a2f 	.word	0x08001a2f
 800133c:	08001a2f 	.word	0x08001a2f
 8001340:	08001a2f 	.word	0x08001a2f
 8001344:	08001a2f 	.word	0x08001a2f
 8001348:	08001a2f 	.word	0x08001a2f
 800134c:	08001a2f 	.word	0x08001a2f
 8001350:	08001a2f 	.word	0x08001a2f
 8001354:	08001a2f 	.word	0x08001a2f
 8001358:	08001a2f 	.word	0x08001a2f
 800135c:	08001a2f 	.word	0x08001a2f
 8001360:	08001a2f 	.word	0x08001a2f
 8001364:	08001a2f 	.word	0x08001a2f
 8001368:	08001a2f 	.word	0x08001a2f
 800136c:	08001a2f 	.word	0x08001a2f
 8001370:	080019d5 	.word	0x080019d5
 8001374:	08001a2f 	.word	0x08001a2f
 8001378:	08001a2f 	.word	0x08001a2f
 800137c:	08001a2f 	.word	0x08001a2f
 8001380:	08001a2f 	.word	0x08001a2f
 8001384:	08001a2f 	.word	0x08001a2f
 8001388:	08001a2f 	.word	0x08001a2f
 800138c:	08001a2f 	.word	0x08001a2f
 8001390:	08001a2f 	.word	0x08001a2f
 8001394:	08001a2f 	.word	0x08001a2f
 8001398:	08001a2f 	.word	0x08001a2f
 800139c:	08001a2f 	.word	0x08001a2f
 80013a0:	08001a2f 	.word	0x08001a2f
 80013a4:	08001a2f 	.word	0x08001a2f
 80013a8:	08001a2f 	.word	0x08001a2f
 80013ac:	08001a2f 	.word	0x08001a2f
 80013b0:	080019ed 	.word	0x080019ed
 80013b4:	08001a2f 	.word	0x08001a2f
 80013b8:	08001a2f 	.word	0x08001a2f
 80013bc:	08001a2f 	.word	0x08001a2f
 80013c0:	08001a2f 	.word	0x08001a2f
 80013c4:	08001a2f 	.word	0x08001a2f
 80013c8:	08001a2f 	.word	0x08001a2f
 80013cc:	08001a2f 	.word	0x08001a2f
 80013d0:	08001a2f 	.word	0x08001a2f
 80013d4:	08001a2f 	.word	0x08001a2f
 80013d8:	08001a2f 	.word	0x08001a2f
 80013dc:	08001a2f 	.word	0x08001a2f
 80013e0:	08001a2f 	.word	0x08001a2f
 80013e4:	08001a2f 	.word	0x08001a2f
 80013e8:	08001a2f 	.word	0x08001a2f
 80013ec:	08001a2f 	.word	0x08001a2f
 80013f0:	08001a2f 	.word	0x08001a2f
 80013f4:	08001a2f 	.word	0x08001a2f
 80013f8:	08001a2f 	.word	0x08001a2f
 80013fc:	08001a2f 	.word	0x08001a2f
 8001400:	08001a2f 	.word	0x08001a2f
 8001404:	08001a2f 	.word	0x08001a2f
 8001408:	08001a2f 	.word	0x08001a2f
 800140c:	08001a2f 	.word	0x08001a2f
 8001410:	08001a2f 	.word	0x08001a2f
 8001414:	08001a2f 	.word	0x08001a2f
 8001418:	08001a2f 	.word	0x08001a2f
 800141c:	08001a2f 	.word	0x08001a2f
 8001420:	08001a2f 	.word	0x08001a2f
 8001424:	08001a05 	.word	0x08001a05
 8001428:	20000238 	.word	0x20000238
 800142c:	2000390c 	.word	0x2000390c
 8001430:	20001794 	.word	0x20001794
 8001434:	20003914 	.word	0x20003914
 8001438:	20000240 	.word	0x20000240
 800143c:	20002230 	.word	0x20002230
 8001440:	20000a48 	.word	0x20000a48
 8001444:	2000222d 	.word	0x2000222d
 8001448:	20002234 	.word	0x20002234
 800144c:	20003930 	.word	0x20003930
 8001450:	2000023c 	.word	0x2000023c
 8001454:	20003910 	.word	0x20003910
 8001458:	200032ed 	.word	0x200032ed
 800145c:	40020800 	.word	0x40020800
 8001460:	200032e4 	.word	0x200032e4
 8001464:	200032f0 	.word	0x200032f0
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001468:	4b82      	ldr	r3, [pc, #520]	; (8001674 <SysTick_Handler+0x550>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <SysTick_Handler+0x354>
 8001470:	2113      	movs	r1, #19
 8001472:	4881      	ldr	r0, [pc, #516]	; (8001678 <SysTick_Handler+0x554>)
 8001474:	f7ff fe3a 	bl	80010ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001478:	2201      	movs	r2, #1
 800147a:	2100      	movs	r1, #0
 800147c:	487f      	ldr	r0, [pc, #508]	; (800167c <SysTick_Handler+0x558>)
 800147e:	f00b fd61 	bl	800cf44 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001482:	4b7e      	ldr	r3, [pc, #504]	; (800167c <SysTick_Handler+0x558>)
 8001484:	899b      	ldrh	r3, [r3, #12]
 8001486:	f241 3287 	movw	r2, #4999	; 0x1387
 800148a:	4293      	cmp	r3, r2
 800148c:	f240 82cc 	bls.w	8001a28 <SysTick_Handler+0x904>
					 {
						 eth_init(&ETH);
 8001490:	487a      	ldr	r0, [pc, #488]	; (800167c <SysTick_Handler+0x558>)
 8001492:	f00b fd93 	bl	800cfbc <eth_init>

						 eth_socket_init(&ETH,0);
 8001496:	2100      	movs	r1, #0
 8001498:	4878      	ldr	r0, [pc, #480]	; (800167c <SysTick_Handler+0x558>)
 800149a:	f00b fe09 	bl	800d0b0 <eth_socket_init>
					 }

				 }
			 break;
 800149e:	e2c3      	b.n	8001a28 <SysTick_Handler+0x904>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 80014a0:	4b76      	ldr	r3, [pc, #472]	; (800167c <SysTick_Handler+0x558>)
 80014a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d110      	bne.n	80014d0 <SysTick_Handler+0x3ac>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80014ae:	4b71      	ldr	r3, [pc, #452]	; (8001674 <SysTick_Handler+0x550>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <SysTick_Handler+0x39a>
 80014b6:	2111      	movs	r1, #17
 80014b8:	4871      	ldr	r0, [pc, #452]	; (8001680 <SysTick_Handler+0x55c>)
 80014ba:	f7ff fe17 	bl	80010ec <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 80014be:	2202      	movs	r2, #2
 80014c0:	2100      	movs	r1, #0
 80014c2:	486e      	ldr	r0, [pc, #440]	; (800167c <SysTick_Handler+0x558>)
 80014c4:	f00b fd3e 	bl	800cf44 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <SysTick_Handler+0x558>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80014ce:	e2ae      	b.n	8001a2e <SysTick_Handler+0x90a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 80014d0:	2204      	movs	r2, #4
 80014d2:	2100      	movs	r1, #0
 80014d4:	4869      	ldr	r0, [pc, #420]	; (800167c <SysTick_Handler+0x558>)
 80014d6:	f00b fd35 	bl	800cf44 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <SysTick_Handler+0x550>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <SysTick_Handler+0x3c6>
 80014e2:	2115      	movs	r1, #21
 80014e4:	4867      	ldr	r0, [pc, #412]	; (8001684 <SysTick_Handler+0x560>)
 80014e6:	f7ff fe01 	bl	80010ec <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80014ea:	4b64      	ldr	r3, [pc, #400]	; (800167c <SysTick_Handler+0x558>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	819a      	strh	r2, [r3, #12]
			 break;
 80014f0:	e29d      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <SysTick_Handler+0x550>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <SysTick_Handler+0x3de>
 80014fa:	2113      	movs	r1, #19
 80014fc:	4862      	ldr	r0, [pc, #392]	; (8001688 <SysTick_Handler+0x564>)
 80014fe:	f7ff fdf5 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <SysTick_Handler+0x558>)
 8001504:	2200      	movs	r2, #0
 8001506:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001508:	e291      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 800150a:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <SysTick_Handler+0x550>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <SysTick_Handler+0x3f6>
 8001512:	2114      	movs	r1, #20
 8001514:	485d      	ldr	r0, [pc, #372]	; (800168c <SysTick_Handler+0x568>)
 8001516:	f7ff fde9 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <SysTick_Handler+0x558>)
 800151c:	2200      	movs	r2, #0
 800151e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001520:	e285      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <SysTick_Handler+0x550>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <SysTick_Handler+0x40e>
 800152a:	2114      	movs	r1, #20
 800152c:	4858      	ldr	r0, [pc, #352]	; (8001690 <SysTick_Handler+0x56c>)
 800152e:	f7ff fddd 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001532:	4b52      	ldr	r3, [pc, #328]	; (800167c <SysTick_Handler+0x558>)
 8001534:	2200      	movs	r2, #0
 8001536:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001538:	e279      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <SysTick_Handler+0x550>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <SysTick_Handler+0x426>
 8001542:	2118      	movs	r1, #24
 8001544:	4853      	ldr	r0, [pc, #332]	; (8001694 <SysTick_Handler+0x570>)
 8001546:	f7ff fdd1 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <SysTick_Handler+0x558>)
 800154c:	2200      	movs	r2, #0
 800154e:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <SysTick_Handler+0x558>)
 8001552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800155a:	2b01      	cmp	r3, #1
 800155c:	f040 80b0 	bne.w	80016c0 <SysTick_Handler+0x59c>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001560:	2302      	movs	r3, #2
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <SysTick_Handler+0x574>)
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	230f      	movs	r3, #15
 800156a:	2226      	movs	r2, #38	; 0x26
 800156c:	2104      	movs	r1, #4
 800156e:	4843      	ldr	r0, [pc, #268]	; (800167c <SysTick_Handler+0x558>)
 8001570:	f00b fbbd 	bl	800ccee <SPI_ETH_REG>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <SysTick_Handler+0x578>)
 800157a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 800157c:	4b47      	ldr	r3, [pc, #284]	; (800169c <SysTick_Handler+0x578>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8253 	beq.w	8001a2c <SysTick_Handler+0x908>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <SysTick_Handler+0x578>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <SysTick_Handler+0x57c>)
 800158c:	2100      	movs	r1, #0
 800158e:	483b      	ldr	r0, [pc, #236]	; (800167c <SysTick_Handler+0x558>)
 8001590:	f00b fe44 	bl	800d21c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <SysTick_Handler+0x57c>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <SysTick_Handler+0x558>)
 80015a0:	f00b fc1d 	bl	800cdde <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	2100      	movs	r1, #0
 80015a8:	4834      	ldr	r0, [pc, #208]	; (800167c <SysTick_Handler+0x558>)
 80015aa:	f00b fccb 	bl	800cf44 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80015ae:	bf00      	nop
 80015b0:	2100      	movs	r1, #0
 80015b2:	4832      	ldr	r0, [pc, #200]	; (800167c <SysTick_Handler+0x558>)
 80015b4:	f00b fe15 	bl	800d1e2 <eth_rd_SOCKET_CMD>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f8      	bne.n	80015b0 <SysTick_Handler+0x48c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <SysTick_Handler+0x578>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	2300      	movs	r3, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <SysTick_Handler+0x580>)
 80015cc:	4836      	ldr	r0, [pc, #216]	; (80016a8 <SysTick_Handler+0x584>)
 80015ce:	f00c fb3f 	bl	800dc50 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <SysTick_Handler+0x578>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <SysTick_Handler+0x588>)
 80015da:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <SysTick_Handler+0x578>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <SysTick_Handler+0x4c8>
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <SysTick_Handler+0x558>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <SysTick_Handler+0x588>)
 80015ee:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80015f2:	4619      	mov	r1, r3
 80015f4:	482c      	ldr	r0, [pc, #176]	; (80016a8 <SysTick_Handler+0x584>)
 80015f6:	f00a f867 	bl	800b6c8 <ModBUS_Check>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00d      	beq.n	800161c <SysTick_Handler+0x4f8>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001600:	482a      	ldr	r0, [pc, #168]	; (80016ac <SysTick_Handler+0x588>)
 8001602:	f00a f963 	bl	800b8cc <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <SysTick_Handler+0x588>)
 8001608:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <SysTick_Handler+0x58c>)
 8001614:	4823      	ldr	r0, [pc, #140]	; (80016a4 <SysTick_Handler+0x580>)
 8001616:	f00c fb1b 	bl	800dc50 <CopiaVector>
 800161a:	e007      	b.n	800162c <SysTick_Handler+0x508>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <SysTick_Handler+0x550>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <SysTick_Handler+0x508>
 8001624:	2111      	movs	r1, #17
 8001626:	4823      	ldr	r0, [pc, #140]	; (80016b4 <SysTick_Handler+0x590>)
 8001628:	f7ff fd60 	bl	80010ec <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <SysTick_Handler+0x588>)
 800162e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <SysTick_Handler+0x594>)
 8001636:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SysTick_Handler+0x594>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <SysTick_Handler+0x598>)
 800163e:	2100      	movs	r1, #0
 8001640:	480e      	ldr	r0, [pc, #56]	; (800167c <SysTick_Handler+0x558>)
 8001642:	f00b febb 	bl	800d3bc <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <SysTick_Handler+0x598>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	f240 4124 	movw	r1, #1060	; 0x424
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <SysTick_Handler+0x558>)
 8001652:	f00b fbc4 	bl	800cdde <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	4808      	ldr	r0, [pc, #32]	; (800167c <SysTick_Handler+0x558>)
 800165c:	f00b fc72 	bl	800cf44 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001660:	bf00      	nop
 8001662:	2100      	movs	r1, #0
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <SysTick_Handler+0x558>)
 8001666:	f00b fdbc 	bl	800d1e2 <eth_rd_SOCKET_CMD>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f8      	bne.n	8001662 <SysTick_Handler+0x53e>

							}
						}
					}
				 }
			 break;
 8001670:	e1dc      	b.n	8001a2c <SysTick_Handler+0x908>
 8001672:	bf00      	nop
 8001674:	2000222c 	.word	0x2000222c
 8001678:	0800f2fc 	.word	0x0800f2fc
 800167c:	20002234 	.word	0x20002234
 8001680:	0800f310 	.word	0x0800f310
 8001684:	0800f324 	.word	0x0800f324
 8001688:	0800f33c 	.word	0x0800f33c
 800168c:	0800f350 	.word	0x0800f350
 8001690:	0800f368 	.word	0x0800f368
 8001694:	0800f380 	.word	0x0800f380
 8001698:	200032a4 	.word	0x200032a4
 800169c:	2000329c 	.word	0x2000329c
 80016a0:	200032a0 	.word	0x200032a0
 80016a4:	20002250 	.word	0x20002250
 80016a8:	200017a1 	.word	0x200017a1
 80016ac:	20001794 	.word	0x20001794
 80016b0:	20001928 	.word	0x20001928
 80016b4:	0800f39c 	.word	0x0800f39c
 80016b8:	200032a2 	.word	0x200032a2
 80016bc:	2000329e 	.word	0x2000329e
						if (mb_eth._w_answer==0)
 80016c0:	4bac      	ldr	r3, [pc, #688]	; (8001974 <SysTick_Handler+0x850>)
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d167      	bne.n	8001798 <SysTick_Handler+0x674>
							ETH.data[0]=0x00;
 80016c8:	4bab      	ldr	r3, [pc, #684]	; (8001978 <SysTick_Handler+0x854>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 80016ce:	4baa      	ldr	r3, [pc, #680]	; (8001978 <SysTick_Handler+0x854>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 80016d4:	4ba8      	ldr	r3, [pc, #672]	; (8001978 <SysTick_Handler+0x854>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 80016da:	4ba7      	ldr	r3, [pc, #668]	; (8001978 <SysTick_Handler+0x854>)
 80016dc:	2200      	movs	r2, #0
 80016de:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 80016e0:	4ba5      	ldr	r3, [pc, #660]	; (8001978 <SysTick_Handler+0x854>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 80016e8:	4ba3      	ldr	r3, [pc, #652]	; (8001978 <SysTick_Handler+0x854>)
 80016ea:	2206      	movs	r2, #6
 80016ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 80016f0:	4ba1      	ldr	r3, [pc, #644]	; (8001978 <SysTick_Handler+0x854>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 80016f8:	4b9f      	ldr	r3, [pc, #636]	; (8001978 <SysTick_Handler+0x854>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001700:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <SysTick_Handler+0x854>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001708:	4b9b      	ldr	r3, [pc, #620]	; (8001978 <SysTick_Handler+0x854>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <SysTick_Handler+0x854>)
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001718:	4b97      	ldr	r3, [pc, #604]	; (8001978 <SysTick_Handler+0x854>)
 800171a:	220a      	movs	r2, #10
 800171c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001720:	4b96      	ldr	r3, [pc, #600]	; (800197c <SysTick_Handler+0x858>)
 8001722:	220c      	movs	r2, #12
 8001724:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001726:	220f      	movs	r2, #15
 8001728:	2100      	movs	r1, #0
 800172a:	4892      	ldr	r0, [pc, #584]	; (8001974 <SysTick_Handler+0x850>)
 800172c:	f00a f877 	bl	800b81e <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	220c      	movs	r2, #12
 8001738:	4991      	ldr	r1, [pc, #580]	; (8001980 <SysTick_Handler+0x85c>)
 800173a:	4892      	ldr	r0, [pc, #584]	; (8001984 <SysTick_Handler+0x860>)
 800173c:	f00c fa88 	bl	800dc50 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001740:	4b8e      	ldr	r3, [pc, #568]	; (800197c <SysTick_Handler+0x858>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	4a90      	ldr	r2, [pc, #576]	; (8001988 <SysTick_Handler+0x864>)
 8001746:	2100      	movs	r1, #0
 8001748:	488b      	ldr	r0, [pc, #556]	; (8001978 <SysTick_Handler+0x854>)
 800174a:	f00b fe37 	bl	800d3bc <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <SysTick_Handler+0x864>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	f240 4124 	movw	r1, #1060	; 0x424
 8001758:	4887      	ldr	r0, [pc, #540]	; (8001978 <SysTick_Handler+0x854>)
 800175a:	f00b fb40 	bl	800cdde <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	4885      	ldr	r0, [pc, #532]	; (8001978 <SysTick_Handler+0x854>)
 8001764:	f00b fbee 	bl	800cf44 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001768:	bf00      	nop
 800176a:	2100      	movs	r1, #0
 800176c:	4882      	ldr	r0, [pc, #520]	; (8001978 <SysTick_Handler+0x854>)
 800176e:	f00b fd38 	bl	800d1e2 <eth_rd_SOCKET_CMD>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f8      	bne.n	800176a <SysTick_Handler+0x646>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001778:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <SysTick_Handler+0x850>)
 800177a:	2201      	movs	r2, #1
 800177c:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 800177e:	4b83      	ldr	r3, [pc, #524]	; (800198c <SysTick_Handler+0x868>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001784:	4b82      	ldr	r3, [pc, #520]	; (8001990 <SysTick_Handler+0x86c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 814f 	beq.w	8001a2c <SysTick_Handler+0x908>
 800178e:	2117      	movs	r1, #23
 8001790:	4880      	ldr	r0, [pc, #512]	; (8001994 <SysTick_Handler+0x870>)
 8001792:	f7ff fcab 	bl	80010ec <ITM0_Write>
			 break;
 8001796:	e149      	b.n	8001a2c <SysTick_Handler+0x908>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001798:	2302      	movs	r3, #2
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <SysTick_Handler+0x874>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	230f      	movs	r3, #15
 80017a2:	2226      	movs	r2, #38	; 0x26
 80017a4:	2104      	movs	r1, #4
 80017a6:	4874      	ldr	r0, [pc, #464]	; (8001978 <SysTick_Handler+0x854>)
 80017a8:	f00b faa1 	bl	800ccee <SPI_ETH_REG>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b7a      	ldr	r3, [pc, #488]	; (800199c <SysTick_Handler+0x878>)
 80017b2:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <SysTick_Handler+0x878>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8137 	beq.w	8001a2c <SysTick_Handler+0x908>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80017be:	4b77      	ldr	r3, [pc, #476]	; (800199c <SysTick_Handler+0x878>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <SysTick_Handler+0x87c>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	486c      	ldr	r0, [pc, #432]	; (8001978 <SysTick_Handler+0x854>)
 80017c8:	f00b fd28 	bl	800d21c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80017cc:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <SysTick_Handler+0x87c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80017d6:	4868      	ldr	r0, [pc, #416]	; (8001978 <SysTick_Handler+0x854>)
 80017d8:	f00b fb01 	bl	800cdde <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	2100      	movs	r1, #0
 80017e0:	4865      	ldr	r0, [pc, #404]	; (8001978 <SysTick_Handler+0x854>)
 80017e2:	f00b fbaf 	bl	800cf44 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80017e6:	bf00      	nop
 80017e8:	2100      	movs	r1, #0
 80017ea:	4863      	ldr	r0, [pc, #396]	; (8001978 <SysTick_Handler+0x854>)
 80017ec:	f00b fcf9 	bl	800d1e2 <eth_rd_SOCKET_CMD>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f8      	bne.n	80017e8 <SysTick_Handler+0x6c4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80017f6:	4b69      	ldr	r3, [pc, #420]	; (800199c <SysTick_Handler+0x878>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	4960      	ldr	r1, [pc, #384]	; (8001984 <SysTick_Handler+0x860>)
 8001804:	4867      	ldr	r0, [pc, #412]	; (80019a4 <SysTick_Handler+0x880>)
 8001806:	f00c fa23 	bl	800dc50 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <SysTick_Handler+0x878>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <SysTick_Handler+0x850>)
 8001812:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001816:	4b61      	ldr	r3, [pc, #388]	; (800199c <SysTick_Handler+0x878>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <SysTick_Handler+0x700>
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <SysTick_Handler+0x854>)
 8001820:	2201      	movs	r2, #1
 8001822:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <SysTick_Handler+0x850>)
 8001826:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800182a:	4619      	mov	r1, r3
 800182c:	485d      	ldr	r0, [pc, #372]	; (80019a4 <SysTick_Handler+0x880>)
 800182e:	f009 ff4b 	bl	800b6c8 <ModBUS_Check>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d024      	beq.n	8001882 <SysTick_Handler+0x75e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001838:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <SysTick_Handler+0x850>)
 800183a:	2200      	movs	r2, #0
 800183c:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <SysTick_Handler+0x868>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001844:	484b      	ldr	r0, [pc, #300]	; (8001974 <SysTick_Handler+0x850>)
 8001846:	f00a f841 	bl	800b8cc <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <SysTick_Handler+0x850>)
 800184c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	4953      	ldr	r1, [pc, #332]	; (80019a4 <SysTick_Handler+0x880>)
 8001858:	4853      	ldr	r0, [pc, #332]	; (80019a8 <SysTick_Handler+0x884>)
 800185a:	f00c f9f9 	bl	800dc50 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	4951      	ldr	r1, [pc, #324]	; (80019ac <SysTick_Handler+0x888>)
 8001868:	4851      	ldr	r0, [pc, #324]	; (80019b0 <SysTick_Handler+0x88c>)
 800186a:	f00c f9f1 	bl	800dc50 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <SysTick_Handler+0x86c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80da 	beq.w	8001a2c <SysTick_Handler+0x908>
 8001878:	2117      	movs	r1, #23
 800187a:	484e      	ldr	r0, [pc, #312]	; (80019b4 <SysTick_Handler+0x890>)
 800187c:	f7ff fc36 	bl	80010ec <ITM0_Write>
			 break;
 8001880:	e0d4      	b.n	8001a2c <SysTick_Handler+0x908>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <SysTick_Handler+0x86c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80d0 	beq.w	8001a2c <SysTick_Handler+0x908>
 800188c:	2111      	movs	r1, #17
 800188e:	484a      	ldr	r0, [pc, #296]	; (80019b8 <SysTick_Handler+0x894>)
 8001890:	f7ff fc2c 	bl	80010ec <ITM0_Write>
			 break;
 8001894:	e0ca      	b.n	8001a2c <SysTick_Handler+0x908>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <SysTick_Handler+0x86c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <SysTick_Handler+0x782>
 800189e:	2115      	movs	r1, #21
 80018a0:	4846      	ldr	r0, [pc, #280]	; (80019bc <SysTick_Handler+0x898>)
 80018a2:	f7ff fc23 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <SysTick_Handler+0x854>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018ac:	e0bf      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <SysTick_Handler+0x86c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <SysTick_Handler+0x79a>
 80018b6:	2114      	movs	r1, #20
 80018b8:	4841      	ldr	r0, [pc, #260]	; (80019c0 <SysTick_Handler+0x89c>)
 80018ba:	f7ff fc17 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <SysTick_Handler+0x854>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80018c4:	e0b3      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <SysTick_Handler+0x86c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <SysTick_Handler+0x7b2>
 80018ce:	2116      	movs	r1, #22
 80018d0:	483c      	ldr	r0, [pc, #240]	; (80019c4 <SysTick_Handler+0x8a0>)
 80018d2:	f7ff fc0b 	bl	80010ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 80018d6:	2208      	movs	r2, #8
 80018d8:	2100      	movs	r1, #0
 80018da:	4827      	ldr	r0, [pc, #156]	; (8001978 <SysTick_Handler+0x854>)
 80018dc:	f00b fb32 	bl	800cf44 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 80018e0:	bf00      	nop
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <SysTick_Handler+0x874>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	230f      	movs	r3, #15
 80018ec:	2201      	movs	r2, #1
 80018ee:	2104      	movs	r1, #4
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <SysTick_Handler+0x854>)
 80018f2:	f00b f9fc 	bl	800ccee <SPI_ETH_REG>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f2      	bne.n	80018e2 <SysTick_Handler+0x7be>
					{}
					ETH.ETH_WDG=0;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <SysTick_Handler+0x854>)
 80018fe:	2200      	movs	r2, #0
 8001900:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001902:	e094      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <SysTick_Handler+0x86c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <SysTick_Handler+0x7f0>
 800190c:	2117      	movs	r1, #23
 800190e:	482e      	ldr	r0, [pc, #184]	; (80019c8 <SysTick_Handler+0x8a4>)
 8001910:	f7ff fbec 	bl	80010ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001914:	2208      	movs	r2, #8
 8001916:	2100      	movs	r1, #0
 8001918:	4817      	ldr	r0, [pc, #92]	; (8001978 <SysTick_Handler+0x854>)
 800191a:	f00b fb13 	bl	800cf44 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 800191e:	bf00      	nop
 8001920:	2301      	movs	r3, #1
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <SysTick_Handler+0x874>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	230f      	movs	r3, #15
 800192a:	2201      	movs	r2, #1
 800192c:	2104      	movs	r1, #4
 800192e:	4812      	ldr	r0, [pc, #72]	; (8001978 <SysTick_Handler+0x854>)
 8001930:	f00b f9dd 	bl	800ccee <SPI_ETH_REG>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f2      	bne.n	8001920 <SysTick_Handler+0x7fc>
					{}
					ETH.ETH_WDG=0;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <SysTick_Handler+0x854>)
 800193c:	2200      	movs	r2, #0
 800193e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001940:	e075      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <SysTick_Handler+0x86c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <SysTick_Handler+0x82e>
 800194a:	2115      	movs	r1, #21
 800194c:	481f      	ldr	r0, [pc, #124]	; (80019cc <SysTick_Handler+0x8a8>)
 800194e:	f7ff fbcd 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <SysTick_Handler+0x854>)
 8001954:	2200      	movs	r2, #0
 8001956:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001958:	e069      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <SysTick_Handler+0x86c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <SysTick_Handler+0x846>
 8001962:	2110      	movs	r1, #16
 8001964:	481a      	ldr	r0, [pc, #104]	; (80019d0 <SysTick_Handler+0x8ac>)
 8001966:	f7ff fbc1 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <SysTick_Handler+0x854>)
 800196c:	2200      	movs	r2, #0
 800196e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001970:	e05d      	b.n	8001a2e <SysTick_Handler+0x90a>
 8001972:	bf00      	nop
 8001974:	20001794 	.word	0x20001794
 8001978:	20002234 	.word	0x20002234
 800197c:	200032a2 	.word	0x200032a2
 8001980:	20001928 	.word	0x20001928
 8001984:	20002250 	.word	0x20002250
 8001988:	2000329e 	.word	0x2000329e
 800198c:	20003914 	.word	0x20003914
 8001990:	2000222c 	.word	0x2000222c
 8001994:	0800f3ac 	.word	0x0800f3ac
 8001998:	200032a4 	.word	0x200032a4
 800199c:	2000329c 	.word	0x2000329c
 80019a0:	200032a0 	.word	0x200032a0
 80019a4:	200017a1 	.word	0x200017a1
 80019a8:	20002a50 	.word	0x20002a50
 80019ac:	20001ab4 	.word	0x20001ab4
 80019b0:	20002000 	.word	0x20002000
 80019b4:	0800f3c0 	.word	0x0800f3c0
 80019b8:	0800f39c 	.word	0x0800f39c
 80019bc:	0800f3d4 	.word	0x0800f3d4
 80019c0:	0800f3ec 	.word	0x0800f3ec
 80019c4:	0800f404 	.word	0x0800f404
 80019c8:	0800f41c 	.word	0x0800f41c
 80019cc:	0800f434 	.word	0x0800f434
 80019d0:	0800f44c 	.word	0x0800f44c
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <SysTick_Handler+0x95c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <SysTick_Handler+0x8c0>
 80019dc:	2112      	movs	r1, #18
 80019de:	4829      	ldr	r0, [pc, #164]	; (8001a84 <SysTick_Handler+0x960>)
 80019e0:	f7ff fb84 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <SysTick_Handler+0x964>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019ea:	e020      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <SysTick_Handler+0x95c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <SysTick_Handler+0x8d8>
 80019f4:	2113      	movs	r1, #19
 80019f6:	4825      	ldr	r0, [pc, #148]	; (8001a8c <SysTick_Handler+0x968>)
 80019f8:	f7ff fb78 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <SysTick_Handler+0x964>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a02:	e014      	b.n	8001a2e <SysTick_Handler+0x90a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <SysTick_Handler+0x95c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <SysTick_Handler+0x8f0>
 8001a0c:	2111      	movs	r1, #17
 8001a0e:	4820      	ldr	r0, [pc, #128]	; (8001a90 <SysTick_Handler+0x96c>)
 8001a10:	f7ff fb6c 	bl	80010ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <SysTick_Handler+0x964>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a1a:	e008      	b.n	8001a2e <SysTick_Handler+0x90a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001a1c:	481a      	ldr	r0, [pc, #104]	; (8001a88 <SysTick_Handler+0x964>)
 8001a1e:	f00b f93f 	bl	800cca0 <SPI_ETH>
 8001a22:	e004      	b.n	8001a2e <SysTick_Handler+0x90a>
			 default:
 8001a24:	bf00      	nop
 8001a26:	e002      	b.n	8001a2e <SysTick_Handler+0x90a>
			 break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <SysTick_Handler+0x90a>
			 break;
 8001a2c:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <SysTick_Handler+0x970>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d102      	bne.n	8001a3c <SysTick_Handler+0x918>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <SysTick_Handler+0x970>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <SysTick_Handler+0x974>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d104      	bne.n	8001a4e <SysTick_Handler+0x92a>
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <SysTick_Handler+0x978>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <SysTick_Handler+0x978>)
 8001a4c:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <SysTick_Handler+0x978>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	dd0f      	ble.n	8001a76 <SysTick_Handler+0x952>
	{
		USART1_ticks=0;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <SysTick_Handler+0x978>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <SysTick_Handler+0x97c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <SysTick_Handler+0x974>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <SysTick_Handler+0x980>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <SysTick_Handler+0x984>)
 8001a6e:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <SysTick_Handler+0x980>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 fcfd 	bl	8002474 <HAL_IncTick>
	else
	{
		wf._ticks=0;
	}*/
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000222c 	.word	0x2000222c
 8001a84:	0800f460 	.word	0x0800f460
 8001a88:	20002234 	.word	0x20002234
 8001a8c:	0800f474 	.word	0x0800f474
 8001a90:	0800f488 	.word	0x0800f488
 8001a94:	2000023c 	.word	0x2000023c
 8001a98:	200032e8 	.word	0x200032e8
 8001a9c:	2000391c 	.word	0x2000391c
 8001aa0:	20003920 	.word	0x20003920
 8001aa4:	20003918 	.word	0x20003918
 8001aa8:	20003924 	.word	0x20003924

08001aac <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_UART_ErrorCallback+0x98>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11c      	bne.n	8001af8 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_UART_ErrorCallback+0x9c>)
 8001ac8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_UART_ErrorCallback+0x9c>)
 8001ad0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f003 f96a 	bl	8004dbe <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001aea:	f7ff f9f9 	bl	8000ee0 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001aee:	2201      	movs	r2, #1
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_UART_ErrorCallback+0xa0>)
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 fa69 	bl	8004fca <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_UART_ErrorCallback+0xa4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11c      	bne.n	8001b3c <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_UART_ErrorCallback+0x9c>)
 8001b0c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_UART_ErrorCallback+0x9c>)
 8001b14:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f003 f948 	bl	8004dbe <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001b2e:	f7ff fa01 	bl	8000f34 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4905      	ldr	r1, [pc, #20]	; (8001b4c <HAL_UART_ErrorCallback+0xa0>)
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f003 fa47 	bl	8004fca <HAL_UART_Receive_IT>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40011000 	.word	0x40011000
 8001b48:	20000a48 	.word	0x20000a48
 8001b4c:	200038f8 	.word	0x200038f8
 8001b50:	40004400 	.word	0x40004400

08001b54 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <HAL_UART_RxCpltCallback+0xc0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d123      	bne.n	8001bae <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_UART_RxCpltCallback+0xc4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2c      	ldr	r2, [pc, #176]	; (8001c1c <HAL_UART_RxCpltCallback+0xc8>)
 8001b6c:	7811      	ldrb	r1, [r2, #0]
 8001b6e:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <HAL_UART_RxCpltCallback+0xcc>)
 8001b70:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_UART_RxCpltCallback+0xc4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_UART_RxCpltCallback+0xc4>)
 8001b7a:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_UART_RxCpltCallback+0xc4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	db03      	blt.n	8001b8e <HAL_UART_RxCpltCallback+0x3a>
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_UART_RxCpltCallback+0xc4>)
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4824      	ldr	r0, [pc, #144]	; (8001c24 <HAL_UART_RxCpltCallback+0xd0>)
 8001b92:	f002 f91b 	bl	8003dcc <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_UART_RxCpltCallback+0xd4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	491d      	ldr	r1, [pc, #116]	; (8001c1c <HAL_UART_RxCpltCallback+0xc8>)
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f003 fa0e 	bl	8004fca <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_UART_RxCpltCallback+0xd8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d128      	bne.n	8001c0a <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_UART_RxCpltCallback+0xdc>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_UART_RxCpltCallback+0xe0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b2d1      	uxtb	r1, r2
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_UART_RxCpltCallback+0xe4>)
 8001bc4:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_UART_RxCpltCallback+0xe0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_UART_RxCpltCallback+0xe0>)
 8001bce:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_RxCpltCallback+0xe0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd8:	db03      	blt.n	8001be2 <HAL_UART_RxCpltCallback+0x8e>
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_UART_RxCpltCallback+0xe0>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2102      	movs	r1, #2
 8001be6:	4815      	ldr	r0, [pc, #84]	; (8001c3c <HAL_UART_RxCpltCallback+0xe8>)
 8001be8:	f001 f8c6 	bl	8002d78 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001bec:	2100      	movs	r1, #0
 8001bee:	4814      	ldr	r0, [pc, #80]	; (8001c40 <HAL_UART_RxCpltCallback+0xec>)
 8001bf0:	f002 f8ec 	bl	8003dcc <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_UART_RxCpltCallback+0xf0>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_UART_RxCpltCallback+0xf4>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	490b      	ldr	r1, [pc, #44]	; (8001c30 <HAL_UART_RxCpltCallback+0xdc>)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f003 f9e0 	bl	8004fca <HAL_UART_Receive_IT>
		 }
 }
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40011000 	.word	0x40011000
 8001c18:	20003928 	.word	0x20003928
 8001c1c:	200038f8 	.word	0x200038f8
 8001c20:	200032f4 	.word	0x200032f4
 8001c24:	200000dc 	.word	0x200000dc
 8001c28:	200032e6 	.word	0x200032e6
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	200038fc 	.word	0x200038fc
 8001c34:	2000392c 	.word	0x2000392c
 8001c38:	200034f4 	.word	0x200034f4
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	20000124 	.word	0x20000124
 8001c44:	40000400 	.word	0x40000400
 8001c48:	200032e7 	.word	0x200032e7

08001c4c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d12d      	bne.n	8001cba <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f002 f9b1 	bl	8003fc8 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001c78:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	4932      	ldr	r1, [pc, #200]	; (8001d5c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001c94:	4833      	ldr	r0, [pc, #204]	; (8001d64 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001c96:	f00b ffdb 	bl	800dc50 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4932      	ldr	r1, [pc, #200]	; (8001d68 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8001c9e:	4833      	ldr	r0, [pc, #204]	; (8001d6c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8001ca0:	f003 f993 	bl	8004fca <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001ca6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482b      	ldr	r0, [pc, #172]	; (8001d64 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001cb6:	f7ff fa19 	bl	80010ec <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d13f      	bne.n	8001d44 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f002 f97e 	bl	8003fc8 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4829      	ldr	r0, [pc, #164]	; (8001d78 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8001cd2:	f001 f851 	bl	8002d78 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001ce8:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001d04:	4822      	ldr	r0, [pc, #136]	; (8001d90 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8001d06:	f00b ffa3 	bl	800dc50 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8001d10:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001d14:	2201      	movs	r2, #1
 8001d16:	4920      	ldr	r1, [pc, #128]	; (8001d98 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8001d18:	4820      	ldr	r0, [pc, #128]	; (8001d9c <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8001d1a:	f003 f956 	bl	8004fca <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001d20:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d10d      	bne.n	8001d44 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8001d28:	2117      	movs	r1, #23
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8001d2c:	f7ff f9de 	bl	80010ec <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4815      	ldr	r0, [pc, #84]	; (8001d8c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001d38:	f7ff f9d8 	bl	80010ec <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4819      	ldr	r0, [pc, #100]	; (8001da4 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8001d40:	f7ff f9d4 	bl	80010ec <ITM0_Write>
				 }
		}
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200032e9 	.word	0x200032e9
 8001d50:	200032e6 	.word	0x200032e6
 8001d54:	20003928 	.word	0x20003928
 8001d58:	20003904 	.word	0x20003904
 8001d5c:	200032f4 	.word	0x200032f4
 8001d60:	200038f4 	.word	0x200038f4
 8001d64:	200036f4 	.word	0x200036f4
 8001d68:	200038f8 	.word	0x200038f8
 8001d6c:	2000016c 	.word	0x2000016c
 8001d70:	20000a48 	.word	0x20000a48
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	200032ea 	.word	0x200032ea
 8001d80:	200032e7 	.word	0x200032e7
 8001d84:	2000392c 	.word	0x2000392c
 8001d88:	20003908 	.word	0x20003908
 8001d8c:	200034f4 	.word	0x200034f4
 8001d90:	20000296 	.word	0x20000296
 8001d94:	20000240 	.word	0x20000240
 8001d98:	200038fc 	.word	0x200038fc
 8001d9c:	200001b0 	.word	0x200001b0
 8001da0:	0800f49c 	.word	0x0800f49c
 8001da4:	0800f4b4 	.word	0x0800f4b4

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_SPI_MspInit+0x84>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d12b      	bne.n	8001e7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e5e:	23e0      	movs	r3, #224	; 0xe0
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e7a:	f000 fd15 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40013000 	.word	0x40013000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d116      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	201c      	movs	r0, #28
 8001ec8:	f000 fc17 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ecc:	201c      	movs	r0, #28
 8001ece:	f000 fc30 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ed2:	e01a      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_TIM_Base_MspInit+0x84>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d115      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_TIM_Base_MspInit+0x80>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	201d      	movs	r0, #29
 8001f00:	f000 fbfb 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f04:	201d      	movs	r0, #29
 8001f06:	f000 fc14 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40000400 	.word	0x40000400

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_UART_MspInit+0x170>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d135      	bne.n	8001faa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	623b      	str	r3, [r7, #32]
 8001f58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4840      	ldr	r0, [pc, #256]	; (8002094 <HAL_UART_MspInit+0x178>)
 8001f94:	f000 fc88 	bl	80028a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2025      	movs	r0, #37	; 0x25
 8001f9e:	f000 fbac 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fa2:	2025      	movs	r0, #37	; 0x25
 8001fa4:	f000 fbc5 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fa8:	e06b      	b.n	8002082 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <HAL_UART_MspInit+0x17c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d134      	bne.n	800201e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a2d      	ldr	r2, [pc, #180]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_UART_MspInit+0x174>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fec:	230c      	movs	r3, #12
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	4823      	ldr	r0, [pc, #140]	; (8002094 <HAL_UART_MspInit+0x178>)
 8002008:	f000 fc4e 	bl	80028a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2026      	movs	r0, #38	; 0x26
 8002012:	f000 fb72 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002016:	2026      	movs	r0, #38	; 0x26
 8002018:	f000 fb8b 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 800201c:	e031      	b.n	8002082 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_UART_MspInit+0x180>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d12c      	bne.n	8002082 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x174>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_UART_MspInit+0x174>)
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	6453      	str	r3, [r2, #68]	; 0x44
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_MspInit+0x174>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x174>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x174>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_UART_MspInit+0x174>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002060:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002072:	2308      	movs	r3, #8
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x178>)
 800207e:	f000 fc13 	bl	80028a8 <HAL_GPIO_Init>
}
 8002082:	bf00      	nop
 8002084:	3738      	adds	r7, #56	; 0x38
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40011000 	.word	0x40011000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000
 8002098:	40004400 	.word	0x40004400
 800209c:	40011400 	.word	0x40011400

080020a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_UART_MspDeInit+0x80>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10e      	bne.n	80020d0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 80020b8:	f023 0310 	bic.w	r3, r3, #16
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80020c2:	4819      	ldr	r0, [pc, #100]	; (8002128 <HAL_UART_MspDeInit+0x88>)
 80020c4:	f000 fd74 	bl	8002bb0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f000 fb40 	bl	800274e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80020ce:	e022      	b.n	8002116 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <HAL_UART_MspDeInit+0x8c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 80020e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80020e6:	210c      	movs	r1, #12
 80020e8:	480f      	ldr	r0, [pc, #60]	; (8002128 <HAL_UART_MspDeInit+0x88>)
 80020ea:	f000 fd61 	bl	8002bb0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80020ee:	2026      	movs	r0, #38	; 0x26
 80020f0:	f000 fb2d 	bl	800274e <HAL_NVIC_DisableIRQ>
}
 80020f4:	e00f      	b.n	8002116 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_UART_MspDeInit+0x90>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d10a      	bne.n	8002116 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_UART_MspDeInit+0x84>)
 8002106:	f023 0320 	bic.w	r3, r3, #32
 800210a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800210c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <HAL_UART_MspDeInit+0x88>)
 8002112:	f000 fd4d 	bl	8002bb0 <HAL_GPIO_DeInit>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40011000 	.word	0x40011000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000
 800212c:	40004400 	.word	0x40004400
 8002130:	40011400 	.word	0x40011400

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM2_IRQHandler+0x10>)
 8002182:	f002 f82d 	bl	80041e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200000dc 	.word	0x200000dc

08002190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM3_IRQHandler+0x10>)
 8002196:	f002 f823 	bl	80041e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000124 	.word	0x20000124

080021a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <USART1_IRQHandler+0x10>)
 80021aa:	f002 ff3f 	bl	800502c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000016c 	.word	0x2000016c

080021b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <USART2_IRQHandler+0x10>)
 80021be:	f002 ff35 	bl	800502c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200001b0 	.word	0x200001b0

080021cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_kill>:

int _kill(int pid, int sig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021e6:	f00c f83b 	bl	800e260 <__errno>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2216      	movs	r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
	return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_exit>:

void _exit (int status)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffe7 	bl	80021dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800220e:	e7fe      	b.n	800220e <_exit+0x12>

08002210 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e00a      	b.n	8002238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002222:	f3af 8000 	nop.w
 8002226:	4601      	mov	r1, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	b2ca      	uxtb	r2, r1
 8002230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf0      	blt.n	8002222 <_read+0x12>
	}

return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e009      	b.n	8002270 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbf1      	blt.n	800225c <_write+0x12>
	}
	return len;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_close>:

int _close(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022aa:	605a      	str	r2, [r3, #4]
	return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_isatty>:

int _isatty(int file)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	return 1;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
	return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <_sbrk+0x5c>)
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <_sbrk+0x60>)
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <_sbrk+0x64>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <_sbrk+0x68>)
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d207      	bcs.n	800232c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800231c:	f00b ffa0 	bl	800e260 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	220c      	movs	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e009      	b.n	8002340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_sbrk+0x64>)
 800233c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20020000 	.word	0x20020000
 800234c:	00000400 	.word	0x00000400
 8002350:	20003934 	.word	0x20003934
 8002354:	20003a88 	.word	0x20003a88

08002358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002382:	490e      	ldr	r1, [pc, #56]	; (80023bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002398:	4c0b      	ldr	r4, [pc, #44]	; (80023c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023a6:	f7ff ffd7 	bl	8002358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f00b ff5f 	bl	800e26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7fe f971 	bl	8000694 <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80023c0:	0800fcf4 	.word	0x0800fcf4
  ldr r2, =_sbss
 80023c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80023c8:	20003a88 	.word	0x20003a88

080023cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_Init+0x40>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_Init+0x40>)
 80023e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_Init+0x40>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 f973 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023fe:	200f      	movs	r0, #15
 8002400:	f000 f808 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f7ff fcd6 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_InitTick+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x58>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f999 	bl	800276a <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f000 f953 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x5c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000000 	.word	0x20000000
 800246c:	20000008 	.word	0x20000008
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000008 	.word	0x20000008
 8002498:	20003938 	.word	0x20003938

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20003938 	.word	0x20003938

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ffee 	bl	800249c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffde 	bl	800249c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008

080024fc <__NVIC_SetPriorityGrouping>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_DisableIRQ>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db12      	blt.n	80025d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	490a      	ldr	r1, [pc, #40]	; (80025e0 <__NVIC_DisableIRQ+0x44>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	3320      	adds	r3, #32
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025c8:	f3bf 8f4f 	dsb	sy
}
 80025cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ce:	f3bf 8f6f 	isb	sy
}
 80025d2:	bf00      	nop
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff05 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff1a 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff0d 	bl	8002560 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff1d 	bl	800259c <__NVIC_DisableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff94 	bl	80026a0 <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fe84 	bl	800249c <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d008      	beq.n	80027b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e052      	b.n	800285a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0216 	bic.w	r2, r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <HAL_DMA_Abort+0x62>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002804:	e013      	b.n	800282e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002806:	f7ff fe49 	bl	800249c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d90c      	bls.n	800282e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e015      	b.n	800285a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e4      	bne.n	8002806 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	223f      	movs	r2, #63	; 0x3f
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d004      	beq.n	8002880 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e00c      	b.n	800289a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2205      	movs	r2, #5
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e159      	b.n	8002b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8148 	bne.w	8002b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d005      	beq.n	80028fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d130      	bne.n	800295c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b03      	cmp	r3, #3
 8002966:	d017      	beq.n	8002998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d123      	bne.n	80029ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0203 	and.w	r2, r3, #3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a2 	beq.w	8002b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4a:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a49      	ldr	r2, [pc, #292]	; (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x202>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x1fe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x1f6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x1f2>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f aea2 	bls.w	80028c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e0bb      	b.n	8002d44 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	f040 80ab 	bne.w	8002d3e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002be8:	4a5c      	ldr	r2, [pc, #368]	; (8002d5c <HAL_GPIO_DeInit+0x1ac>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_GPIO_DeInit+0x1b0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_DeInit+0x96>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a53      	ldr	r2, [pc, #332]	; (8002d64 <HAL_GPIO_DeInit+0x1b4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_DeInit+0x92>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_GPIO_DeInit+0x1b8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_DeInit+0x8e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <HAL_GPIO_DeInit+0x1bc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_DeInit+0x8a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <HAL_GPIO_DeInit+0x1c0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_DeInit+0x86>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_DeInit+0x98>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_DeInit+0x98>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_DeInit+0x98>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_DeInit+0x98>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_DeInit+0x98>
 8002c46:	2300      	movs	r3, #0
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d132      	bne.n	8002cbe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4944      	ldr	r1, [pc, #272]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4941      	ldr	r1, [pc, #260]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	493d      	ldr	r1, [pc, #244]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c82:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	493a      	ldr	r1, [pc, #232]	; (8002d74 <HAL_GPIO_DeInit+0x1c4>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	220f      	movs	r2, #15
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	; (8002d5c <HAL_GPIO_DeInit+0x1ac>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	482a      	ldr	r0, [pc, #168]	; (8002d5c <HAL_GPIO_DeInit+0x1ac>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	08d2      	lsrs	r2, r2, #3
 8002cf4:	4019      	ands	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2103      	movs	r1, #3
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f af40 	bls.w	8002bcc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	041a      	lsls	r2, r3, #16
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	400b      	ands	r3, r1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e267      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d075      	beq.n	8002eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x108>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e242      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x74>
 8002e46:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e5e:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6f      	ldr	r2, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6c      	ldr	r2, [pc, #432]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e78:	4b69      	ldr	r3, [pc, #420]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff fb00 	bl	800249c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff fafc 	bl	800249c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e207      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xc0>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff faec 	bl	800249c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff fae8 	bl	800249c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1f3      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b51      	ldr	r3, [pc, #324]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xe8>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1c7      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4937      	ldr	r1, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	e03a      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7ff faa1 	bl	800249c <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7ff fa9d 	bl	800249c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1a8      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4925      	ldr	r1, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7ff fa80 	bl	800249c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7ff fa7c 	bl	800249c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e187      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x248>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7ff fa60 	bl	800249c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fa5c 	bl	800249c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e167      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x200>
 8002ffe:	e01b      	b.n	8003038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x248>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7ff fa49 	bl	800249c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	e00e      	b.n	800302c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300e:	f7ff fa45 	bl	800249c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d907      	bls.n	800302c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e150      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	42470000 	.word	0x42470000
 8003028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ea      	bne.n	800300e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8097 	beq.w	8003174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	4b7d      	ldr	r3, [pc, #500]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a7c      	ldr	r2, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b77      	ldr	r3, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a73      	ldr	r2, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7ff fa05 	bl	800249c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7ff fa01 	bl	800249c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e10c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ea>
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x30c>
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a57      	ldr	r2, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a54      	ldr	r2, [pc, #336]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7ff f9c6 	bl	800249c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7ff f9c2 	bl	800249c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0cb      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <HAL_RCC_OscConfig+0x334>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7ff f9b0 	bl	800249c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7ff f9ac 	bl	800249c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0b5      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ee      	bne.n	8003140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4a38      	ldr	r2, [pc, #224]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a1 	beq.w	80032c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d05c      	beq.n	8003244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d141      	bne.n	8003216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff f980 	bl	800249c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7ff f97c 	bl	800249c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e087      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	491b      	ldr	r1, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7ff f955 	bl	800249c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f6:	f7ff f951 	bl	800249c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e05c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x416>
 8003214:	e054      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff f93e 	bl	800249c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7ff f93a 	bl	800249c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e045      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x444>
 8003242:	e03d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e038      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4ec>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d028      	beq.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d121      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11a      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b68      	ldr	r3, [pc, #416]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90c      	bls.n	800330c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b65      	ldr	r3, [pc, #404]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d044      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e067      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4934      	ldr	r1, [pc, #208]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7ff f86c 	bl	800249c <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7ff f868 	bl	800249c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e04f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d20c      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ffcc 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	0800fac4 	.word	0x0800fac4
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a0:	b090      	sub	sp, #64	; 0x40
 80034a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
 80034a8:	2300      	movs	r3, #0
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	2300      	movs	r3, #0
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d00d      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	f200 80a1 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x16c>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ce:	e09b      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_GetSysClockFreq+0x184>)
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034d4:	e09b      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d6:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_GetSysClockFreq+0x188>)
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034da:	e098      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e6:	4b4d      	ldr	r3, [pc, #308]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d028      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	2200      	movs	r2, #0
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	627a      	str	r2, [r7, #36]	; 0x24
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003504:	2100      	movs	r1, #0
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_GetSysClockFreq+0x188>)
 8003508:	fb03 f201 	mul.w	r2, r3, r1
 800350c:	2300      	movs	r3, #0
 800350e:	fb00 f303 	mul.w	r3, r0, r3
 8003512:	4413      	add	r3, r2
 8003514:	4a43      	ldr	r2, [pc, #268]	; (8003624 <HAL_RCC_GetSysClockFreq+0x188>)
 8003516:	fba0 1202 	umull	r1, r2, r0, r2
 800351a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800351c:	460a      	mov	r2, r1
 800351e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003522:	4413      	add	r3, r2
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	2200      	movs	r2, #0
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	61fa      	str	r2, [r7, #28]
 800352e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003536:	f7fc febb 	bl	80002b0 <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4613      	mov	r3, r2
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003542:	e053      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	2200      	movs	r2, #0
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	617a      	str	r2, [r7, #20]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003556:	f04f 0b00 	mov.w	fp, #0
 800355a:	4652      	mov	r2, sl
 800355c:	465b      	mov	r3, fp
 800355e:	f04f 0000 	mov.w	r0, #0
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356c:	0150      	lsls	r0, r2, #5
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	ebb2 080a 	subs.w	r8, r2, sl
 8003576:	eb63 090b 	sbc.w	r9, r3, fp
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003586:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800358a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800358e:	ebb2 0408 	subs.w	r4, r2, r8
 8003592:	eb63 0509 	sbc.w	r5, r3, r9
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	00eb      	lsls	r3, r5, #3
 80035a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a4:	00e2      	lsls	r2, r4, #3
 80035a6:	4614      	mov	r4, r2
 80035a8:	461d      	mov	r5, r3
 80035aa:	eb14 030a 	adds.w	r3, r4, sl
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	eb45 030b 	adc.w	r3, r5, fp
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c2:	4629      	mov	r1, r5
 80035c4:	028b      	lsls	r3, r1, #10
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035cc:	4621      	mov	r1, r4
 80035ce:	028a      	lsls	r2, r1, #10
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	2200      	movs	r2, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	60fa      	str	r2, [r7, #12]
 80035dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e0:	f7fc fe66 	bl	80002b0 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_GetSysClockFreq+0x180>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetSysClockFreq+0x184>)
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003610:	4618      	mov	r0, r3
 8003612:	3740      	adds	r7, #64	; 0x40
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	017d7840 	.word	0x017d7840

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	0800fad4 	.word	0x0800fad4

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	0800fad4 	.word	0x0800fad4

08003690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07b      	b.n	800379a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d009      	beq.n	80036c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	61da      	str	r2, [r3, #28]
 80036ba:	e005      	b.n	80036c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe fb8e 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0104 	and.w	r1, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0210 	and.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003788:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x26>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e18a      	b.n	8003ade <HAL_SPI_TransmitReceive+0x33c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d0:	f7fe fe64 	bl	800249c <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d00f      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x70>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f8:	d107      	bne.n	800380a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_SPI_TransmitReceive+0x68>
 8003802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003810:	e15b      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x82>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x82>
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800382a:	e14e      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b04      	cmp	r3, #4
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2205      	movs	r2, #5
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d007      	beq.n	8003894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389c:	d178      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x10a>
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d166      	bne.n	800397a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	881a      	ldrh	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d0:	e053      	b.n	800397a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d11b      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x176>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x176>
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d113      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d119      	bne.n	800395a <HAL_SPI_TransmitReceive+0x1b8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d014      	beq.n	800395a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003956:	2301      	movs	r3, #1
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800395a:	f7fe fd9f 	bl	800249c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003966:	429a      	cmp	r2, r3
 8003968:	d807      	bhi.n	800397a <HAL_SPI_TransmitReceive+0x1d8>
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d003      	beq.n	800397a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003978:	e0a7      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1a6      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x130>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1a1      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x130>
 800398e:	e07c      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_TransmitReceive+0x1fc>
 8003998:	8b7b      	ldrh	r3, [r7, #26]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d16b      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c4:	e057      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d11c      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x26c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d017      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x26c>
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d114      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d119      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x2ae>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d014      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a50:	f7fe fd24 	bl	800249c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d803      	bhi.n	8003a68 <HAL_SPI_TransmitReceive+0x2c6>
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x2cc>
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a74:	e029      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1a2      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x224>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d19d      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8b2 	bl	8003bf8 <SPI_EndRxTxTransaction>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003aa6:	e010      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	e000      	b.n	8003aca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3730      	adds	r7, #48	; 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af8:	f7fe fcd0 	bl	800249c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b08:	f7fe fcc8 	bl	800249c <HAL_GetTick>
 8003b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	015b      	lsls	r3, r3, #5
 8003b14:	0d1b      	lsrs	r3, r3, #20
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	e054      	b.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d050      	beq.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b28:	f7fe fcb8 	bl	800249c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13d      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d111      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d004      	beq.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d107      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b84:	d10f      	bne.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e017      	b.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d19b      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <SPI_EndRxTxTransaction+0x7c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <SPI_EndRxTxTransaction+0x80>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0d5b      	lsrs	r3, r3, #21
 8003c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d112      	bne.n	8003c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff ff5a 	bl	8003ae8 <SPI_WaitFlagStateUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e00f      	b.n	8003c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d0f2      	beq.n	8003c4a <SPI_EndRxTxTransaction+0x52>
 8003c64:	e000      	b.n	8003c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c66:	bf00      	nop
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000
 8003c78:	165e9f81 	.word	0x165e9f81

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe f8f6 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fce4 	bl	8004688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e041      	b.n	8003db0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f839 	bl	8003db8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 fc95 	bl	8004688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_OC_Start_IT+0x28>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_OC_Start_IT+0x6e>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_OC_Start_IT+0x42>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_OC_Start_IT+0x6e>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_OC_Start_IT+0x5c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_OC_Start_IT+0x6e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0b3      	b.n	8003faa <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_OC_Start_IT+0x86>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_OC_Start_IT+0xae>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_OC_Start_IT+0x96>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_OC_Start_IT+0xae>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_OC_Start_IT+0xa6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_OC_Start_IT+0xae>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d841      	bhi.n	8003f04 <HAL_TIM_OC_Start_IT+0x138>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_TIM_OC_Start_IT+0xbc>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003f05 	.word	0x08003f05
 8003e90:	08003f05 	.word	0x08003f05
 8003e94:	08003f05 	.word	0x08003f05
 8003e98:	08003ecf 	.word	0x08003ecf
 8003e9c:	08003f05 	.word	0x08003f05
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08003f05 	.word	0x08003f05
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003ef3 	.word	0x08003ef3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0202 	orr.w	r2, r2, #2
 8003eca:	60da      	str	r2, [r3, #12]
      break;
 8003ecc:	e01d      	b.n	8003f0a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0204 	orr.w	r2, r2, #4
 8003edc:	60da      	str	r2, [r3, #12]
      break;
 8003ede:	e014      	b.n	8003f0a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	60da      	str	r2, [r3, #12]
      break;
 8003ef0:	e00b      	b.n	8003f0a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0210 	orr.w	r2, r2, #16
 8003f00:	60da      	str	r2, [r3, #12]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      break;
 8003f08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d14b      	bne.n	8003fa8 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2201      	movs	r2, #1
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fe5b 	bl	8004bd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIM_OC_Start_IT+0x1f0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1a8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000

08003fc8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d841      	bhi.n	8004060 <HAL_TIM_OC_Stop_IT+0x98>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004061 	.word	0x08004061
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004061 	.word	0x08004061
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004061 	.word	0x08004061
 8004004:	0800403d 	.word	0x0800403d
 8004008:	08004061 	.word	0x08004061
 800400c:	08004061 	.word	0x08004061
 8004010:	08004061 	.word	0x08004061
 8004014:	0800404f 	.word	0x0800404f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0202 	bic.w	r2, r2, #2
 8004026:	60da      	str	r2, [r3, #12]
      break;
 8004028:	e01d      	b.n	8004066 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	60da      	str	r2, [r3, #12]
      break;
 800403a:	e014      	b.n	8004066 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0208 	bic.w	r2, r2, #8
 800404a:	60da      	str	r2, [r3, #12]
      break;
 800404c:	e00b      	b.n	8004066 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0210 	bic.w	r2, r2, #16
 800405c:	60da      	str	r2, [r3, #12]
      break;
 800405e:	e002      	b.n	8004066 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	bf00      	nop
  }

  if (status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fdad 	bl	8004bd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_TIM_OC_Stop_IT+0x160>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d117      	bne.n	80040b4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	f241 1311 	movw	r3, #4369	; 0x1111
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_TIM_OC_Stop_IT+0xec>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	f240 4344 	movw	r3, #1092	; 0x444
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_OC_Stop_IT+0xec>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	f240 4344 	movw	r3, #1092	; 0x444
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_TIM_OC_Stop_IT+0x12c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f2:	e013      	b.n	800411c <HAL_TIM_OC_Stop_IT+0x154>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_OC_Stop_IT+0x13c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004102:	e00b      	b.n	800411c <HAL_TIM_OC_Stop_IT+0x154>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d104      	bne.n	8004114 <HAL_TIM_OC_Stop_IT+0x14c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004112:	e003      	b.n	800411c <HAL_TIM_OC_Stop_IT+0x154>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000

0800412c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e041      	b.n	80041c4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f839 	bl	80041cc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f000 fa8b 	bl	8004688 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0208 	bic.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0202 	mvn.w	r2, #2
 800420c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa11 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd fd0e 	bl	8001c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa14 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0204 	mvn.w	r2, #4
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9e7 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fce4 	bl	8001c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9ea 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b08      	cmp	r3, #8
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0208 	mvn.w	r2, #8
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9bd 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fcba 	bl	8001c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f9c0 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0210 	mvn.w	r2, #16
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2208      	movs	r2, #8
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f993 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fc90 	bl	8001c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f996 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0201 	mvn.w	r2, #1
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f969 	bl	8004636 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fcc0 	bl	8004d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f95b 	bl	8004672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d10e      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0220 	mvn.w	r2, #32
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fc8a 	bl	8004cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_TIM_OC_ConfigChannel+0x1e>
 800440a:	2302      	movs	r3, #2
 800440c:	e048      	b.n	80044a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d839      	bhi.n	8004490 <HAL_TIM_OC_ConfigChannel+0xa0>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_TIM_OC_ConfigChannel+0x34>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004459 	.word	0x08004459
 8004428:	08004491 	.word	0x08004491
 800442c:	08004491 	.word	0x08004491
 8004430:	08004491 	.word	0x08004491
 8004434:	08004467 	.word	0x08004467
 8004438:	08004491 	.word	0x08004491
 800443c:	08004491 	.word	0x08004491
 8004440:	08004491 	.word	0x08004491
 8004444:	08004475 	.word	0x08004475
 8004448:	08004491 	.word	0x08004491
 800444c:	08004491 	.word	0x08004491
 8004450:	08004491 	.word	0x08004491
 8004454:	08004483 	.word	0x08004483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f992 	bl	8004788 <TIM_OC1_SetConfig>
      break;
 8004464:	e017      	b.n	8004496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f9f1 	bl	8004854 <TIM_OC2_SetConfig>
      break;
 8004472:	e010      	b.n	8004496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fa56 	bl	800492c <TIM_OC3_SetConfig>
      break;
 8004480:	e009      	b.n	8004496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fab9 	bl	8004a00 <TIM_OC4_SetConfig>
      break;
 800448e:	e002      	b.n	8004496 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800449e:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_ConfigClockSource+0x1c>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e0b4      	b.n	800462e <HAL_TIM_ConfigClockSource+0x186>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fc:	d03e      	beq.n	800457c <HAL_TIM_ConfigClockSource+0xd4>
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004502:	f200 8087 	bhi.w	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	f000 8086 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x172>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	d87f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d01a      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xa6>
 8004518:	2b70      	cmp	r3, #112	; 0x70
 800451a:	d87b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d050      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004520:	2b60      	cmp	r3, #96	; 0x60
 8004522:	d877      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b50      	cmp	r3, #80	; 0x50
 8004526:	d03c      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004528:	2b50      	cmp	r3, #80	; 0x50
 800452a:	d873      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d058      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d86f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d064      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d86b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d060      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d867      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05c      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d05a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 800454c:	e062      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f000 fb19 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	609a      	str	r2, [r3, #8]
      break;
 800457a:	e04f      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f000 fb02 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800459e:	609a      	str	r2, [r3, #8]
      break;
 80045a0:	e03c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fa76 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2150      	movs	r1, #80	; 0x50
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 facf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045c0:	e02c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 fa95 	bl	8004afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2160      	movs	r1, #96	; 0x60
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fabf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80045e0:	e01c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f000 fa56 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 faaf 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004600:	e00c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f000 faa6 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004612:	e003      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e000      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800461a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a34      	ldr	r2, [pc, #208]	; (800476c <TIM_Base_SetConfig+0xe4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00f      	beq.n	80046c0 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d00b      	beq.n	80046c0 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a31      	ldr	r2, [pc, #196]	; (8004770 <TIM_Base_SetConfig+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <TIM_Base_SetConfig+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0x38>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <TIM_Base_SetConfig+0xf0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <TIM_Base_SetConfig+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01b      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d017      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <TIM_Base_SetConfig+0xe8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a21      	ldr	r2, [pc, #132]	; (8004774 <TIM_Base_SetConfig+0xec>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <TIM_Base_SetConfig+0xf0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	; (800477c <TIM_Base_SetConfig+0xf4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <TIM_Base_SetConfig+0xf8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <TIM_Base_SetConfig+0xfc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <TIM_Base_SetConfig+0xe4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d103      	bne.n	8004758 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	615a      	str	r2, [r3, #20]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0302 	bic.w	r3, r3, #2
 80047d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <TIM_OC1_SetConfig+0xc8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10c      	bne.n	80047fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0308 	bic.w	r3, r3, #8
 80047ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <TIM_OC1_SetConfig+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40010000 	.word	0x40010000

08004854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0210 	bic.w	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <TIM_OC2_SetConfig+0xd4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10d      	bne.n	80048d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC2_SetConfig+0xd4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d113      	bne.n	8004900 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000

0800492c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <TIM_OC3_SetConfig+0xd0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10d      	bne.n	80049a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC3_SetConfig+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d113      	bne.n	80049d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	621a      	str	r2, [r3, #32]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40010000 	.word	0x40010000

08004a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <TIM_OC4_SetConfig+0x9c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000

08004aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 030a 	bic.w	r3, r3, #10
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e050      	b.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d013      	beq.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10c      	bne.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40014000 	.word	0x40014000

08004cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e03f      	b.n	8004db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd f8e6 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fe49 	bl	8005a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e021      	b.n	8004e14 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	; 0x24
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fd f959 	bl	80020a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d17c      	bne.n	8004f36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Transmit+0x2c>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e075      	b.n	8004f38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit+0x3e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e06e      	b.n	8004f38 <HAL_UART_Transmit+0x11c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e70:	f7fd fb14 	bl	800249c <HAL_GetTick>
 8004e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d108      	bne.n	8004e9e <HAL_UART_Transmit+0x82>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e003      	b.n	8004ea6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eae:	e02a      	b.n	8004f06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb5a 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e036      	b.n	8004f38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ede:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e007      	b.n	8004ef8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1cf      	bne.n	8004eb0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2140      	movs	r1, #64	; 0x40
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fb2a 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e006      	b.n	8004f38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d130      	bne.n	8004fbc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_UART_Transmit_IT+0x26>
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e029      	b.n	8004fbe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Transmit_IT+0x38>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e022      	b.n	8004fbe <HAL_UART_Transmit_IT+0x7e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2221      	movs	r2, #33	; 0x21
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fb6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d11d      	bne.n	8005020 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Receive_IT+0x26>
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e016      	b.n	8005022 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Receive_IT+0x38>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e00f      	b.n	8005022 <HAL_UART_Receive_IT+0x58>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	461a      	mov	r2, r3
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb1a 	bl	8005650 <UART_Start_Receive_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	e000      	b.n	8005022 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b0ba      	sub	sp, #232	; 0xe8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800506a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_UART_IRQHandler+0x66>
 800507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fbfd 	bl	800588a <UART_Receive_IT>
      return;
 8005090:	e256      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80de 	beq.w	8005258 <HAL_UART_IRQHandler+0x22c>
 800509c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80d1 	beq.w	8005258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0xae>
 80050c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xd2>
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f043 0202 	orr.w	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xf6>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_UART_IRQHandler+0x126>
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f043 0208 	orr.w	r2, r3, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 81ed 	beq.w	8005536 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_UART_IRQHandler+0x14e>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fb88 	bl	800588a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_UART_IRQHandler+0x17a>
 800519e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d04f      	beq.n	8005246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa90 	bl	80056cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d141      	bne.n	800523e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3314      	adds	r3, #20
 80051c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d9      	bne.n	80051ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	2b00      	cmp	r3, #0
 800520c:	d013      	beq.n	8005236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	4a7d      	ldr	r2, [pc, #500]	; (8005408 <HAL_UART_IRQHandler+0x3dc>)
 8005214:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fb21 	bl	8002862 <HAL_DMA_Abort_IT>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	e00e      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc fc38 	bl	8001aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e00a      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fc34 	bl	8001aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	e006      	b.n	8005254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fc30 	bl	8001aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005252:	e170      	b.n	8005536 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	bf00      	nop
    return;
 8005256:	e16e      	b.n	8005536 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 814a 	bne.w	80054f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8143 	beq.w	80054f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 813c 	beq.w	80054f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	f040 80b4 	bne.w	800540c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8140 	beq.w	800553a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052c2:	429a      	cmp	r2, r3
 80052c4:	f080 8139 	bcs.w	800553a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	f000 8088 	beq.w	80053ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800530a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800530e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1d9      	bne.n	80052de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800533a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800534e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e1      	bne.n	800532a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800538a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800538c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e3      	bne.n	8005366 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80053d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e3      	bne.n	80053ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fd f9ca 	bl	8002782 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8ac 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005404:	e099      	b.n	800553a <HAL_UART_IRQHandler+0x50e>
 8005406:	bf00      	nop
 8005408:	08005793 	.word	0x08005793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005414:	b29b      	uxth	r3, r3
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 808b 	beq.w	800553e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8086 	beq.w	800553e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005456:	647a      	str	r2, [r7, #68]	; 0x44
 8005458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800545c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e3      	bne.n	8005432 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	623b      	str	r3, [r7, #32]
   return(result);
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800548e:	633a      	str	r2, [r7, #48]	; 0x30
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e3      	bne.n	800546a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0310 	bic.w	r3, r3, #16
 80054c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054d4:	61fa      	str	r2, [r7, #28]
 80054d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	69b9      	ldr	r1, [r7, #24]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	617b      	str	r3, [r7, #20]
   return(result);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e3      	bne.n	80054b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f834 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f4:	e023      	b.n	800553e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_UART_IRQHandler+0x4ea>
 8005502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f953 	bl	80057ba <UART_Transmit_IT>
    return;
 8005514:	e014      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <HAL_UART_IRQHandler+0x514>
 8005522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f993 	bl	800585a <UART_EndTransmit_IT>
    return;
 8005534:	e004      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
    return;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
      return;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <HAL_UART_IRQHandler+0x514>
      return;
 800553e:	bf00      	nop
  }
}
 8005540:	37e8      	adds	r7, #232	; 0xe8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop

08005548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b090      	sub	sp, #64	; 0x40
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005584:	e050      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d04c      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800558e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005594:	f7fc ff82 	bl	800249c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d241      	bcs.n	8005628 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055c4:	637a      	str	r2, [r7, #52]	; 0x34
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	613b      	str	r3, [r7, #16]
   return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3314      	adds	r3, #20
 80055f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f8:	623a      	str	r2, [r7, #32]
 80055fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69f9      	ldr	r1, [r7, #28]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	61bb      	str	r3, [r7, #24]
   return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e00f      	b.n	8005648 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	429a      	cmp	r2, r3
 8005644:	d09f      	beq.n	8005586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3740      	adds	r7, #64	; 0x40
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2222      	movs	r2, #34	; 0x22
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b095      	sub	sp, #84	; 0x54
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f4:	643a      	str	r2, [r7, #64]	; 0x40
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	61fb      	str	r3, [r7, #28]
   return(result);
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800572e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	d119      	bne.n	8005778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	60bb      	str	r3, [r7, #8]
   return(result);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0310 	bic.w	r3, r3, #16
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005764:	61ba      	str	r2, [r7, #24]
 8005766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e5      	bne.n	8005744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005786:	bf00      	nop
 8005788:	3754      	adds	r7, #84	; 0x54
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7fc f97d 	bl	8001aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b21      	cmp	r3, #33	; 0x21
 80057cc:	d13e      	bne.n	800584c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d114      	bne.n	8005802 <UART_Transmit_IT+0x48>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]
 8005800:	e008      	b.n	8005814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6211      	str	r1, [r2, #32]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4619      	mov	r1, r3
 8005822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fe64 	bl	8005548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b08c      	sub	sp, #48	; 0x30
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b22      	cmp	r3, #34	; 0x22
 800589c:	f040 80ab 	bne.w	80059f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d117      	bne.n	80058da <UART_Receive_IT+0x50>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
 80058d8:	e026      	b.n	8005928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d007      	beq.n	80058fe <UART_Receive_IT+0x74>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <UART_Receive_IT+0x82>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	e008      	b.n	800591e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005938:	2b00      	cmp	r3, #0
 800593a:	d15a      	bne.n	80059f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0220 	bic.w	r2, r2, #32
 800594a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800595a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	d135      	bne.n	80059e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	613b      	str	r3, [r7, #16]
   return(result);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	623a      	str	r2, [r7, #32]
 80059a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	69f9      	ldr	r1, [r7, #28]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d10a      	bne.n	80059da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fdbb 	bl	800555c <HAL_UARTEx_RxEventCallback>
 80059e6:	e002      	b.n	80059ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fc f8b3 	bl	8001b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e002      	b.n	80059f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	; 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a04:	b0c0      	sub	sp, #256	; 0x100
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	68d9      	ldr	r1, [r3, #12]
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	ea40 0301 	orr.w	r3, r0, r1
 8005a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a58:	f021 010c 	bic.w	r1, r1, #12
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a66:	430b      	orrs	r3, r1
 8005a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	6999      	ldr	r1, [r3, #24]
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	ea40 0301 	orr.w	r3, r0, r1
 8005a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b8f      	ldr	r3, [pc, #572]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d005      	beq.n	8005aa0 <UART_SetConfig+0xa0>
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <UART_SetConfig+0x2d0>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d104      	bne.n	8005aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fd fde2 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aa8:	e003      	b.n	8005ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aaa:	f7fd fdc9 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abc:	f040 810c 	bne.w	8005cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	1891      	adds	r1, r2, r2
 8005ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ada:	415b      	adcs	r3, r3
 8005adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	eb12 0801 	adds.w	r8, r2, r1
 8005ae8:	4629      	mov	r1, r5
 8005aea:	eb43 0901 	adc.w	r9, r3, r1
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b02:	4690      	mov	r8, r2
 8005b04:	4699      	mov	r9, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	eb18 0303 	adds.w	r3, r8, r3
 8005b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b10:	462b      	mov	r3, r5
 8005b12:	eb49 0303 	adc.w	r3, r9, r3
 8005b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b2e:	460b      	mov	r3, r1
 8005b30:	18db      	adds	r3, r3, r3
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
 8005b34:	4613      	mov	r3, r2
 8005b36:	eb42 0303 	adc.w	r3, r2, r3
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b44:	f7fa fbb4 	bl	80002b0 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	011c      	lsls	r4, r3, #4
 8005b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	1891      	adds	r1, r2, r2
 8005b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b70:	415b      	adcs	r3, r3
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b78:	4641      	mov	r1, r8
 8005b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7e:	4649      	mov	r1, r9
 8005b80:	eb43 0b01 	adc.w	fp, r3, r1
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b98:	4692      	mov	sl, r2
 8005b9a:	469b      	mov	fp, r3
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	18db      	adds	r3, r3, r3
 8005bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bca:	4613      	mov	r3, r2
 8005bcc:	eb42 0303 	adc.w	r3, r2, r3
 8005bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bda:	f7fa fb69 	bl	80002b0 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005be6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2264      	movs	r2, #100	; 0x64
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c08:	441c      	add	r4, r3
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c24:	415b      	adcs	r3, r3
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	1851      	adds	r1, r2, r1
 8005c30:	6339      	str	r1, [r7, #48]	; 0x30
 8005c32:	4649      	mov	r1, r9
 8005c34:	414b      	adcs	r3, r1
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c44:	4659      	mov	r1, fp
 8005c46:	00cb      	lsls	r3, r1, #3
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4e:	4651      	mov	r1, sl
 8005c50:	00ca      	lsls	r2, r1, #3
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	4642      	mov	r2, r8
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c60:	464b      	mov	r3, r9
 8005c62:	460a      	mov	r2, r1
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c80:	460b      	mov	r3, r1
 8005c82:	18db      	adds	r3, r3, r3
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	4613      	mov	r3, r2
 8005c88:	eb42 0303 	adc.w	r3, r2, r3
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c96:	f7fa fb0b 	bl	80002b0 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	2164      	movs	r1, #100	; 0x64
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	3332      	adds	r3, #50	; 0x32
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0207 	and.w	r2, r3, #7
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4422      	add	r2, r4
 8005cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc8:	e106      	b.n	8005ed8 <UART_SetConfig+0x4d8>
 8005cca:	bf00      	nop
 8005ccc:	40011000 	.word	0x40011000
 8005cd0:	40011400 	.word	0x40011400
 8005cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	6239      	str	r1, [r7, #32]
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	1854      	adds	r4, r2, r1
 8005cfe:	4649      	mov	r1, r9
 8005d00:	eb43 0501 	adc.w	r5, r3, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	00eb      	lsls	r3, r5, #3
 8005d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d12:	00e2      	lsls	r2, r4, #3
 8005d14:	4614      	mov	r4, r2
 8005d16:	461d      	mov	r5, r3
 8005d18:	4643      	mov	r3, r8
 8005d1a:	18e3      	adds	r3, r4, r3
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d20:	464b      	mov	r3, r9
 8005d22:	eb45 0303 	adc.w	r3, r5, r3
 8005d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d46:	4629      	mov	r1, r5
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d50:	4621      	mov	r1, r4
 8005d52:	008a      	lsls	r2, r1, #2
 8005d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d58:	f7fa faaa 	bl	80002b0 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4b60      	ldr	r3, [pc, #384]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005d62:	fba3 2302 	umull	r2, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	011c      	lsls	r4, r3, #4
 8005d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	1891      	adds	r1, r2, r2
 8005d82:	61b9      	str	r1, [r7, #24]
 8005d84:	415b      	adcs	r3, r3
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	1851      	adds	r1, r2, r1
 8005d90:	6139      	str	r1, [r7, #16]
 8005d92:	4649      	mov	r1, r9
 8005d94:	414b      	adcs	r3, r1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da4:	4659      	mov	r1, fp
 8005da6:	00cb      	lsls	r3, r1, #3
 8005da8:	4651      	mov	r1, sl
 8005daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dae:	4651      	mov	r1, sl
 8005db0:	00ca      	lsls	r2, r1, #3
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	4642      	mov	r2, r8
 8005dba:	189b      	adds	r3, r3, r2
 8005dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	eb42 0303 	adc.w	r3, r2, r3
 8005dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005de4:	4649      	mov	r1, r9
 8005de6:	008b      	lsls	r3, r1, #2
 8005de8:	4641      	mov	r1, r8
 8005dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dee:	4641      	mov	r1, r8
 8005df0:	008a      	lsls	r2, r1, #2
 8005df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005df6:	f7fa fa5b 	bl	80002b0 <__aeabi_uldivmod>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4b38      	ldr	r3, [pc, #224]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005e02:	fba3 2301 	umull	r2, r3, r3, r1
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2264      	movs	r2, #100	; 0x64
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	1acb      	subs	r3, r1, r3
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	3332      	adds	r3, #50	; 0x32
 8005e14:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e20:	441c      	add	r4, r3
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e26:	2200      	movs	r2, #0
 8005e28:	673b      	str	r3, [r7, #112]	; 0x70
 8005e2a:	677a      	str	r2, [r7, #116]	; 0x74
 8005e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e40:	4641      	mov	r1, r8
 8005e42:	1851      	adds	r1, r2, r1
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	4649      	mov	r1, r9
 8005e48:	414b      	adcs	r3, r1
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e58:	4659      	mov	r1, fp
 8005e5a:	00cb      	lsls	r3, r1, #3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e62:	4651      	mov	r1, sl
 8005e64:	00ca      	lsls	r2, r1, #3
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e72:	464b      	mov	r3, r9
 8005e74:	460a      	mov	r2, r1
 8005e76:	eb42 0303 	adc.w	r3, r2, r3
 8005e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
 8005e86:	667a      	str	r2, [r7, #100]	; 0x64
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e94:	4649      	mov	r1, r9
 8005e96:	008b      	lsls	r3, r1, #2
 8005e98:	4641      	mov	r1, r8
 8005e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9e:	4641      	mov	r1, r8
 8005ea0:	008a      	lsls	r2, r1, #2
 8005ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ea6:	f7fa fa03 	bl	80002b0 <__aeabi_uldivmod>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	3332      	adds	r3, #50	; 0x32
 8005ec2:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4422      	add	r2, r4
 8005ed6:	609a      	str	r2, [r3, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee4:	51eb851f 	.word	0x51eb851f

08005ee8 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <MUX>:
void MUX(struct WIFI *a)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2204      	movs	r2, #4
 8005f78:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <IPDef>:
void IPDef(struct WIFI *a)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2206      	movs	r2, #6
 8005ffc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2208      	movs	r2, #8
 8006028:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2209      	movs	r2, #9
 8006054:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2207      	movs	r2, #7
 8006080:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80060a6:	af06      	add	r7, sp, #24
 80060a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060b0:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80060ca:	2300      	movs	r3, #0
 80060cc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80060d0:	2320      	movs	r3, #32
 80060d2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80060d6:	2322      	movs	r3, #34	; 0x22
 80060d8:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80060dc:	4b71      	ldr	r3, [pc, #452]	; (80062a4 <AT_ESP8266_ND+0x204>)
 80060de:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80060e2:	4a71      	ldr	r2, [pc, #452]	; (80062a8 <AT_ESP8266_ND+0x208>)
 80060e4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	4611      	mov	r1, r2
 80060ec:	8019      	strh	r1, [r3, #0]
 80060ee:	3302      	adds	r3, #2
 80060f0:	0c12      	lsrs	r2, r2, #16
 80060f2:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80060f4:	f642 4322 	movw	r3, #11298	; 0x2c22
 80060f8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80060fc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006100:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006110:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006114:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f860 	bl	80001f4 <strlen>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800613c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800614a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800615a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006164:	4618      	mov	r0, r3
 8006166:	f7fa f845 	bl	80001f4 <strlen>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 800617c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2206      	movs	r2, #6
 8006188:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800618c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006190:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800619a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800619e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80061a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80061b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80061c4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80061c8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80061d2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80061d6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80061da:	6809      	ldr	r1, [r1, #0]
 80061dc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80061e0:	2600      	movs	r6, #0
 80061e2:	9604      	str	r6, [sp, #16]
 80061e4:	9103      	str	r1, [sp, #12]
 80061e6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80061ea:	9102      	str	r1, [sp, #8]
 80061ec:	9201      	str	r2, [sp, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	462b      	mov	r3, r5
 80061f2:	4a2e      	ldr	r2, [pc, #184]	; (80062ac <AT_ESP8266_ND+0x20c>)
 80061f4:	4621      	mov	r1, r4
 80061f6:	f007 f9c5 	bl	800d584 <FT_String_ND>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 812a 	bne.w	8006456 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2206      	movs	r2, #6
 800620e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006220:	2b00      	cmp	r3, #0
 8006222:	d145      	bne.n	80062b0 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800624e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800625c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006260:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800626a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800626e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006272:	6809      	ldr	r1, [r1, #0]
 8006274:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006278:	2604      	movs	r6, #4
 800627a:	9604      	str	r6, [sp, #16]
 800627c:	9103      	str	r1, [sp, #12]
 800627e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006282:	9102      	str	r1, [sp, #8]
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	462b      	mov	r3, r5
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <AT_ESP8266_ND+0x20c>)
 800628c:	4621      	mov	r1, r4
 800628e:	f007 f979 	bl	800d584 <FT_String_ND>
 8006292:	4602      	mov	r2, r0
 8006294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 80062a2:	e044      	b.n	800632e <AT_ESP8266_ND+0x28e>
 80062a4:	00222c22 	.word	0x00222c22
 80062a8:	0800f6e0 	.word	0x0800f6e0
 80062ac:	0800f508 	.word	0x0800f508
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 80062b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80062be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80062cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80062da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80062e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80062ec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80062f6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80062fa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80062fe:	6809      	ldr	r1, [r1, #0]
 8006300:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006304:	2605      	movs	r6, #5
 8006306:	9604      	str	r6, [sp, #16]
 8006308:	9103      	str	r1, [sp, #12]
 800630a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800630e:	9102      	str	r1, [sp, #8]
 8006310:	9201      	str	r2, [sp, #4]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	462b      	mov	r3, r5
 8006316:	4ac1      	ldr	r2, [pc, #772]	; (800661c <AT_ESP8266_ND+0x57c>)
 8006318:	4621      	mov	r1, r4
 800631a:	f007 f933 	bl	800d584 <FT_String_ND>
 800631e:	4602      	mov	r2, r0
 8006320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 800632e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006332:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800633c:	2b04      	cmp	r3, #4
 800633e:	d15a      	bne.n	80063f6 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2263      	movs	r2, #99	; 0x63
 800634c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006350:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 800635e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 800636c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f103 0094 	add.w	r0, r3, #148	; 0x94
 800637a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800637e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800638c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006396:	2341      	movs	r3, #65	; 0x41
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	f007 fc58 	bl	800dc50 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 80063a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80063ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80063bc:	2341      	movs	r3, #65	; 0x41
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	2205      	movs	r2, #5
 80063c4:	f007 fc44 	bl	800dc50 <CopiaVector>

	 		a->_debug_rx_ok++;
 80063c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 80063e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 80063f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006404:	2b05      	cmp	r3, #5
 8006406:	d126      	bne.n	8006456 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800640c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2237      	movs	r2, #55	; 0x37
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800641c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800642c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800643c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006446:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800644a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2201      	movs	r2, #1
 8006452:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800645a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2204      	movs	r2, #4
 8006462:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006466:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800646a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006486:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800649e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80064a2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80064ac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80064b0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80064b4:	6809      	ldr	r1, [r1, #0]
 80064b6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80064ba:	2600      	movs	r6, #0
 80064bc:	9604      	str	r6, [sp, #16]
 80064be:	9103      	str	r1, [sp, #12]
 80064c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80064c4:	9102      	str	r1, [sp, #8]
 80064c6:	9201      	str	r2, [sp, #4]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	462b      	mov	r3, r5
 80064cc:	4a54      	ldr	r2, [pc, #336]	; (8006620 <AT_ESP8266_ND+0x580>)
 80064ce:	4621      	mov	r1, r4
 80064d0:	f007 f858 	bl	800d584 <FT_String_ND>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	f040 8334 	bne.w	8006b44 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 80064dc:	2301      	movs	r3, #1
 80064de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 80064e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2206      	movs	r2, #6
 80064ee:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 80064f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800650e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006512:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800651c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006520:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800652a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800652e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006538:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800653c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006540:	6809      	ldr	r1, [r1, #0]
 8006542:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006546:	2600      	movs	r6, #0
 8006548:	9604      	str	r6, [sp, #16]
 800654a:	9103      	str	r1, [sp, #12]
 800654c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006550:	9102      	str	r1, [sp, #8]
 8006552:	9201      	str	r2, [sp, #4]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462b      	mov	r3, r5
 8006558:	4a32      	ldr	r2, [pc, #200]	; (8006624 <AT_ESP8266_ND+0x584>)
 800655a:	4621      	mov	r1, r4
 800655c:	f007 f812 	bl	800d584 <FT_String_ND>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d113      	bne.n	800658e <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006566:	2313      	movs	r3, #19
 8006568:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 800656c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 800658a:	f001 b981 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 800658e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800659e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80065ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80065ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80065c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80065d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80065da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80065e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80065e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80065ec:	6809      	ldr	r1, [r1, #0]
 80065ee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80065f2:	2600      	movs	r6, #0
 80065f4:	9604      	str	r6, [sp, #16]
 80065f6:	9103      	str	r1, [sp, #12]
 80065f8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80065fc:	9102      	str	r1, [sp, #8]
 80065fe:	9201      	str	r2, [sp, #4]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	462b      	mov	r3, r5
 8006604:	4a08      	ldr	r2, [pc, #32]	; (8006628 <AT_ESP8266_ND+0x588>)
 8006606:	4621      	mov	r1, r4
 8006608:	f006 ffbc 	bl	800d584 <FT_String_ND>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10c      	bne.n	800662c <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006612:	230d      	movs	r3, #13
 8006614:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006618:	f001 b93a 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
 800661c:	0800f508 	.word	0x0800f508
 8006620:	0800f510 	.word	0x0800f510
 8006624:	0800f518 	.word	0x0800f518
 8006628:	0800f520 	.word	0x0800f520
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 800662c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	220a      	movs	r2, #10
 8006638:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800663c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800664a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800664e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800665c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800666a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006674:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006678:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006682:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006686:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800668a:	6809      	ldr	r1, [r1, #0]
 800668c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006690:	2600      	movs	r6, #0
 8006692:	9604      	str	r6, [sp, #16]
 8006694:	9103      	str	r1, [sp, #12]
 8006696:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800669a:	9102      	str	r1, [sp, #8]
 800669c:	9201      	str	r2, [sp, #4]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	462b      	mov	r3, r5
 80066a2:	4ab7      	ldr	r2, [pc, #732]	; (8006980 <AT_ESP8266_ND+0x8e0>)
 80066a4:	4621      	mov	r1, r4
 80066a6:	f006 ff6d 	bl	800d584 <FT_String_ND>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d104      	bne.n	80066ba <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 80066b0:	231c      	movs	r3, #28
 80066b2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80066b6:	f001 b8eb 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 80066ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	220f      	movs	r2, #15
 80066c6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80066ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80066d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80066e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80066f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006702:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006706:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006710:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006714:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006718:	6809      	ldr	r1, [r1, #0]
 800671a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800671e:	2600      	movs	r6, #0
 8006720:	9604      	str	r6, [sp, #16]
 8006722:	9103      	str	r1, [sp, #12]
 8006724:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006728:	9102      	str	r1, [sp, #8]
 800672a:	9201      	str	r2, [sp, #4]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	462b      	mov	r3, r5
 8006730:	4a94      	ldr	r2, [pc, #592]	; (8006984 <AT_ESP8266_ND+0x8e4>)
 8006732:	4621      	mov	r1, r4
 8006734:	f006 ff26 	bl	800d584 <FT_String_ND>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d104      	bne.n	8006748 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 800673e:	2317      	movs	r3, #23
 8006740:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006744:	f001 b8a4 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2203      	movs	r2, #3
 8006754:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800675c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800676a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006786:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006790:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006794:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800679e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80067a2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80067a6:	6809      	ldr	r1, [r1, #0]
 80067a8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80067ac:	2600      	movs	r6, #0
 80067ae:	9604      	str	r6, [sp, #16]
 80067b0:	9103      	str	r1, [sp, #12]
 80067b2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80067b6:	9102      	str	r1, [sp, #8]
 80067b8:	9201      	str	r2, [sp, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	462b      	mov	r3, r5
 80067be:	4a72      	ldr	r2, [pc, #456]	; (8006988 <AT_ESP8266_ND+0x8e8>)
 80067c0:	4621      	mov	r1, r4
 80067c2:	f006 fedf 	bl	800d584 <FT_String_ND>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d104      	bne.n	80067d6 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 80067cc:	2314      	movs	r3, #20
 80067ce:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80067d2:	f001 b85d 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 80067d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	220c      	movs	r2, #12
 80067e2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80067e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80067f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800681e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006822:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800682c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006830:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006834:	6809      	ldr	r1, [r1, #0]
 8006836:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800683a:	2600      	movs	r6, #0
 800683c:	9604      	str	r6, [sp, #16]
 800683e:	9103      	str	r1, [sp, #12]
 8006840:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006844:	9102      	str	r1, [sp, #8]
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	462b      	mov	r3, r5
 800684c:	4a4f      	ldr	r2, [pc, #316]	; (800698c <AT_ESP8266_ND+0x8ec>)
 800684e:	4621      	mov	r1, r4
 8006850:	f006 fe98 	bl	800d584 <FT_String_ND>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d104      	bne.n	8006864 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800685a:	2315      	movs	r3, #21
 800685c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006860:	f001 b816 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	220b      	movs	r2, #11
 8006870:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800689e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80068ac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068b0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80068ba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068be:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068c2:	6809      	ldr	r1, [r1, #0]
 80068c4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80068c8:	2600      	movs	r6, #0
 80068ca:	9604      	str	r6, [sp, #16]
 80068cc:	9103      	str	r1, [sp, #12]
 80068ce:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80068d2:	9102      	str	r1, [sp, #8]
 80068d4:	9201      	str	r2, [sp, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	462b      	mov	r3, r5
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <AT_ESP8266_ND+0x8f0>)
 80068dc:	4621      	mov	r1, r4
 80068de:	f006 fe51 	bl	800d584 <FT_String_ND>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d104      	bne.n	80068f2 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80068e8:	2309      	movs	r3, #9
 80068ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80068ee:	f000 bfcf 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80068f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	220b      	movs	r2, #11
 80068fe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800691e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800692c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800693a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800693e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006948:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800694c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006950:	6809      	ldr	r1, [r1, #0]
 8006952:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006956:	2600      	movs	r6, #0
 8006958:	9604      	str	r6, [sp, #16]
 800695a:	9103      	str	r1, [sp, #12]
 800695c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006960:	9102      	str	r1, [sp, #8]
 8006962:	9201      	str	r2, [sp, #4]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462b      	mov	r3, r5
 8006968:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <AT_ESP8266_ND+0x8f4>)
 800696a:	4621      	mov	r1, r4
 800696c:	f006 fe0a 	bl	800d584 <FT_String_ND>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d110      	bne.n	8006998 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8006976:	2307      	movs	r3, #7
 8006978:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800697c:	f000 bf88 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
 8006980:	0800f52c 	.word	0x0800f52c
 8006984:	0800f538 	.word	0x0800f538
 8006988:	0800f548 	.word	0x0800f548
 800698c:	0800f54c 	.word	0x0800f54c
 8006990:	0800f55c 	.word	0x0800f55c
 8006994:	0800f568 	.word	0x0800f568
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	220b      	movs	r2, #11
 80069a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80069a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80069b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80069c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80069e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069e4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80069ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069f2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069fc:	2600      	movs	r6, #0
 80069fe:	9604      	str	r6, [sp, #16]
 8006a00:	9103      	str	r1, [sp, #12]
 8006a02:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a06:	9102      	str	r1, [sp, #8]
 8006a08:	9201      	str	r2, [sp, #4]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	4ab7      	ldr	r2, [pc, #732]	; (8006cec <AT_ESP8266_ND+0xc4c>)
 8006a10:	4621      	mov	r1, r4
 8006a12:	f006 fdb7 	bl	800d584 <FT_String_ND>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d104      	bne.n	8006a26 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a22:	f000 bf35 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	220a      	movs	r2, #10
 8006a32:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a6e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a72:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a7c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a80:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a84:	6809      	ldr	r1, [r1, #0]
 8006a86:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	9604      	str	r6, [sp, #16]
 8006a8e:	9103      	str	r1, [sp, #12]
 8006a90:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a94:	9102      	str	r1, [sp, #8]
 8006a96:	9201      	str	r2, [sp, #4]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	4a94      	ldr	r2, [pc, #592]	; (8006cf0 <AT_ESP8266_ND+0xc50>)
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f006 fd70 	bl	800d584 <FT_String_ND>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d104      	bne.n	8006ab4 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 8006aaa:	231b      	movs	r3, #27
 8006aac:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ab0:	f000 beee 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8006ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006afc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b00:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b0a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b0e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b12:	6809      	ldr	r1, [r1, #0]
 8006b14:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b18:	2600      	movs	r6, #0
 8006b1a:	9604      	str	r6, [sp, #16]
 8006b1c:	9103      	str	r1, [sp, #12]
 8006b1e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b22:	9102      	str	r1, [sp, #8]
 8006b24:	9201      	str	r2, [sp, #4]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	4a72      	ldr	r2, [pc, #456]	; (8006cf4 <AT_ESP8266_ND+0xc54>)
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	f006 fd29 	bl	800d584 <FT_String_ND>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	f040 86ab 	bne.w	8007890 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 8006b3a:	230f      	movs	r3, #15
 8006b3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b40:	f000 bea6 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8006b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2207      	movs	r2, #7
 8006b50:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b8c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b90:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b9a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b9e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ba2:	6809      	ldr	r1, [r1, #0]
 8006ba4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ba8:	2600      	movs	r6, #0
 8006baa:	9604      	str	r6, [sp, #16]
 8006bac:	9103      	str	r1, [sp, #12]
 8006bae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bb2:	9102      	str	r1, [sp, #8]
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	462b      	mov	r3, r5
 8006bba:	4a4f      	ldr	r2, [pc, #316]	; (8006cf8 <AT_ESP8266_ND+0xc58>)
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	f006 fce1 	bl	800d584 <FT_String_ND>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	f040 8326 	bne.w	8007216 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8006bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 8006be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c1c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c26:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c2a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c2e:	6809      	ldr	r1, [r1, #0]
 8006c30:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c34:	2600      	movs	r6, #0
 8006c36:	9604      	str	r6, [sp, #16]
 8006c38:	9103      	str	r1, [sp, #12]
 8006c3a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c3e:	9102      	str	r1, [sp, #8]
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	462b      	mov	r3, r5
 8006c46:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <AT_ESP8266_ND+0xc5c>)
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f006 fc9b 	bl	800d584 <FT_String_ND>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d104      	bne.n	8006c5e <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8006c54:	2306      	movs	r3, #6
 8006c56:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c5a:	f000 be19 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8006c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2215      	movs	r2, #21
 8006c6a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ca6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006caa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cb4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cb8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cbc:	6809      	ldr	r1, [r1, #0]
 8006cbe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	9604      	str	r6, [sp, #16]
 8006cc6:	9103      	str	r1, [sp, #12]
 8006cc8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ccc:	9102      	str	r1, [sp, #8]
 8006cce:	9201      	str	r2, [sp, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <AT_ESP8266_ND+0xc60>)
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	f006 fc54 	bl	800d584 <FT_String_ND>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d110      	bne.n	8006d04 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8006ce2:	230e      	movs	r3, #14
 8006ce4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ce8:	f000 bdd2 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
 8006cec:	0800f574 	.word	0x0800f574
 8006cf0:	0800f580 	.word	0x0800f580
 8006cf4:	0800f58c 	.word	0x0800f58c
 8006cf8:	0800f594 	.word	0x0800f594
 8006cfc:	0800f59c 	.word	0x0800f59c
 8006d00:	0800f5a8 	.word	0x0800f5a8
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8006d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	220c      	movs	r2, #12
 8006d10:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d4c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d50:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d5a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d5e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d62:	6809      	ldr	r1, [r1, #0]
 8006d64:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d68:	2600      	movs	r6, #0
 8006d6a:	9604      	str	r6, [sp, #16]
 8006d6c:	9103      	str	r1, [sp, #12]
 8006d6e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d72:	9102      	str	r1, [sp, #8]
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	462b      	mov	r3, r5
 8006d7a:	4ab7      	ldr	r2, [pc, #732]	; (8007058 <AT_ESP8266_ND+0xfb8>)
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	f006 fc01 	bl	800d584 <FT_String_ND>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d104      	bne.n	8006d92 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8006d88:	2316      	movs	r3, #22
 8006d8a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d8e:	f000 bd7f 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	220b      	movs	r2, #11
 8006d9e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dda:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dde:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006de8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006df0:	6809      	ldr	r1, [r1, #0]
 8006df2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006df6:	2600      	movs	r6, #0
 8006df8:	9604      	str	r6, [sp, #16]
 8006dfa:	9103      	str	r1, [sp, #12]
 8006dfc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e00:	9102      	str	r1, [sp, #8]
 8006e02:	9201      	str	r2, [sp, #4]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462b      	mov	r3, r5
 8006e08:	4a94      	ldr	r2, [pc, #592]	; (800705c <AT_ESP8266_ND+0xfbc>)
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f006 fbba 	bl	800d584 <FT_String_ND>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d104      	bne.n	8006e20 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 8006e16:	231a      	movs	r3, #26
 8006e18:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e1c:	f000 bd38 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8006e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2211      	movs	r2, #17
 8006e2c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e68:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e6c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e76:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e7a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e7e:	6809      	ldr	r1, [r1, #0]
 8006e80:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e84:	2600      	movs	r6, #0
 8006e86:	9604      	str	r6, [sp, #16]
 8006e88:	9103      	str	r1, [sp, #12]
 8006e8a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e8e:	9102      	str	r1, [sp, #8]
 8006e90:	9201      	str	r2, [sp, #4]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	462b      	mov	r3, r5
 8006e96:	4a72      	ldr	r2, [pc, #456]	; (8007060 <AT_ESP8266_ND+0xfc0>)
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f006 fb73 	bl	800d584 <FT_String_ND>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d104      	bne.n	8006eae <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8006ea4:	2311      	movs	r3, #17
 8006ea6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006eaa:	f000 bcf1 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8006eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	220a      	movs	r2, #10
 8006eba:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ef6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006efa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f04:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f08:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f0c:	6809      	ldr	r1, [r1, #0]
 8006f0e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f12:	2600      	movs	r6, #0
 8006f14:	9604      	str	r6, [sp, #16]
 8006f16:	9103      	str	r1, [sp, #12]
 8006f18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f1c:	9102      	str	r1, [sp, #8]
 8006f1e:	9201      	str	r2, [sp, #4]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	462b      	mov	r3, r5
 8006f24:	4a4f      	ldr	r2, [pc, #316]	; (8007064 <AT_ESP8266_ND+0xfc4>)
 8006f26:	4621      	mov	r1, r4
 8006f28:	f006 fb2c 	bl	800d584 <FT_String_ND>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d104      	bne.n	8006f3c <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8006f32:	231d      	movs	r3, #29
 8006f34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f38:	f000 bcaa 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	220b      	movs	r2, #11
 8006f48:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f9a:	6809      	ldr	r1, [r1, #0]
 8006f9c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	9604      	str	r6, [sp, #16]
 8006fa4:	9103      	str	r1, [sp, #12]
 8006fa6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006faa:	9102      	str	r1, [sp, #8]
 8006fac:	9201      	str	r2, [sp, #4]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <AT_ESP8266_ND+0xfc8>)
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	f006 fae5 	bl	800d584 <FT_String_ND>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d104      	bne.n	8006fca <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8006fc0:	231e      	movs	r3, #30
 8006fc2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fc6:	f000 bc63 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	220b      	movs	r2, #11
 8006fd6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006fda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007012:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007016:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007020:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007024:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007028:	6809      	ldr	r1, [r1, #0]
 800702a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800702e:	2600      	movs	r6, #0
 8007030:	9604      	str	r6, [sp, #16]
 8007032:	9103      	str	r1, [sp, #12]
 8007034:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007038:	9102      	str	r1, [sp, #8]
 800703a:	9201      	str	r2, [sp, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	462b      	mov	r3, r5
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <AT_ESP8266_ND+0xfcc>)
 8007042:	4621      	mov	r1, r4
 8007044:	f006 fa9e 	bl	800d584 <FT_String_ND>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d110      	bne.n	8007070 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 800704e:	231f      	movs	r3, #31
 8007050:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007054:	f000 bc1c 	b.w	8007890 <AT_ESP8266_ND+0x17f0>
 8007058:	0800f54c 	.word	0x0800f54c
 800705c:	0800f55c 	.word	0x0800f55c
 8007060:	0800f5c0 	.word	0x0800f5c0
 8007064:	0800f52c 	.word	0x0800f52c
 8007068:	0800f568 	.word	0x0800f568
 800706c:	0800f574 	.word	0x0800f574
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007070:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2208      	movs	r2, #8
 800707c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800708e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800709c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070b8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070bc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070c6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070ca:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070ce:	6809      	ldr	r1, [r1, #0]
 80070d0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070d4:	2600      	movs	r6, #0
 80070d6:	9604      	str	r6, [sp, #16]
 80070d8:	9103      	str	r1, [sp, #12]
 80070da:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070de:	9102      	str	r1, [sp, #8]
 80070e0:	9201      	str	r2, [sp, #4]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	462b      	mov	r3, r5
 80070e6:	4ac4      	ldr	r2, [pc, #784]	; (80073f8 <AT_ESP8266_ND+0x1358>)
 80070e8:	4621      	mov	r1, r4
 80070ea:	f006 fa4b 	bl	800d584 <FT_String_ND>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d103      	bne.n	80070fc <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 80070f4:	2320      	movs	r3, #32
 80070f6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070fa:	e3c9      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 80070fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007100:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	220a      	movs	r2, #10
 8007108:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800710c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800711a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007144:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007148:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007152:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007156:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800715a:	6809      	ldr	r1, [r1, #0]
 800715c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007160:	2600      	movs	r6, #0
 8007162:	9604      	str	r6, [sp, #16]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800716a:	9102      	str	r1, [sp, #8]
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	462b      	mov	r3, r5
 8007172:	4aa2      	ldr	r2, [pc, #648]	; (80073fc <AT_ESP8266_ND+0x135c>)
 8007174:	4621      	mov	r1, r4
 8007176:	f006 fa05 	bl	800d584 <FT_String_ND>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d103      	bne.n	8007188 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007180:	2321      	movs	r3, #33	; 0x21
 8007182:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007186:	e383      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800718c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2205      	movs	r2, #5
 8007194:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071e6:	6809      	ldr	r1, [r1, #0]
 80071e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071ec:	2600      	movs	r6, #0
 80071ee:	9604      	str	r6, [sp, #16]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071f6:	9102      	str	r1, [sp, #8]
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	462b      	mov	r3, r5
 80071fe:	4a80      	ldr	r2, [pc, #512]	; (8007400 <AT_ESP8266_ND+0x1360>)
 8007200:	4621      	mov	r1, r4
 8007202:	f006 f9bf 	bl	800d584 <FT_String_ND>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	f040 8341 	bne.w	8007890 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 800720e:	2322      	movs	r3, #34	; 0x22
 8007210:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007214:	e33c      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800721a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	220f      	movs	r2, #15
 8007222:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800725e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007262:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800726c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007270:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007274:	6809      	ldr	r1, [r1, #0]
 8007276:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800727a:	2600      	movs	r6, #0
 800727c:	9604      	str	r6, [sp, #16]
 800727e:	9103      	str	r1, [sp, #12]
 8007280:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007284:	9102      	str	r1, [sp, #8]
 8007286:	9201      	str	r2, [sp, #4]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	462b      	mov	r3, r5
 800728c:	4a5d      	ldr	r2, [pc, #372]	; (8007404 <AT_ESP8266_ND+0x1364>)
 800728e:	4621      	mov	r1, r4
 8007290:	f006 f978 	bl	800d584 <FT_String_ND>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d112      	bne.n	80072c0 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 800729a:	230a      	movs	r3, #10
 800729c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 80072a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 80072be:	e2e7      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 80072c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2209      	movs	r2, #9
 80072cc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80072d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007308:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800730c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007310:	6812      	ldr	r2, [r2, #0]
 8007312:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007316:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800731a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800731e:	6809      	ldr	r1, [r1, #0]
 8007320:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007324:	2600      	movs	r6, #0
 8007326:	9604      	str	r6, [sp, #16]
 8007328:	9103      	str	r1, [sp, #12]
 800732a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800732e:	9102      	str	r1, [sp, #8]
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	462b      	mov	r3, r5
 8007336:	4a34      	ldr	r2, [pc, #208]	; (8007408 <AT_ESP8266_ND+0x1368>)
 8007338:	4621      	mov	r1, r4
 800733a:	f006 f923 	bl	800d584 <FT_String_ND>
 800733e:	4603      	mov	r3, r0
 8007340:	2b01      	cmp	r3, #1
 8007342:	d112      	bne.n	800736a <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007344:	2319      	movs	r3, #25
 8007346:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 800734a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800734e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007368:	e292      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 800736a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2208      	movs	r2, #8
 8007376:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073b2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073b6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073c0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073c4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073c8:	6809      	ldr	r1, [r1, #0]
 80073ca:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073ce:	2600      	movs	r6, #0
 80073d0:	9604      	str	r6, [sp, #16]
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073d8:	9102      	str	r1, [sp, #8]
 80073da:	9201      	str	r2, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	462b      	mov	r3, r5
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <AT_ESP8266_ND+0x136c>)
 80073e2:	4621      	mov	r1, r4
 80073e4:	f006 f8ce 	bl	800d584 <FT_String_ND>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d110      	bne.n	8007410 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 80073ee:	2310      	movs	r3, #16
 80073f0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073f4:	e24c      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
 80073f6:	bf00      	nop
 80073f8:	0800f5d4 	.word	0x0800f5d4
 80073fc:	0800f580 	.word	0x0800f580
 8007400:	0800f5e0 	.word	0x0800f5e0
 8007404:	0800f5e8 	.word	0x0800f5e8
 8007408:	0800f5f8 	.word	0x0800f5f8
 800740c:	0800f59c 	.word	0x0800f59c
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800741e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007422:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800742c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f203 4594 	addw	r5, r3, #1172	; 0x494
 800743a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800745c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007466:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800746a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800746e:	6809      	ldr	r1, [r1, #0]
 8007470:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007474:	2300      	movs	r3, #0
 8007476:	9304      	str	r3, [sp, #16]
 8007478:	9103      	str	r1, [sp, #12]
 800747a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800747e:	9102      	str	r1, [sp, #8]
 8007480:	9201      	str	r2, [sp, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4633      	mov	r3, r6
 8007488:	462a      	mov	r2, r5
 800748a:	4621      	mov	r1, r4
 800748c:	f006 f87a 	bl	800d584 <FT_String_ND>
 8007490:	4603      	mov	r3, r0
 8007492:	2b01      	cmp	r3, #1
 8007494:	d112      	bne.n	80074bc <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 81f3 	beq.w	8007890 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 80074aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 80074ba:	e1e9      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 80074bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	220d      	movs	r2, #13
 80074c8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 80074cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007504:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007508:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007512:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007516:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800751a:	6809      	ldr	r1, [r1, #0]
 800751c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007520:	2600      	movs	r6, #0
 8007522:	9604      	str	r6, [sp, #16]
 8007524:	9103      	str	r1, [sp, #12]
 8007526:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800752a:	9102      	str	r1, [sp, #8]
 800752c:	9201      	str	r2, [sp, #4]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	462b      	mov	r3, r5
 8007532:	4aaf      	ldr	r2, [pc, #700]	; (80077f0 <AT_ESP8266_ND+0x1750>)
 8007534:	4621      	mov	r1, r4
 8007536:	f006 f825 	bl	800d584 <FT_String_ND>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d112      	bne.n	8007566 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007540:	2312      	movs	r3, #18
 8007542:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007564:	e194      	b.n	8007890 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	220d      	movs	r2, #13
 8007572:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075c4:	6809      	ldr	r1, [r1, #0]
 80075c6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075ca:	2600      	movs	r6, #0
 80075cc:	9604      	str	r6, [sp, #16]
 80075ce:	9103      	str	r1, [sp, #12]
 80075d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075d4:	9102      	str	r1, [sp, #8]
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462b      	mov	r3, r5
 80075dc:	4a85      	ldr	r2, [pc, #532]	; (80077f4 <AT_ESP8266_ND+0x1754>)
 80075de:	4621      	mov	r1, r4
 80075e0:	f005 ffd0 	bl	800d584 <FT_String_ND>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d112      	bne.n	8007610 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 80075ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007608:	230c      	movs	r3, #12
 800760a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800760e:	e13f      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	220e      	movs	r2, #14
 800761c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800762e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800763c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007658:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800765c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007666:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800766a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800766e:	6809      	ldr	r1, [r1, #0]
 8007670:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007674:	2600      	movs	r6, #0
 8007676:	9604      	str	r6, [sp, #16]
 8007678:	9103      	str	r1, [sp, #12]
 800767a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800767e:	9102      	str	r1, [sp, #8]
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	462b      	mov	r3, r5
 8007686:	4a5c      	ldr	r2, [pc, #368]	; (80077f8 <AT_ESP8266_ND+0x1758>)
 8007688:	4621      	mov	r1, r4
 800768a:	f005 ff7b 	bl	800d584 <FT_String_ND>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d112      	bne.n	80076ba <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 80076b2:	230b      	movs	r3, #11
 80076b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076b8:	e0ea      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 80076ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	220a      	movs	r2, #10
 80076c6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80076ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007702:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007706:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007710:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007714:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007718:	6809      	ldr	r1, [r1, #0]
 800771a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800771e:	2600      	movs	r6, #0
 8007720:	9604      	str	r6, [sp, #16]
 8007722:	9103      	str	r1, [sp, #12]
 8007724:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007728:	9102      	str	r1, [sp, #8]
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	462b      	mov	r3, r5
 8007730:	4a32      	ldr	r2, [pc, #200]	; (80077fc <AT_ESP8266_ND+0x175c>)
 8007732:	4621      	mov	r1, r4
 8007734:	f005 ff26 	bl	800d584 <FT_String_ND>
 8007738:	4603      	mov	r3, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	d112      	bne.n	8007764 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 800773e:	2318      	movs	r3, #24
 8007740:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007762:	e095      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007764:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007768:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2208      	movs	r2, #8
 8007770:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007786:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800779e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077b0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077ba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077be:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077c2:	6809      	ldr	r1, [r1, #0]
 80077c4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077c8:	2600      	movs	r6, #0
 80077ca:	9604      	str	r6, [sp, #16]
 80077cc:	9103      	str	r1, [sp, #12]
 80077ce:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077d2:	9102      	str	r1, [sp, #8]
 80077d4:	9201      	str	r2, [sp, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	462b      	mov	r3, r5
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <AT_ESP8266_ND+0x1760>)
 80077dc:	4621      	mov	r1, r4
 80077de:	f005 fed1 	bl	800d584 <FT_String_ND>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10d      	bne.n	8007804 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 80077e8:	2303      	movs	r3, #3
 80077ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077ee:	e04f      	b.n	8007890 <AT_ESP8266_ND+0x17f0>
 80077f0:	0800f604 	.word	0x0800f604
 80077f4:	0800f614 	.word	0x0800f614
 80077f8:	0800f624 	.word	0x0800f624
 80077fc:	0800f634 	.word	0x0800f634
 8007800:	0800f640 	.word	0x0800f640
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2209      	movs	r2, #9
 8007810:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800783e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800784c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007850:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800785a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800785e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007862:	6809      	ldr	r1, [r1, #0]
 8007864:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007868:	2600      	movs	r6, #0
 800786a:	9604      	str	r6, [sp, #16]
 800786c:	9103      	str	r1, [sp, #12]
 800786e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007872:	9102      	str	r1, [sp, #8]
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462b      	mov	r3, r5
 800787a:	4a77      	ldr	r2, [pc, #476]	; (8007a58 <AT_ESP8266_ND+0x19b8>)
 800787c:	4621      	mov	r1, r4
 800787e:	f005 fe81 	bl	800d584 <FT_String_ND>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d103      	bne.n	8007890 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8007888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800788c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	f201 84c6 	bhi.w	8009232 <AT_ESP8266_ND+0x3192>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <AT_ESP8266_ND+0x180c>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	08007a61 	.word	0x08007a61
 80078b4:	08007ce3 	.word	0x08007ce3
 80078b8:	08007e61 	.word	0x08007e61
 80078bc:	08008039 	.word	0x08008039
 80078c0:	0800830d 	.word	0x0800830d
 80078c4:	080085c5 	.word	0x080085c5
 80078c8:	08008add 	.word	0x08008add
 80078cc:	08008cb3 	.word	0x08008cb3
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80078e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d14f      	bne.n	8007992 <AT_ESP8266_ND+0x18f2>
 80078f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d04b      	beq.n	8007992 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80078fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d047      	beq.n	8007992 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 8007902:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007906:	2b04      	cmp	r3, #4
 8007908:	d043      	beq.n	8007992 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800790a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800790e:	2b13      	cmp	r3, #19
 8007910:	d03f      	beq.n	8007992 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 8007912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007940:	4620      	mov	r0, r4
 8007942:	f7f8 fc57 	bl	80001f4 <strlen>
 8007946:	4603      	mov	r3, r0
 8007948:	4423      	add	r3, r4
 800794a:	4a44      	ldr	r2, [pc, #272]	; (8007a5c <AT_ESP8266_ND+0x19bc>)
 800794c:	461c      	mov	r4, r3
 800794e:	4613      	mov	r3, r2
 8007950:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007952:	6020      	str	r0, [r4, #0]
 8007954:	6061      	str	r1, [r4, #4]
 8007956:	60a2      	str	r2, [r4, #8]
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800795c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800796a:	4618      	mov	r0, r3
 800796c:	f7f8 fc42 	bl	80001f4 <strlen>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8007982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2264      	movs	r2, #100	; 0x64
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8007992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80079b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d11b      	bne.n	80079fa <AT_ESP8266_ND+0x195a>
 80079c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d023      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
 80079ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079ce:	2b1c      	cmp	r3, #28
 80079d0:	d01f      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 80079d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d01b      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 80079da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d017      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80079e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079e6:	2b0b      	cmp	r3, #11
 80079e8:	d013      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80079ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079ee:	2b0c      	cmp	r3, #12
 80079f0:	d00f      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80079f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079f6:	2b13      	cmp	r3, #19
 80079f8:	d00b      	beq.n	8007a12 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80079fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	f341 841a 	ble.w	8009246 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8007a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8007a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8007a54:	f001 bbf7 	b.w	8009246 <AT_ESP8266_ND+0x31a6>
 8007a58:	0800f64c 	.word	0x0800f64c
 8007a5c:	0800f658 	.word	0x0800f658
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	f040 80c8 	bne.w	8007c14 <AT_ESP8266_ND+0x1b74>
 8007a84:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	f000 80c3 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 8007a8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	f000 80be 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8007a98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	f000 80b9 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8007aa2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	f000 80b4 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 8007aac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ab0:	2b0a      	cmp	r3, #10
 8007ab2:	f000 80af 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8007ab6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007aba:	2b0b      	cmp	r3, #11
 8007abc:	f000 80aa 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8007ac0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ac4:	2b0c      	cmp	r3, #12
 8007ac6:	f000 80a5 	beq.w	8007c14 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 8007aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8007aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7f8 fb7b 	bl	80001f4 <strlen>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4423      	add	r3, r4
 8007b02:	49d5      	ldr	r1, [pc, #852]	; (8007e58 <AT_ESP8266_ND+0x1db8>)
 8007b04:	461a      	mov	r2, r3
 8007b06:	460b      	mov	r3, r1
 8007b08:	cb03      	ldmia	r3!, {r0, r1}
 8007b0a:	6010      	str	r0, [r2, #0]
 8007b0c:	6051      	str	r1, [r2, #4]
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8007b12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007b20:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007b24:	2201      	movs	r2, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f006 fae5 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8007b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1d9d      	adds	r5, r3, #6
 8007b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3306      	adds	r3, #6
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f8 fb4e 	bl	80001f4 <strlen>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f006 fac9 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8007b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007b72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f8 fb3c 	bl	80001f4 <strlen>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8007b82:	4619      	mov	r1, r3
 8007b84:	4620      	mov	r0, r4
 8007b86:	f006 fab6 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8007b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007b98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8007ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3326      	adds	r3, #38	; 0x26
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7f8 fb1e 	bl	80001f4 <strlen>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f006 fa99 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8007bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007bd2:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f006 fa8c 	bl	800e0f6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8007bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7f8 fb01 	bl	80001f4 <strlen>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8007c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	22c8      	movs	r2, #200	; 0xc8
 8007c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8007c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8007c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d11b      	bne.n	8007c7c <AT_ESP8266_ND+0x1bdc>
 8007c44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d023      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
 8007c4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d01f      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8007c54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d01b      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8007c5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d017      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8007c64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c68:	2b0a      	cmp	r3, #10
 8007c6a:	d013      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 8007c6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c70:	2b0b      	cmp	r3, #11
 8007c72:	d00f      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8007c74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	d00b      	beq.n	8007c94 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8007c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007c8a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	f341 82db 	ble.w	800924a <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8007ca6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007caa:	2b0a      	cmp	r3, #10
 8007cac:	d00f      	beq.n	8007cce <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 8007cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8007cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8007cde:	f001 bab4 	b.w	800924a <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8007cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d14d      	bne.n	8007da0 <AT_ESP8266_ND+0x1d00>
 8007d04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d049      	beq.n	8007da0 <AT_ESP8266_ND+0x1d00>
 8007d0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d10:	2b0a      	cmp	r3, #10
 8007d12:	d045      	beq.n	8007da0 <AT_ESP8266_ND+0x1d00>
 8007d14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d18:	2b0d      	cmp	r3, #13
 8007d1a:	d041      	beq.n	8007da0 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 8007d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8007d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f7f8 fa52 	bl	80001f4 <strlen>
 8007d50:	4603      	mov	r3, r0
 8007d52:	4423      	add	r3, r4
 8007d54:	4941      	ldr	r1, [pc, #260]	; (8007e5c <AT_ESP8266_ND+0x1dbc>)
 8007d56:	461a      	mov	r2, r3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	cb03      	ldmia	r3!, {r0, r1}
 8007d5c:	6010      	str	r0, [r2, #0]
 8007d5e:	6051      	str	r1, [r2, #4]
 8007d60:	8819      	ldrh	r1, [r3, #0]
 8007d62:	789b      	ldrb	r3, [r3, #2]
 8007d64:	8111      	strh	r1, [r2, #8]
 8007d66:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f8 fa3c 	bl	80001f4 <strlen>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8007d8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8007dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d113      	bne.n	8007df8 <AT_ESP8266_ND+0x1d58>
 8007dd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dd4:	2b0a      	cmp	r3, #10
 8007dd6:	d01b      	beq.n	8007e10 <AT_ESP8266_ND+0x1d70>
 8007dd8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ddc:	2b0b      	cmp	r3, #11
 8007dde:	d017      	beq.n	8007e10 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8007de0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007de4:	2b0c      	cmp	r3, #12
 8007de6:	d013      	beq.n	8007e10 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 8007de8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d00f      	beq.n	8007e10 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8007df0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007df4:	2b0d      	cmp	r3, #13
 8007df6:	d00b      	beq.n	8007e10 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8007e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	f341 821f 	ble.w	800924e <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8007e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8007e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007e52:	f001 b9fc 	b.w	800924e <AT_ESP8266_ND+0x31ae>
 8007e56:	bf00      	nop
 8007e58:	0800f668 	.word	0x0800f668
 8007e5c:	0800f674 	.word	0x0800f674
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007e60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8007e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d16b      	bne.n	8007f5a <AT_ESP8266_ND+0x1eba>
 8007e82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d067      	beq.n	8007f5a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 8007e8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d063      	beq.n	8007f5a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8007e92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d05f      	beq.n	8007f5a <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 8007e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8007eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d115      	bne.n	8007ef8 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8007ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7f8 f98a 	bl	80001f4 <strlen>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4423      	add	r3, r4
 8007ee4:	4a52      	ldr	r2, [pc, #328]	; (8008030 <AT_ESP8266_ND+0x1f90>)
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	4613      	mov	r3, r2
 8007eea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007eec:	6020      	str	r0, [r4, #0]
 8007eee:	6061      	str	r1, [r4, #4]
 8007ef0:	60a2      	str	r2, [r4, #8]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	e014      	b.n	8007f22 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8007ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7f8 f974 	bl	80001f4 <strlen>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	4423      	add	r3, r4
 8007f10:	4a48      	ldr	r2, [pc, #288]	; (8008034 <AT_ESP8266_ND+0x1f94>)
 8007f12:	461c      	mov	r4, r3
 8007f14:	4613      	mov	r3, r2
 8007f16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f18:	6020      	str	r0, [r4, #0]
 8007f1a:	6061      	str	r1, [r4, #4]
 8007f1c:	60a2      	str	r2, [r4, #8]
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7f8 f95f 	bl	80001f4 <strlen>
 8007f36:	4603      	mov	r3, r0
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8007f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8007f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d123      	bne.n	8007fd2 <AT_ESP8266_ND+0x1f32>
 8007f8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d02b      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
 8007f92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f96:	2b0b      	cmp	r3, #11
 8007f98:	d027      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 8007f9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	d023      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8007fa2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d01f      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 8007faa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d01b      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8007fb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	d017      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 8007fba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d013      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8007fc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fc6:	2b1e      	cmp	r3, #30
 8007fc8:	d00f      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 8007fca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fce:	2b1f      	cmp	r3, #31
 8007fd0:	d00b      	beq.n	8007fea <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8007fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	f341 8134 	ble.w	8009252 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800800c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008010:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800801c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800802c:	f001 b911 	b.w	8009252 <AT_ESP8266_ND+0x31b2>
 8008030:	0800f680 	.word	0x0800f680
 8008034:	0800f690 	.word	0x0800f690
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008056:	2b01      	cmp	r3, #1
 8008058:	f040 80f3 	bne.w	8008242 <AT_ESP8266_ND+0x21a2>
 800805c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008060:	2b04      	cmp	r3, #4
 8008062:	f000 80ee 	beq.w	8008242 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 8008066:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800806a:	2b01      	cmp	r3, #1
 800806c:	f000 80e9 	beq.w	8008242 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008070:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008074:	2b02      	cmp	r3, #2
 8008076:	f000 80e4 	beq.w	8008242 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 800807a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800807e:	2b21      	cmp	r3, #33	; 0x21
 8008080:	f000 80df 	beq.w	8008242 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008084:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008088:	2b1b      	cmp	r3, #27
 800808a:	f000 80da 	beq.w	8008242 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 800808e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800809e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80080ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80080bc:	4620      	mov	r0, r4
 80080be:	f7f8 f899 	bl	80001f4 <strlen>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4423      	add	r3, r4
 80080c6:	4990      	ldr	r1, [pc, #576]	; (8008308 <AT_ESP8266_ND+0x2268>)
 80080c8:	461a      	mov	r2, r3
 80080ca:	460b      	mov	r3, r1
 80080cc:	cb03      	ldmia	r3!, {r0, r1}
 80080ce:	6010      	str	r0, [r2, #0]
 80080d0:	6051      	str	r1, [r2, #4]
 80080d2:	8819      	ldrh	r1, [r3, #0]
 80080d4:	789b      	ldrb	r3, [r3, #2]
 80080d6:	8111      	strh	r1, [r2, #8]
 80080d8:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80080da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80080e8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80080ec:	2201      	movs	r2, #1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f006 f801 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80080f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008102:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008106:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008110:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008114:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	334c      	adds	r3, #76	; 0x4c
 800811c:	4618      	mov	r0, r3
 800811e:	f7f8 f869 	bl	80001f4 <strlen>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	4629      	mov	r1, r5
 8008128:	4620      	mov	r0, r4
 800812a:	f005 ffe4 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,separador,3);
 800812e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800813c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008140:	2203      	movs	r2, #3
 8008142:	4618      	mov	r0, r3
 8008144:	f005 ffd7 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3362      	adds	r3, #98	; 0x62
 8008170:	4618      	mov	r0, r3
 8008172:	f7f8 f83f 	bl	80001f4 <strlen>
 8008176:	4603      	mov	r3, r0
 8008178:	461a      	mov	r2, r3
 800817a:	4629      	mov	r1, r5
 800817c:	4620      	mov	r0, r4
 800817e:	f005 ffba 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008190:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008194:	2203      	movs	r2, #3
 8008196:	4618      	mov	r0, r3
 8008198:	f005 ffad 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 800819c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80081aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80081b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3372      	adds	r3, #114	; 0x72
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 f815 	bl	80001f4 <strlen>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	4629      	mov	r1, r5
 80081d0:	4620      	mov	r0, r4
 80081d2:	f005 ff90 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80081d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80081e4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80081e8:	2201      	movs	r2, #1
 80081ea:	4618      	mov	r0, r3
 80081ec:	f005 ff83 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80081f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80081fe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008202:	2202      	movs	r2, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f005 ff76 	bl	800e0f6 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 800820a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008218:	4618      	mov	r0, r3
 800821a:	f7f7 ffeb 	bl	80001f4 <strlen>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008226:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008230:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008234:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d11b      	bne.n	80082aa <AT_ESP8266_ND+0x220a>
 8008272:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008276:	2b01      	cmp	r3, #1
 8008278:	d023      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
 800827a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800827e:	2b0b      	cmp	r3, #11
 8008280:	d01f      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008282:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008286:	2b0c      	cmp	r3, #12
 8008288:	d01b      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 800828a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800828e:	2b04      	cmp	r3, #4
 8008290:	d017      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008292:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008296:	2b02      	cmp	r3, #2
 8008298:	d013      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 800829a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800829e:	2b21      	cmp	r3, #33	; 0x21
 80082a0:	d00f      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 80082a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a6:	2b1b      	cmp	r3, #27
 80082a8:	d00b      	beq.n	80082c2 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80082aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80082b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082bc:	4293      	cmp	r3, r2
 80082be:	f340 87ca 	ble.w	8009256 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80082c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80082d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80082e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80082f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008304:	f000 bfa7 	b.w	8009256 <AT_ESP8266_ND+0x31b6>
 8008308:	0800f580 	.word	0x0800f580
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800830c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 800831c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800832a:	2b01      	cmp	r3, #1
 800832c:	f040 80e2 	bne.w	80084f4 <AT_ESP8266_ND+0x2454>
 8008330:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008334:	2b0b      	cmp	r3, #11
 8008336:	f000 80dd 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 800833a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800833e:	2b0c      	cmp	r3, #12
 8008340:	f000 80d8 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008344:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008348:	2b0e      	cmp	r3, #14
 800834a:	f000 80d3 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 800834e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008352:	2b0f      	cmp	r3, #15
 8008354:	f000 80ce 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008358:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800835c:	2b10      	cmp	r3, #16
 800835e:	f000 80c9 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008362:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008366:	2b02      	cmp	r3, #2
 8008368:	f000 80c4 	beq.w	80084f4 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800837c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2201      	movs	r2, #1
 8008388:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 800838c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008390:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800839a:	4620      	mov	r0, r4
 800839c:	f7f7 ff2a 	bl	80001f4 <strlen>
 80083a0:	4603      	mov	r3, r0
 80083a2:	4423      	add	r3, r4
 80083a4:	4aa1      	ldr	r2, [pc, #644]	; (800862c <AT_ESP8266_ND+0x258c>)
 80083a6:	461c      	mov	r4, r3
 80083a8:	4613      	mov	r3, r2
 80083aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083ac:	6020      	str	r0, [r4, #0]
 80083ae:	6061      	str	r1, [r4, #4]
 80083b0:	60a2      	str	r2, [r4, #8]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 80083b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083c4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80083c8:	2201      	movs	r2, #1
 80083ca:	4618      	mov	r0, r3
 80083cc:	f005 fe93 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 80083d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083de:	4620      	mov	r0, r4
 80083e0:	f7f7 ff08 	bl	80001f4 <strlen>
 80083e4:	4603      	mov	r3, r0
 80083e6:	4423      	add	r3, r4
 80083e8:	4a91      	ldr	r2, [pc, #580]	; (8008630 <AT_ESP8266_ND+0x2590>)
 80083ea:	6810      	ldr	r0, [r2, #0]
 80083ec:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 80083ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083fc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008400:	2203      	movs	r2, #3
 8008402:	4618      	mov	r0, r3
 8008404:	f005 fe77 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3336      	adds	r3, #54	; 0x36
 8008430:	4618      	mov	r0, r3
 8008432:	f7f7 fedf 	bl	80001f4 <strlen>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	4629      	mov	r1, r5
 800843c:	4620      	mov	r0, r4
 800843e:	f005 fe5a 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008450:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008454:	2202      	movs	r2, #2
 8008456:	4618      	mov	r0, r3
 8008458:	f005 fe4d 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 800845c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800846a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800846e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3346      	adds	r3, #70	; 0x46
 8008484:	4618      	mov	r0, r3
 8008486:	f7f7 feb5 	bl	80001f4 <strlen>
 800848a:	4603      	mov	r3, r0
 800848c:	461a      	mov	r2, r3
 800848e:	4629      	mov	r1, r5
 8008490:	4620      	mov	r0, r4
 8008492:	f005 fe30 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084a4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7f7 fea3 	bl	80001f4 <strlen>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80084b4:	4619      	mov	r1, r3
 80084b6:	4620      	mov	r0, r4
 80084b8:	f005 fe1d 	bl	800e0f6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7f7 fe92 	bl	80001f4 <strlen>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 80084e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f44f 7216 	mov.w	r2, #600	; 0x258
 80084f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 80084f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d120      	bne.n	8008566 <AT_ESP8266_ND+0x24c6>
 8008524:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008528:	2b0a      	cmp	r3, #10
 800852a:	d028      	beq.n	800857e <AT_ESP8266_ND+0x24de>
 800852c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008530:	2b0b      	cmp	r3, #11
 8008532:	d024      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008534:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008538:	2b0c      	cmp	r3, #12
 800853a:	d020      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 800853c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008540:	2b0e      	cmp	r3, #14
 8008542:	d01c      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008544:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008548:	2b0f      	cmp	r3, #15
 800854a:	d018      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 800854c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008550:	2b10      	cmp	r3, #16
 8008552:	d014      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008554:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008558:	2b02      	cmp	r3, #2
 800855a:	d010      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 800855c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008564:	d00b      	beq.n	800857e <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008574:	f241 3288 	movw	r2, #5000	; 0x1388
 8008578:	4293      	cmp	r3, r2
 800857a:	f340 866e 	ble.w	800925a <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800857e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008582:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800858c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80085a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80085b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80085c0:	f000 be4b 	b.w	800925a <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80085c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	2200      	movs	r2, #0
 80085d2:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80085d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d003      	beq.n	80085e4 <AT_ESP8266_ND+0x2544>
 80085dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085e0:	2b0a      	cmp	r3, #10
 80085e2:	d127      	bne.n	8008634 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 80085e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80085f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800861a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008626:	f000 be1a 	b.w	800925e <AT_ESP8266_ND+0x31be>
 800862a:	bf00      	nop
 800862c:	0800f6a0 	.word	0x0800f6a0
 8008630:	0800f6b0 	.word	0x0800f6b0
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008642:	2b01      	cmp	r3, #1
 8008644:	f040 80d1 	bne.w	80087ea <AT_ESP8266_ND+0x274a>
 8008648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800864c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 80c7 	bne.w	80087ea <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 800865c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2201      	movs	r2, #1
 8008668:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800866c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2218      	movs	r2, #24
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800867c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800868c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80086aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80086ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086d8:	4620      	mov	r0, r4
 80086da:	f7f7 fd8b 	bl	80001f4 <strlen>
 80086de:	4603      	mov	r3, r0
 80086e0:	4423      	add	r3, r4
 80086e2:	4abe      	ldr	r2, [pc, #760]	; (80089dc <AT_ESP8266_ND+0x293c>)
 80086e4:	461c      	mov	r4, r3
 80086e6:	4613      	mov	r3, r2
 80086e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086ea:	6020      	str	r0, [r4, #0]
 80086ec:	6061      	str	r1, [r4, #4]
 80086ee:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80086f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80086fe:	f107 0214 	add.w	r2, r7, #20
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f005 fa6f 	bl	800dbe8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800870a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008718:	f107 0314 	add.w	r3, r7, #20
 800871c:	4618      	mov	r0, r3
 800871e:	f7f7 fd69 	bl	80001f4 <strlen>
 8008722:	4602      	mov	r2, r0
 8008724:	f107 0314 	add.w	r3, r7, #20
 8008728:	4619      	mov	r1, r3
 800872a:	4620      	mov	r0, r4
 800872c:	f005 fce3 	bl	800e0f6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800873e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f005 fdb2 	bl	800e2b8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008762:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008766:	2202      	movs	r2, #2
 8008768:	4618      	mov	r0, r3
 800876a:	f005 fcc4 	bl	800e0f6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800876e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fd39 	bl	80001f4 <strlen>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7f7 fd26 	bl	80001f4 <strlen>
 80087a8:	4603      	mov	r3, r0
 80087aa:	4423      	add	r3, r4
 80087ac:	4a8c      	ldr	r2, [pc, #560]	; (80089e0 <AT_ESP8266_ND+0x2940>)
 80087ae:	461c      	mov	r4, r3
 80087b0:	4613      	mov	r3, r2
 80087b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087b4:	6020      	str	r0, [r4, #0]
 80087b6:	6061      	str	r1, [r4, #4]
 80087b8:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80087ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 80087d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80087ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 80a6 	bne.w	8008968 <AT_ESP8266_ND+0x28c8>
 800881c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008820:	2b13      	cmp	r3, #19
 8008822:	f000 80a1 	beq.w	8008968 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f7f7 fccb 	bl	80001e0 <strcmp>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <AT_ESP8266_ND+0x27e8>
 8008850:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008854:	2b01      	cmp	r3, #1
 8008856:	d017      	beq.n	8008888 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008858:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885c:	2b14      	cmp	r3, #20
 800885e:	d013      	beq.n	8008888 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800886e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008872:	4293      	cmp	r3, r2
 8008874:	dd78      	ble.n	8008968 <AT_ESP8266_ND+0x28c8>
 8008876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008884:	2b01      	cmp	r3, #1
 8008886:	d16f      	bne.n	8008968 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	4293      	cmp	r3, r2
 800889c:	dd0e      	ble.n	80088bc <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80088bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80088da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80088f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2201      	movs	r2, #1
 8008904:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8008916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800891a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8008924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8008932:	2361      	movs	r3, #97	; 0x61
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2301      	movs	r3, #1
 8008938:	f005 f98a 	bl	800dc50 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800893c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008940:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800894a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8008968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008976:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800897a:	f040 8470 	bne.w	800925e <AT_ESP8266_ND+0x31be>
 800897e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008982:	2b13      	cmp	r3, #19
 8008984:	d02e      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
 8008986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008994:	f241 3288 	movw	r2, #5000	; 0x1388
 8008998:	4293      	cmp	r3, r2
 800899a:	dc23      	bgt.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 800899c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a0:	2b0a      	cmp	r3, #10
 80089a2:	d01f      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 80089a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a8:	2b0b      	cmp	r3, #11
 80089aa:	d01b      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 80089ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b0:	2b0c      	cmp	r3, #12
 80089b2:	d017      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 80089b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b8:	2b10      	cmp	r3, #16
 80089ba:	d013      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 80089bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c0:	2b11      	cmp	r3, #17
 80089c2:	d00f      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 80089c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c8:	2b12      	cmp	r3, #18
 80089ca:	d00b      	beq.n	80089e4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 80089cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d4:	f040 8443 	bne.w	800925e <AT_ESP8266_ND+0x31be>
 80089d8:	e004      	b.n	80089e4 <AT_ESP8266_ND+0x2944>
 80089da:	bf00      	nop
 80089dc:	0800f6b4 	.word	0x0800f6b4
 80089e0:	0800f6c0 	.word	0x0800f6c0
									a->_debug_count5++;
 80089e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8008a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	dd25      	ble.n	8008a64 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 8008a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8008a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8008a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	dd10      	ble.n	8008a98 <AT_ESP8266_ND+0x29f8>
 8008a76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7a:	2b10      	cmp	r3, #16
 8008a7c:	d00c      	beq.n	8008a98 <AT_ESP8266_ND+0x29f8>
 8008a7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a82:	2b0a      	cmp	r3, #10
 8008a84:	d008      	beq.n	8008a98 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8008a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	220f      	movs	r2, #15
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008a96:	e008      	b.n	8008aaa <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8008aba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8008aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8008ada:	e3c0      	b.n	800925e <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8008aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d16f      	bne.n	8008bde <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 8008afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8008b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7f7 fb61 	bl	80001f4 <strlen>
 8008b32:	4603      	mov	r3, r0
 8008b34:	4423      	add	r3, r4
 8008b36:	4a78      	ldr	r2, [pc, #480]	; (8008d18 <AT_ESP8266_ND+0x2c78>)
 8008b38:	461c      	mov	r4, r3
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b3e:	6020      	str	r0, [r4, #0]
 8008b40:	6061      	str	r1, [r4, #4]
 8008b42:	60a2      	str	r2, [r4, #8]
 8008b44:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8008b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8008b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	335c      	adds	r3, #92	; 0x5c
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f7 fb40 	bl	80001f4 <strlen>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f005 fabb 	bl	800e0f6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b8e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f7 fb2e 	bl	80001f4 <strlen>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f005 faa8 	bl	800e0f6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f7 fb1d 	bl	80001f4 <strlen>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8008bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8008bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d123      	bne.n	8008c56 <AT_ESP8266_ND+0x2bb6>
 8008c0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c12:	2b0a      	cmp	r3, #10
 8008c14:	d02b      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c1a:	2b0b      	cmp	r3, #11
 8008c1c:	d027      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c22:	2b0c      	cmp	r3, #12
 8008c24:	d023      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c2a:	2b0e      	cmp	r3, #14
 8008c2c:	d01f      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d01b      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d017      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c42:	2b15      	cmp	r3, #21
 8008c44:	d013      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c4a:	2b16      	cmp	r3, #22
 8008c4c:	d00f      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c52:	2b17      	cmp	r3, #23
 8008c54:	d00b      	beq.n	8008c6e <AT_ESP8266_ND+0x2bce>
 8008c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	f340 82fa 	ble.w	8009262 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8008cb0:	e2d7      	b.n	8009262 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8008cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008cc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d003      	beq.n	8008cd2 <AT_ESP8266_ND+0x2c32>
 8008cca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cce:	2b0a      	cmp	r3, #10
 8008cd0:	d124      	bne.n	8008d1c <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8008cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d14:	e2a7      	b.n	8009266 <AT_ESP8266_ND+0x31c6>
 8008d16:	bf00      	nop
 8008d18:	0800f6cc 	.word	0x0800f6cc
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f040 8102 	bne.w	8008f34 <AT_ESP8266_ND+0x2e94>
 8008d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 80f8 	bne.w	8008f34 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8008d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2218      	movs	r2, #24
 8008d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7f7 fa17 	bl	80001f4 <strlen>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4423      	add	r3, r4
 8008dca:	4a83      	ldr	r2, [pc, #524]	; (8008fd8 <AT_ESP8266_ND+0x2f38>)
 8008dcc:	461c      	mov	r4, r3
 8008dce:	4613      	mov	r3, r2
 8008dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	6061      	str	r1, [r4, #4]
 8008dd6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8008dd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ddc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8008de6:	f107 020c 	add.w	r2, r7, #12
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f004 fefb 	bl	800dbe8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8008df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f7 f9f5 	bl	80001f4 <strlen>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	f107 030c 	add.w	r3, r7, #12
 8008e10:	4619      	mov	r1, r3
 8008e12:	4620      	mov	r0, r4
 8008e14:	f005 f96f 	bl	800e0f6 <strncat>
										strncat(a->_uart2snd,",",1);
 8008e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7f7 f9e4 	bl	80001f4 <strlen>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	4423      	add	r3, r4
 8008e30:	496a      	ldr	r1, [pc, #424]	; (8008fdc <AT_ESP8266_ND+0x2f3c>)
 8008e32:	461a      	mov	r2, r3
 8008e34:	460b      	mov	r3, r1
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008e48:	f107 020c 	add.w	r2, r7, #12
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f004 feca 	bl	800dbe8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f7 f9c4 	bl	80001f4 <strlen>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	4619      	mov	r1, r3
 8008e74:	4620      	mov	r0, r4
 8008e76:	f005 f93e 	bl	800e0f6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f005 fa0d 	bl	800e2b8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008eac:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f005 f91f 	bl	800e0f6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7f7 f994 	bl	80001f4 <strlen>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008ede:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7f7 f981 	bl	80001f4 <strlen>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	4423      	add	r3, r4
 8008ef6:	4a3a      	ldr	r2, [pc, #232]	; (8008fe0 <AT_ESP8266_ND+0x2f40>)
 8008ef8:	461c      	mov	r4, r3
 8008efa:	4613      	mov	r3, r2
 8008efc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008efe:	6020      	str	r0, [r4, #0]
 8008f00:	6061      	str	r1, [r4, #4]
 8008f02:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8008f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f040 80b8 	bne.w	80090d6 <AT_ESP8266_ND+0x3036>
 8008f66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f6a:	2b13      	cmp	r3, #19
 8008f6c:	f000 80b3 	beq.w	80090d6 <AT_ESP8266_ND+0x3036>
 8008f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f7f7 f926 	bl	80001e0 <strcmp>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d024      	beq.n	8008fe4 <AT_ESP8266_ND+0x2f44>
 8008f9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d020      	beq.n	8008fe4 <AT_ESP8266_ND+0x2f44>
 8008fa2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fa6:	2b14      	cmp	r3, #20
 8008fa8:	d01c      	beq.n	8008fe4 <AT_ESP8266_ND+0x2f44>
 8008faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	f340 808a 	ble.w	80090d6 <AT_ESP8266_ND+0x3036>
 8008fc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	f040 8080 	bne.w	80090d6 <AT_ESP8266_ND+0x3036>
 8008fd6:	e005      	b.n	8008fe4 <AT_ESP8266_ND+0x2f44>
 8008fd8:	0800f6b4 	.word	0x0800f6b4
 8008fdc:	0800f6dc 	.word	0x0800f6dc
 8008fe0:	0800f6c0 	.word	0x0800f6c0
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	dd17      	ble.n	800902a <AT_ESP8266_ND+0x2f8a>
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009008:	2b01      	cmp	r3, #1
 800900a:	d10e      	bne.n	800902a <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800900c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009010:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800902a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2201      	movs	r2, #1
 8009072:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80090a0:	2361      	movs	r3, #97	; 0x61
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2301      	movs	r3, #1
 80090a6:	f004 fdd3 	bl	800dc50 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80090aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80090b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80090c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 80090d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80090e8:	f040 80bd 	bne.w	8009266 <AT_ESP8266_ND+0x31c6>
 80090ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f0:	2b13      	cmp	r3, #19
 80090f2:	d02b      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 80090f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f8:	2b0b      	cmp	r3, #11
 80090fa:	d027      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 80090fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009100:	2b0c      	cmp	r3, #12
 8009102:	d023      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 8009104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	dc18      	bgt.n	800914c <AT_ESP8266_ND+0x30ac>
 800911a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800911e:	2b0a      	cmp	r3, #10
 8009120:	d014      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 8009122:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009126:	2b10      	cmp	r3, #16
 8009128:	d010      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 800912a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800912e:	2b11      	cmp	r3, #17
 8009130:	d00c      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 8009132:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009136:	2b12      	cmp	r3, #18
 8009138:	d008      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 800913a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800913e:	2b16      	cmp	r3, #22
 8009140:	d004      	beq.n	800914c <AT_ESP8266_ND+0x30ac>
 8009142:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009146:	2b19      	cmp	r3, #25
 8009148:	f040 808d 	bne.w	8009266 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 800914c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009150:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800916a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009178:	f241 3288 	movw	r2, #5000	; 0x1388
 800917c:	4293      	cmp	r3, r2
 800917e:	dd25      	ble.n	80091cc <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009180:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009184:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009194:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800919e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80091bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80091cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dd07      	ble.n	80091ee <AT_ESP8266_ND+0x314e>
 80091de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d003      	beq.n	80091ee <AT_ESP8266_ND+0x314e>
 80091e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ea:	2b0a      	cmp	r3, #10
 80091ec:	d108      	bne.n	8009200 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 80091ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009230:	e019      	b.n	8009266 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009244:	e010      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 8009246:	bf00      	nop
 8009248:	e00e      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 800924a:	bf00      	nop
 800924c:	e00c      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 800924e:	bf00      	nop
 8009250:	e00a      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 8009252:	bf00      	nop
 8009254:	e008      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 8009256:	bf00      	nop
 8009258:	e006      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 800925a:	bf00      	nop
 800925c:	e004      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 800925e:	bf00      	nop
 8009260:	e002      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 8009262:	bf00      	nop
 8009264:	e000      	b.n	8009268 <AT_ESP8266_ND+0x31c8>
			break;
 8009266:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800928c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009296:	4618      	mov	r0, r3
 8009298:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800929c:	46bd      	mov	sp, r7
 800929e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092a0 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b2:	f240 328d 	movw	r2, #909	; 0x38d
 80092b6:	4293      	cmp	r3, r2
 80092b8:	f001 83c3 	beq.w	800aa42 <WiFi_Conn_ND+0x17a2>
 80092bc:	f240 328d 	movw	r2, #909	; 0x38d
 80092c0:	4293      	cmp	r3, r2
 80092c2:	f301 8453 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80092c6:	f240 3289 	movw	r2, #905	; 0x389
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f001 8335 	beq.w	800a93a <WiFi_Conn_ND+0x169a>
 80092d0:	f240 3289 	movw	r2, #905	; 0x389
 80092d4:	4293      	cmp	r3, r2
 80092d6:	f301 8449 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80092da:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80092de:	f001 8224 	beq.w	800a72a <WiFi_Conn_ND+0x148a>
 80092e2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80092e6:	f301 8441 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80092ea:	f240 3229 	movw	r2, #809	; 0x329
 80092ee:	4293      	cmp	r3, r2
 80092f0:	f301 843c 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80092f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80092f8:	f280 80a5 	bge.w	8009446 <WiFi_Conn_ND+0x1a6>
 80092fc:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009300:	4293      	cmp	r3, r2
 8009302:	f000 8776 	beq.w	800a1f2 <WiFi_Conn_ND+0xf52>
 8009306:	f240 22c5 	movw	r2, #709	; 0x2c5
 800930a:	4293      	cmp	r3, r2
 800930c:	f301 842e 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009310:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009314:	4293      	cmp	r3, r2
 8009316:	f000 86fc 	beq.w	800a112 <WiFi_Conn_ND+0xe72>
 800931a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800931e:	4293      	cmp	r3, r2
 8009320:	f301 8424 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009324:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009328:	f000 862b 	beq.w	8009f82 <WiFi_Conn_ND+0xce2>
 800932c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009330:	f301 841c 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009334:	f240 2261 	movw	r2, #609	; 0x261
 8009338:	4293      	cmp	r3, r2
 800933a:	f000 85b1 	beq.w	8009ea0 <WiFi_Conn_ND+0xc00>
 800933e:	f240 2261 	movw	r2, #609	; 0x261
 8009342:	4293      	cmp	r3, r2
 8009344:	f301 8412 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009348:	f240 225d 	movw	r2, #605	; 0x25d
 800934c:	4293      	cmp	r3, r2
 800934e:	f000 8551 	beq.w	8009df4 <WiFi_Conn_ND+0xb54>
 8009352:	f240 225d 	movw	r2, #605	; 0x25d
 8009356:	4293      	cmp	r3, r2
 8009358:	f301 8408 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 800935c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009360:	f000 84cf 	beq.w	8009d02 <WiFi_Conn_ND+0xa62>
 8009364:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009368:	f301 8400 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 800936c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009370:	4293      	cmp	r3, r2
 8009372:	f000 846a 	beq.w	8009c4a <WiFi_Conn_ND+0x9aa>
 8009376:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800937a:	f281 83f7 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 800937e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009382:	4293      	cmp	r3, r2
 8009384:	f000 8425 	beq.w	8009bd2 <WiFi_Conn_ND+0x932>
 8009388:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800938c:	f281 83ee 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009390:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009394:	f000 83b0 	beq.w	8009af8 <WiFi_Conn_ND+0x858>
 8009398:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800939c:	f301 83e6 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093a0:	f240 1299 	movw	r2, #409	; 0x199
 80093a4:	4293      	cmp	r3, r2
 80093a6:	f000 8369 	beq.w	8009a7c <WiFi_Conn_ND+0x7dc>
 80093aa:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80093ae:	f281 83dd 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093b2:	f240 1295 	movw	r2, #405	; 0x195
 80093b6:	4293      	cmp	r3, r2
 80093b8:	f000 8329 	beq.w	8009a0e <WiFi_Conn_ND+0x76e>
 80093bc:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 80093c0:	f281 83d4 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80093c8:	f000 82a0 	beq.w	800990c <WiFi_Conn_ND+0x66c>
 80093cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80093d0:	f301 83cc 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093d4:	f240 1235 	movw	r2, #309	; 0x135
 80093d8:	4293      	cmp	r3, r2
 80093da:	f000 8271 	beq.w	80098c0 <WiFi_Conn_ND+0x620>
 80093de:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80093e2:	f281 83c3 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093e6:	f240 1231 	movw	r2, #305	; 0x131
 80093ea:	4293      	cmp	r3, r2
 80093ec:	f000 8263 	beq.w	80098b6 <WiFi_Conn_ND+0x616>
 80093f0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80093f4:	f281 83ba 	bge.w	800ab6c <WiFi_Conn_ND+0x18cc>
 80093f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80093fc:	f000 8207 	beq.w	800980e <WiFi_Conn_ND+0x56e>
 8009400:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009404:	f301 83b2 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009408:	2bd1      	cmp	r3, #209	; 0xd1
 800940a:	f000 81a0 	beq.w	800974e <WiFi_Conn_ND+0x4ae>
 800940e:	2bd1      	cmp	r3, #209	; 0xd1
 8009410:	f301 83ac 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009414:	2bcd      	cmp	r3, #205	; 0xcd
 8009416:	f000 8170 	beq.w	80096fa <WiFi_Conn_ND+0x45a>
 800941a:	2bcd      	cmp	r3, #205	; 0xcd
 800941c:	f301 83a6 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009420:	2bc8      	cmp	r3, #200	; 0xc8
 8009422:	f000 80f1 	beq.w	8009608 <WiFi_Conn_ND+0x368>
 8009426:	2bc8      	cmp	r3, #200	; 0xc8
 8009428:	f301 83a0 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 800942c:	2b6d      	cmp	r3, #109	; 0x6d
 800942e:	f000 80b3 	beq.w	8009598 <WiFi_Conn_ND+0x2f8>
 8009432:	2b6d      	cmp	r3, #109	; 0x6d
 8009434:	f301 839a 	bgt.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009438:	2b64      	cmp	r3, #100	; 0x64
 800943a:	d021      	beq.n	8009480 <WiFi_Conn_ND+0x1e0>
 800943c:	2b69      	cmp	r3, #105	; 0x69
 800943e:	f000 8096 	beq.w	800956e <WiFi_Conn_ND+0x2ce>
 8009442:	f001 bb93 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009446:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800944a:	2b09      	cmp	r3, #9
 800944c:	f201 838e 	bhi.w	800ab6c <WiFi_Conn_ND+0x18cc>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <WiFi_Conn_ND+0x1b8>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	0800a2ff 	.word	0x0800a2ff
 800945c:	0800ab6d 	.word	0x0800ab6d
 8009460:	0800ab6d 	.word	0x0800ab6d
 8009464:	0800ab6d 	.word	0x0800ab6d
 8009468:	0800ab6d 	.word	0x0800ab6d
 800946c:	0800a3cd 	.word	0x0800a3cd
 8009470:	0800a46d 	.word	0x0800a46d
 8009474:	0800a50d 	.word	0x0800a50d
 8009478:	0800a5ad 	.word	0x0800a5ad
 800947c:	0800a64d 	.word	0x0800a64d
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009486:	2b64      	cmp	r3, #100	; 0x64
 8009488:	d046      	beq.n	8009518 <WiFi_Conn_ND+0x278>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009490:	2b01      	cmp	r3, #1
 8009492:	d041      	beq.n	8009518 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949a:	2b1c      	cmp	r3, #28
 800949c:	d03c      	beq.n	8009518 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d037      	beq.n	8009518 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d032      	beq.n	8009518 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b8:	2b13      	cmp	r3, #19
 80094ba:	d02d      	beq.n	8009518 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7fc fd29 	bl	8005f14 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d14e      	bne.n	800956a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7fc fde7 	bl	80060a0 <AT_ESP8266_ND>
 80094d2:	4602      	mov	r2, r0
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d109      	bne.n	8009500 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f203 4294 	addw	r2, r3, #1172	; 0x494
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7f7 fdf6 	bl	80010ec <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800950c:	b29a      	uxth	r2, r3
 800950e:	2364      	movs	r3, #100	; 0x64
 8009510:	68b8      	ldr	r0, [r7, #8]
 8009512:	f7fb fc83 	bl	8004e1c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009516:	e028      	b.n	800956a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951e:	2b01      	cmp	r3, #1
 8009520:	d004      	beq.n	800952c <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009528:	2b1c      	cmp	r3, #28
 800952a:	d103      	bne.n	8009534 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	226d      	movs	r2, #109	; 0x6d
 8009530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953a:	2b02      	cmp	r3, #2
 800953c:	d00f      	beq.n	800955e <WiFi_Conn_ND+0x2be>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009544:	2b04      	cmp	r3, #4
 8009546:	d00a      	beq.n	800955e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954e:	2b0b      	cmp	r3, #11
 8009550:	d005      	beq.n	800955e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009558:	2b0c      	cmp	r3, #12
 800955a:	f041 82d8 	bne.w	800ab0e <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2269      	movs	r2, #105	; 0x69
 8009562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009566:	f001 bad2 	b.w	800ab0e <WiFi_Conn_ND+0x186e>
 800956a:	f001 bad0 	b.w	800ab0e <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7fc fcd0 	bl	8005f14 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2264      	movs	r2, #100	; 0x64
 8009578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009594:	f001 baea 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00c      	beq.n	80095bc <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7fc fce2 	bl	8005f6c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80095ba:	e00e      	b.n	80095da <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7fc fcbf 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	22c8      	movs	r2, #200	; 0xc8
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	f041 8296 	bne.w	800ab12 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7fc fc94 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2264      	movs	r2, #100	; 0x64
 80095f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009604:	f001 ba85 	b.w	800ab12 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960e:	2bc8      	cmp	r3, #200	; 0xc8
 8009610:	d04f      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009618:	2b01      	cmp	r3, #1
 800961a:	d04a      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009622:	2b02      	cmp	r3, #2
 8009624:	d045      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	2b03      	cmp	r3, #3
 800962e:	d040      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009636:	2b04      	cmp	r3, #4
 8009638:	d03b      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009640:	2b0a      	cmp	r3, #10
 8009642:	d036      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964a:	2b0b      	cmp	r3, #11
 800964c:	d031      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009654:	2b0c      	cmp	r3, #12
 8009656:	d02c      	beq.n	80096b2 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7fc fc71 	bl	8005f40 <ConectarWIFI>
						if(b->_enviaruart==1)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009664:	2b01      	cmp	r3, #1
 8009666:	d124      	bne.n	80096b2 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7fc fd19 	bl	80060a0 <AT_ESP8266_ND>
 800966e:	4602      	mov	r2, r0
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009684:	2b01      	cmp	r3, #1
 8009686:	d109      	bne.n	800969c <WiFi_Conn_ND+0x3fc>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7f7 fd28 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	2364      	movs	r3, #100	; 0x64
 80096ac:	68b8      	ldr	r0, [r7, #8]
 80096ae:	f7fb fbb5 	bl	8004e1c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d004      	beq.n	80096c6 <WiFi_Conn_ND+0x426>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c2:	2b0c      	cmp	r3, #12
 80096c4:	d103      	bne.n	80096ce <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	22d1      	movs	r2, #209	; 0xd1
 80096ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d00a      	beq.n	80096ee <WiFi_Conn_ND+0x44e>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d005      	beq.n	80096ee <WiFi_Conn_ND+0x44e>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	f041 8214 	bne.w	800ab16 <WiFi_Conn_ND+0x1876>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	22cd      	movs	r2, #205	; 0xcd
 80096f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 80096f6:	f001 ba0e 	b.w	800ab16 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 80096fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80096fe:	f7f8 fed9 	bl	80024b4 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7fc fc1c 	bl	8005f40 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	22c8      	movs	r2, #200	; 0xc8
 800970c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009726:	2b04      	cmp	r3, #4
 8009728:	f041 81f7 	bne.w	800ab1a <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7fc fbf1 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2264      	movs	r2, #100	; 0x64
 8009736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800974a:	f001 b9e6 	b.w	800ab1a <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800975c:	2b01      	cmp	r3, #1
 800975e:	d108      	bne.n	8009772 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f240 3229 	movw	r2, #809	; 0x329
 8009766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	2b0a      	cmp	r3, #10
 800977a:	d004      	beq.n	8009786 <WiFi_Conn_ND+0x4e6>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	2b0d      	cmp	r3, #13
 8009784:	d10a      	bne.n	800979c <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7fc fbda 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	22c8      	movs	r2, #200	; 0xc8
 8009790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d10e      	bne.n	80097c4 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7fc fbb4 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2264      	movs	r2, #100	; 0x64
 80097b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7fc fc24 	bl	800601c <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 80097ee:	f001 b9bd 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7fc fbba 	bl	8005f6c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800980a:	f001 b9af 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009814:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009818:	d03b      	beq.n	8009892 <WiFi_Conn_ND+0x5f2>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	2b04      	cmp	r3, #4
 8009822:	d036      	beq.n	8009892 <WiFi_Conn_ND+0x5f2>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982a:	2b0a      	cmp	r3, #10
 800982c:	d031      	beq.n	8009892 <WiFi_Conn_ND+0x5f2>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	2b0d      	cmp	r3, #13
 8009836:	d02c      	beq.n	8009892 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7fc fbc3 	bl	8005fc4 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009844:	2b01      	cmp	r3, #1
 8009846:	d124      	bne.n	8009892 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7fc fc29 	bl	80060a0 <AT_ESP8266_ND>
 800984e:	4602      	mov	r2, r0
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009864:	2b01      	cmp	r3, #1
 8009866:	d109      	bne.n	800987c <WiFi_Conn_ND+0x5dc>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7f7 fc38 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009888:	b29a      	uxth	r2, r3
 800988a:	2364      	movs	r3, #100	; 0x64
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7fb fac5 	bl	8004e1c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009898:	2b0a      	cmp	r3, #10
 800989a:	d005      	beq.n	80098a8 <WiFi_Conn_ND+0x608>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a2:	2b0d      	cmp	r3, #13
 80098a4:	f041 813b 	bne.w	800ab1e <WiFi_Conn_ND+0x187e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f240 1235 	movw	r2, #309	; 0x135
 80098ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 80098b2:	f001 b934 	b.w	800ab1e <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7fc fb16 	bl	8005ee8 <NOP>
			}
			break;
 80098bc:	f001 b956 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7fc fb39 	bl	8005f40 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	22c8      	movs	r2, #200	; 0xc8
 80098d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	f041 811c 	bne.w	800ab22 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7fc fb12 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2264      	movs	r2, #100	; 0x64
 80098f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009908:	f001 b90b 	b.w	800ab22 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009912:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009916:	d04f      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	2b04      	cmp	r3, #4
 8009920:	d04a      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009928:	2b01      	cmp	r3, #1
 800992a:	d045      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009932:	2b02      	cmp	r3, #2
 8009934:	d040      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993c:	2b07      	cmp	r3, #7
 800993e:	d03b      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	2b08      	cmp	r3, #8
 8009948:	d036      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009950:	2b1e      	cmp	r3, #30
 8009952:	d031      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995a:	2b1f      	cmp	r3, #31
 800995c:	d02c      	beq.n	80099b8 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7fc fb04 	bl	8005f6c <MUX>
						if(b->_enviaruart==1)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800996a:	2b01      	cmp	r3, #1
 800996c:	d124      	bne.n	80099b8 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7fc fb96 	bl	80060a0 <AT_ESP8266_ND>
 8009974:	4602      	mov	r2, r0
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800998a:	2b01      	cmp	r3, #1
 800998c:	d109      	bne.n	80099a2 <WiFi_Conn_ND+0x702>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f7f7 fba5 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	2364      	movs	r3, #100	; 0x64
 80099b2:	68b8      	ldr	r0, [r7, #8]
 80099b4:	f7fb fa32 	bl	8004e1c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d009      	beq.n	80099d6 <WiFi_Conn_ND+0x736>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c8:	2b07      	cmp	r3, #7
 80099ca:	d004      	beq.n	80099d6 <WiFi_Conn_ND+0x736>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d104      	bne.n	80099e0 <WiFi_Conn_ND+0x740>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f240 1299 	movw	r2, #409	; 0x199
 80099dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d00a      	beq.n	8009a00 <WiFi_Conn_ND+0x760>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f0:	2b1e      	cmp	r3, #30
 80099f2:	d005      	beq.n	8009a00 <WiFi_Conn_ND+0x760>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fa:	2b1f      	cmp	r3, #31
 80099fc:	f041 8093 	bne.w	800ab26 <WiFi_Conn_ND+0x1886>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f240 1295 	movw	r2, #405	; 0x195
 8009a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009a0a:	f001 b88c 	b.w	800ab26 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7fc fa6a 	bl	8005ee8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d112      	bne.n	8009a44 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7fc fa78 	bl	8005f14 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2264      	movs	r2, #100	; 0x64
 8009a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	2b0a      	cmp	r3, #10
 8009a4c:	d005      	beq.n	8009a5a <WiFi_Conn_ND+0x7ba>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	2b0d      	cmp	r3, #13
 8009a56:	f041 8068 	bne.w	800ab2a <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7fc fa70 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	22c8      	movs	r2, #200	; 0xc8
 8009a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 8009a78:	f001 b857 	b.w	800ab2a <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7fc fa33 	bl	8005ee8 <NOP>
				b->_n_orig=0; //Borro el vector RX
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d10e      	bne.n	8009ab2 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7fc fa3d 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2264      	movs	r2, #100	; 0x64
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab8:	2b0a      	cmp	r3, #10
 8009aba:	d004      	beq.n	8009ac6 <WiFi_Conn_ND+0x826>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac2:	2b0d      	cmp	r3, #13
 8009ac4:	d10a      	bne.n	8009adc <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7fc fa3a 	bl	8005f40 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	22c8      	movs	r2, #200	; 0xc8
 8009ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7fc fa5b 	bl	8005f98 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009af4:	f001 b83a 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b02:	d045      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d040      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d03b      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d036      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b28:	2b1b      	cmp	r3, #27
 8009b2a:	d031      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b32:	2b21      	cmp	r3, #33	; 0x21
 8009b34:	d02c      	beq.n	8009b90 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7fc fa2e 	bl	8005f98 <IPDef>
						if(b->_enviaruart==1)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d124      	bne.n	8009b90 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7fc faaa 	bl	80060a0 <AT_ESP8266_ND>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d109      	bne.n	8009b7a <WiFi_Conn_ND+0x8da>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f7f7 fab9 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	2364      	movs	r3, #100	; 0x64
 8009b8a:	68b8      	ldr	r0, [r7, #8]
 8009b8c:	f7fb f946 	bl	8004e1c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d004      	beq.n	8009ba4 <WiFi_Conn_ND+0x904>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba0:	2b1b      	cmp	r3, #27
 8009ba2:	d104      	bne.n	8009bae <WiFi_Conn_ND+0x90e>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d005      	beq.n	8009bc4 <WiFi_Conn_ND+0x924>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbe:	2b21      	cmp	r3, #33	; 0x21
 8009bc0:	f040 87b5 	bne.w	800ab2e <WiFi_Conn_ND+0x188e>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009bce:	f000 bfae 	b.w	800ab2e <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7fc f988 	bl	8005ee8 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d004      	beq.n	8009bec <WiFi_Conn_ND+0x94c>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d112      	bne.n	8009c12 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7fc f991 	bl	8005f14 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2264      	movs	r2, #100	; 0x64
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c18:	2b0a      	cmp	r3, #10
 8009c1a:	d005      	beq.n	8009c28 <WiFi_Conn_ND+0x988>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c22:	2b0d      	cmp	r3, #13
 8009c24:	f040 8785 	bne.w	800ab32 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7fc f989 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	22c8      	movs	r2, #200	; 0xc8
 8009c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 8009c46:	f000 bf74 	b.w	800ab32 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7fc f94c 	bl	8005ee8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d112      	bne.n	8009c80 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7fc f95a 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2264      	movs	r2, #100	; 0x64
 8009c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	2b0a      	cmp	r3, #10
 8009c88:	d004      	beq.n	8009c94 <WiFi_Conn_ND+0x9f4>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	2b0d      	cmp	r3, #13
 8009c92:	d10e      	bne.n	8009cb2 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7fc f953 	bl	8005f40 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	22c8      	movs	r2, #200	; 0xc8
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d111      	bne.n	8009ce0 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7fc f997 	bl	8005ff0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 8009cdc:	f000 bf46 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7fc f92d 	bl	8005f40 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	22c8      	movs	r2, #200	; 0xc8
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 8009cfe:	f000 bf35 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009d0c:	d04a      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d045      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d040      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d28:	2b0a      	cmp	r3, #10
 8009d2a:	d03b      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d32:	2b0e      	cmp	r3, #14
 8009d34:	d036      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3c:	2b0f      	cmp	r3, #15
 8009d3e:	d031      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d02c      	beq.n	8009da4 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7fc f950 	bl	8005ff0 <ConectarTCP>
						if(b->_enviaruart==1)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d124      	bne.n	8009da4 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7fc f9a0 	bl	80060a0 <AT_ESP8266_ND>
 8009d60:	4602      	mov	r2, r0
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d109      	bne.n	8009d8e <WiFi_Conn_ND+0xaee>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f7f7 f9af 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	2364      	movs	r3, #100	; 0x64
 8009d9e:	68b8      	ldr	r0, [r7, #8]
 8009da0:	f7fb f83c 	bl	8004e1c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d009      	beq.n	8009dc2 <WiFi_Conn_ND+0xb22>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db4:	2b0e      	cmp	r3, #14
 8009db6:	d004      	beq.n	8009dc2 <WiFi_Conn_ND+0xb22>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	2b0f      	cmp	r3, #15
 8009dc0:	d106      	bne.n	8009dd0 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f240 2261 	movw	r2, #609	; 0x261
 8009dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 8009dcc:	f000 beb3 	b.w	800ab36 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d005      	beq.n	8009de6 <WiFi_Conn_ND+0xb46>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	f040 86a8 	bne.w	800ab36 <WiFi_Conn_ND+0x1896>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f240 225d 	movw	r2, #605	; 0x25d
 8009dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8009df0:	f000 bea1 	b.w	800ab36 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7fc f877 	bl	8005ee8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d112      	bne.n	8009e2a <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7fc f885 	bl	8005f14 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2264      	movs	r2, #100	; 0x64
 8009e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e30:	2b0a      	cmp	r3, #10
 8009e32:	d004      	beq.n	8009e3e <WiFi_Conn_ND+0xb9e>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3a:	2b0d      	cmp	r3, #13
 8009e3c:	d10e      	bne.n	8009e5c <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7fc f87e 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	22c8      	movs	r2, #200	; 0xc8
 8009e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d00a      	beq.n	8009e7c <WiFi_Conn_ND+0xbdc>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6c:	2b10      	cmp	r3, #16
 8009e6e:	d005      	beq.n	8009e7c <WiFi_Conn_ND+0xbdc>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e76:	2b0e      	cmp	r3, #14
 8009e78:	f040 865f 	bne.w	800ab3a <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7fc f8b7 	bl	8005ff0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 8009e9c:	f000 be4d 	b.w	800ab3a <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7fc f821 	bl	8005ee8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d112      	bne.n	8009ed6 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fc f82f 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2264      	movs	r2, #100	; 0x64
 8009eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009edc:	2b0a      	cmp	r3, #10
 8009ede:	d004      	beq.n	8009eea <WiFi_Conn_ND+0xc4a>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee6:	2b0d      	cmp	r3, #13
 8009ee8:	d10e      	bne.n	8009f08 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7fc f828 	bl	8005f40 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	22c8      	movs	r2, #200	; 0xc8
 8009ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d004      	beq.n	8009f1c <WiFi_Conn_ND+0xc7c>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f18:	2b10      	cmp	r3, #16
 8009f1a:	d10f      	bne.n	8009f3c <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7fc f867 	bl	8005ff0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	2b0e      	cmp	r3, #14
 8009f44:	d005      	beq.n	8009f52 <WiFi_Conn_ND+0xcb2>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	2b0f      	cmp	r3, #15
 8009f4e:	f040 85f6 	bne.w	800ab3e <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	f240 85f0 	bls.w	800ab3e <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7fc f888 	bl	8006074 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 8009f7e:	f000 bdde 	b.w	800ab3e <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f88:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009f8c:	d054      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d04f      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9e:	2b0a      	cmp	r3, #10
 8009fa0:	d04a      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d045      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb2:	2b11      	cmp	r3, #17
 8009fb4:	d040      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbc:	2b14      	cmp	r3, #20
 8009fbe:	d03b      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc6:	2b12      	cmp	r3, #18
 8009fc8:	d036      	beq.n	800a038 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d907      	bls.n	8009fe4 <WiFi_Conn_ND+0xd44>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fc f848 	bl	8006074 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d124      	bne.n	800a038 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7fc f856 	bl	80060a0 <AT_ESP8266_ND>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d109      	bne.n	800a022 <WiFi_Conn_ND+0xd82>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a01a:	4619      	mov	r1, r3
 800a01c:	4610      	mov	r0, r2
 800a01e:	f7f7 f865 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a02e:	b29a      	uxth	r2, r3
 800a030:	2364      	movs	r3, #100	; 0x64
 800a032:	68b8      	ldr	r0, [r7, #8]
 800a034:	f7fa fef2 	bl	8004e1c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a03e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a042:	d13b      	bne.n	800a0bc <WiFi_Conn_ND+0xe1c>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d136      	bne.n	800a0bc <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	2b02      	cmp	r3, #2
 800a056:	d031      	beq.n	800a0bc <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	2b0a      	cmp	r3, #10
 800a060:	d02c      	beq.n	800a0bc <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	2b10      	cmp	r3, #16
 800a06a:	d027      	beq.n	800a0bc <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a072:	2b11      	cmp	r3, #17
 800a074:	d022      	beq.n	800a0bc <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07c:	2b12      	cmp	r3, #18
 800a07e:	d01d      	beq.n	800a0bc <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d109      	bne.n	800a0a6 <WiFi_Conn_ND+0xe06>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f7f7 f823 	bl	80010ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	2364      	movs	r3, #100	; 0x64
 800a0b6:	68b8      	ldr	r0, [r7, #8]
 800a0b8:	f7fa feb0 	bl	8004e1c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	2b13      	cmp	r3, #19
 800a0c4:	d104      	bne.n	800a0d0 <WiFi_Conn_ND+0xe30>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d014      	beq.n	800a104 <WiFi_Conn_ND+0xe64>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	2b0a      	cmp	r3, #10
 800a0e2:	d00f      	beq.n	800a104 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d00a      	beq.n	800a104 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f4:	2b11      	cmp	r3, #17
 800a0f6:	d005      	beq.n	800a104 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fe:	2b12      	cmp	r3, #18
 800a100:	f040 851f 	bne.w	800ab42 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a10a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a10e:	f000 bd18 	b.w	800ab42 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7fb fee8 	bl	8005ee8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11e:	2b04      	cmp	r3, #4
 800a120:	d112      	bne.n	800a148 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7fb fef6 	bl	8005f14 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2264      	movs	r2, #100	; 0x64
 800a12c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	2b0a      	cmp	r3, #10
 800a150:	d004      	beq.n	800a15c <WiFi_Conn_ND+0xebc>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a158:	2b0d      	cmp	r3, #13
 800a15a:	d10e      	bne.n	800a17a <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7fb feef 	bl	8005f40 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	22c8      	movs	r2, #200	; 0xc8
 800a166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	2b0c      	cmp	r3, #12
 800a182:	d10f      	bne.n	800a1a4 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7fb ff33 	bl	8005ff0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d00f      	beq.n	800a1ce <WiFi_Conn_ND+0xf2e>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d00a      	beq.n	800a1ce <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1be:	2b11      	cmp	r3, #17
 800a1c0:	d005      	beq.n	800a1ce <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c8:	2b12      	cmp	r3, #18
 800a1ca:	f040 84bc 	bne.w	800ab46 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7fb ff0e 	bl	8005ff0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a1ee:	f000 bcaa 	b.w	800ab46 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7fb fe78 	bl	8005ee8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d112      	bne.n	800a228 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7fb fe86 	bl	8005f14 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2264      	movs	r2, #100	; 0x64
 800a20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22e:	2b0a      	cmp	r3, #10
 800a230:	d004      	beq.n	800a23c <WiFi_Conn_ND+0xf9c>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a238:	2b0d      	cmp	r3, #13
 800a23a:	d10e      	bne.n	800a25a <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7fb fe7f 	bl	8005f40 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	22c8      	movs	r2, #200	; 0xc8
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	2b02      	cmp	r3, #2
 800a262:	d00e      	beq.n	800a282 <WiFi_Conn_ND+0xfe2>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26a:	2b0b      	cmp	r3, #11
 800a26c:	d009      	beq.n	800a282 <WiFi_Conn_ND+0xfe2>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a274:	2b0c      	cmp	r3, #12
 800a276:	d004      	beq.n	800a282 <WiFi_Conn_ND+0xfe2>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27e:	2b10      	cmp	r3, #16
 800a280:	d10f      	bne.n	800a2a2 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7fb feb4 	bl	8005ff0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800a2a2:	20c8      	movs	r0, #200	; 0xc8
 800a2a4:	f7f8 f906 	bl	80024b4 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d916      	bls.n	800a2e0 <WiFi_Conn_ND+0x1040>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d011      	beq.n	800a2e0 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7fb fed9 	bl	8006074 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a2c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800a2dc:	f000 bc46 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f240 2261 	movw	r2, #609	; 0x261
 800a2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a2fa:	f000 bc37 	b.w	800ab6c <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a308:	d045      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a310:	2b02      	cmp	r3, #2
 800a312:	d040      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31a:	2b0a      	cmp	r3, #10
 800a31c:	d03b      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a324:	2b15      	cmp	r3, #21
 800a326:	d036      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32e:	2b16      	cmp	r3, #22
 800a330:	d031      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a338:	2b17      	cmp	r3, #23
 800a33a:	d02c      	beq.n	800a396 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7fb fe6d 	bl	800601c <CrearServidorTCP>
									if(b->_enviaruart==1)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d124      	bne.n	800a396 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7fb fea7 	bl	80060a0 <AT_ESP8266_ND>
 800a352:	4602      	mov	r2, r0
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d109      	bne.n	800a380 <WiFi_Conn_ND+0x10e0>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f7f6 feb6 	bl	80010ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	2364      	movs	r3, #100	; 0x64
 800a390:	68b8      	ldr	r0, [r7, #8]
 800a392:	f7fa fd43 	bl	8004e1c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39c:	2b15      	cmp	r3, #21
 800a39e:	d004      	beq.n	800a3aa <WiFi_Conn_ND+0x110a>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a6:	2b17      	cmp	r3, #23
 800a3a8:	d104      	bne.n	800a3b4 <WiFi_Conn_ND+0x1114>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f240 3229 	movw	r2, #809	; 0x329
 800a3b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ba:	2b16      	cmp	r3, #22
 800a3bc:	f040 83c5 	bne.w	800ab4a <WiFi_Conn_ND+0x18aa>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f240 3225 	movw	r2, #805	; 0x325
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800a3ca:	e3be      	b.n	800ab4a <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7fb fd8b 	bl	8005ee8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d112      	bne.n	800a402 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fb fd99 	bl	8005f14 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2264      	movs	r2, #100	; 0x64
 800a3e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a408:	2b0a      	cmp	r3, #10
 800a40a:	d004      	beq.n	800a416 <WiFi_Conn_ND+0x1176>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	2b0d      	cmp	r3, #13
 800a414:	d10e      	bne.n	800a434 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7fb fd92 	bl	8005f40 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	22c8      	movs	r2, #200	; 0xc8
 800a420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d005      	beq.n	800a44a <WiFi_Conn_ND+0x11aa>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b10      	cmp	r3, #16
 800a446:	f040 8382 	bne.w	800ab4e <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7fb fdd0 	bl	8005ff0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a46a:	e370      	b.n	800ab4e <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7fb fd3b 	bl	8005ee8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d112      	bne.n	800a4a2 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7fb fd49 	bl	8005f14 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2264      	movs	r2, #100	; 0x64
 800a486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	2b0a      	cmp	r3, #10
 800a4aa:	d004      	beq.n	800a4b6 <WiFi_Conn_ND+0x1216>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b2:	2b0d      	cmp	r3, #13
 800a4b4:	d10e      	bne.n	800a4d4 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7fb fd42 	bl	8005f40 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	22c8      	movs	r2, #200	; 0xc8
 800a4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d005      	beq.n	800a4ea <WiFi_Conn_ND+0x124a>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	f040 8334 	bne.w	800ab52 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7fb fd80 	bl	8005ff0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a50a:	e322      	b.n	800ab52 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7fb fceb 	bl	8005ee8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d112      	bne.n	800a542 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7fb fcf9 	bl	8005f14 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2264      	movs	r2, #100	; 0x64
 800a526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a548:	2b0a      	cmp	r3, #10
 800a54a:	d004      	beq.n	800a556 <WiFi_Conn_ND+0x12b6>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	2b0d      	cmp	r3, #13
 800a554:	d10e      	bne.n	800a574 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7fb fcf2 	bl	8005f40 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	22c8      	movs	r2, #200	; 0xc8
 800a560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d005      	beq.n	800a58a <WiFi_Conn_ND+0x12ea>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	2b10      	cmp	r3, #16
 800a586:	f040 82e6 	bne.w	800ab56 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7fb fd30 	bl	8005ff0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a5aa:	e2d4      	b.n	800ab56 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7fb fc9b 	bl	8005ee8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d112      	bne.n	800a5e2 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7fb fca9 	bl	8005f14 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2264      	movs	r2, #100	; 0x64
 800a5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e8:	2b0a      	cmp	r3, #10
 800a5ea:	d004      	beq.n	800a5f6 <WiFi_Conn_ND+0x1356>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	2b0d      	cmp	r3, #13
 800a5f4:	d10e      	bne.n	800a614 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fb fca2 	bl	8005f40 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22c8      	movs	r2, #200	; 0xc8
 800a600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d005      	beq.n	800a62a <WiFi_Conn_ND+0x138a>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a624:	2b10      	cmp	r3, #16
 800a626:	f040 8298 	bne.w	800ab5a <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7fb fce0 	bl	8005ff0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a64a:	e286      	b.n	800ab5a <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f7fb fc4b 	bl	8005ee8 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a660:	2b04      	cmp	r3, #4
 800a662:	d112      	bne.n	800a68a <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7fb fc55 	bl	8005f14 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2264      	movs	r2, #100	; 0x64
 800a66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d004      	beq.n	800a69e <WiFi_Conn_ND+0x13fe>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69a:	2b0d      	cmp	r3, #13
 800a69c:	d10e      	bne.n	800a6bc <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fb fc4e 	bl	8005f40 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	22c8      	movs	r2, #200	; 0xc8
 800a6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d004      	beq.n	800a6d0 <WiFi_Conn_ND+0x1430>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6cc:	2b10      	cmp	r3, #16
 800a6ce:	d10f      	bne.n	800a6f0 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7fb fc8d 	bl	8005ff0 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	f040 8231 	bne.w	800ab5e <WiFi_Conn_ND+0x18be>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 822b 	beq.w	800ab5e <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7fb fc9d 	bl	8006048 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800a728:	e219      	b.n	800ab5e <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a730:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a734:	d063      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d05e      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a746:	2b0a      	cmp	r3, #10
 800a748:	d059      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800a750:	2b0b      	cmp	r3, #11
 800a752:	d054      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800a75a:	2b0c      	cmp	r3, #12
 800a75c:	d04f      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800a764:	2b10      	cmp	r3, #16
 800a766:	d04a      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800a76e:	2b11      	cmp	r3, #17
 800a770:	d045      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800a778:	2b12      	cmp	r3, #18
 800a77a:	d040      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800a782:	2b13      	cmp	r3, #19
 800a784:	d03b      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a78c:	2b16      	cmp	r3, #22
 800a78e:	d036      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a796:	2b19      	cmp	r3, #25
 800a798:	d031      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d02c      	beq.n	800a7fe <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fb fc4f 	bl	8006048 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d124      	bne.n	800a7fe <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7fb fc73 	bl	80060a0 <AT_ESP8266_ND>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d109      	bne.n	800a7e8 <WiFi_Conn_ND+0x1548>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7f6 fc82 	bl	80010ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	2364      	movs	r3, #100	; 0x64
 800a7f8:	68b8      	ldr	r0, [r7, #8]
 800a7fa:	f7fa fb0f 	bl	8004e1c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a804:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a808:	d154      	bne.n	800a8b4 <WiFi_Conn_ND+0x1614>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a810:	2b01      	cmp	r3, #1
 800a812:	d14f      	bne.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d04a      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800a824:	2b0a      	cmp	r3, #10
 800a826:	d045      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800a82e:	2b0b      	cmp	r3, #11
 800a830:	d040      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800a838:	2b0c      	cmp	r3, #12
 800a83a:	d03b      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800a842:	2b10      	cmp	r3, #16
 800a844:	d036      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800a84c:	2b11      	cmp	r3, #17
 800a84e:	d031      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800a856:	2b12      	cmp	r3, #18
 800a858:	d02c      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800a860:	2b13      	cmp	r3, #19
 800a862:	d027      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a86a:	2b16      	cmp	r3, #22
 800a86c:	d022      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a874:	2b19      	cmp	r3, #25
 800a876:	d01d      	beq.n	800a8b4 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a886:	2b01      	cmp	r3, #1
 800a888:	d109      	bne.n	800a89e <WiFi_Conn_ND+0x15fe>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a896:	4619      	mov	r1, r3
 800a898:	4610      	mov	r0, r2
 800a89a:	f7f6 fc27 	bl	80010ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	2364      	movs	r3, #100	; 0x64
 800a8ae:	68b8      	ldr	r0, [r7, #8]
 800a8b0:	f7fa fab4 	bl	8004e1c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	2b13      	cmp	r3, #19
 800a8bc:	d104      	bne.n	800a8c8 <WiFi_Conn_ND+0x1628>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f240 328d 	movw	r2, #909	; 0x38d
 800a8c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d02d      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d028      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a8e2:	2b0a      	cmp	r3, #10
 800a8e4:	d023      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d01e      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a8f6:	2b0c      	cmp	r3, #12
 800a8f8:	d019      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a900:	2b10      	cmp	r3, #16
 800a902:	d014      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a90a:	2b11      	cmp	r3, #17
 800a90c:	d00f      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a914:	2b12      	cmp	r3, #18
 800a916:	d00a      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a91e:	2b16      	cmp	r3, #22
 800a920:	d005      	beq.n	800a92e <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a928:	2b19      	cmp	r3, #25
 800a92a:	f040 811a 	bne.w	800ab62 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f240 3289 	movw	r2, #905	; 0x389
 800a934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800a938:	e113      	b.n	800ab62 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7fb fad4 	bl	8005ee8 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b04      	cmp	r3, #4
 800a948:	d009      	beq.n	800a95e <WiFi_Conn_ND+0x16be>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	2b0b      	cmp	r3, #11
 800a952:	d004      	beq.n	800a95e <WiFi_Conn_ND+0x16be>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	2b0c      	cmp	r3, #12
 800a95c:	d112      	bne.n	800a984 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7fb fad8 	bl	8005f14 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2264      	movs	r2, #100	; 0x64
 800a968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98a:	2b0a      	cmp	r3, #10
 800a98c:	d004      	beq.n	800a998 <WiFi_Conn_ND+0x16f8>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a994:	2b0d      	cmp	r3, #13
 800a996:	d10e      	bne.n	800a9b6 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7fb fad1 	bl	8005f40 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	22c8      	movs	r2, #200	; 0xc8
 800a9a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9bc:	2b16      	cmp	r3, #22
 800a9be:	d10c      	bne.n	800a9da <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f240 3225 	movw	r2, #805	; 0x325
 800a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e0:	2b18      	cmp	r3, #24
 800a9e2:	d10c      	bne.n	800a9fe <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f240 3229 	movw	r2, #809	; 0x329
 800a9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa04:	2b19      	cmp	r3, #25
 800aa06:	d008      	beq.n	800aa1a <WiFi_Conn_ND+0x177a>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0e:	2b11      	cmp	r3, #17
 800aa10:	d003      	beq.n	800aa1a <WiFi_Conn_ND+0x177a>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2212      	movs	r2, #18
 800aa16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	f040 80a0 	bne.w	800ab66 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aa2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800aa40:	e091      	b.n	800ab66 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7fb fa50 	bl	8005ee8 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d009      	beq.n	800aa66 <WiFi_Conn_ND+0x17c6>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa58:	2b0b      	cmp	r3, #11
 800aa5a:	d004      	beq.n	800aa66 <WiFi_Conn_ND+0x17c6>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa62:	2b0c      	cmp	r3, #12
 800aa64:	d112      	bne.n	800aa8c <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7fb fa54 	bl	8005f14 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2264      	movs	r2, #100	; 0x64
 800aa70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa92:	2b0a      	cmp	r3, #10
 800aa94:	d004      	beq.n	800aaa0 <WiFi_Conn_ND+0x1800>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9c:	2b0d      	cmp	r3, #13
 800aa9e:	d10e      	bne.n	800aabe <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7fb fa4d 	bl	8005f40 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	22c8      	movs	r2, #200	; 0xc8
 800aaaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d004      	beq.n	800aad2 <WiFi_Conn_ND+0x1832>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d14b      	bne.n	800ab6a <WiFi_Conn_ND+0x18ca>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d046      	beq.n	800ab6a <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7fb fab3 	bl	8006048 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800ab0c:	e02d      	b.n	800ab6a <WiFi_Conn_ND+0x18ca>
			break;
 800ab0e:	bf00      	nop
 800ab10:	e02c      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab12:	bf00      	nop
 800ab14:	e02a      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab16:	bf00      	nop
 800ab18:	e028      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab1a:	bf00      	nop
 800ab1c:	e026      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab1e:	bf00      	nop
 800ab20:	e024      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab22:	bf00      	nop
 800ab24:	e022      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab26:	bf00      	nop
 800ab28:	e020      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab2a:	bf00      	nop
 800ab2c:	e01e      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab2e:	bf00      	nop
 800ab30:	e01c      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab32:	bf00      	nop
 800ab34:	e01a      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab36:	bf00      	nop
 800ab38:	e018      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab3a:	bf00      	nop
 800ab3c:	e016      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab3e:	bf00      	nop
 800ab40:	e014      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab42:	bf00      	nop
 800ab44:	e012      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
			break;
 800ab46:	bf00      	nop
 800ab48:	e010      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab4a:	bf00      	nop
 800ab4c:	e00e      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab4e:	bf00      	nop
 800ab50:	e00c      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab52:	bf00      	nop
 800ab54:	e00a      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab56:	bf00      	nop
 800ab58:	e008      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab5a:	bf00      	nop
 800ab5c:	e006      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab5e:	bf00      	nop
 800ab60:	e004      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab62:	bf00      	nop
 800ab64:	e002      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <WiFi_Conn_ND+0x18cc>
						break;
 800ab6a:	bf00      	nop

		}
		return(b->_estado_conexion);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop

0800ab7c <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800ab7c:	b5b0      	push	{r4, r5, r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800ab8c:	2bf1      	cmp	r3, #241	; 0xf1
 800ab8e:	dd01      	ble.n	800ab94 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e099      	b.n	800acc8 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800ab94:	2300      	movs	r3, #0
 800ab96:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800ab9e:	f107 0108 	add.w	r1, r7, #8
 800aba2:	220a      	movs	r2, #10
 800aba4:	4618      	mov	r0, r3
 800aba6:	f003 f8ba 	bl	800dd1e <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800abb8:	4620      	mov	r0, r4
 800abba:	f7f5 fb1b 	bl	80001f4 <strlen>
 800abbe:	4603      	mov	r3, r0
 800abc0:	4423      	add	r3, r4
 800abc2:	4943      	ldr	r1, [pc, #268]	; (800acd0 <LoRa_Send+0x154>)
 800abc4:	461a      	mov	r2, r3
 800abc6:	460b      	mov	r3, r1
 800abc8:	cb03      	ldmia	r3!, {r0, r1}
 800abca:	6010      	str	r0, [r2, #0]
 800abcc:	6051      	str	r1, [r2, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f103 0516 	add.w	r5, r3, #22
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3316      	adds	r3, #22
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f5 fb06 	bl	80001f4 <strlen>
 800abe8:	4603      	mov	r3, r0
 800abea:	461a      	mov	r2, r3
 800abec:	4629      	mov	r1, r5
 800abee:	4620      	mov	r0, r4
 800abf0:	f003 fa81 	bl	800e0f6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7f5 fafa 	bl	80001f4 <strlen>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4423      	add	r3, r4
 800ac04:	4933      	ldr	r1, [pc, #204]	; (800acd4 <LoRa_Send+0x158>)
 800ac06:	461a      	mov	r2, r3
 800ac08:	460b      	mov	r3, r1
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7f5 faeb 	bl	80001f4 <strlen>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4619      	mov	r1, r3
 800ac26:	4620      	mov	r0, r4
 800ac28:	f003 fa65 	bl	800e0f6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7f5 fade 	bl	80001f4 <strlen>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4423      	add	r3, r4
 800ac3c:	4925      	ldr	r1, [pc, #148]	; (800acd4 <LoRa_Send+0x158>)
 800ac3e:	461a      	mov	r2, r3
 800ac40:	460b      	mov	r3, r1
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f5 fad1 	bl	80001f4 <strlen>
 800ac52:	4603      	mov	r3, r0
 800ac54:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ac66:	e012      	b.n	800ac8e <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800ac72:	7819      	ldrb	r1, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ac7e:	460a      	mov	r2, r1
 800ac80:	701a      	strb	r2, [r3, #0]
			la++;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	3301      	adds	r3, #1
 800ac86:	617b      	str	r3, [r7, #20]
			lc++;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	dbe8      	blt.n	800ac68 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	617a      	str	r2, [r7, #20]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4413      	add	r3, r2
 800aca0:	220d      	movs	r2, #13
 800aca2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	617a      	str	r2, [r7, #20]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	220a      	movs	r2, #10
 800acb2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	b292      	uxth	r2, r2
 800acc0:	4619      	mov	r1, r3
 800acc2:	6838      	ldr	r0, [r7, #0]
 800acc4:	f7fa f93c 	bl	8004f40 <HAL_UART_Transmit_IT>
	}

}
 800acc8:	4618      	mov	r0, r3
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bdb0      	pop	{r4, r5, r7, pc}
 800acd0:	0800f6f4 	.word	0x0800f6f4
 800acd4:	0800f700 	.word	0x0800f700

0800acd8 <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800ad02:	bf00      	nop
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa25 	bl	800b168 <Lora_idSTR>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	f200 820c 	bhi.w	800b13e <LoRa_decode+0x42e>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <LoRa_decode+0x1c>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800ad71 	.word	0x0800ad71
 800ad30:	0800ae49 	.word	0x0800ae49
 800ad34:	0800b07d 	.word	0x0800b07d
 800ad38:	0800b087 	.word	0x0800b087
 800ad3c:	0800b091 	.word	0x0800b091
 800ad40:	0800b09b 	.word	0x0800b09b
 800ad44:	0800b0a5 	.word	0x0800b0a5
 800ad48:	0800b0af 	.word	0x0800b0af
 800ad4c:	0800b0b9 	.word	0x0800b0b9
 800ad50:	0800b0c3 	.word	0x0800b0c3
 800ad54:	0800b0cd 	.word	0x0800b0cd
 800ad58:	0800b10d 	.word	0x0800b10d
 800ad5c:	0800b117 	.word	0x0800b117
 800ad60:	0800b12b 	.word	0x0800b12b
 800ad64:	0800b121 	.word	0x0800b121
 800ad68:	0800b073 	.word	0x0800b073
 800ad6c:	0800b135 	.word	0x0800b135
	{
		case _OK:
		{
			switch(b->estado)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800ad76:	3b01      	subs	r3, #1
 800ad78:	2b13      	cmp	r3, #19
 800ad7a:	d860      	bhi.n	800ae3e <LoRa_decode+0x12e>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <LoRa_decode+0x74>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800add5 	.word	0x0800add5
 800ad88:	0800ae3f 	.word	0x0800ae3f
 800ad8c:	0800ae3f 	.word	0x0800ae3f
 800ad90:	0800ae3f 	.word	0x0800ae3f
 800ad94:	0800ae3f 	.word	0x0800ae3f
 800ad98:	0800ae3f 	.word	0x0800ae3f
 800ad9c:	0800addf 	.word	0x0800addf
 800ada0:	0800ade9 	.word	0x0800ade9
 800ada4:	0800ae3f 	.word	0x0800ae3f
 800ada8:	0800adf3 	.word	0x0800adf3
 800adac:	0800ae3f 	.word	0x0800ae3f
 800adb0:	0800adfd 	.word	0x0800adfd
 800adb4:	0800ae3f 	.word	0x0800ae3f
 800adb8:	0800ae07 	.word	0x0800ae07
 800adbc:	0800ae3f 	.word	0x0800ae3f
 800adc0:	0800ae11 	.word	0x0800ae11
 800adc4:	0800ae3f 	.word	0x0800ae3f
 800adc8:	0800ae1b 	.word	0x0800ae1b
 800adcc:	0800ae3f 	.word	0x0800ae3f
 800add0:	0800ae25 	.word	0x0800ae25
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800addc:	e02f      	b.n	800ae3e <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2206      	movs	r2, #6
 800ade2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ade6:	e02a      	b.n	800ae3e <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2209      	movs	r2, #9
 800adec:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800adf0:	e025      	b.n	800ae3e <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	220b      	movs	r2, #11
 800adf6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800adfa:	e020      	b.n	800ae3e <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	220d      	movs	r2, #13
 800ae00:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ae04:	e01b      	b.n	800ae3e <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	220f      	movs	r2, #15
 800ae0a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ae0e:	e016      	b.n	800ae3e <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2211      	movs	r2, #17
 800ae14:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ae18:	e011      	b.n	800ae3e <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2213      	movs	r2, #19
 800ae1e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ae22:	e00c      	b.n	800ae3e <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2215      	movs	r2, #21
 800ae28:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800ae34:	2111      	movs	r1, #17
 800ae36:	48a8      	ldr	r0, [pc, #672]	; (800b0d8 <LoRa_decode+0x3c8>)
 800ae38:	f7f6 f958 	bl	80010ec <ITM0_Write>
					}
					break;
 800ae3c:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800ae3e:	210c      	movs	r1, #12
 800ae40:	48a6      	ldr	r0, [pc, #664]	; (800b0dc <LoRa_decode+0x3cc>)
 800ae42:	f7f6 f953 	bl	80010ec <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800ae46:	e17f      	b.n	800b148 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800ae48:	210d      	movs	r1, #13
 800ae4a:	48a5      	ldr	r0, [pc, #660]	; (800b0e0 <LoRa_decode+0x3d0>)
 800ae4c:	f7f6 f94e 	bl	80010ec <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	221a      	movs	r2, #26
 800ae54:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
					int j=0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800ae6c:	e002      	b.n	800ae74 <LoRa_decode+0x164>
					{ i++;}
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	3301      	adds	r3, #1
 800ae72:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	4413      	add	r3, r2
 800ae7a:	3356      	adds	r3, #86	; 0x56
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b3d      	cmp	r3, #61	; 0x3d
 800ae80:	d1f5      	bne.n	800ae6e <LoRa_decode+0x15e>
					i++;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	3301      	adds	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800ae88:	e017      	b.n	800aeba <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	4413      	add	r3, r2
 800ae90:	3356      	adds	r3, #86	; 0x56
 800ae92:	7819      	ldrb	r1, [r3, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	4413      	add	r3, r2
 800ae9a:	3306      	adds	r3, #6
 800ae9c:	460a      	mov	r2, r1
 800ae9e:	701a      	strb	r2, [r3, #0]
						i++;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	3301      	adds	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
						j++;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b06      	cmp	r3, #6
 800aeb0:	dd03      	ble.n	800aeba <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb9a 	bl	800b5ec <Lora_rx_del>
							break;
 800aeb8:	e006      	b.n	800aec8 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	4413      	add	r3, r2
 800aec0:	3356      	adds	r3, #86	; 0x56
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b2c      	cmp	r3, #44	; 0x2c
 800aec6:	d1e0      	bne.n	800ae8a <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	4413      	add	r3, r2
 800aece:	3306      	adds	r3, #6
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
					j=0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
					i++;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	3301      	adds	r3, #1
 800aedc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800aede:	e017      	b.n	800af10 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	3356      	adds	r3, #86	; 0x56
 800aee8:	7819      	ldrb	r1, [r3, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	4413      	add	r3, r2
 800aef0:	330c      	adds	r3, #12
 800aef2:	460a      	mov	r2, r1
 800aef4:	701a      	strb	r2, [r3, #0]
						i++;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	3301      	adds	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
						j++;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3301      	adds	r3, #1
 800af00:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b04      	cmp	r3, #4
 800af06:	dd03      	ble.n	800af10 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fb6f 	bl	800b5ec <Lora_rx_del>
							break;
 800af0e:	e006      	b.n	800af1e <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	4413      	add	r3, r2
 800af16:	3356      	adds	r3, #86	; 0x56
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b2c      	cmp	r3, #44	; 0x2c
 800af1c:	d1e0      	bne.n	800aee0 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	4413      	add	r3, r2
 800af24:	330c      	adds	r3, #12
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
					j=0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	613b      	str	r3, [r7, #16]
					i++;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	3301      	adds	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	330c      	adds	r3, #12
 800af38:	210a      	movs	r1, #10
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 fed3 	bl	800dce6 <atoi>
 800af40:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800af42:	e019      	b.n	800af78 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	4413      	add	r3, r2
 800af4a:	3356      	adds	r3, #86	; 0x56
 800af4c:	7819      	ldrb	r1, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	4413      	add	r3, r2
 800af54:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800af58:	460a      	mov	r2, r1
 800af5a:	701a      	strb	r2, [r3, #0]
						j++;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	3301      	adds	r3, #1
 800af60:	613b      	str	r3, [r7, #16]
						i++;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	3301      	adds	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	dd03      	ble.n	800af78 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fb3b 	bl	800b5ec <Lora_rx_del>
							break;
 800af76:	e006      	b.n	800af86 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	4413      	add	r3, r2
 800af7e:	3356      	adds	r3, #86	; 0x56
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b2c      	cmp	r3, #44	; 0x2c
 800af84:	d1de      	bne.n	800af44 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800af8e:	2300      	movs	r3, #0
 800af90:	613b      	str	r3, [r7, #16]
					i++;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	3301      	adds	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800af98:	e017      	b.n	800afca <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	3356      	adds	r3, #86	; 0x56
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	4413      	add	r3, r2
 800afaa:	3310      	adds	r3, #16
 800afac:	460a      	mov	r2, r1
 800afae:	701a      	strb	r2, [r3, #0]
						i++;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	3301      	adds	r3, #1
 800afb4:	617b      	str	r3, [r7, #20]
						j++;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	3301      	adds	r3, #1
 800afba:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b05      	cmp	r3, #5
 800afc0:	dd03      	ble.n	800afca <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fb12 	bl	800b5ec <Lora_rx_del>
							break;
 800afc8:	e006      	b.n	800afd8 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	4413      	add	r3, r2
 800afd0:	3356      	adds	r3, #86	; 0x56
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b2c      	cmp	r3, #44	; 0x2c
 800afd6:	d1e0      	bne.n	800af9a <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3310      	adds	r3, #16
 800afdc:	210a      	movs	r1, #10
 800afde:	4618      	mov	r0, r3
 800afe0:	f002 fe81 	bl	800dce6 <atoi>
 800afe4:	4602      	mov	r2, r0
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	4413      	add	r3, r2
 800aff2:	3310      	adds	r3, #16
 800aff4:	2200      	movs	r2, #0
 800aff6:	701a      	strb	r2, [r3, #0]
					j=0;
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]
					i++;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	3301      	adds	r3, #1
 800b000:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800b002:	e017      	b.n	800b034 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	4413      	add	r3, r2
 800b00a:	3356      	adds	r3, #86	; 0x56
 800b00c:	7819      	ldrb	r1, [r3, #0]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	4413      	add	r3, r2
 800b014:	3310      	adds	r3, #16
 800b016:	460a      	mov	r2, r1
 800b018:	701a      	strb	r2, [r3, #0]
						i++;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	3301      	adds	r3, #1
 800b01e:	617b      	str	r3, [r7, #20]
						j++;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	3301      	adds	r3, #1
 800b024:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2b05      	cmp	r3, #5
 800b02a:	dd03      	ble.n	800b034 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fadd 	bl	800b5ec <Lora_rx_del>
							break;
 800b032:	e006      	b.n	800b042 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	3356      	adds	r3, #86	; 0x56
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b0d      	cmp	r3, #13
 800b040:	d1e0      	bne.n	800b004 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	4413      	add	r3, r2
 800b048:	3310      	adds	r3, #16
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3310      	adds	r3, #16
 800b052:	210a      	movs	r1, #10
 800b054:	4618      	mov	r0, r3
 800b056:	f002 fe46 	bl	800dce6 <atoi>
 800b05a:	4602      	mov	r2, r0
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800b070:	e06a      	b.n	800b148 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800b072:	210d      	movs	r1, #13
 800b074:	481b      	ldr	r0, [pc, #108]	; (800b0e4 <LoRa_decode+0x3d4>)
 800b076:	f7f6 f839 	bl	80010ec <ITM0_Write>
			break;
 800b07a:	e065      	b.n	800b148 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800b07c:	210f      	movs	r1, #15
 800b07e:	481a      	ldr	r0, [pc, #104]	; (800b0e8 <LoRa_decode+0x3d8>)
 800b080:	f7f6 f834 	bl	80010ec <ITM0_Write>
			break;
 800b084:	e060      	b.n	800b148 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800b086:	210f      	movs	r1, #15
 800b088:	4818      	ldr	r0, [pc, #96]	; (800b0ec <LoRa_decode+0x3dc>)
 800b08a:	f7f6 f82f 	bl	80010ec <ITM0_Write>
			break;
 800b08e:	e05b      	b.n	800b148 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800b090:	210e      	movs	r1, #14
 800b092:	4817      	ldr	r0, [pc, #92]	; (800b0f0 <LoRa_decode+0x3e0>)
 800b094:	f7f6 f82a 	bl	80010ec <ITM0_Write>
			break;
 800b098:	e056      	b.n	800b148 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800b09a:	210d      	movs	r1, #13
 800b09c:	4815      	ldr	r0, [pc, #84]	; (800b0f4 <LoRa_decode+0x3e4>)
 800b09e:	f7f6 f825 	bl	80010ec <ITM0_Write>
			break;
 800b0a2:	e051      	b.n	800b148 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800b0a4:	2113      	movs	r1, #19
 800b0a6:	4814      	ldr	r0, [pc, #80]	; (800b0f8 <LoRa_decode+0x3e8>)
 800b0a8:	f7f6 f820 	bl	80010ec <ITM0_Write>
			break;
 800b0ac:	e04c      	b.n	800b148 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800b0ae:	210e      	movs	r1, #14
 800b0b0:	4812      	ldr	r0, [pc, #72]	; (800b0fc <LoRa_decode+0x3ec>)
 800b0b2:	f7f6 f81b 	bl	80010ec <ITM0_Write>
			break;
 800b0b6:	e047      	b.n	800b148 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800b0b8:	2111      	movs	r1, #17
 800b0ba:	4811      	ldr	r0, [pc, #68]	; (800b100 <LoRa_decode+0x3f0>)
 800b0bc:	f7f6 f816 	bl	80010ec <ITM0_Write>
			break;
 800b0c0:	e042      	b.n	800b148 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800b0c2:	2111      	movs	r1, #17
 800b0c4:	480f      	ldr	r0, [pc, #60]	; (800b104 <LoRa_decode+0x3f4>)
 800b0c6:	f7f6 f811 	bl	80010ec <ITM0_Write>
			break;
 800b0ca:	e03d      	b.n	800b148 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800b0cc:	210e      	movs	r1, #14
 800b0ce:	480e      	ldr	r0, [pc, #56]	; (800b108 <LoRa_decode+0x3f8>)
 800b0d0:	f7f6 f80c 	bl	80010ec <ITM0_Write>
			break;
 800b0d4:	e038      	b.n	800b148 <LoRa_decode+0x438>
 800b0d6:	bf00      	nop
 800b0d8:	0800f730 	.word	0x0800f730
 800b0dc:	0800f744 	.word	0x0800f744
 800b0e0:	0800f754 	.word	0x0800f754
 800b0e4:	0800f764 	.word	0x0800f764
 800b0e8:	0800f774 	.word	0x0800f774
 800b0ec:	0800f784 	.word	0x0800f784
 800b0f0:	0800f794 	.word	0x0800f794
 800b0f4:	0800f7a4 	.word	0x0800f7a4
 800b0f8:	0800f7b4 	.word	0x0800f7b4
 800b0fc:	0800f7c8 	.word	0x0800f7c8
 800b100:	0800f7d8 	.word	0x0800f7d8
 800b104:	0800f7ec 	.word	0x0800f7ec
 800b108:	0800f800 	.word	0x0800f800
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800b10c:	210f      	movs	r1, #15
 800b10e:	4810      	ldr	r0, [pc, #64]	; (800b150 <LoRa_decode+0x440>)
 800b110:	f7f5 ffec 	bl	80010ec <ITM0_Write>
			break;
 800b114:	e018      	b.n	800b148 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800b116:	210e      	movs	r1, #14
 800b118:	480e      	ldr	r0, [pc, #56]	; (800b154 <LoRa_decode+0x444>)
 800b11a:	f7f5 ffe7 	bl	80010ec <ITM0_Write>
			break;
 800b11e:	e013      	b.n	800b148 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800b120:	210d      	movs	r1, #13
 800b122:	480d      	ldr	r0, [pc, #52]	; (800b158 <LoRa_decode+0x448>)
 800b124:	f7f5 ffe2 	bl	80010ec <ITM0_Write>
			break;
 800b128:	e00e      	b.n	800b148 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800b12a:	210d      	movs	r1, #13
 800b12c:	480b      	ldr	r0, [pc, #44]	; (800b15c <LoRa_decode+0x44c>)
 800b12e:	f7f5 ffdd 	bl	80010ec <ITM0_Write>
			break;
 800b132:	e009      	b.n	800b148 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800b134:	2114      	movs	r1, #20
 800b136:	480a      	ldr	r0, [pc, #40]	; (800b160 <LoRa_decode+0x450>)
 800b138:	f7f5 ffd8 	bl	80010ec <ITM0_Write>
			break;
 800b13c:	e004      	b.n	800b148 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800b13e:	2110      	movs	r1, #16
 800b140:	4808      	ldr	r0, [pc, #32]	; (800b164 <LoRa_decode+0x454>)
 800b142:	f7f5 ffd3 	bl	80010ec <ITM0_Write>
			break;
 800b146:	bf00      	nop
	}
 }
 800b148:	bf00      	nop
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	0800f810 	.word	0x0800f810
 800b154:	0800f820 	.word	0x0800f820
 800b158:	0800f830 	.word	0x0800f830
 800b15c:	0800f840 	.word	0x0800f840
 800b160:	0800f850 	.word	0x0800f850
 800b164:	0800f868 	.word	0x0800f868

0800b168 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800b168:	b580      	push	{r7, lr}
 800b16a:	b090      	sub	sp, #64	; 0x40
 800b16c:	af06      	add	r7, sp, #24
 800b16e:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800b176:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b17a:	dd01      	ble.n	800b180 <Lora_idSTR+0x18>
 800b17c:	2310      	movs	r3, #16
 800b17e:	e229      	b.n	800b5d4 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800b184:	2304      	movs	r3, #4
 800b186:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b194:	f107 021c 	add.w	r2, r7, #28
 800b198:	2300      	movs	r3, #0
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	f107 0320 	add.w	r3, r7, #32
 800b1a0:	9303      	str	r3, [sp, #12]
 800b1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	f107 0310 	add.w	r3, r7, #16
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	4ab9      	ldr	r2, [pc, #740]	; (800b49c <Lora_idSTR+0x334>)
 800b1b8:	f002 f9e4 	bl	800d584 <FT_String_ND>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d101      	bne.n	800b1c6 <Lora_idSTR+0x5e>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e206      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800b1c6:	2305      	movs	r3, #5
 800b1c8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1d6:	f107 021c 	add.w	r2, r7, #28
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f107 0320 	add.w	r3, r7, #32
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1e8:	9302      	str	r3, [sp, #8]
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	f107 0310 	add.w	r3, r7, #16
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	4aa9      	ldr	r2, [pc, #676]	; (800b4a0 <Lora_idSTR+0x338>)
 800b1fa:	f002 f9c3 	bl	800d584 <FT_String_ND>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <Lora_idSTR+0xa0>
 800b204:	2301      	movs	r3, #1
 800b206:	e1e5      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800b208:	2305      	movs	r3, #5
 800b20a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b218:	f107 021c 	add.w	r2, r7, #28
 800b21c:	2300      	movs	r3, #0
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	f107 0320 	add.w	r3, r7, #32
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b22a:	9302      	str	r3, [sp, #8]
 800b22c:	f107 030c 	add.w	r3, r7, #12
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	f107 0310 	add.w	r3, r7, #16
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	4613      	mov	r3, r2
 800b23a:	4a9a      	ldr	r2, [pc, #616]	; (800b4a4 <Lora_idSTR+0x33c>)
 800b23c:	f002 f9a2 	bl	800d584 <FT_String_ND>
 800b240:	4603      	mov	r3, r0
 800b242:	2b01      	cmp	r3, #1
 800b244:	d101      	bne.n	800b24a <Lora_idSTR+0xe2>
 800b246:	230f      	movs	r3, #15
 800b248:	e1c4      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800b24a:	2306      	movs	r3, #6
 800b24c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b25a:	f107 021c 	add.w	r2, r7, #28
 800b25e:	2300      	movs	r3, #0
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	f107 0320 	add.w	r3, r7, #32
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b26c:	9302      	str	r3, [sp, #8]
 800b26e:	f107 030c 	add.w	r3, r7, #12
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	f107 0310 	add.w	r3, r7, #16
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4613      	mov	r3, r2
 800b27c:	4a8a      	ldr	r2, [pc, #552]	; (800b4a8 <Lora_idSTR+0x340>)
 800b27e:	f002 f981 	bl	800d584 <FT_String_ND>
 800b282:	4603      	mov	r3, r0
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <Lora_idSTR+0x124>
 800b288:	2302      	movs	r3, #2
 800b28a:	e1a3      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800b28c:	2306      	movs	r3, #6
 800b28e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b29c:	f107 021c 	add.w	r2, r7, #28
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	f107 0320 	add.w	r3, r7, #32
 800b2a8:	9303      	str	r3, [sp, #12]
 800b2aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	f107 030c 	add.w	r3, r7, #12
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	f107 0310 	add.w	r3, r7, #16
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	4a7b      	ldr	r2, [pc, #492]	; (800b4ac <Lora_idSTR+0x344>)
 800b2c0:	f002 f960 	bl	800d584 <FT_String_ND>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <Lora_idSTR+0x166>
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e182      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800b2ce:	2306      	movs	r3, #6
 800b2d0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b2de:	f107 021c 	add.w	r2, r7, #28
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	f107 0320 	add.w	r3, r7, #32
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2f0:	9302      	str	r3, [sp, #8]
 800b2f2:	f107 030c 	add.w	r3, r7, #12
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	f107 0310 	add.w	r3, r7, #16
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	4613      	mov	r3, r2
 800b300:	4a6b      	ldr	r2, [pc, #428]	; (800b4b0 <Lora_idSTR+0x348>)
 800b302:	f002 f93f 	bl	800d584 <FT_String_ND>
 800b306:	4603      	mov	r3, r0
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <Lora_idSTR+0x1a8>
 800b30c:	2304      	movs	r3, #4
 800b30e:	e161      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800b310:	2305      	movs	r3, #5
 800b312:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b320:	f107 021c 	add.w	r2, r7, #28
 800b324:	2300      	movs	r3, #0
 800b326:	9304      	str	r3, [sp, #16]
 800b328:	f107 0320 	add.w	r3, r7, #32
 800b32c:	9303      	str	r3, [sp, #12]
 800b32e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f107 0310 	add.w	r3, r7, #16
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	4613      	mov	r3, r2
 800b342:	4a5c      	ldr	r2, [pc, #368]	; (800b4b4 <Lora_idSTR+0x34c>)
 800b344:	f002 f91e 	bl	800d584 <FT_String_ND>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <Lora_idSTR+0x1ea>
 800b34e:	2305      	movs	r3, #5
 800b350:	e140      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800b352:	230b      	movs	r3, #11
 800b354:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b362:	f107 021c 	add.w	r2, r7, #28
 800b366:	2300      	movs	r3, #0
 800b368:	9304      	str	r3, [sp, #16]
 800b36a:	f107 0320 	add.w	r3, r7, #32
 800b36e:	9303      	str	r3, [sp, #12]
 800b370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b374:	9302      	str	r3, [sp, #8]
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	4613      	mov	r3, r2
 800b384:	4a4c      	ldr	r2, [pc, #304]	; (800b4b8 <Lora_idSTR+0x350>)
 800b386:	f002 f8fd 	bl	800d584 <FT_String_ND>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d101      	bne.n	800b394 <Lora_idSTR+0x22c>
 800b390:	2306      	movs	r3, #6
 800b392:	e11f      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800b394:	2306      	movs	r3, #6
 800b396:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b3a4:	f107 021c 	add.w	r2, r7, #28
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	f107 0320 	add.w	r3, r7, #32
 800b3b0:	9303      	str	r3, [sp, #12]
 800b3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	f107 030c 	add.w	r3, r7, #12
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f107 0310 	add.w	r3, r7, #16
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	4a3d      	ldr	r2, [pc, #244]	; (800b4bc <Lora_idSTR+0x354>)
 800b3c8:	f002 f8dc 	bl	800d584 <FT_String_ND>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <Lora_idSTR+0x26e>
 800b3d2:	2307      	movs	r3, #7
 800b3d4:	e0fe      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800b3d6:	2309      	movs	r3, #9
 800b3d8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b3e6:	f107 021c 	add.w	r2, r7, #28
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	f107 0320 	add.w	r3, r7, #32
 800b3f2:	9303      	str	r3, [sp, #12]
 800b3f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3f8:	9302      	str	r3, [sp, #8]
 800b3fa:	f107 030c 	add.w	r3, r7, #12
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	f107 0310 	add.w	r3, r7, #16
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4613      	mov	r3, r2
 800b408:	4a2d      	ldr	r2, [pc, #180]	; (800b4c0 <Lora_idSTR+0x358>)
 800b40a:	f002 f8bb 	bl	800d584 <FT_String_ND>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <Lora_idSTR+0x2b0>
 800b414:	2308      	movs	r3, #8
 800b416:	e0dd      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800b418:	2309      	movs	r3, #9
 800b41a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b428:	f107 021c 	add.w	r2, r7, #28
 800b42c:	2300      	movs	r3, #0
 800b42e:	9304      	str	r3, [sp, #16]
 800b430:	f107 0320 	add.w	r3, r7, #32
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b43a:	9302      	str	r3, [sp, #8]
 800b43c:	f107 030c 	add.w	r3, r7, #12
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	f107 0310 	add.w	r3, r7, #16
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <Lora_idSTR+0x35c>)
 800b44c:	f002 f89a 	bl	800d584 <FT_String_ND>
 800b450:	4603      	mov	r3, r0
 800b452:	2b01      	cmp	r3, #1
 800b454:	d101      	bne.n	800b45a <Lora_idSTR+0x2f2>
 800b456:	2309      	movs	r3, #9
 800b458:	e0bc      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800b45a:	2306      	movs	r3, #6
 800b45c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b46a:	f107 021c 	add.w	r2, r7, #28
 800b46e:	2300      	movs	r3, #0
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	f107 0320 	add.w	r3, r7, #32
 800b476:	9303      	str	r3, [sp, #12]
 800b478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	f107 030c 	add.w	r3, r7, #12
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	f107 0310 	add.w	r3, r7, #16
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4613      	mov	r3, r2
 800b48c:	4a0e      	ldr	r2, [pc, #56]	; (800b4c8 <Lora_idSTR+0x360>)
 800b48e:	f002 f879 	bl	800d584 <FT_String_ND>
 800b492:	4603      	mov	r3, r0
 800b494:	2b01      	cmp	r3, #1
 800b496:	d119      	bne.n	800b4cc <Lora_idSTR+0x364>
 800b498:	230a      	movs	r3, #10
 800b49a:	e09b      	b.n	800b5d4 <Lora_idSTR+0x46c>
 800b49c:	0800f87c 	.word	0x0800f87c
 800b4a0:	0800f884 	.word	0x0800f884
 800b4a4:	0800f88c 	.word	0x0800f88c
 800b4a8:	0800f894 	.word	0x0800f894
 800b4ac:	0800f89c 	.word	0x0800f89c
 800b4b0:	0800f8a4 	.word	0x0800f8a4
 800b4b4:	0800f8ac 	.word	0x0800f8ac
 800b4b8:	0800f8b4 	.word	0x0800f8b4
 800b4bc:	0800f8c0 	.word	0x0800f8c0
 800b4c0:	0800f8c8 	.word	0x0800f8c8
 800b4c4:	0800f8d4 	.word	0x0800f8d4
 800b4c8:	0800f8e0 	.word	0x0800f8e0
		i=strlen("+CRFOP=");
 800b4cc:	2307      	movs	r3, #7
 800b4ce:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b4dc:	f107 021c 	add.w	r2, r7, #28
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	f107 0320 	add.w	r3, r7, #32
 800b4e8:	9303      	str	r3, [sp, #12]
 800b4ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	f107 0310 	add.w	r3, r7, #16
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	4a37      	ldr	r2, [pc, #220]	; (800b5dc <Lora_idSTR+0x474>)
 800b500:	f002 f840 	bl	800d584 <FT_String_ND>
 800b504:	4603      	mov	r3, r0
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <Lora_idSTR+0x3a6>
 800b50a:	230b      	movs	r3, #11
 800b50c:	e062      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800b50e:	2306      	movs	r3, #6
 800b510:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b51e:	f107 021c 	add.w	r2, r7, #28
 800b522:	2300      	movs	r3, #0
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	f107 0320 	add.w	r3, r7, #32
 800b52a:	9303      	str	r3, [sp, #12]
 800b52c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b530:	9302      	str	r3, [sp, #8]
 800b532:	f107 030c 	add.w	r3, r7, #12
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	f107 0310 	add.w	r3, r7, #16
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4613      	mov	r3, r2
 800b540:	4a27      	ldr	r2, [pc, #156]	; (800b5e0 <Lora_idSTR+0x478>)
 800b542:	f002 f81f 	bl	800d584 <FT_String_ND>
 800b546:	4603      	mov	r3, r0
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d101      	bne.n	800b550 <Lora_idSTR+0x3e8>
 800b54c:	230c      	movs	r3, #12
 800b54e:	e041      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800b550:	2305      	movs	r3, #5
 800b552:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b560:	f107 021c 	add.w	r2, r7, #28
 800b564:	2300      	movs	r3, #0
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	f107 0320 	add.w	r3, r7, #32
 800b56c:	9303      	str	r3, [sp, #12]
 800b56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b572:	9302      	str	r3, [sp, #8]
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	f107 0310 	add.w	r3, r7, #16
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4613      	mov	r3, r2
 800b582:	4a18      	ldr	r2, [pc, #96]	; (800b5e4 <Lora_idSTR+0x47c>)
 800b584:	f001 fffe 	bl	800d584 <FT_String_ND>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d101      	bne.n	800b592 <Lora_idSTR+0x42a>
 800b58e:	230e      	movs	r3, #14
 800b590:	e020      	b.n	800b5d4 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800b592:	2305      	movs	r3, #5
 800b594:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b5a2:	f107 021c 	add.w	r2, r7, #28
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	f107 0320 	add.w	r3, r7, #32
 800b5ae:	9303      	str	r3, [sp, #12]
 800b5b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b4:	9302      	str	r3, [sp, #8]
 800b5b6:	f107 030c 	add.w	r3, r7, #12
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f107 0310 	add.w	r3, r7, #16
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	4a08      	ldr	r2, [pc, #32]	; (800b5e8 <Lora_idSTR+0x480>)
 800b5c6:	f001 ffdd 	bl	800d584 <FT_String_ND>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <Lora_idSTR+0x46c>
 800b5d0:	230d      	movs	r3, #13
 800b5d2:	e7ff      	b.n	800b5d4 <Lora_idSTR+0x46c>
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3728      	adds	r7, #40	; 0x28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	0800f8e8 	.word	0x0800f8e8
 800b5e0:	0800f8f0 	.word	0x0800f8f0
 800b5e4:	0800f8f8 	.word	0x0800f8f8
 800b5e8:	0800f900 	.word	0x0800f900

0800b5ec <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
	...

0800b620 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f241 3288 	movw	r2, #5000	; 0x1388
 800b63a:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a1c      	ldr	r2, [pc, #112]	; (800b6c0 <ModBUS_Config+0xa0>)
 800b64e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a18      	ldr	r2, [pc, #96]	; (800b6c4 <ModBUS_Config+0xa4>)
 800b664:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2210      	movs	r2, #16
 800b672:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2210      	movs	r2, #16
 800b680:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	f0f0af5a 	.word	0xf0f0af5a
 800b6c4:	a5fa0f0f 	.word	0xa5fa0f0f

0800b6c8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3305      	adds	r3, #5
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	3306      	adds	r3, #6
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d10b      	bne.n	800b6f8 <ModBUS_Check+0x30>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3302      	adds	r3, #2
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <ModBUS_Check+0x30>
	{
		return(1);
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e000      	b.n	800b6fa <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800b6f8:	2300      	movs	r3, #0
	}
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	7b5b      	ldrb	r3, [r3, #13]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d11d      	bne.n	800b758 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b726:	429a      	cmp	r2, r3
 800b728:	d116      	bne.n	800b758 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b734:	429a      	cmp	r2, r3
 800b736:	d10f      	bne.n	800b758 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b742:	429a      	cmp	r2, r3
 800b744:	d108      	bne.n	800b758 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b750:	429a      	cmp	r2, r3
 800b752:	d101      	bne.n	800b758 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800b758:	2300      	movs	r3, #0
	}
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	70fb      	strb	r3, [r7, #3]
 800b772:	4613      	mov	r3, r2
 800b774:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b780:	78fa      	ldrb	r2, [r7, #3]
 800b782:	429a      	cmp	r2, r3
 800b784:	d901      	bls.n	800b78a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b786:	2301      	movs	r3, #1
 800b788:	e015      	b.n	800b7b6 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	3301      	adds	r3, #1
 800b790:	883a      	ldrh	r2, [r7, #0]
 800b792:	b2d1      	uxtb	r1, r2
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	4413      	add	r3, r2
 800b798:	460a      	mov	r2, r1
 800b79a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800b79e:	883b      	ldrh	r3, [r7, #0]
 800b7a0:	0a1b      	lsrs	r3, r3, #8
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	7bfa      	ldrb	r2, [r7, #15]
 800b7b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800b7b4:	2300      	movs	r3, #0
	}
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b7dc:	78fa      	ldrb	r2, [r7, #3]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d901      	bls.n	800b7e6 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e015      	b.n	800b812 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7f2:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b7f4:	89fb      	ldrh	r3, [r7, #14]
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	3301      	adds	r3, #1
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4413      	add	r3, r2
 800b804:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b808:	b29a      	uxth	r2, r3
 800b80a:	89fb      	ldrh	r3, [r7, #14]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800b810:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	807b      	strh	r3, [r7, #2]
 800b82a:	4613      	mov	r3, r2
 800b82c:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800b82e:	887b      	ldrh	r3, [r7, #2]
 800b830:	2b00      	cmp	r3, #0
 800b832:	bf14      	ite	ne
 800b834:	2301      	movne	r3, #1
 800b836:	2300      	moveq	r3, #0
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800b842:	887b      	ldrh	r3, [r7, #2]
 800b844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b848:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800b84a:	887b      	ldrh	r3, [r7, #2]
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2206      	movs	r2, #6
 800b884:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	781a      	ldrb	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2203      	movs	r2, #3
 800b896:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800b89a:	887b      	ldrh	r3, [r7, #2]
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	787a      	ldrb	r2, [r7, #1]
 800b8b0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	220c      	movs	r2, #12
 800b8b8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800b8bc:	bf00      	nop
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
	...

0800b8cc <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b09c      	sub	sp, #112	; 0x70
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	785b      	ldrb	r3, [r3, #1]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	f041 813f 	bne.w	800cb5c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f103 020d 	add.w	r2, r3, #13
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	f7ff feeb 	bl	800b6c8 <ModBUS_Check>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f001 812f 	beq.w	800cb58 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7d1b      	ldrb	r3, [r3, #20]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	2b0f      	cmp	r3, #15
 800b902:	f201 80f3 	bhi.w	800caec <ModBUS+0x1220>
 800b906:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <ModBUS+0x40>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b94d 	.word	0x0800b94d
 800b910:	0800bb8d 	.word	0x0800bb8d
 800b914:	0800bdcd 	.word	0x0800bdcd
 800b918:	0800c005 	.word	0x0800c005
 800b91c:	0800c23d 	.word	0x0800c23d
 800b920:	0800c453 	.word	0x0800c453
 800b924:	0800caed 	.word	0x0800caed
 800b928:	0800caed 	.word	0x0800caed
 800b92c:	0800caed 	.word	0x0800caed
 800b930:	0800caed 	.word	0x0800caed
 800b934:	0800caed 	.word	0x0800caed
 800b938:	0800caed 	.word	0x0800caed
 800b93c:	0800caed 	.word	0x0800caed
 800b940:	0800caed 	.word	0x0800caed
 800b944:	0800c60f 	.word	0x0800c60f
 800b948:	0800c89f 	.word	0x0800c89f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7c5a      	ldrb	r2, [r3, #17]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	7c1a      	ldrb	r2, [r3, #16]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	7bda      	ldrb	r2, [r3, #15]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	7b9a      	ldrb	r2, [r3, #14]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7b5a      	ldrb	r2, [r3, #13]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800b97e:	2300      	movs	r3, #0
 800b980:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	795b      	ldrb	r3, [r3, #5]
 800b986:	2b01      	cmp	r3, #1
 800b988:	f040 80e6 	bne.w	800bb58 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7d5b      	ldrb	r3, [r3, #21]
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b9ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	7d9b      	ldrb	r3, [r3, #22]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7ddb      	ldrb	r3, [r3, #23]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b9e2:	021b      	lsls	r3, r3, #8
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b9f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	7e1b      	ldrb	r3, [r3, #24]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d87e      	bhi.n	800bb24 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba34:	4413      	add	r3, r2
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	dc57      	bgt.n	800baf0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800ba60:	40d3      	lsrs	r3, r2
 800ba62:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba6a:	08db      	lsrs	r3, r3, #3
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <ModBUS+0x1bc>
									{
										bytes=div;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba86:	e002      	b.n	800ba8e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800ba8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800ba98:	e00e      	b.n	800bab8 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ba9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800baa0:	b2d1      	uxtb	r1, r2
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	460a      	mov	r2, r1
 800baa8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800baac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baae:	0a1b      	lsrs	r3, r3, #8
 800bab0:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab4:	3b01      	subs	r3, #1
 800bab6:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baba:	2b00      	cmp	r3, #0
 800babc:	dced      	bgt.n	800ba9a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bad4:	3303      	adds	r3, #3
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bae4:	1d9a      	adds	r2, r3, #6
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800baec:	f001 b8d4 	b.w	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2281      	movs	r2, #129	; 0x81
 800bafc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2203      	movs	r2, #3
 800bb0c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb16:	1d9a      	adds	r2, r3, #6
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bb1e:	2302      	movs	r3, #2
 800bb20:	f001 b8ba 	b.w	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2203      	movs	r2, #3
 800bb28:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2281      	movs	r2, #129	; 0x81
 800bb30:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2203      	movs	r2, #3
 800bb40:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb4a:	1d9a      	adds	r2, r3, #6
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bb52:	2303      	movs	r3, #3
 800bb54:	f001 b8a0 	b.w	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2281      	movs	r2, #129	; 0x81
 800bb64:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2203      	movs	r2, #3
 800bb74:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb7e:	1d9a      	adds	r2, r3, #6
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bb86:	2301      	movs	r3, #1
 800bb88:	f001 b886 	b.w	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7c5a      	ldrb	r2, [r3, #17]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	7c1a      	ldrb	r2, [r3, #16]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7bda      	ldrb	r2, [r3, #15]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7b9a      	ldrb	r2, [r3, #14]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7b5a      	ldrb	r2, [r3, #13]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	799b      	ldrb	r3, [r3, #6]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	f040 80e6 	bne.w	800bd98 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	7d5b      	ldrb	r3, [r3, #21]
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bbee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7d9b      	ldrb	r3, [r3, #22]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	4313      	orrs	r3, r2
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7ddb      	ldrb	r3, [r3, #23]
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7e1b      	ldrb	r3, [r3, #24]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d87e      	bhi.n	800bd64 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc74:	4413      	add	r3, r2
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	dc57      	bgt.n	800bd30 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	623b      	str	r3, [r7, #32]
 800bc84:	2300      	movs	r3, #0
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	667b      	str	r3, [r7, #100]	; 0x64
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800bca0:	40d3      	lsrs	r3, r2
 800bca2:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bcaa:	08db      	lsrs	r3, r3, #3
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <ModBUS+0x3fc>
									{
										bytes=div;
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	667b      	str	r3, [r7, #100]	; 0x64
 800bcc6:	e002      	b.n	800bcce <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	3301      	adds	r3, #1
 800bccc:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800bcce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bcd8:	e00e      	b.n	800bcf8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bcda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcdc:	3308      	adds	r3, #8
 800bcde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bce0:	b2d1      	uxtb	r1, r2
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	4413      	add	r3, r2
 800bce6:	460a      	mov	r2, r1
 800bce8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bcec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcee:	0a1b      	lsrs	r3, r3, #8
 800bcf0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800bcf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800bcf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dced      	bgt.n	800bcda <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2202      	movs	r2, #2
 800bd02:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bd14:	3303      	adds	r3, #3
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd24:	1d9a      	adds	r2, r3, #6
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bd2c:	f000 bfb4 	b.w	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2282      	movs	r2, #130	; 0x82
 800bd3c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2203      	movs	r2, #3
 800bd4c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd56:	1d9a      	adds	r2, r3, #6
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bd5e:	2302      	movs	r3, #2
 800bd60:	f000 bf9a 	b.w	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2203      	movs	r2, #3
 800bd68:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2282      	movs	r2, #130	; 0x82
 800bd70:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2203      	movs	r2, #3
 800bd80:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd8a:	1d9a      	adds	r2, r3, #6
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bd92:	2303      	movs	r3, #3
 800bd94:	f000 bf80 	b.w	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2282      	movs	r2, #130	; 0x82
 800bda4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bdbe:	1d9a      	adds	r2, r3, #6
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f000 bf66 	b.w	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7c5a      	ldrb	r2, [r3, #17]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7c1a      	ldrb	r2, [r3, #16]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7bda      	ldrb	r2, [r3, #15]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7b9a      	ldrb	r2, [r3, #14]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7b5a      	ldrb	r2, [r3, #13]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	79db      	ldrb	r3, [r3, #7]
 800be06:	2b01      	cmp	r3, #1
 800be08:	f040 80e2 	bne.w	800bfd0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7d5b      	ldrb	r3, [r3, #21]
 800be10:	b29a      	uxth	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be1e:	021b      	lsls	r3, r3, #8
 800be20:	b29a      	uxth	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be32:	b29a      	uxth	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7d9b      	ldrb	r3, [r3, #22]
 800be44:	b29b      	uxth	r3, r3
 800be46:	4313      	orrs	r3, r2
 800be48:	b29a      	uxth	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	7ddb      	ldrb	r3, [r3, #23]
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	b29a      	uxth	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800be72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be76:	b29a      	uxth	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7e1b      	ldrb	r3, [r3, #24]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	4313      	orrs	r3, r2
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d87a      	bhi.n	800bf9c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800beac:	461a      	mov	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800beb4:	4413      	add	r3, r2
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800bebc:	4293      	cmp	r3, r2
 800bebe:	dc53      	bgt.n	800bf68 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bec0:	e029      	b.n	800bf16 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bec8:	461a      	mov	r2, r3
 800beca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800becc:	4413      	add	r3, r2
 800bece:	005a      	lsls	r2, r3, #1
 800bed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	3309      	adds	r3, #9
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	440a      	add	r2, r1
 800beda:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	4413      	add	r3, r2
 800bee2:	460a      	mov	r2, r1
 800bee4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800beee:	461a      	mov	r2, r3
 800bef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef2:	4413      	add	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800befa:	3305      	adds	r3, #5
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	440a      	add	r2, r1
 800bf02:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	4413      	add	r3, r2
 800bf0a:	460a      	mov	r2, r1
 800bf0c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800bf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf12:	3301      	adds	r3, #1
 800bf14:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf20:	4293      	cmp	r3, r2
 800bf22:	dbce      	blt.n	800bec2 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2203      	movs	r2, #3
 800bf3a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bf4c:	3303      	adds	r3, #3
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bf5c:	1d9a      	adds	r2, r3, #6
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf64:	f000 be98 	b.w	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2283      	movs	r2, #131	; 0x83
 800bf74:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2203      	movs	r2, #3
 800bf84:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bf8e:	1d9a      	adds	r2, r3, #6
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bf96:	2302      	movs	r3, #2
 800bf98:	f000 be7e 	b.w	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2203      	movs	r2, #3
 800bfa0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2283      	movs	r2, #131	; 0x83
 800bfa8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfc2:	1d9a      	adds	r2, r3, #6
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bfca:	2303      	movs	r3, #3
 800bfcc:	f000 be64 	b.w	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2283      	movs	r2, #131	; 0x83
 800bfdc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2203      	movs	r2, #3
 800bfec:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bff6:	1d9a      	adds	r2, r3, #6
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bffe:	2301      	movs	r3, #1
 800c000:	f000 be4a 	b.w	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7c5a      	ldrb	r2, [r3, #17]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7c1a      	ldrb	r2, [r3, #16]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7bda      	ldrb	r2, [r3, #15]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7b9a      	ldrb	r2, [r3, #14]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7b5a      	ldrb	r2, [r3, #13]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c036:	2300      	movs	r3, #0
 800c038:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7a1b      	ldrb	r3, [r3, #8]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	f040 80e2 	bne.w	800c208 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7d5b      	ldrb	r3, [r3, #21]
 800c048:	b29a      	uxth	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c056:	021b      	lsls	r3, r3, #8
 800c058:	b29a      	uxth	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7d9b      	ldrb	r3, [r3, #22]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	4313      	orrs	r3, r2
 800c080:	b29a      	uxth	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7ddb      	ldrb	r3, [r3, #23]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c0aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7e1b      	ldrb	r3, [r3, #24]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d87a      	bhi.n	800c1d4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c0ec:	4413      	add	r3, r2
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	dc53      	bgt.n	800c1a0 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c0f8:	e029      	b.n	800c14e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c100:	461a      	mov	r2, r3
 800c102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c104:	4413      	add	r3, r2
 800c106:	005a      	lsls	r2, r3, #1
 800c108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	3309      	adds	r3, #9
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	440a      	add	r2, r1
 800c112:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	4413      	add	r3, r2
 800c11a:	460a      	mov	r2, r1
 800c11c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c126:	461a      	mov	r2, r3
 800c128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c12a:	4413      	add	r3, r2
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c132:	3305      	adds	r3, #5
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	440a      	add	r2, r1
 800c13a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4413      	add	r3, r2
 800c142:	460a      	mov	r2, r1
 800c144:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800c148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c14a:	3301      	adds	r3, #1
 800c14c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c154:	461a      	mov	r2, r3
 800c156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c158:	4293      	cmp	r3, r2
 800c15a:	dbce      	blt.n	800c0fa <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c162:	b2db      	uxtb	r3, r3
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2204      	movs	r2, #4
 800c172:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c184:	3303      	adds	r3, #3
 800c186:	b2da      	uxtb	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c194:	1d9a      	adds	r2, r3, #6
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c19c:	f000 bd7c 	b.w	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2284      	movs	r2, #132	; 0x84
 800c1ac:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1c6:	1d9a      	adds	r2, r3, #6
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	f000 bd62 	b.w	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2203      	movs	r2, #3
 800c1d8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2284      	movs	r2, #132	; 0x84
 800c1e0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1fa:	1d9a      	adds	r2, r3, #6
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c202:	2303      	movs	r3, #3
 800c204:	f000 bd48 	b.w	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2284      	movs	r2, #132	; 0x84
 800c214:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2203      	movs	r2, #3
 800c224:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c22e:	1d9a      	adds	r2, r3, #6
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c236:	2301      	movs	r3, #1
 800c238:	f000 bd2e 	b.w	800cc98 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7c5a      	ldrb	r2, [r3, #17]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	7c1a      	ldrb	r2, [r3, #16]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7bda      	ldrb	r2, [r3, #15]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7b9a      	ldrb	r2, [r3, #14]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7b5a      	ldrb	r2, [r3, #13]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800c26e:	2300      	movs	r3, #0
 800c270:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	7a5b      	ldrb	r3, [r3, #9]
 800c276:	2b01      	cmp	r3, #1
 800c278:	f040 80d1 	bne.w	800c41e <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	7d5b      	ldrb	r3, [r3, #21]
 800c280:	b29a      	uxth	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c28e:	021b      	lsls	r3, r3, #8
 800c290:	b29a      	uxth	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c29e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7d9b      	ldrb	r3, [r3, #22]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7ddb      	ldrb	r3, [r3, #23]
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c2e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7e1b      	ldrb	r3, [r3, #24]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c30a:	461a      	mov	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c312:	429a      	cmp	r2, r3
 800c314:	dd69      	ble.n	800c3ea <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <ModBUS+0xa60>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c326:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c32a:	d144      	bne.n	800c3b6 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c332:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c336:	d10d      	bne.n	800c354 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800c344:	4611      	mov	r1, r2
 800c346:	2201      	movs	r2, #1
 800c348:	408a      	lsls	r2, r1
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c352:	e003      	b.n	800c35c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7e1a      	ldrb	r2, [r3, #24]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7dda      	ldrb	r2, [r3, #23]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7d9a      	ldrb	r2, [r3, #22]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	7d5a      	ldrb	r2, [r3, #21]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2205      	movs	r2, #5
 800c388:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c39a:	3306      	adds	r3, #6
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3aa:	1d9a      	adds	r2, r3, #6
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c3b2:	f000 bc71 	b.w	800cc98 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2285      	movs	r2, #133	; 0x85
 800c3c2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3dc:	1d9a      	adds	r2, r3, #6
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	f000 bc57 	b.w	800cc98 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2203      	movs	r2, #3
 800c3ee:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2285      	movs	r2, #133	; 0x85
 800c3f6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2203      	movs	r2, #3
 800c406:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c410:	1d9a      	adds	r2, r3, #6
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800c418:	2303      	movs	r3, #3
 800c41a:	f000 bc3d 	b.w	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2285      	movs	r2, #133	; 0x85
 800c42a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2203      	movs	r2, #3
 800c43a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c444:	1d9a      	adds	r2, r3, #6
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800c44c:	2301      	movs	r3, #1
 800c44e:	f000 bc23 	b.w	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7c5a      	ldrb	r2, [r3, #17]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7c1a      	ldrb	r2, [r3, #16]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7bda      	ldrb	r2, [r3, #15]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7b9a      	ldrb	r2, [r3, #14]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7b5a      	ldrb	r2, [r3, #13]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c484:	2300      	movs	r3, #0
 800c486:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c488:	2300      	movs	r3, #0
 800c48a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	7a9b      	ldrb	r3, [r3, #10]
 800c490:	2b01      	cmp	r3, #1
 800c492:	f040 80a3 	bne.w	800c5dc <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7d5b      	ldrb	r3, [r3, #21]
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4a8:	021b      	lsls	r3, r3, #8
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7d9b      	ldrb	r3, [r3, #22]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4e0:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7ddb      	ldrb	r3, [r3, #23]
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c504:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c508:	b29a      	uxth	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7e1b      	ldrb	r3, [r3, #24]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4313      	orrs	r3, r2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800c532:	b29b      	uxth	r3, r3
 800c534:	429a      	cmp	r2, r3
 800c536:	d838      	bhi.n	800c5aa <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	7dd1      	ldrb	r1, [r2, #23]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4413      	add	r3, r2
 800c542:	460a      	mov	r2, r1
 800c544:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c54a:	3301      	adds	r3, #1
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	7e11      	ldrb	r1, [r2, #24]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	4413      	add	r3, r2
 800c554:	460a      	mov	r2, r1
 800c556:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7e1a      	ldrb	r2, [r3, #24]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7dda      	ldrb	r2, [r3, #23]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7d9a      	ldrb	r2, [r3, #22]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7d5a      	ldrb	r2, [r3, #21]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2206      	movs	r2, #6
 800c586:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2206      	movs	r2, #6
 800c596:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5a0:	1d9a      	adds	r2, r3, #6
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c5a8:	e376      	b.n	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2286      	movs	r2, #134	; 0x86
 800c5b6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2203      	movs	r2, #3
 800c5c6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5d0:	1d9a      	adds	r2, r3, #6
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e35d      	b.n	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2286      	movs	r2, #134	; 0x86
 800c5e8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c602:	1d9a      	adds	r2, r3, #6
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c60a:	2301      	movs	r3, #1
 800c60c:	e344      	b.n	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7c5a      	ldrb	r2, [r3, #17]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7c1a      	ldrb	r2, [r3, #16]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7bda      	ldrb	r2, [r3, #15]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7b9a      	ldrb	r2, [r3, #14]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	7b5a      	ldrb	r2, [r3, #13]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c640:	2300      	movs	r3, #0
 800c642:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7adb      	ldrb	r3, [r3, #11]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	f040 810f 	bne.w	800c86c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7d5b      	ldrb	r3, [r3, #21]
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b29a      	uxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c670:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c674:	b29a      	uxth	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7d9b      	ldrb	r3, [r3, #22]
 800c686:	b29b      	uxth	r3, r3
 800c688:	4313      	orrs	r3, r2
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7ddb      	ldrb	r3, [r3, #23]
 800c696:	b29a      	uxth	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	7e1b      	ldrb	r3, [r3, #24]
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	f200 80a8 	bhi.w	800c83a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6f8:	4413      	add	r3, r2
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800c700:	4293      	cmp	r3, r2
 800c702:	f300 8081 	bgt.w	800c808 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800c706:	2300      	movs	r3, #0
 800c708:	657b      	str	r3, [r7, #84]	; 0x54
 800c70a:	2300      	movs	r3, #0
 800c70c:	653b      	str	r3, [r7, #80]	; 0x50
 800c70e:	2300      	movs	r3, #0
 800c710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c712:	2300      	movs	r3, #0
 800c714:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7e5b      	ldrb	r3, [r3, #25]
 800c71a:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800c71c:	e00e      	b.n	800c73c <ModBUS+0xe70>
									{
										data=data<<8;
 800c71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800c724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c726:	330c      	adds	r3, #12
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	4413      	add	r3, r2
 800c72c:	7b5b      	ldrb	r3, [r3, #13]
 800c72e:	461a      	mov	r2, r3
 800c730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c732:	4313      	orrs	r3, r2
 800c734:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800c736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c738:	3b01      	subs	r3, #1
 800c73a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800c73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1ed      	bne.n	800c71e <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c748:	461a      	mov	r2, r3
 800c74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c74c:	4093      	lsls	r3, r2
 800c74e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c750:	e00f      	b.n	800c772 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c758:	461a      	mov	r2, r3
 800c75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75c:	4413      	add	r3, r2
 800c75e:	2201      	movs	r2, #1
 800c760:	fa02 f303 	lsl.w	r3, r2, r3
 800c764:	461a      	mov	r2, r3
 800c766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c768:	4313      	orrs	r3, r2
 800c76a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800c76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76e:	3301      	adds	r3, #1
 800c770:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c778:	461a      	mov	r2, r3
 800c77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d3e8      	bcc.n	800c752 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800c780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c782:	43db      	mvns	r3, r3
 800c784:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c78e:	401a      	ands	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800c796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c798:	43db      	mvns	r3, r3
 800c79a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c79c:	4013      	ands	r3, r2
 800c79e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7e1a      	ldrb	r2, [r3, #24]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7dda      	ldrb	r2, [r3, #23]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7d9a      	ldrb	r2, [r3, #22]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	7d5a      	ldrb	r2, [r3, #21]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	220f      	movs	r2, #15
 800c7dc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c7ee:	3306      	adds	r3, #6
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c7fe:	1d9a      	adds	r2, r3, #6
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c806:	e247      	b.n	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	228f      	movs	r2, #143	; 0x8f
 800c814:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2203      	movs	r2, #3
 800c824:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c82e:	1d9a      	adds	r2, r3, #6
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c836:	2302      	movs	r3, #2
 800c838:	e22e      	b.n	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2203      	movs	r2, #3
 800c83e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	228f      	movs	r2, #143	; 0x8f
 800c846:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2203      	movs	r2, #3
 800c856:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c860:	1d9a      	adds	r2, r3, #6
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c868:	2303      	movs	r3, #3
 800c86a:	e215      	b.n	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	228f      	movs	r2, #143	; 0x8f
 800c878:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2203      	movs	r2, #3
 800c888:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c892:	1d9a      	adds	r2, r3, #6
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c89a:	2301      	movs	r3, #1
 800c89c:	e1fc      	b.n	800cc98 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	7c5a      	ldrb	r2, [r3, #17]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7c1a      	ldrb	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	7bda      	ldrb	r2, [r3, #15]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	7b9a      	ldrb	r2, [r3, #14]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7b5a      	ldrb	r2, [r3, #13]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7b1b      	ldrb	r3, [r3, #12]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	f040 80eb 	bne.w	800caba <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7d5b      	ldrb	r3, [r3, #21]
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c8f6:	021b      	lsls	r3, r3, #8
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7d9b      	ldrb	r3, [r3, #22]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4313      	orrs	r3, r2
 800c920:	b29a      	uxth	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7ddb      	ldrb	r3, [r3, #23]
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c954:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7e1b      	ldrb	r3, [r3, #24]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4313      	orrs	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800c982:	b29b      	uxth	r3, r3
 800c984:	429a      	cmp	r2, r3
 800c986:	d87f      	bhi.n	800ca88 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c996:	4413      	add	r3, r2
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	dc59      	bgt.n	800ca56 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800c9a2:	e029      	b.n	800c9f8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c9a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9a8:	f103 020d 	add.w	r2, r3, #13
 800c9ac:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c9ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9b2:	440b      	add	r3, r1
 800c9b4:	6879      	ldr	r1, [r7, #4]
 800c9b6:	440a      	add	r2, r1
 800c9b8:	7b51      	ldrb	r1, [r2, #13]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	4413      	add	r3, r2
 800c9be:	460a      	mov	r2, r1
 800c9c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800c9c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c9ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9d2:	f103 020d 	add.w	r2, r3, #13
 800c9d6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c9d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9dc:	440b      	add	r3, r1
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	440a      	add	r2, r1
 800c9e2:	7b51      	ldrb	r1, [r2, #13]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	460a      	mov	r2, r1
 800c9ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800c9ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7e5b      	ldrb	r3, [r3, #25]
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d3ce      	bcc.n	800c9a4 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	7e1a      	ldrb	r2, [r3, #24]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7dda      	ldrb	r2, [r3, #23]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7d9a      	ldrb	r2, [r3, #22]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7d5a      	ldrb	r2, [r3, #21]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2210      	movs	r2, #16
 800ca32:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2206      	movs	r2, #6
 800ca42:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca4c:	1d9a      	adds	r2, r3, #6
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca54:	e120      	b.n	800cc98 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2202      	movs	r2, #2
 800ca5a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2290      	movs	r2, #144	; 0x90
 800ca62:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2203      	movs	r2, #3
 800ca72:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca7c:	1d9a      	adds	r2, r3, #6
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800ca84:	2302      	movs	r3, #2
 800ca86:	e107      	b.n	800cc98 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2290      	movs	r2, #144	; 0x90
 800ca94:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2203      	movs	r2, #3
 800caa4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800caae:	1d9a      	adds	r2, r3, #6
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cab6:	2303      	movs	r3, #3
 800cab8:	e0ee      	b.n	800cc98 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2290      	movs	r2, #144	; 0x90
 800cac6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2203      	movs	r2, #3
 800cad6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cae0:	1d9a      	adds	r2, r3, #6
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cae8:	2301      	movs	r3, #1
 800caea:	e0d5      	b.n	800cc98 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7d1b      	ldrb	r3, [r3, #20]
 800caf8:	3b80      	subs	r3, #128	; 0x80
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7cda      	ldrb	r2, [r3, #19]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2203      	movs	r2, #3
 800cb10:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7c5a      	ldrb	r2, [r3, #17]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7c1a      	ldrb	r2, [r3, #16]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7bda      	ldrb	r2, [r3, #15]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7b9a      	ldrb	r2, [r3, #14]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	7b5a      	ldrb	r2, [r3, #13]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb4c:	1d9a      	adds	r2, r3, #6
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800cb54:	2301      	movs	r3, #1
 800cb56:	e09f      	b.n	800cc98 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e09d      	b.n	800cc98 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8099 	bne.w	800cc98 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f103 020d 	add.w	r2, r3, #13
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7fe fda7 	bl	800b6c8 <ModBUS_Check>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 808b 	beq.w	800cc98 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7fe fdbf 	bl	800b706 <ModBUS_Check_tid>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d04f      	beq.n	800cc2e <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	7d1b      	ldrb	r3, [r3, #20]
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d143      	bne.n	800cc1e <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cba6:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800cba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbaa:	021b      	lsls	r3, r3, #8
 800cbac:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800cbc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	643b      	str	r3, [r7, #64]	; 0x40
 800cbca:	e022      	b.n	800cc12 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800cbcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	f103 0209 	add.w	r2, r3, #9
 800cbd4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd8:	440b      	add	r3, r1
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	440a      	add	r2, r1
 800cbe0:	7b51      	ldrb	r1, [r2, #13]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	460a      	mov	r2, r1
 800cbe8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cbec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbee:	3305      	adds	r3, #5
 800cbf0:	005a      	lsls	r2, r3, #1
 800cbf2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf6:	440b      	add	r3, r1
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	440a      	add	r2, r1
 800cc00:	7b51      	ldrb	r1, [r2, #13]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	460a      	mov	r2, r1
 800cc08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800cc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc0e:	3301      	adds	r3, #1
 800cc10:	643b      	str	r3, [r7, #64]	; 0x40
 800cc12:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cc16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	dbd7      	blt.n	800cbcc <ModBUS+0x1300>

						}


					}
					break;
 800cc1c:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7c9b      	ldrb	r3, [r3, #18]
 800cc22:	461a      	mov	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7d5b      	ldrb	r3, [r3, #21]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc2c:	e034      	b.n	800cc98 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	7d1b      	ldrb	r3, [r3, #20]
 800cc32:	3b81      	subs	r3, #129	; 0x81
 800cc34:	2b15      	cmp	r3, #21
 800cc36:	d82f      	bhi.n	800cc98 <ModBUS+0x13cc>
 800cc38:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <ModBUS+0x1374>)
 800cc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3e:	bf00      	nop
 800cc40:	0800cc99 	.word	0x0800cc99
 800cc44:	0800cc99 	.word	0x0800cc99
 800cc48:	0800cc99 	.word	0x0800cc99
 800cc4c:	0800cc99 	.word	0x0800cc99
 800cc50:	0800cc99 	.word	0x0800cc99
 800cc54:	0800cc99 	.word	0x0800cc99
 800cc58:	0800cc99 	.word	0x0800cc99
 800cc5c:	0800cc99 	.word	0x0800cc99
 800cc60:	0800cc99 	.word	0x0800cc99
 800cc64:	0800cc99 	.word	0x0800cc99
 800cc68:	0800cc99 	.word	0x0800cc99
 800cc6c:	0800cc99 	.word	0x0800cc99
 800cc70:	0800cc99 	.word	0x0800cc99
 800cc74:	0800cc99 	.word	0x0800cc99
 800cc78:	0800cc99 	.word	0x0800cc99
 800cc7c:	0800cc99 	.word	0x0800cc99
 800cc80:	0800cc99 	.word	0x0800cc99
 800cc84:	0800cc99 	.word	0x0800cc99
 800cc88:	0800cc99 	.word	0x0800cc99
 800cc8c:	0800cc99 	.word	0x0800cc99
 800cc90:	0800cc99 	.word	0x0800cc99
 800cc94:	0800cc99 	.word	0x0800cc99
			}
		}
	}


}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3770      	adds	r7, #112	; 0x70
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6858      	ldr	r0, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	891b      	ldrh	r3, [r3, #8]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	f7f6 f860 	bl	8002d78 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f103 0114 	add.w	r1, r3, #20
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f103 0218 	add.w	r2, r3, #24
 800ccc8:	2364      	movs	r3, #100	; 0x64
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	2304      	movs	r3, #4
 800ccce:	f7f6 fd68 	bl	80037a2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6858      	ldr	r0, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	891b      	ldrh	r3, [r3, #8]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f7f6 f84b 	bl	8002d78 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	7edb      	ldrb	r3, [r3, #27]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b086      	sub	sp, #24
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	4608      	mov	r0, r1
 800ccf8:	4611      	mov	r1, r2
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	70fb      	strb	r3, [r7, #3]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70bb      	strb	r3, [r7, #2]
 800cd04:	4613      	mov	r3, r2
 800cd06:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	787a      	ldrb	r2, [r7, #1]
 800cd10:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	78fa      	ldrb	r2, [r7, #3]
 800cd16:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	78ba      	ldrb	r2, [r7, #2]
 800cd1c:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800cd24:	787b      	ldrb	r3, [r7, #1]
 800cd26:	2bf0      	cmp	r3, #240	; 0xf0
 800cd28:	d11d      	bne.n	800cd66 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	613b      	str	r3, [r7, #16]
 800cd2e:	e013      	b.n	800cd58 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	6a3a      	ldr	r2, [r7, #32]
 800cd34:	4413      	add	r3, r2
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff ffaf 	bl	800cca0 <SPI_ETH>
 800cd42:	4603      	mov	r3, r0
 800cd44:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	7d9b      	ldrb	r3, [r3, #22]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	3301      	adds	r3, #1
 800cd56:	613b      	str	r3, [r7, #16]
 800cd58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd5c:	693a      	ldr	r2, [r7, #16]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	dbe6      	blt.n	800cd30 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800cd62:	8afb      	ldrh	r3, [r7, #22]
 800cd64:	e037      	b.n	800cdd6 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800cd66:	787b      	ldrb	r3, [r7, #1]
 800cd68:	2b0f      	cmp	r3, #15
 800cd6a:	d134      	bne.n	800cdd6 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800cd72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d120      	bne.n	800cdbc <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	e016      	b.n	800cdae <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff ff8d 	bl	800cca0 <SPI_ETH>
 800cd86:	4603      	mov	r3, r0
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	8afb      	ldrh	r3, [r7, #22]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7d9b      	ldrb	r3, [r3, #22]
 800cd94:	3301      	adds	r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <SPI_ETH_REG+0xba>
 800cda2:	8afb      	ldrh	r3, [r7, #22]
 800cda4:	021b      	lsls	r3, r3, #8
 800cda6:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	60fb      	str	r3, [r7, #12]
 800cdae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	dbe3      	blt.n	800cd80 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800cdb8:	8afb      	ldrh	r3, [r7, #22]
 800cdba:	e00c      	b.n	800cdd6 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff ff6f 	bl	800cca0 <SPI_ETH>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7d9b      	ldrb	r3, [r3, #22]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	759a      	strb	r2, [r3, #22]
			return(res);
 800cdd2:	8afb      	ldrh	r3, [r7, #22]
 800cdd4:	e7ff      	b.n	800cdd6 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b086      	sub	sp, #24
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	807b      	strh	r3, [r7, #2]
 800cdea:	4613      	mov	r3, r2
 800cdec:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	22f0      	movs	r2, #240	; 0xf0
 800cdf6:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800cdf8:	883b      	ldrh	r3, [r7, #0]
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800cdfe:	883b      	ldrh	r3, [r7, #0]
 800ce00:	0a1b      	lsrs	r3, r3, #8
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800ce08:	2300      	movs	r3, #0
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	e01b      	b.n	800ce46 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800ce0e:	887b      	ldrh	r3, [r7, #2]
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800ce16:	887b      	ldrh	r3, [r7, #2]
 800ce18:	0a1b      	lsrs	r3, r3, #8
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	755a      	strb	r2, [r3, #21]
		addr++;
 800ce22:	887b      	ldrh	r3, [r7, #2]
 800ce24:	3301      	adds	r3, #1
 800ce26:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800ce28:	f107 020c 	add.w	r2, r7, #12
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	4413      	add	r3, r2
 800ce30:	781a      	ldrb	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7ff ff32 	bl	800cca0 <SPI_ETH>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	3301      	adds	r3, #1
 800ce44:	613b      	str	r3, [r7, #16]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	dde0      	ble.n	800ce0e <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800ce4c:	8afb      	ldrh	r3, [r7, #22]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800ce56:	b590      	push	{r4, r7, lr}
 800ce58:	b087      	sub	sp, #28
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	461a      	mov	r2, r3
 800ce62:	460b      	mov	r3, r1
 800ce64:	817b      	strh	r3, [r7, #10]
 800ce66:	4613      	mov	r3, r2
 800ce68:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	220f      	movs	r2, #15
 800ce6e:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800ce70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce76:	d226      	bcs.n	800cec6 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800ce7e:	2300      	movs	r3, #0
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e01a      	b.n	800ceba <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800ce84:	897b      	ldrh	r3, [r7, #10]
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800ce8c:	897b      	ldrh	r3, [r7, #10]
 800ce8e:	0a1b      	lsrs	r3, r3, #8
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800ce98:	893a      	ldrh	r2, [r7, #8]
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	189c      	adds	r4, r3, r2
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fefb 	bl	800cca0 <SPI_ETH>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	7023      	strb	r3, [r4, #0]
				addr++;
 800ceae:	897b      	ldrh	r3, [r7, #10]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	617b      	str	r3, [r7, #20]
 800ceba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	dbe0      	blt.n	800ce84 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cec2:	2300      	movs	r3, #0
 800cec4:	e000      	b.n	800cec8 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800cec6:	2301      	movs	r3, #1
	}
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	371c      	adds	r7, #28
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	607a      	str	r2, [r7, #4]
 800ceda:	461a      	mov	r2, r3
 800cedc:	460b      	mov	r3, r1
 800cede:	817b      	strh	r3, [r7, #10]
 800cee0:	4613      	mov	r3, r2
 800cee2:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	22f0      	movs	r2, #240	; 0xf0
 800cee8:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800ceea:	8c3b      	ldrh	r3, [r7, #32]
 800ceec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cef0:	d223      	bcs.n	800cf3a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	e01a      	b.n	800cf2e <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800cef8:	897b      	ldrh	r3, [r7, #10]
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800cf00:	897b      	ldrh	r3, [r7, #10]
 800cf02:	0a1b      	lsrs	r3, r3, #8
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800cf0c:	893a      	ldrh	r2, [r7, #8]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	4413      	add	r3, r2
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	4413      	add	r3, r2
 800cf16:	7f1a      	ldrb	r2, [r3, #28]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff febf 	bl	800cca0 <SPI_ETH>
				addr++;
 800cf22:	897b      	ldrh	r3, [r7, #10]
 800cf24:	3301      	adds	r3, #1
 800cf26:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	8c3b      	ldrh	r3, [r7, #32]
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	dbe0      	blt.n	800cef8 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cf36:	2300      	movs	r3, #0
 800cf38:	e000      	b.n	800cf3c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800cf3a:	2301      	movs	r3, #1
	}
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
 800cf50:	4613      	mov	r3, r2
 800cf52:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	22f0      	movs	r2, #240	; 0xf0
 800cf58:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800cf5a:	78fb      	ldrb	r3, [r7, #3]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	78ba      	ldrb	r2, [r7, #2]
 800cf6e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff fe95 	bl	800cca0 <SPI_ETH>
}
 800cf76:	bf00      	nop
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	22f0      	movs	r2, #240	; 0xf0
 800cf94:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800cf96:	78fb      	ldrb	r3, [r7, #3]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	78ba      	ldrb	r2, [r7, #2]
 800cfaa:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7ff fe77 	bl	800cca0 <SPI_ETH>
}
 800cfb2:	bf00      	nop
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af02      	add	r7, sp, #8
 800cfc2:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfca:	331c      	adds	r3, #28
 800cfcc:	2204      	movs	r2, #4
 800cfce:	9201      	str	r2, [sp, #4]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	23f0      	movs	r3, #240	; 0xf0
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff fe88 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800cfde:	2119      	movs	r1, #25
 800cfe0:	482d      	ldr	r0, [pc, #180]	; (800d098 <eth_init+0xdc>)
 800cfe2:	f7f4 f883 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfec:	2204      	movs	r2, #4
 800cfee:	9201      	str	r2, [sp, #4]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	23f0      	movs	r3, #240	; 0xf0
 800cff4:	2205      	movs	r2, #5
 800cff6:	2100      	movs	r1, #0
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7ff fe78 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800cffe:	2116      	movs	r1, #22
 800d000:	4826      	ldr	r0, [pc, #152]	; (800d09c <eth_init+0xe0>)
 800d002:	f7f4 f873 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d00c:	3304      	adds	r3, #4
 800d00e:	2206      	movs	r2, #6
 800d010:	9201      	str	r2, [sp, #4]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	23f0      	movs	r3, #240	; 0xf0
 800d016:	2209      	movs	r2, #9
 800d018:	2100      	movs	r1, #0
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7ff fe67 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800d020:	2113      	movs	r1, #19
 800d022:	481f      	ldr	r0, [pc, #124]	; (800d0a0 <eth_init+0xe4>)
 800d024:	f7f4 f862 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d02e:	330a      	adds	r3, #10
 800d030:	2204      	movs	r2, #4
 800d032:	9201      	str	r2, [sp, #4]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	23f0      	movs	r3, #240	; 0xf0
 800d038:	220f      	movs	r2, #15
 800d03a:	2100      	movs	r1, #0
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7ff fe56 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800d042:	2112      	movs	r1, #18
 800d044:	4817      	ldr	r0, [pc, #92]	; (800d0a4 <eth_init+0xe8>)
 800d046:	f7f4 f851 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d050:	330e      	adds	r3, #14
 800d052:	2201      	movs	r2, #1
 800d054:	9201      	str	r2, [sp, #4]
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	23f0      	movs	r3, #240	; 0xf0
 800d05a:	221a      	movs	r2, #26
 800d05c:	2100      	movs	r1, #0
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff fe45 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800d064:	2128      	movs	r1, #40	; 0x28
 800d066:	4810      	ldr	r0, [pc, #64]	; (800d0a8 <eth_init+0xec>)
 800d068:	f7f4 f840 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d072:	330f      	adds	r3, #15
 800d074:	2201      	movs	r2, #1
 800d076:	9201      	str	r2, [sp, #4]
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	23f0      	movs	r3, #240	; 0xf0
 800d07c:	221b      	movs	r2, #27
 800d07e:	2100      	movs	r1, #0
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff fe34 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800d086:	2128      	movs	r1, #40	; 0x28
 800d088:	4808      	ldr	r0, [pc, #32]	; (800d0ac <eth_init+0xf0>)
 800d08a:	f7f4 f82f 	bl	80010ec <ITM0_Write>

}
 800d08e:	bf00      	nop
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	0800f908 	.word	0x0800f908
 800d09c:	0800f924 	.word	0x0800f924
 800d0a0:	0800f940 	.word	0x0800f940
 800d0a4:	0800f958 	.word	0x0800f958
 800d0a8:	0800f970 	.word	0x0800f970
 800d0ac:	0800f99c 	.word	0x0800f99c

0800d0b0 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af02      	add	r7, sp, #8
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff ff5c 	bl	800cf80 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800d0c8:	2119      	movs	r1, #25
 800d0ca:	4830      	ldr	r0, [pc, #192]	; (800d18c <eth_socket_init+0xdc>)
 800d0cc:	f7f4 f80e 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d0d6:	331a      	adds	r3, #26
 800d0d8:	2202      	movs	r2, #2
 800d0da:	9201      	str	r2, [sp, #4]
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	23f0      	movs	r3, #240	; 0xf0
 800d0e0:	2204      	movs	r2, #4
 800d0e2:	2104      	movs	r1, #4
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff fe02 	bl	800ccee <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d0ea:	212c      	movs	r1, #44	; 0x2c
 800d0ec:	4828      	ldr	r0, [pc, #160]	; (800d190 <eth_socket_init+0xe0>)
 800d0ee:	f7f3 fffd 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d0f8:	331c      	adds	r3, #28
 800d0fa:	2204      	movs	r2, #4
 800d0fc:	9201      	str	r2, [sp, #4]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	23f0      	movs	r3, #240	; 0xf0
 800d102:	220c      	movs	r2, #12
 800d104:	2104      	movs	r1, #4
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff fdf1 	bl	800ccee <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800d10c:	212e      	movs	r1, #46	; 0x2e
 800d10e:	4821      	ldr	r0, [pc, #132]	; (800d194 <eth_socket_init+0xe4>)
 800d110:	f7f3 ffec 	bl	80010ec <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d11a:	2202      	movs	r2, #2
 800d11c:	9201      	str	r2, [sp, #4]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	23f0      	movs	r3, #240	; 0xf0
 800d122:	2210      	movs	r2, #16
 800d124:	2104      	movs	r1, #4
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff fde1 	bl	800ccee <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800d12c:	2120      	movs	r1, #32
 800d12e:	481a      	ldr	r0, [pc, #104]	; (800d198 <eth_socket_init+0xe8>)
 800d130:	f7f3 ffdc 	bl	80010ec <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d134:	78fb      	ldrb	r3, [r7, #3]
 800d136:	2201      	movs	r2, #1
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ff02 	bl	800cf44 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800d140:	2119      	movs	r1, #25
 800d142:	4816      	ldr	r0, [pc, #88]	; (800d19c <eth_socket_init+0xec>)
 800d144:	f7f3 ffd2 	bl	80010ec <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d152:	2b01      	cmp	r3, #1
 800d154:	d10a      	bne.n	800d16c <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	2202      	movs	r2, #2
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff fef1 	bl	800cf44 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800d162:	211b      	movs	r1, #27
 800d164:	480e      	ldr	r0, [pc, #56]	; (800d1a0 <eth_socket_init+0xf0>)
 800d166:	f7f3 ffc1 	bl	80010ec <ITM0_Write>
 800d16a:	e009      	b.n	800d180 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	2204      	movs	r2, #4
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7ff fee6 	bl	800cf44 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d178:	2115      	movs	r1, #21
 800d17a:	480a      	ldr	r0, [pc, #40]	; (800d1a4 <eth_socket_init+0xf4>)
 800d17c:	f7f3 ffb6 	bl	80010ec <ITM0_Write>
	 }
}
 800d180:	bf00      	nop
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	0800f9c8 	.word	0x0800f9c8
 800d190:	0800f9e4 	.word	0x0800f9e4
 800d194:	0800fa14 	.word	0x0800fa14
 800d198:	0800fa44 	.word	0x0800fa44
 800d19c:	0800fa68 	.word	0x0800fa68
 800d1a0:	0800fa84 	.word	0x0800fa84
 800d1a4:	0800faa0 	.word	0x0800faa0

0800d1a8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	220f      	movs	r2, #15
 800d1b8:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	3304      	adds	r3, #4
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fd65 	bl	800cca0 <SPI_ETH>
	return(y->RX[3]);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7edb      	ldrb	r3, [r3, #27]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	220f      	movs	r2, #15
 800d1f2:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800d1f4:	78fb      	ldrb	r3, [r7, #3]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff fd48 	bl	800cca0 <SPI_ETH>
	return(y->RX[3]);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7edb      	ldrb	r3, [r3, #27]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08c      	sub	sp, #48	; 0x30
 800d220:	af02      	add	r7, sp, #8
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	461a      	mov	r2, r3
 800d228:	460b      	mov	r3, r1
 800d22a:	72fb      	strb	r3, [r7, #11]
 800d22c:	4613      	mov	r3, r2
 800d22e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d230:	2300      	movs	r3, #0
 800d232:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800d234:	2300      	movs	r3, #0
 800d236:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800d238:	2300      	movs	r3, #0
 800d23a:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800d23c:	2300      	movs	r3, #0
 800d23e:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800d240:	2300      	movs	r3, #0
 800d242:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800d244:	2300      	movs	r3, #0
 800d246:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800d248:	2300      	movs	r3, #0
 800d24a:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800d24c:	2300      	movs	r3, #0
 800d24e:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800d250:	2300      	movs	r3, #0
 800d252:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800d254:	2300      	movs	r3, #0
 800d256:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d83e      	bhi.n	800d2dc <eth_rd_SOCKET_DATA+0xc0>
 800d25e:	a201      	add	r2, pc, #4	; (adr r2, 800d264 <eth_rd_SOCKET_DATA+0x48>)
 800d260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d264:	0800d275 	.word	0x0800d275
 800d268:	0800d28f 	.word	0x0800d28f
 800d26c:	0800d2a9 	.word	0x0800d2a9
 800d270:	0800d2c3 	.word	0x0800d2c3
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d27a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d27e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d28a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d28c:	e033      	b.n	800d2f6 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d294:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d298:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d2a6:	e026      	b.n	800d2f6 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d2be:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d2c0:	e019      	b.n	800d2f6 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d2cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d2da:	e00c      	b.n	800d2f6 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2e6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800d2f4:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d2f6:	7afb      	ldrb	r3, [r7, #11]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	b2d9      	uxtb	r1, r3
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	f107 0310 	add.w	r3, r7, #16
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	230f      	movs	r3, #15
 800d308:	2228      	movs	r2, #40	; 0x28
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	f7ff fcef 	bl	800ccee <SPI_ETH_REG>
 800d310:	4603      	mov	r3, r0
 800d312:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800d314:	8b7a      	ldrh	r2, [r7, #26]
 800d316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d318:	4013      	ands	r3, r2
 800d31a:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800d31c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d31e:	8b3b      	ldrh	r3, [r7, #24]
 800d320:	4413      	add	r3, r2
 800d322:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800d324:	8b3a      	ldrh	r2, [r7, #24]
 800d326:	893b      	ldrh	r3, [r7, #8]
 800d328:	441a      	add	r2, r3
 800d32a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d32c:	3301      	adds	r3, #1
 800d32e:	429a      	cmp	r2, r3
 800d330:	dd2c      	ble.n	800d38c <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800d332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d334:	8b3b      	ldrh	r3, [r7, #24]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	b29b      	uxth	r3, r3
 800d33a:	3301      	adds	r3, #1
 800d33c:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f103 021c 	add.w	r2, r3, #28
 800d344:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d346:	8af9      	ldrh	r1, [r7, #22]
 800d348:	8bfb      	ldrh	r3, [r7, #30]
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	4603      	mov	r3, r0
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff fd81 	bl	800ce56 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d354:	8bba      	ldrh	r2, [r7, #28]
 800d356:	8bfb      	ldrh	r3, [r7, #30]
 800d358:	4413      	add	r3, r2
 800d35a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800d35c:	893a      	ldrh	r2, [r7, #8]
 800d35e:	8bfb      	ldrh	r3, [r7, #30]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800d364:	8bfb      	ldrh	r3, [r7, #30]
 800d366:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f103 021c 	add.w	r2, r3, #28
 800d36e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d370:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d372:	8c3b      	ldrh	r3, [r7, #32]
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	4603      	mov	r3, r0
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f7ff fd6c 	bl	800ce56 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800d37e:	8b7a      	ldrh	r2, [r7, #26]
 800d380:	893b      	ldrh	r3, [r7, #8]
 800d382:	4413      	add	r3, r2
 800d384:	b29a      	uxth	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	801a      	strh	r2, [r3, #0]
 800d38a:	e010      	b.n	800d3ae <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f103 021c 	add.w	r2, r3, #28
 800d392:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800d394:	8af9      	ldrh	r1, [r7, #22]
 800d396:	893b      	ldrh	r3, [r7, #8]
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	4603      	mov	r3, r0
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7ff fd5a 	bl	800ce56 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800d3a2:	8b7a      	ldrh	r2, [r7, #26]
 800d3a4:	893b      	ldrh	r3, [r7, #8]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	b29b      	uxth	r3, r3
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3728      	adds	r7, #40	; 0x28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop

0800d3bc <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08c      	sub	sp, #48	; 0x30
 800d3c0:	af02      	add	r7, sp, #8
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	72fb      	strb	r3, [r7, #11]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800d3d8:	2300      	movs	r3, #0
 800d3da:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800d3dc:	2300      	movs	r3, #0
 800d3de:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800d3fc:	7afb      	ldrb	r3, [r7, #11]
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d83e      	bhi.n	800d480 <eth_wr_SOCKET_DATA+0xc4>
 800d402:	a201      	add	r2, pc, #4	; (adr r2, 800d408 <eth_wr_SOCKET_DATA+0x4c>)
 800d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d408:	0800d419 	.word	0x0800d419
 800d40c:	0800d433 	.word	0x0800d433
 800d410:	0800d44d 	.word	0x0800d44d
 800d414:	0800d467 	.word	0x0800d467
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d422:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d42a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d42e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d430:	e033      	b.n	800d49a <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d43c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d448:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d44a:	e026      	b.n	800d49a <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d456:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d462:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d464:	e019      	b.n	800d49a <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d46c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d470:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d47c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d47e:	e00c      	b.n	800d49a <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d486:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d48a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d496:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d498:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d49a:	e00e      	b.n	800d4ba <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d49c:	7afb      	ldrb	r3, [r7, #11]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	b2d9      	uxtb	r1, r3
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	9301      	str	r3, [sp, #4]
 800d4a6:	f107 0310 	add.w	r3, r7, #16
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	230f      	movs	r3, #15
 800d4ae:	2220      	movs	r2, #32
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7ff fc1c 	bl	800ccee <SPI_ETH_REG>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d4ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4bc:	893b      	ldrh	r3, [r7, #8]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d3ec      	bcc.n	800d49c <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d4c2:	7afb      	ldrb	r3, [r7, #11]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	b2d9      	uxtb	r1, r3
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	f107 0310 	add.w	r3, r7, #16
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	230f      	movs	r3, #15
 800d4d4:	2224      	movs	r2, #36	; 0x24
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7ff fc09 	bl	800ccee <SPI_ETH_REG>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d4e0:	8b3a      	ldrh	r2, [r7, #24]
 800d4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d4e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d4ea:	8afb      	ldrh	r3, [r7, #22]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d4f0:	8afa      	ldrh	r2, [r7, #22]
 800d4f2:	893b      	ldrh	r3, [r7, #8]
 800d4f4:	441a      	add	r2, r3
 800d4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	dd2c      	ble.n	800d558 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d4fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d500:	8afb      	ldrh	r3, [r7, #22]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	b29b      	uxth	r3, r3
 800d506:	3301      	adds	r3, #1
 800d508:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f103 021c 	add.w	r2, r3, #28
 800d510:	8c38      	ldrh	r0, [r7, #32]
 800d512:	8ab9      	ldrh	r1, [r7, #20]
 800d514:	8bbb      	ldrh	r3, [r7, #28]
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	4603      	mov	r3, r0
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f7ff fcd8 	bl	800ced0 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d520:	8b7a      	ldrh	r2, [r7, #26]
 800d522:	8bbb      	ldrh	r3, [r7, #28]
 800d524:	4413      	add	r3, r2
 800d526:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d528:	893a      	ldrh	r2, [r7, #8]
 800d52a:	8bbb      	ldrh	r3, [r7, #28]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d530:	8bbb      	ldrh	r3, [r7, #28]
 800d532:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f103 021c 	add.w	r2, r3, #28
 800d53a:	8c38      	ldrh	r0, [r7, #32]
 800d53c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d53e:	8bfb      	ldrh	r3, [r7, #30]
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	4603      	mov	r3, r0
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff fcc3 	bl	800ced0 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d54a:	8b3a      	ldrh	r2, [r7, #24]
 800d54c:	893b      	ldrh	r3, [r7, #8]
 800d54e:	4413      	add	r3, r2
 800d550:	b29a      	uxth	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	801a      	strh	r2, [r3, #0]
 800d556:	e010      	b.n	800d57a <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f103 021c 	add.w	r2, r3, #28
 800d55e:	8c38      	ldrh	r0, [r7, #32]
 800d560:	8ab9      	ldrh	r1, [r7, #20]
 800d562:	893b      	ldrh	r3, [r7, #8]
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	4603      	mov	r3, r0
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff fcb1 	bl	800ced0 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d56e:	8b3a      	ldrh	r2, [r7, #24]
 800d570:	893b      	ldrh	r3, [r7, #8]
 800d572:	4413      	add	r3, r2
 800d574:	b29a      	uxth	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	801a      	strh	r2, [r3, #0]
					}

}
 800d57a:	bf00      	nop
 800d57c:	4618      	mov	r0, r3
 800d57e:	3728      	adds	r7, #40	; 0x28
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b090      	sub	sp, #64	; 0x40
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800d592:	2300      	movs	r3, #0
 800d594:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d596:	2300      	movs	r3, #0
 800d598:	63bb      	str	r3, [r7, #56]	; 0x38
 800d59a:	2300      	movs	r3, #0
 800d59c:	637b      	str	r3, [r7, #52]	; 0x34
 800d59e:	2300      	movs	r3, #0
 800d5a0:	633b      	str	r3, [r7, #48]	; 0x30
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	623b      	str	r3, [r7, #32]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	61fb      	str	r3, [r7, #28]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61bb      	str	r3, [r7, #24]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d5be:	2300      	movs	r3, #0
 800d5c0:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800d5ce:	6a3a      	ldr	r2, [r7, #32]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	f2c0 82fe 	blt.w	800dbd4 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800d5dc:	e00c      	b.n	800d5f8 <FT_String_ND+0x74>
							{
								n++;
 800d5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800d5e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	441a      	add	r2, r3
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	dd02      	ble.n	800d5f8 <FT_String_ND+0x74>
								{
									estado=0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800d5f6:	e009      	b.n	800d60c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	440b      	add	r3, r1
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d1e8      	bne.n	800d5de <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800d60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60e:	3301      	adds	r3, #1
 800d610:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800d612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d614:	3301      	adds	r3, #1
 800d616:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800d618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d108      	bne.n	800d632 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800d620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d62a:	601a      	str	r2, [r3, #0]
									estado=1;
 800d62c:	2301      	movs	r3, #1
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800d630:	e010      	b.n	800d654 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800d632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	429a      	cmp	r2, r3
 800d638:	dd02      	ble.n	800d640 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800d63e:	e009      	b.n	800d654 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800d640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	4413      	add	r3, r2
 800d646:	781a      	ldrb	r2, [r3, #0]
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	6879      	ldr	r1, [r7, #4]
 800d64c:	440b      	add	r3, r1
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d0db      	beq.n	800d60c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	1e5a      	subs	r2, r3, #1
 800d658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65a:	4413      	add	r3, r2
 800d65c:	6a3a      	ldr	r2, [r7, #32]
 800d65e:	429a      	cmp	r2, r3
 800d660:	dd02      	ble.n	800d668 <FT_String_ND+0xe4>
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	2b01      	cmp	r3, #1
 800d666:	d1b7      	bne.n	800d5d8 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800d668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	e2b1      	b.n	800dbd6 <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800d672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d674:	2b01      	cmp	r3, #1
 800d676:	d12c      	bne.n	800d6d2 <FT_String_ND+0x14e>
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d129      	bne.n	800d6d2 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800d67e:	e014      	b.n	800d6aa <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800d680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	441a      	add	r2, r3
 800d688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68a:	4413      	add	r3, r2
 800d68c:	3b01      	subs	r3, #1
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	441a      	add	r2, r3
 800d692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d698:	440b      	add	r3, r1
 800d69a:	3b01      	subs	r3, #1
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	440b      	add	r3, r1
 800d6a0:	7812      	ldrb	r2, [r2, #0]
 800d6a2:	701a      	strb	r2, [r3, #0]
										n3++;
 800d6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800d6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	441a      	add	r2, r3
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b4:	4413      	add	r3, r2
 800d6b6:	6a3a      	ldr	r2, [r7, #32]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	dae1      	bge.n	800d680 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800d6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c2:	4413      	add	r3, r2
 800d6c4:	1e5a      	subs	r2, r3, #1
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	601a      	str	r2, [r3, #0]
							estado=3;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	e281      	b.n	800dbd6 <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800d6d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	f040 80b6 	bne.w	800d846 <FT_String_ND+0x2c2>
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	f040 80b2 	bne.w	800d846 <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d6e2:	e012      	b.n	800d70a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800d6e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	1ad2      	subs	r2, r2, r3
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	4413      	add	r3, r2
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d6f8:	440b      	add	r3, r1
 800d6fa:	7812      	ldrb	r2, [r2, #0]
 800d6fc:	701a      	strb	r2, [r3, #0]
								n4++;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	3301      	adds	r3, #1
 800d702:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800d704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d708:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d70a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	1ad2      	subs	r2, r2, r3
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	4413      	add	r3, r2
 800d714:	6a3a      	ldr	r2, [r7, #32]
 800d716:	429a      	cmp	r2, r3
 800d718:	dae4      	bge.n	800d6e4 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800d71a:	499e      	ldr	r1, [pc, #632]	; (800d994 <FT_String_ND+0x410>)
 800d71c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d71e:	f000 fcfd 	bl	800e11c <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800d722:	499d      	ldr	r1, [pc, #628]	; (800d998 <FT_String_ND+0x414>)
 800d724:	2000      	movs	r0, #0
 800d726:	f000 fcf9 	bl	800e11c <strtok>
 800d72a:	4603      	mov	r3, r0
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 fada 	bl	800dce6 <atoi>
 800d732:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800d734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d736:	3306      	adds	r3, #6
 800d738:	222c      	movs	r2, #44	; 0x2c
 800d73a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	2b09      	cmp	r3, #9
 800d740:	dc0d      	bgt.n	800d75e <FT_String_ND+0x1da>
											{
												c[8]=':';
 800d742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d744:	3308      	adds	r3, #8
 800d746:	223a      	movs	r2, #58	; 0x3a
 800d748:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	3309      	adds	r3, #9
 800d74e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d750:	4413      	add	r3, r2
 800d752:	2200      	movs	r2, #0
 800d754:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	3309      	adds	r3, #9
 800d75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d75c:	e021      	b.n	800d7a2 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	2b63      	cmp	r3, #99	; 0x63
 800d762:	dc0d      	bgt.n	800d780 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800d764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d766:	3309      	adds	r3, #9
 800d768:	223a      	movs	r2, #58	; 0x3a
 800d76a:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	330a      	adds	r3, #10
 800d770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d772:	4413      	add	r3, r2
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	330a      	adds	r3, #10
 800d77c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d77e:	e010      	b.n	800d7a2 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d786:	da0c      	bge.n	800d7a2 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800d788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d78a:	330a      	adds	r3, #10
 800d78c:	223a      	movs	r2, #58	; 0x3a
 800d78e:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	330b      	adds	r3, #11
 800d794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d796:	4413      	add	r3, r2
 800d798:	2200      	movs	r2, #0
 800d79a:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	330b      	adds	r3, #11
 800d7a0:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800d7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a6:	601a      	str	r2, [r3, #0]
							n4=0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d7ac:	e016      	b.n	800d7dc <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800d7ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	1ad2      	subs	r2, r2, r3
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	441a      	add	r2, r3
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	4413      	add	r3, r2
 800d7bc:	461a      	mov	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	441a      	add	r2, r3
 800d7c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	1ac9      	subs	r1, r1, r3
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	440b      	add	r3, r1
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	440b      	add	r3, r1
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	701a      	strb	r2, [r3, #0]
								n4++;
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d8:	3301      	adds	r3, #1
 800d7da:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d7dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	1ad2      	subs	r2, r2, r3
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	441a      	add	r2, r3
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	4413      	add	r3, r2
 800d7ea:	6a3a      	ldr	r2, [r7, #32]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	dade      	bge.n	800d7ae <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800d7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	441a      	add	r2, r3
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	1e5a      	subs	r2, r3, #1
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800d800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	1ad2      	subs	r2, r2, r3
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	441a      	add	r2, r3
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	4413      	add	r3, r2
 800d80e:	461a      	mov	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800d818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	1ad2      	subs	r2, r2, r3
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	4413      	add	r3, r2
 800d822:	461a      	mov	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	2200      	movs	r2, #0
 800d82a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800d82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	1ad2      	subs	r2, r2, r3
 800d832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	440b      	add	r3, r1
 800d838:	429a      	cmp	r2, r3
 800d83a:	d102      	bne.n	800d842 <FT_String_ND+0x2be>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	701a      	strb	r2, [r3, #0]
							estado=3;
 800d842:	2303      	movs	r3, #3
 800d844:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800d846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d146      	bne.n	800d8da <FT_String_ND+0x356>
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d143      	bne.n	800d8da <FT_String_ND+0x356>
						{
						n3=0;
 800d852:	2300      	movs	r3, #0
 800d854:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800d856:	e00e      	b.n	800d876 <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800d858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85e:	4413      	add	r3, r2
 800d860:	3b01      	subs	r3, #1
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	441a      	add	r2, r3
 800d866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d868:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d86a:	440b      	add	r3, r1
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	701a      	strb	r2, [r3, #0]
										n3++;
 800d870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d872:	3301      	adds	r3, #1
 800d874:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800d876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	dbec      	blt.n	800d858 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800d87e:	2300      	movs	r3, #0
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800d882:	e014      	b.n	800d8ae <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800d884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	441a      	add	r2, r3
 800d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88e:	4413      	add	r3, r2
 800d890:	3b01      	subs	r3, #1
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	441a      	add	r2, r3
 800d896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d898:	6819      	ldr	r1, [r3, #0]
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	440b      	add	r3, r1
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	68f9      	ldr	r1, [r7, #12]
 800d8a2:	440b      	add	r3, r1
 800d8a4:	7812      	ldrb	r2, [r2, #0]
 800d8a6:	701a      	strb	r2, [r3, #0]
										n5++;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800d8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	441a      	add	r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	dde0      	ble.n	800d884 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800d8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	4413      	add	r3, r2
 800d8ca:	1e5a      	subs	r2, r3, #1
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800d8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8d4:	601a      	str	r2, [r3, #0]
							estado=3;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800d8da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8dc:	2b04      	cmp	r3, #4
 800d8de:	f040 80b6 	bne.w	800da4e <FT_String_ND+0x4ca>
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	f040 80b2 	bne.w	800da4e <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d8ea:	e012      	b.n	800d912 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800d8ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	1ad2      	subs	r2, r2, r3
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	4413      	add	r3, r2
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	441a      	add	r2, r3
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d900:	440b      	add	r3, r1
 800d902:	7812      	ldrb	r2, [r2, #0]
 800d904:	701a      	strb	r2, [r3, #0]
								n4++;
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	3301      	adds	r3, #1
 800d90a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800d90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d910:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	1ad2      	subs	r2, r2, r3
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	4413      	add	r3, r2
 800d91c:	6a3a      	ldr	r2, [r7, #32]
 800d91e:	429a      	cmp	r2, r3
 800d920:	dae4      	bge.n	800d8ec <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800d922:	491c      	ldr	r1, [pc, #112]	; (800d994 <FT_String_ND+0x410>)
 800d924:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d926:	f000 fbf9 	bl	800e11c <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800d92a:	491b      	ldr	r1, [pc, #108]	; (800d998 <FT_String_ND+0x414>)
 800d92c:	2000      	movs	r0, #0
 800d92e:	f000 fbf5 	bl	800e11c <strtok>
 800d932:	4603      	mov	r3, r0
 800d934:	4618      	mov	r0, r3
 800d936:	f000 f9d6 	bl	800dce6 <atoi>
 800d93a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800d93c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93e:	3306      	adds	r3, #6
 800d940:	222c      	movs	r2, #44	; 0x2c
 800d942:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	2b09      	cmp	r3, #9
 800d948:	dc07      	bgt.n	800d95a <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800d94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94c:	3308      	adds	r3, #8
 800d94e:	223a      	movs	r2, #58	; 0x3a
 800d950:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	3309      	adds	r3, #9
 800d956:	62bb      	str	r3, [r7, #40]	; 0x28
 800d958:	e015      	b.n	800d986 <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	2b63      	cmp	r3, #99	; 0x63
 800d95e:	dc07      	bgt.n	800d970 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800d960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d962:	3309      	adds	r3, #9
 800d964:	223a      	movs	r2, #58	; 0x3a
 800d966:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	330a      	adds	r3, #10
 800d96c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d96e:	e00a      	b.n	800d986 <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d976:	da06      	bge.n	800d986 <FT_String_ND+0x402>
														{
															c[10]=':';
 800d978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d97a:	330a      	adds	r3, #10
 800d97c:	223a      	movs	r2, #58	; 0x3a
 800d97e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	330b      	adds	r3, #11
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800d986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d98a:	601a      	str	r2, [r3, #0]
							n4=0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d990:	e01b      	b.n	800d9ca <FT_String_ND+0x446>
 800d992:	bf00      	nop
 800d994:	0800fab8 	.word	0x0800fab8
 800d998:	0800fabc 	.word	0x0800fabc
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800d99c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	1ad2      	subs	r2, r2, r3
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	441a      	add	r2, r3
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	4413      	add	r3, r2
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	441a      	add	r2, r3
 800d9b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	1ac9      	subs	r1, r1, r3
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	440b      	add	r3, r1
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	440b      	add	r3, r1
 800d9c0:	7812      	ldrb	r2, [r2, #0]
 800d9c2:	701a      	strb	r2, [r3, #0]
								n4++;
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d9ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	1ad2      	subs	r2, r2, r3
 800d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d2:	441a      	add	r2, r3
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	4413      	add	r3, r2
 800d9d8:	6a3a      	ldr	r2, [r7, #32]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	dade      	bge.n	800d99c <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800d9de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e2:	441a      	add	r2, r3
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	1e5a      	subs	r2, r3, #1
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	601a      	str	r2, [r3, #0]
							n5=0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800d9f2:	e00f      	b.n	800da14 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800d9f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	1ad2      	subs	r2, r2, r3
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	4413      	add	r3, r2
 800d9fe:	461a      	mov	r2, r3
 800da00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da02:	441a      	add	r2, r3
 800da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da08:	440b      	add	r3, r1
 800da0a:	7812      	ldrb	r2, [r2, #0]
 800da0c:	701a      	strb	r2, [r3, #0]
								n5++;
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	3301      	adds	r3, #1
 800da12:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800da14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	1ad2      	subs	r2, r2, r3
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	441a      	add	r2, r3
 800da1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	429a      	cmp	r2, r3
 800da24:	dbe6      	blt.n	800d9f4 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800da26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da2a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800da2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	441a      	add	r2, r3
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	1ad2      	subs	r2, r2, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4413      	add	r3, r2
 800da3e:	6a3a      	ldr	r2, [r7, #32]
 800da40:	429a      	cmp	r2, r3
 800da42:	d102      	bne.n	800da4a <FT_String_ND+0x4c6>
							{
								estado=4;
 800da44:	2304      	movs	r3, #4
 800da46:	627b      	str	r3, [r7, #36]	; 0x24
 800da48:	e001      	b.n	800da4e <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800da4a:	2305      	movs	r3, #5
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800da4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da50:	2b05      	cmp	r3, #5
 800da52:	f040 80bd 	bne.w	800dbd0 <FT_String_ND+0x64c>
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	2b01      	cmp	r3, #1
 800da5a:	f040 80b9 	bne.w	800dbd0 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800da5e:	e012      	b.n	800da86 <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800da60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	1ad2      	subs	r2, r2, r3
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	4413      	add	r3, r2
 800da6a:	461a      	mov	r2, r3
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	441a      	add	r2, r3
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da74:	440b      	add	r3, r1
 800da76:	7812      	ldrb	r2, [r2, #0]
 800da78:	701a      	strb	r2, [r3, #0]
								n4++;
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	3301      	adds	r3, #1
 800da7e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800da80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da84:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800da86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	1ad2      	subs	r2, r2, r3
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	4413      	add	r3, r2
 800da90:	6a3a      	ldr	r2, [r7, #32]
 800da92:	429a      	cmp	r2, r3
 800da94:	dae4      	bge.n	800da60 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800da96:	4952      	ldr	r1, [pc, #328]	; (800dbe0 <FT_String_ND+0x65c>)
 800da98:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800da9a:	f000 fb3f 	bl	800e11c <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800da9e:	4951      	ldr	r1, [pc, #324]	; (800dbe4 <FT_String_ND+0x660>)
 800daa0:	2000      	movs	r0, #0
 800daa2:	f000 fb3b 	bl	800e11c <strtok>
 800daa6:	4603      	mov	r3, r0
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 f91c 	bl	800dce6 <atoi>
 800daae:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800dab0:	494c      	ldr	r1, [pc, #304]	; (800dbe4 <FT_String_ND+0x660>)
 800dab2:	2000      	movs	r0, #0
 800dab4:	f000 fb32 	bl	800e11c <strtok>
 800dab8:	4603      	mov	r3, r0
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f913 	bl	800dce6 <atoi>
 800dac0:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800dac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dac4:	3306      	adds	r3, #6
 800dac6:	222c      	movs	r2, #44	; 0x2c
 800dac8:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	2b09      	cmp	r3, #9
 800dace:	dc07      	bgt.n	800dae0 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800dad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad2:	330a      	adds	r3, #10
 800dad4:	223a      	movs	r2, #58	; 0x3a
 800dad6:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	330b      	adds	r3, #11
 800dadc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dade:	e015      	b.n	800db0c <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	2b63      	cmp	r3, #99	; 0x63
 800dae4:	dc07      	bgt.n	800daf6 <FT_String_ND+0x572>
														{
															c[11]=':';
 800dae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dae8:	330b      	adds	r3, #11
 800daea:	223a      	movs	r2, #58	; 0x3a
 800daec:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	330c      	adds	r3, #12
 800daf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800daf4:	e00a      	b.n	800db0c <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dafc:	da06      	bge.n	800db0c <FT_String_ND+0x588>
														{
															c[12]=':';
 800dafe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db00:	330c      	adds	r3, #12
 800db02:	223a      	movs	r2, #58	; 0x3a
 800db04:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	330d      	adds	r3, #13
 800db0a:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800db0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db10:	601a      	str	r2, [r3, #0]
							n4=0;
 800db12:	2300      	movs	r3, #0
 800db14:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800db16:	e016      	b.n	800db46 <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800db18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	1ad2      	subs	r2, r2, r3
 800db1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db20:	441a      	add	r2, r3
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	4413      	add	r3, r2
 800db26:	461a      	mov	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	441a      	add	r2, r3
 800db2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	1ac9      	subs	r1, r1, r3
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	440b      	add	r3, r1
 800db36:	4619      	mov	r1, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	440b      	add	r3, r1
 800db3c:	7812      	ldrb	r2, [r2, #0]
 800db3e:	701a      	strb	r2, [r3, #0]
								n4++;
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	3301      	adds	r3, #1
 800db44:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800db46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	1ad2      	subs	r2, r2, r3
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	441a      	add	r2, r3
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	4413      	add	r3, r2
 800db54:	6a3a      	ldr	r2, [r7, #32]
 800db56:	429a      	cmp	r2, r3
 800db58:	dade      	bge.n	800db18 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800db5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	441a      	add	r2, r3
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	1e5a      	subs	r2, r3, #1
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	601a      	str	r2, [r3, #0]
							n5=0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800db6e:	e00f      	b.n	800db90 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800db70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	1ad2      	subs	r2, r2, r3
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	4413      	add	r3, r2
 800db7a:	461a      	mov	r2, r3
 800db7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db7e:	441a      	add	r2, r3
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db84:	440b      	add	r3, r1
 800db86:	7812      	ldrb	r2, [r2, #0]
 800db88:	701a      	strb	r2, [r3, #0]
								n5++;
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	3301      	adds	r3, #1
 800db8e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800db90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	1ad2      	subs	r2, r2, r3
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	441a      	add	r2, r3
 800db9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	dbe6      	blt.n	800db70 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800dba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dba6:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	441a      	add	r2, r3
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	1ad2      	subs	r2, r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4413      	add	r3, r2
 800dbba:	6a3a      	ldr	r2, [r7, #32]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d105      	bne.n	800dbcc <FT_String_ND+0x648>
							{
								estado=4;
 800dbc0:	2304      	movs	r3, #4
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	e001      	b.n	800dbd0 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800dbcc:	2305      	movs	r3, #5
 800dbce:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	e000      	b.n	800dbd6 <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800dbd4:	2302      	movs	r3, #2
			}
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3740      	adds	r7, #64	; 0x40
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	0800fab8 	.word	0x0800fab8
 800dbe4:	0800fabc 	.word	0x0800fabc

0800dbe8 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800dbf2:	2330      	movs	r3, #48	; 0x30
 800dbf4:	60bb      	str	r3, [r7, #8]
 800dbf6:	f107 030c 	add.w	r3, r7, #12
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	605a      	str	r2, [r3, #4]
 800dc00:	609a      	str	r2, [r3, #8]
 800dc02:	60da      	str	r2, [r3, #12]
int i=0;	
 800dc04:	2300      	movs	r3, #0
 800dc06:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800dc08:	f107 0308 	add.w	r3, r7, #8
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	490f      	ldr	r1, [pc, #60]	; (800dc4c <INTOA+0x64>)
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 fa05 	bl	800e020 <siprintf>
		while(i<=strlen(origbuff))
 800dc16:	e00b      	b.n	800dc30 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	603a      	str	r2, [r7, #0]
 800dc1e:	f107 0108 	add.w	r1, r7, #8
 800dc22:	69fa      	ldr	r2, [r7, #28]
 800dc24:	440a      	add	r2, r1
 800dc26:	7812      	ldrb	r2, [r2, #0]
 800dc28:	701a      	strb	r2, [r3, #0]
		i++;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800dc30:	f107 0308 	add.w	r3, r7, #8
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7f2 fadd 	bl	80001f4 <strlen>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d2ea      	bcs.n	800dc18 <INTOA+0x30>
		}
		return(i);
 800dc42:	69fb      	ldr	r3, [r7, #28]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3720      	adds	r7, #32
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	0800fac0 	.word	0x0800fac0

0800dc50 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	603b      	str	r3, [r7, #0]
int x =0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800dc62:	2300      	movs	r3, #0
 800dc64:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	617b      	str	r3, [r7, #20]
if (c==0)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d105      	bne.n	800dc7e <CopiaVector+0x2e>
{
	x=strlen(b);
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f7f2 fabe 	bl	80001f4 <strlen>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	61bb      	str	r3, [r7, #24]
 800dc7c:	e02e      	b.n	800dcdc <CopiaVector+0x8c>
}
else
	{
		x=c;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc88:	dd01      	ble.n	800dc8e <CopiaVector+0x3e>
			{
				return(1);
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e027      	b.n	800dcde <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800dc92:	e00a      	b.n	800dcaa <CopiaVector+0x5a>
				{
					*a++=*b++;
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	1c53      	adds	r3, r2, #1
 800dc98:	60bb      	str	r3, [r7, #8]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	1c59      	adds	r1, r3, #1
 800dc9e:	60f9      	str	r1, [r7, #12]
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	701a      	strb	r2, [r3, #0]
					p++;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	3301      	adds	r3, #1
 800dca8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800dcaa:	69fa      	ldr	r2, [r7, #28]
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	dbf0      	blt.n	800dc94 <CopiaVector+0x44>
				}


			if (d==1)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d111      	bne.n	800dcdc <CopiaVector+0x8c>
			{
			  p=c;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800dcbc:	e008      	b.n	800dcd0 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	60fa      	str	r2, [r7, #12]
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	701a      	strb	r2, [r3, #0]
				  p++;
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	3301      	adds	r3, #1
 800dcce:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcd6:	dbf2      	blt.n	800dcbe <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800dcd8:	2300      	movs	r3, #0
 800dcda:	e000      	b.n	800dcde <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800dcdc:	2301      	movs	r3, #1
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <atoi>:
 800dce6:	220a      	movs	r2, #10
 800dce8:	2100      	movs	r1, #0
 800dcea:	f000 b89d 	b.w	800de28 <strtol>

0800dcee <__itoa>:
 800dcee:	1e93      	subs	r3, r2, #2
 800dcf0:	2b22      	cmp	r3, #34	; 0x22
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	d904      	bls.n	800dd02 <__itoa+0x14>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	700b      	strb	r3, [r1, #0]
 800dcfc:	461c      	mov	r4, r3
 800dcfe:	4620      	mov	r0, r4
 800dd00:	bd10      	pop	{r4, pc}
 800dd02:	2a0a      	cmp	r2, #10
 800dd04:	d109      	bne.n	800dd1a <__itoa+0x2c>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	da07      	bge.n	800dd1a <__itoa+0x2c>
 800dd0a:	232d      	movs	r3, #45	; 0x2d
 800dd0c:	700b      	strb	r3, [r1, #0]
 800dd0e:	4240      	negs	r0, r0
 800dd10:	2101      	movs	r1, #1
 800dd12:	4421      	add	r1, r4
 800dd14:	f000 f892 	bl	800de3c <__utoa>
 800dd18:	e7f1      	b.n	800dcfe <__itoa+0x10>
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	e7f9      	b.n	800dd12 <__itoa+0x24>

0800dd1e <itoa>:
 800dd1e:	f7ff bfe6 	b.w	800dcee <__itoa>
	...

0800dd24 <_strtol_l.constprop.0>:
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2a:	d001      	beq.n	800dd30 <_strtol_l.constprop.0+0xc>
 800dd2c:	2b24      	cmp	r3, #36	; 0x24
 800dd2e:	d906      	bls.n	800dd3e <_strtol_l.constprop.0+0x1a>
 800dd30:	f000 fa96 	bl	800e260 <__errno>
 800dd34:	2316      	movs	r3, #22
 800dd36:	6003      	str	r3, [r0, #0]
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de24 <_strtol_l.constprop.0+0x100>
 800dd42:	460d      	mov	r5, r1
 800dd44:	462e      	mov	r6, r5
 800dd46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dd4e:	f017 0708 	ands.w	r7, r7, #8
 800dd52:	d1f7      	bne.n	800dd44 <_strtol_l.constprop.0+0x20>
 800dd54:	2c2d      	cmp	r4, #45	; 0x2d
 800dd56:	d132      	bne.n	800ddbe <_strtol_l.constprop.0+0x9a>
 800dd58:	782c      	ldrb	r4, [r5, #0]
 800dd5a:	2701      	movs	r7, #1
 800dd5c:	1cb5      	adds	r5, r6, #2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d05b      	beq.n	800de1a <_strtol_l.constprop.0+0xf6>
 800dd62:	2b10      	cmp	r3, #16
 800dd64:	d109      	bne.n	800dd7a <_strtol_l.constprop.0+0x56>
 800dd66:	2c30      	cmp	r4, #48	; 0x30
 800dd68:	d107      	bne.n	800dd7a <_strtol_l.constprop.0+0x56>
 800dd6a:	782c      	ldrb	r4, [r5, #0]
 800dd6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd70:	2c58      	cmp	r4, #88	; 0x58
 800dd72:	d14d      	bne.n	800de10 <_strtol_l.constprop.0+0xec>
 800dd74:	786c      	ldrb	r4, [r5, #1]
 800dd76:	2310      	movs	r3, #16
 800dd78:	3502      	adds	r5, #2
 800dd7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dd7e:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd82:	f04f 0e00 	mov.w	lr, #0
 800dd86:	fbb8 f9f3 	udiv	r9, r8, r3
 800dd8a:	4676      	mov	r6, lr
 800dd8c:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd94:	f1bc 0f09 	cmp.w	ip, #9
 800dd98:	d816      	bhi.n	800ddc8 <_strtol_l.constprop.0+0xa4>
 800dd9a:	4664      	mov	r4, ip
 800dd9c:	42a3      	cmp	r3, r4
 800dd9e:	dd24      	ble.n	800ddea <_strtol_l.constprop.0+0xc6>
 800dda0:	f1be 3fff 	cmp.w	lr, #4294967295
 800dda4:	d008      	beq.n	800ddb8 <_strtol_l.constprop.0+0x94>
 800dda6:	45b1      	cmp	r9, r6
 800dda8:	d31c      	bcc.n	800dde4 <_strtol_l.constprop.0+0xc0>
 800ddaa:	d101      	bne.n	800ddb0 <_strtol_l.constprop.0+0x8c>
 800ddac:	45a2      	cmp	sl, r4
 800ddae:	db19      	blt.n	800dde4 <_strtol_l.constprop.0+0xc0>
 800ddb0:	fb06 4603 	mla	r6, r6, r3, r4
 800ddb4:	f04f 0e01 	mov.w	lr, #1
 800ddb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddbc:	e7e8      	b.n	800dd90 <_strtol_l.constprop.0+0x6c>
 800ddbe:	2c2b      	cmp	r4, #43	; 0x2b
 800ddc0:	bf04      	itt	eq
 800ddc2:	782c      	ldrbeq	r4, [r5, #0]
 800ddc4:	1cb5      	addeq	r5, r6, #2
 800ddc6:	e7ca      	b.n	800dd5e <_strtol_l.constprop.0+0x3a>
 800ddc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ddcc:	f1bc 0f19 	cmp.w	ip, #25
 800ddd0:	d801      	bhi.n	800ddd6 <_strtol_l.constprop.0+0xb2>
 800ddd2:	3c37      	subs	r4, #55	; 0x37
 800ddd4:	e7e2      	b.n	800dd9c <_strtol_l.constprop.0+0x78>
 800ddd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ddda:	f1bc 0f19 	cmp.w	ip, #25
 800ddde:	d804      	bhi.n	800ddea <_strtol_l.constprop.0+0xc6>
 800dde0:	3c57      	subs	r4, #87	; 0x57
 800dde2:	e7db      	b.n	800dd9c <_strtol_l.constprop.0+0x78>
 800dde4:	f04f 3eff 	mov.w	lr, #4294967295
 800dde8:	e7e6      	b.n	800ddb8 <_strtol_l.constprop.0+0x94>
 800ddea:	f1be 3fff 	cmp.w	lr, #4294967295
 800ddee:	d105      	bne.n	800ddfc <_strtol_l.constprop.0+0xd8>
 800ddf0:	2322      	movs	r3, #34	; 0x22
 800ddf2:	6003      	str	r3, [r0, #0]
 800ddf4:	4646      	mov	r6, r8
 800ddf6:	b942      	cbnz	r2, 800de0a <_strtol_l.constprop.0+0xe6>
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	e79e      	b.n	800dd3a <_strtol_l.constprop.0+0x16>
 800ddfc:	b107      	cbz	r7, 800de00 <_strtol_l.constprop.0+0xdc>
 800ddfe:	4276      	negs	r6, r6
 800de00:	2a00      	cmp	r2, #0
 800de02:	d0f9      	beq.n	800ddf8 <_strtol_l.constprop.0+0xd4>
 800de04:	f1be 0f00 	cmp.w	lr, #0
 800de08:	d000      	beq.n	800de0c <_strtol_l.constprop.0+0xe8>
 800de0a:	1e69      	subs	r1, r5, #1
 800de0c:	6011      	str	r1, [r2, #0]
 800de0e:	e7f3      	b.n	800ddf8 <_strtol_l.constprop.0+0xd4>
 800de10:	2430      	movs	r4, #48	; 0x30
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1b1      	bne.n	800dd7a <_strtol_l.constprop.0+0x56>
 800de16:	2308      	movs	r3, #8
 800de18:	e7af      	b.n	800dd7a <_strtol_l.constprop.0+0x56>
 800de1a:	2c30      	cmp	r4, #48	; 0x30
 800de1c:	d0a5      	beq.n	800dd6a <_strtol_l.constprop.0+0x46>
 800de1e:	230a      	movs	r3, #10
 800de20:	e7ab      	b.n	800dd7a <_strtol_l.constprop.0+0x56>
 800de22:	bf00      	nop
 800de24:	0800fb02 	.word	0x0800fb02

0800de28 <strtol>:
 800de28:	4613      	mov	r3, r2
 800de2a:	460a      	mov	r2, r1
 800de2c:	4601      	mov	r1, r0
 800de2e:	4802      	ldr	r0, [pc, #8]	; (800de38 <strtol+0x10>)
 800de30:	6800      	ldr	r0, [r0, #0]
 800de32:	f7ff bf77 	b.w	800dd24 <_strtol_l.constprop.0>
 800de36:	bf00      	nop
 800de38:	20000064 	.word	0x20000064

0800de3c <__utoa>:
 800de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de3e:	4c1f      	ldr	r4, [pc, #124]	; (800debc <__utoa+0x80>)
 800de40:	b08b      	sub	sp, #44	; 0x2c
 800de42:	4605      	mov	r5, r0
 800de44:	460b      	mov	r3, r1
 800de46:	466e      	mov	r6, sp
 800de48:	f104 0c20 	add.w	ip, r4, #32
 800de4c:	6820      	ldr	r0, [r4, #0]
 800de4e:	6861      	ldr	r1, [r4, #4]
 800de50:	4637      	mov	r7, r6
 800de52:	c703      	stmia	r7!, {r0, r1}
 800de54:	3408      	adds	r4, #8
 800de56:	4564      	cmp	r4, ip
 800de58:	463e      	mov	r6, r7
 800de5a:	d1f7      	bne.n	800de4c <__utoa+0x10>
 800de5c:	7921      	ldrb	r1, [r4, #4]
 800de5e:	7139      	strb	r1, [r7, #4]
 800de60:	1e91      	subs	r1, r2, #2
 800de62:	6820      	ldr	r0, [r4, #0]
 800de64:	6038      	str	r0, [r7, #0]
 800de66:	2922      	cmp	r1, #34	; 0x22
 800de68:	f04f 0100 	mov.w	r1, #0
 800de6c:	d904      	bls.n	800de78 <__utoa+0x3c>
 800de6e:	7019      	strb	r1, [r3, #0]
 800de70:	460b      	mov	r3, r1
 800de72:	4618      	mov	r0, r3
 800de74:	b00b      	add	sp, #44	; 0x2c
 800de76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de78:	1e58      	subs	r0, r3, #1
 800de7a:	4684      	mov	ip, r0
 800de7c:	fbb5 f7f2 	udiv	r7, r5, r2
 800de80:	fb02 5617 	mls	r6, r2, r7, r5
 800de84:	3628      	adds	r6, #40	; 0x28
 800de86:	446e      	add	r6, sp
 800de88:	460c      	mov	r4, r1
 800de8a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800de8e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800de92:	462e      	mov	r6, r5
 800de94:	42b2      	cmp	r2, r6
 800de96:	f101 0101 	add.w	r1, r1, #1
 800de9a:	463d      	mov	r5, r7
 800de9c:	d9ee      	bls.n	800de7c <__utoa+0x40>
 800de9e:	2200      	movs	r2, #0
 800dea0:	545a      	strb	r2, [r3, r1]
 800dea2:	1919      	adds	r1, r3, r4
 800dea4:	1aa5      	subs	r5, r4, r2
 800dea6:	42aa      	cmp	r2, r5
 800dea8:	dae3      	bge.n	800de72 <__utoa+0x36>
 800deaa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800deae:	780e      	ldrb	r6, [r1, #0]
 800deb0:	7006      	strb	r6, [r0, #0]
 800deb2:	3201      	adds	r2, #1
 800deb4:	f801 5901 	strb.w	r5, [r1], #-1
 800deb8:	e7f4      	b.n	800dea4 <__utoa+0x68>
 800deba:	bf00      	nop
 800debc:	0800fadc 	.word	0x0800fadc

0800dec0 <std>:
 800dec0:	2300      	movs	r3, #0
 800dec2:	b510      	push	{r4, lr}
 800dec4:	4604      	mov	r4, r0
 800dec6:	e9c0 3300 	strd	r3, r3, [r0]
 800deca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dece:	6083      	str	r3, [r0, #8]
 800ded0:	8181      	strh	r1, [r0, #12]
 800ded2:	6643      	str	r3, [r0, #100]	; 0x64
 800ded4:	81c2      	strh	r2, [r0, #14]
 800ded6:	6183      	str	r3, [r0, #24]
 800ded8:	4619      	mov	r1, r3
 800deda:	2208      	movs	r2, #8
 800dedc:	305c      	adds	r0, #92	; 0x5c
 800dede:	f000 f902 	bl	800e0e6 <memset>
 800dee2:	4b05      	ldr	r3, [pc, #20]	; (800def8 <std+0x38>)
 800dee4:	6263      	str	r3, [r4, #36]	; 0x24
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <std+0x3c>)
 800dee8:	62a3      	str	r3, [r4, #40]	; 0x28
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <std+0x40>)
 800deec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800deee:	4b05      	ldr	r3, [pc, #20]	; (800df04 <std+0x44>)
 800def0:	6224      	str	r4, [r4, #32]
 800def2:	6323      	str	r3, [r4, #48]	; 0x30
 800def4:	bd10      	pop	{r4, pc}
 800def6:	bf00      	nop
 800def8:	0800e061 	.word	0x0800e061
 800defc:	0800e083 	.word	0x0800e083
 800df00:	0800e0bb 	.word	0x0800e0bb
 800df04:	0800e0df 	.word	0x0800e0df

0800df08 <stdio_exit_handler>:
 800df08:	4a02      	ldr	r2, [pc, #8]	; (800df14 <stdio_exit_handler+0xc>)
 800df0a:	4903      	ldr	r1, [pc, #12]	; (800df18 <stdio_exit_handler+0x10>)
 800df0c:	4803      	ldr	r0, [pc, #12]	; (800df1c <stdio_exit_handler+0x14>)
 800df0e:	f000 b869 	b.w	800dfe4 <_fwalk_sglue>
 800df12:	bf00      	nop
 800df14:	2000000c 	.word	0x2000000c
 800df18:	0800ebe1 	.word	0x0800ebe1
 800df1c:	20000018 	.word	0x20000018

0800df20 <cleanup_stdio>:
 800df20:	6841      	ldr	r1, [r0, #4]
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <cleanup_stdio+0x34>)
 800df24:	4299      	cmp	r1, r3
 800df26:	b510      	push	{r4, lr}
 800df28:	4604      	mov	r4, r0
 800df2a:	d001      	beq.n	800df30 <cleanup_stdio+0x10>
 800df2c:	f000 fe58 	bl	800ebe0 <_fflush_r>
 800df30:	68a1      	ldr	r1, [r4, #8]
 800df32:	4b09      	ldr	r3, [pc, #36]	; (800df58 <cleanup_stdio+0x38>)
 800df34:	4299      	cmp	r1, r3
 800df36:	d002      	beq.n	800df3e <cleanup_stdio+0x1e>
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 fe51 	bl	800ebe0 <_fflush_r>
 800df3e:	68e1      	ldr	r1, [r4, #12]
 800df40:	4b06      	ldr	r3, [pc, #24]	; (800df5c <cleanup_stdio+0x3c>)
 800df42:	4299      	cmp	r1, r3
 800df44:	d004      	beq.n	800df50 <cleanup_stdio+0x30>
 800df46:	4620      	mov	r0, r4
 800df48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df4c:	f000 be48 	b.w	800ebe0 <_fflush_r>
 800df50:	bd10      	pop	{r4, pc}
 800df52:	bf00      	nop
 800df54:	2000393c 	.word	0x2000393c
 800df58:	200039a4 	.word	0x200039a4
 800df5c:	20003a0c 	.word	0x20003a0c

0800df60 <global_stdio_init.part.0>:
 800df60:	b510      	push	{r4, lr}
 800df62:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <global_stdio_init.part.0+0x30>)
 800df64:	4c0b      	ldr	r4, [pc, #44]	; (800df94 <global_stdio_init.part.0+0x34>)
 800df66:	4a0c      	ldr	r2, [pc, #48]	; (800df98 <global_stdio_init.part.0+0x38>)
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	4620      	mov	r0, r4
 800df6c:	2200      	movs	r2, #0
 800df6e:	2104      	movs	r1, #4
 800df70:	f7ff ffa6 	bl	800dec0 <std>
 800df74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df78:	2201      	movs	r2, #1
 800df7a:	2109      	movs	r1, #9
 800df7c:	f7ff ffa0 	bl	800dec0 <std>
 800df80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df84:	2202      	movs	r2, #2
 800df86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df8a:	2112      	movs	r1, #18
 800df8c:	f7ff bf98 	b.w	800dec0 <std>
 800df90:	20003a74 	.word	0x20003a74
 800df94:	2000393c 	.word	0x2000393c
 800df98:	0800df09 	.word	0x0800df09

0800df9c <__sfp_lock_acquire>:
 800df9c:	4801      	ldr	r0, [pc, #4]	; (800dfa4 <__sfp_lock_acquire+0x8>)
 800df9e:	f000 b989 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800dfa2:	bf00      	nop
 800dfa4:	20003a7d 	.word	0x20003a7d

0800dfa8 <__sfp_lock_release>:
 800dfa8:	4801      	ldr	r0, [pc, #4]	; (800dfb0 <__sfp_lock_release+0x8>)
 800dfaa:	f000 b984 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800dfae:	bf00      	nop
 800dfb0:	20003a7d 	.word	0x20003a7d

0800dfb4 <__sinit>:
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	f7ff fff0 	bl	800df9c <__sfp_lock_acquire>
 800dfbc:	6a23      	ldr	r3, [r4, #32]
 800dfbe:	b11b      	cbz	r3, 800dfc8 <__sinit+0x14>
 800dfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc4:	f7ff bff0 	b.w	800dfa8 <__sfp_lock_release>
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <__sinit+0x28>)
 800dfca:	6223      	str	r3, [r4, #32]
 800dfcc:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <__sinit+0x2c>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1f5      	bne.n	800dfc0 <__sinit+0xc>
 800dfd4:	f7ff ffc4 	bl	800df60 <global_stdio_init.part.0>
 800dfd8:	e7f2      	b.n	800dfc0 <__sinit+0xc>
 800dfda:	bf00      	nop
 800dfdc:	0800df21 	.word	0x0800df21
 800dfe0:	20003a74 	.word	0x20003a74

0800dfe4 <_fwalk_sglue>:
 800dfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	4607      	mov	r7, r0
 800dfea:	4688      	mov	r8, r1
 800dfec:	4614      	mov	r4, r2
 800dfee:	2600      	movs	r6, #0
 800dff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dff4:	f1b9 0901 	subs.w	r9, r9, #1
 800dff8:	d505      	bpl.n	800e006 <_fwalk_sglue+0x22>
 800dffa:	6824      	ldr	r4, [r4, #0]
 800dffc:	2c00      	cmp	r4, #0
 800dffe:	d1f7      	bne.n	800dff0 <_fwalk_sglue+0xc>
 800e000:	4630      	mov	r0, r6
 800e002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e006:	89ab      	ldrh	r3, [r5, #12]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d907      	bls.n	800e01c <_fwalk_sglue+0x38>
 800e00c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e010:	3301      	adds	r3, #1
 800e012:	d003      	beq.n	800e01c <_fwalk_sglue+0x38>
 800e014:	4629      	mov	r1, r5
 800e016:	4638      	mov	r0, r7
 800e018:	47c0      	blx	r8
 800e01a:	4306      	orrs	r6, r0
 800e01c:	3568      	adds	r5, #104	; 0x68
 800e01e:	e7e9      	b.n	800dff4 <_fwalk_sglue+0x10>

0800e020 <siprintf>:
 800e020:	b40e      	push	{r1, r2, r3}
 800e022:	b500      	push	{lr}
 800e024:	b09c      	sub	sp, #112	; 0x70
 800e026:	ab1d      	add	r3, sp, #116	; 0x74
 800e028:	9002      	str	r0, [sp, #8]
 800e02a:	9006      	str	r0, [sp, #24]
 800e02c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e030:	4809      	ldr	r0, [pc, #36]	; (800e058 <siprintf+0x38>)
 800e032:	9107      	str	r1, [sp, #28]
 800e034:	9104      	str	r1, [sp, #16]
 800e036:	4909      	ldr	r1, [pc, #36]	; (800e05c <siprintf+0x3c>)
 800e038:	f853 2b04 	ldr.w	r2, [r3], #4
 800e03c:	9105      	str	r1, [sp, #20]
 800e03e:	6800      	ldr	r0, [r0, #0]
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	a902      	add	r1, sp, #8
 800e044:	f000 fab8 	bl	800e5b8 <_svfiprintf_r>
 800e048:	9b02      	ldr	r3, [sp, #8]
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	b01c      	add	sp, #112	; 0x70
 800e050:	f85d eb04 	ldr.w	lr, [sp], #4
 800e054:	b003      	add	sp, #12
 800e056:	4770      	bx	lr
 800e058:	20000064 	.word	0x20000064
 800e05c:	ffff0208 	.word	0xffff0208

0800e060 <__sread>:
 800e060:	b510      	push	{r4, lr}
 800e062:	460c      	mov	r4, r1
 800e064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e068:	f000 f8d6 	bl	800e218 <_read_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	bfab      	itete	ge
 800e070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e072:	89a3      	ldrhlt	r3, [r4, #12]
 800e074:	181b      	addge	r3, r3, r0
 800e076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e07a:	bfac      	ite	ge
 800e07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e07e:	81a3      	strhlt	r3, [r4, #12]
 800e080:	bd10      	pop	{r4, pc}

0800e082 <__swrite>:
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	461f      	mov	r7, r3
 800e088:	898b      	ldrh	r3, [r1, #12]
 800e08a:	05db      	lsls	r3, r3, #23
 800e08c:	4605      	mov	r5, r0
 800e08e:	460c      	mov	r4, r1
 800e090:	4616      	mov	r6, r2
 800e092:	d505      	bpl.n	800e0a0 <__swrite+0x1e>
 800e094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e098:	2302      	movs	r3, #2
 800e09a:	2200      	movs	r2, #0
 800e09c:	f000 f8aa 	bl	800e1f4 <_lseek_r>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0aa:	81a3      	strh	r3, [r4, #12]
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	f000 b8c1 	b.w	800e23c <_write_r>

0800e0ba <__sseek>:
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	460c      	mov	r4, r1
 800e0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c2:	f000 f897 	bl	800e1f4 <_lseek_r>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	bf15      	itete	ne
 800e0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0d6:	81a3      	strheq	r3, [r4, #12]
 800e0d8:	bf18      	it	ne
 800e0da:	81a3      	strhne	r3, [r4, #12]
 800e0dc:	bd10      	pop	{r4, pc}

0800e0de <__sclose>:
 800e0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e2:	f000 b877 	b.w	800e1d4 <_close_r>

0800e0e6 <memset>:
 800e0e6:	4402      	add	r2, r0
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d100      	bne.n	800e0f0 <memset+0xa>
 800e0ee:	4770      	bx	lr
 800e0f0:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f4:	e7f9      	b.n	800e0ea <memset+0x4>

0800e0f6 <strncat>:
 800e0f6:	b530      	push	{r4, r5, lr}
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	7825      	ldrb	r5, [r4, #0]
 800e0fc:	4623      	mov	r3, r4
 800e0fe:	3401      	adds	r4, #1
 800e100:	2d00      	cmp	r5, #0
 800e102:	d1fa      	bne.n	800e0fa <strncat+0x4>
 800e104:	3a01      	subs	r2, #1
 800e106:	d304      	bcc.n	800e112 <strncat+0x1c>
 800e108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10c:	f803 4b01 	strb.w	r4, [r3], #1
 800e110:	b904      	cbnz	r4, 800e114 <strncat+0x1e>
 800e112:	bd30      	pop	{r4, r5, pc}
 800e114:	2a00      	cmp	r2, #0
 800e116:	d1f5      	bne.n	800e104 <strncat+0xe>
 800e118:	701a      	strb	r2, [r3, #0]
 800e11a:	e7f3      	b.n	800e104 <strncat+0xe>

0800e11c <strtok>:
 800e11c:	4b16      	ldr	r3, [pc, #88]	; (800e178 <strtok+0x5c>)
 800e11e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e120:	681e      	ldr	r6, [r3, #0]
 800e122:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e124:	4605      	mov	r5, r0
 800e126:	b9fc      	cbnz	r4, 800e168 <strtok+0x4c>
 800e128:	2050      	movs	r0, #80	; 0x50
 800e12a:	9101      	str	r1, [sp, #4]
 800e12c:	f000 f936 	bl	800e39c <malloc>
 800e130:	9901      	ldr	r1, [sp, #4]
 800e132:	6470      	str	r0, [r6, #68]	; 0x44
 800e134:	4602      	mov	r2, r0
 800e136:	b920      	cbnz	r0, 800e142 <strtok+0x26>
 800e138:	4b10      	ldr	r3, [pc, #64]	; (800e17c <strtok+0x60>)
 800e13a:	4811      	ldr	r0, [pc, #68]	; (800e180 <strtok+0x64>)
 800e13c:	215b      	movs	r1, #91	; 0x5b
 800e13e:	f000 f8c3 	bl	800e2c8 <__assert_func>
 800e142:	e9c0 4400 	strd	r4, r4, [r0]
 800e146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e14a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e14e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e152:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e156:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e15a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e15e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e162:	6184      	str	r4, [r0, #24]
 800e164:	7704      	strb	r4, [r0, #28]
 800e166:	6244      	str	r4, [r0, #36]	; 0x24
 800e168:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e16a:	2301      	movs	r3, #1
 800e16c:	4628      	mov	r0, r5
 800e16e:	b002      	add	sp, #8
 800e170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e174:	f000 b806 	b.w	800e184 <__strtok_r>
 800e178:	20000064 	.word	0x20000064
 800e17c:	0800fc02 	.word	0x0800fc02
 800e180:	0800fc19 	.word	0x0800fc19

0800e184 <__strtok_r>:
 800e184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e186:	b908      	cbnz	r0, 800e18c <__strtok_r+0x8>
 800e188:	6810      	ldr	r0, [r2, #0]
 800e18a:	b188      	cbz	r0, 800e1b0 <__strtok_r+0x2c>
 800e18c:	4604      	mov	r4, r0
 800e18e:	4620      	mov	r0, r4
 800e190:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e194:	460f      	mov	r7, r1
 800e196:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e19a:	b91e      	cbnz	r6, 800e1a4 <__strtok_r+0x20>
 800e19c:	b965      	cbnz	r5, 800e1b8 <__strtok_r+0x34>
 800e19e:	6015      	str	r5, [r2, #0]
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	e005      	b.n	800e1b0 <__strtok_r+0x2c>
 800e1a4:	42b5      	cmp	r5, r6
 800e1a6:	d1f6      	bne.n	800e196 <__strtok_r+0x12>
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1f0      	bne.n	800e18e <__strtok_r+0xa>
 800e1ac:	6014      	str	r4, [r2, #0]
 800e1ae:	7003      	strb	r3, [r0, #0]
 800e1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b2:	461c      	mov	r4, r3
 800e1b4:	e00c      	b.n	800e1d0 <__strtok_r+0x4c>
 800e1b6:	b915      	cbnz	r5, 800e1be <__strtok_r+0x3a>
 800e1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1bc:	460e      	mov	r6, r1
 800e1be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e1c2:	42ab      	cmp	r3, r5
 800e1c4:	d1f7      	bne.n	800e1b6 <__strtok_r+0x32>
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0f3      	beq.n	800e1b2 <__strtok_r+0x2e>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e1d0:	6014      	str	r4, [r2, #0]
 800e1d2:	e7ed      	b.n	800e1b0 <__strtok_r+0x2c>

0800e1d4 <_close_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4d06      	ldr	r5, [pc, #24]	; (800e1f0 <_close_r+0x1c>)
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4604      	mov	r4, r0
 800e1dc:	4608      	mov	r0, r1
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	f7f4 f84f 	bl	8002282 <_close>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_close_r+0x1a>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_close_r+0x1a>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	20003a78 	.word	0x20003a78

0800e1f4 <_lseek_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d07      	ldr	r5, [pc, #28]	; (800e214 <_lseek_r+0x20>)
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	4608      	mov	r0, r1
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	2200      	movs	r2, #0
 800e200:	602a      	str	r2, [r5, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	f7f4 f864 	bl	80022d0 <_lseek>
 800e208:	1c43      	adds	r3, r0, #1
 800e20a:	d102      	bne.n	800e212 <_lseek_r+0x1e>
 800e20c:	682b      	ldr	r3, [r5, #0]
 800e20e:	b103      	cbz	r3, 800e212 <_lseek_r+0x1e>
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	20003a78 	.word	0x20003a78

0800e218 <_read_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	4d07      	ldr	r5, [pc, #28]	; (800e238 <_read_r+0x20>)
 800e21c:	4604      	mov	r4, r0
 800e21e:	4608      	mov	r0, r1
 800e220:	4611      	mov	r1, r2
 800e222:	2200      	movs	r2, #0
 800e224:	602a      	str	r2, [r5, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	f7f3 fff2 	bl	8002210 <_read>
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d102      	bne.n	800e236 <_read_r+0x1e>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	b103      	cbz	r3, 800e236 <_read_r+0x1e>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	20003a78 	.word	0x20003a78

0800e23c <_write_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	4d07      	ldr	r5, [pc, #28]	; (800e25c <_write_r+0x20>)
 800e240:	4604      	mov	r4, r0
 800e242:	4608      	mov	r0, r1
 800e244:	4611      	mov	r1, r2
 800e246:	2200      	movs	r2, #0
 800e248:	602a      	str	r2, [r5, #0]
 800e24a:	461a      	mov	r2, r3
 800e24c:	f7f3 fffd 	bl	800224a <_write>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_write_r+0x1e>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_write_r+0x1e>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	20003a78 	.word	0x20003a78

0800e260 <__errno>:
 800e260:	4b01      	ldr	r3, [pc, #4]	; (800e268 <__errno+0x8>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	20000064 	.word	0x20000064

0800e26c <__libc_init_array>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4d0d      	ldr	r5, [pc, #52]	; (800e2a4 <__libc_init_array+0x38>)
 800e270:	4c0d      	ldr	r4, [pc, #52]	; (800e2a8 <__libc_init_array+0x3c>)
 800e272:	1b64      	subs	r4, r4, r5
 800e274:	10a4      	asrs	r4, r4, #2
 800e276:	2600      	movs	r6, #0
 800e278:	42a6      	cmp	r6, r4
 800e27a:	d109      	bne.n	800e290 <__libc_init_array+0x24>
 800e27c:	4d0b      	ldr	r5, [pc, #44]	; (800e2ac <__libc_init_array+0x40>)
 800e27e:	4c0c      	ldr	r4, [pc, #48]	; (800e2b0 <__libc_init_array+0x44>)
 800e280:	f001 f800 	bl	800f284 <_init>
 800e284:	1b64      	subs	r4, r4, r5
 800e286:	10a4      	asrs	r4, r4, #2
 800e288:	2600      	movs	r6, #0
 800e28a:	42a6      	cmp	r6, r4
 800e28c:	d105      	bne.n	800e29a <__libc_init_array+0x2e>
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	f855 3b04 	ldr.w	r3, [r5], #4
 800e294:	4798      	blx	r3
 800e296:	3601      	adds	r6, #1
 800e298:	e7ee      	b.n	800e278 <__libc_init_array+0xc>
 800e29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29e:	4798      	blx	r3
 800e2a0:	3601      	adds	r6, #1
 800e2a2:	e7f2      	b.n	800e28a <__libc_init_array+0x1e>
 800e2a4:	0800fcec 	.word	0x0800fcec
 800e2a8:	0800fcec 	.word	0x0800fcec
 800e2ac:	0800fcec 	.word	0x0800fcec
 800e2b0:	0800fcf0 	.word	0x0800fcf0

0800e2b4 <__retarget_lock_acquire_recursive>:
 800e2b4:	4770      	bx	lr

0800e2b6 <__retarget_lock_release_recursive>:
 800e2b6:	4770      	bx	lr

0800e2b8 <strcpy>:
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2be:	f803 2b01 	strb.w	r2, [r3], #1
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	d1f9      	bne.n	800e2ba <strcpy+0x2>
 800e2c6:	4770      	bx	lr

0800e2c8 <__assert_func>:
 800e2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2ca:	4614      	mov	r4, r2
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <__assert_func+0x2c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	68d8      	ldr	r0, [r3, #12]
 800e2d6:	b14c      	cbz	r4, 800e2ec <__assert_func+0x24>
 800e2d8:	4b07      	ldr	r3, [pc, #28]	; (800e2f8 <__assert_func+0x30>)
 800e2da:	9100      	str	r1, [sp, #0]
 800e2dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2e0:	4906      	ldr	r1, [pc, #24]	; (800e2fc <__assert_func+0x34>)
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f000 fca4 	bl	800ec30 <fiprintf>
 800e2e8:	f000 fcec 	bl	800ecc4 <abort>
 800e2ec:	4b04      	ldr	r3, [pc, #16]	; (800e300 <__assert_func+0x38>)
 800e2ee:	461c      	mov	r4, r3
 800e2f0:	e7f3      	b.n	800e2da <__assert_func+0x12>
 800e2f2:	bf00      	nop
 800e2f4:	20000064 	.word	0x20000064
 800e2f8:	0800fc73 	.word	0x0800fc73
 800e2fc:	0800fc80 	.word	0x0800fc80
 800e300:	0800fcae 	.word	0x0800fcae

0800e304 <_free_r>:
 800e304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e306:	2900      	cmp	r1, #0
 800e308:	d044      	beq.n	800e394 <_free_r+0x90>
 800e30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e30e:	9001      	str	r0, [sp, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f1a1 0404 	sub.w	r4, r1, #4
 800e316:	bfb8      	it	lt
 800e318:	18e4      	addlt	r4, r4, r3
 800e31a:	f000 f8e7 	bl	800e4ec <__malloc_lock>
 800e31e:	4a1e      	ldr	r2, [pc, #120]	; (800e398 <_free_r+0x94>)
 800e320:	9801      	ldr	r0, [sp, #4]
 800e322:	6813      	ldr	r3, [r2, #0]
 800e324:	b933      	cbnz	r3, 800e334 <_free_r+0x30>
 800e326:	6063      	str	r3, [r4, #4]
 800e328:	6014      	str	r4, [r2, #0]
 800e32a:	b003      	add	sp, #12
 800e32c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e330:	f000 b8e2 	b.w	800e4f8 <__malloc_unlock>
 800e334:	42a3      	cmp	r3, r4
 800e336:	d908      	bls.n	800e34a <_free_r+0x46>
 800e338:	6825      	ldr	r5, [r4, #0]
 800e33a:	1961      	adds	r1, r4, r5
 800e33c:	428b      	cmp	r3, r1
 800e33e:	bf01      	itttt	eq
 800e340:	6819      	ldreq	r1, [r3, #0]
 800e342:	685b      	ldreq	r3, [r3, #4]
 800e344:	1949      	addeq	r1, r1, r5
 800e346:	6021      	streq	r1, [r4, #0]
 800e348:	e7ed      	b.n	800e326 <_free_r+0x22>
 800e34a:	461a      	mov	r2, r3
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b10b      	cbz	r3, 800e354 <_free_r+0x50>
 800e350:	42a3      	cmp	r3, r4
 800e352:	d9fa      	bls.n	800e34a <_free_r+0x46>
 800e354:	6811      	ldr	r1, [r2, #0]
 800e356:	1855      	adds	r5, r2, r1
 800e358:	42a5      	cmp	r5, r4
 800e35a:	d10b      	bne.n	800e374 <_free_r+0x70>
 800e35c:	6824      	ldr	r4, [r4, #0]
 800e35e:	4421      	add	r1, r4
 800e360:	1854      	adds	r4, r2, r1
 800e362:	42a3      	cmp	r3, r4
 800e364:	6011      	str	r1, [r2, #0]
 800e366:	d1e0      	bne.n	800e32a <_free_r+0x26>
 800e368:	681c      	ldr	r4, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	6053      	str	r3, [r2, #4]
 800e36e:	440c      	add	r4, r1
 800e370:	6014      	str	r4, [r2, #0]
 800e372:	e7da      	b.n	800e32a <_free_r+0x26>
 800e374:	d902      	bls.n	800e37c <_free_r+0x78>
 800e376:	230c      	movs	r3, #12
 800e378:	6003      	str	r3, [r0, #0]
 800e37a:	e7d6      	b.n	800e32a <_free_r+0x26>
 800e37c:	6825      	ldr	r5, [r4, #0]
 800e37e:	1961      	adds	r1, r4, r5
 800e380:	428b      	cmp	r3, r1
 800e382:	bf04      	itt	eq
 800e384:	6819      	ldreq	r1, [r3, #0]
 800e386:	685b      	ldreq	r3, [r3, #4]
 800e388:	6063      	str	r3, [r4, #4]
 800e38a:	bf04      	itt	eq
 800e38c:	1949      	addeq	r1, r1, r5
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	6054      	str	r4, [r2, #4]
 800e392:	e7ca      	b.n	800e32a <_free_r+0x26>
 800e394:	b003      	add	sp, #12
 800e396:	bd30      	pop	{r4, r5, pc}
 800e398:	20003a80 	.word	0x20003a80

0800e39c <malloc>:
 800e39c:	4b02      	ldr	r3, [pc, #8]	; (800e3a8 <malloc+0xc>)
 800e39e:	4601      	mov	r1, r0
 800e3a0:	6818      	ldr	r0, [r3, #0]
 800e3a2:	f000 b823 	b.w	800e3ec <_malloc_r>
 800e3a6:	bf00      	nop
 800e3a8:	20000064 	.word	0x20000064

0800e3ac <sbrk_aligned>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	4e0e      	ldr	r6, [pc, #56]	; (800e3e8 <sbrk_aligned+0x3c>)
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	6831      	ldr	r1, [r6, #0]
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	b911      	cbnz	r1, 800e3be <sbrk_aligned+0x12>
 800e3b8:	f000 fc66 	bl	800ec88 <_sbrk_r>
 800e3bc:	6030      	str	r0, [r6, #0]
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f000 fc61 	bl	800ec88 <_sbrk_r>
 800e3c6:	1c43      	adds	r3, r0, #1
 800e3c8:	d00a      	beq.n	800e3e0 <sbrk_aligned+0x34>
 800e3ca:	1cc4      	adds	r4, r0, #3
 800e3cc:	f024 0403 	bic.w	r4, r4, #3
 800e3d0:	42a0      	cmp	r0, r4
 800e3d2:	d007      	beq.n	800e3e4 <sbrk_aligned+0x38>
 800e3d4:	1a21      	subs	r1, r4, r0
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f000 fc56 	bl	800ec88 <_sbrk_r>
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d101      	bne.n	800e3e4 <sbrk_aligned+0x38>
 800e3e0:	f04f 34ff 	mov.w	r4, #4294967295
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	20003a84 	.word	0x20003a84

0800e3ec <_malloc_r>:
 800e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f0:	1ccd      	adds	r5, r1, #3
 800e3f2:	f025 0503 	bic.w	r5, r5, #3
 800e3f6:	3508      	adds	r5, #8
 800e3f8:	2d0c      	cmp	r5, #12
 800e3fa:	bf38      	it	cc
 800e3fc:	250c      	movcc	r5, #12
 800e3fe:	2d00      	cmp	r5, #0
 800e400:	4607      	mov	r7, r0
 800e402:	db01      	blt.n	800e408 <_malloc_r+0x1c>
 800e404:	42a9      	cmp	r1, r5
 800e406:	d905      	bls.n	800e414 <_malloc_r+0x28>
 800e408:	230c      	movs	r3, #12
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	2600      	movs	r6, #0
 800e40e:	4630      	mov	r0, r6
 800e410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e414:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e4e8 <_malloc_r+0xfc>
 800e418:	f000 f868 	bl	800e4ec <__malloc_lock>
 800e41c:	f8d8 3000 	ldr.w	r3, [r8]
 800e420:	461c      	mov	r4, r3
 800e422:	bb5c      	cbnz	r4, 800e47c <_malloc_r+0x90>
 800e424:	4629      	mov	r1, r5
 800e426:	4638      	mov	r0, r7
 800e428:	f7ff ffc0 	bl	800e3ac <sbrk_aligned>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	4604      	mov	r4, r0
 800e430:	d155      	bne.n	800e4de <_malloc_r+0xf2>
 800e432:	f8d8 4000 	ldr.w	r4, [r8]
 800e436:	4626      	mov	r6, r4
 800e438:	2e00      	cmp	r6, #0
 800e43a:	d145      	bne.n	800e4c8 <_malloc_r+0xdc>
 800e43c:	2c00      	cmp	r4, #0
 800e43e:	d048      	beq.n	800e4d2 <_malloc_r+0xe6>
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	4631      	mov	r1, r6
 800e444:	4638      	mov	r0, r7
 800e446:	eb04 0903 	add.w	r9, r4, r3
 800e44a:	f000 fc1d 	bl	800ec88 <_sbrk_r>
 800e44e:	4581      	cmp	r9, r0
 800e450:	d13f      	bne.n	800e4d2 <_malloc_r+0xe6>
 800e452:	6821      	ldr	r1, [r4, #0]
 800e454:	1a6d      	subs	r5, r5, r1
 800e456:	4629      	mov	r1, r5
 800e458:	4638      	mov	r0, r7
 800e45a:	f7ff ffa7 	bl	800e3ac <sbrk_aligned>
 800e45e:	3001      	adds	r0, #1
 800e460:	d037      	beq.n	800e4d2 <_malloc_r+0xe6>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	442b      	add	r3, r5
 800e466:	6023      	str	r3, [r4, #0]
 800e468:	f8d8 3000 	ldr.w	r3, [r8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d038      	beq.n	800e4e2 <_malloc_r+0xf6>
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	42a2      	cmp	r2, r4
 800e474:	d12b      	bne.n	800e4ce <_malloc_r+0xe2>
 800e476:	2200      	movs	r2, #0
 800e478:	605a      	str	r2, [r3, #4]
 800e47a:	e00f      	b.n	800e49c <_malloc_r+0xb0>
 800e47c:	6822      	ldr	r2, [r4, #0]
 800e47e:	1b52      	subs	r2, r2, r5
 800e480:	d41f      	bmi.n	800e4c2 <_malloc_r+0xd6>
 800e482:	2a0b      	cmp	r2, #11
 800e484:	d917      	bls.n	800e4b6 <_malloc_r+0xca>
 800e486:	1961      	adds	r1, r4, r5
 800e488:	42a3      	cmp	r3, r4
 800e48a:	6025      	str	r5, [r4, #0]
 800e48c:	bf18      	it	ne
 800e48e:	6059      	strne	r1, [r3, #4]
 800e490:	6863      	ldr	r3, [r4, #4]
 800e492:	bf08      	it	eq
 800e494:	f8c8 1000 	streq.w	r1, [r8]
 800e498:	5162      	str	r2, [r4, r5]
 800e49a:	604b      	str	r3, [r1, #4]
 800e49c:	4638      	mov	r0, r7
 800e49e:	f104 060b 	add.w	r6, r4, #11
 800e4a2:	f000 f829 	bl	800e4f8 <__malloc_unlock>
 800e4a6:	f026 0607 	bic.w	r6, r6, #7
 800e4aa:	1d23      	adds	r3, r4, #4
 800e4ac:	1af2      	subs	r2, r6, r3
 800e4ae:	d0ae      	beq.n	800e40e <_malloc_r+0x22>
 800e4b0:	1b9b      	subs	r3, r3, r6
 800e4b2:	50a3      	str	r3, [r4, r2]
 800e4b4:	e7ab      	b.n	800e40e <_malloc_r+0x22>
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	6862      	ldr	r2, [r4, #4]
 800e4ba:	d1dd      	bne.n	800e478 <_malloc_r+0x8c>
 800e4bc:	f8c8 2000 	str.w	r2, [r8]
 800e4c0:	e7ec      	b.n	800e49c <_malloc_r+0xb0>
 800e4c2:	4623      	mov	r3, r4
 800e4c4:	6864      	ldr	r4, [r4, #4]
 800e4c6:	e7ac      	b.n	800e422 <_malloc_r+0x36>
 800e4c8:	4634      	mov	r4, r6
 800e4ca:	6876      	ldr	r6, [r6, #4]
 800e4cc:	e7b4      	b.n	800e438 <_malloc_r+0x4c>
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	e7cc      	b.n	800e46c <_malloc_r+0x80>
 800e4d2:	230c      	movs	r3, #12
 800e4d4:	603b      	str	r3, [r7, #0]
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	f000 f80e 	bl	800e4f8 <__malloc_unlock>
 800e4dc:	e797      	b.n	800e40e <_malloc_r+0x22>
 800e4de:	6025      	str	r5, [r4, #0]
 800e4e0:	e7dc      	b.n	800e49c <_malloc_r+0xb0>
 800e4e2:	605b      	str	r3, [r3, #4]
 800e4e4:	deff      	udf	#255	; 0xff
 800e4e6:	bf00      	nop
 800e4e8:	20003a80 	.word	0x20003a80

0800e4ec <__malloc_lock>:
 800e4ec:	4801      	ldr	r0, [pc, #4]	; (800e4f4 <__malloc_lock+0x8>)
 800e4ee:	f7ff bee1 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e4f2:	bf00      	nop
 800e4f4:	20003a7c 	.word	0x20003a7c

0800e4f8 <__malloc_unlock>:
 800e4f8:	4801      	ldr	r0, [pc, #4]	; (800e500 <__malloc_unlock+0x8>)
 800e4fa:	f7ff bedc 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e4fe:	bf00      	nop
 800e500:	20003a7c 	.word	0x20003a7c

0800e504 <__ssputs_r>:
 800e504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e508:	688e      	ldr	r6, [r1, #8]
 800e50a:	461f      	mov	r7, r3
 800e50c:	42be      	cmp	r6, r7
 800e50e:	680b      	ldr	r3, [r1, #0]
 800e510:	4682      	mov	sl, r0
 800e512:	460c      	mov	r4, r1
 800e514:	4690      	mov	r8, r2
 800e516:	d82c      	bhi.n	800e572 <__ssputs_r+0x6e>
 800e518:	898a      	ldrh	r2, [r1, #12]
 800e51a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e51e:	d026      	beq.n	800e56e <__ssputs_r+0x6a>
 800e520:	6965      	ldr	r5, [r4, #20]
 800e522:	6909      	ldr	r1, [r1, #16]
 800e524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e528:	eba3 0901 	sub.w	r9, r3, r1
 800e52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e530:	1c7b      	adds	r3, r7, #1
 800e532:	444b      	add	r3, r9
 800e534:	106d      	asrs	r5, r5, #1
 800e536:	429d      	cmp	r5, r3
 800e538:	bf38      	it	cc
 800e53a:	461d      	movcc	r5, r3
 800e53c:	0553      	lsls	r3, r2, #21
 800e53e:	d527      	bpl.n	800e590 <__ssputs_r+0x8c>
 800e540:	4629      	mov	r1, r5
 800e542:	f7ff ff53 	bl	800e3ec <_malloc_r>
 800e546:	4606      	mov	r6, r0
 800e548:	b360      	cbz	r0, 800e5a4 <__ssputs_r+0xa0>
 800e54a:	6921      	ldr	r1, [r4, #16]
 800e54c:	464a      	mov	r2, r9
 800e54e:	f000 fbab 	bl	800eca8 <memcpy>
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e55c:	81a3      	strh	r3, [r4, #12]
 800e55e:	6126      	str	r6, [r4, #16]
 800e560:	6165      	str	r5, [r4, #20]
 800e562:	444e      	add	r6, r9
 800e564:	eba5 0509 	sub.w	r5, r5, r9
 800e568:	6026      	str	r6, [r4, #0]
 800e56a:	60a5      	str	r5, [r4, #8]
 800e56c:	463e      	mov	r6, r7
 800e56e:	42be      	cmp	r6, r7
 800e570:	d900      	bls.n	800e574 <__ssputs_r+0x70>
 800e572:	463e      	mov	r6, r7
 800e574:	6820      	ldr	r0, [r4, #0]
 800e576:	4632      	mov	r2, r6
 800e578:	4641      	mov	r1, r8
 800e57a:	f000 fb6b 	bl	800ec54 <memmove>
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	1b9b      	subs	r3, r3, r6
 800e582:	60a3      	str	r3, [r4, #8]
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	4433      	add	r3, r6
 800e588:	6023      	str	r3, [r4, #0]
 800e58a:	2000      	movs	r0, #0
 800e58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e590:	462a      	mov	r2, r5
 800e592:	f000 fb9e 	bl	800ecd2 <_realloc_r>
 800e596:	4606      	mov	r6, r0
 800e598:	2800      	cmp	r0, #0
 800e59a:	d1e0      	bne.n	800e55e <__ssputs_r+0x5a>
 800e59c:	6921      	ldr	r1, [r4, #16]
 800e59e:	4650      	mov	r0, sl
 800e5a0:	f7ff feb0 	bl	800e304 <_free_r>
 800e5a4:	230c      	movs	r3, #12
 800e5a6:	f8ca 3000 	str.w	r3, [sl]
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b0:	81a3      	strh	r3, [r4, #12]
 800e5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b6:	e7e9      	b.n	800e58c <__ssputs_r+0x88>

0800e5b8 <_svfiprintf_r>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	4698      	mov	r8, r3
 800e5be:	898b      	ldrh	r3, [r1, #12]
 800e5c0:	061b      	lsls	r3, r3, #24
 800e5c2:	b09d      	sub	sp, #116	; 0x74
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	d50e      	bpl.n	800e5ea <_svfiprintf_r+0x32>
 800e5cc:	690b      	ldr	r3, [r1, #16]
 800e5ce:	b963      	cbnz	r3, 800e5ea <_svfiprintf_r+0x32>
 800e5d0:	2140      	movs	r1, #64	; 0x40
 800e5d2:	f7ff ff0b 	bl	800e3ec <_malloc_r>
 800e5d6:	6028      	str	r0, [r5, #0]
 800e5d8:	6128      	str	r0, [r5, #16]
 800e5da:	b920      	cbnz	r0, 800e5e6 <_svfiprintf_r+0x2e>
 800e5dc:	230c      	movs	r3, #12
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e4:	e0d0      	b.n	800e788 <_svfiprintf_r+0x1d0>
 800e5e6:	2340      	movs	r3, #64	; 0x40
 800e5e8:	616b      	str	r3, [r5, #20]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ee:	2320      	movs	r3, #32
 800e5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f8:	2330      	movs	r3, #48	; 0x30
 800e5fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e7a0 <_svfiprintf_r+0x1e8>
 800e5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e602:	f04f 0901 	mov.w	r9, #1
 800e606:	4623      	mov	r3, r4
 800e608:	469a      	mov	sl, r3
 800e60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e60e:	b10a      	cbz	r2, 800e614 <_svfiprintf_r+0x5c>
 800e610:	2a25      	cmp	r2, #37	; 0x25
 800e612:	d1f9      	bne.n	800e608 <_svfiprintf_r+0x50>
 800e614:	ebba 0b04 	subs.w	fp, sl, r4
 800e618:	d00b      	beq.n	800e632 <_svfiprintf_r+0x7a>
 800e61a:	465b      	mov	r3, fp
 800e61c:	4622      	mov	r2, r4
 800e61e:	4629      	mov	r1, r5
 800e620:	4638      	mov	r0, r7
 800e622:	f7ff ff6f 	bl	800e504 <__ssputs_r>
 800e626:	3001      	adds	r0, #1
 800e628:	f000 80a9 	beq.w	800e77e <_svfiprintf_r+0x1c6>
 800e62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e62e:	445a      	add	r2, fp
 800e630:	9209      	str	r2, [sp, #36]	; 0x24
 800e632:	f89a 3000 	ldrb.w	r3, [sl]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 80a1 	beq.w	800e77e <_svfiprintf_r+0x1c6>
 800e63c:	2300      	movs	r3, #0
 800e63e:	f04f 32ff 	mov.w	r2, #4294967295
 800e642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e646:	f10a 0a01 	add.w	sl, sl, #1
 800e64a:	9304      	str	r3, [sp, #16]
 800e64c:	9307      	str	r3, [sp, #28]
 800e64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e652:	931a      	str	r3, [sp, #104]	; 0x68
 800e654:	4654      	mov	r4, sl
 800e656:	2205      	movs	r2, #5
 800e658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65c:	4850      	ldr	r0, [pc, #320]	; (800e7a0 <_svfiprintf_r+0x1e8>)
 800e65e:	f7f1 fdd7 	bl	8000210 <memchr>
 800e662:	9a04      	ldr	r2, [sp, #16]
 800e664:	b9d8      	cbnz	r0, 800e69e <_svfiprintf_r+0xe6>
 800e666:	06d0      	lsls	r0, r2, #27
 800e668:	bf44      	itt	mi
 800e66a:	2320      	movmi	r3, #32
 800e66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e670:	0711      	lsls	r1, r2, #28
 800e672:	bf44      	itt	mi
 800e674:	232b      	movmi	r3, #43	; 0x2b
 800e676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e67a:	f89a 3000 	ldrb.w	r3, [sl]
 800e67e:	2b2a      	cmp	r3, #42	; 0x2a
 800e680:	d015      	beq.n	800e6ae <_svfiprintf_r+0xf6>
 800e682:	9a07      	ldr	r2, [sp, #28]
 800e684:	4654      	mov	r4, sl
 800e686:	2000      	movs	r0, #0
 800e688:	f04f 0c0a 	mov.w	ip, #10
 800e68c:	4621      	mov	r1, r4
 800e68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e692:	3b30      	subs	r3, #48	; 0x30
 800e694:	2b09      	cmp	r3, #9
 800e696:	d94d      	bls.n	800e734 <_svfiprintf_r+0x17c>
 800e698:	b1b0      	cbz	r0, 800e6c8 <_svfiprintf_r+0x110>
 800e69a:	9207      	str	r2, [sp, #28]
 800e69c:	e014      	b.n	800e6c8 <_svfiprintf_r+0x110>
 800e69e:	eba0 0308 	sub.w	r3, r0, r8
 800e6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	46a2      	mov	sl, r4
 800e6ac:	e7d2      	b.n	800e654 <_svfiprintf_r+0x9c>
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	1d19      	adds	r1, r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	9103      	str	r1, [sp, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	bfbb      	ittet	lt
 800e6ba:	425b      	neglt	r3, r3
 800e6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e6c0:	9307      	strge	r3, [sp, #28]
 800e6c2:	9307      	strlt	r3, [sp, #28]
 800e6c4:	bfb8      	it	lt
 800e6c6:	9204      	strlt	r2, [sp, #16]
 800e6c8:	7823      	ldrb	r3, [r4, #0]
 800e6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800e6cc:	d10c      	bne.n	800e6e8 <_svfiprintf_r+0x130>
 800e6ce:	7863      	ldrb	r3, [r4, #1]
 800e6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e6d2:	d134      	bne.n	800e73e <_svfiprintf_r+0x186>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	1d1a      	adds	r2, r3, #4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	9203      	str	r2, [sp, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bfb8      	it	lt
 800e6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6e4:	3402      	adds	r4, #2
 800e6e6:	9305      	str	r3, [sp, #20]
 800e6e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e7b0 <_svfiprintf_r+0x1f8>
 800e6ec:	7821      	ldrb	r1, [r4, #0]
 800e6ee:	2203      	movs	r2, #3
 800e6f0:	4650      	mov	r0, sl
 800e6f2:	f7f1 fd8d 	bl	8000210 <memchr>
 800e6f6:	b138      	cbz	r0, 800e708 <_svfiprintf_r+0x150>
 800e6f8:	9b04      	ldr	r3, [sp, #16]
 800e6fa:	eba0 000a 	sub.w	r0, r0, sl
 800e6fe:	2240      	movs	r2, #64	; 0x40
 800e700:	4082      	lsls	r2, r0
 800e702:	4313      	orrs	r3, r2
 800e704:	3401      	adds	r4, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70c:	4825      	ldr	r0, [pc, #148]	; (800e7a4 <_svfiprintf_r+0x1ec>)
 800e70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e712:	2206      	movs	r2, #6
 800e714:	f7f1 fd7c 	bl	8000210 <memchr>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d038      	beq.n	800e78e <_svfiprintf_r+0x1d6>
 800e71c:	4b22      	ldr	r3, [pc, #136]	; (800e7a8 <_svfiprintf_r+0x1f0>)
 800e71e:	bb1b      	cbnz	r3, 800e768 <_svfiprintf_r+0x1b0>
 800e720:	9b03      	ldr	r3, [sp, #12]
 800e722:	3307      	adds	r3, #7
 800e724:	f023 0307 	bic.w	r3, r3, #7
 800e728:	3308      	adds	r3, #8
 800e72a:	9303      	str	r3, [sp, #12]
 800e72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72e:	4433      	add	r3, r6
 800e730:	9309      	str	r3, [sp, #36]	; 0x24
 800e732:	e768      	b.n	800e606 <_svfiprintf_r+0x4e>
 800e734:	fb0c 3202 	mla	r2, ip, r2, r3
 800e738:	460c      	mov	r4, r1
 800e73a:	2001      	movs	r0, #1
 800e73c:	e7a6      	b.n	800e68c <_svfiprintf_r+0xd4>
 800e73e:	2300      	movs	r3, #0
 800e740:	3401      	adds	r4, #1
 800e742:	9305      	str	r3, [sp, #20]
 800e744:	4619      	mov	r1, r3
 800e746:	f04f 0c0a 	mov.w	ip, #10
 800e74a:	4620      	mov	r0, r4
 800e74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e750:	3a30      	subs	r2, #48	; 0x30
 800e752:	2a09      	cmp	r2, #9
 800e754:	d903      	bls.n	800e75e <_svfiprintf_r+0x1a6>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d0c6      	beq.n	800e6e8 <_svfiprintf_r+0x130>
 800e75a:	9105      	str	r1, [sp, #20]
 800e75c:	e7c4      	b.n	800e6e8 <_svfiprintf_r+0x130>
 800e75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e762:	4604      	mov	r4, r0
 800e764:	2301      	movs	r3, #1
 800e766:	e7f0      	b.n	800e74a <_svfiprintf_r+0x192>
 800e768:	ab03      	add	r3, sp, #12
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	462a      	mov	r2, r5
 800e76e:	4b0f      	ldr	r3, [pc, #60]	; (800e7ac <_svfiprintf_r+0x1f4>)
 800e770:	a904      	add	r1, sp, #16
 800e772:	4638      	mov	r0, r7
 800e774:	f3af 8000 	nop.w
 800e778:	1c42      	adds	r2, r0, #1
 800e77a:	4606      	mov	r6, r0
 800e77c:	d1d6      	bne.n	800e72c <_svfiprintf_r+0x174>
 800e77e:	89ab      	ldrh	r3, [r5, #12]
 800e780:	065b      	lsls	r3, r3, #25
 800e782:	f53f af2d 	bmi.w	800e5e0 <_svfiprintf_r+0x28>
 800e786:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e788:	b01d      	add	sp, #116	; 0x74
 800e78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78e:	ab03      	add	r3, sp, #12
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	462a      	mov	r2, r5
 800e794:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <_svfiprintf_r+0x1f4>)
 800e796:	a904      	add	r1, sp, #16
 800e798:	4638      	mov	r0, r7
 800e79a:	f000 f879 	bl	800e890 <_printf_i>
 800e79e:	e7eb      	b.n	800e778 <_svfiprintf_r+0x1c0>
 800e7a0:	0800fcaf 	.word	0x0800fcaf
 800e7a4:	0800fcb9 	.word	0x0800fcb9
 800e7a8:	00000000 	.word	0x00000000
 800e7ac:	0800e505 	.word	0x0800e505
 800e7b0:	0800fcb5 	.word	0x0800fcb5

0800e7b4 <_printf_common>:
 800e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	4616      	mov	r6, r2
 800e7ba:	4699      	mov	r9, r3
 800e7bc:	688a      	ldr	r2, [r1, #8]
 800e7be:	690b      	ldr	r3, [r1, #16]
 800e7c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	bfb8      	it	lt
 800e7c8:	4613      	movlt	r3, r2
 800e7ca:	6033      	str	r3, [r6, #0]
 800e7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7d0:	4607      	mov	r7, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	b10a      	cbz	r2, 800e7da <_printf_common+0x26>
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	6033      	str	r3, [r6, #0]
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	0699      	lsls	r1, r3, #26
 800e7de:	bf42      	ittt	mi
 800e7e0:	6833      	ldrmi	r3, [r6, #0]
 800e7e2:	3302      	addmi	r3, #2
 800e7e4:	6033      	strmi	r3, [r6, #0]
 800e7e6:	6825      	ldr	r5, [r4, #0]
 800e7e8:	f015 0506 	ands.w	r5, r5, #6
 800e7ec:	d106      	bne.n	800e7fc <_printf_common+0x48>
 800e7ee:	f104 0a19 	add.w	sl, r4, #25
 800e7f2:	68e3      	ldr	r3, [r4, #12]
 800e7f4:	6832      	ldr	r2, [r6, #0]
 800e7f6:	1a9b      	subs	r3, r3, r2
 800e7f8:	42ab      	cmp	r3, r5
 800e7fa:	dc26      	bgt.n	800e84a <_printf_common+0x96>
 800e7fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e800:	1e13      	subs	r3, r2, #0
 800e802:	6822      	ldr	r2, [r4, #0]
 800e804:	bf18      	it	ne
 800e806:	2301      	movne	r3, #1
 800e808:	0692      	lsls	r2, r2, #26
 800e80a:	d42b      	bmi.n	800e864 <_printf_common+0xb0>
 800e80c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e810:	4649      	mov	r1, r9
 800e812:	4638      	mov	r0, r7
 800e814:	47c0      	blx	r8
 800e816:	3001      	adds	r0, #1
 800e818:	d01e      	beq.n	800e858 <_printf_common+0xa4>
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	6922      	ldr	r2, [r4, #16]
 800e81e:	f003 0306 	and.w	r3, r3, #6
 800e822:	2b04      	cmp	r3, #4
 800e824:	bf02      	ittt	eq
 800e826:	68e5      	ldreq	r5, [r4, #12]
 800e828:	6833      	ldreq	r3, [r6, #0]
 800e82a:	1aed      	subeq	r5, r5, r3
 800e82c:	68a3      	ldr	r3, [r4, #8]
 800e82e:	bf0c      	ite	eq
 800e830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e834:	2500      	movne	r5, #0
 800e836:	4293      	cmp	r3, r2
 800e838:	bfc4      	itt	gt
 800e83a:	1a9b      	subgt	r3, r3, r2
 800e83c:	18ed      	addgt	r5, r5, r3
 800e83e:	2600      	movs	r6, #0
 800e840:	341a      	adds	r4, #26
 800e842:	42b5      	cmp	r5, r6
 800e844:	d11a      	bne.n	800e87c <_printf_common+0xc8>
 800e846:	2000      	movs	r0, #0
 800e848:	e008      	b.n	800e85c <_printf_common+0xa8>
 800e84a:	2301      	movs	r3, #1
 800e84c:	4652      	mov	r2, sl
 800e84e:	4649      	mov	r1, r9
 800e850:	4638      	mov	r0, r7
 800e852:	47c0      	blx	r8
 800e854:	3001      	adds	r0, #1
 800e856:	d103      	bne.n	800e860 <_printf_common+0xac>
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e860:	3501      	adds	r5, #1
 800e862:	e7c6      	b.n	800e7f2 <_printf_common+0x3e>
 800e864:	18e1      	adds	r1, r4, r3
 800e866:	1c5a      	adds	r2, r3, #1
 800e868:	2030      	movs	r0, #48	; 0x30
 800e86a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e86e:	4422      	add	r2, r4
 800e870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e878:	3302      	adds	r3, #2
 800e87a:	e7c7      	b.n	800e80c <_printf_common+0x58>
 800e87c:	2301      	movs	r3, #1
 800e87e:	4622      	mov	r2, r4
 800e880:	4649      	mov	r1, r9
 800e882:	4638      	mov	r0, r7
 800e884:	47c0      	blx	r8
 800e886:	3001      	adds	r0, #1
 800e888:	d0e6      	beq.n	800e858 <_printf_common+0xa4>
 800e88a:	3601      	adds	r6, #1
 800e88c:	e7d9      	b.n	800e842 <_printf_common+0x8e>
	...

0800e890 <_printf_i>:
 800e890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e894:	7e0f      	ldrb	r7, [r1, #24]
 800e896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e898:	2f78      	cmp	r7, #120	; 0x78
 800e89a:	4691      	mov	r9, r2
 800e89c:	4680      	mov	r8, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	469a      	mov	sl, r3
 800e8a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8a6:	d807      	bhi.n	800e8b8 <_printf_i+0x28>
 800e8a8:	2f62      	cmp	r7, #98	; 0x62
 800e8aa:	d80a      	bhi.n	800e8c2 <_printf_i+0x32>
 800e8ac:	2f00      	cmp	r7, #0
 800e8ae:	f000 80d4 	beq.w	800ea5a <_printf_i+0x1ca>
 800e8b2:	2f58      	cmp	r7, #88	; 0x58
 800e8b4:	f000 80c0 	beq.w	800ea38 <_printf_i+0x1a8>
 800e8b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8c0:	e03a      	b.n	800e938 <_printf_i+0xa8>
 800e8c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8c6:	2b15      	cmp	r3, #21
 800e8c8:	d8f6      	bhi.n	800e8b8 <_printf_i+0x28>
 800e8ca:	a101      	add	r1, pc, #4	; (adr r1, 800e8d0 <_printf_i+0x40>)
 800e8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8d0:	0800e929 	.word	0x0800e929
 800e8d4:	0800e93d 	.word	0x0800e93d
 800e8d8:	0800e8b9 	.word	0x0800e8b9
 800e8dc:	0800e8b9 	.word	0x0800e8b9
 800e8e0:	0800e8b9 	.word	0x0800e8b9
 800e8e4:	0800e8b9 	.word	0x0800e8b9
 800e8e8:	0800e93d 	.word	0x0800e93d
 800e8ec:	0800e8b9 	.word	0x0800e8b9
 800e8f0:	0800e8b9 	.word	0x0800e8b9
 800e8f4:	0800e8b9 	.word	0x0800e8b9
 800e8f8:	0800e8b9 	.word	0x0800e8b9
 800e8fc:	0800ea41 	.word	0x0800ea41
 800e900:	0800e969 	.word	0x0800e969
 800e904:	0800e9fb 	.word	0x0800e9fb
 800e908:	0800e8b9 	.word	0x0800e8b9
 800e90c:	0800e8b9 	.word	0x0800e8b9
 800e910:	0800ea63 	.word	0x0800ea63
 800e914:	0800e8b9 	.word	0x0800e8b9
 800e918:	0800e969 	.word	0x0800e969
 800e91c:	0800e8b9 	.word	0x0800e8b9
 800e920:	0800e8b9 	.word	0x0800e8b9
 800e924:	0800ea03 	.word	0x0800ea03
 800e928:	682b      	ldr	r3, [r5, #0]
 800e92a:	1d1a      	adds	r2, r3, #4
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	602a      	str	r2, [r5, #0]
 800e930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e938:	2301      	movs	r3, #1
 800e93a:	e09f      	b.n	800ea7c <_printf_i+0x1ec>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	682b      	ldr	r3, [r5, #0]
 800e940:	0607      	lsls	r7, r0, #24
 800e942:	f103 0104 	add.w	r1, r3, #4
 800e946:	6029      	str	r1, [r5, #0]
 800e948:	d501      	bpl.n	800e94e <_printf_i+0xbe>
 800e94a:	681e      	ldr	r6, [r3, #0]
 800e94c:	e003      	b.n	800e956 <_printf_i+0xc6>
 800e94e:	0646      	lsls	r6, r0, #25
 800e950:	d5fb      	bpl.n	800e94a <_printf_i+0xba>
 800e952:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e956:	2e00      	cmp	r6, #0
 800e958:	da03      	bge.n	800e962 <_printf_i+0xd2>
 800e95a:	232d      	movs	r3, #45	; 0x2d
 800e95c:	4276      	negs	r6, r6
 800e95e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e962:	485a      	ldr	r0, [pc, #360]	; (800eacc <_printf_i+0x23c>)
 800e964:	230a      	movs	r3, #10
 800e966:	e012      	b.n	800e98e <_printf_i+0xfe>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	6820      	ldr	r0, [r4, #0]
 800e96c:	1d19      	adds	r1, r3, #4
 800e96e:	6029      	str	r1, [r5, #0]
 800e970:	0605      	lsls	r5, r0, #24
 800e972:	d501      	bpl.n	800e978 <_printf_i+0xe8>
 800e974:	681e      	ldr	r6, [r3, #0]
 800e976:	e002      	b.n	800e97e <_printf_i+0xee>
 800e978:	0641      	lsls	r1, r0, #25
 800e97a:	d5fb      	bpl.n	800e974 <_printf_i+0xe4>
 800e97c:	881e      	ldrh	r6, [r3, #0]
 800e97e:	4853      	ldr	r0, [pc, #332]	; (800eacc <_printf_i+0x23c>)
 800e980:	2f6f      	cmp	r7, #111	; 0x6f
 800e982:	bf0c      	ite	eq
 800e984:	2308      	moveq	r3, #8
 800e986:	230a      	movne	r3, #10
 800e988:	2100      	movs	r1, #0
 800e98a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e98e:	6865      	ldr	r5, [r4, #4]
 800e990:	60a5      	str	r5, [r4, #8]
 800e992:	2d00      	cmp	r5, #0
 800e994:	bfa2      	ittt	ge
 800e996:	6821      	ldrge	r1, [r4, #0]
 800e998:	f021 0104 	bicge.w	r1, r1, #4
 800e99c:	6021      	strge	r1, [r4, #0]
 800e99e:	b90e      	cbnz	r6, 800e9a4 <_printf_i+0x114>
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	d04b      	beq.n	800ea3c <_printf_i+0x1ac>
 800e9a4:	4615      	mov	r5, r2
 800e9a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9aa:	fb03 6711 	mls	r7, r3, r1, r6
 800e9ae:	5dc7      	ldrb	r7, [r0, r7]
 800e9b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9b4:	4637      	mov	r7, r6
 800e9b6:	42bb      	cmp	r3, r7
 800e9b8:	460e      	mov	r6, r1
 800e9ba:	d9f4      	bls.n	800e9a6 <_printf_i+0x116>
 800e9bc:	2b08      	cmp	r3, #8
 800e9be:	d10b      	bne.n	800e9d8 <_printf_i+0x148>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	07de      	lsls	r6, r3, #31
 800e9c4:	d508      	bpl.n	800e9d8 <_printf_i+0x148>
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	6861      	ldr	r1, [r4, #4]
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	bfde      	ittt	le
 800e9ce:	2330      	movle	r3, #48	; 0x30
 800e9d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e9d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e9d8:	1b52      	subs	r2, r2, r5
 800e9da:	6122      	str	r2, [r4, #16]
 800e9dc:	f8cd a000 	str.w	sl, [sp]
 800e9e0:	464b      	mov	r3, r9
 800e9e2:	aa03      	add	r2, sp, #12
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4640      	mov	r0, r8
 800e9e8:	f7ff fee4 	bl	800e7b4 <_printf_common>
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	d14a      	bne.n	800ea86 <_printf_i+0x1f6>
 800e9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f4:	b004      	add	sp, #16
 800e9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	f043 0320 	orr.w	r3, r3, #32
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	4833      	ldr	r0, [pc, #204]	; (800ead0 <_printf_i+0x240>)
 800ea04:	2778      	movs	r7, #120	; 0x78
 800ea06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	6829      	ldr	r1, [r5, #0]
 800ea0e:	061f      	lsls	r7, r3, #24
 800ea10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea14:	d402      	bmi.n	800ea1c <_printf_i+0x18c>
 800ea16:	065f      	lsls	r7, r3, #25
 800ea18:	bf48      	it	mi
 800ea1a:	b2b6      	uxthmi	r6, r6
 800ea1c:	07df      	lsls	r7, r3, #31
 800ea1e:	bf48      	it	mi
 800ea20:	f043 0320 	orrmi.w	r3, r3, #32
 800ea24:	6029      	str	r1, [r5, #0]
 800ea26:	bf48      	it	mi
 800ea28:	6023      	strmi	r3, [r4, #0]
 800ea2a:	b91e      	cbnz	r6, 800ea34 <_printf_i+0x1a4>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	f023 0320 	bic.w	r3, r3, #32
 800ea32:	6023      	str	r3, [r4, #0]
 800ea34:	2310      	movs	r3, #16
 800ea36:	e7a7      	b.n	800e988 <_printf_i+0xf8>
 800ea38:	4824      	ldr	r0, [pc, #144]	; (800eacc <_printf_i+0x23c>)
 800ea3a:	e7e4      	b.n	800ea06 <_printf_i+0x176>
 800ea3c:	4615      	mov	r5, r2
 800ea3e:	e7bd      	b.n	800e9bc <_printf_i+0x12c>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	6826      	ldr	r6, [r4, #0]
 800ea44:	6961      	ldr	r1, [r4, #20]
 800ea46:	1d18      	adds	r0, r3, #4
 800ea48:	6028      	str	r0, [r5, #0]
 800ea4a:	0635      	lsls	r5, r6, #24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	d501      	bpl.n	800ea54 <_printf_i+0x1c4>
 800ea50:	6019      	str	r1, [r3, #0]
 800ea52:	e002      	b.n	800ea5a <_printf_i+0x1ca>
 800ea54:	0670      	lsls	r0, r6, #25
 800ea56:	d5fb      	bpl.n	800ea50 <_printf_i+0x1c0>
 800ea58:	8019      	strh	r1, [r3, #0]
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	6123      	str	r3, [r4, #16]
 800ea5e:	4615      	mov	r5, r2
 800ea60:	e7bc      	b.n	800e9dc <_printf_i+0x14c>
 800ea62:	682b      	ldr	r3, [r5, #0]
 800ea64:	1d1a      	adds	r2, r3, #4
 800ea66:	602a      	str	r2, [r5, #0]
 800ea68:	681d      	ldr	r5, [r3, #0]
 800ea6a:	6862      	ldr	r2, [r4, #4]
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f7f1 fbce 	bl	8000210 <memchr>
 800ea74:	b108      	cbz	r0, 800ea7a <_printf_i+0x1ea>
 800ea76:	1b40      	subs	r0, r0, r5
 800ea78:	6060      	str	r0, [r4, #4]
 800ea7a:	6863      	ldr	r3, [r4, #4]
 800ea7c:	6123      	str	r3, [r4, #16]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea84:	e7aa      	b.n	800e9dc <_printf_i+0x14c>
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	462a      	mov	r2, r5
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	47d0      	blx	sl
 800ea90:	3001      	adds	r0, #1
 800ea92:	d0ad      	beq.n	800e9f0 <_printf_i+0x160>
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	079b      	lsls	r3, r3, #30
 800ea98:	d413      	bmi.n	800eac2 <_printf_i+0x232>
 800ea9a:	68e0      	ldr	r0, [r4, #12]
 800ea9c:	9b03      	ldr	r3, [sp, #12]
 800ea9e:	4298      	cmp	r0, r3
 800eaa0:	bfb8      	it	lt
 800eaa2:	4618      	movlt	r0, r3
 800eaa4:	e7a6      	b.n	800e9f4 <_printf_i+0x164>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4632      	mov	r2, r6
 800eaaa:	4649      	mov	r1, r9
 800eaac:	4640      	mov	r0, r8
 800eaae:	47d0      	blx	sl
 800eab0:	3001      	adds	r0, #1
 800eab2:	d09d      	beq.n	800e9f0 <_printf_i+0x160>
 800eab4:	3501      	adds	r5, #1
 800eab6:	68e3      	ldr	r3, [r4, #12]
 800eab8:	9903      	ldr	r1, [sp, #12]
 800eaba:	1a5b      	subs	r3, r3, r1
 800eabc:	42ab      	cmp	r3, r5
 800eabe:	dcf2      	bgt.n	800eaa6 <_printf_i+0x216>
 800eac0:	e7eb      	b.n	800ea9a <_printf_i+0x20a>
 800eac2:	2500      	movs	r5, #0
 800eac4:	f104 0619 	add.w	r6, r4, #25
 800eac8:	e7f5      	b.n	800eab6 <_printf_i+0x226>
 800eaca:	bf00      	nop
 800eacc:	0800fcc0 	.word	0x0800fcc0
 800ead0:	0800fcd1 	.word	0x0800fcd1

0800ead4 <__sflush_r>:
 800ead4:	898a      	ldrh	r2, [r1, #12]
 800ead6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eada:	4605      	mov	r5, r0
 800eadc:	0710      	lsls	r0, r2, #28
 800eade:	460c      	mov	r4, r1
 800eae0:	d458      	bmi.n	800eb94 <__sflush_r+0xc0>
 800eae2:	684b      	ldr	r3, [r1, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dc05      	bgt.n	800eaf4 <__sflush_r+0x20>
 800eae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dc02      	bgt.n	800eaf4 <__sflush_r+0x20>
 800eaee:	2000      	movs	r0, #0
 800eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	d0f9      	beq.n	800eaee <__sflush_r+0x1a>
 800eafa:	2300      	movs	r3, #0
 800eafc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb00:	682f      	ldr	r7, [r5, #0]
 800eb02:	6a21      	ldr	r1, [r4, #32]
 800eb04:	602b      	str	r3, [r5, #0]
 800eb06:	d032      	beq.n	800eb6e <__sflush_r+0x9a>
 800eb08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	075a      	lsls	r2, r3, #29
 800eb0e:	d505      	bpl.n	800eb1c <__sflush_r+0x48>
 800eb10:	6863      	ldr	r3, [r4, #4]
 800eb12:	1ac0      	subs	r0, r0, r3
 800eb14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb16:	b10b      	cbz	r3, 800eb1c <__sflush_r+0x48>
 800eb18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb1a:	1ac0      	subs	r0, r0, r3
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	4602      	mov	r2, r0
 800eb20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb22:	6a21      	ldr	r1, [r4, #32]
 800eb24:	4628      	mov	r0, r5
 800eb26:	47b0      	blx	r6
 800eb28:	1c43      	adds	r3, r0, #1
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	d106      	bne.n	800eb3c <__sflush_r+0x68>
 800eb2e:	6829      	ldr	r1, [r5, #0]
 800eb30:	291d      	cmp	r1, #29
 800eb32:	d82b      	bhi.n	800eb8c <__sflush_r+0xb8>
 800eb34:	4a29      	ldr	r2, [pc, #164]	; (800ebdc <__sflush_r+0x108>)
 800eb36:	410a      	asrs	r2, r1
 800eb38:	07d6      	lsls	r6, r2, #31
 800eb3a:	d427      	bmi.n	800eb8c <__sflush_r+0xb8>
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	6062      	str	r2, [r4, #4]
 800eb40:	04d9      	lsls	r1, r3, #19
 800eb42:	6922      	ldr	r2, [r4, #16]
 800eb44:	6022      	str	r2, [r4, #0]
 800eb46:	d504      	bpl.n	800eb52 <__sflush_r+0x7e>
 800eb48:	1c42      	adds	r2, r0, #1
 800eb4a:	d101      	bne.n	800eb50 <__sflush_r+0x7c>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	b903      	cbnz	r3, 800eb52 <__sflush_r+0x7e>
 800eb50:	6560      	str	r0, [r4, #84]	; 0x54
 800eb52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb54:	602f      	str	r7, [r5, #0]
 800eb56:	2900      	cmp	r1, #0
 800eb58:	d0c9      	beq.n	800eaee <__sflush_r+0x1a>
 800eb5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb5e:	4299      	cmp	r1, r3
 800eb60:	d002      	beq.n	800eb68 <__sflush_r+0x94>
 800eb62:	4628      	mov	r0, r5
 800eb64:	f7ff fbce 	bl	800e304 <_free_r>
 800eb68:	2000      	movs	r0, #0
 800eb6a:	6360      	str	r0, [r4, #52]	; 0x34
 800eb6c:	e7c0      	b.n	800eaf0 <__sflush_r+0x1c>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	4628      	mov	r0, r5
 800eb72:	47b0      	blx	r6
 800eb74:	1c41      	adds	r1, r0, #1
 800eb76:	d1c8      	bne.n	800eb0a <__sflush_r+0x36>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0c5      	beq.n	800eb0a <__sflush_r+0x36>
 800eb7e:	2b1d      	cmp	r3, #29
 800eb80:	d001      	beq.n	800eb86 <__sflush_r+0xb2>
 800eb82:	2b16      	cmp	r3, #22
 800eb84:	d101      	bne.n	800eb8a <__sflush_r+0xb6>
 800eb86:	602f      	str	r7, [r5, #0]
 800eb88:	e7b1      	b.n	800eaee <__sflush_r+0x1a>
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb90:	81a3      	strh	r3, [r4, #12]
 800eb92:	e7ad      	b.n	800eaf0 <__sflush_r+0x1c>
 800eb94:	690f      	ldr	r7, [r1, #16]
 800eb96:	2f00      	cmp	r7, #0
 800eb98:	d0a9      	beq.n	800eaee <__sflush_r+0x1a>
 800eb9a:	0793      	lsls	r3, r2, #30
 800eb9c:	680e      	ldr	r6, [r1, #0]
 800eb9e:	bf08      	it	eq
 800eba0:	694b      	ldreq	r3, [r1, #20]
 800eba2:	600f      	str	r7, [r1, #0]
 800eba4:	bf18      	it	ne
 800eba6:	2300      	movne	r3, #0
 800eba8:	eba6 0807 	sub.w	r8, r6, r7
 800ebac:	608b      	str	r3, [r1, #8]
 800ebae:	f1b8 0f00 	cmp.w	r8, #0
 800ebb2:	dd9c      	ble.n	800eaee <__sflush_r+0x1a>
 800ebb4:	6a21      	ldr	r1, [r4, #32]
 800ebb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebb8:	4643      	mov	r3, r8
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	47b0      	blx	r6
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	dc06      	bgt.n	800ebd2 <__sflush_r+0xfe>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd0:	e78e      	b.n	800eaf0 <__sflush_r+0x1c>
 800ebd2:	4407      	add	r7, r0
 800ebd4:	eba8 0800 	sub.w	r8, r8, r0
 800ebd8:	e7e9      	b.n	800ebae <__sflush_r+0xda>
 800ebda:	bf00      	nop
 800ebdc:	dfbffffe 	.word	0xdfbffffe

0800ebe0 <_fflush_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	690b      	ldr	r3, [r1, #16]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b913      	cbnz	r3, 800ebf0 <_fflush_r+0x10>
 800ebea:	2500      	movs	r5, #0
 800ebec:	4628      	mov	r0, r5
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	b118      	cbz	r0, 800ebfa <_fflush_r+0x1a>
 800ebf2:	6a03      	ldr	r3, [r0, #32]
 800ebf4:	b90b      	cbnz	r3, 800ebfa <_fflush_r+0x1a>
 800ebf6:	f7ff f9dd 	bl	800dfb4 <__sinit>
 800ebfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0f3      	beq.n	800ebea <_fflush_r+0xa>
 800ec02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec04:	07d0      	lsls	r0, r2, #31
 800ec06:	d404      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec08:	0599      	lsls	r1, r3, #22
 800ec0a:	d402      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec0e:	f7ff fb51 	bl	800e2b4 <__retarget_lock_acquire_recursive>
 800ec12:	4628      	mov	r0, r5
 800ec14:	4621      	mov	r1, r4
 800ec16:	f7ff ff5d 	bl	800ead4 <__sflush_r>
 800ec1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec1c:	07da      	lsls	r2, r3, #31
 800ec1e:	4605      	mov	r5, r0
 800ec20:	d4e4      	bmi.n	800ebec <_fflush_r+0xc>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	059b      	lsls	r3, r3, #22
 800ec26:	d4e1      	bmi.n	800ebec <_fflush_r+0xc>
 800ec28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec2a:	f7ff fb44 	bl	800e2b6 <__retarget_lock_release_recursive>
 800ec2e:	e7dd      	b.n	800ebec <_fflush_r+0xc>

0800ec30 <fiprintf>:
 800ec30:	b40e      	push	{r1, r2, r3}
 800ec32:	b503      	push	{r0, r1, lr}
 800ec34:	4601      	mov	r1, r0
 800ec36:	ab03      	add	r3, sp, #12
 800ec38:	4805      	ldr	r0, [pc, #20]	; (800ec50 <fiprintf+0x20>)
 800ec3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec3e:	6800      	ldr	r0, [r0, #0]
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	f000 f89f 	bl	800ed84 <_vfiprintf_r>
 800ec46:	b002      	add	sp, #8
 800ec48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec4c:	b003      	add	sp, #12
 800ec4e:	4770      	bx	lr
 800ec50:	20000064 	.word	0x20000064

0800ec54 <memmove>:
 800ec54:	4288      	cmp	r0, r1
 800ec56:	b510      	push	{r4, lr}
 800ec58:	eb01 0402 	add.w	r4, r1, r2
 800ec5c:	d902      	bls.n	800ec64 <memmove+0x10>
 800ec5e:	4284      	cmp	r4, r0
 800ec60:	4623      	mov	r3, r4
 800ec62:	d807      	bhi.n	800ec74 <memmove+0x20>
 800ec64:	1e43      	subs	r3, r0, #1
 800ec66:	42a1      	cmp	r1, r4
 800ec68:	d008      	beq.n	800ec7c <memmove+0x28>
 800ec6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec72:	e7f8      	b.n	800ec66 <memmove+0x12>
 800ec74:	4402      	add	r2, r0
 800ec76:	4601      	mov	r1, r0
 800ec78:	428a      	cmp	r2, r1
 800ec7a:	d100      	bne.n	800ec7e <memmove+0x2a>
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec86:	e7f7      	b.n	800ec78 <memmove+0x24>

0800ec88 <_sbrk_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	4d06      	ldr	r5, [pc, #24]	; (800eca4 <_sbrk_r+0x1c>)
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	4604      	mov	r4, r0
 800ec90:	4608      	mov	r0, r1
 800ec92:	602b      	str	r3, [r5, #0]
 800ec94:	f7f3 fb2a 	bl	80022ec <_sbrk>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_sbrk_r+0x1a>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_sbrk_r+0x1a>
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	20003a78 	.word	0x20003a78

0800eca8 <memcpy>:
 800eca8:	440a      	add	r2, r1
 800ecaa:	4291      	cmp	r1, r2
 800ecac:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecb0:	d100      	bne.n	800ecb4 <memcpy+0xc>
 800ecb2:	4770      	bx	lr
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecbe:	4291      	cmp	r1, r2
 800ecc0:	d1f9      	bne.n	800ecb6 <memcpy+0xe>
 800ecc2:	bd10      	pop	{r4, pc}

0800ecc4 <abort>:
 800ecc4:	b508      	push	{r3, lr}
 800ecc6:	2006      	movs	r0, #6
 800ecc8:	f000 fa34 	bl	800f134 <raise>
 800eccc:	2001      	movs	r0, #1
 800ecce:	f7f3 fa95 	bl	80021fc <_exit>

0800ecd2 <_realloc_r>:
 800ecd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	4614      	mov	r4, r2
 800ecda:	460e      	mov	r6, r1
 800ecdc:	b921      	cbnz	r1, 800ece8 <_realloc_r+0x16>
 800ecde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ece2:	4611      	mov	r1, r2
 800ece4:	f7ff bb82 	b.w	800e3ec <_malloc_r>
 800ece8:	b92a      	cbnz	r2, 800ecf6 <_realloc_r+0x24>
 800ecea:	f7ff fb0b 	bl	800e304 <_free_r>
 800ecee:	4625      	mov	r5, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf6:	f000 fa39 	bl	800f16c <_malloc_usable_size_r>
 800ecfa:	4284      	cmp	r4, r0
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	d802      	bhi.n	800ed06 <_realloc_r+0x34>
 800ed00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed04:	d812      	bhi.n	800ed2c <_realloc_r+0x5a>
 800ed06:	4621      	mov	r1, r4
 800ed08:	4640      	mov	r0, r8
 800ed0a:	f7ff fb6f 	bl	800e3ec <_malloc_r>
 800ed0e:	4605      	mov	r5, r0
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d0ed      	beq.n	800ecf0 <_realloc_r+0x1e>
 800ed14:	42bc      	cmp	r4, r7
 800ed16:	4622      	mov	r2, r4
 800ed18:	4631      	mov	r1, r6
 800ed1a:	bf28      	it	cs
 800ed1c:	463a      	movcs	r2, r7
 800ed1e:	f7ff ffc3 	bl	800eca8 <memcpy>
 800ed22:	4631      	mov	r1, r6
 800ed24:	4640      	mov	r0, r8
 800ed26:	f7ff faed 	bl	800e304 <_free_r>
 800ed2a:	e7e1      	b.n	800ecf0 <_realloc_r+0x1e>
 800ed2c:	4635      	mov	r5, r6
 800ed2e:	e7df      	b.n	800ecf0 <_realloc_r+0x1e>

0800ed30 <__sfputc_r>:
 800ed30:	6893      	ldr	r3, [r2, #8]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	b410      	push	{r4}
 800ed38:	6093      	str	r3, [r2, #8]
 800ed3a:	da08      	bge.n	800ed4e <__sfputc_r+0x1e>
 800ed3c:	6994      	ldr	r4, [r2, #24]
 800ed3e:	42a3      	cmp	r3, r4
 800ed40:	db01      	blt.n	800ed46 <__sfputc_r+0x16>
 800ed42:	290a      	cmp	r1, #10
 800ed44:	d103      	bne.n	800ed4e <__sfputc_r+0x1e>
 800ed46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed4a:	f000 b935 	b.w	800efb8 <__swbuf_r>
 800ed4e:	6813      	ldr	r3, [r2, #0]
 800ed50:	1c58      	adds	r0, r3, #1
 800ed52:	6010      	str	r0, [r2, #0]
 800ed54:	7019      	strb	r1, [r3, #0]
 800ed56:	4608      	mov	r0, r1
 800ed58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <__sfputs_r>:
 800ed5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed60:	4606      	mov	r6, r0
 800ed62:	460f      	mov	r7, r1
 800ed64:	4614      	mov	r4, r2
 800ed66:	18d5      	adds	r5, r2, r3
 800ed68:	42ac      	cmp	r4, r5
 800ed6a:	d101      	bne.n	800ed70 <__sfputs_r+0x12>
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e007      	b.n	800ed80 <__sfputs_r+0x22>
 800ed70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed74:	463a      	mov	r2, r7
 800ed76:	4630      	mov	r0, r6
 800ed78:	f7ff ffda 	bl	800ed30 <__sfputc_r>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d1f3      	bne.n	800ed68 <__sfputs_r+0xa>
 800ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed84 <_vfiprintf_r>:
 800ed84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed88:	460d      	mov	r5, r1
 800ed8a:	b09d      	sub	sp, #116	; 0x74
 800ed8c:	4614      	mov	r4, r2
 800ed8e:	4698      	mov	r8, r3
 800ed90:	4606      	mov	r6, r0
 800ed92:	b118      	cbz	r0, 800ed9c <_vfiprintf_r+0x18>
 800ed94:	6a03      	ldr	r3, [r0, #32]
 800ed96:	b90b      	cbnz	r3, 800ed9c <_vfiprintf_r+0x18>
 800ed98:	f7ff f90c 	bl	800dfb4 <__sinit>
 800ed9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed9e:	07d9      	lsls	r1, r3, #31
 800eda0:	d405      	bmi.n	800edae <_vfiprintf_r+0x2a>
 800eda2:	89ab      	ldrh	r3, [r5, #12]
 800eda4:	059a      	lsls	r2, r3, #22
 800eda6:	d402      	bmi.n	800edae <_vfiprintf_r+0x2a>
 800eda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edaa:	f7ff fa83 	bl	800e2b4 <__retarget_lock_acquire_recursive>
 800edae:	89ab      	ldrh	r3, [r5, #12]
 800edb0:	071b      	lsls	r3, r3, #28
 800edb2:	d501      	bpl.n	800edb8 <_vfiprintf_r+0x34>
 800edb4:	692b      	ldr	r3, [r5, #16]
 800edb6:	b99b      	cbnz	r3, 800ede0 <_vfiprintf_r+0x5c>
 800edb8:	4629      	mov	r1, r5
 800edba:	4630      	mov	r0, r6
 800edbc:	f000 f93a 	bl	800f034 <__swsetup_r>
 800edc0:	b170      	cbz	r0, 800ede0 <_vfiprintf_r+0x5c>
 800edc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc4:	07dc      	lsls	r4, r3, #31
 800edc6:	d504      	bpl.n	800edd2 <_vfiprintf_r+0x4e>
 800edc8:	f04f 30ff 	mov.w	r0, #4294967295
 800edcc:	b01d      	add	sp, #116	; 0x74
 800edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd2:	89ab      	ldrh	r3, [r5, #12]
 800edd4:	0598      	lsls	r0, r3, #22
 800edd6:	d4f7      	bmi.n	800edc8 <_vfiprintf_r+0x44>
 800edd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edda:	f7ff fa6c 	bl	800e2b6 <__retarget_lock_release_recursive>
 800edde:	e7f3      	b.n	800edc8 <_vfiprintf_r+0x44>
 800ede0:	2300      	movs	r3, #0
 800ede2:	9309      	str	r3, [sp, #36]	; 0x24
 800ede4:	2320      	movs	r3, #32
 800ede6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edea:	f8cd 800c 	str.w	r8, [sp, #12]
 800edee:	2330      	movs	r3, #48	; 0x30
 800edf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800efa4 <_vfiprintf_r+0x220>
 800edf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edf8:	f04f 0901 	mov.w	r9, #1
 800edfc:	4623      	mov	r3, r4
 800edfe:	469a      	mov	sl, r3
 800ee00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee04:	b10a      	cbz	r2, 800ee0a <_vfiprintf_r+0x86>
 800ee06:	2a25      	cmp	r2, #37	; 0x25
 800ee08:	d1f9      	bne.n	800edfe <_vfiprintf_r+0x7a>
 800ee0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee0e:	d00b      	beq.n	800ee28 <_vfiprintf_r+0xa4>
 800ee10:	465b      	mov	r3, fp
 800ee12:	4622      	mov	r2, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	4630      	mov	r0, r6
 800ee18:	f7ff ffa1 	bl	800ed5e <__sfputs_r>
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f000 80a9 	beq.w	800ef74 <_vfiprintf_r+0x1f0>
 800ee22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee24:	445a      	add	r2, fp
 800ee26:	9209      	str	r2, [sp, #36]	; 0x24
 800ee28:	f89a 3000 	ldrb.w	r3, [sl]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 80a1 	beq.w	800ef74 <_vfiprintf_r+0x1f0>
 800ee32:	2300      	movs	r3, #0
 800ee34:	f04f 32ff 	mov.w	r2, #4294967295
 800ee38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee3c:	f10a 0a01 	add.w	sl, sl, #1
 800ee40:	9304      	str	r3, [sp, #16]
 800ee42:	9307      	str	r3, [sp, #28]
 800ee44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee48:	931a      	str	r3, [sp, #104]	; 0x68
 800ee4a:	4654      	mov	r4, sl
 800ee4c:	2205      	movs	r2, #5
 800ee4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee52:	4854      	ldr	r0, [pc, #336]	; (800efa4 <_vfiprintf_r+0x220>)
 800ee54:	f7f1 f9dc 	bl	8000210 <memchr>
 800ee58:	9a04      	ldr	r2, [sp, #16]
 800ee5a:	b9d8      	cbnz	r0, 800ee94 <_vfiprintf_r+0x110>
 800ee5c:	06d1      	lsls	r1, r2, #27
 800ee5e:	bf44      	itt	mi
 800ee60:	2320      	movmi	r3, #32
 800ee62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee66:	0713      	lsls	r3, r2, #28
 800ee68:	bf44      	itt	mi
 800ee6a:	232b      	movmi	r3, #43	; 0x2b
 800ee6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee70:	f89a 3000 	ldrb.w	r3, [sl]
 800ee74:	2b2a      	cmp	r3, #42	; 0x2a
 800ee76:	d015      	beq.n	800eea4 <_vfiprintf_r+0x120>
 800ee78:	9a07      	ldr	r2, [sp, #28]
 800ee7a:	4654      	mov	r4, sl
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	f04f 0c0a 	mov.w	ip, #10
 800ee82:	4621      	mov	r1, r4
 800ee84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee88:	3b30      	subs	r3, #48	; 0x30
 800ee8a:	2b09      	cmp	r3, #9
 800ee8c:	d94d      	bls.n	800ef2a <_vfiprintf_r+0x1a6>
 800ee8e:	b1b0      	cbz	r0, 800eebe <_vfiprintf_r+0x13a>
 800ee90:	9207      	str	r2, [sp, #28]
 800ee92:	e014      	b.n	800eebe <_vfiprintf_r+0x13a>
 800ee94:	eba0 0308 	sub.w	r3, r0, r8
 800ee98:	fa09 f303 	lsl.w	r3, r9, r3
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	9304      	str	r3, [sp, #16]
 800eea0:	46a2      	mov	sl, r4
 800eea2:	e7d2      	b.n	800ee4a <_vfiprintf_r+0xc6>
 800eea4:	9b03      	ldr	r3, [sp, #12]
 800eea6:	1d19      	adds	r1, r3, #4
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	9103      	str	r1, [sp, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	bfbb      	ittet	lt
 800eeb0:	425b      	neglt	r3, r3
 800eeb2:	f042 0202 	orrlt.w	r2, r2, #2
 800eeb6:	9307      	strge	r3, [sp, #28]
 800eeb8:	9307      	strlt	r3, [sp, #28]
 800eeba:	bfb8      	it	lt
 800eebc:	9204      	strlt	r2, [sp, #16]
 800eebe:	7823      	ldrb	r3, [r4, #0]
 800eec0:	2b2e      	cmp	r3, #46	; 0x2e
 800eec2:	d10c      	bne.n	800eede <_vfiprintf_r+0x15a>
 800eec4:	7863      	ldrb	r3, [r4, #1]
 800eec6:	2b2a      	cmp	r3, #42	; 0x2a
 800eec8:	d134      	bne.n	800ef34 <_vfiprintf_r+0x1b0>
 800eeca:	9b03      	ldr	r3, [sp, #12]
 800eecc:	1d1a      	adds	r2, r3, #4
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	9203      	str	r2, [sp, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	bfb8      	it	lt
 800eed6:	f04f 33ff 	movlt.w	r3, #4294967295
 800eeda:	3402      	adds	r4, #2
 800eedc:	9305      	str	r3, [sp, #20]
 800eede:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800efb4 <_vfiprintf_r+0x230>
 800eee2:	7821      	ldrb	r1, [r4, #0]
 800eee4:	2203      	movs	r2, #3
 800eee6:	4650      	mov	r0, sl
 800eee8:	f7f1 f992 	bl	8000210 <memchr>
 800eeec:	b138      	cbz	r0, 800eefe <_vfiprintf_r+0x17a>
 800eeee:	9b04      	ldr	r3, [sp, #16]
 800eef0:	eba0 000a 	sub.w	r0, r0, sl
 800eef4:	2240      	movs	r2, #64	; 0x40
 800eef6:	4082      	lsls	r2, r0
 800eef8:	4313      	orrs	r3, r2
 800eefa:	3401      	adds	r4, #1
 800eefc:	9304      	str	r3, [sp, #16]
 800eefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef02:	4829      	ldr	r0, [pc, #164]	; (800efa8 <_vfiprintf_r+0x224>)
 800ef04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef08:	2206      	movs	r2, #6
 800ef0a:	f7f1 f981 	bl	8000210 <memchr>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d03f      	beq.n	800ef92 <_vfiprintf_r+0x20e>
 800ef12:	4b26      	ldr	r3, [pc, #152]	; (800efac <_vfiprintf_r+0x228>)
 800ef14:	bb1b      	cbnz	r3, 800ef5e <_vfiprintf_r+0x1da>
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	3307      	adds	r3, #7
 800ef1a:	f023 0307 	bic.w	r3, r3, #7
 800ef1e:	3308      	adds	r3, #8
 800ef20:	9303      	str	r3, [sp, #12]
 800ef22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef24:	443b      	add	r3, r7
 800ef26:	9309      	str	r3, [sp, #36]	; 0x24
 800ef28:	e768      	b.n	800edfc <_vfiprintf_r+0x78>
 800ef2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef2e:	460c      	mov	r4, r1
 800ef30:	2001      	movs	r0, #1
 800ef32:	e7a6      	b.n	800ee82 <_vfiprintf_r+0xfe>
 800ef34:	2300      	movs	r3, #0
 800ef36:	3401      	adds	r4, #1
 800ef38:	9305      	str	r3, [sp, #20]
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	f04f 0c0a 	mov.w	ip, #10
 800ef40:	4620      	mov	r0, r4
 800ef42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef46:	3a30      	subs	r2, #48	; 0x30
 800ef48:	2a09      	cmp	r2, #9
 800ef4a:	d903      	bls.n	800ef54 <_vfiprintf_r+0x1d0>
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d0c6      	beq.n	800eede <_vfiprintf_r+0x15a>
 800ef50:	9105      	str	r1, [sp, #20]
 800ef52:	e7c4      	b.n	800eede <_vfiprintf_r+0x15a>
 800ef54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef58:	4604      	mov	r4, r0
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e7f0      	b.n	800ef40 <_vfiprintf_r+0x1bc>
 800ef5e:	ab03      	add	r3, sp, #12
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	462a      	mov	r2, r5
 800ef64:	4b12      	ldr	r3, [pc, #72]	; (800efb0 <_vfiprintf_r+0x22c>)
 800ef66:	a904      	add	r1, sp, #16
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f3af 8000 	nop.w
 800ef6e:	4607      	mov	r7, r0
 800ef70:	1c78      	adds	r0, r7, #1
 800ef72:	d1d6      	bne.n	800ef22 <_vfiprintf_r+0x19e>
 800ef74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef76:	07d9      	lsls	r1, r3, #31
 800ef78:	d405      	bmi.n	800ef86 <_vfiprintf_r+0x202>
 800ef7a:	89ab      	ldrh	r3, [r5, #12]
 800ef7c:	059a      	lsls	r2, r3, #22
 800ef7e:	d402      	bmi.n	800ef86 <_vfiprintf_r+0x202>
 800ef80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef82:	f7ff f998 	bl	800e2b6 <__retarget_lock_release_recursive>
 800ef86:	89ab      	ldrh	r3, [r5, #12]
 800ef88:	065b      	lsls	r3, r3, #25
 800ef8a:	f53f af1d 	bmi.w	800edc8 <_vfiprintf_r+0x44>
 800ef8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef90:	e71c      	b.n	800edcc <_vfiprintf_r+0x48>
 800ef92:	ab03      	add	r3, sp, #12
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	462a      	mov	r2, r5
 800ef98:	4b05      	ldr	r3, [pc, #20]	; (800efb0 <_vfiprintf_r+0x22c>)
 800ef9a:	a904      	add	r1, sp, #16
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f7ff fc77 	bl	800e890 <_printf_i>
 800efa2:	e7e4      	b.n	800ef6e <_vfiprintf_r+0x1ea>
 800efa4:	0800fcaf 	.word	0x0800fcaf
 800efa8:	0800fcb9 	.word	0x0800fcb9
 800efac:	00000000 	.word	0x00000000
 800efb0:	0800ed5f 	.word	0x0800ed5f
 800efb4:	0800fcb5 	.word	0x0800fcb5

0800efb8 <__swbuf_r>:
 800efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efba:	460e      	mov	r6, r1
 800efbc:	4614      	mov	r4, r2
 800efbe:	4605      	mov	r5, r0
 800efc0:	b118      	cbz	r0, 800efca <__swbuf_r+0x12>
 800efc2:	6a03      	ldr	r3, [r0, #32]
 800efc4:	b90b      	cbnz	r3, 800efca <__swbuf_r+0x12>
 800efc6:	f7fe fff5 	bl	800dfb4 <__sinit>
 800efca:	69a3      	ldr	r3, [r4, #24]
 800efcc:	60a3      	str	r3, [r4, #8]
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	071a      	lsls	r2, r3, #28
 800efd2:	d525      	bpl.n	800f020 <__swbuf_r+0x68>
 800efd4:	6923      	ldr	r3, [r4, #16]
 800efd6:	b31b      	cbz	r3, 800f020 <__swbuf_r+0x68>
 800efd8:	6823      	ldr	r3, [r4, #0]
 800efda:	6922      	ldr	r2, [r4, #16]
 800efdc:	1a98      	subs	r0, r3, r2
 800efde:	6963      	ldr	r3, [r4, #20]
 800efe0:	b2f6      	uxtb	r6, r6
 800efe2:	4283      	cmp	r3, r0
 800efe4:	4637      	mov	r7, r6
 800efe6:	dc04      	bgt.n	800eff2 <__swbuf_r+0x3a>
 800efe8:	4621      	mov	r1, r4
 800efea:	4628      	mov	r0, r5
 800efec:	f7ff fdf8 	bl	800ebe0 <_fflush_r>
 800eff0:	b9e0      	cbnz	r0, 800f02c <__swbuf_r+0x74>
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	3b01      	subs	r3, #1
 800eff6:	60a3      	str	r3, [r4, #8]
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	6022      	str	r2, [r4, #0]
 800effe:	701e      	strb	r6, [r3, #0]
 800f000:	6962      	ldr	r2, [r4, #20]
 800f002:	1c43      	adds	r3, r0, #1
 800f004:	429a      	cmp	r2, r3
 800f006:	d004      	beq.n	800f012 <__swbuf_r+0x5a>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	07db      	lsls	r3, r3, #31
 800f00c:	d506      	bpl.n	800f01c <__swbuf_r+0x64>
 800f00e:	2e0a      	cmp	r6, #10
 800f010:	d104      	bne.n	800f01c <__swbuf_r+0x64>
 800f012:	4621      	mov	r1, r4
 800f014:	4628      	mov	r0, r5
 800f016:	f7ff fde3 	bl	800ebe0 <_fflush_r>
 800f01a:	b938      	cbnz	r0, 800f02c <__swbuf_r+0x74>
 800f01c:	4638      	mov	r0, r7
 800f01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f020:	4621      	mov	r1, r4
 800f022:	4628      	mov	r0, r5
 800f024:	f000 f806 	bl	800f034 <__swsetup_r>
 800f028:	2800      	cmp	r0, #0
 800f02a:	d0d5      	beq.n	800efd8 <__swbuf_r+0x20>
 800f02c:	f04f 37ff 	mov.w	r7, #4294967295
 800f030:	e7f4      	b.n	800f01c <__swbuf_r+0x64>
	...

0800f034 <__swsetup_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4b2a      	ldr	r3, [pc, #168]	; (800f0e0 <__swsetup_r+0xac>)
 800f038:	4605      	mov	r5, r0
 800f03a:	6818      	ldr	r0, [r3, #0]
 800f03c:	460c      	mov	r4, r1
 800f03e:	b118      	cbz	r0, 800f048 <__swsetup_r+0x14>
 800f040:	6a03      	ldr	r3, [r0, #32]
 800f042:	b90b      	cbnz	r3, 800f048 <__swsetup_r+0x14>
 800f044:	f7fe ffb6 	bl	800dfb4 <__sinit>
 800f048:	89a3      	ldrh	r3, [r4, #12]
 800f04a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f04e:	0718      	lsls	r0, r3, #28
 800f050:	d422      	bmi.n	800f098 <__swsetup_r+0x64>
 800f052:	06d9      	lsls	r1, r3, #27
 800f054:	d407      	bmi.n	800f066 <__swsetup_r+0x32>
 800f056:	2309      	movs	r3, #9
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f05e:	81a3      	strh	r3, [r4, #12]
 800f060:	f04f 30ff 	mov.w	r0, #4294967295
 800f064:	e034      	b.n	800f0d0 <__swsetup_r+0x9c>
 800f066:	0758      	lsls	r0, r3, #29
 800f068:	d512      	bpl.n	800f090 <__swsetup_r+0x5c>
 800f06a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f06c:	b141      	cbz	r1, 800f080 <__swsetup_r+0x4c>
 800f06e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f072:	4299      	cmp	r1, r3
 800f074:	d002      	beq.n	800f07c <__swsetup_r+0x48>
 800f076:	4628      	mov	r0, r5
 800f078:	f7ff f944 	bl	800e304 <_free_r>
 800f07c:	2300      	movs	r3, #0
 800f07e:	6363      	str	r3, [r4, #52]	; 0x34
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f086:	81a3      	strh	r3, [r4, #12]
 800f088:	2300      	movs	r3, #0
 800f08a:	6063      	str	r3, [r4, #4]
 800f08c:	6923      	ldr	r3, [r4, #16]
 800f08e:	6023      	str	r3, [r4, #0]
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	f043 0308 	orr.w	r3, r3, #8
 800f096:	81a3      	strh	r3, [r4, #12]
 800f098:	6923      	ldr	r3, [r4, #16]
 800f09a:	b94b      	cbnz	r3, 800f0b0 <__swsetup_r+0x7c>
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0a6:	d003      	beq.n	800f0b0 <__swsetup_r+0x7c>
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f000 f88c 	bl	800f1c8 <__smakebuf_r>
 800f0b0:	89a0      	ldrh	r0, [r4, #12]
 800f0b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0b6:	f010 0301 	ands.w	r3, r0, #1
 800f0ba:	d00a      	beq.n	800f0d2 <__swsetup_r+0x9e>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	60a3      	str	r3, [r4, #8]
 800f0c0:	6963      	ldr	r3, [r4, #20]
 800f0c2:	425b      	negs	r3, r3
 800f0c4:	61a3      	str	r3, [r4, #24]
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	b943      	cbnz	r3, 800f0dc <__swsetup_r+0xa8>
 800f0ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0ce:	d1c4      	bne.n	800f05a <__swsetup_r+0x26>
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	0781      	lsls	r1, r0, #30
 800f0d4:	bf58      	it	pl
 800f0d6:	6963      	ldrpl	r3, [r4, #20]
 800f0d8:	60a3      	str	r3, [r4, #8]
 800f0da:	e7f4      	b.n	800f0c6 <__swsetup_r+0x92>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	e7f7      	b.n	800f0d0 <__swsetup_r+0x9c>
 800f0e0:	20000064 	.word	0x20000064

0800f0e4 <_raise_r>:
 800f0e4:	291f      	cmp	r1, #31
 800f0e6:	b538      	push	{r3, r4, r5, lr}
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	d904      	bls.n	800f0f8 <_raise_r+0x14>
 800f0ee:	2316      	movs	r3, #22
 800f0f0:	6003      	str	r3, [r0, #0]
 800f0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f0fa:	b112      	cbz	r2, 800f102 <_raise_r+0x1e>
 800f0fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f100:	b94b      	cbnz	r3, 800f116 <_raise_r+0x32>
 800f102:	4620      	mov	r0, r4
 800f104:	f000 f830 	bl	800f168 <_getpid_r>
 800f108:	462a      	mov	r2, r5
 800f10a:	4601      	mov	r1, r0
 800f10c:	4620      	mov	r0, r4
 800f10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f112:	f000 b817 	b.w	800f144 <_kill_r>
 800f116:	2b01      	cmp	r3, #1
 800f118:	d00a      	beq.n	800f130 <_raise_r+0x4c>
 800f11a:	1c59      	adds	r1, r3, #1
 800f11c:	d103      	bne.n	800f126 <_raise_r+0x42>
 800f11e:	2316      	movs	r3, #22
 800f120:	6003      	str	r3, [r0, #0]
 800f122:	2001      	movs	r0, #1
 800f124:	e7e7      	b.n	800f0f6 <_raise_r+0x12>
 800f126:	2400      	movs	r4, #0
 800f128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f12c:	4628      	mov	r0, r5
 800f12e:	4798      	blx	r3
 800f130:	2000      	movs	r0, #0
 800f132:	e7e0      	b.n	800f0f6 <_raise_r+0x12>

0800f134 <raise>:
 800f134:	4b02      	ldr	r3, [pc, #8]	; (800f140 <raise+0xc>)
 800f136:	4601      	mov	r1, r0
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	f7ff bfd3 	b.w	800f0e4 <_raise_r>
 800f13e:	bf00      	nop
 800f140:	20000064 	.word	0x20000064

0800f144 <_kill_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4d07      	ldr	r5, [pc, #28]	; (800f164 <_kill_r+0x20>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	4611      	mov	r1, r2
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	f7f3 f843 	bl	80021dc <_kill>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	d102      	bne.n	800f160 <_kill_r+0x1c>
 800f15a:	682b      	ldr	r3, [r5, #0]
 800f15c:	b103      	cbz	r3, 800f160 <_kill_r+0x1c>
 800f15e:	6023      	str	r3, [r4, #0]
 800f160:	bd38      	pop	{r3, r4, r5, pc}
 800f162:	bf00      	nop
 800f164:	20003a78 	.word	0x20003a78

0800f168 <_getpid_r>:
 800f168:	f7f3 b830 	b.w	80021cc <_getpid>

0800f16c <_malloc_usable_size_r>:
 800f16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f170:	1f18      	subs	r0, r3, #4
 800f172:	2b00      	cmp	r3, #0
 800f174:	bfbc      	itt	lt
 800f176:	580b      	ldrlt	r3, [r1, r0]
 800f178:	18c0      	addlt	r0, r0, r3
 800f17a:	4770      	bx	lr

0800f17c <__swhatbuf_r>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	460c      	mov	r4, r1
 800f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f184:	2900      	cmp	r1, #0
 800f186:	b096      	sub	sp, #88	; 0x58
 800f188:	4615      	mov	r5, r2
 800f18a:	461e      	mov	r6, r3
 800f18c:	da0d      	bge.n	800f1aa <__swhatbuf_r+0x2e>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f194:	f04f 0100 	mov.w	r1, #0
 800f198:	bf0c      	ite	eq
 800f19a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f19e:	2340      	movne	r3, #64	; 0x40
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	6031      	str	r1, [r6, #0]
 800f1a4:	602b      	str	r3, [r5, #0]
 800f1a6:	b016      	add	sp, #88	; 0x58
 800f1a8:	bd70      	pop	{r4, r5, r6, pc}
 800f1aa:	466a      	mov	r2, sp
 800f1ac:	f000 f848 	bl	800f240 <_fstat_r>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	dbec      	blt.n	800f18e <__swhatbuf_r+0x12>
 800f1b4:	9901      	ldr	r1, [sp, #4]
 800f1b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1be:	4259      	negs	r1, r3
 800f1c0:	4159      	adcs	r1, r3
 800f1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1c6:	e7eb      	b.n	800f1a0 <__swhatbuf_r+0x24>

0800f1c8 <__smakebuf_r>:
 800f1c8:	898b      	ldrh	r3, [r1, #12]
 800f1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1cc:	079d      	lsls	r5, r3, #30
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460c      	mov	r4, r1
 800f1d2:	d507      	bpl.n	800f1e4 <__smakebuf_r+0x1c>
 800f1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	6123      	str	r3, [r4, #16]
 800f1dc:	2301      	movs	r3, #1
 800f1de:	6163      	str	r3, [r4, #20]
 800f1e0:	b002      	add	sp, #8
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	ab01      	add	r3, sp, #4
 800f1e6:	466a      	mov	r2, sp
 800f1e8:	f7ff ffc8 	bl	800f17c <__swhatbuf_r>
 800f1ec:	9900      	ldr	r1, [sp, #0]
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7ff f8fb 	bl	800e3ec <_malloc_r>
 800f1f6:	b948      	cbnz	r0, 800f20c <__smakebuf_r+0x44>
 800f1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1fc:	059a      	lsls	r2, r3, #22
 800f1fe:	d4ef      	bmi.n	800f1e0 <__smakebuf_r+0x18>
 800f200:	f023 0303 	bic.w	r3, r3, #3
 800f204:	f043 0302 	orr.w	r3, r3, #2
 800f208:	81a3      	strh	r3, [r4, #12]
 800f20a:	e7e3      	b.n	800f1d4 <__smakebuf_r+0xc>
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	6020      	str	r0, [r4, #0]
 800f210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	9b00      	ldr	r3, [sp, #0]
 800f218:	6163      	str	r3, [r4, #20]
 800f21a:	9b01      	ldr	r3, [sp, #4]
 800f21c:	6120      	str	r0, [r4, #16]
 800f21e:	b15b      	cbz	r3, 800f238 <__smakebuf_r+0x70>
 800f220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f224:	4630      	mov	r0, r6
 800f226:	f000 f81d 	bl	800f264 <_isatty_r>
 800f22a:	b128      	cbz	r0, 800f238 <__smakebuf_r+0x70>
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f023 0303 	bic.w	r3, r3, #3
 800f232:	f043 0301 	orr.w	r3, r3, #1
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	431d      	orrs	r5, r3
 800f23c:	81a5      	strh	r5, [r4, #12]
 800f23e:	e7cf      	b.n	800f1e0 <__smakebuf_r+0x18>

0800f240 <_fstat_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d07      	ldr	r5, [pc, #28]	; (800f260 <_fstat_r+0x20>)
 800f244:	2300      	movs	r3, #0
 800f246:	4604      	mov	r4, r0
 800f248:	4608      	mov	r0, r1
 800f24a:	4611      	mov	r1, r2
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	f7f3 f824 	bl	800229a <_fstat>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d102      	bne.n	800f25c <_fstat_r+0x1c>
 800f256:	682b      	ldr	r3, [r5, #0]
 800f258:	b103      	cbz	r3, 800f25c <_fstat_r+0x1c>
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	bd38      	pop	{r3, r4, r5, pc}
 800f25e:	bf00      	nop
 800f260:	20003a78 	.word	0x20003a78

0800f264 <_isatty_r>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4d06      	ldr	r5, [pc, #24]	; (800f280 <_isatty_r+0x1c>)
 800f268:	2300      	movs	r3, #0
 800f26a:	4604      	mov	r4, r0
 800f26c:	4608      	mov	r0, r1
 800f26e:	602b      	str	r3, [r5, #0]
 800f270:	f7f3 f823 	bl	80022ba <_isatty>
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	d102      	bne.n	800f27e <_isatty_r+0x1a>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	b103      	cbz	r3, 800f27e <_isatty_r+0x1a>
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	bd38      	pop	{r3, r4, r5, pc}
 800f280:	20003a78 	.word	0x20003a78

0800f284 <_init>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr

0800f290 <_fini>:
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	bf00      	nop
 800f294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f296:	bc08      	pop	{r3}
 800f298:	469e      	mov	lr, r3
 800f29a:	4770      	bx	lr
