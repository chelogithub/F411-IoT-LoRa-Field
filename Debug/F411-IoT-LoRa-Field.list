
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0800efa8  0800efa8  0001efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8d4  0800f8d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8d4  0800f8d4  0001f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8dc  0800f8dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8dc  0800f8dc  0001f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800f8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c54  20000068  0800f94c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cbc  0800f94c  00023cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015388  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f24  00000000  00000000  00035463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  000394f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001865d  00000000  00000000  0003a30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001755f  00000000  00000000  0005296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009392f  00000000  00000000  00069ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055ec  00000000  00000000  000fd7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00102de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ef90 	.word	0x0800ef90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800ef90 	.word	0x0800ef90

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//
		ETH_DBG_EN=0;
 800069a:	4bd1      	ldr	r3, [pc, #836]	; (80009e0 <main+0x34c>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80006a0:	4bd0      	ldr	r3, [pc, #832]	; (80009e4 <main+0x350>)
 80006a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a6:	22c0      	movs	r2, #192	; 0xc0
 80006a8:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006aa:	4bce      	ldr	r3, [pc, #824]	; (80009e4 <main+0x350>)
 80006ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b0:	22a8      	movs	r2, #168	; 0xa8
 80006b2:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b4:	4bcb      	ldr	r3, [pc, #812]	; (80009e4 <main+0x350>)
 80006b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ba:	2200      	movs	r2, #0
 80006bc:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006be:	4bc9      	ldr	r3, [pc, #804]	; (80009e4 <main+0x350>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	2201      	movs	r2, #1
 80006c6:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c8:	4bc6      	ldr	r3, [pc, #792]	; (80009e4 <main+0x350>)
 80006ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ce:	22ff      	movs	r2, #255	; 0xff
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d4:	4bc3      	ldr	r3, [pc, #780]	; (80009e4 <main+0x350>)
 80006d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006da:	22ff      	movs	r2, #255	; 0xff
 80006dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006e0:	4bc0      	ldr	r3, [pc, #768]	; (80009e4 <main+0x350>)
 80006e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e6:	22ff      	movs	r2, #255	; 0xff
 80006e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006ec:	4bbd      	ldr	r3, [pc, #756]	; (80009e4 <main+0x350>)
 80006ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f8:	4bba      	ldr	r3, [pc, #744]	; (80009e4 <main+0x350>)
 80006fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000704:	4bb7      	ldr	r3, [pc, #732]	; (80009e4 <main+0x350>)
 8000706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070a:	2208      	movs	r2, #8
 800070c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 8000710:	4bb4      	ldr	r3, [pc, #720]	; (80009e4 <main+0x350>)
 8000712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000716:	22dc      	movs	r2, #220	; 0xdc
 8000718:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 800071c:	4bb1      	ldr	r3, [pc, #708]	; (80009e4 <main+0x350>)
 800071e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000728:	4bae      	ldr	r3, [pc, #696]	; (80009e4 <main+0x350>)
 800072a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000734:	4bab      	ldr	r3, [pc, #684]	; (80009e4 <main+0x350>)
 8000736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073a:	2201      	movs	r2, #1
 800073c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000740:	4ba8      	ldr	r3, [pc, #672]	; (80009e4 <main+0x350>)
 8000742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000746:	22c0      	movs	r2, #192	; 0xc0
 8000748:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 800074c:	4ba5      	ldr	r3, [pc, #660]	; (80009e4 <main+0x350>)
 800074e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000752:	22a8      	movs	r2, #168	; 0xa8
 8000754:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000758:	4ba2      	ldr	r3, [pc, #648]	; (80009e4 <main+0x350>)
 800075a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075e:	2200      	movs	r2, #0
 8000760:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000764:	4b9f      	ldr	r3, [pc, #636]	; (80009e4 <main+0x350>)
 8000766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076a:	2206      	movs	r2, #6
 800076c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000770:	4b9c      	ldr	r3, [pc, #624]	; (80009e4 <main+0x350>)
 8000772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000776:	2255      	movs	r2, #85	; 0x55
 8000778:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 800077c:	4b99      	ldr	r3, [pc, #612]	; (80009e4 <main+0x350>)
 800077e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000782:	2255      	movs	r2, #85	; 0x55
 8000784:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000788:	4b96      	ldr	r3, [pc, #600]	; (80009e4 <main+0x350>)
 800078a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078e:	2201      	movs	r2, #1
 8000790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000794:	4b93      	ldr	r3, [pc, #588]	; (80009e4 <main+0x350>)
 8000796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079a:	22f6      	movs	r2, #246	; 0xf6
 800079c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 80007a0:	4b90      	ldr	r3, [pc, #576]	; (80009e4 <main+0x350>)
 80007a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007ac:	4b8d      	ldr	r3, [pc, #564]	; (80009e4 <main+0x350>)
 80007ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b2:	22a8      	movs	r2, #168	; 0xa8
 80007b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b8:	4b8a      	ldr	r3, [pc, #552]	; (80009e4 <main+0x350>)
 80007ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c4:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <main+0x350>)
 80007c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ca:	2203      	movs	r2, #3
 80007cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007d0:	4b84      	ldr	r3, [pc, #528]	; (80009e4 <main+0x350>)
 80007d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d6:	2201      	movs	r2, #1
 80007d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007dc:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <main+0x350>)
 80007de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e2:	22f6      	movs	r2, #246	; 0xf6
 80007e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e8:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <main+0x350>)
 80007ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ee:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f6:	4b7b      	ldr	r3, [pc, #492]	; (80009e4 <main+0x350>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000800:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000804:	4b77      	ldr	r3, [pc, #476]	; (80009e4 <main+0x350>)
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 8000812:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <main+0x350>)
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 8000820:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <main+0x350>)
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082e:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <main+0x350>)
 8000830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000838:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 800083c:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <main+0x350>)
 800083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000842:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000846:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 800084a:	4b66      	ldr	r3, [pc, #408]	; (80009e4 <main+0x350>)
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000854:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000858:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <main+0x350>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000862:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000866:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <main+0x350>)
 8000868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000870:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000874:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <main+0x350>)
 8000876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <main+0x350>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000888:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000890:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <main+0x350>)
 8000892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000896:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089e:	4b51      	ldr	r3, [pc, #324]	; (80009e4 <main+0x350>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008ac:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <main+0x350>)
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008ba:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <main+0x350>)
 80008bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <main+0x350>)
 80008ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		wf._data2SND[14]=0x34;
		wf._data2SND[15]=0x35;
		wf._n_D2SND=12;
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;*/
		wf._DBG_EN=1;
 80008d4:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <main+0x354>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80008dc:	4b43      	ldr	r3, [pc, #268]	; (80009ec <main+0x358>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <main+0x350>)
 80008e4:	4a42      	ldr	r2, [pc, #264]	; (80009f0 <main+0x35c>)
 80008e6:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008e8:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <main+0x350>)
 80008ea:	2210      	movs	r2, #16
 80008ec:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <main+0x350>)
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <main+0x360>)
 80008f2:	601a      	str	r2, [r3, #0]

		// ----------- FIN - Seteo de módulo Ethernet W5100 ----------- //

		 //----------------------- WIFI ------------------------//
			decimal[0]=1;
 80008f4:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			decimal[1]=1;
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <main+0x364>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	705a      	strb	r2, [r3, #1]
			decimal[2]=1;
 8000900:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <main+0x364>)
 8000902:	2201      	movs	r2, #1
 8000904:	709a      	strb	r2, [r3, #2]
			decimal[3]=0;
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <main+0x364>)
 8000908:	2200      	movs	r2, #0
 800090a:	70da      	strb	r2, [r3, #3]
			decimal[4]=1;
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <main+0x364>)
 800090e:	2201      	movs	r2, #1
 8000910:	711a      	strb	r2, [r3, #4]
			decimal[5]=1;
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <main+0x364>)
 8000914:	2201      	movs	r2, #1
 8000916:	715a      	strb	r2, [r3, #5]
			decimal[6]=1;
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <main+0x364>)
 800091a:	2201      	movs	r2, #1
 800091c:	719a      	strb	r2, [r3, #6]
			decimal[7]=1;
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <main+0x364>)
 8000920:	2201      	movs	r2, #1
 8000922:	71da      	strb	r2, [r3, #7]
			decimal[8]=1;
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <main+0x364>)
 8000926:	2201      	movs	r2, #1
 8000928:	721a      	strb	r2, [r3, #8]
			decimal[9]=1;
 800092a:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <main+0x364>)
 800092c:	2201      	movs	r2, #1
 800092e:	725a      	strb	r2, [r3, #9]
			decimal[10]=1;
 8000930:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <main+0x364>)
 8000932:	2201      	movs	r2, #1
 8000934:	729a      	strb	r2, [r3, #10]
			decimal[11]=1;
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <main+0x364>)
 8000938:	2201      	movs	r2, #1
 800093a:	72da      	strb	r2, [r3, #11]
			decimal[12]=1;
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <main+0x364>)
 800093e:	2201      	movs	r2, #1
 8000940:	731a      	strb	r2, [r3, #12]
			decimal[13]=1;
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <main+0x364>)
 8000944:	2201      	movs	r2, #1
 8000946:	735a      	strb	r2, [r3, #13]
			decimal[14]=1;
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <main+0x364>)
 800094a:	2201      	movs	r2, #1
 800094c:	739a      	strb	r2, [r3, #14]
			decimal[15]=1;
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x364>)
 8000950:	2201      	movs	r2, #1
 8000952:	73da      	strb	r2, [r3, #15]
			decimal[16]=1;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <main+0x364>)
 8000956:	2201      	movs	r2, #1
 8000958:	741a      	strb	r2, [r3, #16]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 800095a:	4828      	ldr	r0, [pc, #160]	; (80009fc <main+0x368>)
 800095c:	f00a fca0 	bl	800b2a0 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <main+0x368>)
 8000962:	2200      	movs	r2, #0
 8000964:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <main+0x36c>)
 8000968:	f00a fc9a 	bl	800b2a0 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <main+0x36c>)
 800096e:	2200      	movs	r2, #0
 8000970:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000972:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000976:	2103      	movs	r1, #3
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <main+0x36c>)
 800097a:	f00a fd34 	bl	800b3e6 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f001 fd63 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f955 	bl	8000c30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <main+0x370>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <main+0x374>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	099b      	lsrs	r3, r3, #6
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe34 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 fb5c 	bl	8001054 <MX_GPIO_Init>
  MX_SPI1_Init();
 800099c:	f000 f9b0 	bl	8000d00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009a0:	f000 fada 	bl	8000f58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 fb02 	bl	8000fac <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009a8:	f000 fb2a 	bl	8001000 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80009ac:	f000 f9de 	bl	8000d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009b0:	f000 fa56 	bl	8000e60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <main+0x35c>)
 80009ba:	f002 fa19 	bl	8002df0 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 80009be:	210e      	movs	r1, #14
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <main+0x378>)
 80009c2:	f000 fbcf 	bl	8001164 <ITM0_Write>
     //240103 ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
     //240103 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	4911      	ldr	r1, [pc, #68]	; (8000a10 <main+0x37c>)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <main+0x380>)
 80009cc:	f004 fb39 	bl	8005042 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4911      	ldr	r1, [pc, #68]	; (8000a18 <main+0x384>)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <main+0x388>)
 80009d6:	f004 fb34 	bl	8005042 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN == 1)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 80009da:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <main+0x34c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	e01f      	b.n	8000a20 <main+0x38c>
 80009e0:	2000245c 	.word	0x2000245c
 80009e4:	20002468 	.word	0x20002468
 80009e8:	20000a48 	.word	0x20000a48
 80009ec:	20003518 	.word	0x20003518
 80009f0:	40020000 	.word	0x40020000
 80009f4:	20000084 	.word	0x20000084
 80009f8:	20002448 	.word	0x20002448
 80009fc:	200017a8 	.word	0x200017a8
 8000a00:	20001df8 	.word	0x20001df8
 8000a04:	20000000 	.word	0x20000000
 8000a08:	10624dd3 	.word	0x10624dd3
 8000a0c:	0800efa8 	.word	0x0800efa8
 8000a10:	20003b2c 	.word	0x20003b2c
 8000a14:	2000016c 	.word	0x2000016c
 8000a18:	20003b30 	.word	0x20003b30
 8000a1c:	200001b0 	.word	0x200001b0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d103      	bne.n	8000a2c <main+0x398>
 8000a24:	2112      	movs	r1, #18
 8000a26:	486d      	ldr	r0, [pc, #436]	; (8000bdc <main+0x548>)
 8000a28:	f000 fb9c 	bl	8001164 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000a2c:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <main+0x54c>)
 8000a2e:	22f0      	movs	r2, #240	; 0xf0
 8000a30:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000a32:	4b6b      	ldr	r3, [pc, #428]	; (8000be0 <main+0x54c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000a38:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <main+0x54c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000a3e:	4b68      	ldr	r3, [pc, #416]	; (8000be0 <main+0x54c>)
 8000a40:	22c0      	movs	r2, #192	; 0xc0
 8000a42:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000a44:	4866      	ldr	r0, [pc, #408]	; (8000be0 <main+0x54c>)
 8000a46:	f00c f8fb 	bl	800cc40 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4864      	ldr	r0, [pc, #400]	; (8000be0 <main+0x54c>)
 8000a4e:	f00c f94d 	bl	800ccec <eth_socket_init>

   SPI_READ_EN=1;
 8000a52:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <main+0x550>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000a58:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <main+0x54c>)
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <main+0x54c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <main+0x54c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <main+0x54c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	75da      	strb	r2, [r3, #23]
   		  ESP_HW_Init=0;
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
   	  }
     }*/

     HAL_Delay(1000);
 8000a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a74:	f001 fd5a 	bl	800252c <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 8000a78:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a7c:	485a      	ldr	r0, [pc, #360]	; (8000be8 <main+0x554>)
 8000a7e:	f009 ff3b 	bl	800a8f8 <LoRa_set_sndTIMER>
	  						}
	  					}

	  		}*/
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <main+0x558>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d004      	beq.n	8000a94 <main+0x400>
 8000a8a:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <main+0x554>)
 8000a8c:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d170      	bne.n	8000b76 <main+0x4e2>
	  		{
	  			if(FLAG_UART2==1)
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <main+0x558>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d105      	bne.n	8000aa8 <main+0x414>
	  				{
	  				FLAG_UART2=0;
 8000a9c:	4b53      	ldr	r3, [pc, #332]	; (8000bec <main+0x558>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000aa2:	4851      	ldr	r0, [pc, #324]	; (8000be8 <main+0x554>)
 8000aa4:	f009 ff44 	bl	800a930 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000aa8:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <main+0x554>)
 8000aaa:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d161      	bne.n	8000b76 <main+0x4e2>
	  				{
	  					lr.tmr_dly_ON=0;
 8000ab2:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <main+0x554>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000aba:	f241 3188 	movw	r1, #5000	; 0x1388
 8000abe:	484a      	ldr	r0, [pc, #296]	; (8000be8 <main+0x554>)
 8000ac0:	f009 ff1a 	bl	800a8f8 <LoRa_set_sndTIMER>
						lr.dest_address[0]='\0';
 8000ac4:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <main+0x554>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000aca:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <main+0x554>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

			  			/*strncat(lr.dest_address,"1",1);
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");*/
		  				lr.estado=_SENT;
 8000ad2:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <main+0x554>)
 8000ad4:	2214      	movs	r2, #20
 8000ad6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000ada:	4845      	ldr	r0, [pc, #276]	; (8000bf0 <main+0x55c>)
 8000adc:	f7ff fb8a 	bl	80001f4 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <main+0x55c>)
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4942      	ldr	r1, [pc, #264]	; (8000bf4 <main+0x560>)
 8000aea:	461a      	mov	r2, r3
 8000aec:	460b      	mov	r3, r1
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000af6:	e02b      	b.n	8000b50 <main+0x4bc>
		  					{
			  					data[0]='\0';
 8000af8:	2300      	movs	r3, #0
 8000afa:	713b      	strb	r3, [r7, #4]
			  					//itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
			  					FTOA(ModBUS_F03_Read(&mb_eth,n),data,decimal[n]);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	483d      	ldr	r0, [pc, #244]	; (8000bf8 <main+0x564>)
 8000b04:	f00a fc9e 	bl	800b444 <ModBUS_F03_Read>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	4a3b      	ldr	r2, [pc, #236]	; (8000bfc <main+0x568>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f00c fea9 	bl	800d870 <FTOA>
								strncat(lr.txbuff,data,strlen(data));
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb67 	bl	80001f4 <strlen>
 8000b26:	4602      	mov	r2, r0
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4834      	ldr	r0, [pc, #208]	; (8000c00 <main+0x56c>)
 8000b2e:	f00d f968 	bl	800de02 <strncat>
								strncat(lr.txbuff,";",1);
 8000b32:	4833      	ldr	r0, [pc, #204]	; (8000c00 <main+0x56c>)
 8000b34:	f7ff fb5e 	bl	80001f4 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <main+0x56c>)
 8000b3e:	4413      	add	r3, r2
 8000b40:	4930      	ldr	r1, [pc, #192]	; (8000c04 <main+0x570>)
 8000b42:	461a      	mov	r2, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	8013      	strh	r3, [r2, #0]
								n++;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
		  				while(n<16)//while(n<11)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	ddd0      	ble.n	8000af8 <main+0x464>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000b56:	482a      	ldr	r0, [pc, #168]	; (8000c00 <main+0x56c>)
 8000b58:	f7ff fb4c 	bl	80001f4 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <main+0x554>)
 8000b62:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000b66:	4928      	ldr	r1, [pc, #160]	; (8000c08 <main+0x574>)
 8000b68:	481f      	ldr	r0, [pc, #124]	; (8000be8 <main+0x554>)
 8000b6a:	f009 fe09 	bl	800a780 <LoRa_Send>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <main+0x578>)
 8000b74:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <main+0x57c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d108      	bne.n	8000b90 <main+0x4fc>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4924      	ldr	r1, [pc, #144]	; (8000c14 <main+0x580>)
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <main+0x584>)
 8000b84:	f008 f990 	bl	8008ea8 <WiFi_Conn_ND>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <main+0x588>)
 8000b8e:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <main+0x58c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	f47f af74 	bne.w	8000a82 <main+0x3ee>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	4820      	ldr	r0, [pc, #128]	; (8000c24 <main+0x590>)
 8000ba2:	f002 f925 	bl	8002df0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000ba6:	2115      	movs	r1, #21
 8000ba8:	481f      	ldr	r0, [pc, #124]	; (8000c28 <main+0x594>)
 8000baa:	f000 fadb 	bl	8001164 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000bae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb2:	f001 fcbb 	bl	800252c <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbc:	4819      	ldr	r0, [pc, #100]	; (8000c24 <main+0x590>)
 8000bbe:	f002 f917 	bl	8002df0 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000bc2:	2118      	movs	r1, #24
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <main+0x598>)
 8000bc6:	f000 facd 	bl	8001164 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000bca:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bce:	f001 fcad 	bl	800252c <HAL_Delay>
	  				esp_restart=0;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <main+0x58c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000bd8:	e753      	b.n	8000a82 <main+0x3ee>
 8000bda:	bf00      	nop
 8000bdc:	0800efb8 	.word	0x0800efb8
 8000be0:	20002468 	.word	0x20002468
 8000be4:	20003524 	.word	0x20003524
 8000be8:	20000240 	.word	0x20000240
 8000bec:	2000351e 	.word	0x2000351e
 8000bf0:	20000256 	.word	0x20000256
 8000bf4:	0800efcc 	.word	0x0800efcc
 8000bf8:	200017a8 	.word	0x200017a8
 8000bfc:	20002448 	.word	0x20002448
 8000c00:	2000071c 	.word	0x2000071c
 8000c04:	0800efd0 	.word	0x0800efd0
 8000c08:	200001b0 	.word	0x200001b0
 8000c0c:	20000a44 	.word	0x20000a44
 8000c10:	20003519 	.word	0x20003519
 8000c14:	2000016c 	.word	0x2000016c
 8000c18:	20000a48 	.word	0x20000a48
 8000c1c:	20003520 	.word	0x20003520
 8000c20:	2000351f 	.word	0x2000351f
 8000c24:	40020000 	.word	0x40020000
 8000c28:	0800efd4 	.word	0x0800efd4
 8000c2c:	0800efec 	.word	0x0800efec

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00d f8d7 	bl	800ddf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 f8cf 	bl	8002e58 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc0:	f001 f8ae 	bl	8001e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2103      	movs	r1, #3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fb31 	bl	8003348 <HAL_RCC_ClockConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cec:	f001 f898 	bl	8001e20 <Error_Handler>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3750      	adds	r7, #80	; 0x50
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI1_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d52:	f002 fcd9 	bl	8003708 <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f001 f860 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000084 	.word	0x20000084
 8000d68:	40013000 	.word	0x40013000

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000da6:	2264      	movs	r2, #100	; 0x64
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000db2:	2264      	movs	r2, #100	; 0x64
 8000db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc2:	4826      	ldr	r0, [pc, #152]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000dc4:	f002 ff96 	bl	8003cf4 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000dce:	f001 f827 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481f      	ldr	r0, [pc, #124]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000de0:	f003 fb9e 	bl	8004520 <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000dea:	f001 f819 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000dee:	481b      	ldr	r0, [pc, #108]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000df0:	f002 ffcf 	bl	8003d92 <HAL_TIM_OC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000dfa:	f001 f811 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000dfe:	2108      	movs	r1, #8
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000e02:	f003 f9cf 	bl	80041a4 <HAL_TIM_OnePulse_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000e0c:	f001 f808 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000e20:	f003 ff3a 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000e2a:	f000 fff9 	bl	8001e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_TIM2_Init+0xf0>)
 8000e46:	f003 fb0f 	bl	8004468 <HAL_TIM_OC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000e50:	f000 ffe6 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000dc 	.word	0x200000dc

08000e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000e92:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <MX_TIM3_Init+0xf4>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000e98:	2264      	movs	r2, #100	; 0x64
 8000e9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000ea4:	2296      	movs	r2, #150	; 0x96
 8000ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000eb6:	f002 ff1d 	bl	8003cf4 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ec0:	f000 ffae 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481f      	ldr	r0, [pc, #124]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000ed2:	f003 fb25 	bl	8004520 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000edc:	f000 ffa0 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000ee2:	f002 ff56 	bl	8003d92 <HAL_TIM_OC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000eec:	f000 ff98 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4817      	ldr	r0, [pc, #92]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000ef4:	f003 f956 	bl	80041a4 <HAL_TIM_OnePulse_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000efe:	f000 ff8f 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000f12:	f003 fec1 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000f1c:	f000 ff80 	bl	8001e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000f20:	2320      	movs	r3, #32
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM3_Init+0xf0>)
 8000f38:	f003 fa96 	bl	8004468 <HAL_TIM_OC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000f42:	f000 ff6d 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	; 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000124 	.word	0x20000124
 8000f54:	40000400 	.word	0x40000400

08000f58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_USART1_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f003 ff04 	bl	8004d9c <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f000 ff41 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000016c 	.word	0x2000016c
 8000fa8:	40011000 	.word	0x40011000

08000fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_USART2_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f003 feda 	bl	8004d9c <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f000 ff17 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001b0 	.word	0x200001b0
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART6_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART6_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART6_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART6_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART6_UART_Init+0x4c>)
 8001038:	f003 feb0 	bl	8004d9c <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 feed 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f4 	.word	0x200001f4
 8001050:	40011400 	.word	0x40011400

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <MX_GPIO_Init+0x104>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <MX_GPIO_Init+0x104>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_GPIO_Init+0x104>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_GPIO_Init+0x104>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a32      	ldr	r2, [pc, #200]	; (8001158 <MX_GPIO_Init+0x104>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_GPIO_Init+0x104>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_GPIO_Init+0x104>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <MX_GPIO_Init+0x104>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_GPIO_Init+0x104>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_GPIO_Init+0x104>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <MX_GPIO_Init+0x104>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_GPIO_Init+0x104>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <MX_GPIO_Init+0x108>)
 80010e2:	f001 fe85 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	481d      	ldr	r0, [pc, #116]	; (8001160 <MX_GPIO_Init+0x10c>)
 80010ec:	f001 fe80 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <MX_GPIO_Init+0x10c>)
 80010f6:	f001 fe7b 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80010fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <MX_GPIO_Init+0x108>)
 8001114:	f001 fc04 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8001118:	f240 1301 	movw	r3, #257	; 0x101
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_GPIO_Init+0x10c>)
 800112e:	f001 fbf7 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8001132:	2312      	movs	r3, #18
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_GPIO_Init+0x10c>)
 800114a:	f001 fbe9 	bl	8002920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40020800 	.word	0x40020800
 8001160:	40020000 	.word	0x40020000

08001164 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e009      	b.n	8001188 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa61 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf1      	blt.n	8001174 <ITM0_Write+0x10>
  }
  return len;
 8001190:	683b      	ldr	r3, [r7, #0]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 80011a2:	4bbf      	ldr	r3, [pc, #764]	; (80014a0 <SysTick_Handler+0x304>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4abd      	ldr	r2, [pc, #756]	; (80014a0 <SysTick_Handler+0x304>)
 80011aa:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 80011ac:	4bbd      	ldr	r3, [pc, #756]	; (80014a4 <SysTick_Handler+0x308>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4abc      	ldr	r2, [pc, #752]	; (80014a4 <SysTick_Handler+0x308>)
 80011b4:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80011b6:	4bbc      	ldr	r3, [pc, #752]	; (80014a8 <SysTick_Handler+0x30c>)
 80011b8:	7a1b      	ldrb	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <SysTick_Handler+0x2c>
 80011be:	4bbb      	ldr	r3, [pc, #748]	; (80014ac <SysTick_Handler+0x310>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4ab9      	ldr	r2, [pc, #740]	; (80014ac <SysTick_Handler+0x310>)
 80011c6:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80011c8:	4bb7      	ldr	r3, [pc, #732]	; (80014a8 <SysTick_Handler+0x30c>)
 80011ca:	7a1b      	ldrb	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00c      	beq.n	80011ea <SysTick_Handler+0x4e>
 80011d0:	4bb5      	ldr	r3, [pc, #724]	; (80014a8 <SysTick_Handler+0x30c>)
 80011d2:	88db      	ldrh	r3, [r3, #6]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4bb5      	ldr	r3, [pc, #724]	; (80014ac <SysTick_Handler+0x310>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	da05      	bge.n	80011ea <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80011de:	4bb2      	ldr	r3, [pc, #712]	; (80014a8 <SysTick_Handler+0x30c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80011e4:	4bb1      	ldr	r3, [pc, #708]	; (80014ac <SysTick_Handler+0x310>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80011ea:	4bb1      	ldr	r3, [pc, #708]	; (80014b0 <SysTick_Handler+0x314>)
 80011ec:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d116      	bne.n	8001222 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80011f4:	4bae      	ldr	r3, [pc, #696]	; (80014b0 <SysTick_Handler+0x314>)
 80011f6:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80011fa:	3301      	adds	r3, #1
 80011fc:	4aac      	ldr	r2, [pc, #688]	; (80014b0 <SysTick_Handler+0x314>)
 80011fe:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001202:	4bab      	ldr	r3, [pc, #684]	; (80014b0 <SysTick_Handler+0x314>)
 8001204:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001208:	4ba9      	ldr	r3, [pc, #676]	; (80014b0 <SysTick_Handler+0x314>)
 800120a:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 800120e:	429a      	cmp	r2, r3
 8001210:	dd07      	ble.n	8001222 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 8001212:	4ba7      	ldr	r3, [pc, #668]	; (80014b0 <SysTick_Handler+0x314>)
 8001214:	2201      	movs	r2, #1
 8001216:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 800121a:	4ba5      	ldr	r3, [pc, #660]	; (80014b0 <SysTick_Handler+0x314>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	//240103 if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001222:	4ba4      	ldr	r3, [pc, #656]	; (80014b4 <SysTick_Handler+0x318>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800122a:	db0c      	blt.n	8001246 <SysTick_Handler+0xaa>
 800122c:	4ba2      	ldr	r3, [pc, #648]	; (80014b8 <SysTick_Handler+0x31c>)
 800122e:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8001232:	2b01      	cmp	r3, #1
 8001234:	d007      	beq.n	8001246 <SysTick_Handler+0xaa>
 8001236:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <SysTick_Handler+0x31c>)
 8001238:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <SysTick_Handler+0xaa>
 8001240:	4b9e      	ldr	r3, [pc, #632]	; (80014bc <SysTick_Handler+0x320>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001246:	4b9e      	ldr	r3, [pc, #632]	; (80014c0 <SysTick_Handler+0x324>)
 8001248:	7b9b      	ldrb	r3, [r3, #14]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <SysTick_Handler+0xd0>
	{
		ETH.ETH_WDG++;
 800124e:	4b9c      	ldr	r3, [pc, #624]	; (80014c0 <SysTick_Handler+0x324>)
 8001250:	899b      	ldrh	r3, [r3, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b9a      	ldr	r3, [pc, #616]	; (80014c0 <SysTick_Handler+0x324>)
 8001258:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800125a:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <SysTick_Handler+0x324>)
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001262:	d303      	bcc.n	800126c <SysTick_Handler+0xd0>
		{
			ETH.ETH_WDG=64000;
 8001264:	4b96      	ldr	r3, [pc, #600]	; (80014c0 <SysTick_Handler+0x324>)
 8001266:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800126a:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <SysTick_Handler+0x304>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	f040 841f 	bne.w	8001ab4 <SysTick_Handler+0x918>
  {
	  dbgn++;
 8001276:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <SysTick_Handler+0x328>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a91      	ldr	r2, [pc, #580]	; (80014c4 <SysTick_Handler+0x328>)
 800127e:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001280:	4b87      	ldr	r3, [pc, #540]	; (80014a0 <SysTick_Handler+0x304>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001286:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <SysTick_Handler+0x32c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a8e      	ldr	r2, [pc, #568]	; (80014c8 <SysTick_Handler+0x32c>)
 800128e:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001290:	4b8e      	ldr	r3, [pc, #568]	; (80014cc <SysTick_Handler+0x330>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001298:	d102      	bne.n	80012a0 <SysTick_Handler+0x104>
 800129a:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <SysTick_Handler+0x330>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80012a0:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <SysTick_Handler+0x334>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <SysTick_Handler+0x116>
 80012a8:	4b88      	ldr	r3, [pc, #544]	; (80014cc <SysTick_Handler+0x330>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <SysTick_Handler+0x330>)
 80012b0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80012b2:	4b86      	ldr	r3, [pc, #536]	; (80014cc <SysTick_Handler+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d102      	bne.n	80012c0 <SysTick_Handler+0x124>
 80012ba:	4b85      	ldr	r3, [pc, #532]	; (80014d0 <SysTick_Handler+0x334>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80012c0:	4b83      	ldr	r3, [pc, #524]	; (80014d0 <SysTick_Handler+0x334>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d104      	bne.n	80012d2 <SysTick_Handler+0x136>
 80012c8:	4b80      	ldr	r3, [pc, #512]	; (80014cc <SysTick_Handler+0x330>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a7f      	ldr	r2, [pc, #508]	; (80014cc <SysTick_Handler+0x330>)
 80012d0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80012d2:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <SysTick_Handler+0x330>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <SysTick_Handler+0x144>
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <SysTick_Handler+0x334>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e4:	487b      	ldr	r0, [pc, #492]	; (80014d4 <SysTick_Handler+0x338>)
 80012e6:	f001 fd9c 	bl	8002e22 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <SysTick_Handler+0x33c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 83d0 	beq.w	8001a94 <SysTick_Handler+0x8f8>
	  	  {
	  if(SPI_READ_EN)
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <SysTick_Handler+0x340>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 83cf 	beq.w	8001a9c <SysTick_Handler+0x900>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80012fe:	2100      	movs	r1, #0
 8001300:	486f      	ldr	r0, [pc, #444]	; (80014c0 <SysTick_Handler+0x324>)
 8001302:	f00b fd4b 	bl	800cd9c <eth_rd_SOCKET_STAT>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <SysTick_Handler+0x324>)
 800130c:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800130e:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <SysTick_Handler+0x324>)
 8001310:	7b9b      	ldrb	r3, [r3, #14]
 8001312:	2b5f      	cmp	r3, #95	; 0x5f
 8001314:	f200 83c7 	bhi.w	8001aa6 <SysTick_Handler+0x90a>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <SysTick_Handler+0x184>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	080014e1 	.word	0x080014e1
 8001324:	08001aa7 	.word	0x08001aa7
 8001328:	08001aa7 	.word	0x08001aa7
 800132c:	08001aa7 	.word	0x08001aa7
 8001330:	08001aa7 	.word	0x08001aa7
 8001334:	08001aa7 	.word	0x08001aa7
 8001338:	08001aa7 	.word	0x08001aa7
 800133c:	08001aa7 	.word	0x08001aa7
 8001340:	08001aa7 	.word	0x08001aa7
 8001344:	08001aa7 	.word	0x08001aa7
 8001348:	08001aa7 	.word	0x08001aa7
 800134c:	08001aa7 	.word	0x08001aa7
 8001350:	08001aa7 	.word	0x08001aa7
 8001354:	08001aa7 	.word	0x08001aa7
 8001358:	08001aa7 	.word	0x08001aa7
 800135c:	08001aa7 	.word	0x08001aa7
 8001360:	08001aa7 	.word	0x08001aa7
 8001364:	08001aa7 	.word	0x08001aa7
 8001368:	08001aa7 	.word	0x08001aa7
 800136c:	08001519 	.word	0x08001519
 8001370:	0800156b 	.word	0x0800156b
 8001374:	08001583 	.word	0x08001583
 8001378:	0800159b 	.word	0x0800159b
 800137c:	080015b3 	.word	0x080015b3
 8001380:	0800190f 	.word	0x0800190f
 8001384:	08001aa7 	.word	0x08001aa7
 8001388:	08001927 	.word	0x08001927
 800138c:	0800193f 	.word	0x0800193f
 8001390:	0800197d 	.word	0x0800197d
 8001394:	080019bb 	.word	0x080019bb
 8001398:	08001aa7 	.word	0x08001aa7
 800139c:	08001aa7 	.word	0x08001aa7
 80013a0:	08001aa7 	.word	0x08001aa7
 80013a4:	08001aa7 	.word	0x08001aa7
 80013a8:	080019d3 	.word	0x080019d3
 80013ac:	08001aa7 	.word	0x08001aa7
 80013b0:	08001aa7 	.word	0x08001aa7
 80013b4:	08001aa7 	.word	0x08001aa7
 80013b8:	08001aa7 	.word	0x08001aa7
 80013bc:	08001aa7 	.word	0x08001aa7
 80013c0:	08001aa7 	.word	0x08001aa7
 80013c4:	08001aa7 	.word	0x08001aa7
 80013c8:	08001aa7 	.word	0x08001aa7
 80013cc:	08001aa7 	.word	0x08001aa7
 80013d0:	08001aa7 	.word	0x08001aa7
 80013d4:	08001aa7 	.word	0x08001aa7
 80013d8:	08001aa7 	.word	0x08001aa7
 80013dc:	08001aa7 	.word	0x08001aa7
 80013e0:	08001aa7 	.word	0x08001aa7
 80013e4:	08001aa7 	.word	0x08001aa7
 80013e8:	08001a4d 	.word	0x08001a4d
 80013ec:	08001aa7 	.word	0x08001aa7
 80013f0:	08001aa7 	.word	0x08001aa7
 80013f4:	08001aa7 	.word	0x08001aa7
 80013f8:	08001aa7 	.word	0x08001aa7
 80013fc:	08001aa7 	.word	0x08001aa7
 8001400:	08001aa7 	.word	0x08001aa7
 8001404:	08001aa7 	.word	0x08001aa7
 8001408:	08001aa7 	.word	0x08001aa7
 800140c:	08001aa7 	.word	0x08001aa7
 8001410:	08001aa7 	.word	0x08001aa7
 8001414:	08001aa7 	.word	0x08001aa7
 8001418:	08001aa7 	.word	0x08001aa7
 800141c:	08001aa7 	.word	0x08001aa7
 8001420:	08001aa7 	.word	0x08001aa7
 8001424:	08001aa7 	.word	0x08001aa7
 8001428:	08001a65 	.word	0x08001a65
 800142c:	08001aa7 	.word	0x08001aa7
 8001430:	08001aa7 	.word	0x08001aa7
 8001434:	08001aa7 	.word	0x08001aa7
 8001438:	08001aa7 	.word	0x08001aa7
 800143c:	08001aa7 	.word	0x08001aa7
 8001440:	08001aa7 	.word	0x08001aa7
 8001444:	08001aa7 	.word	0x08001aa7
 8001448:	08001aa7 	.word	0x08001aa7
 800144c:	08001aa7 	.word	0x08001aa7
 8001450:	08001aa7 	.word	0x08001aa7
 8001454:	08001aa7 	.word	0x08001aa7
 8001458:	08001aa7 	.word	0x08001aa7
 800145c:	08001aa7 	.word	0x08001aa7
 8001460:	08001aa7 	.word	0x08001aa7
 8001464:	08001aa7 	.word	0x08001aa7
 8001468:	08001aa7 	.word	0x08001aa7
 800146c:	08001aa7 	.word	0x08001aa7
 8001470:	08001aa7 	.word	0x08001aa7
 8001474:	08001aa7 	.word	0x08001aa7
 8001478:	08001aa7 	.word	0x08001aa7
 800147c:	08001aa7 	.word	0x08001aa7
 8001480:	08001aa7 	.word	0x08001aa7
 8001484:	08001aa7 	.word	0x08001aa7
 8001488:	08001aa7 	.word	0x08001aa7
 800148c:	08001aa7 	.word	0x08001aa7
 8001490:	08001aa7 	.word	0x08001aa7
 8001494:	08001aa7 	.word	0x08001aa7
 8001498:	08001aa7 	.word	0x08001aa7
 800149c:	08001a7d 	.word	0x08001a7d
 80014a0:	20000238 	.word	0x20000238
 80014a4:	20003b40 	.word	0x20003b40
 80014a8:	200017a8 	.word	0x200017a8
 80014ac:	20003b48 	.word	0x20003b48
 80014b0:	20000240 	.word	0x20000240
 80014b4:	20002464 	.word	0x20002464
 80014b8:	20000a48 	.word	0x20000a48
 80014bc:	20002460 	.word	0x20002460
 80014c0:	20002468 	.word	0x20002468
 80014c4:	20003b64 	.word	0x20003b64
 80014c8:	2000023c 	.word	0x2000023c
 80014cc:	20003b44 	.word	0x20003b44
 80014d0:	20003521 	.word	0x20003521
 80014d4:	40020800 	.word	0x40020800
 80014d8:	20003518 	.word	0x20003518
 80014dc:	20003524 	.word	0x20003524
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80014e0:	4b82      	ldr	r3, [pc, #520]	; (80016ec <SysTick_Handler+0x550>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <SysTick_Handler+0x354>
 80014e8:	2113      	movs	r1, #19
 80014ea:	4881      	ldr	r0, [pc, #516]	; (80016f0 <SysTick_Handler+0x554>)
 80014ec:	f7ff fe3a 	bl	8001164 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80014f0:	2201      	movs	r2, #1
 80014f2:	2100      	movs	r1, #0
 80014f4:	487f      	ldr	r0, [pc, #508]	; (80016f4 <SysTick_Handler+0x558>)
 80014f6:	f00b fb67 	bl	800cbc8 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80014fa:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <SysTick_Handler+0x558>)
 80014fc:	899b      	ldrh	r3, [r3, #12]
 80014fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8001502:	4293      	cmp	r3, r2
 8001504:	f240 82cc 	bls.w	8001aa0 <SysTick_Handler+0x904>
					 {
						 eth_init(&ETH);
 8001508:	487a      	ldr	r0, [pc, #488]	; (80016f4 <SysTick_Handler+0x558>)
 800150a:	f00b fb99 	bl	800cc40 <eth_init>

						 eth_socket_init(&ETH,0);
 800150e:	2100      	movs	r1, #0
 8001510:	4878      	ldr	r0, [pc, #480]	; (80016f4 <SysTick_Handler+0x558>)
 8001512:	f00b fbeb 	bl	800ccec <eth_socket_init>
					 }

				 }
			 break;
 8001516:	e2c3      	b.n	8001aa0 <SysTick_Handler+0x904>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <SysTick_Handler+0x558>)
 800151a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001522:	2b01      	cmp	r3, #1
 8001524:	d110      	bne.n	8001548 <SysTick_Handler+0x3ac>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001526:	4b71      	ldr	r3, [pc, #452]	; (80016ec <SysTick_Handler+0x550>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <SysTick_Handler+0x39a>
 800152e:	2111      	movs	r1, #17
 8001530:	4871      	ldr	r0, [pc, #452]	; (80016f8 <SysTick_Handler+0x55c>)
 8001532:	f7ff fe17 	bl	8001164 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001536:	2202      	movs	r2, #2
 8001538:	2100      	movs	r1, #0
 800153a:	486e      	ldr	r0, [pc, #440]	; (80016f4 <SysTick_Handler+0x558>)
 800153c:	f00b fb44 	bl	800cbc8 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001540:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <SysTick_Handler+0x558>)
 8001542:	2200      	movs	r2, #0
 8001544:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001546:	e2ae      	b.n	8001aa6 <SysTick_Handler+0x90a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001548:	2204      	movs	r2, #4
 800154a:	2100      	movs	r1, #0
 800154c:	4869      	ldr	r0, [pc, #420]	; (80016f4 <SysTick_Handler+0x558>)
 800154e:	f00b fb3b 	bl	800cbc8 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <SysTick_Handler+0x550>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <SysTick_Handler+0x3c6>
 800155a:	2115      	movs	r1, #21
 800155c:	4867      	ldr	r0, [pc, #412]	; (80016fc <SysTick_Handler+0x560>)
 800155e:	f7ff fe01 	bl	8001164 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001562:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <SysTick_Handler+0x558>)
 8001564:	2200      	movs	r2, #0
 8001566:	819a      	strh	r2, [r3, #12]
			 break;
 8001568:	e29d      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800156a:	4b60      	ldr	r3, [pc, #384]	; (80016ec <SysTick_Handler+0x550>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <SysTick_Handler+0x3de>
 8001572:	2113      	movs	r1, #19
 8001574:	4862      	ldr	r0, [pc, #392]	; (8001700 <SysTick_Handler+0x564>)
 8001576:	f7ff fdf5 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <SysTick_Handler+0x558>)
 800157c:	2200      	movs	r2, #0
 800157e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001580:	e291      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001582:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <SysTick_Handler+0x550>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <SysTick_Handler+0x3f6>
 800158a:	2114      	movs	r1, #20
 800158c:	485d      	ldr	r0, [pc, #372]	; (8001704 <SysTick_Handler+0x568>)
 800158e:	f7ff fde9 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001592:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <SysTick_Handler+0x558>)
 8001594:	2200      	movs	r2, #0
 8001596:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001598:	e285      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800159a:	4b54      	ldr	r3, [pc, #336]	; (80016ec <SysTick_Handler+0x550>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <SysTick_Handler+0x40e>
 80015a2:	2114      	movs	r1, #20
 80015a4:	4858      	ldr	r0, [pc, #352]	; (8001708 <SysTick_Handler+0x56c>)
 80015a6:	f7ff fddd 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <SysTick_Handler+0x558>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80015b0:	e279      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN==1) ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80015b2:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <SysTick_Handler+0x550>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d103      	bne.n	80015c2 <SysTick_Handler+0x426>
 80015ba:	2118      	movs	r1, #24
 80015bc:	4853      	ldr	r0, [pc, #332]	; (800170c <SysTick_Handler+0x570>)
 80015be:	f7ff fdd1 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <SysTick_Handler+0x558>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <SysTick_Handler+0x558>)
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	f040 80b0 	bne.w	8001738 <SysTick_Handler+0x59c>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80015d8:	2302      	movs	r3, #2
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <SysTick_Handler+0x574>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	230f      	movs	r3, #15
 80015e2:	2226      	movs	r2, #38	; 0x26
 80015e4:	2104      	movs	r1, #4
 80015e6:	4843      	ldr	r0, [pc, #268]	; (80016f4 <SysTick_Handler+0x558>)
 80015e8:	f00b f9c3 	bl	800c972 <SPI_ETH_REG>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <SysTick_Handler+0x578>)
 80015f2:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <SysTick_Handler+0x578>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8253 	beq.w	8001aa4 <SysTick_Handler+0x908>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <SysTick_Handler+0x578>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4a45      	ldr	r2, [pc, #276]	; (8001718 <SysTick_Handler+0x57c>)
 8001604:	2100      	movs	r1, #0
 8001606:	483b      	ldr	r0, [pc, #236]	; (80016f4 <SysTick_Handler+0x558>)
 8001608:	f00b fc02 	bl	800ce10 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <SysTick_Handler+0x57c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001616:	4837      	ldr	r0, [pc, #220]	; (80016f4 <SysTick_Handler+0x558>)
 8001618:	f00b fa23 	bl	800ca62 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 800161c:	2240      	movs	r2, #64	; 0x40
 800161e:	2100      	movs	r1, #0
 8001620:	4834      	ldr	r0, [pc, #208]	; (80016f4 <SysTick_Handler+0x558>)
 8001622:	f00b fad1 	bl	800cbc8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001626:	bf00      	nop
 8001628:	2100      	movs	r1, #0
 800162a:	4832      	ldr	r0, [pc, #200]	; (80016f4 <SysTick_Handler+0x558>)
 800162c:	f00b fbd3 	bl	800cdd6 <eth_rd_SOCKET_CMD>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f8      	bne.n	8001628 <SysTick_Handler+0x48c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <SysTick_Handler+0x578>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	4936      	ldr	r1, [pc, #216]	; (800171c <SysTick_Handler+0x580>)
 8001644:	4836      	ldr	r0, [pc, #216]	; (8001720 <SysTick_Handler+0x584>)
 8001646:	f00c f989 	bl	800d95c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <SysTick_Handler+0x578>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <SysTick_Handler+0x588>)
 8001652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <SysTick_Handler+0x578>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <SysTick_Handler+0x4c8>
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <SysTick_Handler+0x558>)
 8001660:	2201      	movs	r2, #1
 8001662:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <SysTick_Handler+0x588>)
 8001666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800166a:	4619      	mov	r1, r3
 800166c:	482c      	ldr	r0, [pc, #176]	; (8001720 <SysTick_Handler+0x584>)
 800166e:	f009 fe6b 	bl	800b348 <ModBUS_Check>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00d      	beq.n	8001694 <SysTick_Handler+0x4f8>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001678:	482a      	ldr	r0, [pc, #168]	; (8001724 <SysTick_Handler+0x588>)
 800167a:	f009 ff69 	bl	800b550 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SysTick_Handler+0x588>)
 8001680:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	4927      	ldr	r1, [pc, #156]	; (8001728 <SysTick_Handler+0x58c>)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <SysTick_Handler+0x580>)
 800168e:	f00c f965 	bl	800d95c <CopiaVector>
 8001692:	e007      	b.n	80016a4 <SysTick_Handler+0x508>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <SysTick_Handler+0x550>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <SysTick_Handler+0x508>
 800169c:	2111      	movs	r1, #17
 800169e:	4823      	ldr	r0, [pc, #140]	; (800172c <SysTick_Handler+0x590>)
 80016a0:	f7ff fd60 	bl	8001164 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <SysTick_Handler+0x588>)
 80016a6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <SysTick_Handler+0x594>)
 80016ae:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <SysTick_Handler+0x594>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <SysTick_Handler+0x598>)
 80016b6:	2100      	movs	r1, #0
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <SysTick_Handler+0x558>)
 80016ba:	f00b fc79 	bl	800cfb0 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <SysTick_Handler+0x598>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f240 4124 	movw	r1, #1060	; 0x424
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <SysTick_Handler+0x558>)
 80016ca:	f00b f9ca 	bl	800ca62 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80016ce:	2220      	movs	r2, #32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <SysTick_Handler+0x558>)
 80016d4:	f00b fa78 	bl	800cbc8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80016d8:	bf00      	nop
 80016da:	2100      	movs	r1, #0
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <SysTick_Handler+0x558>)
 80016de:	f00b fb7a 	bl	800cdd6 <eth_rd_SOCKET_CMD>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f8      	bne.n	80016da <SysTick_Handler+0x53e>

							}
						}
					}
				 }
			 break;
 80016e8:	e1dc      	b.n	8001aa4 <SysTick_Handler+0x908>
 80016ea:	bf00      	nop
 80016ec:	2000245c 	.word	0x2000245c
 80016f0:	0800f008 	.word	0x0800f008
 80016f4:	20002468 	.word	0x20002468
 80016f8:	0800f01c 	.word	0x0800f01c
 80016fc:	0800f030 	.word	0x0800f030
 8001700:	0800f048 	.word	0x0800f048
 8001704:	0800f05c 	.word	0x0800f05c
 8001708:	0800f074 	.word	0x0800f074
 800170c:	0800f08c 	.word	0x0800f08c
 8001710:	200034d8 	.word	0x200034d8
 8001714:	200034d0 	.word	0x200034d0
 8001718:	200034d4 	.word	0x200034d4
 800171c:	20002484 	.word	0x20002484
 8001720:	200017ba 	.word	0x200017ba
 8001724:	200017a8 	.word	0x200017a8
 8001728:	200019c0 	.word	0x200019c0
 800172c:	0800f0a8 	.word	0x0800f0a8
 8001730:	200034d6 	.word	0x200034d6
 8001734:	200034d2 	.word	0x200034d2
						if (mb_eth._w_answer==0)
 8001738:	4bac      	ldr	r3, [pc, #688]	; (80019ec <SysTick_Handler+0x850>)
 800173a:	7a1b      	ldrb	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d167      	bne.n	8001810 <SysTick_Handler+0x674>
							ETH.data[0]=0x00;
 8001740:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <SysTick_Handler+0x854>)
 8001742:	2200      	movs	r2, #0
 8001744:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001746:	4baa      	ldr	r3, [pc, #680]	; (80019f0 <SysTick_Handler+0x854>)
 8001748:	2200      	movs	r2, #0
 800174a:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 800174c:	4ba8      	ldr	r3, [pc, #672]	; (80019f0 <SysTick_Handler+0x854>)
 800174e:	2200      	movs	r2, #0
 8001750:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001752:	4ba7      	ldr	r3, [pc, #668]	; (80019f0 <SysTick_Handler+0x854>)
 8001754:	2200      	movs	r2, #0
 8001756:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001758:	4ba5      	ldr	r3, [pc, #660]	; (80019f0 <SysTick_Handler+0x854>)
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001760:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <SysTick_Handler+0x854>)
 8001762:	2206      	movs	r2, #6
 8001764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001768:	4ba1      	ldr	r3, [pc, #644]	; (80019f0 <SysTick_Handler+0x854>)
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001770:	4b9f      	ldr	r3, [pc, #636]	; (80019f0 <SysTick_Handler+0x854>)
 8001772:	2203      	movs	r2, #3
 8001774:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001778:	4b9d      	ldr	r3, [pc, #628]	; (80019f0 <SysTick_Handler+0x854>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001780:	4b9b      	ldr	r3, [pc, #620]	; (80019f0 <SysTick_Handler+0x854>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001788:	4b99      	ldr	r3, [pc, #612]	; (80019f0 <SysTick_Handler+0x854>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001790:	4b97      	ldr	r3, [pc, #604]	; (80019f0 <SysTick_Handler+0x854>)
 8001792:	220a      	movs	r2, #10
 8001794:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001798:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <SysTick_Handler+0x858>)
 800179a:	220c      	movs	r2, #12
 800179c:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 800179e:	220f      	movs	r2, #15
 80017a0:	2100      	movs	r1, #0
 80017a2:	4892      	ldr	r0, [pc, #584]	; (80019ec <SysTick_Handler+0x850>)
 80017a4:	f009 fe7d 	bl	800b4a2 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	220c      	movs	r2, #12
 80017b0:	4991      	ldr	r1, [pc, #580]	; (80019f8 <SysTick_Handler+0x85c>)
 80017b2:	4892      	ldr	r0, [pc, #584]	; (80019fc <SysTick_Handler+0x860>)
 80017b4:	f00c f8d2 	bl	800d95c <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 80017b8:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <SysTick_Handler+0x858>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4a90      	ldr	r2, [pc, #576]	; (8001a00 <SysTick_Handler+0x864>)
 80017be:	2100      	movs	r1, #0
 80017c0:	488b      	ldr	r0, [pc, #556]	; (80019f0 <SysTick_Handler+0x854>)
 80017c2:	f00b fbf5 	bl	800cfb0 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 80017c6:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <SysTick_Handler+0x864>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f240 4124 	movw	r1, #1060	; 0x424
 80017d0:	4887      	ldr	r0, [pc, #540]	; (80019f0 <SysTick_Handler+0x854>)
 80017d2:	f00b f946 	bl	800ca62 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 80017d6:	2220      	movs	r2, #32
 80017d8:	2100      	movs	r1, #0
 80017da:	4885      	ldr	r0, [pc, #532]	; (80019f0 <SysTick_Handler+0x854>)
 80017dc:	f00b f9f4 	bl	800cbc8 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80017e0:	bf00      	nop
 80017e2:	2100      	movs	r1, #0
 80017e4:	4882      	ldr	r0, [pc, #520]	; (80019f0 <SysTick_Handler+0x854>)
 80017e6:	f00b faf6 	bl	800cdd6 <eth_rd_SOCKET_CMD>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f8      	bne.n	80017e2 <SysTick_Handler+0x646>
							mb_eth._w_answer=1;	// Waiting answer flag
 80017f0:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <SysTick_Handler+0x850>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <SysTick_Handler+0x868>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN==1) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 80017fc:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <SysTick_Handler+0x86c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 814f 	bne.w	8001aa4 <SysTick_Handler+0x908>
 8001806:	2117      	movs	r1, #23
 8001808:	4880      	ldr	r0, [pc, #512]	; (8001a0c <SysTick_Handler+0x870>)
 800180a:	f7ff fcab 	bl	8001164 <ITM0_Write>
			 break;
 800180e:	e149      	b.n	8001aa4 <SysTick_Handler+0x908>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001810:	2302      	movs	r3, #2
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b7e      	ldr	r3, [pc, #504]	; (8001a10 <SysTick_Handler+0x874>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	230f      	movs	r3, #15
 800181a:	2226      	movs	r2, #38	; 0x26
 800181c:	2104      	movs	r1, #4
 800181e:	4874      	ldr	r0, [pc, #464]	; (80019f0 <SysTick_Handler+0x854>)
 8001820:	f00b f8a7 	bl	800c972 <SPI_ETH_REG>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <SysTick_Handler+0x878>)
 800182a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 800182c:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <SysTick_Handler+0x878>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8137 	beq.w	8001aa4 <SysTick_Handler+0x908>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <SysTick_Handler+0x878>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	4a77      	ldr	r2, [pc, #476]	; (8001a18 <SysTick_Handler+0x87c>)
 800183c:	2100      	movs	r1, #0
 800183e:	486c      	ldr	r0, [pc, #432]	; (80019f0 <SysTick_Handler+0x854>)
 8001840:	f00b fae6 	bl	800ce10 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001844:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <SysTick_Handler+0x87c>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800184e:	4868      	ldr	r0, [pc, #416]	; (80019f0 <SysTick_Handler+0x854>)
 8001850:	f00b f907 	bl	800ca62 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	2100      	movs	r1, #0
 8001858:	4865      	ldr	r0, [pc, #404]	; (80019f0 <SysTick_Handler+0x854>)
 800185a:	f00b f9b5 	bl	800cbc8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 800185e:	bf00      	nop
 8001860:	2100      	movs	r1, #0
 8001862:	4863      	ldr	r0, [pc, #396]	; (80019f0 <SysTick_Handler+0x854>)
 8001864:	f00b fab7 	bl	800cdd6 <eth_rd_SOCKET_CMD>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f8      	bne.n	8001860 <SysTick_Handler+0x6c4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 800186e:	4b69      	ldr	r3, [pc, #420]	; (8001a14 <SysTick_Handler+0x878>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	4960      	ldr	r1, [pc, #384]	; (80019fc <SysTick_Handler+0x860>)
 800187c:	4867      	ldr	r0, [pc, #412]	; (8001a1c <SysTick_Handler+0x880>)
 800187e:	f00c f86d 	bl	800d95c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001882:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <SysTick_Handler+0x878>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <SysTick_Handler+0x850>)
 800188a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <SysTick_Handler+0x878>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <SysTick_Handler+0x700>
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <SysTick_Handler+0x854>)
 8001898:	2201      	movs	r2, #1
 800189a:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <SysTick_Handler+0x850>)
 800189e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018a2:	4619      	mov	r1, r3
 80018a4:	485d      	ldr	r0, [pc, #372]	; (8001a1c <SysTick_Handler+0x880>)
 80018a6:	f009 fd4f 	bl	800b348 <ModBUS_Check>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d024      	beq.n	80018fa <SysTick_Handler+0x75e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 80018b0:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <SysTick_Handler+0x850>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <SysTick_Handler+0x868>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 80018bc:	484b      	ldr	r0, [pc, #300]	; (80019ec <SysTick_Handler+0x850>)
 80018be:	f009 fe47 	bl	800b550 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 80018c2:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <SysTick_Handler+0x850>)
 80018c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	4953      	ldr	r1, [pc, #332]	; (8001a1c <SysTick_Handler+0x880>)
 80018d0:	4853      	ldr	r0, [pc, #332]	; (8001a20 <SysTick_Handler+0x884>)
 80018d2:	f00c f843 	bl	800d95c <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	4951      	ldr	r1, [pc, #324]	; (8001a24 <SysTick_Handler+0x888>)
 80018e0:	4851      	ldr	r0, [pc, #324]	; (8001a28 <SysTick_Handler+0x88c>)
 80018e2:	f00c f83b 	bl	800d95c <CopiaVector>
										if (ETH_DBG_EN==1) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <SysTick_Handler+0x86c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	f040 80da 	bne.w	8001aa4 <SysTick_Handler+0x908>
 80018f0:	2117      	movs	r1, #23
 80018f2:	484e      	ldr	r0, [pc, #312]	; (8001a2c <SysTick_Handler+0x890>)
 80018f4:	f7ff fc36 	bl	8001164 <ITM0_Write>
			 break;
 80018f8:	e0d4      	b.n	8001aa4 <SysTick_Handler+0x908>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <SysTick_Handler+0x86c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80d0 	beq.w	8001aa4 <SysTick_Handler+0x908>
 8001904:	2111      	movs	r1, #17
 8001906:	484a      	ldr	r0, [pc, #296]	; (8001a30 <SysTick_Handler+0x894>)
 8001908:	f7ff fc2c 	bl	8001164 <ITM0_Write>
			 break;
 800190c:	e0ca      	b.n	8001aa4 <SysTick_Handler+0x908>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <SysTick_Handler+0x86c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <SysTick_Handler+0x782>
 8001916:	2115      	movs	r1, #21
 8001918:	4846      	ldr	r0, [pc, #280]	; (8001a34 <SysTick_Handler+0x898>)
 800191a:	f7ff fc23 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <SysTick_Handler+0x854>)
 8001920:	2200      	movs	r2, #0
 8001922:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001924:	e0bf      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <SysTick_Handler+0x86c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <SysTick_Handler+0x79a>
 800192e:	2114      	movs	r1, #20
 8001930:	4841      	ldr	r0, [pc, #260]	; (8001a38 <SysTick_Handler+0x89c>)
 8001932:	f7ff fc17 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <SysTick_Handler+0x854>)
 8001938:	2200      	movs	r2, #0
 800193a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800193c:	e0b3      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <SysTick_Handler+0x86c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <SysTick_Handler+0x7b2>
 8001946:	2116      	movs	r1, #22
 8001948:	483c      	ldr	r0, [pc, #240]	; (8001a3c <SysTick_Handler+0x8a0>)
 800194a:	f7ff fc0b 	bl	8001164 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 800194e:	2208      	movs	r2, #8
 8001950:	2100      	movs	r1, #0
 8001952:	4827      	ldr	r0, [pc, #156]	; (80019f0 <SysTick_Handler+0x854>)
 8001954:	f00b f938 	bl	800cbc8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001958:	bf00      	nop
 800195a:	2301      	movs	r3, #1
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <SysTick_Handler+0x874>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	230f      	movs	r3, #15
 8001964:	2201      	movs	r2, #1
 8001966:	2104      	movs	r1, #4
 8001968:	4821      	ldr	r0, [pc, #132]	; (80019f0 <SysTick_Handler+0x854>)
 800196a:	f00b f802 	bl	800c972 <SPI_ETH_REG>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f2      	bne.n	800195a <SysTick_Handler+0x7be>
					{}
					ETH.ETH_WDG=0;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <SysTick_Handler+0x854>)
 8001976:	2200      	movs	r2, #0
 8001978:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800197a:	e094      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <SysTick_Handler+0x86c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <SysTick_Handler+0x7f0>
 8001984:	2117      	movs	r1, #23
 8001986:	482e      	ldr	r0, [pc, #184]	; (8001a40 <SysTick_Handler+0x8a4>)
 8001988:	f7ff fbec 	bl	8001164 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 800198c:	2208      	movs	r2, #8
 800198e:	2100      	movs	r1, #0
 8001990:	4817      	ldr	r0, [pc, #92]	; (80019f0 <SysTick_Handler+0x854>)
 8001992:	f00b f919 	bl	800cbc8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001996:	bf00      	nop
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <SysTick_Handler+0x874>)
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	230f      	movs	r3, #15
 80019a2:	2201      	movs	r2, #1
 80019a4:	2104      	movs	r1, #4
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <SysTick_Handler+0x854>)
 80019a8:	f00a ffe3 	bl	800c972 <SPI_ETH_REG>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f2      	bne.n	8001998 <SysTick_Handler+0x7fc>
					{}
					ETH.ETH_WDG=0;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <SysTick_Handler+0x854>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019b8:	e075      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <SysTick_Handler+0x86c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <SysTick_Handler+0x82e>
 80019c2:	2115      	movs	r1, #21
 80019c4:	481f      	ldr	r0, [pc, #124]	; (8001a44 <SysTick_Handler+0x8a8>)
 80019c6:	f7ff fbcd 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <SysTick_Handler+0x854>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019d0:	e069      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <SysTick_Handler+0x86c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <SysTick_Handler+0x846>
 80019da:	2110      	movs	r1, #16
 80019dc:	481a      	ldr	r0, [pc, #104]	; (8001a48 <SysTick_Handler+0x8ac>)
 80019de:	f7ff fbc1 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019e2:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <SysTick_Handler+0x854>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019e8:	e05d      	b.n	8001aa6 <SysTick_Handler+0x90a>
 80019ea:	bf00      	nop
 80019ec:	200017a8 	.word	0x200017a8
 80019f0:	20002468 	.word	0x20002468
 80019f4:	200034d6 	.word	0x200034d6
 80019f8:	200019c0 	.word	0x200019c0
 80019fc:	20002484 	.word	0x20002484
 8001a00:	200034d2 	.word	0x200034d2
 8001a04:	20003b48 	.word	0x20003b48
 8001a08:	2000245c 	.word	0x2000245c
 8001a0c:	0800f0b8 	.word	0x0800f0b8
 8001a10:	200034d8 	.word	0x200034d8
 8001a14:	200034d0 	.word	0x200034d0
 8001a18:	200034d4 	.word	0x200034d4
 8001a1c:	200017ba 	.word	0x200017ba
 8001a20:	20002c84 	.word	0x20002c84
 8001a24:	20001bcc 	.word	0x20001bcc
 8001a28:	2000221c 	.word	0x2000221c
 8001a2c:	0800f0cc 	.word	0x0800f0cc
 8001a30:	0800f0a8 	.word	0x0800f0a8
 8001a34:	0800f0e0 	.word	0x0800f0e0
 8001a38:	0800f0f8 	.word	0x0800f0f8
 8001a3c:	0800f110 	.word	0x0800f110
 8001a40:	0800f128 	.word	0x0800f128
 8001a44:	0800f140 	.word	0x0800f140
 8001a48:	0800f158 	.word	0x0800f158
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <SysTick_Handler+0x95c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <SysTick_Handler+0x8c0>
 8001a54:	2112      	movs	r1, #18
 8001a56:	4829      	ldr	r0, [pc, #164]	; (8001afc <SysTick_Handler+0x960>)
 8001a58:	f7ff fb84 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <SysTick_Handler+0x964>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a62:	e020      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <SysTick_Handler+0x95c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <SysTick_Handler+0x8d8>
 8001a6c:	2113      	movs	r1, #19
 8001a6e:	4825      	ldr	r0, [pc, #148]	; (8001b04 <SysTick_Handler+0x968>)
 8001a70:	f7ff fb78 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <SysTick_Handler+0x964>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a7a:	e014      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <SysTick_Handler+0x95c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <SysTick_Handler+0x8f0>
 8001a84:	2111      	movs	r1, #17
 8001a86:	4820      	ldr	r0, [pc, #128]	; (8001b08 <SysTick_Handler+0x96c>)
 8001a88:	f7ff fb6c 	bl	8001164 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <SysTick_Handler+0x964>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a92:	e008      	b.n	8001aa6 <SysTick_Handler+0x90a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <SysTick_Handler+0x964>)
 8001a96:	f00a ff45 	bl	800c924 <SPI_ETH>
 8001a9a:	e004      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 default:
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <SysTick_Handler+0x90a>
			 break;
 8001aa4:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <SysTick_Handler+0x970>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d102      	bne.n	8001ab4 <SysTick_Handler+0x918>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <SysTick_Handler+0x970>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <SysTick_Handler+0x974>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d104      	bne.n	8001ac6 <SysTick_Handler+0x92a>
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <SysTick_Handler+0x978>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <SysTick_Handler+0x978>)
 8001ac4:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <SysTick_Handler+0x978>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	dd0f      	ble.n	8001aee <SysTick_Handler+0x952>
	{
		USART1_ticks=0;
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <SysTick_Handler+0x978>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <SysTick_Handler+0x97c>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <SysTick_Handler+0x974>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <SysTick_Handler+0x980>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <SysTick_Handler+0x984>)
 8001ae6:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <SysTick_Handler+0x980>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 fcfd 	bl	80024ec <HAL_IncTick>
	else
	{
		wf._ticks=0;
	}*/
  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000245c 	.word	0x2000245c
 8001afc:	0800f16c 	.word	0x0800f16c
 8001b00:	20002468 	.word	0x20002468
 8001b04:	0800f180 	.word	0x0800f180
 8001b08:	0800f194 	.word	0x0800f194
 8001b0c:	2000023c 	.word	0x2000023c
 8001b10:	2000351c 	.word	0x2000351c
 8001b14:	20003b50 	.word	0x20003b50
 8001b18:	20003b54 	.word	0x20003b54
 8001b1c:	20003b4c 	.word	0x20003b4c
 8001b20:	20003b58 	.word	0x20003b58

08001b24 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <HAL_UART_ErrorCallback+0x98>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11c      	bne.n	8001b70 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_UART_ErrorCallback+0x9c>)
 8001b40:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_UART_ErrorCallback+0x9c>)
 8001b48:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f003 f96a 	bl	8004e36 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001b62:	f7ff f9f9 	bl	8000f58 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_UART_ErrorCallback+0xa0>)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f003 fa69 	bl	8005042 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_ErrorCallback+0xa4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11c      	bne.n	8001bb4 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_UART_ErrorCallback+0x9c>)
 8001b84:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_UART_ErrorCallback+0x9c>)
 8001b8c:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f003 f948 	bl	8004e36 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001ba6:	f7ff fa01 	bl	8000fac <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001baa:	2201      	movs	r2, #1
 8001bac:	4905      	ldr	r1, [pc, #20]	; (8001bc4 <HAL_UART_ErrorCallback+0xa0>)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f003 fa47 	bl	8005042 <HAL_UART_Receive_IT>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	20000a48 	.word	0x20000a48
 8001bc4:	20003b2c 	.word	0x20003b2c
 8001bc8:	40004400 	.word	0x40004400

08001bcc <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2c      	ldr	r2, [pc, #176]	; (8001c8c <HAL_UART_RxCpltCallback+0xc0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d123      	bne.n	8001c26 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_UART_RxCpltCallback+0xc4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <HAL_UART_RxCpltCallback+0xc8>)
 8001be4:	7811      	ldrb	r1, [r2, #0]
 8001be6:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <HAL_UART_RxCpltCallback+0xcc>)
 8001be8:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_UART_RxCpltCallback+0xc4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_UART_RxCpltCallback+0xc4>)
 8001bf2:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_UART_RxCpltCallback+0xc4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfc:	db03      	blt.n	8001c06 <HAL_UART_RxCpltCallback+0x3a>
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_UART_RxCpltCallback+0xc4>)
 8001c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c04:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001c06:	2100      	movs	r1, #0
 8001c08:	4824      	ldr	r0, [pc, #144]	; (8001c9c <HAL_UART_RxCpltCallback+0xd0>)
 8001c0a:	f002 f91b 	bl	8003e44 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c12:	2201      	movs	r2, #1
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_UART_RxCpltCallback+0xd4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	491d      	ldr	r1, [pc, #116]	; (8001c94 <HAL_UART_RxCpltCallback+0xc8>)
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f003 fa0e 	bl	8005042 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_UART_RxCpltCallback+0xd8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d128      	bne.n	8001c82 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_UART_RxCpltCallback+0xdc>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_UART_RxCpltCallback+0xe0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b2d1      	uxtb	r1, r2
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_UART_RxCpltCallback+0xe4>)
 8001c3c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_UART_RxCpltCallback+0xe0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_UART_RxCpltCallback+0xe0>)
 8001c46:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_UART_RxCpltCallback+0xe0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	db03      	blt.n	8001c5a <HAL_UART_RxCpltCallback+0x8e>
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_UART_RxCpltCallback+0xe0>)
 8001c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c58:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4815      	ldr	r0, [pc, #84]	; (8001cb4 <HAL_UART_RxCpltCallback+0xe8>)
 8001c60:	f001 f8c6 	bl	8002df0 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001c64:	2100      	movs	r1, #0
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <HAL_UART_RxCpltCallback+0xec>)
 8001c68:	f002 f8ec 	bl	8003e44 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_UART_RxCpltCallback+0xf0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <HAL_UART_RxCpltCallback+0xdc>)
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f003 f9e0 	bl	8005042 <HAL_UART_Receive_IT>
		 }
 }
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	20003b5c 	.word	0x20003b5c
 8001c94:	20003b2c 	.word	0x20003b2c
 8001c98:	20003528 	.word	0x20003528
 8001c9c:	200000dc 	.word	0x200000dc
 8001ca0:	2000351a 	.word	0x2000351a
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	20003b30 	.word	0x20003b30
 8001cac:	20003b60 	.word	0x20003b60
 8001cb0:	20003728 	.word	0x20003728
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	20000124 	.word	0x20000124
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	2000351b 	.word	0x2000351b

08001cc4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d12d      	bne.n	8001d32 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f002 f9b1 	bl	8004040 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a38      	ldr	r2, [pc, #224]	; (8001dd0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001cf0:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4932      	ldr	r1, [pc, #200]	; (8001dd4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8001d0c:	4833      	ldr	r0, [pc, #204]	; (8001ddc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001d0e:	f00b fe25 	bl	800d95c <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001d12:	2201      	movs	r2, #1
 8001d14:	4932      	ldr	r1, [pc, #200]	; (8001de0 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8001d16:	4833      	ldr	r0, [pc, #204]	; (8001de4 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8001d18:	f003 f993 	bl	8005042 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001d1e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	482b      	ldr	r0, [pc, #172]	; (8001ddc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001d2e:	f7ff fa19 	bl	8001164 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d13f      	bne.n	8001dbc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f002 f97e 	bl	8004040 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2102      	movs	r1, #2
 8001d48:	4829      	ldr	r0, [pc, #164]	; (8001df0 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8001d4a:	f001 f851 	bl	8002df0 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001d60:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4922      	ldr	r1, [pc, #136]	; (8001e04 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001d7c:	4822      	ldr	r0, [pc, #136]	; (8001e08 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8001d7e:	f00b fded 	bl	800d95c <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8001d88:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4920      	ldr	r1, [pc, #128]	; (8001e10 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8001d92:	f003 f956 	bl	8005042 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001d98:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10d      	bne.n	8001dbc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8001da0:	2117      	movs	r1, #23
 8001da2:	481d      	ldr	r0, [pc, #116]	; (8001e18 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8001da4:	f7ff f9de 	bl	8001164 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4815      	ldr	r0, [pc, #84]	; (8001e04 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001db0:	f7ff f9d8 	bl	8001164 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8001db4:	2102      	movs	r1, #2
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8001db8:	f7ff f9d4 	bl	8001164 <ITM0_Write>
				 }
		}
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000351d 	.word	0x2000351d
 8001dc8:	2000351a 	.word	0x2000351a
 8001dcc:	20003b5c 	.word	0x20003b5c
 8001dd0:	20003b38 	.word	0x20003b38
 8001dd4:	20003528 	.word	0x20003528
 8001dd8:	20003b28 	.word	0x20003b28
 8001ddc:	20003928 	.word	0x20003928
 8001de0:	20003b2c 	.word	0x20003b2c
 8001de4:	2000016c 	.word	0x2000016c
 8001de8:	20000a48 	.word	0x20000a48
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40020000 	.word	0x40020000
 8001df4:	2000351e 	.word	0x2000351e
 8001df8:	2000351b 	.word	0x2000351b
 8001dfc:	20003b60 	.word	0x20003b60
 8001e00:	20003b3c 	.word	0x20003b3c
 8001e04:	20003728 	.word	0x20003728
 8001e08:	20000296 	.word	0x20000296
 8001e0c:	20000240 	.word	0x20000240
 8001e10:	20003b30 	.word	0x20003b30
 8001e14:	200001b0 	.word	0x200001b0
 8001e18:	0800f1a8 	.word	0x0800f1a8
 8001e1c:	0800f1c0 	.word	0x0800f1c0

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <Error_Handler+0x8>
	...

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ed6:	23e0      	movs	r3, #224	; 0xe0
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <HAL_SPI_MspInit+0x8c>)
 8001ef2:	f000 fd15 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d116      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	201c      	movs	r0, #28
 8001f40:	f000 fc17 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f44:	201c      	movs	r0, #28
 8001f46:	f000 fc30 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f4a:	e01a      	b.n	8001f82 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_TIM_Base_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d115      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_TIM_Base_MspInit+0x80>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	201d      	movs	r0, #29
 8001f78:	f000 fbfb 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f7c:	201d      	movs	r0, #29
 8001f7e:	f000 fc14 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40000400 	.word	0x40000400

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	; 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_UART_MspInit+0x170>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d135      	bne.n	8002022 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_UART_MspInit+0x174>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4840      	ldr	r0, [pc, #256]	; (800210c <HAL_UART_MspInit+0x178>)
 800200c:	f000 fc88 	bl	8002920 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	2025      	movs	r0, #37	; 0x25
 8002016:	f000 fbac 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800201a:	2025      	movs	r0, #37	; 0x25
 800201c:	f000 fbc5 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002020:	e06b      	b.n	80020fa <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <HAL_UART_MspInit+0x17c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d134      	bne.n	8002096 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_UART_MspInit+0x174>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_UART_MspInit+0x174>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_UART_MspInit+0x174>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_UART_MspInit+0x174>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <HAL_UART_MspInit+0x174>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_UART_MspInit+0x174>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230c      	movs	r3, #12
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002074:	2307      	movs	r3, #7
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4823      	ldr	r0, [pc, #140]	; (800210c <HAL_UART_MspInit+0x178>)
 8002080:	f000 fc4e 	bl	8002920 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2026      	movs	r0, #38	; 0x26
 800208a:	f000 fb72 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800208e:	2026      	movs	r0, #38	; 0x26
 8002090:	f000 fb8b 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 8002094:	e031      	b.n	80020fa <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_UART_MspInit+0x180>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12c      	bne.n	80020fa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	6453      	str	r3, [r2, #68]	; 0x44
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_UART_MspInit+0x174>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020ea:	2308      	movs	r3, #8
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <HAL_UART_MspInit+0x178>)
 80020f6:	f000 fc13 	bl	8002920 <HAL_GPIO_Init>
}
 80020fa:	bf00      	nop
 80020fc:	3738      	adds	r7, #56	; 0x38
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	40004400 	.word	0x40004400
 8002114:	40011400 	.word	0x40011400

08002118 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_UART_MspDeInit+0x80>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10e      	bne.n	8002148 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_UART_MspDeInit+0x84>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <HAL_UART_MspDeInit+0x84>)
 8002130:	f023 0310 	bic.w	r3, r3, #16
 8002134:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002136:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800213a:	4819      	ldr	r0, [pc, #100]	; (80021a0 <HAL_UART_MspDeInit+0x88>)
 800213c:	f000 fd74 	bl	8002c28 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002140:	2025      	movs	r0, #37	; 0x25
 8002142:	f000 fb40 	bl	80027c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8002146:	e022      	b.n	800218e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <HAL_UART_MspDeInit+0x8c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10d      	bne.n	800216e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_UART_MspDeInit+0x84>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_UART_MspDeInit+0x84>)
 8002158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800215e:	210c      	movs	r1, #12
 8002160:	480f      	ldr	r0, [pc, #60]	; (80021a0 <HAL_UART_MspDeInit+0x88>)
 8002162:	f000 fd61 	bl	8002c28 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002166:	2026      	movs	r0, #38	; 0x26
 8002168:	f000 fb2d 	bl	80027c6 <HAL_NVIC_DisableIRQ>
}
 800216c:	e00f      	b.n	800218e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_UART_MspDeInit+0x90>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10a      	bne.n	800218e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_UART_MspDeInit+0x84>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_UART_MspDeInit+0x84>)
 800217e:	f023 0320 	bic.w	r3, r3, #32
 8002182:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002184:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_UART_MspDeInit+0x88>)
 800218a:	f000 fd4d 	bl	8002c28 <HAL_GPIO_DeInit>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40011000 	.word	0x40011000
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40004400 	.word	0x40004400
 80021a8:	40011400 	.word	0x40011400

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <TIM2_IRQHandler+0x10>)
 80021fa:	f002 f82d 	bl	8004258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000dc 	.word	0x200000dc

08002208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <TIM3_IRQHandler+0x10>)
 800220e:	f002 f823 	bl	8004258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000124 	.word	0x20000124

0800221c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <USART1_IRQHandler+0x10>)
 8002222:	f002 ff3f 	bl	80050a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000016c 	.word	0x2000016c

08002230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <USART2_IRQHandler+0x10>)
 8002236:	f002 ff35 	bl	80050a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200001b0 	.word	0x200001b0

08002244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	return 1;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_kill>:

int _kill(int pid, int sig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800225e:	f00b fe85 	bl	800df6c <__errno>
 8002262:	4603      	mov	r3, r0
 8002264:	2216      	movs	r2, #22
 8002266:	601a      	str	r2, [r3, #0]
	return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_exit>:

void _exit (int status)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ffe7 	bl	8002254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002286:	e7fe      	b.n	8002286 <_exit+0x12>

08002288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e00a      	b.n	80022b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800229a:	f3af 8000 	nop.w
 800229e:	4601      	mov	r1, r0
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbf0      	blt.n	800229a <_read+0x12>
	}

return len;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e009      	b.n	80022e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60ba      	str	r2, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf1      	blt.n	80022d4 <_write+0x12>
	}
	return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_close>:

int _close(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
	return -1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002322:	605a      	str	r2, [r3, #4]
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_isatty>:

int _isatty(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return 1;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
	return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f00b fdea 	bl	800df6c <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20020000 	.word	0x20020000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	20003b68 	.word	0x20003b68
 80023cc:	20003cc0 	.word	0x20003cc0

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241e:	f7ff ffd7 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f00b fda9 	bl	800df78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7fe f935 	bl	8000694 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002438:	0800f8e4 	.word	0x0800f8e4
  ldr r2, =_sbss
 800243c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002440:	20003cbc 	.word	0x20003cbc

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f973 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fcd6 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f999 	bl	80027e2 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 f953 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000008 	.word	0x20000008
 8002510:	20003b6c 	.word	0x20003b6c

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20003b6c 	.word	0x20003b6c

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008

08002574 <__NVIC_SetPriorityGrouping>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_DisableIRQ>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db12      	blt.n	800264c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	490a      	ldr	r1, [pc, #40]	; (8002658 <__NVIC_DisableIRQ+0x44>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	3320      	adds	r3, #32
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002640:	f3bf 8f4f 	dsb	sy
}
 8002644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002646:	f3bf 8f6f 	isb	sy
}
 800264a:	bf00      	nop
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff05 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff1a 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff0d 	bl	80025d8 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff1d 	bl	8002614 <__NVIC_DisableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff94 	bl	8002718 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff fe84 	bl	8002514 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d008      	beq.n	800282c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e052      	b.n	80028d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0216 	bic.w	r2, r2, #22
 800283a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <HAL_DMA_Abort+0x62>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0208 	bic.w	r2, r2, #8
 800286a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287c:	e013      	b.n	80028a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287e:	f7ff fe49 	bl	8002514 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b05      	cmp	r3, #5
 800288a:	d90c      	bls.n	80028a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e015      	b.n	80028d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e4      	bne.n	800287e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d004      	beq.n	80028f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e00c      	b.n	8002912 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2205      	movs	r2, #5
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e159      	b.n	8002bf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 8148 	bne.w	8002bea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a2 	beq.w	8002bea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a56      	ldr	r2, [pc, #344]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac2:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x202>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_GPIO_Init+0x2f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x1fe>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x1f6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <HAL_GPIO_Init+0x300>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x1f2>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f aea2 	bls.w	800293c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e0bb      	b.n	8002dbc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c44:	2201      	movs	r2, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	f040 80ab 	bne.w	8002db6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c60:	4a5c      	ldr	r2, [pc, #368]	; (8002dd4 <HAL_GPIO_DeInit+0x1ac>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a54      	ldr	r2, [pc, #336]	; (8002dd8 <HAL_GPIO_DeInit+0x1b0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_DeInit+0x96>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_GPIO_DeInit+0x1b4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_DeInit+0x92>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_GPIO_DeInit+0x1b8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_DeInit+0x8e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	; (8002de4 <HAL_GPIO_DeInit+0x1bc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_DeInit+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_GPIO_DeInit+0x1c0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_DeInit+0x86>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_DeInit+0x98>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_DeInit+0x98>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_DeInit+0x98>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_DeInit+0x98>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_DeInit+0x98>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d132      	bne.n	8002d36 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4944      	ldr	r1, [pc, #272]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002cde:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4941      	ldr	r1, [pc, #260]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002cec:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	493d      	ldr	r1, [pc, #244]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	493a      	ldr	r1, [pc, #232]	; (8002dec <HAL_GPIO_DeInit+0x1c4>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d18:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <HAL_GPIO_DeInit+0x1ac>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	482a      	ldr	r0, [pc, #168]	; (8002dd4 <HAL_GPIO_DeInit+0x1ac>)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	400a      	ands	r2, r1
 8002d30:	3302      	adds	r3, #2
 8002d32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2103      	movs	r1, #3
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	08d2      	lsrs	r2, r2, #3
 8002d6c:	4019      	ands	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2103      	movs	r1, #3
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2101      	movs	r1, #1
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2103      	movs	r1, #3
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	f67f af40 	bls.w	8002c44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	041a      	lsls	r2, r3, #16
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	400b      	ands	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e267      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d075      	beq.n	8002f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d00c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	4b7e      	ldr	r3, [pc, #504]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d157      	bne.n	8002f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e242      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x74>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ef0:	4b69      	ldr	r3, [pc, #420]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff fb00 	bl	8002514 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f18:	f7ff fafc 	bl	8002514 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e207      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xc0>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff faec 	bl	8002514 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff fae8 	bl	8002514 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1f3      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0xe8>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1c7      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4937      	ldr	r1, [pc, #220]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x244>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7ff faa1 	bl	8002514 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7ff fa9d 	bl	8002514 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1a8      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x244>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff fa80 	bl	8002514 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003018:	f7ff fa7c 	bl	8002514 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e187      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d036      	beq.n	80030b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x248>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff fa60 	bl	8002514 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff fa5c 	bl	8002514 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e167      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x200>
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x248>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7ff fa49 	bl	8002514 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	e00e      	b.n	80030a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003086:	f7ff fa45 	bl	8002514 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d907      	bls.n	80030a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e150      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ea      	bne.n	8003086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b7a      	ldr	r3, [pc, #488]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7ff fa05 	bl	8002514 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7ff fa01 	bl	8002514 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e10c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ea>
 8003134:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x30c>
 800314a:	4b5f      	ldr	r3, [pc, #380]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5e      	ldr	r2, [pc, #376]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003164:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a57      	ldr	r2, [pc, #348]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7ff f9c6 	bl	8002514 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7ff f9c2 	bl	8002514 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0cb      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x334>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7ff f9b0 	bl	8002514 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7ff f9ac 	bl	8002514 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b5      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a1 	beq.w	8003338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f6:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d05c      	beq.n	80032bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d141      	bne.n	800328e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff f980 	bl	8002514 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7ff f97c 	bl	8002514 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e087      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	491b      	ldr	r1, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7ff f955 	bl	8002514 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7ff f951 	bl	8002514 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e05c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x416>
 800328c:	e054      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff f93e 	bl	8002514 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7ff f93a 	bl	8002514 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e045      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
 80032ba:	e03d      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e038      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x4ec>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d121      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11a      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	4293      	cmp	r3, r2
 800330e:	d111      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0cc      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d90c      	bls.n	8003384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b65      	ldr	r3, [pc, #404]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b8      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800339c:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	494d      	ldr	r1, [pc, #308]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e067      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003438:	f7ff f86c 	bl	8002514 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7ff f868 	bl	8002514 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 020c 	and.w	r2, r3, #12
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d1eb      	bne.n	8003440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20c      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e032      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4916      	ldr	r1, [pc, #88]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ce:	f000 f821 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490a      	ldr	r1, [pc, #40]	; (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ffcc 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00
 8003504:	40023800 	.word	0x40023800
 8003508:	0800f6b4 	.word	0x0800f6b4
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b090      	sub	sp, #64	; 0x40
 800351a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	2300      	movs	r3, #0
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d00d      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x40>
 8003538:	2b08      	cmp	r3, #8
 800353a:	f200 80a1 	bhi.w	8003680 <HAL_RCC_GetSysClockFreq+0x16c>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x34>
 8003542:	2b04      	cmp	r3, #4
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x3a>
 8003546:	e09b      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_GetSysClockFreq+0x184>)
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800354c:	e09b      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003552:	e098      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355e:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	2200      	movs	r2, #0
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	627a      	str	r2, [r7, #36]	; 0x24
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800357c:	2100      	movs	r1, #0
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 8003580:	fb03 f201 	mul.w	r2, r3, r1
 8003584:	2300      	movs	r3, #0
 8003586:	fb00 f303 	mul.w	r3, r0, r3
 800358a:	4413      	add	r3, r2
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 800358e:	fba0 1202 	umull	r1, r2, r0, r2
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	460a      	mov	r2, r1
 8003596:	62ba      	str	r2, [r7, #40]	; 0x28
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	4413      	add	r3, r2
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2200      	movs	r2, #0
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	61fa      	str	r2, [r7, #28]
 80035a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ae:	f7fc fe7f 	bl	80002b0 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	e053      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	2200      	movs	r2, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	617a      	str	r2, [r7, #20]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ce:	f04f 0b00 	mov.w	fp, #0
 80035d2:	4652      	mov	r2, sl
 80035d4:	465b      	mov	r3, fp
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e4:	0150      	lsls	r0, r2, #5
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	ebb2 080a 	subs.w	r8, r2, sl
 80035ee:	eb63 090b 	sbc.w	r9, r3, fp
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003606:	ebb2 0408 	subs.w	r4, r2, r8
 800360a:	eb63 0509 	sbc.w	r5, r3, r9
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	00eb      	lsls	r3, r5, #3
 8003618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361c:	00e2      	lsls	r2, r4, #3
 800361e:	4614      	mov	r4, r2
 8003620:	461d      	mov	r5, r3
 8003622:	eb14 030a 	adds.w	r3, r4, sl
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	eb45 030b 	adc.w	r3, r5, fp
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	2200      	movs	r2, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003658:	f7fc fe2a 	bl	80002b0 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	3301      	adds	r3, #1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800367e:	e002      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetSysClockFreq+0x184>)
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003688:	4618      	mov	r0, r3
 800368a:	3740      	adds	r7, #64	; 0x40
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	017d7840 	.word	0x017d7840

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036bc:	f7ff fff0 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0a9b      	lsrs	r3, r3, #10
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800f6c4 	.word	0x0800f6c4

080036e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e4:	f7ff ffdc 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0b5b      	lsrs	r3, r3, #13
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	0800f6c4 	.word	0x0800f6c4

08003708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07b      	b.n	8003812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d009      	beq.n	8003740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	e005      	b.n	8003740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fb8e 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0104 	and.w	r1, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0210 	and.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08c      	sub	sp, #48	; 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x26>
 800383c:	2302      	movs	r3, #2
 800383e:	e18a      	b.n	8003b56 <HAL_SPI_TransmitReceive+0x33c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003848:	f7fe fe64 	bl	8002514 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003866:	2b01      	cmp	r3, #1
 8003868:	d00f      	beq.n	800388a <HAL_SPI_TransmitReceive+0x70>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003870:	d107      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x68>
 800387a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003888:	e15b      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_SPI_TransmitReceive+0x82>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_TransmitReceive+0x82>
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038a2:	e14e      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d003      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	887a      	ldrh	r2, [r7, #2]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d007      	beq.n	800390c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003914:	d178      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x10a>
 800391e:	8b7b      	ldrh	r3, [r7, #26]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d166      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003948:	e053      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x176>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x176>
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d113      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d119      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x1b8>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d014      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	b292      	uxth	r2, r2
 80039b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ce:	2301      	movs	r3, #1
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039d2:	f7fe fd9f 	bl	8002514 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039de:	429a      	cmp	r2, r3
 80039e0:	d807      	bhi.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d003      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039f0:	e0a7      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1a6      	bne.n	800394a <HAL_SPI_TransmitReceive+0x130>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1a1      	bne.n	800394a <HAL_SPI_TransmitReceive+0x130>
 8003a06:	e07c      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x1fc>
 8003a10:	8b7b      	ldrh	r3, [r7, #26]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d16b      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	e057      	b.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d11c      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d114      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d119      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x2ae>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d014      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac8:	f7fe fd24 	bl	8002514 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d803      	bhi.n	8003ae0 <HAL_SPI_TransmitReceive+0x2c6>
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x2cc>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aec:	e029      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1a2      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x224>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d19d      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8b2 	bl	8003c70 <SPI_EndRxTxTransaction>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b1e:	e010      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e000      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b70:	f7fe fcd0 	bl	8002514 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b80:	f7fe fcc8 	bl	8002514 <HAL_GetTick>
 8003b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	015b      	lsls	r3, r3, #5
 8003b8c:	0d1b      	lsrs	r3, r3, #20
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b96:	e054      	b.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d050      	beq.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba0:	f7fe fcb8 	bl	8002514 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d902      	bls.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d13d      	bne.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bce:	d111      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd8:	d004      	beq.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d107      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfc:	d10f      	bne.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e017      	b.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	bf0c      	ite	eq
 8003c52:	2301      	moveq	r3, #1
 8003c54:	2300      	movne	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d19b      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000000 	.word	0x20000000

08003c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <SPI_EndRxTxTransaction+0x7c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <SPI_EndRxTxTransaction+0x80>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0d5b      	lsrs	r3, r3, #21
 8003c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9a:	d112      	bne.n	8003cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ff5a 	bl	8003b60 <SPI_WaitFlagStateUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e00f      	b.n	8003ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d0f2      	beq.n	8003cc2 <SPI_EndRxTxTransaction+0x52>
 8003cdc:	e000      	b.n	8003ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cde:	bf00      	nop
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	165e9f81 	.word	0x165e9f81

08003cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e041      	b.n	8003d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fe f8f6 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f000 fce4 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e041      	b.n	8003e28 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f839 	bl	8003e30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f000 fc95 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_TIM_OC_Start_IT+0x28>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e022      	b.n	8003eb2 <HAL_TIM_OC_Start_IT+0x6e>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d109      	bne.n	8003e86 <HAL_TIM_OC_Start_IT+0x42>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e015      	b.n	8003eb2 <HAL_TIM_OC_Start_IT+0x6e>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_OC_Start_IT+0x5c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e008      	b.n	8003eb2 <HAL_TIM_OC_Start_IT+0x6e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0b3      	b.n	8004022 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_OC_Start_IT+0x86>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	e013      	b.n	8003ef2 <HAL_TIM_OC_Start_IT+0xae>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_OC_Start_IT+0x96>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed8:	e00b      	b.n	8003ef2 <HAL_TIM_OC_Start_IT+0xae>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_OC_Start_IT+0xa6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee8:	e003      	b.n	8003ef2 <HAL_TIM_OC_Start_IT+0xae>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d841      	bhi.n	8003f7c <HAL_TIM_OC_Start_IT+0x138>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_TIM_OC_Start_IT+0xbc>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f7d 	.word	0x08003f7d
 8003f08:	08003f7d 	.word	0x08003f7d
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f7d 	.word	0x08003f7d
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f6b 	.word	0x08003f6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0202 	orr.w	r2, r2, #2
 8003f42:	60da      	str	r2, [r3, #12]
      break;
 8003f44:	e01d      	b.n	8003f82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0204 	orr.w	r2, r2, #4
 8003f54:	60da      	str	r2, [r3, #12]
      break;
 8003f56:	e014      	b.n	8003f82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	60da      	str	r2, [r3, #12]
      break;
 8003f68:	e00b      	b.n	8003f82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0210 	orr.w	r2, r2, #16
 8003f78:	60da      	str	r2, [r3, #12]
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d14b      	bne.n	8004020 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fe5b 	bl	8004c4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <HAL_TIM_OC_Start_IT+0x1e8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_TIM_OC_Start_IT+0x1e8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_TIM_OC_Start_IT+0x1a8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d013      	beq.n	8003fec <HAL_TIM_OC_Start_IT+0x1a8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_TIM_OC_Start_IT+0x1ec>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_TIM_OC_Start_IT+0x1a8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_OC_Start_IT+0x1a8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_OC_Start_IT+0x1a8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_TIM_OC_Start_IT+0x1f8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d010      	beq.n	8004020 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	e007      	b.n	8004020 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40014000 	.word	0x40014000

08004040 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d841      	bhi.n	80040d8 <HAL_TIM_OC_Stop_IT+0x98>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004091 	.word	0x08004091
 8004060:	080040d9 	.word	0x080040d9
 8004064:	080040d9 	.word	0x080040d9
 8004068:	080040d9 	.word	0x080040d9
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040d9 	.word	0x080040d9
 8004074:	080040d9 	.word	0x080040d9
 8004078:	080040d9 	.word	0x080040d9
 800407c:	080040b5 	.word	0x080040b5
 8004080:	080040d9 	.word	0x080040d9
 8004084:	080040d9 	.word	0x080040d9
 8004088:	080040d9 	.word	0x080040d9
 800408c:	080040c7 	.word	0x080040c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0202 	bic.w	r2, r2, #2
 800409e:	60da      	str	r2, [r3, #12]
      break;
 80040a0:	e01d      	b.n	80040de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0204 	bic.w	r2, r2, #4
 80040b0:	60da      	str	r2, [r3, #12]
      break;
 80040b2:	e014      	b.n	80040de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0208 	bic.w	r2, r2, #8
 80040c2:	60da      	str	r2, [r3, #12]
      break;
 80040c4:	e00b      	b.n	80040de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0210 	bic.w	r2, r2, #16
 80040d4:	60da      	str	r2, [r3, #12]
      break;
 80040d6:	e002      	b.n	80040de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fdad 	bl	8004c4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <HAL_TIM_OC_Stop_IT+0x160>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d117      	bne.n	800412c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	f241 1311 	movw	r3, #4369	; 0x1111
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <HAL_TIM_OC_Stop_IT+0xec>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	f240 4344 	movw	r3, #1092	; 0x444
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_TIM_OC_Stop_IT+0xec>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	f241 1311 	movw	r3, #4369	; 0x1111
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <HAL_TIM_OC_Stop_IT+0x11c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	f240 4344 	movw	r3, #1092	; 0x444
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_TIM_OC_Stop_IT+0x11c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_TIM_OC_Stop_IT+0x12c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416a:	e013      	b.n	8004194 <HAL_TIM_OC_Stop_IT+0x154>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d104      	bne.n	800417c <HAL_TIM_OC_Stop_IT+0x13c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417a:	e00b      	b.n	8004194 <HAL_TIM_OC_Stop_IT+0x154>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b08      	cmp	r3, #8
 8004180:	d104      	bne.n	800418c <HAL_TIM_OC_Stop_IT+0x14c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418a:	e003      	b.n	8004194 <HAL_TIM_OC_Stop_IT+0x154>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000

080041a4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e041      	b.n	800423c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f839 	bl	8004244 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f000 fa8b 	bl	8004700 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0208 	bic.w	r2, r2, #8
 80041f8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0202 	mvn.w	r2, #2
 8004284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa11 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd fd0e 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa14 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0204 	mvn.w	r2, #4
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9e7 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd fce4 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f9ea 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b08      	cmp	r3, #8
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b08      	cmp	r3, #8
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0208 	mvn.w	r2, #8
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2204      	movs	r2, #4
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f9bd 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd fcba 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f9c0 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2208      	movs	r2, #8
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f993 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd fc90 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f996 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0201 	mvn.w	r2, #1
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f969 	bl	80046ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fcc0 	bl	8004d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d107      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f95b 	bl	80046ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b20      	cmp	r3, #32
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0220 	mvn.w	r2, #32
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fc8a 	bl	8004d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004482:	2302      	movs	r3, #2
 8004484:	e048      	b.n	8004518 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d839      	bhi.n	8004508 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	08004509 	.word	0x08004509
 80044a4:	08004509 	.word	0x08004509
 80044a8:	08004509 	.word	0x08004509
 80044ac:	080044df 	.word	0x080044df
 80044b0:	08004509 	.word	0x08004509
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004509 	.word	0x08004509
 80044bc:	080044ed 	.word	0x080044ed
 80044c0:	08004509 	.word	0x08004509
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004509 	.word	0x08004509
 80044cc:	080044fb 	.word	0x080044fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f992 	bl	8004800 <TIM_OC1_SetConfig>
      break;
 80044dc:	e017      	b.n	800450e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9f1 	bl	80048cc <TIM_OC2_SetConfig>
      break;
 80044ea:	e010      	b.n	800450e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fa56 	bl	80049a4 <TIM_OC3_SetConfig>
      break;
 80044f8:	e009      	b.n	800450e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fab9 	bl	8004a78 <TIM_OC4_SetConfig>
      break;
 8004506:	e002      	b.n	800450e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
      break;
 800450c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIM_ConfigClockSource+0x1c>
 8004538:	2302      	movs	r3, #2
 800453a:	e0b4      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x186>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004574:	d03e      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457a:	f200 8087 	bhi.w	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	f000 8086 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x172>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d87f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d01a      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d87b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b60      	cmp	r3, #96	; 0x60
 8004596:	d050      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x11a>
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d877      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d03c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xfa>
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d873      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d058      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x13a>
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d86f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d064      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d86b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d060      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d867      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05c      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d05a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	e062      	b.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f000 fb19 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	609a      	str	r2, [r3, #8]
      break;
 80045f2:	e04f      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f000 fb02 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e03c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fa76 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2150      	movs	r1, #80	; 0x50
 8004632:	4618      	mov	r0, r3
 8004634:	f000 facf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004638:	e02c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fa95 	bl	8004b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2160      	movs	r1, #96	; 0x60
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fabf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004658:	e01c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fa56 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2140      	movs	r1, #64	; 0x40
 8004672:	4618      	mov	r0, r3
 8004674:	f000 faaf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e00c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 faa6 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 800468a:	e003      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e000      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a30      	ldr	r2, [pc, #192]	; (80047ec <TIM_Base_SetConfig+0xec>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <TIM_Base_SetConfig+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <TIM_Base_SetConfig+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <TIM_Base_SetConfig+0xf8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_Base_SetConfig+0xfc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	615a      	str	r2, [r3, #20]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10c      	bne.n	8004876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0308 	bic.w	r3, r3, #8
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40010000 	.word	0x40010000

080048cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0320 	bic.w	r3, r3, #32
 8004916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10d      	bne.n	8004948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d113      	bne.n	8004978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d113      	bne.n	8004a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40010000 	.word	0x40010000

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <TIM_OC4_SetConfig+0x9c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2201      	movs	r2, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e050      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e03f      	b.n	8004e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd f8e6 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fe49 	bl	8005a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e021      	b.n	8004e8c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fd f959 	bl	8002118 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d17c      	bne.n	8004fae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Transmit+0x2c>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e075      	b.n	8004fb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Transmit+0x3e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e06e      	b.n	8004fb0 <HAL_UART_Transmit+0x11c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2221      	movs	r2, #33	; 0x21
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee8:	f7fd fb14 	bl	8002514 <HAL_GetTick>
 8004eec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f02:	d108      	bne.n	8004f16 <HAL_UART_Transmit+0x82>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	e003      	b.n	8004f1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f26:	e02a      	b.n	8004f7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fb5a 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e036      	b.n	8004fb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e007      	b.n	8004f70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1cf      	bne.n	8004f28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fb2a 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e006      	b.n	8004fb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d130      	bne.n	8005034 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_Transmit_IT+0x26>
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e029      	b.n	8005036 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit_IT+0x38>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e022      	b.n	8005036 <HAL_UART_Transmit_IT+0x7e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2221      	movs	r2, #33	; 0x21
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b20      	cmp	r3, #32
 800505a:	d11d      	bne.n	8005098 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_UART_Receive_IT+0x26>
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e016      	b.n	800509a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_UART_Receive_IT+0x38>
 8005076:	2302      	movs	r3, #2
 8005078:	e00f      	b.n	800509a <HAL_UART_Receive_IT+0x58>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	461a      	mov	r2, r3
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fb1a 	bl	80056c8 <UART_Start_Receive_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	e000      	b.n	800509a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b0ba      	sub	sp, #232	; 0xe8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10f      	bne.n	800510a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_UART_IRQHandler+0x66>
 80050f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fbfd 	bl	8005902 <UART_Receive_IT>
      return;
 8005108:	e256      	b.n	80055b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800510a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80de 	beq.w	80052d0 <HAL_UART_IRQHandler+0x22c>
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005124:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80d1 	beq.w	80052d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_UART_IRQHandler+0xae>
 800513a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f043 0201 	orr.w	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_UART_IRQHandler+0xd2>
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0202 	orr.w	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_UART_IRQHandler+0xf6>
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <HAL_UART_IRQHandler+0x126>
 80051a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f043 0208 	orr.w	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 81ed 	beq.w	80055ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_UART_IRQHandler+0x14e>
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb88 	bl	8005902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <HAL_UART_IRQHandler+0x17a>
 8005216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04f      	beq.n	80052be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa90 	bl	8005744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d141      	bne.n	80052b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800524c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800525e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800526a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1d9      	bne.n	8005232 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d013      	beq.n	80052ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	4a7d      	ldr	r2, [pc, #500]	; (8005480 <HAL_UART_IRQHandler+0x3dc>)
 800528c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fb21 	bl	80028da <HAL_DMA_Abort_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d016      	beq.n	80052cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052a8:	4610      	mov	r0, r2
 80052aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ac:	e00e      	b.n	80052cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fc38 	bl	8001b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	e00a      	b.n	80052cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fc34 	bl	8001b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	e006      	b.n	80052cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc fc30 	bl	8001b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052ca:	e170      	b.n	80055ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	bf00      	nop
    return;
 80052ce:	e16e      	b.n	80055ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	f040 814a 	bne.w	800556e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8143 	beq.w	800556e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 813c 	beq.w	800556e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b40      	cmp	r3, #64	; 0x40
 8005318:	f040 80b4 	bne.w	8005484 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005328:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8140 	beq.w	80055b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800533a:	429a      	cmp	r2, r3
 800533c:	f080 8139 	bcs.w	80055b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	f000 8088 	beq.w	8005466 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800536c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005382:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800538e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800539a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1d9      	bne.n	8005356 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e1      	bne.n	80053a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e3      	bne.n	80053de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005436:	f023 0310 	bic.w	r3, r3, #16
 800543a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005448:	65ba      	str	r2, [r7, #88]	; 0x58
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800544e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e3      	bne.n	8005424 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	4618      	mov	r0, r3
 8005462:	f7fd f9ca 	bl	80027fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800546e:	b29b      	uxth	r3, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	b29b      	uxth	r3, r3
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8ac 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800547c:	e099      	b.n	80055b2 <HAL_UART_IRQHandler+0x50e>
 800547e:	bf00      	nop
 8005480:	0800580b 	.word	0x0800580b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800548c:	b29b      	uxth	r3, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 808b 	beq.w	80055b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8086 	beq.w	80055b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054ce:	647a      	str	r2, [r7, #68]	; 0x44
 80054d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e3      	bne.n	80054aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3314      	adds	r3, #20
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	623b      	str	r3, [r7, #32]
   return(result);
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005506:	633a      	str	r2, [r7, #48]	; 0x30
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e3      	bne.n	80054e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60fb      	str	r3, [r7, #12]
   return(result);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800554c:	61fa      	str	r2, [r7, #28]
 800554e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	617b      	str	r3, [r7, #20]
   return(result);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e3      	bne.n	8005528 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f834 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556c:	e023      	b.n	80055b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_UART_IRQHandler+0x4ea>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f953 	bl	8005832 <UART_Transmit_IT>
    return;
 800558c:	e014      	b.n	80055b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00e      	beq.n	80055b8 <HAL_UART_IRQHandler+0x514>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f993 	bl	80058d2 <UART_EndTransmit_IT>
    return;
 80055ac:	e004      	b.n	80055b8 <HAL_UART_IRQHandler+0x514>
    return;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_UART_IRQHandler+0x514>
      return;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_UART_IRQHandler+0x514>
      return;
 80055b6:	bf00      	nop
  }
}
 80055b8:	37e8      	adds	r7, #232	; 0xe8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop

080055c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b090      	sub	sp, #64	; 0x40
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fc:	e050      	b.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d04c      	beq.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x30>
 800560c:	f7fc ff82 	bl	8002514 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005618:	429a      	cmp	r2, r3
 800561a:	d241      	bcs.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800563c:	637a      	str	r2, [r7, #52]	; 0x34
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3314      	adds	r3, #20
 8005656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	613b      	str	r3, [r7, #16]
   return(result);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005670:	623a      	str	r2, [r7, #32]
 8005672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	69f9      	ldr	r1, [r7, #28]
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	61bb      	str	r3, [r7, #24]
   return(result);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e00f      	b.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d09f      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3740      	adds	r7, #64	; 0x40
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2222      	movs	r2, #34	; 0x22
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005714:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b095      	sub	sp, #84	; 0x54
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800576c:	643a      	str	r2, [r7, #64]	; 0x40
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3314      	adds	r3, #20
 8005786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d119      	bne.n	80057f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0310 	bic.w	r3, r3, #16
 80057d2:	647b      	str	r3, [r7, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057dc:	61ba      	str	r2, [r7, #24]
 80057de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057fe:	bf00      	nop
 8005800:	3754      	adds	r7, #84	; 0x54
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7fc f97d 	bl	8001b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b21      	cmp	r3, #33	; 0x21
 8005844:	d13e      	bne.n	80058c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d114      	bne.n	800587a <UART_Transmit_IT+0x48>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d110      	bne.n	800587a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800586c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	621a      	str	r2, [r3, #32]
 8005878:	e008      	b.n	800588c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6211      	str	r1, [r2, #32]
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4619      	mov	r1, r3
 800589a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10f      	bne.n	80058c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe64 	bl	80055c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b08c      	sub	sp, #48	; 0x30
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b22      	cmp	r3, #34	; 0x22
 8005914:	f040 80ab 	bne.w	8005a6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005920:	d117      	bne.n	8005952 <UART_Receive_IT+0x50>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d113      	bne.n	8005952 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005940:	b29a      	uxth	r2, r3
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	1c9a      	adds	r2, r3, #2
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28
 8005950:	e026      	b.n	80059a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005964:	d007      	beq.n	8005976 <UART_Receive_IT+0x74>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <UART_Receive_IT+0x82>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e008      	b.n	8005996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4619      	mov	r1, r3
 80059ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d15a      	bne.n	8005a6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0220 	bic.w	r2, r2, #32
 80059c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d135      	bne.n	8005a60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	623a      	str	r2, [r7, #32]
 8005a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	69f9      	ldr	r1, [r7, #28]
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e5      	bne.n	80059fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d10a      	bne.n	8005a52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fdbb 	bl	80055d4 <HAL_UARTEx_RxEventCallback>
 8005a5e:	e002      	b.n	8005a66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fc f8b3 	bl	8001bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e002      	b.n	8005a70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3730      	adds	r7, #48	; 0x30
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a7c:	b0c0      	sub	sp, #256	; 0x100
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	68d9      	ldr	r1, [r3, #12]
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	ea40 0301 	orr.w	r3, r0, r1
 8005aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ad0:	f021 010c 	bic.w	r1, r1, #12
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	6999      	ldr	r1, [r3, #24]
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	ea40 0301 	orr.w	r3, r0, r1
 8005afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b8f      	ldr	r3, [pc, #572]	; (8005d44 <UART_SetConfig+0x2cc>)
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d005      	beq.n	8005b18 <UART_SetConfig+0xa0>
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b8d      	ldr	r3, [pc, #564]	; (8005d48 <UART_SetConfig+0x2d0>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d104      	bne.n	8005b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fd fde2 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b20:	e003      	b.n	8005b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b22:	f7fd fdc9 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8005b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b34:	f040 810c 	bne.w	8005d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	1891      	adds	r1, r2, r2
 8005b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b52:	415b      	adcs	r3, r3
 8005b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	eb12 0801 	adds.w	r8, r2, r1
 8005b60:	4629      	mov	r1, r5
 8005b62:	eb43 0901 	adc.w	r9, r3, r1
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b7a:	4690      	mov	r8, r2
 8005b7c:	4699      	mov	r9, r3
 8005b7e:	4623      	mov	r3, r4
 8005b80:	eb18 0303 	adds.w	r3, r8, r3
 8005b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b88:	462b      	mov	r3, r5
 8005b8a:	eb49 0303 	adc.w	r3, r9, r3
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	18db      	adds	r3, r3, r3
 8005baa:	653b      	str	r3, [r7, #80]	; 0x50
 8005bac:	4613      	mov	r3, r2
 8005bae:	eb42 0303 	adc.w	r3, r2, r3
 8005bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bbc:	f7fa fb78 	bl	80002b0 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <UART_SetConfig+0x2d4>)
 8005bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	011c      	lsls	r4, r3, #4
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005be8:	415b      	adcs	r3, r3
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c10:	4692      	mov	sl, r2
 8005c12:	469b      	mov	fp, r3
 8005c14:	4643      	mov	r3, r8
 8005c16:	eb1a 0303 	adds.w	r3, sl, r3
 8005c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	eb4b 0303 	adc.w	r3, fp, r3
 8005c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	18db      	adds	r3, r3, r3
 8005c40:	643b      	str	r3, [r7, #64]	; 0x40
 8005c42:	4613      	mov	r3, r2
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c52:	f7fa fb2d 	bl	80002b0 <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <UART_SetConfig+0x2d4>)
 8005c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2264      	movs	r2, #100	; 0x64
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	1acb      	subs	r3, r1, r3
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c72:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <UART_SetConfig+0x2d4>)
 8005c74:	fba3 2302 	umull	r2, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c80:	441c      	add	r4, r3
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	1851      	adds	r1, r2, r1
 8005ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8005caa:	4649      	mov	r1, r9
 8005cac:	414b      	adcs	r3, r1
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	00cb      	lsls	r3, r1, #3
 8005cc0:	4651      	mov	r1, sl
 8005cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc6:	4651      	mov	r1, sl
 8005cc8:	00ca      	lsls	r2, r1, #3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cd8:	464b      	mov	r3, r9
 8005cda:	460a      	mov	r2, r1
 8005cdc:	eb42 0303 	adc.w	r3, r2, r3
 8005ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	18db      	adds	r3, r3, r3
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	4613      	mov	r3, r2
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d0e:	f7fa facf 	bl	80002b0 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <UART_SetConfig+0x2d4>)
 8005d18:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	2164      	movs	r1, #100	; 0x64
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	3332      	adds	r3, #50	; 0x32
 8005d2a:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <UART_SetConfig+0x2d4>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f003 0207 	and.w	r2, r3, #7
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4422      	add	r2, r4
 8005d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d40:	e106      	b.n	8005f50 <UART_SetConfig+0x4d8>
 8005d42:	bf00      	nop
 8005d44:	40011000 	.word	0x40011000
 8005d48:	40011400 	.word	0x40011400
 8005d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d62:	4642      	mov	r2, r8
 8005d64:	464b      	mov	r3, r9
 8005d66:	1891      	adds	r1, r2, r2
 8005d68:	6239      	str	r1, [r7, #32]
 8005d6a:	415b      	adcs	r3, r3
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d72:	4641      	mov	r1, r8
 8005d74:	1854      	adds	r4, r2, r1
 8005d76:	4649      	mov	r1, r9
 8005d78:	eb43 0501 	adc.w	r5, r3, r1
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	00eb      	lsls	r3, r5, #3
 8005d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d8a:	00e2      	lsls	r2, r4, #3
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	4643      	mov	r3, r8
 8005d92:	18e3      	adds	r3, r4, r3
 8005d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d98:	464b      	mov	r3, r9
 8005d9a:	eb45 0303 	adc.w	r3, r5, r3
 8005d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	008b      	lsls	r3, r1, #2
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dc8:	4621      	mov	r1, r4
 8005dca:	008a      	lsls	r2, r1, #2
 8005dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dd0:	f7fa fa6e 	bl	80002b0 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4b60      	ldr	r3, [pc, #384]	; (8005f5c <UART_SetConfig+0x4e4>)
 8005dda:	fba3 2302 	umull	r2, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	011c      	lsls	r4, r3, #4
 8005de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005df4:	4642      	mov	r2, r8
 8005df6:	464b      	mov	r3, r9
 8005df8:	1891      	adds	r1, r2, r2
 8005dfa:	61b9      	str	r1, [r7, #24]
 8005dfc:	415b      	adcs	r3, r3
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e04:	4641      	mov	r1, r8
 8005e06:	1851      	adds	r1, r2, r1
 8005e08:	6139      	str	r1, [r7, #16]
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	414b      	adcs	r3, r1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	00cb      	lsls	r3, r1, #3
 8005e20:	4651      	mov	r1, sl
 8005e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e26:	4651      	mov	r1, sl
 8005e28:	00ca      	lsls	r2, r1, #3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4642      	mov	r2, r8
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e38:	464b      	mov	r3, r9
 8005e3a:	460a      	mov	r2, r1
 8005e3c:	eb42 0303 	adc.w	r3, r2, r3
 8005e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	008b      	lsls	r3, r1, #2
 8005e60:	4641      	mov	r1, r8
 8005e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e66:	4641      	mov	r1, r8
 8005e68:	008a      	lsls	r2, r1, #2
 8005e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e6e:	f7fa fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <UART_SetConfig+0x4e4>)
 8005e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2264      	movs	r2, #100	; 0x64
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	1acb      	subs	r3, r1, r3
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	3332      	adds	r3, #50	; 0x32
 8005e8c:	4a33      	ldr	r2, [pc, #204]	; (8005f5c <UART_SetConfig+0x4e4>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e98:	441c      	add	r4, r3
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ea2:	677a      	str	r2, [r7, #116]	; 0x74
 8005ea4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	1891      	adds	r1, r2, r2
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	415b      	adcs	r3, r3
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eb8:	4641      	mov	r1, r8
 8005eba:	1851      	adds	r1, r2, r1
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	414b      	adcs	r3, r1
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	00cb      	lsls	r3, r1, #3
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eda:	4651      	mov	r1, sl
 8005edc:	00ca      	lsls	r2, r1, #3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eea:	464b      	mov	r3, r9
 8005eec:	460a      	mov	r2, r1
 8005eee:	eb42 0303 	adc.w	r3, r2, r3
 8005ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	663b      	str	r3, [r7, #96]	; 0x60
 8005efe:	667a      	str	r2, [r7, #100]	; 0x64
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	008b      	lsls	r3, r1, #2
 8005f10:	4641      	mov	r1, r8
 8005f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f16:	4641      	mov	r1, r8
 8005f18:	008a      	lsls	r2, r1, #2
 8005f1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f1e:	f7fa f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <UART_SetConfig+0x4e4>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	; 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	3332      	adds	r3, #50	; 0x32
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <UART_SetConfig+0x4e4>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4422      	add	r2, r4
 8005f4e:	609a      	str	r2, [r3, #8]
}
 8005f50:	bf00      	nop
 8005f52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f5c:	51eb851f 	.word	0x51eb851f

08005f60 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <MUX>:
void MUX(struct WIFI *a)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2205      	movs	r2, #5
 800601c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2206      	movs	r2, #6
 8006074:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2208      	movs	r2, #8
 80060a0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2209      	movs	r2, #9
 80060cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2207      	movs	r2, #7
 80060f8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800611e:	af06      	add	r7, sp, #24
 8006120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006128:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800612a:	2300      	movs	r3, #0
 800612c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006130:	2300      	movs	r3, #0
 8006132:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006148:	2320      	movs	r3, #32
 800614a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 800614e:	2322      	movs	r3, #34	; 0x22
 8006150:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006154:	4b7c      	ldr	r3, [pc, #496]	; (8006348 <AT_ESP8266_ND+0x230>)
 8006156:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800615a:	4a7c      	ldr	r2, [pc, #496]	; (800634c <AT_ESP8266_ND+0x234>)
 800615c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	4611      	mov	r1, r2
 8006164:	8019      	strh	r1, [r3, #0]
 8006166:	3302      	adds	r3, #2
 8006168:	0c12      	lsrs	r2, r2, #16
 800616a:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 800616c:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006170:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006174:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006178:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800618c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800619c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fa f824 	bl	80001f4 <strlen>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80061be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80061ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fa f809 	bl	80001f4 <strlen>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	 // Si tiene datos recibidos los +IPD proceso = saco lo correspondiente al +IPD a->_uartRCVD_tok y dejo el vector original a->_uartRCVD




	 a->_n_fcomp=strlen("\r\n+IPD");
 80061f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2206      	movs	r2, #6
 8006200:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800622e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006242:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800624c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006250:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006254:	6809      	ldr	r1, [r1, #0]
 8006256:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800625a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800625e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006268:	2300      	movs	r3, #0
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	9004      	str	r0, [sp, #16]
 800626e:	9103      	str	r1, [sp, #12]
 8006270:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006274:	9102      	str	r1, [sp, #8]
 8006276:	9201      	str	r2, [sp, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	4633      	mov	r3, r6
 800627e:	4a34      	ldr	r2, [pc, #208]	; (8006350 <AT_ESP8266_ND+0x238>)
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f006 ff78 	bl	800d178 <FT_String_ND>
 8006288:	4603      	mov	r3, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	f040 8140 	bne.w	8006510 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2206      	movs	r2, #6
 800629c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 80062a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d150      	bne.n	8006354 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 80062b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80062c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80062ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80062dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80062f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80062fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80062fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006302:	6809      	ldr	r1, [r1, #0]
 8006304:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006308:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800630c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006310:	6800      	ldr	r0, [r0, #0]
 8006312:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006316:	2304      	movs	r3, #4
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	9004      	str	r0, [sp, #16]
 800631c:	9103      	str	r1, [sp, #12]
 800631e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006322:	9102      	str	r1, [sp, #8]
 8006324:	9201      	str	r2, [sp, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4633      	mov	r3, r6
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <AT_ESP8266_ND+0x238>)
 800632e:	4629      	mov	r1, r5
 8006330:	4620      	mov	r0, r4
 8006332:	f006 ff21 	bl	800d178 <FT_String_ND>
 8006336:	4602      	mov	r2, r0
 8006338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800633c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8006346:	e04f      	b.n	80063e8 <AT_ESP8266_ND+0x2d0>
 8006348:	00222c22 	.word	0x00222c22
 800634c:	0800f458 	.word	0x0800f458
 8006350:	0800f1fc 	.word	0x0800f1fc
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800637e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006382:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006392:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800639c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80063a0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80063a4:	6809      	ldr	r1, [r1, #0]
 80063a6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80063aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80063ae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80063b8:	2305      	movs	r3, #5
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	9004      	str	r0, [sp, #16]
 80063be:	9103      	str	r1, [sp, #12]
 80063c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80063c4:	9102      	str	r1, [sp, #8]
 80063c6:	9201      	str	r2, [sp, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4633      	mov	r3, r6
 80063ce:	4acb      	ldr	r2, [pc, #812]	; (80066fc <AT_ESP8266_ND+0x5e4>)
 80063d0:	4629      	mov	r1, r5
 80063d2:	4620      	mov	r0, r4
 80063d4:	f006 fed0 	bl	800d178 <FT_String_ND>
 80063d8:	4602      	mov	r2, r0
 80063da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 80063e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d15a      	bne.n	80064b0 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 80063fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2263      	movs	r2, #99	; 0x63
 8006406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 800640a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800640e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800641c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800642a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006450:	2341      	movs	r3, #65	; 0x41
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	f007 fa81 	bl	800d95c <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 800645a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800645e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8006468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800646c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006476:	2341      	movs	r3, #65	; 0x41
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	2205      	movs	r2, #5
 800647e:	f007 fa6d 	bl	800d95c <CopiaVector>

					a->_debug_rx_ok++;
 8006482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006486:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 80064a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 80064b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d126      	bne.n	8006510 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 80064c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2237      	movs	r2, #55	; 0x37
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 80064d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 80064e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8006500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2201      	movs	r2, #1
 800650c:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//

	//------------------RECIBO CAMBIO DE MODO OK ------------------//
	 a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nOK\r\n");
 8006510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2213      	movs	r2, #19
 800651c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800652e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800653c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800654a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006558:	603b      	str	r3, [r7, #0]
 800655a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800655e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006568:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800656c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006570:	6809      	ldr	r1, [r1, #0]
 8006572:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006576:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800657a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006584:	2300      	movs	r3, #0
 8006586:	9305      	str	r3, [sp, #20]
 8006588:	9004      	str	r0, [sp, #16]
 800658a:	9103      	str	r1, [sp, #12]
 800658c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006590:	9102      	str	r1, [sp, #8]
 8006592:	9201      	str	r2, [sp, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4633      	mov	r3, r6
 800659a:	4a59      	ldr	r2, [pc, #356]	; (8006700 <AT_ESP8266_ND+0x5e8>)
 800659c:	4629      	mov	r1, r5
 800659e:	4620      	mov	r0, r4
 80065a0:	f006 fdea 	bl	800d178 <FT_String_ND>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d104      	bne.n	80065b4 <AT_ESP8266_ND+0x49c>
		{AT_decode=at_cambiar_modo1_ok;}
 80065aa:	2302      	movs	r3, #2
 80065ac:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80065b0:	f000 bf80 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
		else
		//------------------RECIBO CAMBIO DE MODO MAL ------------------//
			{
			a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nERROR\r\n");
 80065b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2216      	movs	r2, #22
 80065c0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80065c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80065d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80065e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80065ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006602:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800660c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006610:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006614:	6809      	ldr	r1, [r1, #0]
 8006616:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800661a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800661e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006622:	6800      	ldr	r0, [r0, #0]
 8006624:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006628:	2300      	movs	r3, #0
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	9004      	str	r0, [sp, #16]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006634:	9102      	str	r1, [sp, #8]
 8006636:	9201      	str	r2, [sp, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	4633      	mov	r3, r6
 800663e:	4a30      	ldr	r2, [pc, #192]	; (8006700 <AT_ESP8266_ND+0x5e8>)
 8006640:	4629      	mov	r1, r5
 8006642:	4620      	mov	r0, r4
 8006644:	f006 fd98 	bl	800d178 <FT_String_ND>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d104      	bne.n	8006658 <AT_ESP8266_ND+0x540>
				{AT_decode=at_cambiar_modo1_err;}
 800664e:	2303      	movs	r3, #3
 8006650:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006654:	f000 bf2e 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
			else
			//------------------MULTIPLES CONEXIONES ------------------//
				{
				a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nOK\r\n");
 8006658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800665c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2213      	movs	r2, #19
 8006664:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800666c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800667a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80066a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80066b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80066b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80066b8:	6809      	ldr	r1, [r1, #0]
 80066ba:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80066be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80066c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80066c6:	6800      	ldr	r0, [r0, #0]
 80066c8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80066cc:	2300      	movs	r3, #0
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	9004      	str	r0, [sp, #16]
 80066d2:	9103      	str	r1, [sp, #12]
 80066d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80066d8:	9102      	str	r1, [sp, #8]
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4633      	mov	r3, r6
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <AT_ESP8266_ND+0x5ec>)
 80066e4:	4629      	mov	r1, r5
 80066e6:	4620      	mov	r0, r4
 80066e8:	f006 fd46 	bl	800d178 <FT_String_ND>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10a      	bne.n	8006708 <AT_ESP8266_ND+0x5f0>
					{AT_decode=at_no_multiple_conn_ok;}
 80066f2:	2304      	movs	r3, #4
 80066f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80066f8:	f000 bedc 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
 80066fc:	0800f1fc 	.word	0x0800f1fc
 8006700:	0800f204 	.word	0x0800f204
 8006704:	0800f218 	.word	0x0800f218
				else
				//------------------MULTIPLES CONEXIONES ERROR------------------//
					{
					a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nERROR\r\n");
 8006708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800670c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2216      	movs	r2, #22
 8006714:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800671c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800672a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006756:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006760:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006764:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006768:	6809      	ldr	r1, [r1, #0]
 800676a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800676e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006772:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006776:	6800      	ldr	r0, [r0, #0]
 8006778:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800677c:	2300      	movs	r3, #0
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	9103      	str	r1, [sp, #12]
 8006784:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006788:	9102      	str	r1, [sp, #8]
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4633      	mov	r3, r6
 8006792:	4aaa      	ldr	r2, [pc, #680]	; (8006a3c <AT_ESP8266_ND+0x924>)
 8006794:	4629      	mov	r1, r5
 8006796:	4620      	mov	r0, r4
 8006798:	f006 fcee 	bl	800d178 <FT_String_ND>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d104      	bne.n	80067ac <AT_ESP8266_ND+0x694>
						{AT_decode=at_no_multiple_conn_err;}
 80067a2:	2305      	movs	r3, #5
 80067a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80067a8:	f000 be84 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
					else
					//------------------CONEXIÓN OK------------------//
						{
						a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 80067ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	220d      	movs	r2, #13
 80067b8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80067bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80067ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80067d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80067e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80067fa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006804:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006808:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800680c:	6809      	ldr	r1, [r1, #0]
 800680e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006812:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006816:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006820:	2300      	movs	r3, #0
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	9004      	str	r0, [sp, #16]
 8006826:	9103      	str	r1, [sp, #12]
 8006828:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800682c:	9102      	str	r1, [sp, #8]
 800682e:	9201      	str	r2, [sp, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	4633      	mov	r3, r6
 8006836:	4a82      	ldr	r2, [pc, #520]	; (8006a40 <AT_ESP8266_ND+0x928>)
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	f006 fc9c 	bl	800d178 <FT_String_ND>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d104      	bne.n	8006850 <AT_ESP8266_ND+0x738>
							{AT_decode=at_wifi_gotip;}
 8006846:	2306      	movs	r3, #6
 8006848:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800684c:	f000 be32 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
						else
						//------------------CONEXIÓN ERROR------------------//
							{
							a->_n_fcomp=strlen("\"\r\n\r\nERROR\r\n");
 8006850:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006854:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	220c      	movs	r2, #12
 800685c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\"\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800686e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800687c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800688a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800688e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800689e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80068a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068b0:	6809      	ldr	r1, [r1, #0]
 80068b2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80068b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80068ba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80068be:	6800      	ldr	r0, [r0, #0]
 80068c0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80068c4:	2300      	movs	r3, #0
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	9004      	str	r0, [sp, #16]
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80068d0:	9102      	str	r1, [sp, #8]
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4633      	mov	r3, r6
 80068da:	4a5a      	ldr	r2, [pc, #360]	; (8006a44 <AT_ESP8266_ND+0x92c>)
 80068dc:	4629      	mov	r1, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	f006 fc4a 	bl	800d178 <FT_String_ND>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d104      	bne.n	80068f4 <AT_ESP8266_ND+0x7dc>
								{AT_decode=at_wifi_err;}
 80068ea:	2307      	movs	r3, #7
 80068ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80068f0:	f000 bde0 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
							else
							//------------------CONEXIÓN TIMEOUT ERROR------------------//
								{
								a->_n_fcomp=strlen("+CWJAP:1\r\n\r\nFAIL\r\n");
 80068f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2212      	movs	r2, #18
 8006900:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:1\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800692e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006942:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800694c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006950:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006954:	6809      	ldr	r1, [r1, #0]
 8006956:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800695a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800695e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006968:	2300      	movs	r3, #0
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	9004      	str	r0, [sp, #16]
 800696e:	9103      	str	r1, [sp, #12]
 8006970:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006974:	9102      	str	r1, [sp, #8]
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4633      	mov	r3, r6
 800697e:	4a32      	ldr	r2, [pc, #200]	; (8006a48 <AT_ESP8266_ND+0x930>)
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f006 fbf8 	bl	800d178 <FT_String_ND>
 8006988:	4603      	mov	r3, r0
 800698a:	2b01      	cmp	r3, #1
 800698c:	d104      	bne.n	8006998 <AT_ESP8266_ND+0x880>
									{AT_decode=at_wifi_tout_err;}
 800698e:	2308      	movs	r3, #8
 8006990:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006994:	f000 bd8e 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
								else
								//------------------CONEXIÓN PASSWORD ERROR------------------//
									{
									a->_n_fcomp=strlen("+CWJAP:2\r\n\r\nFAIL\r\n");
 8006998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2212      	movs	r2, #18
 80069a4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:2\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80069b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80069c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069e6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80069f0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069f4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069f8:	6809      	ldr	r1, [r1, #0]
 80069fa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80069fe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a06:	6800      	ldr	r0, [r0, #0]
 8006a08:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	9004      	str	r0, [sp, #16]
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a18:	9102      	str	r1, [sp, #8]
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	4633      	mov	r3, r6
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <AT_ESP8266_ND+0x934>)
 8006a24:	4629      	mov	r1, r5
 8006a26:	4620      	mov	r0, r4
 8006a28:	f006 fba6 	bl	800d178 <FT_String_ND>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10e      	bne.n	8006a50 <AT_ESP8266_ND+0x938>
										{AT_decode=at_wifi_pass_err;}
 8006a32:	2309      	movs	r3, #9
 8006a34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a38:	f000 bd3c 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
 8006a3c:	0800f22c 	.word	0x0800f22c
 8006a40:	0800f244 	.word	0x0800f244
 8006a44:	0800f254 	.word	0x0800f254
 8006a48:	0800f264 	.word	0x0800f264
 8006a4c:	0800f278 	.word	0x0800f278
									else
									//------------------CONEXIÓN NET NAME ERROR------------------//
										{
										a->_n_fcomp=strlen("+CWJAP:3\r\n\r\nFAIL\r\n");
 8006a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2212      	movs	r2, #18
 8006a5c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:3\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a9e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006aa8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006aac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ab0:	6809      	ldr	r1, [r1, #0]
 8006ab2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ab6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006aba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	9004      	str	r0, [sp, #16]
 8006aca:	9103      	str	r1, [sp, #12]
 8006acc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ad0:	9102      	str	r1, [sp, #8]
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	4633      	mov	r3, r6
 8006ada:	4aa9      	ldr	r2, [pc, #676]	; (8006d80 <AT_ESP8266_ND+0xc68>)
 8006adc:	4629      	mov	r1, r5
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f006 fb4a 	bl	800d178 <FT_String_ND>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d104      	bne.n	8006af4 <AT_ESP8266_ND+0x9dc>
											{AT_decode=at_wifi_name_err;}
 8006aea:	230a      	movs	r3, #10
 8006aec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006af0:	f000 bce0 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
										else
										//------------------CONEXIÓN CONN ERROR------------------//
											{
											a->_n_fcomp=strlen("+CWJAP:4\r\n\r\nFAIL\r\n");
 8006af4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2212      	movs	r2, #18
 8006b00:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:4\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006b12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b42:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006b4c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b50:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b54:	6809      	ldr	r1, [r1, #0]
 8006b56:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006b5a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b5e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b62:	6800      	ldr	r0, [r0, #0]
 8006b64:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	9004      	str	r0, [sp, #16]
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b74:	9102      	str	r1, [sp, #8]
 8006b76:	9201      	str	r2, [sp, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4633      	mov	r3, r6
 8006b7e:	4a81      	ldr	r2, [pc, #516]	; (8006d84 <AT_ESP8266_ND+0xc6c>)
 8006b80:	4629      	mov	r1, r5
 8006b82:	4620      	mov	r0, r4
 8006b84:	f006 faf8 	bl	800d178 <FT_String_ND>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d104      	bne.n	8006b98 <AT_ESP8266_ND+0xa80>
												{AT_decode=at_wifi_conn_err;}
 8006b8e:	230b      	movs	r3, #11
 8006b90:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b94:	f000 bc8e 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
											else
											//------------------WIFI DISCONNECT------------------//
												{
												a->_n_fcomp=strlen("WIFI DISCONNECT\r\n");
 8006b98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2211      	movs	r2, #17
 8006ba4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006be6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006bf0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bf4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bf8:	6809      	ldr	r1, [r1, #0]
 8006bfa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006bfe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c06:	6800      	ldr	r0, [r0, #0]
 8006c08:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	9004      	str	r0, [sp, #16]
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c18:	9102      	str	r1, [sp, #8]
 8006c1a:	9201      	str	r2, [sp, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4633      	mov	r3, r6
 8006c22:	4a59      	ldr	r2, [pc, #356]	; (8006d88 <AT_ESP8266_ND+0xc70>)
 8006c24:	4629      	mov	r1, r5
 8006c26:	4620      	mov	r0, r4
 8006c28:	f006 faa6 	bl	800d178 <FT_String_ND>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d104      	bne.n	8006c3c <AT_ESP8266_ND+0xb24>
													{AT_decode=at_wifi_disconnect;}
 8006c32:	230c      	movs	r3, #12
 8006c34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c38:	f000 bc3c 	b.w	80074b4 <AT_ESP8266_ND+0x139c>
												else
												//------------------WIFI CONNECTED------------------//
													{
													a->_n_fcomp=strlen("WIFI CONNECTED\r\n");
 8006c3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2210      	movs	r2, #16
 8006c48:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c8a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c94:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c98:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c9c:	6809      	ldr	r1, [r1, #0]
 8006c9e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ca2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ca6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	9004      	str	r0, [sp, #16]
 8006cb6:	9103      	str	r1, [sp, #12]
 8006cb8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006cbc:	9102      	str	r1, [sp, #8]
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	4633      	mov	r3, r6
 8006cc6:	4a31      	ldr	r2, [pc, #196]	; (8006d8c <AT_ESP8266_ND+0xc74>)
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f006 fa54 	bl	800d178 <FT_String_ND>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d103      	bne.n	8006cde <AT_ESP8266_ND+0xbc6>
														{AT_decode=at_wifi_connected;}
 8006cd6:	230d      	movs	r3, #13
 8006cd8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006cdc:	e3ea      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
													else
													//------------------TCP CONECTADO------------------//
														{
														a->_n_fcomp=strlen("CONNECT\r\n\r\nOK\r\n");
 8006cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	220f      	movs	r2, #15
 8006cea:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006cee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d2c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d36:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d3a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d3e:	6809      	ldr	r1, [r1, #0]
 8006d40:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d44:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d48:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d52:	2300      	movs	r3, #0
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	9004      	str	r0, [sp, #16]
 8006d58:	9103      	str	r1, [sp, #12]
 8006d5a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d5e:	9102      	str	r1, [sp, #8]
 8006d60:	9201      	str	r2, [sp, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4633      	mov	r3, r6
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <AT_ESP8266_ND+0xc78>)
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f006 fa03 	bl	800d178 <FT_String_ND>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d10d      	bne.n	8006d94 <AT_ESP8266_ND+0xc7c>
															{AT_decode=at_tcp_conectado;}
 8006d78:	230e      	movs	r3, #14
 8006d7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d7e:	e399      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
 8006d80:	0800f28c 	.word	0x0800f28c
 8006d84:	0800f2a0 	.word	0x0800f2a0
 8006d88:	0800f2b4 	.word	0x0800f2b4
 8006d8c:	0800f2c8 	.word	0x0800f2c8
 8006d90:	0800f2dc 	.word	0x0800f2dc
														else
														//------------------TCP ERROR CLOSED------------------//
															{
															a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8006d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	220f      	movs	r2, #15
 8006da0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006de2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006dec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006df0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006df4:	6809      	ldr	r1, [r1, #0]
 8006df6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006dfa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006dfe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	9004      	str	r0, [sp, #16]
 8006e0e:	9103      	str	r1, [sp, #12]
 8006e10:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e14:	9102      	str	r1, [sp, #8]
 8006e16:	9201      	str	r2, [sp, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	4633      	mov	r3, r6
 8006e1e:	4aa8      	ldr	r2, [pc, #672]	; (80070c0 <AT_ESP8266_ND+0xfa8>)
 8006e20:	4629      	mov	r1, r5
 8006e22:	4620      	mov	r0, r4
 8006e24:	f006 f9a8 	bl	800d178 <FT_String_ND>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d103      	bne.n	8006e36 <AT_ESP8266_ND+0xd1e>
																{AT_decode=at_tcp_conn_err;}
 8006e2e:	230f      	movs	r3, #15
 8006e30:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e34:	e33e      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
															else
															//------------------TCP ERROR ALREADY CONNECTED------------------//
																{
																a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n\r\nERROR\r\n");
 8006e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	221e      	movs	r2, #30
 8006e42:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e84:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006e8e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e92:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e96:	6809      	ldr	r1, [r1, #0]
 8006e98:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006e9c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ea0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ea4:	6800      	ldr	r0, [r0, #0]
 8006ea6:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	9004      	str	r0, [sp, #16]
 8006eb0:	9103      	str	r1, [sp, #12]
 8006eb2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006eb6:	9102      	str	r1, [sp, #8]
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4633      	mov	r3, r6
 8006ec0:	4a80      	ldr	r2, [pc, #512]	; (80070c4 <AT_ESP8266_ND+0xfac>)
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f006 f957 	bl	800d178 <FT_String_ND>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d103      	bne.n	8006ed8 <AT_ESP8266_ND+0xdc0>
																	{AT_decode=at_tcp_alrdy_cnntd_err;}
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ed6:	e2ed      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																else
																//------------------TCP ERROR no ip------------------//
																	{
																	a->_n_fcomp=strlen("\r\nno ip\r\n\r\nERROR\r\n");
 8006ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2212      	movs	r2, #18
 8006ee4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nno ip\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f26:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f30:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f34:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f38:	6809      	ldr	r1, [r1, #0]
 8006f3a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f3e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f42:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	9004      	str	r0, [sp, #16]
 8006f52:	9103      	str	r1, [sp, #12]
 8006f54:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f58:	9102      	str	r1, [sp, #8]
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4633      	mov	r3, r6
 8006f62:	4a59      	ldr	r2, [pc, #356]	; (80070c8 <AT_ESP8266_ND+0xfb0>)
 8006f64:	4629      	mov	r1, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f006 f906 	bl	800d178 <FT_String_ND>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d103      	bne.n	8006f7a <AT_ESP8266_ND+0xe62>
																		{AT_decode=at_tcp_noip_err;}
 8006f72:	2311      	movs	r3, #17
 8006f74:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f78:	e29c      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																	else
																	//------------------CIPCLOSE OK------------------//
																		{
																		a->_n_fcomp=strlen("AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n");
 8006f7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	221b      	movs	r2, #27
 8006f86:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fc8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006fd2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fd6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fda:	6809      	ldr	r1, [r1, #0]
 8006fdc:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006fe0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fe4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fe8:	6800      	ldr	r0, [r0, #0]
 8006fea:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006fee:	2300      	movs	r3, #0
 8006ff0:	9305      	str	r3, [sp, #20]
 8006ff2:	9004      	str	r0, [sp, #16]
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ffa:	9102      	str	r1, [sp, #8]
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4633      	mov	r3, r6
 8007004:	4a31      	ldr	r2, [pc, #196]	; (80070cc <AT_ESP8266_ND+0xfb4>)
 8007006:	4629      	mov	r1, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f006 f8b5 	bl	800d178 <FT_String_ND>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d103      	bne.n	800701c <AT_ESP8266_ND+0xf04>
																			{AT_decode=at_tcp_closed_ok;}
 8007014:	2312      	movs	r3, #18
 8007016:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800701a:	e24b      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																		else
																		//------------------CIPCLOSE ERROR------------------//
																			{
																			a->_n_fcomp=strlen("AT+CIPCLOSE\r\n\r\nERROR\r\n");
 800701c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2216      	movs	r2, #22
 8007028:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800702c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800703a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800706a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007074:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007078:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800707c:	6809      	ldr	r1, [r1, #0]
 800707e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007082:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007086:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007090:	2300      	movs	r3, #0
 8007092:	9305      	str	r3, [sp, #20]
 8007094:	9004      	str	r0, [sp, #16]
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800709c:	9102      	str	r1, [sp, #8]
 800709e:	9201      	str	r2, [sp, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4633      	mov	r3, r6
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <AT_ESP8266_ND+0xfb8>)
 80070a8:	4629      	mov	r1, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	f006 f864 	bl	800d178 <FT_String_ND>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d10e      	bne.n	80070d4 <AT_ESP8266_ND+0xfbc>
																				{AT_decode=at_tcp_close_err;}
 80070b6:	2313      	movs	r3, #19
 80070b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070bc:	e1fa      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
 80070be:	bf00      	nop
 80070c0:	0800f2ec 	.word	0x0800f2ec
 80070c4:	0800f2fc 	.word	0x0800f2fc
 80070c8:	0800f31c 	.word	0x0800f31c
 80070cc:	0800f330 	.word	0x0800f330
 80070d0:	0800f34c 	.word	0x0800f34c
																			else
																			//------------------TCP CLOSED------------------//
																				{
																				a->_n_fcomp=strlen("CLOSED\r\n");
 80070d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2208      	movs	r2, #8
 80070e0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800710e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007122:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800712c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007130:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007134:	6809      	ldr	r1, [r1, #0]
 8007136:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800713a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800713e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007142:	6800      	ldr	r0, [r0, #0]
 8007144:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007148:	2300      	movs	r3, #0
 800714a:	9305      	str	r3, [sp, #20]
 800714c:	9004      	str	r0, [sp, #16]
 800714e:	9103      	str	r1, [sp, #12]
 8007150:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007154:	9102      	str	r1, [sp, #8]
 8007156:	9201      	str	r2, [sp, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4633      	mov	r3, r6
 800715e:	4aa8      	ldr	r2, [pc, #672]	; (8007400 <AT_ESP8266_ND+0x12e8>)
 8007160:	4629      	mov	r1, r5
 8007162:	4620      	mov	r0, r4
 8007164:	f006 f808 	bl	800d178 <FT_String_ND>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d103      	bne.n	8007176 <AT_ESP8266_ND+0x105e>
																					{AT_decode=at_tcp_client_desc;}
 800716e:	2314      	movs	r3, #20
 8007170:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007174:	e19e      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																				else
																				//------------------TCP OK TO SEND------------------//
																					{
																					a->_n_fcomp=strlen("\r\n\r\nOK\r\n>");
 8007176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800717a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2209      	movs	r2, #9
 8007182:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nOK\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800718a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80071b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071c4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80071ce:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071d2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071d6:	6809      	ldr	r1, [r1, #0]
 80071d8:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80071dc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071e0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80071e4:	6800      	ldr	r0, [r0, #0]
 80071e6:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80071ea:	2300      	movs	r3, #0
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	9004      	str	r0, [sp, #16]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071f6:	9102      	str	r1, [sp, #8]
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	4633      	mov	r3, r6
 8007200:	4a80      	ldr	r2, [pc, #512]	; (8007404 <AT_ESP8266_ND+0x12ec>)
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f005 ffb7 	bl	800d178 <FT_String_ND>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d103      	bne.n	8007218 <AT_ESP8266_ND+0x1100>
																						{AT_decode=at_tcp_ok_to_send;}
 8007210:	2315      	movs	r3, #21
 8007212:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007216:	e14d      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																					else
																					//------------------TCP SEND OK ------------------//
																						{
																						a->_n_fcomp=strlen("\r\n\r\nSEND OK\r\n");
 8007218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800721c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	220d      	movs	r2, #13
 8007224:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800723a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007266:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007270:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007274:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007278:	6809      	ldr	r1, [r1, #0]
 800727a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800727e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007282:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007286:	6800      	ldr	r0, [r0, #0]
 8007288:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800728c:	2300      	movs	r3, #0
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	9004      	str	r0, [sp, #16]
 8007292:	9103      	str	r1, [sp, #12]
 8007294:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007298:	9102      	str	r1, [sp, #8]
 800729a:	9201      	str	r2, [sp, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4633      	mov	r3, r6
 80072a2:	4a59      	ldr	r2, [pc, #356]	; (8007408 <AT_ESP8266_ND+0x12f0>)
 80072a4:	4629      	mov	r1, r5
 80072a6:	4620      	mov	r0, r4
 80072a8:	f005 ff66 	bl	800d178 <FT_String_ND>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d103      	bne.n	80072ba <AT_ESP8266_ND+0x11a2>
																							{AT_decode=at_tcp_enviado_ok;}
 80072b2:	2316      	movs	r3, #22
 80072b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072b8:	e0fc      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																						else
																						//------------------TCP link not valid ------------------//
																							{
																							a->_n_fcomp=strlen("\r\nlink is not valid\r\n\r\nERROR\r\n");
 80072ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	221e      	movs	r2, #30
 80072c6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nlink is not valid\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80072d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80072e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80072f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007308:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007312:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007316:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800731a:	6809      	ldr	r1, [r1, #0]
 800731c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007320:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007324:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007328:	6800      	ldr	r0, [r0, #0]
 800732a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800732e:	2300      	movs	r3, #0
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	9004      	str	r0, [sp, #16]
 8007334:	9103      	str	r1, [sp, #12]
 8007336:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800733a:	9102      	str	r1, [sp, #8]
 800733c:	9201      	str	r2, [sp, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4633      	mov	r3, r6
 8007344:	4a31      	ldr	r2, [pc, #196]	; (800740c <AT_ESP8266_ND+0x12f4>)
 8007346:	4629      	mov	r1, r5
 8007348:	4620      	mov	r0, r4
 800734a:	f005 ff15 	bl	800d178 <FT_String_ND>
 800734e:	4603      	mov	r3, r0
 8007350:	2b01      	cmp	r3, #1
 8007352:	d103      	bne.n	800735c <AT_ESP8266_ND+0x1244>
																								{AT_decode=at_tcp_snd_err;}
 8007354:	2317      	movs	r3, #23
 8007356:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800735a:	e0ab      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
																							else
																							//------------------TCP SEND FAIL ------------------//
																								{
																								a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 800735c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	220d      	movs	r2, #13
 8007368:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800736c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80073b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073bc:	6809      	ldr	r1, [r1, #0]
 80073be:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80073c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80073c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80073d0:	2300      	movs	r3, #0
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	9103      	str	r1, [sp, #12]
 80073d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073dc:	9102      	str	r1, [sp, #8]
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4633      	mov	r3, r6
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <AT_ESP8266_ND+0x12f8>)
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f005 fec4 	bl	800d178 <FT_String_ND>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d10e      	bne.n	8007414 <AT_ESP8266_ND+0x12fc>
																									{AT_decode=at_tcp_enviado_error;}
 80073f6:	2318      	movs	r3, #24
 80073f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073fc:	e05a      	b.n	80074b4 <AT_ESP8266_ND+0x139c>
 80073fe:	bf00      	nop
 8007400:	0800f364 	.word	0x0800f364
 8007404:	0800f370 	.word	0x0800f370
 8007408:	0800f37c 	.word	0x0800f37c
 800740c:	0800f38c 	.word	0x0800f38c
 8007410:	0800f3ac 	.word	0x0800f3ac
																								else
																								//------------------ready ON RESET ------------------//
																									{
																									a->_n_fcomp=strlen("ready");
 8007414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2205      	movs	r2, #5
 8007420:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ready",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800744e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007462:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800746c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007470:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007474:	6809      	ldr	r1, [r1, #0]
 8007476:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800747a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800747e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007488:	2300      	movs	r3, #0
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	9004      	str	r0, [sp, #16]
 800748e:	9103      	str	r1, [sp, #12]
 8007490:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007494:	9102      	str	r1, [sp, #8]
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4633      	mov	r3, r6
 800749e:	4a6a      	ldr	r2, [pc, #424]	; (8007648 <AT_ESP8266_ND+0x1530>)
 80074a0:	4629      	mov	r1, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	f005 fe68 	bl	800d178 <FT_String_ND>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d102      	bne.n	80074b4 <AT_ESP8266_ND+0x139c>
																										{AT_decode=at_ready;}
 80074ae:	2301      	movs	r3, #1
 80074b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				}	
			}

 //Evaluo todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80074b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	f201 84b7 	bhi.w	8008e38 <AT_ESP8266_ND+0x2d20>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <AT_ESP8266_ND+0x13b8>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	08007651 	.word	0x08007651
 80074d8:	080078c9 	.word	0x080078c9
 80074dc:	08007a47 	.word	0x08007a47
 80074e0:	08007c6d 	.word	0x08007c6d
 80074e4:	08007f4d 	.word	0x08007f4d
 80074e8:	080081ab 	.word	0x080081ab
 80074ec:	080086a7 	.word	0x080086a7
 80074f0:	08008887 	.word	0x08008887
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80074f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)	//Solo se llama durante b->_estado!=, luego no entra mas en ambos.
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007512:	2b01      	cmp	r3, #1
 8007514:	d13f      	bne.n	8007596 <AT_ESP8266_ND+0x147e>
						{
						a->_pasos=0;
 8007516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007544:	4620      	mov	r0, r4
 8007546:	f7f8 fe55 	bl	80001f4 <strlen>
 800754a:	4603      	mov	r3, r0
 800754c:	4423      	add	r3, r4
 800754e:	4a3f      	ldr	r2, [pc, #252]	; (800764c <AT_ESP8266_ND+0x1534>)
 8007550:	461c      	mov	r4, r3
 8007552:	4613      	mov	r3, r2
 8007554:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007556:	6020      	str	r0, [r4, #0]
 8007558:	6061      	str	r1, [r4, #4]
 800755a:	60a2      	str	r2, [r4, #8]
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800756e:	4618      	mov	r0, r3
 8007570:	f7f8 fe40 	bl	80001f4 <strlen>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CAMBIAR_MODO_EN_CURSO;
 8007586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2264      	movs	r2, #100	; 0x64
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}


				a->_pasos++;
 8007596:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo1_ok)
 80075b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <AT_ESP8266_ND+0x14c6>
 80075c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d018      	beq.n	8007600 <AT_ESP8266_ND+0x14e8>
 80075ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d014      	beq.n	8007600 <AT_ESP8266_ND+0x14e8>
															 ||(AT_decode==at_cambiar_modo1_err)))
 80075d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d010      	beq.n	8007600 <AT_ESP8266_ND+0x14e8>
															 ||(a->_ticks > a->_wtchdog))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80075de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80075ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f341 8426 	ble.w	8008e4c <AT_ESP8266_ND+0x2d34>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800760e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007616:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2200      	movs	r2, #0
 800762e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8007642:	f001 bc03 	b.w	8008e4c <AT_ESP8266_ND+0x2d34>
 8007646:	bf00      	nop
 8007648:	0800f3bc 	.word	0x0800f3bc
 800764c:	0800f3c4 	.word	0x0800f3c4
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&((AT_decode > at_wifi_connected)||(AT_decode==0)))
 8007660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800766e:	2b01      	cmp	r3, #1
 8007670:	f040 80ae 	bne.w	80077d0 <AT_ESP8266_ND+0x16b8>
 8007674:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007678:	2b0d      	cmp	r3, #13
 800767a:	dc04      	bgt.n	8007686 <AT_ESP8266_ND+0x156e>
 800767c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 80a5 	bne.w	80077d0 <AT_ESP8266_ND+0x16b8>
									   &&(AT_decode!=at_wifi_err)
									   &&(AT_decode!=at_wifi_disconnect)
									   &&(AT_decode!=at_wifi_connected)
									   &&(AT_decode!=at_wifi_gotip))*/
						{
						a->_pasos=0;
 8007686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80076a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7f8 fd9d 	bl	80001f4 <strlen>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4423      	add	r3, r4
 80076be:	4981      	ldr	r1, [pc, #516]	; (80078c4 <AT_ESP8266_ND+0x17ac>)
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	cb03      	ldmia	r3!, {r0, r1}
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	6051      	str	r1, [r2, #4]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80076ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80076dc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80076e0:	2201      	movs	r2, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f006 fb8d 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80076e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80076f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	1d9d      	adds	r5, r3, #6
 8007702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3306      	adds	r3, #6
 800770e:	4618      	mov	r0, r3
 8007710:	f7f8 fd70 	bl	80001f4 <strlen>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f006 fb71 	bl	800de02 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8007720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800772e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8007732:	4618      	mov	r0, r3
 8007734:	f7f8 fd5e 	bl	80001f4 <strlen>
 8007738:	4602      	mov	r2, r0
 800773a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800773e:	4619      	mov	r1, r3
 8007740:	4620      	mov	r0, r4
 8007742:	f006 fb5e 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8007746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8007762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3326      	adds	r3, #38	; 0x26
 800776e:	4618      	mov	r0, r3
 8007770:	f7f8 fd40 	bl	80001f4 <strlen>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	4629      	mov	r1, r5
 800777a:	4620      	mov	r0, r4
 800777c:	f006 fb41 	bl	800de02 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8007780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800778e:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8007792:	2203      	movs	r2, #3
 8007794:	4618      	mov	r0, r3
 8007796:	f006 fb34 	bl	800de02 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800779a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7f8 fd23 	bl	80001f4 <strlen>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CONEXION_EN_CURSO;
 80077c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	22c8      	movs	r2, #200	; 0xc8
 80077cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}
				a->_pasos++;
 80077d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//La primera vez no entra
				if ((a->_enviaruart==0)&&((AT_decode <= at_wifi_connected)||(AT_decode==0)||(a->_ticks2 > 20000)))  //Que analice luego de enviar por uart
 80077ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f041 8327 	bne.w	8008e50 <AT_ESP8266_ND+0x2d38>
 8007802:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007806:	2b0d      	cmp	r3, #13
 8007808:	dd0f      	ble.n	800782a <AT_ESP8266_ND+0x1712>
 800780a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <AT_ESP8266_ND+0x1712>
 8007812:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007816:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8007820:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007824:	4293      	cmp	r3, r2
 8007826:	f341 8313 	ble.w	8008e50 <AT_ESP8266_ND+0x2d38>
															||(AT_decode==at_wifi_connected)
															||(AT_decode==at_wifi_gotip))||(a->_ticks2 > 20000))*/

					{

						if((AT_decode==at_wifi_disconnect)&&(a->_ticks2 > 3000)) a->_estado=AT_decode;
 800782a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800782e:	2b0c      	cmp	r3, #12
 8007830:	d113      	bne.n	800785a <AT_ESP8266_ND+0x1742>
 8007832:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007836:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8007840:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007844:	4293      	cmp	r3, r2
 8007846:	dd08      	ble.n	800785a <AT_ESP8266_ND+0x1742>
 8007848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//Al conectar cuando esta conectado lo primero que hace es desconectar, esta desconexión, es una desconexió forzada por
						//el mòdulo por ello es que la tenemos que ignorar, primero se desconecta y luego de aprox 3 seg continua con el WIFI CONNECTED
						//y luego con el WIFI GOT IP.
						if(AT_decode!=at_wifi_disconnect)
 800785a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800785e:	2b0c      	cmp	r3, #12
 8007860:	d025      	beq.n	80078ae <AT_ESP8266_ND+0x1796>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8007862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 8007872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							if (AT_decode==0)
 8007882:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d108      	bne.n	800789c <AT_ESP8266_ND+0x1784>
							{
								a->_estado=CONEXION_EN_CURSO;
 800788a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	22c8      	movs	r2, #200	; 0xc8
 8007896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800789a:	e008      	b.n	80078ae <AT_ESP8266_ND+0x1796>
							}
							else
								{
								a->_estado=AT_decode;
 800789c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								}
							
						}

						a->_ticks2=0;
 80078ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 80078be:	f001 bac7 	b.w	8008e50 <AT_ESP8266_ND+0x2d38>
 80078c2:	bf00      	nop
 80078c4:	0800f3d4 	.word	0x0800f3d4
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80078c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80078d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d14d      	bne.n	8007986 <AT_ESP8266_ND+0x186e>
 80078ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d049      	beq.n	8007986 <AT_ESP8266_ND+0x186e>
 80078f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d045      	beq.n	8007986 <AT_ESP8266_ND+0x186e>
 80078fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078fe:	2b0d      	cmp	r3, #13
 8007900:	d041      	beq.n	8007986 <AT_ESP8266_ND+0x186e>
						{
						a->_pasos=0;
 8007902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2201      	movs	r2, #1
 800791e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8007922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007930:	4620      	mov	r0, r4
 8007932:	f7f8 fc5f 	bl	80001f4 <strlen>
 8007936:	4603      	mov	r3, r0
 8007938:	4423      	add	r3, r4
 800793a:	49c9      	ldr	r1, [pc, #804]	; (8007c60 <AT_ESP8266_ND+0x1b48>)
 800793c:	461a      	mov	r2, r3
 800793e:	460b      	mov	r3, r1
 8007940:	cb03      	ldmia	r3!, {r0, r1}
 8007942:	6010      	str	r0, [r2, #0]
 8007944:	6051      	str	r1, [r2, #4]
 8007946:	8819      	ldrh	r1, [r3, #0]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	8111      	strh	r1, [r2, #8]
 800794c:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800794e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800795c:	4618      	mov	r0, r3
 800795e:	f7f8 fc49 	bl	80001f4 <strlen>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DESCONEXION_EN_CURSO;
 8007974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80079a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d113      	bne.n	80079de <AT_ESP8266_ND+0x18c6>
 80079b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079ba:	2b0c      	cmp	r3, #12
 80079bc:	d020      	beq.n	8007a00 <AT_ESP8266_ND+0x18e8>
 80079be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079c2:	2b0d      	cmp	r3, #13
 80079c4:	d01c      	beq.n	8007a00 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_wifi_gotip)
 80079c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079ca:	2b06      	cmp	r3, #6
 80079cc:	d018      	beq.n	8007a00 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_restart	)
 80079ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d014      	beq.n	8007a00 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_deconectar_ok )))
 80079d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079da:	2b0d      	cmp	r3, #13
 80079dc:	d010      	beq.n	8007a00 <AT_ESP8266_ND+0x18e8>
																		  ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 80079de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80079ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80079fa:	429a      	cmp	r2, r3
 80079fc:	f341 822a 	ble.w	8008e54 <AT_ESP8266_ND+0x2d3c>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007a42:	f001 ba07 	b.w	8008e54 <AT_ESP8266_ND+0x2d3c>
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_ready)
 8007a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d17f      	bne.n	8007b68 <AT_ESP8266_ND+0x1a50>
 8007a68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d07b      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_tout_err)
 8007a70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d077      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_pass_err)
 8007a78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	d073      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_name_err)
 8007a80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a84:	2b0a      	cmp	r3, #10
 8007a86:	d06f      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_err)
 8007a88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a8c:	2b07      	cmp	r3, #7
 8007a8e:	d06b      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_disconnect)
 8007a90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	d067      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_connected)
 8007a98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a9c:	2b0d      	cmp	r3, #13
 8007a9e:	d063      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_gotip))
 8007aa0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007aa4:	2b06      	cmp	r3, #6
 8007aa6:	d05f      	beq.n	8007b68 <AT_ESP8266_ND+0x1a50>
						{
						a->_pasos=0;
 8007aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8007ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d115      	bne.n	8007b06 <AT_ESP8266_ND+0x19ee>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8007ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7f8 fb83 	bl	80001f4 <strlen>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4423      	add	r3, r4
 8007af2:	4a5c      	ldr	r2, [pc, #368]	; (8007c64 <AT_ESP8266_ND+0x1b4c>)
 8007af4:	461c      	mov	r4, r3
 8007af6:	4613      	mov	r3, r2
 8007af8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007afa:	6020      	str	r0, [r4, #0]
 8007afc:	6061      	str	r1, [r4, #4]
 8007afe:	60a2      	str	r2, [r4, #8]
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	e014      	b.n	8007b30 <AT_ESP8266_ND+0x1a18>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8007b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7f8 fb6d 	bl	80001f4 <strlen>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4423      	add	r3, r4
 8007b1e:	4a52      	ldr	r2, [pc, #328]	; (8007c68 <AT_ESP8266_ND+0x1b50>)
 8007b20:	461c      	mov	r4, r3
 8007b22:	4613      	mov	r3, r2
 8007b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b26:	6020      	str	r0, [r4, #0]
 8007b28:	6061      	str	r1, [r4, #4]
 8007b2a:	60a2      	str	r2, [r4, #8]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7f8 fb58 	bl	80001f4 <strlen>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=MUX_CONN_EN_CURSO;
 8007b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//Se deja pasar todo lo anterior para que pueda tomar decisiones en función a lo recibido, ya que si solo escucha lo referente a la
				//conexiones múltiples no puede volver al estado anterior de conexión, cuando mas se avanza, mas condiciones hay, claramente podemos separar
				// los if por casos de exitos para acelerar y  luego por todos los demás.
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_tout_err)
 8007b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d12f      	bne.n	8007bf8 <AT_ESP8266_ND+0x1ae0>
 8007b98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d03c      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
 8007ba0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d038      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_pass_err)
 8007ba8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bac:	2b09      	cmp	r3, #9
 8007bae:	d034      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_name_err)
 8007bb0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bb4:	2b0a      	cmp	r3, #10
 8007bb6:	d030      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_err)
 8007bb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bbc:	2b07      	cmp	r3, #7
 8007bbe:	d02c      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_disconnect)
 8007bc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bc4:	2b0c      	cmp	r3, #12
 8007bc6:	d028      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_connected)
 8007bc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bcc:	2b0d      	cmp	r3, #13
 8007bce:	d024      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_gotip)
 8007bd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bd4:	2b06      	cmp	r3, #6
 8007bd6:	d020      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_ok)
 8007bd8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bdc:	2b07      	cmp	r3, #7
 8007bde:	d01c      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_ok)
 8007be0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d018      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_err)
 8007be8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bec:	2b1e      	cmp	r3, #30
 8007bee:	d014      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_err)))
 8007bf0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	d010      	beq.n	8007c1a <AT_ESP8266_ND+0x1b02>
															||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 8007bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8007c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8007c14:	429a      	cmp	r2, r3
 8007c16:	f341 811f 	ble.w	8008e58 <AT_ESP8266_ND+0x2d40>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007c3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007c5c:	f001 b8fc 	b.w	8008e58 <AT_ESP8266_ND+0x2d40>
 8007c60:	0800f3e0 	.word	0x0800f3e0
 8007c64:	0800f3ec 	.word	0x0800f3ec
 8007c68:	0800f3fc 	.word	0x0800f3fc
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007c6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8007c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	f040 80f3 	bne.w	8007e76 <AT_ESP8266_ND+0x1d5e>
 8007c90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	f000 80ee 	beq.w	8007e76 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_ok)
 8007c9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	f000 80e9 	beq.w	8007e76 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_error)
 8007ca4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f000 80e4 	beq.w	8007e76 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_err)
 8007cae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cb2:	2b21      	cmp	r3, #33	; 0x21
 8007cb4:	f000 80df 	beq.w	8007e76 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_ok))
 8007cb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cbc:	2b1b      	cmp	r3, #27
 8007cbe:	f000 80da 	beq.w	8007e76 <AT_ESP8266_ND+0x1d5e>
						{
						a->_pasos=0;
 8007cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8007ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7f8 fa7f 	bl	80001f4 <strlen>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4423      	add	r3, r4
 8007cfa:	4993      	ldr	r1, [pc, #588]	; (8007f48 <AT_ESP8266_ND+0x1e30>)
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	460b      	mov	r3, r1
 8007d00:	cb03      	ldmia	r3!, {r0, r1}
 8007d02:	6010      	str	r0, [r2, #0]
 8007d04:	6051      	str	r1, [r2, #4]
 8007d06:	8819      	ldrh	r1, [r3, #0]
 8007d08:	789b      	ldrb	r3, [r3, #2]
 8007d0a:	8111      	strh	r1, [r2, #8]
 8007d0c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8007d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007d1c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007d20:	2201      	movs	r2, #1
 8007d22:	4618      	mov	r0, r3
 8007d24:	f006 f86d 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8007d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8007d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	334c      	adds	r3, #76	; 0x4c
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f8 fa4f 	bl	80001f4 <strlen>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f006 f850 	bl	800de02 <strncat>
						strncat(a->_uart2snd,separador,3);
 8007d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007d70:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007d74:	2203      	movs	r2, #3
 8007d76:	4618      	mov	r0, r3
 8007d78:	f006 f843 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8007d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8007d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3362      	adds	r3, #98	; 0x62
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f8 fa25 	bl	80001f4 <strlen>
 8007daa:	4603      	mov	r3, r0
 8007dac:	461a      	mov	r2, r3
 8007dae:	4629      	mov	r1, r5
 8007db0:	4620      	mov	r0, r4
 8007db2:	f006 f826 	bl	800de02 <strncat>
						strncat(a->_uart2snd,separador,3);
 8007db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007dc4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007dc8:	2203      	movs	r2, #3
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f006 f819 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8007dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8007dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3372      	adds	r3, #114	; 0x72
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7f8 f9fb 	bl	80001f4 <strlen>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	461a      	mov	r2, r3
 8007e02:	4629      	mov	r1, r5
 8007e04:	4620      	mov	r0, r4
 8007e06:	f005 fffc 	bl	800de02 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8007e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e18:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f005 ffef 	bl	800de02 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8007e24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e32:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8007e36:	2202      	movs	r2, #2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f005 ffe2 	bl	800de02 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8007e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7f8 f9d1 	bl	80001f4 <strlen>
 8007e52:	4603      	mov	r3, r0
 8007e54:	461a      	mov	r2, r3
 8007e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DEF_IP_EN_CURSO;
 8007e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8007e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d11b      	bne.n	8007ede <AT_ESP8266_ND+0x1dc6>
 8007ea6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d028      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
 8007eae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eb2:	2b0d      	cmp	r3, #13
 8007eb4:	d024      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_wifi_gotip)
 8007eb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eba:	2b06      	cmp	r3, #6
 8007ebc:	d020      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_restart)
 8007ebe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d01c      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_error)
 8007ec6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d018      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_err)
 8007ece:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ed2:	2b21      	cmp	r3, #33	; 0x21
 8007ed4:	d014      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_ok)))
 8007ed6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eda:	2b1b      	cmp	r3, #27
 8007edc:	d010      	beq.n	8007f00 <AT_ESP8266_ND+0x1de8>
															 ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 8007ede:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8007eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8007efa:	429a      	cmp	r2, r3
 8007efc:	f340 87ae 	ble.w	8008e5c <AT_ESP8266_ND+0x2d44>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007f42:	f000 bf8b 	b.w	8008e5c <AT_ESP8266_ND+0x2d44>
 8007f46:	bf00      	nop
 8007f48:	0800f40c 	.word	0x0800f40c
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				//Al entrar en teoría AT_decode es 0 ya que no se enviaron datos por puerto serie aún, en el caso
				// que llegaran datos se analiza mediante la otra rama de la OR.
				if(( a->_enviaruart==1)&&((AT_decode > at_tcp_client_desc)||(AT_decode==0)))
 8007f5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	f040 80cd 	bne.w	800810a <AT_ESP8266_ND+0x1ff2>
 8007f70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f74:	2b14      	cmp	r3, #20
 8007f76:	dc04      	bgt.n	8007f82 <AT_ESP8266_ND+0x1e6a>
 8007f78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 80c4 	bne.w	800810a <AT_ESP8266_ND+0x1ff2>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
									   &&(AT_decode!=at_tcp_conectado)
									   &&(AT_decode!=at_tcp_client_desc)
									   &&(AT_decode!=at_error))*/
						{
						a->_pasos=0;
 8007f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8007fa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f7f8 f91f 	bl	80001f4 <strlen>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4423      	add	r3, r4
 8007fba:	4a99      	ldr	r2, [pc, #612]	; (8008220 <AT_ESP8266_ND+0x2108>)
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	6061      	str	r1, [r4, #4]
 8007fc6:	60a2      	str	r2, [r4, #8]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8007fcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007fda:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f005 ff0e 	bl	800de02 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8007fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7f8 f8fd 	bl	80001f4 <strlen>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4423      	add	r3, r4
 8007ffe:	4a89      	ldr	r2, [pc, #548]	; (8008224 <AT_ESP8266_ND+0x210c>)
 8008000:	6810      	ldr	r0, [r2, #0]
 8008002:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008012:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008016:	2203      	movs	r2, #3
 8008018:	4618      	mov	r0, r3
 800801a:	f005 fef2 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 800801e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800802c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f103 0536 	add.w	r5, r3, #54	; 0x36
 800803a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3336      	adds	r3, #54	; 0x36
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 f8d4 	bl	80001f4 <strlen>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	4629      	mov	r1, r5
 8008052:	4620      	mov	r0, r4
 8008054:	f005 fed5 	bl	800de02 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008066:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800806a:	2202      	movs	r2, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f005 fec8 	bl	800de02 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f103 0546 	add.w	r5, r3, #70	; 0x46
 800808e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3346      	adds	r3, #70	; 0x46
 800809a:	4618      	mov	r0, r3
 800809c:	f7f8 f8aa 	bl	80001f4 <strlen>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	4629      	mov	r1, r5
 80080a6:	4620      	mov	r0, r4
 80080a8:	f005 feab 	bl	800de02 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80080ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080ba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f8 f898 	bl	80001f4 <strlen>
 80080c4:	4602      	mov	r2, r0
 80080c6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80080ca:	4619      	mov	r1, r3
 80080cc:	4620      	mov	r0, r4
 80080ce:	f005 fe98 	bl	800de02 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80080d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7f8 f887 	bl	80001f4 <strlen>
 80080e6:	4603      	mov	r3, r0
 80080e8:	461a      	mov	r2, r3
 80080ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=TCP_CONN_EN_CURSO;
 80080f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 800810a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//No dejo que entre por AT_decode=0. Si recibo info erronea ingreso porque al no encontrar un cadena que se corresponda
				// con los valores fijados AT_decode va a valer 0. Si ese if devuelve a->_estado=0, se vuelve a enviar la petición de 
				// conexión a TCP por puerto serie, la cual queda en loop porque lo primero que se recibe de la comunicación al intentar
				// conectar a un servidor TCP es la misma instrucción AT+CIPSTART . .. .  y esto vale 0.
				if ((a->_enviaruart==0)&&(((AT_decode <= at_tcp_client_desc)&&(AT_decode!=0))||(a->_ticks2 > 10000))) //a->_wtchdog)))
 8008128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008136:	2b00      	cmp	r3, #0
 8008138:	f040 8692 	bne.w	8008e60 <AT_ESP8266_ND+0x2d48>
 800813c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008140:	2b14      	cmp	r3, #20
 8008142:	dc03      	bgt.n	800814c <AT_ESP8266_ND+0x2034>
 8008144:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <AT_ESP8266_ND+0x204c>
 800814c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008150:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800815a:	f242 7210 	movw	r2, #10000	; 0x2710
 800815e:	4293      	cmp	r3, r2
 8008160:	f340 867e 	ble.w	8008e60 <AT_ESP8266_ND+0x2d48>
																		  ||(AT_decode==at_tcp_client_desc)
																		  ||(AT_decode==at_error)
																		  ||(AT_decode==at_busy_p)))
																		  ||(a->_ticks > a->_wtchdog))*///210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800818a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800819a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80081a6:	f000 be5b 	b.w	8008e60 <AT_ESP8266_ND+0x2d48>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80081aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ae:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	605a      	str	r2, [r3, #4]


				if((AT_decode <= at_tcp_client_desc)&&(AT_decode!=at_tcp_alrdy_cnntd_err)&&(AT_decode!=at_tcp_conectado)&&(AT_decode!=0))
 80081ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081be:	2b14      	cmp	r3, #20
 80081c0:	dc32      	bgt.n	8008228 <AT_ESP8266_ND+0x2110>
 80081c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c6:	2b10      	cmp	r3, #16
 80081c8:	d02e      	beq.n	8008228 <AT_ESP8266_ND+0x2110>
 80081ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ce:	2b0e      	cmp	r3, #14
 80081d0:	d02a      	beq.n	8008228 <AT_ESP8266_ND+0x2110>
 80081d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d026      	beq.n	8008228 <AT_ESP8266_ND+0x2110>
				/*if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
						||(AT_decode==at_error))*/ //240420
				{
					a->_estado=AT_decode;
 80081da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80081ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 80081fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 800820c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_ejecucion=0;
									a->_subpaso=0;
								}
				}
			}
			break;
 800821c:	f000 be22 	b.w	8008e64 <AT_ESP8266_ND+0x2d4c>
 8008220:	0800f418 	.word	0x0800f418
 8008224:	0800f428 	.word	0x0800f428
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008236:	2b01      	cmp	r3, #1
 8008238:	f040 80d1 	bne.w	80083de <AT_ESP8266_ND+0x22c6>
 800823c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 80c7 	bne.w	80083de <AT_ESP8266_ND+0x22c6>
										a->_ejecucion=1;
 8008250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2201      	movs	r2, #1
 800825c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8008260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2218      	movs	r2, #24
 800826c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80082ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80082be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7f7 ff91 	bl	80001f4 <strlen>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4423      	add	r3, r4
 80082d6:	4ab1      	ldr	r2, [pc, #708]	; (800859c <AT_ESP8266_ND+0x2484>)
 80082d8:	461c      	mov	r4, r3
 80082da:	4613      	mov	r3, r2
 80082dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082de:	6020      	str	r0, [r4, #0]
 80082e0:	6061      	str	r1, [r4, #4]
 80082e2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80082e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80082f2:	f107 0214 	add.w	r2, r7, #20
 80082f6:	4611      	mov	r1, r2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f005 fa85 	bl	800d808 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80082fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008302:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4618      	mov	r0, r3
 8008312:	f7f7 ff6f 	bl	80001f4 <strlen>
 8008316:	4602      	mov	r2, r0
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	4619      	mov	r1, r3
 800831e:	4620      	mov	r0, r4
 8008320:	f005 fd6f 	bl	800de02 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008340:	4619      	mov	r1, r3
 8008342:	4610      	mov	r0, r2
 8008344:	f005 fe3e 	bl	800dfc4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008348:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008356:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800835a:	2202      	movs	r2, #2
 800835c:	4618      	mov	r0, r3
 800835e:	f005 fd50 	bl	800de02 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008370:	4618      	mov	r0, r3
 8008372:	f7f7 ff3f 	bl	80001f4 <strlen>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800838c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008396:	4620      	mov	r0, r4
 8008398:	f7f7 ff2c 	bl	80001f4 <strlen>
 800839c:	4603      	mov	r3, r0
 800839e:	4423      	add	r3, r4
 80083a0:	4a7f      	ldr	r2, [pc, #508]	; (80085a0 <AT_ESP8266_ND+0x2488>)
 80083a2:	461c      	mov	r4, r3
 80083a4:	4613      	mov	r3, r2
 80083a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083a8:	6020      	str	r0, [r4, #0]
 80083aa:	6061      	str	r1, [r4, #4]
 80083ac:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80083ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=TCP_SND_EN_CURSO;
 80083cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80083de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_tcp_ok_to_send)
 80083fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 80ac 	bne.w	8008568 <AT_ESP8266_ND+0x2450>
 8008410:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008414:	2b16      	cmp	r3, #22
 8008416:	f000 80a7 	beq.w	8008568 <AT_ESP8266_ND+0x2450>
 800841a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7f7 fed1 	bl	80001e0 <strcmp>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01c      	beq.n	800847e <AT_ESP8266_ND+0x2366>
 8008444:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008448:	2b15      	cmp	r3, #21
 800844a:	d018      	beq.n	800847e <AT_ESP8266_ND+0x2366>
												   ||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 800844c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800845a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008468:	429a      	cmp	r2, r3
 800846a:	dd7d      	ble.n	8008568 <AT_ESP8266_ND+0x2450>
 800846c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800847a:	2b01      	cmp	r3, #1
 800847c:	d174      	bne.n	8008568 <AT_ESP8266_ND+0x2450>
								if(a->_ticks > a->_wtchdog)//if((a->_ticks > a->_wtchdog)||(a->_subpaso==1))//((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 800847e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800848c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 800849a:	429a      	cmp	r2, r3
 800849c:	dd0e      	ble.n	80084bc <AT_ESP8266_ND+0x23a4>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800849e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 80084bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 80084da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2201      	movs	r2, #1
 8008504:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008532:	2361      	movs	r3, #97	; 0x61
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	2301      	movs	r3, #1
 8008538:	f005 fa10 	bl	800d95c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800853c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if(((AT_decode <= at_tcp_enviado_error)&&(AT_decode!=0))||(a->_ticks > a->_wtchdog))
 8008568:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800856c:	2b18      	cmp	r3, #24
 800856e:	dc03      	bgt.n	8008578 <AT_ESP8266_ND+0x2460>
 8008570:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d115      	bne.n	80085a4 <AT_ESP8266_ND+0x248c>
 8008578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008594:	429a      	cmp	r2, r3
 8008596:	f340 8465 	ble.w	8008e64 <AT_ESP8266_ND+0x2d4c>
 800859a:	e003      	b.n	80085a4 <AT_ESP8266_ND+0x248c>
 800859c:	0800f42c 	.word	0x0800f42c
 80085a0:	0800f438 	.word	0x0800f438
									a->_debug_count5++;
 80085a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 80085c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80085d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80085de:	429a      	cmp	r2, r3
 80085e0:	dd25      	ble.n	800862e <AT_ESP8266_ND+0x2516>
										a->_debug_count8++;
 80085e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 800861e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800862e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800863c:	2b02      	cmp	r3, #2
 800863e:	dd10      	ble.n	8008662 <AT_ESP8266_ND+0x254a>
 8008640:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008644:	2b14      	cmp	r3, #20
 8008646:	d00c      	beq.n	8008662 <AT_ESP8266_ND+0x254a>
 8008648:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800864c:	2b0c      	cmp	r3, #12
 800864e:	d008      	beq.n	8008662 <AT_ESP8266_ND+0x254a>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8008650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	220f      	movs	r2, #15
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008660:	e008      	b.n	8008674 <AT_ESP8266_ND+0x255c>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8008684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8008694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 80086a4:	e3de      	b.n	8008e64 <AT_ESP8266_ND+0x2d4c>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80086a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 80086b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d16f      	bne.n	80087a8 <AT_ESP8266_ND+0x2690>
						{
						a->_pasos=0;
 80086c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80086d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80086e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7f7 fd7c 	bl	80001f4 <strlen>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4423      	add	r3, r4
 8008700:	4a7c      	ldr	r2, [pc, #496]	; (80088f4 <AT_ESP8266_ND+0x27dc>)
 8008702:	461c      	mov	r4, r3
 8008704:	4615      	mov	r5, r2
 8008706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008708:	6020      	str	r0, [r4, #0]
 800870a:	6061      	str	r1, [r4, #4]
 800870c:	60a2      	str	r2, [r4, #8]
 800870e:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8008710:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008714:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800871e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008722:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	335c      	adds	r3, #92	; 0x5c
 8008738:	4618      	mov	r0, r3
 800873a:	f7f7 fd5b 	bl	80001f4 <strlen>
 800873e:	4603      	mov	r3, r0
 8008740:	461a      	mov	r2, r3
 8008742:	4629      	mov	r1, r5
 8008744:	4620      	mov	r0, r4
 8008746:	f005 fb5c 	bl	800de02 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800874a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800874e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008758:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800875c:	4618      	mov	r0, r3
 800875e:	f7f7 fd49 	bl	80001f4 <strlen>
 8008762:	4602      	mov	r2, r0
 8008764:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008768:	4619      	mov	r1, r3
 800876a:	4620      	mov	r0, r4
 800876c:	f005 fb49 	bl	800de02 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008774:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800877e:	4618      	mov	r0, r3
 8008780:	f7f7 fd38 	bl	80001f4 <strlen>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 8008796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80087a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80087a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_client_desc)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > a->_wtchdog))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 80087c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d123      	bne.n	8008820 <AT_ESP8266_ND+0x2708>
 80087d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087dc:	2b0c      	cmp	r3, #12
 80087de:	d030      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 80087e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e4:	2b0d      	cmp	r3, #13
 80087e6:	d02c      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 80087e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ec:	2b06      	cmp	r3, #6
 80087ee:	d028      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 80087f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d024      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 80087f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087fc:	2b0e      	cmp	r3, #14
 80087fe:	d020      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 8008800:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008804:	2b14      	cmp	r3, #20
 8008806:	d01c      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 8008808:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800880c:	2b15      	cmp	r3, #21
 800880e:	d018      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 8008810:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008814:	2b16      	cmp	r3, #22
 8008816:	d014      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 8008818:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800881c:	2b17      	cmp	r3, #23
 800881e:	d010      	beq.n	8008842 <AT_ESP8266_ND+0x272a>
 8008820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800882e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008832:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 800883c:	429a      	cmp	r2, r3
 800883e:	f340 8313 	ble.w	8008e68 <AT_ESP8266_ND+0x2d50>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8008884:	e2f0      	b.n	8008e68 <AT_ESP8266_ND+0x2d50>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8008886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008896:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800889a:	2b14      	cmp	r3, #20
 800889c:	d007      	beq.n	80088ae <AT_ESP8266_ND+0x2796>
 800889e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a2:	2b0c      	cmp	r3, #12
 80088a4:	d003      	beq.n	80088ae <AT_ESP8266_ND+0x2796>
 80088a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d124      	bne.n	80088f8 <AT_ESP8266_ND+0x27e0>
				{
					a->_estado=AT_decode;
 80088ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80088bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80088c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 80088d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 80088e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80088f0:	e2bc      	b.n	8008e6c <AT_ESP8266_ND+0x2d54>
 80088f2:	bf00      	nop
 80088f4:	0800f444 	.word	0x0800f444
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80088f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008906:	2b01      	cmp	r3, #1
 8008908:	f040 8102 	bne.w	8008b10 <AT_ESP8266_ND+0x29f8>
 800890c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800891a:	2b00      	cmp	r3, #0
 800891c:	f040 80f8 	bne.w	8008b10 <AT_ESP8266_ND+0x29f8>
										a->_ejecucion=1;
 8008920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2201      	movs	r2, #1
 800892c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8008930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2218      	movs	r2, #24
 800893c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 800896e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800898e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008992:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800899c:	4620      	mov	r0, r4
 800899e:	f7f7 fc29 	bl	80001f4 <strlen>
 80089a2:	4603      	mov	r3, r0
 80089a4:	4423      	add	r3, r4
 80089a6:	4a86      	ldr	r2, [pc, #536]	; (8008bc0 <AT_ESP8266_ND+0x2aa8>)
 80089a8:	461c      	mov	r4, r3
 80089aa:	4613      	mov	r3, r2
 80089ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089ae:	6020      	str	r0, [r4, #0]
 80089b0:	6061      	str	r1, [r4, #4]
 80089b2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80089b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 80089c2:	f107 020c 	add.w	r2, r7, #12
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f004 ff1d 	bl	800d808 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80089ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80089dc:	f107 030c 	add.w	r3, r7, #12
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f7 fc07 	bl	80001f4 <strlen>
 80089e6:	4602      	mov	r2, r0
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	4619      	mov	r1, r3
 80089ee:	4620      	mov	r0, r4
 80089f0:	f005 fa07 	bl	800de02 <strncat>
										strncat(a->_uart2snd,",",1);
 80089f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7f7 fbf6 	bl	80001f4 <strlen>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4423      	add	r3, r4
 8008a0c:	496d      	ldr	r1, [pc, #436]	; (8008bc4 <AT_ESP8266_ND+0x2aac>)
 8008a0e:	461a      	mov	r2, r3
 8008a10:	460b      	mov	r3, r1
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8008a24:	f107 020c 	add.w	r2, r7, #12
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f004 feec 	bl	800d808 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f7 fbd6 	bl	80001f4 <strlen>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	f107 030c 	add.w	r3, r7, #12
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4620      	mov	r0, r4
 8008a52:	f005 f9d6 	bl	800de02 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f005 faa5 	bl	800dfc4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008a88:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f005 f9b7 	bl	800de02 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fba6 	bl	80001f4 <strlen>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008aba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7f7 fb93 	bl	80001f4 <strlen>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	4423      	add	r3, r4
 8008ad2:	4a3d      	ldr	r2, [pc, #244]	; (8008bc8 <AT_ESP8266_ND+0x2ab0>)
 8008ad4:	461c      	mov	r4, r3
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	6061      	str	r1, [r4, #4]
 8008ade:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 8008afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 8008b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 80c3 	bne.w	8008cc8 <AT_ESP8266_ND+0x2bb0>
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b16      	cmp	r3, #22
 8008b48:	f000 80be 	beq.w	8008cc8 <AT_ESP8266_ND+0x2bb0>
 8008b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f7f7 fb38 	bl	80001e0 <strcmp>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d02a      	beq.n	8008bcc <AT_ESP8266_ND+0x2ab4>
 8008b76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d026      	beq.n	8008bcc <AT_ESP8266_ND+0x2ab4>
 8008b7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b82:	2b14      	cmp	r3, #20
 8008b84:	d022      	beq.n	8008bcc <AT_ESP8266_ND+0x2ab4>
 8008b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f340 8090 	ble.w	8008cc8 <AT_ESP8266_ND+0x2bb0>
 8008ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	f040 8086 	bne.w	8008cc8 <AT_ESP8266_ND+0x2bb0>
 8008bbc:	e006      	b.n	8008bcc <AT_ESP8266_ND+0x2ab4>
 8008bbe:	bf00      	nop
 8008bc0:	0800f42c 	.word	0x0800f42c
 8008bc4:	0800f454 	.word	0x0800f454
 8008bc8:	0800f438 	.word	0x0800f438
								if((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 8008bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008be8:	429a      	cmp	r2, r3
 8008bea:	dd17      	ble.n	8008c1c <AT_ESP8266_ND+0x2b04>
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d10e      	bne.n	8008c1c <AT_ESP8266_ND+0x2b04>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008c92:	2361      	movs	r3, #97	; 0x61
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	2301      	movs	r3, #1
 8008c98:	f004 fe60 	bl	800d95c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > a->_wtchdog)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_client_desc)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8008cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008cda:	f040 80c7 	bne.w	8008e6c <AT_ESP8266_ND+0x2d54>
 8008cde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ce2:	2b16      	cmp	r3, #22
 8008ce4:	d030      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008ce6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cea:	2b0d      	cmp	r3, #13
 8008cec:	d02c      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008cee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d028      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008d12:	429a      	cmp	r2, r3
 8008d14:	dc18      	bgt.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1a:	2b0c      	cmp	r3, #12
 8008d1c:	d014      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d22:	2b14      	cmp	r3, #20
 8008d24:	d010      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d2a:	2b17      	cmp	r3, #23
 8008d2c:	d00c      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d32:	2b18      	cmp	r3, #24
 8008d34:	d008      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d3a:	2b16      	cmp	r3, #22
 8008d3c:	d004      	beq.n	8008d48 <AT_ESP8266_ND+0x2c30>
 8008d3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d42:	2b19      	cmp	r3, #25
 8008d44:	f040 8092 	bne.w	8008e6c <AT_ESP8266_ND+0x2d54>
									a->_debug_count5++;
 8008d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 8008d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008d82:	429a      	cmp	r2, r3
 8008d84:	dd25      	ble.n	8008dd2 <AT_ESP8266_ND+0x2cba>
										a->_debug_count8++;
 8008d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8008dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	dd07      	ble.n	8008df4 <AT_ESP8266_ND+0x2cdc>
 8008de4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008de8:	2b14      	cmp	r3, #20
 8008dea:	d003      	beq.n	8008df4 <AT_ESP8266_ND+0x2cdc>
 8008dec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008df0:	2b0c      	cmp	r3, #12
 8008df2:	d108      	bne.n	8008e06 <AT_ESP8266_ND+0x2cee>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8008e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8008e26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8008e36:	e019      	b.n	8008e6c <AT_ESP8266_ND+0x2d54>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8008e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8008e4a:	e010      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e4c:	bf00      	nop
 8008e4e:	e00e      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e50:	bf00      	nop
 8008e52:	e00c      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e54:	bf00      	nop
 8008e56:	e00a      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e58:	bf00      	nop
 8008e5a:	e008      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e5c:	bf00      	nop
 8008e5e:	e006      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e60:	bf00      	nop
 8008e62:	e004      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e64:	bf00      	nop
 8008e66:	e002      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e68:	bf00      	nop
 8008e6a:	e000      	b.n	8008e6e <AT_ESP8266_ND+0x2d56>
			break;
 8008e6c:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8008e6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 8008e7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 8008e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea6:	bf00      	nop

08008ea8 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

// ACÁ ENTRO SIEMPRE ENTRO NO DEPENDO DE RECIBIR LOS DATOS
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eba:	f240 328d 	movw	r2, #909	; 0x38d
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	f001 83bc 	beq.w	800a63c <WiFi_Conn_ND+0x1794>
 8008ec4:	f240 328d 	movw	r2, #909	; 0x38d
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	f301 8451 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008ece:	f240 3289 	movw	r2, #905	; 0x389
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	f001 8329 	beq.w	800a52a <WiFi_Conn_ND+0x1682>
 8008ed8:	f240 3289 	movw	r2, #905	; 0x389
 8008edc:	4293      	cmp	r3, r2
 8008ede:	f301 8447 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008ee2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008ee6:	f001 8218 	beq.w	800a31a <WiFi_Conn_ND+0x1472>
 8008eea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008eee:	f301 843f 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008ef2:	f240 3229 	movw	r2, #809	; 0x329
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	f301 843a 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008efc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008f00:	f280 80a4 	bge.w	800904c <WiFi_Conn_ND+0x1a4>
 8008f04:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	f000 874c 	beq.w	8009da6 <WiFi_Conn_ND+0xefe>
 8008f0e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008f12:	4293      	cmp	r3, r2
 8008f14:	f301 842c 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f18:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	f000 86c3 	beq.w	8009ca8 <WiFi_Conn_ND+0xe00>
 8008f22:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008f26:	4293      	cmp	r3, r2
 8008f28:	f301 8422 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f2c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008f30:	f000 8602 	beq.w	8009b38 <WiFi_Conn_ND+0xc90>
 8008f34:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008f38:	f301 841a 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f3c:	f240 2261 	movw	r2, #609	; 0x261
 8008f40:	4293      	cmp	r3, r2
 8008f42:	f000 8588 	beq.w	8009a56 <WiFi_Conn_ND+0xbae>
 8008f46:	f240 2261 	movw	r2, #609	; 0x261
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f301 8410 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f50:	f240 225d 	movw	r2, #605	; 0x25d
 8008f54:	4293      	cmp	r3, r2
 8008f56:	f000 851d 	beq.w	8009994 <WiFi_Conn_ND+0xaec>
 8008f5a:	f240 225d 	movw	r2, #605	; 0x25d
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f301 8406 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f64:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008f68:	f000 84b9 	beq.w	80098de <WiFi_Conn_ND+0xa36>
 8008f6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008f70:	f301 83fe 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f74:	f240 12fd 	movw	r2, #509	; 0x1fd
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	f000 844f 	beq.w	800981c <WiFi_Conn_ND+0x974>
 8008f7e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008f82:	f281 83f5 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f86:	f240 12f9 	movw	r2, #505	; 0x1f9
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	f000 8405 	beq.w	800979a <WiFi_Conn_ND+0x8f2>
 8008f90:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8008f94:	f281 83ec 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008f98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008f9c:	f000 8390 	beq.w	80096c0 <WiFi_Conn_ND+0x818>
 8008fa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008fa4:	f301 83e4 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008fa8:	f240 1299 	movw	r2, #409	; 0x199
 8008fac:	4293      	cmp	r3, r2
 8008fae:	f000 8331 	beq.w	8009614 <WiFi_Conn_ND+0x76c>
 8008fb2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008fb6:	f281 83db 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008fba:	f240 1295 	movw	r2, #405	; 0x195
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f000 82ec 	beq.w	800959c <WiFi_Conn_ND+0x6f4>
 8008fc4:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8008fc8:	f281 83d2 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008fcc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008fd0:	f000 8263 	beq.w	800949a <WiFi_Conn_ND+0x5f2>
 8008fd4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008fd8:	f301 83ca 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008fdc:	f240 1235 	movw	r2, #309	; 0x135
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	f000 8234 	beq.w	800944e <WiFi_Conn_ND+0x5a6>
 8008fe6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008fea:	f281 83c1 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8008fee:	f240 1231 	movw	r2, #305	; 0x131
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 8226 	beq.w	8009444 <WiFi_Conn_ND+0x59c>
 8008ff8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008ffc:	f281 83b8 	bge.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009000:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009004:	f000 81ca 	beq.w	800939c <WiFi_Conn_ND+0x4f4>
 8009008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800900c:	f301 83b0 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009010:	2bd1      	cmp	r3, #209	; 0xd1
 8009012:	f000 8163 	beq.w	80092dc <WiFi_Conn_ND+0x434>
 8009016:	2bd1      	cmp	r3, #209	; 0xd1
 8009018:	f301 83aa 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 800901c:	2bcd      	cmp	r3, #205	; 0xcd
 800901e:	f000 8123 	beq.w	8009268 <WiFi_Conn_ND+0x3c0>
 8009022:	2bcd      	cmp	r3, #205	; 0xcd
 8009024:	f301 83a4 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009028:	2bc8      	cmp	r3, #200	; 0xc8
 800902a:	f000 80c6 	beq.w	80091ba <WiFi_Conn_ND+0x312>
 800902e:	2bc8      	cmp	r3, #200	; 0xc8
 8009030:	f301 839e 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009034:	2b6d      	cmp	r3, #109	; 0x6d
 8009036:	f000 8088 	beq.w	800914a <WiFi_Conn_ND+0x2a2>
 800903a:	2b6d      	cmp	r3, #109	; 0x6d
 800903c:	f301 8398 	bgt.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009040:	2b64      	cmp	r3, #100	; 0x64
 8009042:	d01f      	beq.n	8009084 <WiFi_Conn_ND+0x1dc>
 8009044:	2b69      	cmp	r3, #105	; 0x69
 8009046:	d06b      	beq.n	8009120 <WiFi_Conn_ND+0x278>
 8009048:	f001 bb92 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
 800904c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009050:	2b09      	cmp	r3, #9
 8009052:	f201 838d 	bhi.w	800a770 <WiFi_Conn_ND+0x18c8>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <WiFi_Conn_ND+0x1b4>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009ebd 	.word	0x08009ebd
 8009060:	0800a771 	.word	0x0800a771
 8009064:	0800a771 	.word	0x0800a771
 8009068:	0800a771 	.word	0x0800a771
 800906c:	0800a771 	.word	0x0800a771
 8009070:	08009f8b 	.word	0x08009f8b
 8009074:	0800a035 	.word	0x0800a035
 8009078:	0800a0df 	.word	0x0800a0df
 800907c:	0800a189 	.word	0x0800a189
 8009080:	0800a233 	.word	0x0800a233
				//la manda por puerto serie, hasta que no se reciba info, b->_estado_conexion seguirá con el valor CAMBIAR MODO EN CURSO ya que//
				//al no recibirse info, no se procesa el AT_ESP8266_ND y no se le asigna valores leidos a b->_estado que no es mas que lo que //
				//se está recbibiendo por puerto serie. Los valores leídos de b->_estado son leidos por WiFi_COnn_ND donde se asiga _estado_conexion																				  //
				//Una vez recibido datos por puerto serie, se toma la decisión de realizar el cambio de estado								  //
				//----------------------------------------------------------------------------------------------------------------------------//
				if((b->_estado!=CAMBIAR_MODO_EN_CURSO)&&(b->_estado!=at_cambiar_modo1_ok)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	2b64      	cmp	r3, #100	; 0x64
 800908c:	d033      	beq.n	80090f6 <WiFi_Conn_ND+0x24e>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009094:	2b02      	cmp	r3, #2
 8009096:	d02e      	beq.n	80090f6 <WiFi_Conn_ND+0x24e>
													  &&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800909e:	2b16      	cmp	r3, #22
 80090a0:	d029      	beq.n	80090f6 <WiFi_Conn_ND+0x24e>
				{
						Cambiar_CWMODE(b);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7fc ff72 	bl	8005f8c <Cambiar_CWMODE>
						//if(b->_enviaruart==1)
							//{
						b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar, aquí estado ya es CAMBIAR MODO EN CURSO, siguiente ingreso no vengo por aquí.
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7fd f835 	bl	8006118 <AT_ESP8266_ND>
 80090ae:	4602      	mov	r2, r0
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_enviaruart=0;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d109      	bne.n	80090dc <WiFi_Conn_ND+0x234>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7f8 f844 	bl	8001164 <ITM0_Write>
						HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	2364      	movs	r3, #100	; 0x64
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f7fb fed1 	bl	8004e94 <HAL_UART_Transmit>
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo

					//----Condiciones de cambio de estado
				}
			}
			break;
 80090f2:	f001 bb0e 	b.w	800a712 <WiFi_Conn_ND+0x186a>
					if((b->_estado==at_cambiar_modo1_ok)) b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d103      	bne.n	8009108 <WiFi_Conn_ND+0x260>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	226d      	movs	r2, #109	; 0x6d
 8009104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910e:	2b03      	cmp	r3, #3
 8009110:	f041 82ff 	bne.w	800a712 <WiFi_Conn_ND+0x186a>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2269      	movs	r2, #105	; 0x69
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800911c:	f001 baf9 	b.w	800a712 <WiFi_Conn_ND+0x186a>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7fc ff33 	bl	8005f8c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2264      	movs	r2, #100	; 0x64
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009146:	f001 bb13 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00c      	beq.n	800916e <WiFi_Conn_ND+0x2c6>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7fc ff45 	bl	8005fe4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800916c:	e00e      	b.n	800918c <WiFi_Conn_ND+0x2e4>

				}//
				else//
				{//
					ConectarWIFI(b);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7fc ff22 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	22c8      	movs	r2, #200	; 0xc8
 8009178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009192:	2b04      	cmp	r3, #4
 8009194:	f041 82bf 	bne.w	800a716 <WiFi_Conn_ND+0x186e>
					{
						Cambiar_CWMODE(b);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7fc fef7 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2264      	movs	r2, #100	; 0x64
 80091a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 80091b6:	f001 baae 	b.w	800a716 <WiFi_Conn_ND+0x186e>
													&&(b->_estado!=at_wifi_pass_err)
													&&(b->_estado!=at_wifi_name_err)
													&&(b->_estado!=at_wifi_disconnect)
													&&(b->_estado!=at_wifi_connected)
													&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.*/
				if((b->_estado!=CONEXION_EN_CURSO)&&((b->_estado > at_wifi_connected)||(b->_estado==0)))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c0:	2bc8      	cmp	r3, #200	; 0xc8
 80091c2:	d036      	beq.n	8009232 <WiFi_Conn_ND+0x38a>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ca:	2b0d      	cmp	r3, #13
 80091cc:	dc04      	bgt.n	80091d8 <WiFi_Conn_ND+0x330>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d12c      	bne.n	8009232 <WiFi_Conn_ND+0x38a>
				{
						ConectarWIFI(b);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7fc feed 	bl	8005fb8 <ConectarWIFI>
						if(b->_enviaruart==1)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d124      	bne.n	8009232 <WiFi_Conn_ND+0x38a>
							{
								b->_estado=AT_ESP8266_ND(b);
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7fc ff95 	bl	8006118 <AT_ESP8266_ND>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d109      	bne.n	800921c <WiFi_Conn_ND+0x374>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7f7 ffa4 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009228:	b29a      	uxth	r2, r3
 800922a:	2364      	movs	r3, #100	; 0x64
 800922c:	68b8      	ldr	r0, [r7, #8]
 800922e:	f7fb fe31 	bl	8004e94 <HAL_UART_Transmit>
				}

				//----Condiciones de cambio de estado
				//OJO, luego de esto el módulo arroja un OK, si se envía algo antes del OK aparece un busy p....
				//la conexión OK se podría definir con el OK el tema es que tarda en aparecer y se puede tambien confundir con otros.
				if((b->_estado==at_wifi_gotip))//||(b->_estado==at_wifi_connected))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009238:	2b06      	cmp	r3, #6
 800923a:	d103      	bne.n	8009244 <WiFi_Conn_ND+0x39c>
					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	22d1      	movs	r2, #209	; 0xd1
 8009240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 ||(b->_estado==at_wifi_tout_err)
										 ||(b->_estado==at_wifi_pass_err)
										 ||(b->_estado==at_wifi_name_err)
										 ||(b->_estado==at_wifi_conn_err)
										 ||(b->_estado==at_wifi_disconnect))*/ 
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))//240509
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924a:	2b06      	cmp	r3, #6
 800924c:	f341 8265 	ble.w	800a71a <WiFi_Conn_ND+0x1872>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009256:	2b0b      	cmp	r3, #11
 8009258:	f301 825f 	bgt.w	800a71a <WiFi_Conn_ND+0x1872>
				//if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
										 {
											b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	22cd      	movs	r2, #205	; 0xcd
 8009260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 }
				//----Condiciones de cambio de estado
			}
			break;
 8009264:	f001 ba59 	b.w	800a71a <WiFi_Conn_ND+0x1872>
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				//240509 Con esta modificación, por cada error se demora 2 segundos
				if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926e:	2b06      	cmp	r3, #6
 8009270:	dd1d      	ble.n	80092ae <WiFi_Conn_ND+0x406>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009278:	2b0b      	cmp	r3, #11
 800927a:	dc18      	bgt.n	80092ae <WiFi_Conn_ND+0x406>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8009282:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009286:	dd12      	ble.n	80092ae <WiFi_Conn_ND+0x406>
				{
					ConectarWIFI(b);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7fc fe95 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	22c8      	movs	r2, #200	; 0xc8
 8009292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}

				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	f041 8232 	bne.w	800a71e <WiFi_Conn_ND+0x1876>
					{
						Cambiar_CWMODE(b);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7fc fe66 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2264      	movs	r2, #100	; 0x64
 80092c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 80092d8:	f001 ba21 	b.w	800a71e <WiFi_Conn_ND+0x1876>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d108      	bne.n	8009300 <WiFi_Conn_ND+0x458>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f240 3229 	movw	r2, #809	; 0x329
 80092f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				//if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))  // Si se genera cualquier error de conexión, vuevlo a conectar	
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009306:	2b06      	cmp	r3, #6
 8009308:	dd0f      	ble.n	800932a <WiFi_Conn_ND+0x482>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	2b0b      	cmp	r3, #11
 8009312:	dc0a      	bgt.n	800932a <WiFi_Conn_ND+0x482>
				{
					ConectarWIFI(b);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7fc fe4f 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	22c8      	movs	r2, #200	; 0xc8
 800931e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				if(b->_estado==at_ready)					  //Reinicio involuntario de módulo
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009330:	2b01      	cmp	r3, #1
 8009332:	d10e      	bne.n	8009352 <WiFi_Conn_ND+0x4aa>
					{
						Cambiar_CWMODE(b);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7fc fe29 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2264      	movs	r2, #100	; 0x64
 800933e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009358:	2b00      	cmp	r3, #0
 800935a:	d011      	beq.n	8009380 <WiFi_Conn_ND+0x4d8>
				{//
					CrearServidorTCP(b);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7fc fe99 	bl	8006094 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800937c:	f001 b9f8 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7fc fe2f 	bl	8005fe4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800938c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009398:	f001 b9ea 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=DESCONEXION_EN_CURSO)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80093a6:	d03b      	beq.n	8009420 <WiFi_Conn_ND+0x578>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d036      	beq.n	8009420 <WiFi_Conn_ND+0x578>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b8:	2b0c      	cmp	r3, #12
 80093ba:	d031      	beq.n	8009420 <WiFi_Conn_ND+0x578>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c2:	2b0d      	cmp	r3, #13
 80093c4:	d02c      	beq.n	8009420 <WiFi_Conn_ND+0x578>
				{
						DesconectarWIFI(b);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7fc fe38 	bl	800603c <DesconectarWIFI>
						if(b->_enviaruart==1)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d124      	bne.n	8009420 <WiFi_Conn_ND+0x578>
							{
								b->_estado=AT_ESP8266_ND(b);
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7fc fe9e 	bl	8006118 <AT_ESP8266_ND>
 80093dc:	4602      	mov	r2, r0
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d109      	bne.n	800940a <WiFi_Conn_ND+0x562>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7f7 fead 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009416:	b29a      	uxth	r2, r3
 8009418:	2364      	movs	r3, #100	; 0x64
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f7fb fd3a 	bl	8004e94 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009426:	2b0c      	cmp	r3, #12
 8009428:	d005      	beq.n	8009436 <WiFi_Conn_ND+0x58e>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	2b0d      	cmp	r3, #13
 8009432:	f041 8176 	bne.w	800a722 <WiFi_Conn_ND+0x187a>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f240 1235 	movw	r2, #309	; 0x135
 800943c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009440:	f001 b96f 	b.w	800a722 <WiFi_Conn_ND+0x187a>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7fc fd8b 	bl	8005f60 <NOP>
			}
			break;
 800944a:	f001 b991 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7fc fdae 	bl	8005fb8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	22c8      	movs	r2, #200	; 0xc8
 8009460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009472:	2b04      	cmp	r3, #4
 8009474:	f041 8157 	bne.w	800a726 <WiFi_Conn_ND+0x187e>
					{
						Cambiar_CWMODE(b);
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7fc fd87 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2264      	movs	r2, #100	; 0x64
 8009482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009496:	f001 b946 	b.w	800a726 <WiFi_Conn_ND+0x187e>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=MUX_CONN_EN_CURSO)&&(b->_estado!=at_restart)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80094a4:	d04f      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d04a      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_ok)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d045      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_error)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d040      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_ok)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ca:	2b07      	cmp	r3, #7
 80094cc:	d03b      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d036      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_err)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094de:	2b1e      	cmp	r3, #30
 80094e0:	d031      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	d02c      	beq.n	8009546 <WiFi_Conn_ND+0x69e>
				{
						MUX(b);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7fc fd79 	bl	8005fe4 <MUX>
						if(b->_enviaruart==1)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d124      	bne.n	8009546 <WiFi_Conn_ND+0x69e>
							{
								b->_estado=AT_ESP8266_ND(b);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7fc fe0b 	bl	8006118 <AT_ESP8266_ND>
 8009502:	4602      	mov	r2, r0
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d109      	bne.n	8009530 <WiFi_Conn_ND+0x688>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7f7 fe1a 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800953c:	b29a      	uxth	r2, r3
 800953e:	2364      	movs	r3, #100	; 0x64
 8009540:	68b8      	ldr	r0, [r7, #8]
 8009542:	f7fb fca7 	bl	8004e94 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	2b01      	cmp	r3, #1
 800954e:	d009      	beq.n	8009564 <WiFi_Conn_ND+0x6bc>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009556:	2b07      	cmp	r3, #7
 8009558:	d004      	beq.n	8009564 <WiFi_Conn_ND+0x6bc>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009560:	2b04      	cmp	r3, #4
 8009562:	d104      	bne.n	800956e <WiFi_Conn_ND+0x6c6>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f240 1299 	movw	r2, #409	; 0x199
 800956a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009574:	2b02      	cmp	r3, #2
 8009576:	d00a      	beq.n	800958e <WiFi_Conn_ND+0x6e6>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957e:	2b1e      	cmp	r3, #30
 8009580:	d005      	beq.n	800958e <WiFi_Conn_ND+0x6e6>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009588:	2b05      	cmp	r3, #5
 800958a:	f041 80ce 	bne.w	800a72a <WiFi_Conn_ND+0x1882>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f240 1295 	movw	r2, #405	; 0x195
 8009594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009598:	f001 b8c7 	b.w	800a72a <WiFi_Conn_ND+0x1882>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7fc fcdf 	bl	8005f60 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d112      	bne.n	80095d2 <WiFi_Conn_ND+0x72a>
				{
					Cambiar_CWMODE(b);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7fc fced 	bl	8005f8c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2264      	movs	r2, #100	; 0x64
 80095b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d8:	2b0c      	cmp	r3, #12
 80095da:	d00a      	beq.n	80095f2 <WiFi_Conn_ND+0x74a>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e2:	2b0d      	cmp	r3, #13
 80095e4:	d005      	beq.n	80095f2 <WiFi_Conn_ND+0x74a>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	f041 809e 	bne.w	800a72e <WiFi_Conn_ND+0x1886>
				{
					ConectarWIFI(b);
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7fc fce0 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	22c8      	movs	r2, #200	; 0xc8
 80095fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009610:	f001 b88d 	b.w	800a72e <WiFi_Conn_ND+0x1886>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7fc fca3 	bl	8005f60 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009628:	2b04      	cmp	r3, #4
 800962a:	d10e      	bne.n	800964a <WiFi_Conn_ND+0x7a2>
					{
						Cambiar_CWMODE(b);
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7fc fcad 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2264      	movs	r2, #100	; 0x64
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009650:	2b0c      	cmp	r3, #12
 8009652:	d009      	beq.n	8009668 <WiFi_Conn_ND+0x7c0>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965a:	2b0d      	cmp	r3, #13
 800965c:	d004      	beq.n	8009668 <WiFi_Conn_ND+0x7c0>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009664:	2b03      	cmp	r3, #3
 8009666:	d10a      	bne.n	800967e <WiFi_Conn_ND+0x7d6>
					{
						ConectarWIFI(b);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7fc fca5 	bl	8005fb8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	22c8      	movs	r2, #200	; 0xc8
 8009672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10d      	bne.n	80096a4 <WiFi_Conn_ND+0x7fc>
					{
						IPDef(b);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7fc fcc1 	bl	8006010 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 80096a0:	f001 b866 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
						IPDef(b);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7fc fcb3 	bl	8006010 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f240 12fd 	movw	r2, #509	; 0x1fd
 80096b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 80096bc:	f001 b858 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=DEF_IP_EN_CURSO)&&(b->_estado!=at_restart)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80096ca:	d045      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d040      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_ok)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d03b      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_error)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d036      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_ok)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f0:	2b1b      	cmp	r3, #27
 80096f2:	d031      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fa:	2b21      	cmp	r3, #33	; 0x21
 80096fc:	d02c      	beq.n	8009758 <WiFi_Conn_ND+0x8b0>
				{
						IPDef(b);
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7fc fc86 	bl	8006010 <IPDef>
						if(b->_enviaruart==1)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800970a:	2b01      	cmp	r3, #1
 800970c:	d124      	bne.n	8009758 <WiFi_Conn_ND+0x8b0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7fc fd02 	bl	8006118 <AT_ESP8266_ND>
 8009714:	4602      	mov	r2, r0
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d109      	bne.n	8009742 <WiFi_Conn_ND+0x89a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f7f7 fd11 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800974e:	b29a      	uxth	r2, r3
 8009750:	2364      	movs	r3, #100	; 0x64
 8009752:	68b8      	ldr	r0, [r7, #8]
 8009754:	f7fb fb9e 	bl	8004e94 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	2b01      	cmp	r3, #1
 8009760:	d004      	beq.n	800976c <WiFi_Conn_ND+0x8c4>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009768:	2b1b      	cmp	r3, #27
 800976a:	d104      	bne.n	8009776 <WiFi_Conn_ND+0x8ce>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977c:	2b02      	cmp	r3, #2
 800977e:	d005      	beq.n	800978c <WiFi_Conn_ND+0x8e4>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009786:	2b21      	cmp	r3, #33	; 0x21
 8009788:	f040 87d3 	bne.w	800a732 <WiFi_Conn_ND+0x188a>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009796:	f000 bfcc 	b.w	800a732 <WiFi_Conn_ND+0x188a>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7fc fbe0 	bl	8005f60 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d004      	beq.n	80097b4 <WiFi_Conn_ND+0x90c>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d112      	bne.n	80097da <WiFi_Conn_ND+0x932>
				{
					Cambiar_CWMODE(b);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7fc fbe9 	bl	8005f8c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2264      	movs	r2, #100	; 0x64
 80097be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e0:	2b0c      	cmp	r3, #12
 80097e2:	d00a      	beq.n	80097fa <WiFi_Conn_ND+0x952>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ea:	2b0d      	cmp	r3, #13
 80097ec:	d005      	beq.n	80097fa <WiFi_Conn_ND+0x952>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	f040 879e 	bne.w	800a736 <WiFi_Conn_ND+0x188e>
				{
					ConectarWIFI(b);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7fc fbdc 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	22c8      	movs	r2, #200	; 0xc8
 8009804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009818:	f000 bf8d 	b.w	800a736 <WiFi_Conn_ND+0x188e>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7fc fb9f 	bl	8005f60 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009828:	2b04      	cmp	r3, #4
 800982a:	d112      	bne.n	8009852 <WiFi_Conn_ND+0x9aa>
					{
						Cambiar_CWMODE(b);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7fc fbad 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2264      	movs	r2, #100	; 0x64
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009858:	2b0c      	cmp	r3, #12
 800985a:	d009      	beq.n	8009870 <WiFi_Conn_ND+0x9c8>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009862:	2b0d      	cmp	r3, #13
 8009864:	d004      	beq.n	8009870 <WiFi_Conn_ND+0x9c8>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986c:	2b03      	cmp	r3, #3
 800986e:	d10e      	bne.n	800988e <WiFi_Conn_ND+0x9e6>
					{
						ConectarWIFI(b);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7fc fba1 	bl	8005fb8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	22c8      	movs	r2, #200	; 0xc8
 800987a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009894:	2b00      	cmp	r3, #0
 8009896:	d111      	bne.n	80098bc <WiFi_Conn_ND+0xa14>
					{
						ConectarTCP(b);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f7fc fbe5 	bl	8006068 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80098a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 80098b8:	f000 bf5a 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
						ConectarWIFI(b);//
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7fc fb7b 	bl	8005fb8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	22c8      	movs	r2, #200	; 0xc8
 80098c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 80098da:	f000 bf49 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
									&&(b->_estado!=at_ready)
									&&(b->_estado!=at_wifi_disconnect)
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
									&&(b->_estado!=at_tcp_conectado)
									&&(b->_estado!=at_tcp_client_desc))*/	//Si estoy conectando, no vuelvo a conectar.
				if((b->_estado!=TCP_CONN_EN_CURSO)&&((b->_estado > at_tcp_close_err)||(b->_estado==0))) //||(b->_estado==0)))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80098e8:	d036      	beq.n	8009958 <WiFi_Conn_ND+0xab0>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	2b13      	cmp	r3, #19
 80098f2:	dc04      	bgt.n	80098fe <WiFi_Conn_ND+0xa56>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d12c      	bne.n	8009958 <WiFi_Conn_ND+0xab0>
				{
					ConectarTCP(b);
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7fc fbb2 	bl	8006068 <ConectarTCP>
						if(b->_enviaruart==1)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800990a:	2b01      	cmp	r3, #1
 800990c:	d124      	bne.n	8009958 <WiFi_Conn_ND+0xab0>
							{
								b->_estado=AT_ESP8266_ND(b);  //a partir de ahora b->_estado vale TCP_CONN_EN_CURSO
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7fc fc02 	bl	8006118 <AT_ESP8266_ND>
 8009914:	4602      	mov	r2, r0
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d109      	bne.n	8009942 <WiFi_Conn_ND+0xa9a>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7f7 fc11 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800994e:	b29a      	uxth	r2, r3
 8009950:	2364      	movs	r3, #100	; 0x64
 8009952:	68b8      	ldr	r0, [r7, #8]
 8009954:	f7fb fa9e 	bl	8004e94 <HAL_UART_Transmit>
							}
				}
				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado)) 	
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	2b10      	cmp	r3, #16
 8009960:	d004      	beq.n	800996c <WiFi_Conn_ND+0xac4>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009968:	2b0e      	cmp	r3, #14
 800996a:	d106      	bne.n	800997a <WiFi_Conn_ND+0xad2>
					{
						b->_estado_conexion=TCP_CONN_OK;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f240 2261 	movw	r2, #609	; 0x261
 8009972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

				//if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))  				b->_estado_conexion=TCP_CONN_ERROR;
				//----Condiciones de cambio de estado
			}
			break;
 8009976:	f000 bee0 	b.w	800a73a <WiFi_Conn_ND+0x1892>
						if(b->_estado<= at_tcp_client_desc)  b->_estado_conexion=TCP_CONN_ERROR;	
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009980:	2b14      	cmp	r3, #20
 8009982:	f300 86da 	bgt.w	800a73a <WiFi_Conn_ND+0x1892>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f240 225d 	movw	r2, #605	; 0x25d
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8009990:	f000 bed3 	b.w	800a73a <WiFi_Conn_ND+0x1892>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7fc fae3 	bl	8005f60 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d112      	bne.n	80099ca <WiFi_Conn_ND+0xb22>
				{
					Cambiar_CWMODE(b);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f7fc faf1 	bl	8005f8c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2264      	movs	r2, #100	; 0x64
 80099ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d0:	2b0c      	cmp	r3, #12
 80099d2:	d009      	beq.n	80099e8 <WiFi_Conn_ND+0xb40>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d004      	beq.n	80099e8 <WiFi_Conn_ND+0xb40>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e4:	2b11      	cmp	r3, #17
 80099e6:	d10e      	bne.n	8009a06 <WiFi_Conn_ND+0xb5e>
				{
					ConectarWIFI(b);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fc fae5 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	22c8      	movs	r2, #200	; 0xc8
 80099f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if(((b->_estado==at_tcp_client_desc)||(b->_estado==at_tcp_conn_err))&&(b->_ticks2 > 2000)) //Si se cierra la conexión vuelvo a conectar
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0c:	2b14      	cmp	r3, #20
 8009a0e:	d005      	beq.n	8009a1c <WiFi_Conn_ND+0xb74>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	f040 8691 	bne.w	800a73e <WiFi_Conn_ND+0x1896>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8009a22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a26:	f340 868a 	ble.w	800a73e <WiFi_Conn_ND+0x1896>
				{
					ConectarTCP(b);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7fc fb1c 	bl	8006068 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}
			}
			break;
 8009a52:	f000 be74 	b.w	800a73e <WiFi_Conn_ND+0x1896>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7fc fa82 	bl	8005f60 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d112      	bne.n	8009a8c <WiFi_Conn_ND+0xbe4>
					{
						Cambiar_CWMODE(b);
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fc fa90 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2264      	movs	r2, #100	; 0x64
 8009a70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	2b0c      	cmp	r3, #12
 8009a94:	d009      	beq.n	8009aaa <WiFi_Conn_ND+0xc02>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d004      	beq.n	8009aaa <WiFi_Conn_ND+0xc02>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa6:	2b11      	cmp	r3, #17
 8009aa8:	d10e      	bne.n	8009ac8 <WiFi_Conn_ND+0xc20>
					{
						ConectarWIFI(b);
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7fc fa84 	bl	8005fb8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	22c8      	movs	r2, #200	; 0xc8
 8009ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

					if((b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	2b14      	cmp	r3, #20
 8009ad0:	d10f      	bne.n	8009af2 <WiFi_Conn_ND+0xc4a>
					{
						ConectarTCP(b);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7fc fac8 	bl	8006068 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d005      	beq.n	8009b08 <WiFi_Conn_ND+0xc60>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b02:	2b0e      	cmp	r3, #14
 8009b04:	f040 861d 	bne.w	800a742 <WiFi_Conn_ND+0x189a>
					{
						if(b->_automatizacion >= WF_SEND )
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	f240 8617 	bls.w	800a742 <WiFi_Conn_ND+0x189a>
						{
							EnviarDatos(b);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7fc fae9 	bl	80060ec <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 8009b34:	f000 be05 	b.w	800a742 <WiFi_Conn_ND+0x189a>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=TCP_SND_EN_CURSO)&&(b->_estado!=at_error)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009b42:	d054      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d04f      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_wifi_disconnect)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b54:	2b0c      	cmp	r3, #12
 8009b56:	d04a      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_client_desc)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	2b14      	cmp	r3, #20
 8009b60:	d045      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_snd_err)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b68:	2b17      	cmp	r3, #23
 8009b6a:	d040      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_ok_to_send)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b72:	2b15      	cmp	r3, #21
 8009b74:	d03b      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7c:	2b18      	cmp	r3, #24
 8009b7e:	d036      	beq.n	8009bee <WiFi_Conn_ND+0xd46>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d907      	bls.n	8009b9a <WiFi_Conn_ND+0xcf2>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <WiFi_Conn_ND+0xcf2>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7fc faa9 	bl	80060ec <EnviarDatos>
					}
						if(b->_enviaruart==1)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d124      	bne.n	8009bee <WiFi_Conn_ND+0xd46>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7fc fab7 	bl	8006118 <AT_ESP8266_ND>
 8009baa:	4602      	mov	r2, r0
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d109      	bne.n	8009bd8 <WiFi_Conn_ND+0xd30>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7f7 fac6 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	2364      	movs	r3, #100	; 0x64
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f7fb f953 	bl	8004e94 <HAL_UART_Transmit>
				&&(b->_estado!=at_tcp_client_desc)
				&&(b->_estado!=at_fail)		//240419
				&&(b->_estado!=at_tcp_snd_err)
				&&(b->_estado!=at_tcp_enviado_error))*/
				//if((b->_estado==TCP_SND_EN_CURSO)&&(b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
				if((b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d122      	bne.n	8009c3e <WiFi_Conn_ND+0xd96>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfe:	2b15      	cmp	r3, #21
 8009c00:	d11d      	bne.n	8009c3e <WiFi_Conn_ND+0xd96>

							{
								b->_enviaruart=0;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d109      	bne.n	8009c28 <WiFi_Conn_ND+0xd80>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f7f7 fa9e 	bl	8001164 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	2364      	movs	r3, #100	; 0x64
 8009c38:	68b8      	ldr	r0, [r7, #8]
 8009c3a:	f7fb f92b 	bl	8004e94 <HAL_UART_Transmit>
							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c44:	2b16      	cmp	r3, #22
 8009c46:	d104      	bne.n	8009c52 <WiFi_Conn_ND+0xdaa>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d01e      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	2b0c      	cmp	r3, #12
 8009c64:	d019      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_fail)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d014      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_noip_err)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c76:	2b11      	cmp	r3, #17
 8009c78:	d00f      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_client_desc)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c80:	2b14      	cmp	r3, #20
 8009c82:	d00a      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_snd_err)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8a:	2b17      	cmp	r3, #23
 8009c8c:	d005      	beq.n	8009c9a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_enviado_error))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c94:	2b18      	cmp	r3, #24
 8009c96:	f040 8556 	bne.w	800a746 <WiFi_Conn_ND+0x189e>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009ca4:	f000 bd4f 	b.w	800a746 <WiFi_Conn_ND+0x189e>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7fc f959 	bl	8005f60 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d112      	bne.n	8009cde <WiFi_Conn_ND+0xe36>
				{
					Cambiar_CWMODE(b);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7fc f967 	bl	8005f8c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2264      	movs	r2, #100	; 0x64
 8009cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce4:	2b0c      	cmp	r3, #12
 8009ce6:	d013      	beq.n	8009d10 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_deconectar_ok )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cee:	2b0d      	cmp	r3, #13
 8009cf0:	d00e      	beq.n	8009d10 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_fail)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d009      	beq.n	8009d10 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_error)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d104      	bne.n	8009d10 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	2b11      	cmp	r3, #17
 8009d0e:	d00e      	beq.n	8009d2e <WiFi_Conn_ND+0xe86>
				{
					ConectarWIFI(b);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7fc f951 	bl	8005fb8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	22c8      	movs	r2, #200	; 0xc8
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d34:	2b06      	cmp	r3, #6
 8009d36:	d10f      	bne.n	8009d58 <WiFi_Conn_ND+0xeb0>
				{
					ConectarTCP(b);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7fc f995 	bl	8006068 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d00f      	beq.n	8009d82 <WiFi_Conn_ND+0xeda>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d68:	2b14      	cmp	r3, #20
 8009d6a:	d00a      	beq.n	8009d82 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_snd_err)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d72:	2b17      	cmp	r3, #23
 8009d74:	d005      	beq.n	8009d82 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	2b18      	cmp	r3, #24
 8009d7e:	f040 84e4 	bne.w	800a74a <WiFi_Conn_ND+0x18a2>
				{
					ConectarTCP(b);
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7fc f970 	bl	8006068 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009da2:	f000 bcd2 	b.w	800a74a <WiFi_Conn_ND+0x18a2>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7fc f8da 	bl	8005f60 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d112      	bne.n	8009ddc <WiFi_Conn_ND+0xf34>
					{
						Cambiar_CWMODE(b);
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7fc f8e8 	bl	8005f8c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2264      	movs	r2, #100	; 0x64
 8009dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de2:	2b0c      	cmp	r3, #12
 8009de4:	d009      	beq.n	8009dfa <WiFi_Conn_ND+0xf52>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	2b0d      	cmp	r3, #13
 8009dee:	d004      	beq.n	8009dfa <WiFi_Conn_ND+0xf52>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d10e      	bne.n	8009e18 <WiFi_Conn_ND+0xf70>
					{
						ConectarWIFI(b);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7fc f8dc 	bl	8005fb8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	22c8      	movs	r2, #200	; 0xc8
 8009e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d00e      	beq.n	8009e40 <WiFi_Conn_ND+0xf98>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	2b0d      	cmp	r3, #13
 8009e2a:	d009      	beq.n	8009e40 <WiFi_Conn_ND+0xf98>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	2b06      	cmp	r3, #6
 8009e34:	d004      	beq.n	8009e40 <WiFi_Conn_ND+0xf98>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3c:	2b14      	cmp	r3, #20
 8009e3e:	d10f      	bne.n	8009e60 <WiFi_Conn_ND+0xfb8>
					{
						ConectarTCP(b);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7fc f911 	bl	8006068 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 8009e60:	20c8      	movs	r0, #200	; 0xc8
 8009e62:	f7f8 fb63 	bl	800252c <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d916      	bls.n	8009e9e <WiFi_Conn_ND+0xff6>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <WiFi_Conn_ND+0xff6>
					{
							EnviarDatos(b);
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fc f936 	bl	80060ec <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 8009e9a:	f000 bc69 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
							b->_estado_conexion=TCP_CONN_OK;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f240 2261 	movw	r2, #609	; 0x261
 8009ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 8009eb8:	f000 bc5a 	b.w	800a770 <WiFi_Conn_ND+0x18c8>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=TCP_SRVR_EN_CURSO)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009ec6:	d045      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d040      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	2b0c      	cmp	r3, #12
 8009eda:	d03b      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee2:	2b15      	cmp	r3, #21
 8009ee4:	d036      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eec:	2b16      	cmp	r3, #22
 8009eee:	d031      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef6:	2b17      	cmp	r3, #23
 8009ef8:	d02c      	beq.n	8009f54 <WiFi_Conn_ND+0x10ac>
							{
								CrearServidorTCP(b);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7fc f8ca 	bl	8006094 <CrearServidorTCP>
									if(b->_enviaruart==1)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d124      	bne.n	8009f54 <WiFi_Conn_ND+0x10ac>
										{
											b->_estado=AT_ESP8266_ND(b);
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7fc f904 	bl	8006118 <AT_ESP8266_ND>
 8009f10:	4602      	mov	r2, r0
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d109      	bne.n	8009f3e <WiFi_Conn_ND+0x1096>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7f7 f913 	bl	8001164 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	2364      	movs	r3, #100	; 0x64
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	f7fa ffa0 	bl	8004e94 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5a:	2b15      	cmp	r3, #21
 8009f5c:	d004      	beq.n	8009f68 <WiFi_Conn_ND+0x10c0>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	2b17      	cmp	r3, #23
 8009f66:	d104      	bne.n	8009f72 <WiFi_Conn_ND+0x10ca>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f240 3229 	movw	r2, #809	; 0x329
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f78:	2b16      	cmp	r3, #22
 8009f7a:	f040 83e8 	bne.w	800a74e <WiFi_Conn_ND+0x18a6>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f240 3225 	movw	r2, #805	; 0x325
 8009f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 8009f88:	e3e1      	b.n	800a74e <WiFi_Conn_ND+0x18a6>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7fb ffe8 	bl	8005f60 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d112      	bne.n	8009fc0 <WiFi_Conn_ND+0x1118>
							{
								Cambiar_CWMODE(b);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7fb fff6 	bl	8005f8c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2264      	movs	r2, #100	; 0x64
 8009fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc6:	2b0c      	cmp	r3, #12
 8009fc8:	d009      	beq.n	8009fde <WiFi_Conn_ND+0x1136>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd0:	2b0d      	cmp	r3, #13
 8009fd2:	d004      	beq.n	8009fde <WiFi_Conn_ND+0x1136>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d10e      	bne.n	8009ffc <WiFi_Conn_ND+0x1154>
							{
								ConectarWIFI(b);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fb ffea 	bl	8005fb8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	22c8      	movs	r2, #200	; 0xc8
 8009fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	2b02      	cmp	r3, #2
 800a004:	d005      	beq.n	800a012 <WiFi_Conn_ND+0x116a>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00c:	2b14      	cmp	r3, #20
 800a00e:	f040 83a0 	bne.w	800a752 <WiFi_Conn_ND+0x18aa>
							{
								ConectarTCP(b);
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7fc f828 	bl	8006068 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a032:	e38e      	b.n	800a752 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f7fb ff93 	bl	8005f60 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	2b04      	cmp	r3, #4
 800a042:	d112      	bne.n	800a06a <WiFi_Conn_ND+0x11c2>
							{
								Cambiar_CWMODE(b);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7fb ffa1 	bl	8005f8c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2264      	movs	r2, #100	; 0x64
 800a04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a070:	2b0c      	cmp	r3, #12
 800a072:	d009      	beq.n	800a088 <WiFi_Conn_ND+0x11e0>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07a:	2b0d      	cmp	r3, #13
 800a07c:	d004      	beq.n	800a088 <WiFi_Conn_ND+0x11e0>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a084:	2b03      	cmp	r3, #3
 800a086:	d10e      	bne.n	800a0a6 <WiFi_Conn_ND+0x11fe>
							{
								ConectarWIFI(b);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7fb ff95 	bl	8005fb8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	22c8      	movs	r2, #200	; 0xc8
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d005      	beq.n	800a0bc <WiFi_Conn_ND+0x1214>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	2b14      	cmp	r3, #20
 800a0b8:	f040 834d 	bne.w	800a756 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7fb ffd3 	bl	8006068 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a0dc:	e33b      	b.n	800a756 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7fb ff3e 	bl	8005f60 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d112      	bne.n	800a114 <WiFi_Conn_ND+0x126c>
							{
								Cambiar_CWMODE(b);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7fb ff4c 	bl	8005f8c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2264      	movs	r2, #100	; 0x64
 800a0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11a:	2b0c      	cmp	r3, #12
 800a11c:	d009      	beq.n	800a132 <WiFi_Conn_ND+0x128a>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a124:	2b0d      	cmp	r3, #13
 800a126:	d004      	beq.n	800a132 <WiFi_Conn_ND+0x128a>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d10e      	bne.n	800a150 <WiFi_Conn_ND+0x12a8>
							{
								ConectarWIFI(b);
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7fb ff40 	bl	8005fb8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	22c8      	movs	r2, #200	; 0xc8
 800a13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a156:	2b02      	cmp	r3, #2
 800a158:	d005      	beq.n	800a166 <WiFi_Conn_ND+0x12be>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a160:	2b14      	cmp	r3, #20
 800a162:	f040 82fa 	bne.w	800a75a <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7fb ff7e 	bl	8006068 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a186:	e2e8      	b.n	800a75a <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7fb fee9 	bl	8005f60 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a194:	2b04      	cmp	r3, #4
 800a196:	d112      	bne.n	800a1be <WiFi_Conn_ND+0x1316>
							{
								Cambiar_CWMODE(b);
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7fb fef7 	bl	8005f8c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2264      	movs	r2, #100	; 0x64
 800a1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	2b0c      	cmp	r3, #12
 800a1c6:	d009      	beq.n	800a1dc <WiFi_Conn_ND+0x1334>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ce:	2b0d      	cmp	r3, #13
 800a1d0:	d004      	beq.n	800a1dc <WiFi_Conn_ND+0x1334>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d10e      	bne.n	800a1fa <WiFi_Conn_ND+0x1352>
							{
								ConectarWIFI(b);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7fb feeb 	bl	8005fb8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22c8      	movs	r2, #200	; 0xc8
 800a1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a200:	2b02      	cmp	r3, #2
 800a202:	d005      	beq.n	800a210 <WiFi_Conn_ND+0x1368>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	2b14      	cmp	r3, #20
 800a20c:	f040 82a7 	bne.w	800a75e <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7fb ff29 	bl	8006068 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a230:	e295      	b.n	800a75e <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7fb fe94 	bl	8005f60 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	2b04      	cmp	r3, #4
 800a248:	d112      	bne.n	800a270 <WiFi_Conn_ND+0x13c8>
								{
									Cambiar_CWMODE(b);
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7fb fe9e 	bl	8005f8c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2264      	movs	r2, #100	; 0x64
 800a254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a276:	2b0c      	cmp	r3, #12
 800a278:	d009      	beq.n	800a28e <WiFi_Conn_ND+0x13e6>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a280:	2b0d      	cmp	r3, #13
 800a282:	d004      	beq.n	800a28e <WiFi_Conn_ND+0x13e6>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d10e      	bne.n	800a2ac <WiFi_Conn_ND+0x1404>
								{
									ConectarWIFI(b);
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7fb fe92 	bl	8005fb8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	22c8      	movs	r2, #200	; 0xc8
 800a298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d004      	beq.n	800a2c0 <WiFi_Conn_ND+0x1418>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2bc:	2b14      	cmp	r3, #20
 800a2be:	d10f      	bne.n	800a2e0 <WiFi_Conn_ND+0x1438>
								{
									ConectarTCP(b);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7fb fed1 	bl	8006068 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	f040 823b 	bne.w	800a762 <WiFi_Conn_ND+0x18ba>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8235 	beq.w	800a762 <WiFi_Conn_ND+0x18ba>
								{
									EnviarDatosSRVR(b);
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7fb fee1 	bl	80060c0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800a318:	e223      	b.n	800a762 <WiFi_Conn_ND+0x18ba>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a324:	d063      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d05e      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_disconnect)&&
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800a336:	2b0c      	cmp	r3, #12
 800a338:	d059      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_connected)&&
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800a340:	2b0d      	cmp	r3, #13
 800a342:	d054      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_gotip)&&
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800a34a:	2b06      	cmp	r3, #6
 800a34c:	d04f      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_client_desc)&&
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800a354:	2b14      	cmp	r3, #20
 800a356:	d04a      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_snd_err)&&
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_client_desc)&&
 800a35e:	2b17      	cmp	r3, #23
 800a360:	d045      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_error)&&
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800a368:	2b18      	cmp	r3, #24
 800a36a:	d040      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800a372:	2b16      	cmp	r3, #22
 800a374:	d03b      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a37c:	2b16      	cmp	r3, #22
 800a37e:	d036      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a386:	2b19      	cmp	r3, #25
 800a388:	d031      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d02c      	beq.n	800a3ee <WiFi_Conn_ND+0x1546>
								{
								EnviarDatosSRVR(b);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7fb fe93 	bl	80060c0 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d124      	bne.n	800a3ee <WiFi_Conn_ND+0x1546>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7fb feb7 	bl	8006118 <AT_ESP8266_ND>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d109      	bne.n	800a3d8 <WiFi_Conn_ND+0x1530>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7f6 fec6 	bl	8001164 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	2364      	movs	r3, #100	; 0x64
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f7fa fd53 	bl	8004e94 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a3f8:	d154      	bne.n	800a4a4 <WiFi_Conn_ND+0x15fc>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a400:	2b01      	cmp	r3, #1
 800a402:	d14f      	bne.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_error)&&
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d04a      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_disconnect)&&
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800a414:	2b0c      	cmp	r3, #12
 800a416:	d045      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_connected)&&
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800a41e:	2b0d      	cmp	r3, #13
 800a420:	d040      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_gotip)&&
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800a428:	2b06      	cmp	r3, #6
 800a42a:	d03b      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_client_desc)&&
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800a432:	2b14      	cmp	r3, #20
 800a434:	d036      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_snd_err)&&
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_client_desc)&&
 800a43c:	2b17      	cmp	r3, #23
 800a43e:	d031      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_error)&&
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800a446:	2b18      	cmp	r3, #24
 800a448:	d02c      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800a450:	2b16      	cmp	r3, #22
 800a452:	d027      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a45a:	2b16      	cmp	r3, #22
 800a45c:	d022      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	2b19      	cmp	r3, #25
 800a466:	d01d      	beq.n	800a4a4 <WiFi_Conn_ND+0x15fc>
										{
											b->_enviaruart=0;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a476:	2b01      	cmp	r3, #1
 800a478:	d109      	bne.n	800a48e <WiFi_Conn_ND+0x15e6>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a486:	4619      	mov	r1, r3
 800a488:	4610      	mov	r0, r2
 800a48a:	f7f6 fe6b 	bl	8001164 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	2364      	movs	r3, #100	; 0x64
 800a49e:	68b8      	ldr	r0, [r7, #8]
 800a4a0:	f7fa fcf8 	bl	8004e94 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	2b16      	cmp	r3, #22
 800a4ac:	d104      	bne.n	800a4b8 <WiFi_Conn_ND+0x1610>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f240 328d 	movw	r2, #909	; 0x38d
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d02d      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d028      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a4d2:	2b0c      	cmp	r3, #12
 800a4d4:	d023      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	2b0d      	cmp	r3, #13
 800a4de:	d01e      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a4e6:	2b06      	cmp	r3, #6
 800a4e8:	d019      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f0:	2b14      	cmp	r3, #20
 800a4f2:	d014      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800a4fa:	2b17      	cmp	r3, #23
 800a4fc:	d00f      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a504:	2b18      	cmp	r3, #24
 800a506:	d00a      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a50e:	2b16      	cmp	r3, #22
 800a510:	d005      	beq.n	800a51e <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b19      	cmp	r3, #25
 800a51a:	f040 8124 	bne.w	800a766 <WiFi_Conn_ND+0x18be>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f240 3289 	movw	r2, #905	; 0x389
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800a528:	e11d      	b.n	800a766 <WiFi_Conn_ND+0x18be>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7fb fd18 	bl	8005f60 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	2b04      	cmp	r3, #4
 800a538:	d009      	beq.n	800a54e <WiFi_Conn_ND+0x16a6>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a540:	2b0d      	cmp	r3, #13
 800a542:	d004      	beq.n	800a54e <WiFi_Conn_ND+0x16a6>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d112      	bne.n	800a574 <WiFi_Conn_ND+0x16cc>
							{
								Cambiar_CWMODE(b);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7fb fd1c 	bl	8005f8c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2264      	movs	r2, #100	; 0x64
 800a558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	2b0c      	cmp	r3, #12
 800a57c:	d009      	beq.n	800a592 <WiFi_Conn_ND+0x16ea>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	2b0d      	cmp	r3, #13
 800a586:	d004      	beq.n	800a592 <WiFi_Conn_ND+0x16ea>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d10e      	bne.n	800a5b0 <WiFi_Conn_ND+0x1708>
							{
								ConectarWIFI(b);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7fb fd10 	bl	8005fb8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	22c8      	movs	r2, #200	; 0xc8
 800a59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	2b16      	cmp	r3, #22
 800a5b8:	d10c      	bne.n	800a5d4 <WiFi_Conn_ND+0x172c>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f240 3225 	movw	r2, #805	; 0x325
 800a5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5da:	2b18      	cmp	r3, #24
 800a5dc:	d10c      	bne.n	800a5f8 <WiFi_Conn_ND+0x1750>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f240 3229 	movw	r2, #809	; 0x329
 800a5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fe:	2b19      	cmp	r3, #25
 800a600:	d008      	beq.n	800a614 <WiFi_Conn_ND+0x176c>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	2b17      	cmp	r3, #23
 800a60a:	d003      	beq.n	800a614 <WiFi_Conn_ND+0x176c>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2218      	movs	r2, #24
 800a610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	f040 80a5 	bne.w	800a76a <WiFi_Conn_ND+0x18c2>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800a63a:	e096      	b.n	800a76a <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7fb fc8f 	bl	8005f60 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d009      	beq.n	800a660 <WiFi_Conn_ND+0x17b8>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b0d      	cmp	r3, #13
 800a654:	d004      	beq.n	800a660 <WiFi_Conn_ND+0x17b8>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	2b06      	cmp	r3, #6
 800a65e:	d112      	bne.n	800a686 <WiFi_Conn_ND+0x17de>
								{
									Cambiar_CWMODE(b);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7fb fc93 	bl	8005f8c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2264      	movs	r2, #100	; 0x64
 800a66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68c:	2b0c      	cmp	r3, #12
 800a68e:	d009      	beq.n	800a6a4 <WiFi_Conn_ND+0x17fc>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a696:	2b0d      	cmp	r3, #13
 800a698:	d004      	beq.n	800a6a4 <WiFi_Conn_ND+0x17fc>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d10e      	bne.n	800a6c2 <WiFi_Conn_ND+0x181a>
								{
									ConectarWIFI(b);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7fb fc87 	bl	8005fb8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	22c8      	movs	r2, #200	; 0xc8
 800a6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d004      	beq.n	800a6d6 <WiFi_Conn_ND+0x182e>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d14b      	bne.n	800a76e <WiFi_Conn_ND+0x18c6>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d046      	beq.n	800a76e <WiFi_Conn_ND+0x18c6>
								{
									EnviarDatosSRVR(b);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7fb fced 	bl	80060c0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800a710:	e02d      	b.n	800a76e <WiFi_Conn_ND+0x18c6>
			break;
 800a712:	bf00      	nop
 800a714:	e02c      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a716:	bf00      	nop
 800a718:	e02a      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a71a:	bf00      	nop
 800a71c:	e028      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a71e:	bf00      	nop
 800a720:	e026      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a722:	bf00      	nop
 800a724:	e024      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a726:	bf00      	nop
 800a728:	e022      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a72a:	bf00      	nop
 800a72c:	e020      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a72e:	bf00      	nop
 800a730:	e01e      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a732:	bf00      	nop
 800a734:	e01c      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a736:	bf00      	nop
 800a738:	e01a      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a73a:	bf00      	nop
 800a73c:	e018      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a73e:	bf00      	nop
 800a740:	e016      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a742:	bf00      	nop
 800a744:	e014      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a746:	bf00      	nop
 800a748:	e012      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
			break;
 800a74a:	bf00      	nop
 800a74c:	e010      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a74e:	bf00      	nop
 800a750:	e00e      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a752:	bf00      	nop
 800a754:	e00c      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a756:	bf00      	nop
 800a758:	e00a      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a75a:	bf00      	nop
 800a75c:	e008      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a75e:	bf00      	nop
 800a760:	e006      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a762:	bf00      	nop
 800a764:	e004      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a766:	bf00      	nop
 800a768:	e002      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a76a:	bf00      	nop
 800a76c:	e000      	b.n	800a770 <WiFi_Conn_ND+0x18c8>
						break;
 800a76e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop

0800a780 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800a780:	b5b0      	push	{r4, r5, r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a790:	2bf1      	cmp	r3, #241	; 0xf1
 800a792:	dd01      	ble.n	800a798 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800a794:	2301      	movs	r3, #1
 800a796:	e0a4      	b.n	800a8e2 <LoRa_Send+0x162>
	}
	else
	{

		items[0]='\0';
 800a798:	2300      	movs	r3, #0
 800a79a:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a7a2:	f107 0108 	add.w	r1, r7, #8
 800a7a6:	220a      	movs	r2, #10
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f003 f93e 	bl	800da2a <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7f5 fd19 	bl	80001f4 <strlen>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	4423      	add	r3, r4
 800a7c6:	4949      	ldr	r1, [pc, #292]	; (800a8ec <LoRa_Send+0x16c>)
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	cb03      	ldmia	r3!, {r0, r1}
 800a7ce:	6010      	str	r0, [r2, #0]
 800a7d0:	6051      	str	r1, [r2, #4]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f103 0516 	add.w	r5, r3, #22
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3316      	adds	r3, #22
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f5 fd04 	bl	80001f4 <strlen>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f003 fb05 	bl	800de02 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7f5 fcf8 	bl	80001f4 <strlen>
 800a804:	4603      	mov	r3, r0
 800a806:	4423      	add	r3, r4
 800a808:	4939      	ldr	r1, [pc, #228]	; (800a8f0 <LoRa_Send+0x170>)
 800a80a:	461a      	mov	r2, r3
 800a80c:	460b      	mov	r3, r1
 800a80e:	881b      	ldrh	r3, [r3, #0]
 800a810:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f5 fce9 	bl	80001f4 <strlen>
 800a822:	4602      	mov	r2, r0
 800a824:	f107 0308 	add.w	r3, r7, #8
 800a828:	4619      	mov	r1, r3
 800a82a:	4620      	mov	r0, r4
 800a82c:	f003 fae9 	bl	800de02 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a836:	4620      	mov	r0, r4
 800a838:	f7f5 fcdc 	bl	80001f4 <strlen>
 800a83c:	4603      	mov	r3, r0
 800a83e:	4423      	add	r3, r4
 800a840:	492b      	ldr	r1, [pc, #172]	; (800a8f0 <LoRa_Send+0x170>)
 800a842:	461a      	mov	r2, r3
 800a844:	460b      	mov	r3, r1
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800a850:	4618      	mov	r0, r3
 800a852:	f7f5 fccf 	bl	80001f4 <strlen>
 800a856:	4603      	mov	r3, r0
 800a858:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800a866:	2300      	movs	r3, #0
 800a868:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800a86a:	e012      	b.n	800a892 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800a876:	7819      	ldrb	r1, [r3, #0]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	4413      	add	r3, r2
 800a87e:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800a882:	460a      	mov	r2, r1
 800a884:	701a      	strb	r2, [r3, #0]
			la++;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	3301      	adds	r3, #1
 800a88a:	617b      	str	r3, [r7, #20]
			lc++;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	3301      	adds	r3, #1
 800a890:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	429a      	cmp	r2, r3
 800a898:	dbe8      	blt.n	800a86c <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	617a      	str	r2, [r7, #20]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	220d      	movs	r2, #13
 800a8a6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	617a      	str	r2, [r7, #20]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	220a      	movs	r2, #10
 800a8b6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	b292      	uxth	r2, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6838      	ldr	r0, [r7, #0]
 800a8c8:	f7fa fb76 	bl	8004fb8 <HAL_UART_Transmit_IT>
		ITM0_Write("\r\nLora _data\r\n",strlen("\r\nLora _data\r\n"));
 800a8cc:	210e      	movs	r1, #14
 800a8ce:	4809      	ldr	r0, [pc, #36]	; (800a8f4 <LoRa_Send+0x174>)
 800a8d0:	f7f6 fc48 	bl	8001164 <ITM0_Write>
		ITM0_Write(a->txbuff2SND,la);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800a8da:	6979      	ldr	r1, [r7, #20]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7f6 fc41 	bl	8001164 <ITM0_Write>

	}

}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800f46c 	.word	0x0800f46c
 800a8f0:	0800f478 	.word	0x0800f478
 800a8f4:	0800f47c 	.word	0x0800f47c

0800a8f8 <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
	...

0800a930 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fa25 	bl	800ad88 <Lora_idSTR>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b10      	cmp	r3, #16
 800a942:	f200 820c 	bhi.w	800ad5e <LoRa_decode+0x42e>
 800a946:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <LoRa_decode+0x1c>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a991 	.word	0x0800a991
 800a950:	0800aa69 	.word	0x0800aa69
 800a954:	0800ac9d 	.word	0x0800ac9d
 800a958:	0800aca7 	.word	0x0800aca7
 800a95c:	0800acb1 	.word	0x0800acb1
 800a960:	0800acbb 	.word	0x0800acbb
 800a964:	0800acc5 	.word	0x0800acc5
 800a968:	0800accf 	.word	0x0800accf
 800a96c:	0800acd9 	.word	0x0800acd9
 800a970:	0800ace3 	.word	0x0800ace3
 800a974:	0800aced 	.word	0x0800aced
 800a978:	0800ad2d 	.word	0x0800ad2d
 800a97c:	0800ad37 	.word	0x0800ad37
 800a980:	0800ad4b 	.word	0x0800ad4b
 800a984:	0800ad41 	.word	0x0800ad41
 800a988:	0800ac93 	.word	0x0800ac93
 800a98c:	0800ad55 	.word	0x0800ad55
	{
		case _OK:
		{
			switch(b->estado)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800a996:	3b01      	subs	r3, #1
 800a998:	2b13      	cmp	r3, #19
 800a99a:	d860      	bhi.n	800aa5e <LoRa_decode+0x12e>
 800a99c:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <LoRa_decode+0x74>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9f5 	.word	0x0800a9f5
 800a9a8:	0800aa5f 	.word	0x0800aa5f
 800a9ac:	0800aa5f 	.word	0x0800aa5f
 800a9b0:	0800aa5f 	.word	0x0800aa5f
 800a9b4:	0800aa5f 	.word	0x0800aa5f
 800a9b8:	0800aa5f 	.word	0x0800aa5f
 800a9bc:	0800a9ff 	.word	0x0800a9ff
 800a9c0:	0800aa09 	.word	0x0800aa09
 800a9c4:	0800aa5f 	.word	0x0800aa5f
 800a9c8:	0800aa13 	.word	0x0800aa13
 800a9cc:	0800aa5f 	.word	0x0800aa5f
 800a9d0:	0800aa1d 	.word	0x0800aa1d
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aa27 	.word	0x0800aa27
 800a9dc:	0800aa5f 	.word	0x0800aa5f
 800a9e0:	0800aa31 	.word	0x0800aa31
 800a9e4:	0800aa5f 	.word	0x0800aa5f
 800a9e8:	0800aa3b 	.word	0x0800aa3b
 800a9ec:	0800aa5f 	.word	0x0800aa5f
 800a9f0:	0800aa45 	.word	0x0800aa45
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800a9fc:	e02f      	b.n	800aa5e <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2206      	movs	r2, #6
 800aa02:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa06:	e02a      	b.n	800aa5e <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2209      	movs	r2, #9
 800aa0c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa10:	e025      	b.n	800aa5e <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	220b      	movs	r2, #11
 800aa16:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa1a:	e020      	b.n	800aa5e <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	220d      	movs	r2, #13
 800aa20:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa24:	e01b      	b.n	800aa5e <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	220f      	movs	r2, #15
 800aa2a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa2e:	e016      	b.n	800aa5e <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2211      	movs	r2, #17
 800aa34:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa38:	e011      	b.n	800aa5e <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2213      	movs	r2, #19
 800aa3e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800aa42:	e00c      	b.n	800aa5e <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2215      	movs	r2, #21
 800aa48:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800aa54:	2111      	movs	r1, #17
 800aa56:	48a8      	ldr	r0, [pc, #672]	; (800acf8 <LoRa_decode+0x3c8>)
 800aa58:	f7f6 fb84 	bl	8001164 <ITM0_Write>
					}
					break;
 800aa5c:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800aa5e:	210c      	movs	r1, #12
 800aa60:	48a6      	ldr	r0, [pc, #664]	; (800acfc <LoRa_decode+0x3cc>)
 800aa62:	f7f6 fb7f 	bl	8001164 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800aa66:	e17f      	b.n	800ad68 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800aa68:	210d      	movs	r1, #13
 800aa6a:	48a5      	ldr	r0, [pc, #660]	; (800ad00 <LoRa_decode+0x3d0>)
 800aa6c:	f7f6 fb7a 	bl	8001164 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	221a      	movs	r2, #26
 800aa74:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]
					int j=0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800aa8c:	e002      	b.n	800aa94 <LoRa_decode+0x164>
					{ i++;}
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	3301      	adds	r3, #1
 800aa92:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	3356      	adds	r3, #86	; 0x56
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2b3d      	cmp	r3, #61	; 0x3d
 800aaa0:	d1f5      	bne.n	800aa8e <LoRa_decode+0x15e>
					i++;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800aaa8:	e017      	b.n	800aada <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	4413      	add	r3, r2
 800aab0:	3356      	adds	r3, #86	; 0x56
 800aab2:	7819      	ldrb	r1, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	4413      	add	r3, r2
 800aaba:	3306      	adds	r3, #6
 800aabc:	460a      	mov	r2, r1
 800aabe:	701a      	strb	r2, [r3, #0]
						i++;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	3301      	adds	r3, #1
 800aac4:	617b      	str	r3, [r7, #20]
						j++;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2b06      	cmp	r3, #6
 800aad0:	dd03      	ble.n	800aada <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fbca 	bl	800b26c <Lora_rx_del>
							break;
 800aad8:	e006      	b.n	800aae8 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	3356      	adds	r3, #86	; 0x56
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b2c      	cmp	r3, #44	; 0x2c
 800aae6:	d1e0      	bne.n	800aaaa <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	4413      	add	r3, r2
 800aaee:	3306      	adds	r3, #6
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
					j=0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	613b      	str	r3, [r7, #16]
					i++;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	3301      	adds	r3, #1
 800aafc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800aafe:	e017      	b.n	800ab30 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	4413      	add	r3, r2
 800ab06:	3356      	adds	r3, #86	; 0x56
 800ab08:	7819      	ldrb	r1, [r3, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	4413      	add	r3, r2
 800ab10:	330c      	adds	r3, #12
 800ab12:	460a      	mov	r2, r1
 800ab14:	701a      	strb	r2, [r3, #0]
						i++;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	617b      	str	r3, [r7, #20]
						j++;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	dd03      	ble.n	800ab30 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fb9f 	bl	800b26c <Lora_rx_del>
							break;
 800ab2e:	e006      	b.n	800ab3e <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	4413      	add	r3, r2
 800ab36:	3356      	adds	r3, #86	; 0x56
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b2c      	cmp	r3, #44	; 0x2c
 800ab3c:	d1e0      	bne.n	800ab00 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	4413      	add	r3, r2
 800ab44:	330c      	adds	r3, #12
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
					j=0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	613b      	str	r3, [r7, #16]
					i++;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	3301      	adds	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	330c      	adds	r3, #12
 800ab58:	210a      	movs	r1, #10
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f002 ff49 	bl	800d9f2 <atoi>
 800ab60:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800ab62:	e019      	b.n	800ab98 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	4413      	add	r3, r2
 800ab6a:	3356      	adds	r3, #86	; 0x56
 800ab6c:	7819      	ldrb	r1, [r3, #0]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800ab78:	460a      	mov	r2, r1
 800ab7a:	701a      	strb	r2, [r3, #0]
						j++;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	613b      	str	r3, [r7, #16]
						i++;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	3301      	adds	r3, #1
 800ab86:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	dd03      	ble.n	800ab98 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fb6b 	bl	800b26c <Lora_rx_del>
							break;
 800ab96:	e006      	b.n	800aba6 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3356      	adds	r3, #86	; 0x56
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b2c      	cmp	r3, #44	; 0x2c
 800aba4:	d1de      	bne.n	800ab64 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
					i++;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	3301      	adds	r3, #1
 800abb6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800abb8:	e017      	b.n	800abea <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	4413      	add	r3, r2
 800abc0:	3356      	adds	r3, #86	; 0x56
 800abc2:	7819      	ldrb	r1, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	4413      	add	r3, r2
 800abca:	3310      	adds	r3, #16
 800abcc:	460a      	mov	r2, r1
 800abce:	701a      	strb	r2, [r3, #0]
						i++;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	3301      	adds	r3, #1
 800abd4:	617b      	str	r3, [r7, #20]
						j++;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3301      	adds	r3, #1
 800abda:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	dd03      	ble.n	800abea <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fb42 	bl	800b26c <Lora_rx_del>
							break;
 800abe8:	e006      	b.n	800abf8 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	4413      	add	r3, r2
 800abf0:	3356      	adds	r3, #86	; 0x56
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b2c      	cmp	r3, #44	; 0x2c
 800abf6:	d1e0      	bne.n	800abba <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3310      	adds	r3, #16
 800abfc:	210a      	movs	r1, #10
 800abfe:	4618      	mov	r0, r3
 800ac00:	f002 fef7 	bl	800d9f2 <atoi>
 800ac04:	4602      	mov	r2, r0
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	4413      	add	r3, r2
 800ac12:	3310      	adds	r3, #16
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
					j=0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	613b      	str	r3, [r7, #16]
					i++;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800ac22:	e017      	b.n	800ac54 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	4413      	add	r3, r2
 800ac2a:	3356      	adds	r3, #86	; 0x56
 800ac2c:	7819      	ldrb	r1, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	4413      	add	r3, r2
 800ac34:	3310      	adds	r3, #16
 800ac36:	460a      	mov	r2, r1
 800ac38:	701a      	strb	r2, [r3, #0]
						i++;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
						j++;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3301      	adds	r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b05      	cmp	r3, #5
 800ac4a:	dd03      	ble.n	800ac54 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fb0d 	bl	800b26c <Lora_rx_del>
							break;
 800ac52:	e006      	b.n	800ac62 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4413      	add	r3, r2
 800ac5a:	3356      	adds	r3, #86	; 0x56
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b0d      	cmp	r3, #13
 800ac60:	d1e0      	bne.n	800ac24 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	4413      	add	r3, r2
 800ac68:	3310      	adds	r3, #16
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3310      	adds	r3, #16
 800ac72:	210a      	movs	r1, #10
 800ac74:	4618      	mov	r0, r3
 800ac76:	f002 febc 	bl	800d9f2 <atoi>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800ac90:	e06a      	b.n	800ad68 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800ac92:	210d      	movs	r1, #13
 800ac94:	481b      	ldr	r0, [pc, #108]	; (800ad04 <LoRa_decode+0x3d4>)
 800ac96:	f7f6 fa65 	bl	8001164 <ITM0_Write>
			break;
 800ac9a:	e065      	b.n	800ad68 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800ac9c:	210f      	movs	r1, #15
 800ac9e:	481a      	ldr	r0, [pc, #104]	; (800ad08 <LoRa_decode+0x3d8>)
 800aca0:	f7f6 fa60 	bl	8001164 <ITM0_Write>
			break;
 800aca4:	e060      	b.n	800ad68 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800aca6:	210f      	movs	r1, #15
 800aca8:	4818      	ldr	r0, [pc, #96]	; (800ad0c <LoRa_decode+0x3dc>)
 800acaa:	f7f6 fa5b 	bl	8001164 <ITM0_Write>
			break;
 800acae:	e05b      	b.n	800ad68 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800acb0:	210e      	movs	r1, #14
 800acb2:	4817      	ldr	r0, [pc, #92]	; (800ad10 <LoRa_decode+0x3e0>)
 800acb4:	f7f6 fa56 	bl	8001164 <ITM0_Write>
			break;
 800acb8:	e056      	b.n	800ad68 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800acba:	210d      	movs	r1, #13
 800acbc:	4815      	ldr	r0, [pc, #84]	; (800ad14 <LoRa_decode+0x3e4>)
 800acbe:	f7f6 fa51 	bl	8001164 <ITM0_Write>
			break;
 800acc2:	e051      	b.n	800ad68 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800acc4:	2113      	movs	r1, #19
 800acc6:	4814      	ldr	r0, [pc, #80]	; (800ad18 <LoRa_decode+0x3e8>)
 800acc8:	f7f6 fa4c 	bl	8001164 <ITM0_Write>
			break;
 800accc:	e04c      	b.n	800ad68 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800acce:	210e      	movs	r1, #14
 800acd0:	4812      	ldr	r0, [pc, #72]	; (800ad1c <LoRa_decode+0x3ec>)
 800acd2:	f7f6 fa47 	bl	8001164 <ITM0_Write>
			break;
 800acd6:	e047      	b.n	800ad68 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800acd8:	2111      	movs	r1, #17
 800acda:	4811      	ldr	r0, [pc, #68]	; (800ad20 <LoRa_decode+0x3f0>)
 800acdc:	f7f6 fa42 	bl	8001164 <ITM0_Write>
			break;
 800ace0:	e042      	b.n	800ad68 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800ace2:	2111      	movs	r1, #17
 800ace4:	480f      	ldr	r0, [pc, #60]	; (800ad24 <LoRa_decode+0x3f4>)
 800ace6:	f7f6 fa3d 	bl	8001164 <ITM0_Write>
			break;
 800acea:	e03d      	b.n	800ad68 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800acec:	210e      	movs	r1, #14
 800acee:	480e      	ldr	r0, [pc, #56]	; (800ad28 <LoRa_decode+0x3f8>)
 800acf0:	f7f6 fa38 	bl	8001164 <ITM0_Write>
			break;
 800acf4:	e038      	b.n	800ad68 <LoRa_decode+0x438>
 800acf6:	bf00      	nop
 800acf8:	0800f4b8 	.word	0x0800f4b8
 800acfc:	0800f4cc 	.word	0x0800f4cc
 800ad00:	0800f4dc 	.word	0x0800f4dc
 800ad04:	0800f4ec 	.word	0x0800f4ec
 800ad08:	0800f4fc 	.word	0x0800f4fc
 800ad0c:	0800f50c 	.word	0x0800f50c
 800ad10:	0800f51c 	.word	0x0800f51c
 800ad14:	0800f52c 	.word	0x0800f52c
 800ad18:	0800f53c 	.word	0x0800f53c
 800ad1c:	0800f550 	.word	0x0800f550
 800ad20:	0800f560 	.word	0x0800f560
 800ad24:	0800f574 	.word	0x0800f574
 800ad28:	0800f588 	.word	0x0800f588
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800ad2c:	210f      	movs	r1, #15
 800ad2e:	4810      	ldr	r0, [pc, #64]	; (800ad70 <LoRa_decode+0x440>)
 800ad30:	f7f6 fa18 	bl	8001164 <ITM0_Write>
			break;
 800ad34:	e018      	b.n	800ad68 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800ad36:	210e      	movs	r1, #14
 800ad38:	480e      	ldr	r0, [pc, #56]	; (800ad74 <LoRa_decode+0x444>)
 800ad3a:	f7f6 fa13 	bl	8001164 <ITM0_Write>
			break;
 800ad3e:	e013      	b.n	800ad68 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800ad40:	210d      	movs	r1, #13
 800ad42:	480d      	ldr	r0, [pc, #52]	; (800ad78 <LoRa_decode+0x448>)
 800ad44:	f7f6 fa0e 	bl	8001164 <ITM0_Write>
			break;
 800ad48:	e00e      	b.n	800ad68 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800ad4a:	210d      	movs	r1, #13
 800ad4c:	480b      	ldr	r0, [pc, #44]	; (800ad7c <LoRa_decode+0x44c>)
 800ad4e:	f7f6 fa09 	bl	8001164 <ITM0_Write>
			break;
 800ad52:	e009      	b.n	800ad68 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800ad54:	2114      	movs	r1, #20
 800ad56:	480a      	ldr	r0, [pc, #40]	; (800ad80 <LoRa_decode+0x450>)
 800ad58:	f7f6 fa04 	bl	8001164 <ITM0_Write>
			break;
 800ad5c:	e004      	b.n	800ad68 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800ad5e:	2110      	movs	r1, #16
 800ad60:	4808      	ldr	r0, [pc, #32]	; (800ad84 <LoRa_decode+0x454>)
 800ad62:	f7f6 f9ff 	bl	8001164 <ITM0_Write>
			break;
 800ad66:	bf00      	nop
	}
 }
 800ad68:	bf00      	nop
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	0800f598 	.word	0x0800f598
 800ad74:	0800f5a8 	.word	0x0800f5a8
 800ad78:	0800f5b8 	.word	0x0800f5b8
 800ad7c:	0800f5c8 	.word	0x0800f5c8
 800ad80:	0800f5d8 	.word	0x0800f5d8
 800ad84:	0800f5f0 	.word	0x0800f5f0

0800ad88 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b090      	sub	sp, #64	; 0x40
 800ad8c:	af06      	add	r7, sp, #24
 800ad8e:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800ad96:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ad9a:	dd01      	ble.n	800ada0 <Lora_idSTR+0x18>
 800ad9c:	2310      	movs	r3, #16
 800ad9e:	e257      	b.n	800b250 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800ada4:	2304      	movs	r3, #4
 800ada6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800adb4:	f107 021c 	add.w	r2, r7, #28
 800adb8:	2300      	movs	r3, #0
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	f107 0320 	add.w	r3, r7, #32
 800adc6:	9303      	str	r3, [sp, #12]
 800adc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	f107 0310 	add.w	r3, r7, #16
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4613      	mov	r3, r2
 800addc:	4ab7      	ldr	r2, [pc, #732]	; (800b0bc <Lora_idSTR+0x334>)
 800adde:	f002 f9cb 	bl	800d178 <FT_String_ND>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <Lora_idSTR+0x64>
 800ade8:	2300      	movs	r3, #0
 800adea:	e231      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800adec:	2305      	movs	r3, #5
 800adee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800adfc:	f107 021c 	add.w	r2, r7, #28
 800ae00:	2300      	movs	r3, #0
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	f107 0320 	add.w	r3, r7, #32
 800ae0e:	9303      	str	r3, [sp, #12]
 800ae10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae14:	9302      	str	r3, [sp, #8]
 800ae16:	f107 030c 	add.w	r3, r7, #12
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	f107 0310 	add.w	r3, r7, #16
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	4613      	mov	r3, r2
 800ae24:	4aa6      	ldr	r2, [pc, #664]	; (800b0c0 <Lora_idSTR+0x338>)
 800ae26:	f002 f9a7 	bl	800d178 <FT_String_ND>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <Lora_idSTR+0xac>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e20d      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800ae34:	2305      	movs	r3, #5
 800ae36:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ae44:	f107 021c 	add.w	r2, r7, #28
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	f107 0320 	add.w	r3, r7, #32
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	f107 0310 	add.w	r3, r7, #16
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	4a95      	ldr	r2, [pc, #596]	; (800b0c4 <Lora_idSTR+0x33c>)
 800ae6e:	f002 f983 	bl	800d178 <FT_String_ND>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d101      	bne.n	800ae7c <Lora_idSTR+0xf4>
 800ae78:	230f      	movs	r3, #15
 800ae7a:	e1e9      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800ae7c:	2306      	movs	r3, #6
 800ae7e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ae8c:	f107 021c 	add.w	r2, r7, #28
 800ae90:	2300      	movs	r3, #0
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	f107 0320 	add.w	r3, r7, #32
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	f107 030c 	add.w	r3, r7, #12
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	f107 0310 	add.w	r3, r7, #16
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	4a84      	ldr	r2, [pc, #528]	; (800b0c8 <Lora_idSTR+0x340>)
 800aeb6:	f002 f95f 	bl	800d178 <FT_String_ND>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <Lora_idSTR+0x13c>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e1c5      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800aec4:	2306      	movs	r3, #6
 800aec6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800aed4:	f107 021c 	add.w	r2, r7, #28
 800aed8:	2300      	movs	r3, #0
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	f107 0320 	add.w	r3, r7, #32
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	f107 030c 	add.w	r3, r7, #12
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	f107 0310 	add.w	r3, r7, #16
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	4613      	mov	r3, r2
 800aefc:	4a73      	ldr	r2, [pc, #460]	; (800b0cc <Lora_idSTR+0x344>)
 800aefe:	f002 f93b 	bl	800d178 <FT_String_ND>
 800af02:	4603      	mov	r3, r0
 800af04:	2b01      	cmp	r3, #1
 800af06:	d101      	bne.n	800af0c <Lora_idSTR+0x184>
 800af08:	2303      	movs	r3, #3
 800af0a:	e1a1      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800af0c:	2306      	movs	r3, #6
 800af0e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800af1c:	f107 021c 	add.w	r2, r7, #28
 800af20:	2300      	movs	r3, #0
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	f107 0320 	add.w	r3, r7, #32
 800af2e:	9303      	str	r3, [sp, #12]
 800af30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af34:	9302      	str	r3, [sp, #8]
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	f107 0310 	add.w	r3, r7, #16
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	4613      	mov	r3, r2
 800af44:	4a62      	ldr	r2, [pc, #392]	; (800b0d0 <Lora_idSTR+0x348>)
 800af46:	f002 f917 	bl	800d178 <FT_String_ND>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <Lora_idSTR+0x1cc>
 800af50:	2304      	movs	r3, #4
 800af52:	e17d      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800af54:	2305      	movs	r3, #5
 800af56:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800af64:	f107 021c 	add.w	r2, r7, #28
 800af68:	2300      	movs	r3, #0
 800af6a:	9305      	str	r3, [sp, #20]
 800af6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	f107 0320 	add.w	r3, r7, #32
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	f107 030c 	add.w	r3, r7, #12
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	f107 0310 	add.w	r3, r7, #16
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	4613      	mov	r3, r2
 800af8c:	4a51      	ldr	r2, [pc, #324]	; (800b0d4 <Lora_idSTR+0x34c>)
 800af8e:	f002 f8f3 	bl	800d178 <FT_String_ND>
 800af92:	4603      	mov	r3, r0
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <Lora_idSTR+0x214>
 800af98:	2305      	movs	r3, #5
 800af9a:	e159      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800af9c:	230b      	movs	r3, #11
 800af9e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800afac:	f107 021c 	add.w	r2, r7, #28
 800afb0:	2300      	movs	r3, #0
 800afb2:	9305      	str	r3, [sp, #20]
 800afb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	f107 0320 	add.w	r3, r7, #32
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	f107 030c 	add.w	r3, r7, #12
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	f107 0310 	add.w	r3, r7, #16
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	4613      	mov	r3, r2
 800afd4:	4a40      	ldr	r2, [pc, #256]	; (800b0d8 <Lora_idSTR+0x350>)
 800afd6:	f002 f8cf 	bl	800d178 <FT_String_ND>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <Lora_idSTR+0x25c>
 800afe0:	2306      	movs	r3, #6
 800afe2:	e135      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800afe4:	2306      	movs	r3, #6
 800afe6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800aff4:	f107 021c 	add.w	r2, r7, #28
 800aff8:	2300      	movs	r3, #0
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	f107 0320 	add.w	r3, r7, #32
 800b006:	9303      	str	r3, [sp, #12]
 800b008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	f107 030c 	add.w	r3, r7, #12
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	4613      	mov	r3, r2
 800b01c:	4a2f      	ldr	r2, [pc, #188]	; (800b0dc <Lora_idSTR+0x354>)
 800b01e:	f002 f8ab 	bl	800d178 <FT_String_ND>
 800b022:	4603      	mov	r3, r0
 800b024:	2b01      	cmp	r3, #1
 800b026:	d101      	bne.n	800b02c <Lora_idSTR+0x2a4>
 800b028:	2307      	movs	r3, #7
 800b02a:	e111      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800b02c:	2309      	movs	r3, #9
 800b02e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b03c:	f107 021c 	add.w	r2, r7, #28
 800b040:	2300      	movs	r3, #0
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	f107 0320 	add.w	r3, r7, #32
 800b04e:	9303      	str	r3, [sp, #12]
 800b050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b054:	9302      	str	r3, [sp, #8]
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	f107 0310 	add.w	r3, r7, #16
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	4613      	mov	r3, r2
 800b064:	4a1e      	ldr	r2, [pc, #120]	; (800b0e0 <Lora_idSTR+0x358>)
 800b066:	f002 f887 	bl	800d178 <FT_String_ND>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <Lora_idSTR+0x2ec>
 800b070:	2308      	movs	r3, #8
 800b072:	e0ed      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800b074:	2309      	movs	r3, #9
 800b076:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b084:	f107 021c 	add.w	r2, r7, #28
 800b088:	2300      	movs	r3, #0
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	f107 0320 	add.w	r3, r7, #32
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b09c:	9302      	str	r3, [sp, #8]
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	f107 0310 	add.w	r3, r7, #16
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	4a0d      	ldr	r2, [pc, #52]	; (800b0e4 <Lora_idSTR+0x35c>)
 800b0ae:	f002 f863 	bl	800d178 <FT_String_ND>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d117      	bne.n	800b0e8 <Lora_idSTR+0x360>
 800b0b8:	2309      	movs	r3, #9
 800b0ba:	e0c9      	b.n	800b250 <Lora_idSTR+0x4c8>
 800b0bc:	0800f604 	.word	0x0800f604
 800b0c0:	0800f60c 	.word	0x0800f60c
 800b0c4:	0800f614 	.word	0x0800f614
 800b0c8:	0800f61c 	.word	0x0800f61c
 800b0cc:	0800f624 	.word	0x0800f624
 800b0d0:	0800f62c 	.word	0x0800f62c
 800b0d4:	0800f634 	.word	0x0800f634
 800b0d8:	0800f63c 	.word	0x0800f63c
 800b0dc:	0800f648 	.word	0x0800f648
 800b0e0:	0800f650 	.word	0x0800f650
 800b0e4:	0800f65c 	.word	0x0800f65c
		i=strlen("+CPIN=");
 800b0e8:	2306      	movs	r3, #6
 800b0ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b0f8:	f107 021c 	add.w	r2, r7, #28
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	f107 0320 	add.w	r3, r7, #32
 800b10a:	9303      	str	r3, [sp, #12]
 800b10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b110:	9302      	str	r3, [sp, #8]
 800b112:	f107 030c 	add.w	r3, r7, #12
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	4613      	mov	r3, r2
 800b120:	4a4d      	ldr	r2, [pc, #308]	; (800b258 <Lora_idSTR+0x4d0>)
 800b122:	f002 f829 	bl	800d178 <FT_String_ND>
 800b126:	4603      	mov	r3, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <Lora_idSTR+0x3a8>
 800b12c:	230a      	movs	r3, #10
 800b12e:	e08f      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800b130:	2307      	movs	r3, #7
 800b132:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b140:	f107 021c 	add.w	r2, r7, #28
 800b144:	2300      	movs	r3, #0
 800b146:	9305      	str	r3, [sp, #20]
 800b148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	f107 0320 	add.w	r3, r7, #32
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b158:	9302      	str	r3, [sp, #8]
 800b15a:	f107 030c 	add.w	r3, r7, #12
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	f107 0310 	add.w	r3, r7, #16
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4613      	mov	r3, r2
 800b168:	4a3c      	ldr	r2, [pc, #240]	; (800b25c <Lora_idSTR+0x4d4>)
 800b16a:	f002 f805 	bl	800d178 <FT_String_ND>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <Lora_idSTR+0x3f0>
 800b174:	230b      	movs	r3, #11
 800b176:	e06b      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800b178:	2306      	movs	r3, #6
 800b17a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b188:	f107 021c 	add.w	r2, r7, #28
 800b18c:	2300      	movs	r3, #0
 800b18e:	9305      	str	r3, [sp, #20]
 800b190:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	f107 0320 	add.w	r3, r7, #32
 800b19a:	9303      	str	r3, [sp, #12]
 800b19c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	f107 030c 	add.w	r3, r7, #12
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	4a2b      	ldr	r2, [pc, #172]	; (800b260 <Lora_idSTR+0x4d8>)
 800b1b2:	f001 ffe1 	bl	800d178 <FT_String_ND>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d101      	bne.n	800b1c0 <Lora_idSTR+0x438>
 800b1bc:	230c      	movs	r3, #12
 800b1be:	e047      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800b1c0:	2305      	movs	r3, #5
 800b1c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1d0:	f107 021c 	add.w	r2, r7, #28
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9305      	str	r3, [sp, #20]
 800b1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f107 0320 	add.w	r3, r7, #32
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1e8:	9302      	str	r3, [sp, #8]
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	f107 0310 	add.w	r3, r7, #16
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	4a1a      	ldr	r2, [pc, #104]	; (800b264 <Lora_idSTR+0x4dc>)
 800b1fa:	f001 ffbd 	bl	800d178 <FT_String_ND>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <Lora_idSTR+0x480>
 800b204:	230e      	movs	r3, #14
 800b206:	e023      	b.n	800b250 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800b208:	2305      	movs	r3, #5
 800b20a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b218:	f107 021c 	add.w	r2, r7, #28
 800b21c:	2300      	movs	r3, #0
 800b21e:	9305      	str	r3, [sp, #20]
 800b220:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	f107 0320 	add.w	r3, r7, #32
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b230:	9302      	str	r3, [sp, #8]
 800b232:	f107 030c 	add.w	r3, r7, #12
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	f107 0310 	add.w	r3, r7, #16
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	4613      	mov	r3, r2
 800b240:	4a09      	ldr	r2, [pc, #36]	; (800b268 <Lora_idSTR+0x4e0>)
 800b242:	f001 ff99 	bl	800d178 <FT_String_ND>
 800b246:	4603      	mov	r3, r0
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d101      	bne.n	800b250 <Lora_idSTR+0x4c8>
 800b24c:	230d      	movs	r3, #13
 800b24e:	e7ff      	b.n	800b250 <Lora_idSTR+0x4c8>
}
 800b250:	4618      	mov	r0, r3
 800b252:	3728      	adds	r7, #40	; 0x28
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	0800f668 	.word	0x0800f668
 800b25c:	0800f670 	.word	0x0800f670
 800b260:	0800f678 	.word	0x0800f678
 800b264:	0800f680 	.word	0x0800f680
 800b268:	0800f688 	.word	0x0800f688

0800b26c <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b2ba:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1c      	ldr	r2, [pc, #112]	; (800b340 <ModBUS_Config+0xa0>)
 800b2ce:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a18      	ldr	r2, [pc, #96]	; (800b344 <ModBUS_Config+0xa4>)
 800b2e4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2210      	movs	r2, #16
 800b2f2:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2210      	movs	r2, #16
 800b300:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2220      	movs	r2, #32
 800b330:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	f0f0af5a 	.word	0xf0f0af5a
 800b344:	a5fa0f0f 	.word	0xa5fa0f0f

0800b348 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3305      	adds	r3, #5
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	3306      	adds	r3, #6
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d10b      	bne.n	800b378 <ModBUS_Check+0x30>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3302      	adds	r3, #2
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3303      	adds	r3, #3
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	4413      	add	r3, r2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <ModBUS_Check+0x30>
	{
		return(1);
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800b378:	2300      	movs	r3, #0
	}
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	7c9b      	ldrb	r3, [r3, #18]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d11d      	bne.n	800b3d8 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d116      	bne.n	800b3d8 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d10f      	bne.n	800b3d8 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d108      	bne.n	800b3d8 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d101      	bne.n	800b3d8 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800b3d8:	2300      	movs	r3, #0
	}
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	70fb      	strb	r3, [r7, #3]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b400:	78fa      	ldrb	r2, [r7, #3]
 800b402:	429a      	cmp	r2, r3
 800b404:	d901      	bls.n	800b40a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b406:	2301      	movs	r3, #1
 800b408:	e016      	b.n	800b438 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800b40a:	78fb      	ldrb	r3, [r7, #3]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	3301      	adds	r3, #1
 800b414:	883a      	ldrh	r2, [r7, #0]
 800b416:	b2d1      	uxtb	r1, r2
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	4413      	add	r3, r2
 800b41c:	460a      	mov	r2, r1
 800b41e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800b422:	883b      	ldrh	r3, [r7, #0]
 800b424:	0a1b      	lsrs	r3, r3, #8
 800b426:	b29b      	uxth	r3, r3
 800b428:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	4413      	add	r3, r2
 800b430:	7bfa      	ldrb	r2, [r7, #15]
 800b432:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800b436:	2300      	movs	r3, #0
	}
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b450:	2300      	movs	r3, #0
 800b452:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b454:	2300      	movs	r3, #0
 800b456:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b45e:	78fa      	ldrb	r2, [r7, #3]
 800b460:	429a      	cmp	r2, r3
 800b462:	d901      	bls.n	800b468 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b464:	2301      	movs	r3, #1
 800b466:	e016      	b.n	800b496 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b478:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b47a:	89fb      	ldrh	r3, [r7, #14]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	3301      	adds	r3, #1
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	4413      	add	r3, r2
 800b488:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	89fb      	ldrh	r3, [r7, #14]
 800b490:	4313      	orrs	r3, r2
 800b492:	81fb      	strh	r3, [r7, #14]
		return(n);
 800b494:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	807b      	strh	r3, [r7, #2]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800b4b2:	887b      	ldrh	r3, [r7, #2]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bf14      	ite	ne
 800b4b8:	2301      	movne	r3, #1
 800b4ba:	2300      	moveq	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800b4c6:	887b      	ldrh	r3, [r7, #2]
 800b4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4cc:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800b4ce:	887b      	ldrh	r3, [r7, #2]
 800b4d0:	0a1b      	lsrs	r3, r3, #8
 800b4d2:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800b4d4:	887b      	ldrh	r3, [r7, #2]
 800b4d6:	f003 030f 	and.w	r3, r3, #15
 800b4da:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2206      	movs	r2, #6
 800b508:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2203      	movs	r2, #3
 800b51a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800b51e:	887b      	ldrh	r3, [r7, #2]
 800b520:	b2da      	uxtb	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	787a      	ldrb	r2, [r7, #1]
 800b534:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	220c      	movs	r2, #12
 800b53c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800b540:	bf00      	nop
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b09c      	sub	sp, #112	; 0x70
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	791b      	ldrb	r3, [r3, #4]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	f041 813f 	bne.w	800c7e0 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f103 0212 	add.w	r2, r3, #18
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b56e:	4619      	mov	r1, r3
 800b570:	4610      	mov	r0, r2
 800b572:	f7ff fee9 	bl	800b348 <ModBUS_Check>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f001 812f 	beq.w	800c7dc <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7e5b      	ldrb	r3, [r3, #25]
 800b582:	3b01      	subs	r3, #1
 800b584:	2b0f      	cmp	r3, #15
 800b586:	f201 80f3 	bhi.w	800c770 <ModBUS+0x1220>
 800b58a:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <ModBUS+0x40>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b5d1 	.word	0x0800b5d1
 800b594:	0800b811 	.word	0x0800b811
 800b598:	0800ba51 	.word	0x0800ba51
 800b59c:	0800bc89 	.word	0x0800bc89
 800b5a0:	0800bec1 	.word	0x0800bec1
 800b5a4:	0800c0d7 	.word	0x0800c0d7
 800b5a8:	0800c771 	.word	0x0800c771
 800b5ac:	0800c771 	.word	0x0800c771
 800b5b0:	0800c771 	.word	0x0800c771
 800b5b4:	0800c771 	.word	0x0800c771
 800b5b8:	0800c771 	.word	0x0800c771
 800b5bc:	0800c771 	.word	0x0800c771
 800b5c0:	0800c771 	.word	0x0800c771
 800b5c4:	0800c771 	.word	0x0800c771
 800b5c8:	0800c293 	.word	0x0800c293
 800b5cc:	0800c523 	.word	0x0800c523

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	7d9a      	ldrb	r2, [r3, #22]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	7d5a      	ldrb	r2, [r3, #21]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	7d1a      	ldrb	r2, [r3, #20]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	7cda      	ldrb	r2, [r3, #19]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7c9a      	ldrb	r2, [r3, #18]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	7a9b      	ldrb	r3, [r3, #10]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	f040 80e6 	bne.w	800b7dc <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7e9b      	ldrb	r3, [r3, #26]
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	b29a      	uxth	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800b632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	7edb      	ldrb	r3, [r3, #27]
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7f1b      	ldrb	r3, [r3, #28]
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	b29a      	uxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800b676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7f5b      	ldrb	r3, [r3, #29]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	4313      	orrs	r3, r2
 800b690:	b29a      	uxth	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d87e      	bhi.n	800b7a8 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800b6b8:	4413      	add	r3, r2
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	dc57      	bgt.n	800b774 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	613b      	str	r3, [r7, #16]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800b6e4:	40d3      	lsrs	r3, r2
 800b6e6:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800b6ee:	08db      	lsrs	r3, r3, #3
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <ModBUS+0x1bc>
									{
										bytes=div;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b70a:	e002      	b.n	800b712 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	3301      	adds	r3, #1
 800b710:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800b712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b714:	b2da      	uxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800b71c:	e00e      	b.n	800b73c <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800b71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b720:	3308      	adds	r3, #8
 800b722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b724:	b2d1      	uxtb	r1, r2
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	460a      	mov	r2, r1
 800b72c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800b730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800b736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b738:	3b01      	subs	r3, #1
 800b73a:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800b73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dced      	bgt.n	800b71e <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800b758:	3303      	adds	r3, #3
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b768:	1d9a      	adds	r2, r3, #6
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800b770:	f001 b8d4 	b.w	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2281      	movs	r2, #129	; 0x81
 800b780:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b79a:	1d9a      	adds	r2, r3, #6
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	f001 b8ba 	b.w	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2203      	movs	r2, #3
 800b7ac:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2281      	movs	r2, #129	; 0x81
 800b7b4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2203      	movs	r2, #3
 800b7c4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b7ce:	1d9a      	adds	r2, r3, #6
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	f001 b8a0 	b.w	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2281      	movs	r2, #129	; 0x81
 800b7e8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b802:	1d9a      	adds	r2, r3, #6
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800b80a:	2301      	movs	r3, #1
 800b80c:	f001 b886 	b.w	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7d9a      	ldrb	r2, [r3, #22]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	7d5a      	ldrb	r2, [r3, #21]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7d1a      	ldrb	r2, [r3, #20]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7cda      	ldrb	r2, [r3, #19]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	7c9a      	ldrb	r2, [r3, #18]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800b842:	2300      	movs	r3, #0
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	7adb      	ldrb	r3, [r3, #11]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	f040 80e6 	bne.w	800ba1c <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	7e9b      	ldrb	r3, [r3, #26]
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	b29a      	uxth	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800b872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7edb      	ldrb	r3, [r3, #27]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4313      	orrs	r3, r2
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7f1b      	ldrb	r3, [r3, #28]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800b8b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	7f5b      	ldrb	r3, [r3, #29]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d87e      	bhi.n	800b9e8 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800b8f8:	4413      	add	r3, r2
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800b900:	4293      	cmp	r3, r2
 800b902:	dc57      	bgt.n	800b9b4 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800b904:	2300      	movs	r3, #0
 800b906:	623b      	str	r3, [r7, #32]
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	2300      	movs	r3, #0
 800b90e:	667b      	str	r3, [r7, #100]	; 0x64
 800b910:	2300      	movs	r3, #0
 800b912:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800b914:	2300      	movs	r3, #0
 800b916:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800b924:	40d3      	lsrs	r3, r2
 800b926:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800b92e:	08db      	lsrs	r3, r3, #3
 800b930:	b29b      	uxth	r3, r3
 800b932:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <ModBUS+0x3fc>
									{
										bytes=div;
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	667b      	str	r3, [r7, #100]	; 0x64
 800b94a:	e002      	b.n	800b952 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	3301      	adds	r3, #1
 800b950:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800b952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b954:	b2da      	uxtb	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800b95c:	e00e      	b.n	800b97c <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800b95e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b960:	3308      	adds	r3, #8
 800b962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b964:	b2d1      	uxtb	r1, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4413      	add	r3, r2
 800b96a:	460a      	mov	r2, r1
 800b96c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800b970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b972:	0a1b      	lsrs	r3, r3, #8
 800b974:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800b976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b978:	3b01      	subs	r3, #1
 800b97a:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800b97c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dced      	bgt.n	800b95e <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800b998:	3303      	adds	r3, #3
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b9a8:	1d9a      	adds	r2, r3, #6
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800b9b0:	f000 bfb4 	b.w	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2282      	movs	r2, #130	; 0x82
 800b9c0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b9da:	1d9a      	adds	r2, r3, #6
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	f000 bf9a 	b.w	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2282      	movs	r2, #130	; 0x82
 800b9f4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2203      	movs	r2, #3
 800ba04:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ba0e:	1d9a      	adds	r2, r3, #6
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800ba16:	2303      	movs	r3, #3
 800ba18:	f000 bf80 	b.w	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2282      	movs	r2, #130	; 0x82
 800ba28:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2203      	movs	r2, #3
 800ba38:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ba42:	1d9a      	adds	r2, r3, #6
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f000 bf66 	b.w	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	7d9a      	ldrb	r2, [r3, #22]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	7d5a      	ldrb	r2, [r3, #21]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	7d1a      	ldrb	r2, [r3, #20]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7cda      	ldrb	r2, [r3, #19]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7c9a      	ldrb	r2, [r3, #18]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7b1b      	ldrb	r3, [r3, #12]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	f040 80e2 	bne.w	800bc54 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	7e9b      	ldrb	r3, [r3, #26]
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800baa2:	021b      	lsls	r3, r3, #8
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800bab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7edb      	ldrb	r3, [r3, #27]
 800bac8:	b29b      	uxth	r3, r3
 800baca:	4313      	orrs	r3, r2
 800bacc:	b29a      	uxth	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7f1b      	ldrb	r3, [r3, #28]
 800bad8:	b29a      	uxth	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	b29a      	uxth	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800baf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	7f5b      	ldrb	r3, [r3, #29]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d87a      	bhi.n	800bc20 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800bb30:	461a      	mov	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800bb38:	4413      	add	r3, r2
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800bb40:	4293      	cmp	r3, r2
 800bb42:	dc53      	bgt.n	800bbec <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bb44:	e029      	b.n	800bb9a <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb50:	4413      	add	r3, r2
 800bb52:	005a      	lsls	r2, r3, #1
 800bb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	3309      	adds	r3, #9
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	440a      	add	r2, r1
 800bb5e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	460a      	mov	r2, r1
 800bb68:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800bb72:	461a      	mov	r2, r3
 800bb74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb76:	4413      	add	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb7e:	3305      	adds	r3, #5
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	440a      	add	r2, r1
 800bb86:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	460a      	mov	r2, r1
 800bb90:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800bb94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb96:	3301      	adds	r3, #1
 800bb98:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800bba0:	461a      	mov	r2, r3
 800bba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba4:	4293      	cmp	r3, r2
 800bba6:	dbce      	blt.n	800bb46 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bbd0:	3303      	adds	r3, #3
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bbe0:	1d9a      	adds	r2, r3, #6
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bbe8:	f000 be98 	b.w	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2283      	movs	r2, #131	; 0x83
 800bbf8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2203      	movs	r2, #3
 800bc08:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bc12:	1d9a      	adds	r2, r3, #6
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	f000 be7e 	b.w	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2203      	movs	r2, #3
 800bc24:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2283      	movs	r2, #131	; 0x83
 800bc2c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2203      	movs	r2, #3
 800bc3c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bc46:	1d9a      	adds	r2, r3, #6
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800bc4e:	2303      	movs	r3, #3
 800bc50:	f000 be64 	b.w	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2283      	movs	r2, #131	; 0x83
 800bc60:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2203      	movs	r2, #3
 800bc70:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bc7a:	1d9a      	adds	r2, r3, #6
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800bc82:	2301      	movs	r3, #1
 800bc84:	f000 be4a 	b.w	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7d9a      	ldrb	r2, [r3, #22]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7d5a      	ldrb	r2, [r3, #21]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7d1a      	ldrb	r2, [r3, #20]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7cda      	ldrb	r2, [r3, #19]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c9a      	ldrb	r2, [r3, #18]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	7b5b      	ldrb	r3, [r3, #13]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	f040 80e2 	bne.w	800be8c <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7e9b      	ldrb	r3, [r3, #26]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800bcea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7edb      	ldrb	r3, [r3, #27]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	4313      	orrs	r3, r2
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7f1b      	ldrb	r3, [r3, #28]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800bd2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7f5b      	ldrb	r3, [r3, #29]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d87a      	bhi.n	800be58 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800bd68:	461a      	mov	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800bd70:	4413      	add	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	dc53      	bgt.n	800be24 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800bd7c:	e029      	b.n	800bdd2 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800bd84:	461a      	mov	r2, r3
 800bd86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd88:	4413      	add	r3, r2
 800bd8a:	005a      	lsls	r2, r3, #1
 800bd8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	3309      	adds	r3, #9
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	440a      	add	r2, r1
 800bd96:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	460a      	mov	r2, r1
 800bda0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdae:	4413      	add	r3, r2
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdb6:	3305      	adds	r3, #5
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	440a      	add	r2, r1
 800bdbe:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	460a      	mov	r2, r1
 800bdc8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800bdcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdce:	3301      	adds	r3, #1
 800bdd0:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800bdd8:	461a      	mov	r2, r3
 800bdda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bddc:	4293      	cmp	r3, r2
 800bdde:	dbce      	blt.n	800bd7e <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2204      	movs	r2, #4
 800bdf6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be08:	3303      	adds	r3, #3
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be18:	1d9a      	adds	r2, r3, #6
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800be20:	f000 bd7c 	b.w	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2284      	movs	r2, #132	; 0x84
 800be30:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2203      	movs	r2, #3
 800be40:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be4a:	1d9a      	adds	r2, r3, #6
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800be52:	2302      	movs	r3, #2
 800be54:	f000 bd62 	b.w	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2203      	movs	r2, #3
 800be5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2284      	movs	r2, #132	; 0x84
 800be64:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2203      	movs	r2, #3
 800be74:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be7e:	1d9a      	adds	r2, r3, #6
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800be86:	2303      	movs	r3, #3
 800be88:	f000 bd48 	b.w	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2284      	movs	r2, #132	; 0x84
 800be98:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2203      	movs	r2, #3
 800bea8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800beb2:	1d9a      	adds	r2, r3, #6
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800beba:	2301      	movs	r3, #1
 800bebc:	f000 bd2e 	b.w	800c91c <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7d9a      	ldrb	r2, [r3, #22]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7d5a      	ldrb	r2, [r3, #21]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7d1a      	ldrb	r2, [r3, #20]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	7cda      	ldrb	r2, [r3, #19]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7c9a      	ldrb	r2, [r3, #18]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	7b9b      	ldrb	r3, [r3, #14]
 800befa:	2b01      	cmp	r3, #1
 800befc:	f040 80d1 	bne.w	800c0a2 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7e9b      	ldrb	r3, [r3, #26]
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800bf12:	021b      	lsls	r3, r3, #8
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800bf22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7edb      	ldrb	r3, [r3, #27]
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	7f1b      	ldrb	r3, [r3, #28]
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800bf66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	7f5b      	ldrb	r3, [r3, #29]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800bf8e:	461a      	mov	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800bf96:	429a      	cmp	r2, r3
 800bf98:	dd69      	ble.n	800c06e <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d005      	beq.n	800bfb0 <ModBUS+0xa60>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800bfaa:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800bfae:	d144      	bne.n	800c03a <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800bfb6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800bfba:	d10d      	bne.n	800bfd8 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2201      	movs	r2, #1
 800bfcc:	408a      	lsls	r2, r1
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800bfd6:	e003      	b.n	800bfe0 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7f5a      	ldrb	r2, [r3, #29]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7f1a      	ldrb	r2, [r3, #28]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7eda      	ldrb	r2, [r3, #27]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7e9a      	ldrb	r2, [r3, #26]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2205      	movs	r2, #5
 800c00c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c01e:	3306      	adds	r3, #6
 800c020:	b2da      	uxtb	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c02e:	1d9a      	adds	r2, r3, #6
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c036:	f000 bc71 	b.w	800c91c <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2202      	movs	r2, #2
 800c03e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2285      	movs	r2, #133	; 0x85
 800c046:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2203      	movs	r2, #3
 800c056:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c060:	1d9a      	adds	r2, r3, #6
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c068:	2302      	movs	r3, #2
 800c06a:	f000 bc57 	b.w	800c91c <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2203      	movs	r2, #3
 800c072:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2285      	movs	r2, #133	; 0x85
 800c07a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2203      	movs	r2, #3
 800c08a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c094:	1d9a      	adds	r2, r3, #6
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c09c:	2303      	movs	r3, #3
 800c09e:	f000 bc3d 	b.w	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2285      	movs	r2, #133	; 0x85
 800c0ae:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2203      	movs	r2, #3
 800c0be:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c0c8:	1d9a      	adds	r2, r3, #6
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f000 bc23 	b.w	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	7d9a      	ldrb	r2, [r3, #22]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	7d5a      	ldrb	r2, [r3, #21]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7d1a      	ldrb	r2, [r3, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	7cda      	ldrb	r2, [r3, #19]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	7c9a      	ldrb	r2, [r3, #18]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c108:	2300      	movs	r3, #0
 800c10a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c10c:	2300      	movs	r3, #0
 800c10e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7bdb      	ldrb	r3, [r3, #15]
 800c114:	2b01      	cmp	r3, #1
 800c116:	f040 80a3 	bne.w	800c260 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7e9b      	ldrb	r3, [r3, #26]
 800c11e:	b29a      	uxth	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c12c:	021b      	lsls	r3, r3, #8
 800c12e:	b29a      	uxth	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c13c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c140:	b29a      	uxth	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	7edb      	ldrb	r3, [r3, #27]
 800c152:	b29b      	uxth	r3, r3
 800c154:	4313      	orrs	r3, r2
 800c156:	b29a      	uxth	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c164:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7f1b      	ldrb	r3, [r3, #28]
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c178:	021b      	lsls	r3, r3, #8
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c188:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7f5b      	ldrb	r3, [r3, #29]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d838      	bhi.n	800c22e <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c1bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	7f11      	ldrb	r1, [r2, #28]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	460a      	mov	r2, r1
 800c1c8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c1cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	7f51      	ldrb	r1, [r2, #29]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	460a      	mov	r2, r1
 800c1da:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	7f5a      	ldrb	r2, [r3, #29]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7f1a      	ldrb	r2, [r3, #28]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7eda      	ldrb	r2, [r3, #27]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7e9a      	ldrb	r2, [r3, #26]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2206      	movs	r2, #6
 800c20a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2206      	movs	r2, #6
 800c21a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c224:	1d9a      	adds	r2, r3, #6
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c22c:	e376      	b.n	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2286      	movs	r2, #134	; 0x86
 800c23a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2203      	movs	r2, #3
 800c24a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c254:	1d9a      	adds	r2, r3, #6
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c25c:	2302      	movs	r3, #2
 800c25e:	e35d      	b.n	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2286      	movs	r2, #134	; 0x86
 800c26c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2203      	movs	r2, #3
 800c27c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c286:	1d9a      	adds	r2, r3, #6
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c28e:	2301      	movs	r3, #1
 800c290:	e344      	b.n	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	7d9a      	ldrb	r2, [r3, #22]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7d5a      	ldrb	r2, [r3, #21]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7d1a      	ldrb	r2, [r3, #20]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7cda      	ldrb	r2, [r3, #19]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	7c9a      	ldrb	r2, [r3, #18]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7c1b      	ldrb	r3, [r3, #16]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	f040 810f 	bne.w	800c4f0 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7e9b      	ldrb	r3, [r3, #26]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c2e4:	021b      	lsls	r3, r3, #8
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c2f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	7edb      	ldrb	r3, [r3, #27]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	4313      	orrs	r3, r2
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	7f1b      	ldrb	r3, [r3, #28]
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c338:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7f5b      	ldrb	r3, [r3, #29]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800c366:	b29b      	uxth	r3, r3
 800c368:	429a      	cmp	r2, r3
 800c36a:	f200 80a8 	bhi.w	800c4be <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c374:	461a      	mov	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c37c:	4413      	add	r3, r2
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800c384:	4293      	cmp	r3, r2
 800c386:	f300 8081 	bgt.w	800c48c <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800c38a:	2300      	movs	r3, #0
 800c38c:	657b      	str	r3, [r7, #84]	; 0x54
 800c38e:	2300      	movs	r3, #0
 800c390:	653b      	str	r3, [r7, #80]	; 0x50
 800c392:	2300      	movs	r3, #0
 800c394:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c396:	2300      	movs	r3, #0
 800c398:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7f9b      	ldrb	r3, [r3, #30]
 800c39e:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800c3a0:	e00e      	b.n	800c3c0 <ModBUS+0xe70>
									{
										data=data<<8;
 800c3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3a4:	021b      	lsls	r3, r3, #8
 800c3a6:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800c3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3aa:	330c      	adds	r3, #12
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	7c9b      	ldrb	r3, [r3, #18]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800c3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800c3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1ed      	bne.n	800c3a2 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3d0:	4093      	lsls	r3, r2
 800c3d2:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c3d4:	e00f      	b.n	800c3f6 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c3dc:	461a      	mov	r2, r3
 800c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e0:	4413      	add	r3, r2
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800c3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c400:	4293      	cmp	r3, r2
 800c402:	d3e8      	bcc.n	800c3d6 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800c404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c406:	43db      	mvns	r3, r3
 800c408:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800c410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c412:	401a      	ands	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800c41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c41c:	43db      	mvns	r3, r3
 800c41e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c420:	4013      	ands	r3, r2
 800c422:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800c42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c42c:	431a      	orrs	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7f5a      	ldrb	r2, [r3, #29]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7f1a      	ldrb	r2, [r3, #28]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	7eda      	ldrb	r2, [r3, #27]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7e9a      	ldrb	r2, [r3, #26]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	220f      	movs	r2, #15
 800c460:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c472:	3306      	adds	r3, #6
 800c474:	b2da      	uxtb	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c482:	1d9a      	adds	r2, r3, #6
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c48a:	e247      	b.n	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	228f      	movs	r2, #143	; 0x8f
 800c498:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4b2:	1d9a      	adds	r2, r3, #6
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	e22e      	b.n	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2203      	movs	r2, #3
 800c4c2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	228f      	movs	r2, #143	; 0x8f
 800c4ca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2203      	movs	r2, #3
 800c4da:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4e4:	1d9a      	adds	r2, r3, #6
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e215      	b.n	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	228f      	movs	r2, #143	; 0x8f
 800c4fc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2203      	movs	r2, #3
 800c50c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c516:	1d9a      	adds	r2, r3, #6
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c51e:	2301      	movs	r3, #1
 800c520:	e1fc      	b.n	800c91c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7d9a      	ldrb	r2, [r3, #22]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	7d5a      	ldrb	r2, [r3, #21]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	7d1a      	ldrb	r2, [r3, #20]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7cda      	ldrb	r2, [r3, #19]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7c9a      	ldrb	r2, [r3, #18]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c554:	2300      	movs	r3, #0
 800c556:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c55a:	2300      	movs	r3, #0
 800c55c:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	7c5b      	ldrb	r3, [r3, #17]
 800c562:	2b01      	cmp	r3, #1
 800c564:	f040 80eb 	bne.w	800c73e <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7e9b      	ldrb	r3, [r3, #26]
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800c58a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c58e:	b29a      	uxth	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7edb      	ldrb	r3, [r3, #27]
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7f1b      	ldrb	r3, [r3, #28]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800c5d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	7f5b      	ldrb	r3, [r3, #29]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800c606:	b29b      	uxth	r3, r3
 800c608:	429a      	cmp	r2, r3
 800c60a:	d87f      	bhi.n	800c70c <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800c61a:	4413      	add	r3, r2
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800c622:	4293      	cmp	r3, r2
 800c624:	dc59      	bgt.n	800c6da <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800c626:	e029      	b.n	800c67c <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c628:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c62c:	f103 020d 	add.w	r2, r3, #13
 800c630:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c632:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c636:	440b      	add	r3, r1
 800c638:	6879      	ldr	r1, [r7, #4]
 800c63a:	440a      	add	r2, r1
 800c63c:	7c91      	ldrb	r1, [r2, #18]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	460a      	mov	r2, r1
 800c644:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800c648:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c64c:	3301      	adds	r3, #1
 800c64e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c652:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c656:	f103 020d 	add.w	r2, r3, #13
 800c65a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c65c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c660:	440b      	add	r3, r1
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	440a      	add	r2, r1
 800c666:	7c91      	ldrb	r1, [r2, #18]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	4413      	add	r3, r2
 800c66c:	460a      	mov	r2, r1
 800c66e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800c672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c676:	3301      	adds	r3, #1
 800c678:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7f9b      	ldrb	r3, [r3, #30]
 800c680:	b29b      	uxth	r3, r3
 800c682:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c686:	429a      	cmp	r2, r3
 800c688:	d3ce      	bcc.n	800c628 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7f5a      	ldrb	r2, [r3, #29]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	7f1a      	ldrb	r2, [r3, #28]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7eda      	ldrb	r2, [r3, #27]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7e9a      	ldrb	r2, [r3, #26]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2210      	movs	r2, #16
 800c6b6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2206      	movs	r2, #6
 800c6c6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6d0:	1d9a      	adds	r2, r3, #6
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c6d8:	e120      	b.n	800c91c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2290      	movs	r2, #144	; 0x90
 800c6e6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c700:	1d9a      	adds	r2, r3, #6
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c708:	2302      	movs	r3, #2
 800c70a:	e107      	b.n	800c91c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2203      	movs	r2, #3
 800c710:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2290      	movs	r2, #144	; 0x90
 800c718:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2203      	movs	r2, #3
 800c728:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c732:	1d9a      	adds	r2, r3, #6
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c73a:	2303      	movs	r3, #3
 800c73c:	e0ee      	b.n	800c91c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2290      	movs	r2, #144	; 0x90
 800c74a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2203      	movs	r2, #3
 800c75a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c764:	1d9a      	adds	r2, r3, #6
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c76c:	2301      	movs	r3, #1
 800c76e:	e0d5      	b.n	800c91c <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7e5b      	ldrb	r3, [r3, #25]
 800c77c:	3b80      	subs	r3, #128	; 0x80
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7e1a      	ldrb	r2, [r3, #24]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2203      	movs	r2, #3
 800c794:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7d9a      	ldrb	r2, [r3, #22]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7d5a      	ldrb	r2, [r3, #21]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7d1a      	ldrb	r2, [r3, #20]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7cda      	ldrb	r2, [r3, #19]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7c9a      	ldrb	r2, [r3, #18]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c7d0:	1d9a      	adds	r2, r3, #6
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e09f      	b.n	800c91c <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e09d      	b.n	800c91c <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	791b      	ldrb	r3, [r3, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f040 8099 	bne.w	800c91c <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f103 0212 	add.w	r2, r3, #18
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	f7fe fda5 	bl	800b348 <ModBUS_Check>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 808b 	beq.w	800c91c <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7fe fdbd 	bl	800b386 <ModBUS_Check_tid>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d04f      	beq.n	800c8b2 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7e5b      	ldrb	r3, [r3, #25]
 800c816:	2b03      	cmp	r3, #3
 800c818:	d143      	bne.n	800c8a2 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c82a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800c82c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800c838:	b29a      	uxth	r2, r3
 800c83a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c83c:	4313      	orrs	r3, r2
 800c83e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800c846:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800c84a:	2300      	movs	r3, #0
 800c84c:	643b      	str	r3, [r7, #64]	; 0x40
 800c84e:	e022      	b.n	800c896 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800c850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	f103 0209 	add.w	r2, r3, #9
 800c858:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c85c:	440b      	add	r3, r1
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	440a      	add	r2, r1
 800c864:	7c91      	ldrb	r1, [r2, #18]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4413      	add	r3, r2
 800c86a:	460a      	mov	r2, r1
 800c86c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800c870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c872:	3305      	adds	r3, #5
 800c874:	005a      	lsls	r2, r3, #1
 800c876:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c87a:	440b      	add	r3, r1
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	3301      	adds	r3, #1
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	440a      	add	r2, r1
 800c884:	7c91      	ldrb	r1, [r2, #18]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	4413      	add	r3, r2
 800c88a:	460a      	mov	r2, r1
 800c88c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800c890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c892:	3301      	adds	r3, #1
 800c894:	643b      	str	r3, [r7, #64]	; 0x40
 800c896:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c89a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c89c:	429a      	cmp	r2, r3
 800c89e:	dbd7      	blt.n	800c850 <ModBUS+0x1300>

						}


					}
					break;
 800c8a0:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	7ddb      	ldrb	r3, [r3, #23]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7e9b      	ldrb	r3, [r3, #26]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8b0:	e034      	b.n	800c91c <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	7e5b      	ldrb	r3, [r3, #25]
 800c8b6:	3b81      	subs	r3, #129	; 0x81
 800c8b8:	2b15      	cmp	r3, #21
 800c8ba:	d82f      	bhi.n	800c91c <ModBUS+0x13cc>
 800c8bc:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <ModBUS+0x1374>)
 800c8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c2:	bf00      	nop
 800c8c4:	0800c91d 	.word	0x0800c91d
 800c8c8:	0800c91d 	.word	0x0800c91d
 800c8cc:	0800c91d 	.word	0x0800c91d
 800c8d0:	0800c91d 	.word	0x0800c91d
 800c8d4:	0800c91d 	.word	0x0800c91d
 800c8d8:	0800c91d 	.word	0x0800c91d
 800c8dc:	0800c91d 	.word	0x0800c91d
 800c8e0:	0800c91d 	.word	0x0800c91d
 800c8e4:	0800c91d 	.word	0x0800c91d
 800c8e8:	0800c91d 	.word	0x0800c91d
 800c8ec:	0800c91d 	.word	0x0800c91d
 800c8f0:	0800c91d 	.word	0x0800c91d
 800c8f4:	0800c91d 	.word	0x0800c91d
 800c8f8:	0800c91d 	.word	0x0800c91d
 800c8fc:	0800c91d 	.word	0x0800c91d
 800c900:	0800c91d 	.word	0x0800c91d
 800c904:	0800c91d 	.word	0x0800c91d
 800c908:	0800c91d 	.word	0x0800c91d
 800c90c:	0800c91d 	.word	0x0800c91d
 800c910:	0800c91d 	.word	0x0800c91d
 800c914:	0800c91d 	.word	0x0800c91d
 800c918:	0800c91d 	.word	0x0800c91d
			}
		}
	}


}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3770      	adds	r7, #112	; 0x70
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af02      	add	r7, sp, #8
 800c92a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6858      	ldr	r0, [r3, #4]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	891b      	ldrh	r3, [r3, #8]
 800c934:	2200      	movs	r2, #0
 800c936:	4619      	mov	r1, r3
 800c938:	f7f6 fa5a 	bl	8002df0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f103 0114 	add.w	r1, r3, #20
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f103 0218 	add.w	r2, r3, #24
 800c94c:	2364      	movs	r3, #100	; 0x64
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2304      	movs	r3, #4
 800c952:	f7f6 ff62 	bl	800381a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6858      	ldr	r0, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	891b      	ldrh	r3, [r3, #8]
 800c95e:	2201      	movs	r2, #1
 800c960:	4619      	mov	r1, r3
 800c962:	f7f6 fa45 	bl	8002df0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7edb      	ldrb	r3, [r3, #27]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b086      	sub	sp, #24
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	4608      	mov	r0, r1
 800c97c:	4611      	mov	r1, r2
 800c97e:	461a      	mov	r2, r3
 800c980:	4603      	mov	r3, r0
 800c982:	70fb      	strb	r3, [r7, #3]
 800c984:	460b      	mov	r3, r1
 800c986:	70bb      	strb	r3, [r7, #2]
 800c988:	4613      	mov	r3, r2
 800c98a:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	787a      	ldrb	r2, [r7, #1]
 800c994:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	78fa      	ldrb	r2, [r7, #3]
 800c99a:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	78ba      	ldrb	r2, [r7, #2]
 800c9a0:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800c9a8:	787b      	ldrb	r3, [r7, #1]
 800c9aa:	2bf0      	cmp	r3, #240	; 0xf0
 800c9ac:	d11d      	bne.n	800c9ea <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	e013      	b.n	800c9dc <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6a3a      	ldr	r2, [r7, #32]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	781a      	ldrb	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff ffaf 	bl	800c924 <SPI_ETH>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	7d9b      	ldrb	r3, [r3, #22]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	613b      	str	r3, [r7, #16]
 800c9dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	dbe6      	blt.n	800c9b4 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800c9e6:	8afb      	ldrh	r3, [r7, #22]
 800c9e8:	e037      	b.n	800ca5a <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800c9ea:	787b      	ldrb	r3, [r7, #1]
 800c9ec:	2b0f      	cmp	r3, #15
 800c9ee:	d134      	bne.n	800ca5a <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800c9f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d120      	bne.n	800ca40 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e016      	b.n	800ca32 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7ff ff8d 	bl	800c924 <SPI_ETH>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	8afb      	ldrh	r3, [r7, #22]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	7d9b      	ldrb	r3, [r3, #22]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <SPI_ETH_REG+0xba>
 800ca26:	8afb      	ldrh	r3, [r7, #22]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	dbe3      	blt.n	800ca04 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800ca3c:	8afb      	ldrh	r3, [r7, #22]
 800ca3e:	e00c      	b.n	800ca5a <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff ff6f 	bl	800c924 <SPI_ETH>
 800ca46:	4603      	mov	r3, r0
 800ca48:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7d9b      	ldrb	r3, [r3, #22]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	759a      	strb	r2, [r3, #22]
			return(res);
 800ca56:	8afb      	ldrh	r3, [r7, #22]
 800ca58:	e7ff      	b.n	800ca5a <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b086      	sub	sp, #24
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	807b      	strh	r3, [r7, #2]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	22f0      	movs	r2, #240	; 0xf0
 800ca7a:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800ca7c:	883b      	ldrh	r3, [r7, #0]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800ca82:	883b      	ldrh	r3, [r7, #0]
 800ca84:	0a1b      	lsrs	r3, r3, #8
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	613b      	str	r3, [r7, #16]
 800ca90:	e01b      	b.n	800caca <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800ca92:	887b      	ldrh	r3, [r7, #2]
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800ca9a:	887b      	ldrh	r3, [r7, #2]
 800ca9c:	0a1b      	lsrs	r3, r3, #8
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	755a      	strb	r2, [r3, #21]
		addr++;
 800caa6:	887b      	ldrh	r3, [r7, #2]
 800caa8:	3301      	adds	r3, #1
 800caaa:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800caac:	f107 020c 	add.w	r2, r7, #12
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	781a      	ldrb	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff ff32 	bl	800c924 <SPI_ETH>
 800cac0:	4603      	mov	r3, r0
 800cac2:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	3301      	adds	r3, #1
 800cac8:	613b      	str	r3, [r7, #16]
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	dde0      	ble.n	800ca92 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800cad0:	8afb      	ldrh	r3, [r7, #22]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800cada:	b590      	push	{r4, r7, lr}
 800cadc:	b087      	sub	sp, #28
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	461a      	mov	r2, r3
 800cae6:	460b      	mov	r3, r1
 800cae8:	817b      	strh	r3, [r7, #10]
 800caea:	4613      	mov	r3, r2
 800caec:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	220f      	movs	r2, #15
 800caf2:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800caf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cafa:	d226      	bcs.n	800cb4a <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	e01a      	b.n	800cb3e <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800cb08:	897b      	ldrh	r3, [r7, #10]
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800cb10:	897b      	ldrh	r3, [r7, #10]
 800cb12:	0a1b      	lsrs	r3, r3, #8
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800cb1c:	893a      	ldrh	r2, [r7, #8]
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	4413      	add	r3, r2
 800cb22:	461a      	mov	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	189c      	adds	r4, r3, r2
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff fefb 	bl	800c924 <SPI_ETH>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	7023      	strb	r3, [r4, #0]
				addr++;
 800cb32:	897b      	ldrh	r3, [r7, #10]
 800cb34:	3301      	adds	r3, #1
 800cb36:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	617b      	str	r3, [r7, #20]
 800cb3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	dbe0      	blt.n	800cb08 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cb46:	2300      	movs	r3, #0
 800cb48:	e000      	b.n	800cb4c <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800cb4a:	2301      	movs	r3, #1
	}
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}

0800cb54 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	607a      	str	r2, [r7, #4]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	460b      	mov	r3, r1
 800cb62:	817b      	strh	r3, [r7, #10]
 800cb64:	4613      	mov	r3, r2
 800cb66:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	22f0      	movs	r2, #240	; 0xf0
 800cb6c:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800cb6e:	8c3b      	ldrh	r3, [r7, #32]
 800cb70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb74:	d223      	bcs.n	800cbbe <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800cb76:	2300      	movs	r3, #0
 800cb78:	617b      	str	r3, [r7, #20]
 800cb7a:	e01a      	b.n	800cbb2 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800cb7c:	897b      	ldrh	r3, [r7, #10]
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800cb84:	897b      	ldrh	r3, [r7, #10]
 800cb86:	0a1b      	lsrs	r3, r3, #8
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800cb90:	893a      	ldrh	r2, [r7, #8]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4413      	add	r3, r2
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	7f1a      	ldrb	r2, [r3, #28]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff febf 	bl	800c924 <SPI_ETH>
				addr++;
 800cba6:	897b      	ldrh	r3, [r7, #10]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	8c3b      	ldrh	r3, [r7, #32]
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	dbe0      	blt.n	800cb7c <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e000      	b.n	800cbc0 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800cbbe:	2301      	movs	r3, #1
	}
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	22f0      	movs	r2, #240	; 0xf0
 800cbdc:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800cbde:	78fb      	ldrb	r3, [r7, #3]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	78ba      	ldrb	r2, [r7, #2]
 800cbf2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fe95 	bl	800c924 <SPI_ETH>
}
 800cbfa:	bf00      	nop
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
 800cc10:	4613      	mov	r3, r2
 800cc12:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	22f0      	movs	r2, #240	; 0xf0
 800cc18:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800cc1a:	78fb      	ldrb	r3, [r7, #3]
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	78ba      	ldrb	r2, [r7, #2]
 800cc2e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fe77 	bl	800c924 <SPI_ETH>
}
 800cc36:	bf00      	nop
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af02      	add	r7, sp, #8
 800cc46:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc4e:	331c      	adds	r3, #28
 800cc50:	2204      	movs	r2, #4
 800cc52:	9201      	str	r2, [sp, #4]
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	23f0      	movs	r3, #240	; 0xf0
 800cc58:	2201      	movs	r2, #1
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fe88 	bl	800c972 <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc68:	2204      	movs	r2, #4
 800cc6a:	9201      	str	r2, [sp, #4]
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	23f0      	movs	r3, #240	; 0xf0
 800cc70:	2205      	movs	r2, #5
 800cc72:	2100      	movs	r1, #0
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff fe7c 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc80:	3304      	adds	r3, #4
 800cc82:	2206      	movs	r2, #6
 800cc84:	9201      	str	r2, [sp, #4]
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	23f0      	movs	r3, #240	; 0xf0
 800cc8a:	2209      	movs	r2, #9
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fe6f 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc9a:	330a      	adds	r3, #10
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	9201      	str	r2, [sp, #4]
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	23f0      	movs	r3, #240	; 0xf0
 800cca4:	220f      	movs	r2, #15
 800cca6:	2100      	movs	r1, #0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff fe62 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccb4:	330e      	adds	r3, #14
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	23f0      	movs	r3, #240	; 0xf0
 800ccbe:	221a      	movs	r2, #26
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fe55 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccce:	330f      	adds	r3, #15
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	9201      	str	r2, [sp, #4]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	23f0      	movs	r3, #240	; 0xf0
 800ccd8:	221b      	movs	r2, #27
 800ccda:	2100      	movs	r1, #0
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff fe48 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800cce2:	bf00      	nop
 800cce4:	4618      	mov	r0, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af02      	add	r7, sp, #8
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800ccf8:	78fb      	ldrb	r3, [r7, #3]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7ff ff80 	bl	800cc04 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd0a:	331a      	adds	r3, #26
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	9201      	str	r2, [sp, #4]
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	23f0      	movs	r3, #240	; 0xf0
 800cd14:	2204      	movs	r2, #4
 800cd16:	2104      	movs	r1, #4
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff fe2a 	bl	800c972 <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd24:	331c      	adds	r3, #28
 800cd26:	2204      	movs	r2, #4
 800cd28:	9201      	str	r2, [sp, #4]
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	23f0      	movs	r3, #240	; 0xf0
 800cd2e:	220c      	movs	r2, #12
 800cd30:	2104      	movs	r1, #4
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fe1d 	bl	800c972 <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800cd3e:	2202      	movs	r2, #2
 800cd40:	9201      	str	r2, [sp, #4]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	23f0      	movs	r3, #240	; 0xf0
 800cd46:	2210      	movs	r2, #16
 800cd48:	2104      	movs	r1, #4
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fe11 	bl	800c972 <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	2201      	movs	r2, #1
 800cd54:	4619      	mov	r1, r3
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff ff36 	bl	800cbc8 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d106      	bne.n	800cd78 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800cd6a:	78fb      	ldrb	r3, [r7, #3]
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff ff29 	bl	800cbc8 <eth_wr_SOCKET_CMD>
 800cd76:	e009      	b.n	800cd8c <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800cd78:	78fb      	ldrb	r3, [r7, #3]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff ff22 	bl	800cbc8 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800cd84:	2115      	movs	r1, #21
 800cd86:	4804      	ldr	r0, [pc, #16]	; (800cd98 <eth_socket_init+0xac>)
 800cd88:	f7f4 f9ec 	bl	8001164 <ITM0_Write>
	 }
}
 800cd8c:	bf00      	nop
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	0800f690 	.word	0x0800f690

0800cd9c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	220f      	movs	r2, #15
 800cdac:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff fdad 	bl	800c924 <SPI_ETH>
	return(y->RX[3]);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7edb      	ldrb	r3, [r3, #27]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	220f      	movs	r2, #15
 800cde6:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	3304      	adds	r3, #4
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff fd90 	bl	800c924 <SPI_ETH>
	return(y->RX[3]);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7edb      	ldrb	r3, [r3, #27]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	; 0x30
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
 800ce20:	4613      	mov	r3, r2
 800ce22:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800ce24:	2300      	movs	r3, #0
 800ce26:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800ce28:	2300      	movs	r3, #0
 800ce2a:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800ce30:	2300      	movs	r3, #0
 800ce32:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800ce34:	2300      	movs	r3, #0
 800ce36:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800ce38:	2300      	movs	r3, #0
 800ce3a:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800ce40:	2300      	movs	r3, #0
 800ce42:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800ce44:	2300      	movs	r3, #0
 800ce46:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d83e      	bhi.n	800ced0 <eth_rd_SOCKET_DATA+0xc0>
 800ce52:	a201      	add	r2, pc, #4	; (adr r2, 800ce58 <eth_rd_SOCKET_DATA+0x48>)
 800ce54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce58:	0800ce69 	.word	0x0800ce69
 800ce5c:	0800ce83 	.word	0x0800ce83
 800ce60:	0800ce9d 	.word	0x0800ce9d
 800ce64:	0800ceb7 	.word	0x0800ceb7
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce72:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800ce80:	e033      	b.n	800ceea <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce88:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ce8c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce94:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ce98:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800ce9a:	e026      	b.n	800ceea <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cea6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ceb2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800ceb4:	e019      	b.n	800ceea <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cec0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cecc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800cece:	e00c      	b.n	800ceea <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ceda:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cee6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800cee8:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	3304      	adds	r3, #4
 800ceee:	b2d9      	uxtb	r1, r3
 800cef0:	2302      	movs	r3, #2
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	f107 0310 	add.w	r3, r7, #16
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	230f      	movs	r3, #15
 800cefc:	2228      	movs	r2, #40	; 0x28
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff fd37 	bl	800c972 <SPI_ETH_REG>
 800cf04:	4603      	mov	r3, r0
 800cf06:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800cf08:	8b7a      	ldrh	r2, [r7, #26]
 800cf0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800cf10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf12:	8b3b      	ldrh	r3, [r7, #24]
 800cf14:	4413      	add	r3, r2
 800cf16:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800cf18:	8b3a      	ldrh	r2, [r7, #24]
 800cf1a:	893b      	ldrh	r3, [r7, #8]
 800cf1c:	441a      	add	r2, r3
 800cf1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf20:	3301      	adds	r3, #1
 800cf22:	429a      	cmp	r2, r3
 800cf24:	dd2c      	ble.n	800cf80 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800cf26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf28:	8b3b      	ldrh	r3, [r7, #24]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	3301      	adds	r3, #1
 800cf30:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f103 021c 	add.w	r2, r3, #28
 800cf38:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800cf3a:	8af9      	ldrh	r1, [r7, #22]
 800cf3c:	8bfb      	ldrh	r3, [r7, #30]
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	4603      	mov	r3, r0
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fdc9 	bl	800cada <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800cf48:	8bba      	ldrh	r2, [r7, #28]
 800cf4a:	8bfb      	ldrh	r3, [r7, #30]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800cf50:	893a      	ldrh	r2, [r7, #8]
 800cf52:	8bfb      	ldrh	r3, [r7, #30]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800cf58:	8bfb      	ldrh	r3, [r7, #30]
 800cf5a:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f103 021c 	add.w	r2, r3, #28
 800cf62:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800cf64:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800cf66:	8c3b      	ldrh	r3, [r7, #32]
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f7ff fdb4 	bl	800cada <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800cf72:	8b7a      	ldrh	r2, [r7, #26]
 800cf74:	893b      	ldrh	r3, [r7, #8]
 800cf76:	4413      	add	r3, r2
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	801a      	strh	r2, [r3, #0]
 800cf7e:	e010      	b.n	800cfa2 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f103 021c 	add.w	r2, r3, #28
 800cf86:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800cf88:	8af9      	ldrh	r1, [r7, #22]
 800cf8a:	893b      	ldrh	r3, [r7, #8]
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	4603      	mov	r3, r0
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff fda2 	bl	800cada <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800cf96:	8b7a      	ldrh	r2, [r7, #26]
 800cf98:	893b      	ldrh	r3, [r7, #8]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	b29b      	uxth	r3, r3
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3728      	adds	r7, #40	; 0x28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop

0800cfb0 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08c      	sub	sp, #48	; 0x30
 800cfb4:	af02      	add	r7, sp, #8
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	72fb      	strb	r3, [r7, #11]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800cfc8:	2300      	movs	r3, #0
 800cfca:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800cfcc:	2300      	movs	r3, #0
 800cfce:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800cfd8:	2300      	movs	r3, #0
 800cfda:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800cfdc:	2300      	movs	r3, #0
 800cfde:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800cfe8:	2300      	movs	r3, #0
 800cfea:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d83e      	bhi.n	800d074 <eth_wr_SOCKET_DATA+0xc4>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <eth_wr_SOCKET_DATA+0x4c>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d00d 	.word	0x0800d00d
 800d000:	0800d027 	.word	0x0800d027
 800d004:	0800d041 	.word	0x0800d041
 800d008:	0800d05b 	.word	0x0800d05b
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d012:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d016:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d022:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d024:	e033      	b.n	800d08e <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d030:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d03c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d03e:	e026      	b.n	800d08e <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d04a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d052:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d056:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d058:	e019      	b.n	800d08e <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d060:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d064:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d06c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d070:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d072:	e00c      	b.n	800d08e <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d07a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d07e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d08a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800d08c:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d08e:	e00e      	b.n	800d0ae <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	3304      	adds	r3, #4
 800d094:	b2d9      	uxtb	r1, r3
 800d096:	2302      	movs	r3, #2
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	f107 0310 	add.w	r3, r7, #16
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	230f      	movs	r3, #15
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fc64 	bl	800c972 <SPI_ETH_REG>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d0ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0b0:	893b      	ldrh	r3, [r7, #8]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d3ec      	bcc.n	800d090 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	b2d9      	uxtb	r1, r3
 800d0bc:	2302      	movs	r3, #2
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	f107 0310 	add.w	r3, r7, #16
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	230f      	movs	r3, #15
 800d0c8:	2224      	movs	r2, #36	; 0x24
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7ff fc51 	bl	800c972 <SPI_ETH_REG>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800d0d4:	8b3a      	ldrh	r2, [r7, #24]
 800d0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0d8:	4013      	ands	r3, r2
 800d0da:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800d0dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d0de:	8afb      	ldrh	r3, [r7, #22]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d0e4:	8afa      	ldrh	r2, [r7, #22]
 800d0e6:	893b      	ldrh	r3, [r7, #8]
 800d0e8:	441a      	add	r2, r3
 800d0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	dd2c      	ble.n	800d14c <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d0f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d0f4:	8afb      	ldrh	r3, [r7, #22]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f103 021c 	add.w	r2, r3, #28
 800d104:	8c38      	ldrh	r0, [r7, #32]
 800d106:	8ab9      	ldrh	r1, [r7, #20]
 800d108:	8bbb      	ldrh	r3, [r7, #28]
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	4603      	mov	r3, r0
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f7ff fd20 	bl	800cb54 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d114:	8b7a      	ldrh	r2, [r7, #26]
 800d116:	8bbb      	ldrh	r3, [r7, #28]
 800d118:	4413      	add	r3, r2
 800d11a:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800d11c:	893a      	ldrh	r2, [r7, #8]
 800d11e:	8bbb      	ldrh	r3, [r7, #28]
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800d124:	8bbb      	ldrh	r3, [r7, #28]
 800d126:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f103 021c 	add.w	r2, r3, #28
 800d12e:	8c38      	ldrh	r0, [r7, #32]
 800d130:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800d132:	8bfb      	ldrh	r3, [r7, #30]
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	4603      	mov	r3, r0
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7ff fd0b 	bl	800cb54 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d13e:	8b3a      	ldrh	r2, [r7, #24]
 800d140:	893b      	ldrh	r3, [r7, #8]
 800d142:	4413      	add	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	801a      	strh	r2, [r3, #0]
 800d14a:	e010      	b.n	800d16e <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f103 021c 	add.w	r2, r3, #28
 800d152:	8c38      	ldrh	r0, [r7, #32]
 800d154:	8ab9      	ldrh	r1, [r7, #20]
 800d156:	893b      	ldrh	r3, [r7, #8]
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	4603      	mov	r3, r0
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff fcf9 	bl	800cb54 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d162:	8b3a      	ldrh	r2, [r7, #24]
 800d164:	893b      	ldrh	r3, [r7, #8]
 800d166:	4413      	add	r3, r2
 800d168:	b29a      	uxth	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	801a      	strh	r2, [r3, #0]
					}

}
 800d16e:	bf00      	nop
 800d170:	4618      	mov	r0, r3
 800d172:	3728      	adds	r7, #40	; 0x28
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b090      	sub	sp, #64	; 0x40
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800d186:	2300      	movs	r3, #0
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d18a:	2300      	movs	r3, #0
 800d18c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d18e:	2300      	movs	r3, #0
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
 800d192:	2300      	movs	r3, #0
 800d194:	633b      	str	r3, [r7, #48]	; 0x30
 800d196:	2300      	movs	r3, #0
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d19a:	2300      	movs	r3, #0
 800d19c:	61fb      	str	r3, [r7, #28]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	623b      	str	r3, [r7, #32]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800d1c2:	69fa      	ldr	r2, [r7, #28]
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	f2c0 8315 	blt.w	800d7f6 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800d1d0:	e00c      	b.n	800d1ec <FT_String_ND+0x74>
							{
								n++;
 800d1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800d1d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	441a      	add	r2, r3
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	dd02      	ble.n	800d1ec <FT_String_ND+0x74>
								{
									estado=0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	623b      	str	r3, [r7, #32]
									break;
 800d1ea:	e009      	b.n	800d200 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781a      	ldrb	r2, [r3, #0]
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	440b      	add	r3, r1
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d1e8      	bne.n	800d1d2 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800d200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d202:	3301      	adds	r3, #1
 800d204:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	3301      	adds	r3, #1
 800d20a:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800d20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	429a      	cmp	r2, r3
 800d212:	d108      	bne.n	800d226 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800d214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d21e:	601a      	str	r2, [r3, #0]
									estado=1;
 800d220:	2301      	movs	r3, #1
 800d222:	623b      	str	r3, [r7, #32]
									break;
 800d224:	e010      	b.n	800d248 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800d226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	dd02      	ble.n	800d234 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800d22e:	2300      	movs	r3, #0
 800d230:	623b      	str	r3, [r7, #32]
									 break;
 800d232:	e009      	b.n	800d248 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800d234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	4413      	add	r3, r2
 800d23a:	781a      	ldrb	r2, [r3, #0]
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	440b      	add	r3, r1
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	429a      	cmp	r2, r3
 800d246:	d0db      	beq.n	800d200 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	1e5a      	subs	r2, r3, #1
 800d24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d24e:	4413      	add	r3, r2
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	429a      	cmp	r2, r3
 800d254:	dd02      	ble.n	800d25c <FT_String_ND+0xe4>
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d1b7      	bne.n	800d1cc <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800d25c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	e2c8      	b.n	800d7f8 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800d266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d12c      	bne.n	800d2c6 <FT_String_ND+0x14e>
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d129      	bne.n	800d2c6 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800d272:	e014      	b.n	800d29e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800d274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	441a      	add	r2, r3
 800d27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27e:	4413      	add	r3, r2
 800d280:	3b01      	subs	r3, #1
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	441a      	add	r2, r3
 800d286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d288:	6819      	ldr	r1, [r3, #0]
 800d28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28c:	440b      	add	r3, r1
 800d28e:	3b01      	subs	r3, #1
 800d290:	68f9      	ldr	r1, [r7, #12]
 800d292:	440b      	add	r3, r1
 800d294:	7812      	ldrb	r2, [r2, #0]
 800d296:	701a      	strb	r2, [r3, #0]
										n3++;
 800d298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29a:	3301      	adds	r3, #1
 800d29c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800d29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	441a      	add	r2, r3
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	4413      	add	r3, r2
 800d2aa:	69fa      	ldr	r2, [r7, #28]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	dae1      	bge.n	800d274 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800d2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b6:	4413      	add	r3, r2
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	601a      	str	r2, [r3, #0]
							estado=3;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	623b      	str	r3, [r7, #32]
							return(estado);
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	e298      	b.n	800d7f8 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800d2c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	f040 80be 	bne.w	800d44a <FT_String_ND+0x2d2>
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	f040 80ba 	bne.w	800d44a <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d2d6:	e012      	b.n	800d2fe <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800d2d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	1ad2      	subs	r2, r2, r3
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	4413      	add	r3, r2
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	441a      	add	r2, r3
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d2ec:	440b      	add	r3, r1
 800d2ee:	7812      	ldrb	r2, [r2, #0]
 800d2f0:	701a      	strb	r2, [r3, #0]
								n4++;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800d2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2fc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d2fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	1ad2      	subs	r2, r2, r3
 800d304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d306:	4413      	add	r3, r2
 800d308:	69fa      	ldr	r2, [r7, #28]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	dae4      	bge.n	800d2d8 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800d30e:	499d      	ldr	r1, [pc, #628]	; (800d584 <FT_String_ND+0x40c>)
 800d310:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d312:	f000 fd89 	bl	800de28 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800d316:	499c      	ldr	r1, [pc, #624]	; (800d588 <FT_String_ND+0x410>)
 800d318:	2000      	movs	r0, #0
 800d31a:	f000 fd85 	bl	800de28 <strtok>
 800d31e:	4603      	mov	r3, r0
 800d320:	4618      	mov	r0, r3
 800d322:	f000 fb66 	bl	800d9f2 <atoi>
 800d326:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800d328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d32a:	3b01      	subs	r3, #1
 800d32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d32e:	429a      	cmp	r2, r3
 800d330:	db02      	blt.n	800d338 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800d332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d334:	3b01      	subs	r3, #1
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800d338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33a:	3306      	adds	r3, #6
 800d33c:	222c      	movs	r2, #44	; 0x2c
 800d33e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	2b09      	cmp	r3, #9
 800d344:	dc0d      	bgt.n	800d362 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800d346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d348:	3308      	adds	r3, #8
 800d34a:	223a      	movs	r2, #58	; 0x3a
 800d34c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	3309      	adds	r3, #9
 800d352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d354:	4413      	add	r3, r2
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	3309      	adds	r3, #9
 800d35e:	627b      	str	r3, [r7, #36]	; 0x24
 800d360:	e021      	b.n	800d3a6 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	2b63      	cmp	r3, #99	; 0x63
 800d366:	dc0d      	bgt.n	800d384 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800d368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d36a:	3309      	adds	r3, #9
 800d36c:	223a      	movs	r2, #58	; 0x3a
 800d36e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	330a      	adds	r3, #10
 800d374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d376:	4413      	add	r3, r2
 800d378:	2200      	movs	r2, #0
 800d37a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37e:	330a      	adds	r3, #10
 800d380:	627b      	str	r3, [r7, #36]	; 0x24
 800d382:	e010      	b.n	800d3a6 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d38a:	da0c      	bge.n	800d3a6 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800d38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d38e:	330a      	adds	r3, #10
 800d390:	223a      	movs	r2, #58	; 0x3a
 800d392:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	330b      	adds	r3, #11
 800d398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d39a:	4413      	add	r3, r2
 800d39c:	2200      	movs	r2, #0
 800d39e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	330b      	adds	r3, #11
 800d3a4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800d3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3aa:	601a      	str	r2, [r3, #0]
							n4=0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d3b0:	e016      	b.n	800d3e0 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800d3b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	1ad2      	subs	r2, r2, r3
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ba:	441a      	add	r2, r3
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	4413      	add	r3, r2
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	441a      	add	r2, r3
 800d3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	1ac9      	subs	r1, r1, r3
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	440b      	add	r3, r1
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	440b      	add	r3, r1
 800d3d6:	7812      	ldrb	r2, [r2, #0]
 800d3d8:	701a      	strb	r2, [r3, #0]
								n4++;
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	3301      	adds	r3, #1
 800d3de:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d3e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	1ad2      	subs	r2, r2, r3
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	441a      	add	r2, r3
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	4413      	add	r3, r2
 800d3ee:	69fa      	ldr	r2, [r7, #28]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	dade      	bge.n	800d3b2 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800d3f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	441a      	add	r2, r3
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	1e5a      	subs	r2, r3, #1
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800d404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	1ad2      	subs	r2, r2, r3
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	441a      	add	r2, r3
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	4413      	add	r3, r2
 800d412:	461a      	mov	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	4413      	add	r3, r2
 800d418:	2200      	movs	r2, #0
 800d41a:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800d41c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	1ad2      	subs	r2, r2, r3
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	4413      	add	r3, r2
 800d426:	461a      	mov	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4413      	add	r3, r2
 800d42c:	2200      	movs	r2, #0
 800d42e:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800d430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	1ad2      	subs	r2, r2, r3
 800d436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	440b      	add	r3, r1
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d102      	bne.n	800d446 <FT_String_ND+0x2ce>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2200      	movs	r2, #0
 800d444:	701a      	strb	r2, [r3, #0]
							estado=3;
 800d446:	2303      	movs	r3, #3
 800d448:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800d44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d146      	bne.n	800d4de <FT_String_ND+0x366>
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d143      	bne.n	800d4de <FT_String_ND+0x366>
						{
						n3=0;
 800d456:	2300      	movs	r3, #0
 800d458:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800d45a:	e00e      	b.n	800d47a <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800d45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	4413      	add	r3, r2
 800d464:	3b01      	subs	r3, #1
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	441a      	add	r2, r3
 800d46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d46e:	440b      	add	r3, r1
 800d470:	7812      	ldrb	r2, [r2, #0]
 800d472:	701a      	strb	r2, [r3, #0]
										n3++;
 800d474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d476:	3301      	adds	r3, #1
 800d478:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800d47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	429a      	cmp	r2, r3
 800d480:	dbec      	blt.n	800d45c <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800d482:	2300      	movs	r3, #0
 800d484:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800d486:	e014      	b.n	800d4b2 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800d488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	441a      	add	r2, r3
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	4413      	add	r3, r2
 800d494:	3b01      	subs	r3, #1
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	441a      	add	r2, r3
 800d49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49c:	6819      	ldr	r1, [r3, #0]
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	440b      	add	r3, r1
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	68f9      	ldr	r1, [r7, #12]
 800d4a6:	440b      	add	r3, r1
 800d4a8:	7812      	ldrb	r2, [r2, #0]
 800d4aa:	701a      	strb	r2, [r3, #0]
										n5++;
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800d4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	441a      	add	r2, r3
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	441a      	add	r2, r3
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	dde0      	ble.n	800d488 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800d4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	4413      	add	r3, r2
 800d4ce:	1e5a      	subs	r2, r3, #1
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800d4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d8:	601a      	str	r2, [r3, #0]
							estado=3;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800d4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4e0:	2b04      	cmp	r3, #4
 800d4e2:	f040 80bd 	bne.w	800d660 <FT_String_ND+0x4e8>
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	f040 80b9 	bne.w	800d660 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d4ee:	e012      	b.n	800d516 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800d4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	1ad2      	subs	r2, r2, r3
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	4413      	add	r3, r2
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	441a      	add	r2, r3
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d504:	440b      	add	r3, r1
 800d506:	7812      	ldrb	r2, [r2, #0]
 800d508:	701a      	strb	r2, [r3, #0]
								n4++;
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	3301      	adds	r3, #1
 800d50e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800d510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d514:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	1ad2      	subs	r2, r2, r3
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	4413      	add	r3, r2
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	429a      	cmp	r2, r3
 800d524:	dae4      	bge.n	800d4f0 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800d526:	4917      	ldr	r1, [pc, #92]	; (800d584 <FT_String_ND+0x40c>)
 800d528:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d52a:	f000 fc7d 	bl	800de28 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800d52e:	4916      	ldr	r1, [pc, #88]	; (800d588 <FT_String_ND+0x410>)
 800d530:	2000      	movs	r0, #0
 800d532:	f000 fc79 	bl	800de28 <strtok>
 800d536:	4603      	mov	r3, r0
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fa5a 	bl	800d9f2 <atoi>
 800d53e:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800d540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d542:	3b01      	subs	r3, #1
 800d544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d546:	429a      	cmp	r2, r3
 800d548:	db02      	blt.n	800d550 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800d54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d54c:	3b01      	subs	r3, #1
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800d550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d552:	3306      	adds	r3, #6
 800d554:	222c      	movs	r2, #44	; 0x2c
 800d556:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	2b09      	cmp	r3, #9
 800d55c:	dc07      	bgt.n	800d56e <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800d55e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d560:	3308      	adds	r3, #8
 800d562:	223a      	movs	r2, #58	; 0x3a
 800d564:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	3309      	adds	r3, #9
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
 800d56c:	e019      	b.n	800d5a2 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	2b63      	cmp	r3, #99	; 0x63
 800d572:	dc0b      	bgt.n	800d58c <FT_String_ND+0x414>
														{
															c[9]=':';
 800d574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d576:	3309      	adds	r3, #9
 800d578:	223a      	movs	r2, #58	; 0x3a
 800d57a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	330a      	adds	r3, #10
 800d580:	627b      	str	r3, [r7, #36]	; 0x24
 800d582:	e00e      	b.n	800d5a2 <FT_String_ND+0x42a>
 800d584:	0800f6a8 	.word	0x0800f6a8
 800d588:	0800f6ac 	.word	0x0800f6ac
														}
														else
														{
														if (lngd < 1000)
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d592:	da06      	bge.n	800d5a2 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800d594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d596:	330a      	adds	r3, #10
 800d598:	223a      	movs	r2, #58	; 0x3a
 800d59a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	330b      	adds	r3, #11
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800d5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a6:	601a      	str	r2, [r3, #0]
							n4=0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d5ac:	e016      	b.n	800d5dc <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800d5ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	1ad2      	subs	r2, r2, r3
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	441a      	add	r2, r3
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	4413      	add	r3, r2
 800d5bc:	461a      	mov	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	441a      	add	r2, r3
 800d5c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	1ac9      	subs	r1, r1, r3
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	440b      	add	r3, r1
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	440b      	add	r3, r1
 800d5d2:	7812      	ldrb	r2, [r2, #0]
 800d5d4:	701a      	strb	r2, [r3, #0]
								n4++;
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	3301      	adds	r3, #1
 800d5da:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d5dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	1ad2      	subs	r2, r2, r3
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	441a      	add	r2, r3
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	4413      	add	r3, r2
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	dade      	bge.n	800d5ae <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800d5f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	441a      	add	r2, r3
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	1e5a      	subs	r2, r3, #1
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	601a      	str	r2, [r3, #0]
							n5=0;
 800d600:	2300      	movs	r3, #0
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800d604:	e00f      	b.n	800d626 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800d606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	1ad2      	subs	r2, r2, r3
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	4413      	add	r3, r2
 800d610:	461a      	mov	r2, r3
 800d612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d614:	441a      	add	r2, r3
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d61a:	440b      	add	r3, r1
 800d61c:	7812      	ldrb	r2, [r2, #0]
 800d61e:	701a      	strb	r2, [r3, #0]
								n5++;
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	3301      	adds	r3, #1
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800d626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	1ad2      	subs	r2, r2, r3
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	441a      	add	r2, r3
 800d630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	dbe6      	blt.n	800d606 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800d638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d63a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d63c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800d63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	441a      	add	r2, r3
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	1ad2      	subs	r2, r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4413      	add	r3, r2
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	429a      	cmp	r2, r3
 800d654:	d102      	bne.n	800d65c <FT_String_ND+0x4e4>
							{
								estado=4;
 800d656:	2304      	movs	r3, #4
 800d658:	623b      	str	r3, [r7, #32]
 800d65a:	e001      	b.n	800d660 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800d65c:	2305      	movs	r3, #5
 800d65e:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800d660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d662:	2b05      	cmp	r3, #5
 800d664:	f040 80c5 	bne.w	800d7f2 <FT_String_ND+0x67a>
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	f040 80c1 	bne.w	800d7f2 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d670:	e012      	b.n	800d698 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800d672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	1ad2      	subs	r2, r2, r3
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	4413      	add	r3, r2
 800d67c:	461a      	mov	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	441a      	add	r2, r3
 800d682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d684:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d686:	440b      	add	r3, r1
 800d688:	7812      	ldrb	r2, [r2, #0]
 800d68a:	701a      	strb	r2, [r3, #0]
								n4++;
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	3301      	adds	r3, #1
 800d690:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800d692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d696:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800d698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	1ad2      	subs	r2, r2, r3
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	4413      	add	r3, r2
 800d6a2:	69fa      	ldr	r2, [r7, #28]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	dae4      	bge.n	800d672 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800d6a8:	4955      	ldr	r1, [pc, #340]	; (800d800 <FT_String_ND+0x688>)
 800d6aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d6ac:	f000 fbbc 	bl	800de28 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800d6b0:	4954      	ldr	r1, [pc, #336]	; (800d804 <FT_String_ND+0x68c>)
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f000 fbb8 	bl	800de28 <strtok>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 f999 	bl	800d9f2 <atoi>
 800d6c0:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800d6c2:	4950      	ldr	r1, [pc, #320]	; (800d804 <FT_String_ND+0x68c>)
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	f000 fbaf 	bl	800de28 <strtok>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 f990 	bl	800d9f2 <atoi>
 800d6d2:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800d6d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	db02      	blt.n	800d6e4 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800d6de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800d6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6e6:	3306      	adds	r3, #6
 800d6e8:	222c      	movs	r2, #44	; 0x2c
 800d6ea:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	2b09      	cmp	r3, #9
 800d6f0:	dc07      	bgt.n	800d702 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800d6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6f4:	330a      	adds	r3, #10
 800d6f6:	223a      	movs	r2, #58	; 0x3a
 800d6f8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	330b      	adds	r3, #11
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800d700:	e015      	b.n	800d72e <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800d702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d704:	2b63      	cmp	r3, #99	; 0x63
 800d706:	dc07      	bgt.n	800d718 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800d708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d70a:	330b      	adds	r3, #11
 800d70c:	223a      	movs	r2, #58	; 0x3a
 800d70e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	330c      	adds	r3, #12
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
 800d716:	e00a      	b.n	800d72e <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d71e:	da06      	bge.n	800d72e <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800d720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d722:	330c      	adds	r3, #12
 800d724:	223a      	movs	r2, #58	; 0x3a
 800d726:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	330d      	adds	r3, #13
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800d72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d732:	601a      	str	r2, [r3, #0]
							n4=0;
 800d734:	2300      	movs	r3, #0
 800d736:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d738:	e016      	b.n	800d768 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800d73a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	1ad2      	subs	r2, r2, r3
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	441a      	add	r2, r3
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	4413      	add	r3, r2
 800d748:	461a      	mov	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	441a      	add	r2, r3
 800d74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	1ac9      	subs	r1, r1, r3
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	440b      	add	r3, r1
 800d758:	4619      	mov	r1, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	440b      	add	r3, r1
 800d75e:	7812      	ldrb	r2, [r2, #0]
 800d760:	701a      	strb	r2, [r3, #0]
								n4++;
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	3301      	adds	r3, #1
 800d766:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800d768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	1ad2      	subs	r2, r2, r3
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	441a      	add	r2, r3
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	4413      	add	r3, r2
 800d776:	69fa      	ldr	r2, [r7, #28]
 800d778:	429a      	cmp	r2, r3
 800d77a:	dade      	bge.n	800d73a <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800d77c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	441a      	add	r2, r3
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	1e5a      	subs	r2, r3, #1
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	601a      	str	r2, [r3, #0]
							n5=0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800d790:	e00f      	b.n	800d7b2 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800d792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	1ad2      	subs	r2, r2, r3
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	4413      	add	r3, r2
 800d79c:	461a      	mov	r2, r3
 800d79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7a0:	441a      	add	r2, r3
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d7a6:	440b      	add	r3, r1
 800d7a8:	7812      	ldrb	r2, [r2, #0]
 800d7aa:	701a      	strb	r2, [r3, #0]
								n5++;
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800d7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	441a      	add	r2, r3
 800d7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	dbe6      	blt.n	800d792 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800d7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7c8:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800d7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	441a      	add	r2, r3
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	1ad2      	subs	r2, r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4413      	add	r3, r2
 800d7dc:	69fa      	ldr	r2, [r7, #28]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d105      	bne.n	800d7ee <FT_String_ND+0x676>
							{
								estado=4;
 800d7e2:	2304      	movs	r3, #4
 800d7e4:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800d7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	e001      	b.n	800d7f2 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800d7ee:	2305      	movs	r3, #5
 800d7f0:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	e000      	b.n	800d7f8 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800d7f6:	2302      	movs	r3, #2
			}
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3740      	adds	r7, #64	; 0x40
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	0800f6a8 	.word	0x0800f6a8
 800d804:	0800f6ac 	.word	0x0800f6ac

0800d808 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800d812:	2330      	movs	r3, #48	; 0x30
 800d814:	60bb      	str	r3, [r7, #8]
 800d816:	f107 030c 	add.w	r3, r7, #12
 800d81a:	2200      	movs	r2, #0
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	605a      	str	r2, [r3, #4]
 800d820:	609a      	str	r2, [r3, #8]
 800d822:	60da      	str	r2, [r3, #12]
int i=0;	
 800d824:	2300      	movs	r3, #0
 800d826:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	490f      	ldr	r1, [pc, #60]	; (800d86c <INTOA+0x64>)
 800d830:	4618      	mov	r0, r3
 800d832:	f000 fa7b 	bl	800dd2c <siprintf>
		while(i<=strlen(origbuff))
 800d836:	e00b      	b.n	800d850 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	603a      	str	r2, [r7, #0]
 800d83e:	f107 0108 	add.w	r1, r7, #8
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	440a      	add	r2, r1
 800d846:	7812      	ldrb	r2, [r2, #0]
 800d848:	701a      	strb	r2, [r3, #0]
		i++;
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	3301      	adds	r3, #1
 800d84e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800d850:	f107 0308 	add.w	r3, r7, #8
 800d854:	4618      	mov	r0, r3
 800d856:	f7f2 fccd 	bl	80001f4 <strlen>
 800d85a:	4602      	mov	r2, r0
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d2ea      	bcs.n	800d838 <INTOA+0x30>
		}
		return(i);
 800d862:	69fb      	ldr	r3, [r7, #28]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	0800f6b0 	.word	0x0800f6b0

0800d870 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08c      	sub	sp, #48	; 0x30
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800d87c:	2300      	movs	r3, #0
 800d87e:	753b      	strb	r3, [r7, #20]

int i=0;
 800d880:	2300      	movs	r3, #0
 800d882:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800d884:	2300      	movs	r3, #0
 800d886:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800d888:	f107 0314 	add.w	r3, r7, #20
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	4932      	ldr	r1, [pc, #200]	; (800d958 <FTOA+0xe8>)
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fa4b 	bl	800dd2c <siprintf>
		b=strlen(origbuff);
 800d896:	f107 0314 	add.w	r3, r7, #20
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f2 fcaa 	bl	80001f4 <strlen>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	da25      	bge.n	800d8f8 <FTOA+0x88>
		{
			while(i<=((b)+1))
 800d8ac:	e01d      	b.n	800d8ea <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800d8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d10b      	bne.n	800d8d2 <FTOA+0x62>
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	da07      	bge.n	800d8d2 <FTOA+0x62>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <FTOA+0x62>
				{
					*v1++='.';
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	60ba      	str	r2, [r7, #8]
 800d8ce:	222e      	movs	r2, #46	; 0x2e
 800d8d0:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	60ba      	str	r2, [r7, #8]
 800d8d8:	f107 0114 	add.w	r1, r7, #20
 800d8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8de:	440a      	add	r2, r1
 800d8e0:	7812      	ldrb	r2, [r2, #0]
 800d8e2:	701a      	strb	r2, [r3, #0]
				i++;
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	dddc      	ble.n	800d8ae <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	e02a      	b.n	800d94e <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d10f      	bne.n	800d91e <FTOA+0xae>
			{
				v1[0]='0';
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2230      	movs	r2, #48	; 0x30
 800d902:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	3301      	adds	r3, #1
 800d908:	222e      	movs	r2, #46	; 0x2e
 800d90a:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3302      	adds	r3, #2
 800d910:	7d3a      	ldrb	r2, [r7, #20]
 800d912:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3303      	adds	r3, #3
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	e016      	b.n	800d94c <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	2b00      	cmp	r3, #0
 800d922:	d113      	bne.n	800d94c <FTOA+0xdc>
				{
					*v1++='0';
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	60ba      	str	r2, [r7, #8]
 800d92a:	2230      	movs	r2, #48	; 0x30
 800d92c:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	60ba      	str	r2, [r7, #8]
 800d934:	222e      	movs	r2, #46	; 0x2e
 800d936:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	60ba      	str	r2, [r7, #8]
 800d93e:	2230      	movs	r2, #48	; 0x30
 800d940:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	60ba      	str	r2, [r7, #8]
 800d948:	2200      	movs	r2, #0
 800d94a:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3730      	adds	r7, #48	; 0x30
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	0800f6b0 	.word	0x0800f6b0

0800d95c <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
int x =0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800d96e:	2300      	movs	r3, #0
 800d970:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800d972:	f107 0310 	add.w	r3, r7, #16
 800d976:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <CopiaVector+0x2e>
 800d97e:	68b8      	ldr	r0, [r7, #8]
 800d980:	f7f2 fc38 	bl	80001f4 <strlen>
 800d984:	4603      	mov	r3, r0
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	e02e      	b.n	800d9e8 <CopiaVector+0x8c>
else
	{
		x=c;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d994:	dd01      	ble.n	800d99a <CopiaVector+0x3e>
			{
				return(1);
 800d996:	2301      	movs	r3, #1
 800d998:	e027      	b.n	800d9ea <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800d99e:	e00a      	b.n	800d9b6 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	1c53      	adds	r3, r2, #1
 800d9a4:	60bb      	str	r3, [r7, #8]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	1c59      	adds	r1, r3, #1
 800d9aa:	60f9      	str	r1, [r7, #12]
 800d9ac:	7812      	ldrb	r2, [r2, #0]
 800d9ae:	701a      	strb	r2, [r3, #0]
					p++;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	dbf0      	blt.n	800d9a0 <CopiaVector+0x44>
				}
				if (d==1)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d111      	bne.n	800d9e8 <CopiaVector+0x8c>
				{
				  p=c;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800d9c8:	e008      	b.n	800d9dc <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	60fa      	str	r2, [r7, #12]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	7812      	ldrb	r2, [r2, #0]
 800d9d4:	701a      	strb	r2, [r3, #0]
					  p++;
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	daf2      	bge.n	800d9ca <CopiaVector+0x6e>
				  }
				return (0);
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e000      	b.n	800d9ea <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800d9e8:	2301      	movs	r3, #1
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3720      	adds	r7, #32
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <atoi>:
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	f000 b89d 	b.w	800db34 <strtol>

0800d9fa <__itoa>:
 800d9fa:	1e93      	subs	r3, r2, #2
 800d9fc:	2b22      	cmp	r3, #34	; 0x22
 800d9fe:	b510      	push	{r4, lr}
 800da00:	460c      	mov	r4, r1
 800da02:	d904      	bls.n	800da0e <__itoa+0x14>
 800da04:	2300      	movs	r3, #0
 800da06:	700b      	strb	r3, [r1, #0]
 800da08:	461c      	mov	r4, r3
 800da0a:	4620      	mov	r0, r4
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	2a0a      	cmp	r2, #10
 800da10:	d109      	bne.n	800da26 <__itoa+0x2c>
 800da12:	2800      	cmp	r0, #0
 800da14:	da07      	bge.n	800da26 <__itoa+0x2c>
 800da16:	232d      	movs	r3, #45	; 0x2d
 800da18:	700b      	strb	r3, [r1, #0]
 800da1a:	4240      	negs	r0, r0
 800da1c:	2101      	movs	r1, #1
 800da1e:	4421      	add	r1, r4
 800da20:	f000 f892 	bl	800db48 <__utoa>
 800da24:	e7f1      	b.n	800da0a <__itoa+0x10>
 800da26:	2100      	movs	r1, #0
 800da28:	e7f9      	b.n	800da1e <__itoa+0x24>

0800da2a <itoa>:
 800da2a:	f7ff bfe6 	b.w	800d9fa <__itoa>
	...

0800da30 <_strtol_l.constprop.0>:
 800da30:	2b01      	cmp	r3, #1
 800da32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da36:	d001      	beq.n	800da3c <_strtol_l.constprop.0+0xc>
 800da38:	2b24      	cmp	r3, #36	; 0x24
 800da3a:	d906      	bls.n	800da4a <_strtol_l.constprop.0+0x1a>
 800da3c:	f000 fa96 	bl	800df6c <__errno>
 800da40:	2316      	movs	r3, #22
 800da42:	6003      	str	r3, [r0, #0]
 800da44:	2000      	movs	r0, #0
 800da46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800db30 <_strtol_l.constprop.0+0x100>
 800da4e:	460d      	mov	r5, r1
 800da50:	462e      	mov	r6, r5
 800da52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800da5a:	f017 0708 	ands.w	r7, r7, #8
 800da5e:	d1f7      	bne.n	800da50 <_strtol_l.constprop.0+0x20>
 800da60:	2c2d      	cmp	r4, #45	; 0x2d
 800da62:	d132      	bne.n	800daca <_strtol_l.constprop.0+0x9a>
 800da64:	782c      	ldrb	r4, [r5, #0]
 800da66:	2701      	movs	r7, #1
 800da68:	1cb5      	adds	r5, r6, #2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d05b      	beq.n	800db26 <_strtol_l.constprop.0+0xf6>
 800da6e:	2b10      	cmp	r3, #16
 800da70:	d109      	bne.n	800da86 <_strtol_l.constprop.0+0x56>
 800da72:	2c30      	cmp	r4, #48	; 0x30
 800da74:	d107      	bne.n	800da86 <_strtol_l.constprop.0+0x56>
 800da76:	782c      	ldrb	r4, [r5, #0]
 800da78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da7c:	2c58      	cmp	r4, #88	; 0x58
 800da7e:	d14d      	bne.n	800db1c <_strtol_l.constprop.0+0xec>
 800da80:	786c      	ldrb	r4, [r5, #1]
 800da82:	2310      	movs	r3, #16
 800da84:	3502      	adds	r5, #2
 800da86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da8e:	f04f 0e00 	mov.w	lr, #0
 800da92:	fbb8 f9f3 	udiv	r9, r8, r3
 800da96:	4676      	mov	r6, lr
 800da98:	fb03 8a19 	mls	sl, r3, r9, r8
 800da9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800daa0:	f1bc 0f09 	cmp.w	ip, #9
 800daa4:	d816      	bhi.n	800dad4 <_strtol_l.constprop.0+0xa4>
 800daa6:	4664      	mov	r4, ip
 800daa8:	42a3      	cmp	r3, r4
 800daaa:	dd24      	ble.n	800daf6 <_strtol_l.constprop.0+0xc6>
 800daac:	f1be 3fff 	cmp.w	lr, #4294967295
 800dab0:	d008      	beq.n	800dac4 <_strtol_l.constprop.0+0x94>
 800dab2:	45b1      	cmp	r9, r6
 800dab4:	d31c      	bcc.n	800daf0 <_strtol_l.constprop.0+0xc0>
 800dab6:	d101      	bne.n	800dabc <_strtol_l.constprop.0+0x8c>
 800dab8:	45a2      	cmp	sl, r4
 800daba:	db19      	blt.n	800daf0 <_strtol_l.constprop.0+0xc0>
 800dabc:	fb06 4603 	mla	r6, r6, r3, r4
 800dac0:	f04f 0e01 	mov.w	lr, #1
 800dac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dac8:	e7e8      	b.n	800da9c <_strtol_l.constprop.0+0x6c>
 800daca:	2c2b      	cmp	r4, #43	; 0x2b
 800dacc:	bf04      	itt	eq
 800dace:	782c      	ldrbeq	r4, [r5, #0]
 800dad0:	1cb5      	addeq	r5, r6, #2
 800dad2:	e7ca      	b.n	800da6a <_strtol_l.constprop.0+0x3a>
 800dad4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dad8:	f1bc 0f19 	cmp.w	ip, #25
 800dadc:	d801      	bhi.n	800dae2 <_strtol_l.constprop.0+0xb2>
 800dade:	3c37      	subs	r4, #55	; 0x37
 800dae0:	e7e2      	b.n	800daa8 <_strtol_l.constprop.0+0x78>
 800dae2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dae6:	f1bc 0f19 	cmp.w	ip, #25
 800daea:	d804      	bhi.n	800daf6 <_strtol_l.constprop.0+0xc6>
 800daec:	3c57      	subs	r4, #87	; 0x57
 800daee:	e7db      	b.n	800daa8 <_strtol_l.constprop.0+0x78>
 800daf0:	f04f 3eff 	mov.w	lr, #4294967295
 800daf4:	e7e6      	b.n	800dac4 <_strtol_l.constprop.0+0x94>
 800daf6:	f1be 3fff 	cmp.w	lr, #4294967295
 800dafa:	d105      	bne.n	800db08 <_strtol_l.constprop.0+0xd8>
 800dafc:	2322      	movs	r3, #34	; 0x22
 800dafe:	6003      	str	r3, [r0, #0]
 800db00:	4646      	mov	r6, r8
 800db02:	b942      	cbnz	r2, 800db16 <_strtol_l.constprop.0+0xe6>
 800db04:	4630      	mov	r0, r6
 800db06:	e79e      	b.n	800da46 <_strtol_l.constprop.0+0x16>
 800db08:	b107      	cbz	r7, 800db0c <_strtol_l.constprop.0+0xdc>
 800db0a:	4276      	negs	r6, r6
 800db0c:	2a00      	cmp	r2, #0
 800db0e:	d0f9      	beq.n	800db04 <_strtol_l.constprop.0+0xd4>
 800db10:	f1be 0f00 	cmp.w	lr, #0
 800db14:	d000      	beq.n	800db18 <_strtol_l.constprop.0+0xe8>
 800db16:	1e69      	subs	r1, r5, #1
 800db18:	6011      	str	r1, [r2, #0]
 800db1a:	e7f3      	b.n	800db04 <_strtol_l.constprop.0+0xd4>
 800db1c:	2430      	movs	r4, #48	; 0x30
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1b1      	bne.n	800da86 <_strtol_l.constprop.0+0x56>
 800db22:	2308      	movs	r3, #8
 800db24:	e7af      	b.n	800da86 <_strtol_l.constprop.0+0x56>
 800db26:	2c30      	cmp	r4, #48	; 0x30
 800db28:	d0a5      	beq.n	800da76 <_strtol_l.constprop.0+0x46>
 800db2a:	230a      	movs	r3, #10
 800db2c:	e7ab      	b.n	800da86 <_strtol_l.constprop.0+0x56>
 800db2e:	bf00      	nop
 800db30:	0800f6f2 	.word	0x0800f6f2

0800db34 <strtol>:
 800db34:	4613      	mov	r3, r2
 800db36:	460a      	mov	r2, r1
 800db38:	4601      	mov	r1, r0
 800db3a:	4802      	ldr	r0, [pc, #8]	; (800db44 <strtol+0x10>)
 800db3c:	6800      	ldr	r0, [r0, #0]
 800db3e:	f7ff bf77 	b.w	800da30 <_strtol_l.constprop.0>
 800db42:	bf00      	nop
 800db44:	20000064 	.word	0x20000064

0800db48 <__utoa>:
 800db48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db4a:	4c1f      	ldr	r4, [pc, #124]	; (800dbc8 <__utoa+0x80>)
 800db4c:	b08b      	sub	sp, #44	; 0x2c
 800db4e:	4605      	mov	r5, r0
 800db50:	460b      	mov	r3, r1
 800db52:	466e      	mov	r6, sp
 800db54:	f104 0c20 	add.w	ip, r4, #32
 800db58:	6820      	ldr	r0, [r4, #0]
 800db5a:	6861      	ldr	r1, [r4, #4]
 800db5c:	4637      	mov	r7, r6
 800db5e:	c703      	stmia	r7!, {r0, r1}
 800db60:	3408      	adds	r4, #8
 800db62:	4564      	cmp	r4, ip
 800db64:	463e      	mov	r6, r7
 800db66:	d1f7      	bne.n	800db58 <__utoa+0x10>
 800db68:	7921      	ldrb	r1, [r4, #4]
 800db6a:	7139      	strb	r1, [r7, #4]
 800db6c:	1e91      	subs	r1, r2, #2
 800db6e:	6820      	ldr	r0, [r4, #0]
 800db70:	6038      	str	r0, [r7, #0]
 800db72:	2922      	cmp	r1, #34	; 0x22
 800db74:	f04f 0100 	mov.w	r1, #0
 800db78:	d904      	bls.n	800db84 <__utoa+0x3c>
 800db7a:	7019      	strb	r1, [r3, #0]
 800db7c:	460b      	mov	r3, r1
 800db7e:	4618      	mov	r0, r3
 800db80:	b00b      	add	sp, #44	; 0x2c
 800db82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db84:	1e58      	subs	r0, r3, #1
 800db86:	4684      	mov	ip, r0
 800db88:	fbb5 f7f2 	udiv	r7, r5, r2
 800db8c:	fb02 5617 	mls	r6, r2, r7, r5
 800db90:	3628      	adds	r6, #40	; 0x28
 800db92:	446e      	add	r6, sp
 800db94:	460c      	mov	r4, r1
 800db96:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800db9a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800db9e:	462e      	mov	r6, r5
 800dba0:	42b2      	cmp	r2, r6
 800dba2:	f101 0101 	add.w	r1, r1, #1
 800dba6:	463d      	mov	r5, r7
 800dba8:	d9ee      	bls.n	800db88 <__utoa+0x40>
 800dbaa:	2200      	movs	r2, #0
 800dbac:	545a      	strb	r2, [r3, r1]
 800dbae:	1919      	adds	r1, r3, r4
 800dbb0:	1aa5      	subs	r5, r4, r2
 800dbb2:	42aa      	cmp	r2, r5
 800dbb4:	dae3      	bge.n	800db7e <__utoa+0x36>
 800dbb6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800dbba:	780e      	ldrb	r6, [r1, #0]
 800dbbc:	7006      	strb	r6, [r0, #0]
 800dbbe:	3201      	adds	r2, #1
 800dbc0:	f801 5901 	strb.w	r5, [r1], #-1
 800dbc4:	e7f4      	b.n	800dbb0 <__utoa+0x68>
 800dbc6:	bf00      	nop
 800dbc8:	0800f6cc 	.word	0x0800f6cc

0800dbcc <std>:
 800dbcc:	2300      	movs	r3, #0
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	e9c0 3300 	strd	r3, r3, [r0]
 800dbd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbda:	6083      	str	r3, [r0, #8]
 800dbdc:	8181      	strh	r1, [r0, #12]
 800dbde:	6643      	str	r3, [r0, #100]	; 0x64
 800dbe0:	81c2      	strh	r2, [r0, #14]
 800dbe2:	6183      	str	r3, [r0, #24]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	2208      	movs	r2, #8
 800dbe8:	305c      	adds	r0, #92	; 0x5c
 800dbea:	f000 f902 	bl	800ddf2 <memset>
 800dbee:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <std+0x38>)
 800dbf0:	6263      	str	r3, [r4, #36]	; 0x24
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <std+0x3c>)
 800dbf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <std+0x40>)
 800dbf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <std+0x44>)
 800dbfc:	6224      	str	r4, [r4, #32]
 800dbfe:	6323      	str	r3, [r4, #48]	; 0x30
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	0800dd6d 	.word	0x0800dd6d
 800dc08:	0800dd8f 	.word	0x0800dd8f
 800dc0c:	0800ddc7 	.word	0x0800ddc7
 800dc10:	0800ddeb 	.word	0x0800ddeb

0800dc14 <stdio_exit_handler>:
 800dc14:	4a02      	ldr	r2, [pc, #8]	; (800dc20 <stdio_exit_handler+0xc>)
 800dc16:	4903      	ldr	r1, [pc, #12]	; (800dc24 <stdio_exit_handler+0x10>)
 800dc18:	4803      	ldr	r0, [pc, #12]	; (800dc28 <stdio_exit_handler+0x14>)
 800dc1a:	f000 b869 	b.w	800dcf0 <_fwalk_sglue>
 800dc1e:	bf00      	nop
 800dc20:	2000000c 	.word	0x2000000c
 800dc24:	0800e8ed 	.word	0x0800e8ed
 800dc28:	20000018 	.word	0x20000018

0800dc2c <cleanup_stdio>:
 800dc2c:	6841      	ldr	r1, [r0, #4]
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <cleanup_stdio+0x34>)
 800dc30:	4299      	cmp	r1, r3
 800dc32:	b510      	push	{r4, lr}
 800dc34:	4604      	mov	r4, r0
 800dc36:	d001      	beq.n	800dc3c <cleanup_stdio+0x10>
 800dc38:	f000 fe58 	bl	800e8ec <_fflush_r>
 800dc3c:	68a1      	ldr	r1, [r4, #8]
 800dc3e:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <cleanup_stdio+0x38>)
 800dc40:	4299      	cmp	r1, r3
 800dc42:	d002      	beq.n	800dc4a <cleanup_stdio+0x1e>
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fe51 	bl	800e8ec <_fflush_r>
 800dc4a:	68e1      	ldr	r1, [r4, #12]
 800dc4c:	4b06      	ldr	r3, [pc, #24]	; (800dc68 <cleanup_stdio+0x3c>)
 800dc4e:	4299      	cmp	r1, r3
 800dc50:	d004      	beq.n	800dc5c <cleanup_stdio+0x30>
 800dc52:	4620      	mov	r0, r4
 800dc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc58:	f000 be48 	b.w	800e8ec <_fflush_r>
 800dc5c:	bd10      	pop	{r4, pc}
 800dc5e:	bf00      	nop
 800dc60:	20003b70 	.word	0x20003b70
 800dc64:	20003bd8 	.word	0x20003bd8
 800dc68:	20003c40 	.word	0x20003c40

0800dc6c <global_stdio_init.part.0>:
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <global_stdio_init.part.0+0x30>)
 800dc70:	4c0b      	ldr	r4, [pc, #44]	; (800dca0 <global_stdio_init.part.0+0x34>)
 800dc72:	4a0c      	ldr	r2, [pc, #48]	; (800dca4 <global_stdio_init.part.0+0x38>)
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	4620      	mov	r0, r4
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2104      	movs	r1, #4
 800dc7c:	f7ff ffa6 	bl	800dbcc <std>
 800dc80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dc84:	2201      	movs	r2, #1
 800dc86:	2109      	movs	r1, #9
 800dc88:	f7ff ffa0 	bl	800dbcc <std>
 800dc8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dc90:	2202      	movs	r2, #2
 800dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc96:	2112      	movs	r1, #18
 800dc98:	f7ff bf98 	b.w	800dbcc <std>
 800dc9c:	20003ca8 	.word	0x20003ca8
 800dca0:	20003b70 	.word	0x20003b70
 800dca4:	0800dc15 	.word	0x0800dc15

0800dca8 <__sfp_lock_acquire>:
 800dca8:	4801      	ldr	r0, [pc, #4]	; (800dcb0 <__sfp_lock_acquire+0x8>)
 800dcaa:	f000 b989 	b.w	800dfc0 <__retarget_lock_acquire_recursive>
 800dcae:	bf00      	nop
 800dcb0:	20003cb1 	.word	0x20003cb1

0800dcb4 <__sfp_lock_release>:
 800dcb4:	4801      	ldr	r0, [pc, #4]	; (800dcbc <__sfp_lock_release+0x8>)
 800dcb6:	f000 b984 	b.w	800dfc2 <__retarget_lock_release_recursive>
 800dcba:	bf00      	nop
 800dcbc:	20003cb1 	.word	0x20003cb1

0800dcc0 <__sinit>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	f7ff fff0 	bl	800dca8 <__sfp_lock_acquire>
 800dcc8:	6a23      	ldr	r3, [r4, #32]
 800dcca:	b11b      	cbz	r3, 800dcd4 <__sinit+0x14>
 800dccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcd0:	f7ff bff0 	b.w	800dcb4 <__sfp_lock_release>
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <__sinit+0x28>)
 800dcd6:	6223      	str	r3, [r4, #32]
 800dcd8:	4b04      	ldr	r3, [pc, #16]	; (800dcec <__sinit+0x2c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1f5      	bne.n	800dccc <__sinit+0xc>
 800dce0:	f7ff ffc4 	bl	800dc6c <global_stdio_init.part.0>
 800dce4:	e7f2      	b.n	800dccc <__sinit+0xc>
 800dce6:	bf00      	nop
 800dce8:	0800dc2d 	.word	0x0800dc2d
 800dcec:	20003ca8 	.word	0x20003ca8

0800dcf0 <_fwalk_sglue>:
 800dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf4:	4607      	mov	r7, r0
 800dcf6:	4688      	mov	r8, r1
 800dcf8:	4614      	mov	r4, r2
 800dcfa:	2600      	movs	r6, #0
 800dcfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd00:	f1b9 0901 	subs.w	r9, r9, #1
 800dd04:	d505      	bpl.n	800dd12 <_fwalk_sglue+0x22>
 800dd06:	6824      	ldr	r4, [r4, #0]
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	d1f7      	bne.n	800dcfc <_fwalk_sglue+0xc>
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd12:	89ab      	ldrh	r3, [r5, #12]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d907      	bls.n	800dd28 <_fwalk_sglue+0x38>
 800dd18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	d003      	beq.n	800dd28 <_fwalk_sglue+0x38>
 800dd20:	4629      	mov	r1, r5
 800dd22:	4638      	mov	r0, r7
 800dd24:	47c0      	blx	r8
 800dd26:	4306      	orrs	r6, r0
 800dd28:	3568      	adds	r5, #104	; 0x68
 800dd2a:	e7e9      	b.n	800dd00 <_fwalk_sglue+0x10>

0800dd2c <siprintf>:
 800dd2c:	b40e      	push	{r1, r2, r3}
 800dd2e:	b500      	push	{lr}
 800dd30:	b09c      	sub	sp, #112	; 0x70
 800dd32:	ab1d      	add	r3, sp, #116	; 0x74
 800dd34:	9002      	str	r0, [sp, #8]
 800dd36:	9006      	str	r0, [sp, #24]
 800dd38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd3c:	4809      	ldr	r0, [pc, #36]	; (800dd64 <siprintf+0x38>)
 800dd3e:	9107      	str	r1, [sp, #28]
 800dd40:	9104      	str	r1, [sp, #16]
 800dd42:	4909      	ldr	r1, [pc, #36]	; (800dd68 <siprintf+0x3c>)
 800dd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd48:	9105      	str	r1, [sp, #20]
 800dd4a:	6800      	ldr	r0, [r0, #0]
 800dd4c:	9301      	str	r3, [sp, #4]
 800dd4e:	a902      	add	r1, sp, #8
 800dd50:	f000 fab8 	bl	800e2c4 <_svfiprintf_r>
 800dd54:	9b02      	ldr	r3, [sp, #8]
 800dd56:	2200      	movs	r2, #0
 800dd58:	701a      	strb	r2, [r3, #0]
 800dd5a:	b01c      	add	sp, #112	; 0x70
 800dd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd60:	b003      	add	sp, #12
 800dd62:	4770      	bx	lr
 800dd64:	20000064 	.word	0x20000064
 800dd68:	ffff0208 	.word	0xffff0208

0800dd6c <__sread>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	460c      	mov	r4, r1
 800dd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd74:	f000 f8d6 	bl	800df24 <_read_r>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	bfab      	itete	ge
 800dd7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd7e:	89a3      	ldrhlt	r3, [r4, #12]
 800dd80:	181b      	addge	r3, r3, r0
 800dd82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd86:	bfac      	ite	ge
 800dd88:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd8a:	81a3      	strhlt	r3, [r4, #12]
 800dd8c:	bd10      	pop	{r4, pc}

0800dd8e <__swrite>:
 800dd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd92:	461f      	mov	r7, r3
 800dd94:	898b      	ldrh	r3, [r1, #12]
 800dd96:	05db      	lsls	r3, r3, #23
 800dd98:	4605      	mov	r5, r0
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	4616      	mov	r6, r2
 800dd9e:	d505      	bpl.n	800ddac <__swrite+0x1e>
 800dda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda4:	2302      	movs	r3, #2
 800dda6:	2200      	movs	r2, #0
 800dda8:	f000 f8aa 	bl	800df00 <_lseek_r>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddb6:	81a3      	strh	r3, [r4, #12]
 800ddb8:	4632      	mov	r2, r6
 800ddba:	463b      	mov	r3, r7
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc2:	f000 b8c1 	b.w	800df48 <_write_r>

0800ddc6 <__sseek>:
 800ddc6:	b510      	push	{r4, lr}
 800ddc8:	460c      	mov	r4, r1
 800ddca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddce:	f000 f897 	bl	800df00 <_lseek_r>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	bf15      	itete	ne
 800ddd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dde2:	81a3      	strheq	r3, [r4, #12]
 800dde4:	bf18      	it	ne
 800dde6:	81a3      	strhne	r3, [r4, #12]
 800dde8:	bd10      	pop	{r4, pc}

0800ddea <__sclose>:
 800ddea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddee:	f000 b877 	b.w	800dee0 <_close_r>

0800ddf2 <memset>:
 800ddf2:	4402      	add	r2, r0
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d100      	bne.n	800ddfc <memset+0xa>
 800ddfa:	4770      	bx	lr
 800ddfc:	f803 1b01 	strb.w	r1, [r3], #1
 800de00:	e7f9      	b.n	800ddf6 <memset+0x4>

0800de02 <strncat>:
 800de02:	b530      	push	{r4, r5, lr}
 800de04:	4604      	mov	r4, r0
 800de06:	7825      	ldrb	r5, [r4, #0]
 800de08:	4623      	mov	r3, r4
 800de0a:	3401      	adds	r4, #1
 800de0c:	2d00      	cmp	r5, #0
 800de0e:	d1fa      	bne.n	800de06 <strncat+0x4>
 800de10:	3a01      	subs	r2, #1
 800de12:	d304      	bcc.n	800de1e <strncat+0x1c>
 800de14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de18:	f803 4b01 	strb.w	r4, [r3], #1
 800de1c:	b904      	cbnz	r4, 800de20 <strncat+0x1e>
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	2a00      	cmp	r2, #0
 800de22:	d1f5      	bne.n	800de10 <strncat+0xe>
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	e7f3      	b.n	800de10 <strncat+0xe>

0800de28 <strtok>:
 800de28:	4b16      	ldr	r3, [pc, #88]	; (800de84 <strtok+0x5c>)
 800de2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de2c:	681e      	ldr	r6, [r3, #0]
 800de2e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800de30:	4605      	mov	r5, r0
 800de32:	b9fc      	cbnz	r4, 800de74 <strtok+0x4c>
 800de34:	2050      	movs	r0, #80	; 0x50
 800de36:	9101      	str	r1, [sp, #4]
 800de38:	f000 f936 	bl	800e0a8 <malloc>
 800de3c:	9901      	ldr	r1, [sp, #4]
 800de3e:	6470      	str	r0, [r6, #68]	; 0x44
 800de40:	4602      	mov	r2, r0
 800de42:	b920      	cbnz	r0, 800de4e <strtok+0x26>
 800de44:	4b10      	ldr	r3, [pc, #64]	; (800de88 <strtok+0x60>)
 800de46:	4811      	ldr	r0, [pc, #68]	; (800de8c <strtok+0x64>)
 800de48:	215b      	movs	r1, #91	; 0x5b
 800de4a:	f000 f8c3 	bl	800dfd4 <__assert_func>
 800de4e:	e9c0 4400 	strd	r4, r4, [r0]
 800de52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800de56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800de5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800de5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800de62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800de66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800de6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800de6e:	6184      	str	r4, [r0, #24]
 800de70:	7704      	strb	r4, [r0, #28]
 800de72:	6244      	str	r4, [r0, #36]	; 0x24
 800de74:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800de76:	2301      	movs	r3, #1
 800de78:	4628      	mov	r0, r5
 800de7a:	b002      	add	sp, #8
 800de7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de80:	f000 b806 	b.w	800de90 <__strtok_r>
 800de84:	20000064 	.word	0x20000064
 800de88:	0800f7f2 	.word	0x0800f7f2
 800de8c:	0800f809 	.word	0x0800f809

0800de90 <__strtok_r>:
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	b908      	cbnz	r0, 800de98 <__strtok_r+0x8>
 800de94:	6810      	ldr	r0, [r2, #0]
 800de96:	b188      	cbz	r0, 800debc <__strtok_r+0x2c>
 800de98:	4604      	mov	r4, r0
 800de9a:	4620      	mov	r0, r4
 800de9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dea0:	460f      	mov	r7, r1
 800dea2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dea6:	b91e      	cbnz	r6, 800deb0 <__strtok_r+0x20>
 800dea8:	b965      	cbnz	r5, 800dec4 <__strtok_r+0x34>
 800deaa:	6015      	str	r5, [r2, #0]
 800deac:	4628      	mov	r0, r5
 800deae:	e005      	b.n	800debc <__strtok_r+0x2c>
 800deb0:	42b5      	cmp	r5, r6
 800deb2:	d1f6      	bne.n	800dea2 <__strtok_r+0x12>
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1f0      	bne.n	800de9a <__strtok_r+0xa>
 800deb8:	6014      	str	r4, [r2, #0]
 800deba:	7003      	strb	r3, [r0, #0]
 800debc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800debe:	461c      	mov	r4, r3
 800dec0:	e00c      	b.n	800dedc <__strtok_r+0x4c>
 800dec2:	b915      	cbnz	r5, 800deca <__strtok_r+0x3a>
 800dec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dec8:	460e      	mov	r6, r1
 800deca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dece:	42ab      	cmp	r3, r5
 800ded0:	d1f7      	bne.n	800dec2 <__strtok_r+0x32>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d0f3      	beq.n	800debe <__strtok_r+0x2e>
 800ded6:	2300      	movs	r3, #0
 800ded8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dedc:	6014      	str	r4, [r2, #0]
 800dede:	e7ed      	b.n	800debc <__strtok_r+0x2c>

0800dee0 <_close_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d06      	ldr	r5, [pc, #24]	; (800defc <_close_r+0x1c>)
 800dee4:	2300      	movs	r3, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	602b      	str	r3, [r5, #0]
 800deec:	f7f4 fa05 	bl	80022fa <_close>
 800def0:	1c43      	adds	r3, r0, #1
 800def2:	d102      	bne.n	800defa <_close_r+0x1a>
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	b103      	cbz	r3, 800defa <_close_r+0x1a>
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	bd38      	pop	{r3, r4, r5, pc}
 800defc:	20003cac 	.word	0x20003cac

0800df00 <_lseek_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4d07      	ldr	r5, [pc, #28]	; (800df20 <_lseek_r+0x20>)
 800df04:	4604      	mov	r4, r0
 800df06:	4608      	mov	r0, r1
 800df08:	4611      	mov	r1, r2
 800df0a:	2200      	movs	r2, #0
 800df0c:	602a      	str	r2, [r5, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	f7f4 fa1a 	bl	8002348 <_lseek>
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	d102      	bne.n	800df1e <_lseek_r+0x1e>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	b103      	cbz	r3, 800df1e <_lseek_r+0x1e>
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	bd38      	pop	{r3, r4, r5, pc}
 800df20:	20003cac 	.word	0x20003cac

0800df24 <_read_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4d07      	ldr	r5, [pc, #28]	; (800df44 <_read_r+0x20>)
 800df28:	4604      	mov	r4, r0
 800df2a:	4608      	mov	r0, r1
 800df2c:	4611      	mov	r1, r2
 800df2e:	2200      	movs	r2, #0
 800df30:	602a      	str	r2, [r5, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	f7f4 f9a8 	bl	8002288 <_read>
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	d102      	bne.n	800df42 <_read_r+0x1e>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	b103      	cbz	r3, 800df42 <_read_r+0x1e>
 800df40:	6023      	str	r3, [r4, #0]
 800df42:	bd38      	pop	{r3, r4, r5, pc}
 800df44:	20003cac 	.word	0x20003cac

0800df48 <_write_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d07      	ldr	r5, [pc, #28]	; (800df68 <_write_r+0x20>)
 800df4c:	4604      	mov	r4, r0
 800df4e:	4608      	mov	r0, r1
 800df50:	4611      	mov	r1, r2
 800df52:	2200      	movs	r2, #0
 800df54:	602a      	str	r2, [r5, #0]
 800df56:	461a      	mov	r2, r3
 800df58:	f7f4 f9b3 	bl	80022c2 <_write>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_write_r+0x1e>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_write_r+0x1e>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	20003cac 	.word	0x20003cac

0800df6c <__errno>:
 800df6c:	4b01      	ldr	r3, [pc, #4]	; (800df74 <__errno+0x8>)
 800df6e:	6818      	ldr	r0, [r3, #0]
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	20000064 	.word	0x20000064

0800df78 <__libc_init_array>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	4d0d      	ldr	r5, [pc, #52]	; (800dfb0 <__libc_init_array+0x38>)
 800df7c:	4c0d      	ldr	r4, [pc, #52]	; (800dfb4 <__libc_init_array+0x3c>)
 800df7e:	1b64      	subs	r4, r4, r5
 800df80:	10a4      	asrs	r4, r4, #2
 800df82:	2600      	movs	r6, #0
 800df84:	42a6      	cmp	r6, r4
 800df86:	d109      	bne.n	800df9c <__libc_init_array+0x24>
 800df88:	4d0b      	ldr	r5, [pc, #44]	; (800dfb8 <__libc_init_array+0x40>)
 800df8a:	4c0c      	ldr	r4, [pc, #48]	; (800dfbc <__libc_init_array+0x44>)
 800df8c:	f001 f800 	bl	800ef90 <_init>
 800df90:	1b64      	subs	r4, r4, r5
 800df92:	10a4      	asrs	r4, r4, #2
 800df94:	2600      	movs	r6, #0
 800df96:	42a6      	cmp	r6, r4
 800df98:	d105      	bne.n	800dfa6 <__libc_init_array+0x2e>
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
 800df9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa0:	4798      	blx	r3
 800dfa2:	3601      	adds	r6, #1
 800dfa4:	e7ee      	b.n	800df84 <__libc_init_array+0xc>
 800dfa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfaa:	4798      	blx	r3
 800dfac:	3601      	adds	r6, #1
 800dfae:	e7f2      	b.n	800df96 <__libc_init_array+0x1e>
 800dfb0:	0800f8dc 	.word	0x0800f8dc
 800dfb4:	0800f8dc 	.word	0x0800f8dc
 800dfb8:	0800f8dc 	.word	0x0800f8dc
 800dfbc:	0800f8e0 	.word	0x0800f8e0

0800dfc0 <__retarget_lock_acquire_recursive>:
 800dfc0:	4770      	bx	lr

0800dfc2 <__retarget_lock_release_recursive>:
 800dfc2:	4770      	bx	lr

0800dfc4 <strcpy>:
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfca:	f803 2b01 	strb.w	r2, [r3], #1
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	d1f9      	bne.n	800dfc6 <strcpy+0x2>
 800dfd2:	4770      	bx	lr

0800dfd4 <__assert_func>:
 800dfd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfd6:	4614      	mov	r4, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b09      	ldr	r3, [pc, #36]	; (800e000 <__assert_func+0x2c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4605      	mov	r5, r0
 800dfe0:	68d8      	ldr	r0, [r3, #12]
 800dfe2:	b14c      	cbz	r4, 800dff8 <__assert_func+0x24>
 800dfe4:	4b07      	ldr	r3, [pc, #28]	; (800e004 <__assert_func+0x30>)
 800dfe6:	9100      	str	r1, [sp, #0]
 800dfe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfec:	4906      	ldr	r1, [pc, #24]	; (800e008 <__assert_func+0x34>)
 800dfee:	462b      	mov	r3, r5
 800dff0:	f000 fca4 	bl	800e93c <fiprintf>
 800dff4:	f000 fcec 	bl	800e9d0 <abort>
 800dff8:	4b04      	ldr	r3, [pc, #16]	; (800e00c <__assert_func+0x38>)
 800dffa:	461c      	mov	r4, r3
 800dffc:	e7f3      	b.n	800dfe6 <__assert_func+0x12>
 800dffe:	bf00      	nop
 800e000:	20000064 	.word	0x20000064
 800e004:	0800f863 	.word	0x0800f863
 800e008:	0800f870 	.word	0x0800f870
 800e00c:	0800f89e 	.word	0x0800f89e

0800e010 <_free_r>:
 800e010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e012:	2900      	cmp	r1, #0
 800e014:	d044      	beq.n	800e0a0 <_free_r+0x90>
 800e016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01a:	9001      	str	r0, [sp, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f1a1 0404 	sub.w	r4, r1, #4
 800e022:	bfb8      	it	lt
 800e024:	18e4      	addlt	r4, r4, r3
 800e026:	f000 f8e7 	bl	800e1f8 <__malloc_lock>
 800e02a:	4a1e      	ldr	r2, [pc, #120]	; (800e0a4 <_free_r+0x94>)
 800e02c:	9801      	ldr	r0, [sp, #4]
 800e02e:	6813      	ldr	r3, [r2, #0]
 800e030:	b933      	cbnz	r3, 800e040 <_free_r+0x30>
 800e032:	6063      	str	r3, [r4, #4]
 800e034:	6014      	str	r4, [r2, #0]
 800e036:	b003      	add	sp, #12
 800e038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e03c:	f000 b8e2 	b.w	800e204 <__malloc_unlock>
 800e040:	42a3      	cmp	r3, r4
 800e042:	d908      	bls.n	800e056 <_free_r+0x46>
 800e044:	6825      	ldr	r5, [r4, #0]
 800e046:	1961      	adds	r1, r4, r5
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf01      	itttt	eq
 800e04c:	6819      	ldreq	r1, [r3, #0]
 800e04e:	685b      	ldreq	r3, [r3, #4]
 800e050:	1949      	addeq	r1, r1, r5
 800e052:	6021      	streq	r1, [r4, #0]
 800e054:	e7ed      	b.n	800e032 <_free_r+0x22>
 800e056:	461a      	mov	r2, r3
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	b10b      	cbz	r3, 800e060 <_free_r+0x50>
 800e05c:	42a3      	cmp	r3, r4
 800e05e:	d9fa      	bls.n	800e056 <_free_r+0x46>
 800e060:	6811      	ldr	r1, [r2, #0]
 800e062:	1855      	adds	r5, r2, r1
 800e064:	42a5      	cmp	r5, r4
 800e066:	d10b      	bne.n	800e080 <_free_r+0x70>
 800e068:	6824      	ldr	r4, [r4, #0]
 800e06a:	4421      	add	r1, r4
 800e06c:	1854      	adds	r4, r2, r1
 800e06e:	42a3      	cmp	r3, r4
 800e070:	6011      	str	r1, [r2, #0]
 800e072:	d1e0      	bne.n	800e036 <_free_r+0x26>
 800e074:	681c      	ldr	r4, [r3, #0]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	6053      	str	r3, [r2, #4]
 800e07a:	440c      	add	r4, r1
 800e07c:	6014      	str	r4, [r2, #0]
 800e07e:	e7da      	b.n	800e036 <_free_r+0x26>
 800e080:	d902      	bls.n	800e088 <_free_r+0x78>
 800e082:	230c      	movs	r3, #12
 800e084:	6003      	str	r3, [r0, #0]
 800e086:	e7d6      	b.n	800e036 <_free_r+0x26>
 800e088:	6825      	ldr	r5, [r4, #0]
 800e08a:	1961      	adds	r1, r4, r5
 800e08c:	428b      	cmp	r3, r1
 800e08e:	bf04      	itt	eq
 800e090:	6819      	ldreq	r1, [r3, #0]
 800e092:	685b      	ldreq	r3, [r3, #4]
 800e094:	6063      	str	r3, [r4, #4]
 800e096:	bf04      	itt	eq
 800e098:	1949      	addeq	r1, r1, r5
 800e09a:	6021      	streq	r1, [r4, #0]
 800e09c:	6054      	str	r4, [r2, #4]
 800e09e:	e7ca      	b.n	800e036 <_free_r+0x26>
 800e0a0:	b003      	add	sp, #12
 800e0a2:	bd30      	pop	{r4, r5, pc}
 800e0a4:	20003cb4 	.word	0x20003cb4

0800e0a8 <malloc>:
 800e0a8:	4b02      	ldr	r3, [pc, #8]	; (800e0b4 <malloc+0xc>)
 800e0aa:	4601      	mov	r1, r0
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	f000 b823 	b.w	800e0f8 <_malloc_r>
 800e0b2:	bf00      	nop
 800e0b4:	20000064 	.word	0x20000064

0800e0b8 <sbrk_aligned>:
 800e0b8:	b570      	push	{r4, r5, r6, lr}
 800e0ba:	4e0e      	ldr	r6, [pc, #56]	; (800e0f4 <sbrk_aligned+0x3c>)
 800e0bc:	460c      	mov	r4, r1
 800e0be:	6831      	ldr	r1, [r6, #0]
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	b911      	cbnz	r1, 800e0ca <sbrk_aligned+0x12>
 800e0c4:	f000 fc66 	bl	800e994 <_sbrk_r>
 800e0c8:	6030      	str	r0, [r6, #0]
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f000 fc61 	bl	800e994 <_sbrk_r>
 800e0d2:	1c43      	adds	r3, r0, #1
 800e0d4:	d00a      	beq.n	800e0ec <sbrk_aligned+0x34>
 800e0d6:	1cc4      	adds	r4, r0, #3
 800e0d8:	f024 0403 	bic.w	r4, r4, #3
 800e0dc:	42a0      	cmp	r0, r4
 800e0de:	d007      	beq.n	800e0f0 <sbrk_aligned+0x38>
 800e0e0:	1a21      	subs	r1, r4, r0
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 fc56 	bl	800e994 <_sbrk_r>
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	d101      	bne.n	800e0f0 <sbrk_aligned+0x38>
 800e0ec:	f04f 34ff 	mov.w	r4, #4294967295
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	bd70      	pop	{r4, r5, r6, pc}
 800e0f4:	20003cb8 	.word	0x20003cb8

0800e0f8 <_malloc_r>:
 800e0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0fc:	1ccd      	adds	r5, r1, #3
 800e0fe:	f025 0503 	bic.w	r5, r5, #3
 800e102:	3508      	adds	r5, #8
 800e104:	2d0c      	cmp	r5, #12
 800e106:	bf38      	it	cc
 800e108:	250c      	movcc	r5, #12
 800e10a:	2d00      	cmp	r5, #0
 800e10c:	4607      	mov	r7, r0
 800e10e:	db01      	blt.n	800e114 <_malloc_r+0x1c>
 800e110:	42a9      	cmp	r1, r5
 800e112:	d905      	bls.n	800e120 <_malloc_r+0x28>
 800e114:	230c      	movs	r3, #12
 800e116:	603b      	str	r3, [r7, #0]
 800e118:	2600      	movs	r6, #0
 800e11a:	4630      	mov	r0, r6
 800e11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e120:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1f4 <_malloc_r+0xfc>
 800e124:	f000 f868 	bl	800e1f8 <__malloc_lock>
 800e128:	f8d8 3000 	ldr.w	r3, [r8]
 800e12c:	461c      	mov	r4, r3
 800e12e:	bb5c      	cbnz	r4, 800e188 <_malloc_r+0x90>
 800e130:	4629      	mov	r1, r5
 800e132:	4638      	mov	r0, r7
 800e134:	f7ff ffc0 	bl	800e0b8 <sbrk_aligned>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	4604      	mov	r4, r0
 800e13c:	d155      	bne.n	800e1ea <_malloc_r+0xf2>
 800e13e:	f8d8 4000 	ldr.w	r4, [r8]
 800e142:	4626      	mov	r6, r4
 800e144:	2e00      	cmp	r6, #0
 800e146:	d145      	bne.n	800e1d4 <_malloc_r+0xdc>
 800e148:	2c00      	cmp	r4, #0
 800e14a:	d048      	beq.n	800e1de <_malloc_r+0xe6>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	4631      	mov	r1, r6
 800e150:	4638      	mov	r0, r7
 800e152:	eb04 0903 	add.w	r9, r4, r3
 800e156:	f000 fc1d 	bl	800e994 <_sbrk_r>
 800e15a:	4581      	cmp	r9, r0
 800e15c:	d13f      	bne.n	800e1de <_malloc_r+0xe6>
 800e15e:	6821      	ldr	r1, [r4, #0]
 800e160:	1a6d      	subs	r5, r5, r1
 800e162:	4629      	mov	r1, r5
 800e164:	4638      	mov	r0, r7
 800e166:	f7ff ffa7 	bl	800e0b8 <sbrk_aligned>
 800e16a:	3001      	adds	r0, #1
 800e16c:	d037      	beq.n	800e1de <_malloc_r+0xe6>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	442b      	add	r3, r5
 800e172:	6023      	str	r3, [r4, #0]
 800e174:	f8d8 3000 	ldr.w	r3, [r8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d038      	beq.n	800e1ee <_malloc_r+0xf6>
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	42a2      	cmp	r2, r4
 800e180:	d12b      	bne.n	800e1da <_malloc_r+0xe2>
 800e182:	2200      	movs	r2, #0
 800e184:	605a      	str	r2, [r3, #4]
 800e186:	e00f      	b.n	800e1a8 <_malloc_r+0xb0>
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	1b52      	subs	r2, r2, r5
 800e18c:	d41f      	bmi.n	800e1ce <_malloc_r+0xd6>
 800e18e:	2a0b      	cmp	r2, #11
 800e190:	d917      	bls.n	800e1c2 <_malloc_r+0xca>
 800e192:	1961      	adds	r1, r4, r5
 800e194:	42a3      	cmp	r3, r4
 800e196:	6025      	str	r5, [r4, #0]
 800e198:	bf18      	it	ne
 800e19a:	6059      	strne	r1, [r3, #4]
 800e19c:	6863      	ldr	r3, [r4, #4]
 800e19e:	bf08      	it	eq
 800e1a0:	f8c8 1000 	streq.w	r1, [r8]
 800e1a4:	5162      	str	r2, [r4, r5]
 800e1a6:	604b      	str	r3, [r1, #4]
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	f104 060b 	add.w	r6, r4, #11
 800e1ae:	f000 f829 	bl	800e204 <__malloc_unlock>
 800e1b2:	f026 0607 	bic.w	r6, r6, #7
 800e1b6:	1d23      	adds	r3, r4, #4
 800e1b8:	1af2      	subs	r2, r6, r3
 800e1ba:	d0ae      	beq.n	800e11a <_malloc_r+0x22>
 800e1bc:	1b9b      	subs	r3, r3, r6
 800e1be:	50a3      	str	r3, [r4, r2]
 800e1c0:	e7ab      	b.n	800e11a <_malloc_r+0x22>
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	6862      	ldr	r2, [r4, #4]
 800e1c6:	d1dd      	bne.n	800e184 <_malloc_r+0x8c>
 800e1c8:	f8c8 2000 	str.w	r2, [r8]
 800e1cc:	e7ec      	b.n	800e1a8 <_malloc_r+0xb0>
 800e1ce:	4623      	mov	r3, r4
 800e1d0:	6864      	ldr	r4, [r4, #4]
 800e1d2:	e7ac      	b.n	800e12e <_malloc_r+0x36>
 800e1d4:	4634      	mov	r4, r6
 800e1d6:	6876      	ldr	r6, [r6, #4]
 800e1d8:	e7b4      	b.n	800e144 <_malloc_r+0x4c>
 800e1da:	4613      	mov	r3, r2
 800e1dc:	e7cc      	b.n	800e178 <_malloc_r+0x80>
 800e1de:	230c      	movs	r3, #12
 800e1e0:	603b      	str	r3, [r7, #0]
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	f000 f80e 	bl	800e204 <__malloc_unlock>
 800e1e8:	e797      	b.n	800e11a <_malloc_r+0x22>
 800e1ea:	6025      	str	r5, [r4, #0]
 800e1ec:	e7dc      	b.n	800e1a8 <_malloc_r+0xb0>
 800e1ee:	605b      	str	r3, [r3, #4]
 800e1f0:	deff      	udf	#255	; 0xff
 800e1f2:	bf00      	nop
 800e1f4:	20003cb4 	.word	0x20003cb4

0800e1f8 <__malloc_lock>:
 800e1f8:	4801      	ldr	r0, [pc, #4]	; (800e200 <__malloc_lock+0x8>)
 800e1fa:	f7ff bee1 	b.w	800dfc0 <__retarget_lock_acquire_recursive>
 800e1fe:	bf00      	nop
 800e200:	20003cb0 	.word	0x20003cb0

0800e204 <__malloc_unlock>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__malloc_unlock+0x8>)
 800e206:	f7ff bedc 	b.w	800dfc2 <__retarget_lock_release_recursive>
 800e20a:	bf00      	nop
 800e20c:	20003cb0 	.word	0x20003cb0

0800e210 <__ssputs_r>:
 800e210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	688e      	ldr	r6, [r1, #8]
 800e216:	461f      	mov	r7, r3
 800e218:	42be      	cmp	r6, r7
 800e21a:	680b      	ldr	r3, [r1, #0]
 800e21c:	4682      	mov	sl, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	4690      	mov	r8, r2
 800e222:	d82c      	bhi.n	800e27e <__ssputs_r+0x6e>
 800e224:	898a      	ldrh	r2, [r1, #12]
 800e226:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e22a:	d026      	beq.n	800e27a <__ssputs_r+0x6a>
 800e22c:	6965      	ldr	r5, [r4, #20]
 800e22e:	6909      	ldr	r1, [r1, #16]
 800e230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e234:	eba3 0901 	sub.w	r9, r3, r1
 800e238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e23c:	1c7b      	adds	r3, r7, #1
 800e23e:	444b      	add	r3, r9
 800e240:	106d      	asrs	r5, r5, #1
 800e242:	429d      	cmp	r5, r3
 800e244:	bf38      	it	cc
 800e246:	461d      	movcc	r5, r3
 800e248:	0553      	lsls	r3, r2, #21
 800e24a:	d527      	bpl.n	800e29c <__ssputs_r+0x8c>
 800e24c:	4629      	mov	r1, r5
 800e24e:	f7ff ff53 	bl	800e0f8 <_malloc_r>
 800e252:	4606      	mov	r6, r0
 800e254:	b360      	cbz	r0, 800e2b0 <__ssputs_r+0xa0>
 800e256:	6921      	ldr	r1, [r4, #16]
 800e258:	464a      	mov	r2, r9
 800e25a:	f000 fbab 	bl	800e9b4 <memcpy>
 800e25e:	89a3      	ldrh	r3, [r4, #12]
 800e260:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	6126      	str	r6, [r4, #16]
 800e26c:	6165      	str	r5, [r4, #20]
 800e26e:	444e      	add	r6, r9
 800e270:	eba5 0509 	sub.w	r5, r5, r9
 800e274:	6026      	str	r6, [r4, #0]
 800e276:	60a5      	str	r5, [r4, #8]
 800e278:	463e      	mov	r6, r7
 800e27a:	42be      	cmp	r6, r7
 800e27c:	d900      	bls.n	800e280 <__ssputs_r+0x70>
 800e27e:	463e      	mov	r6, r7
 800e280:	6820      	ldr	r0, [r4, #0]
 800e282:	4632      	mov	r2, r6
 800e284:	4641      	mov	r1, r8
 800e286:	f000 fb6b 	bl	800e960 <memmove>
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	1b9b      	subs	r3, r3, r6
 800e28e:	60a3      	str	r3, [r4, #8]
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	4433      	add	r3, r6
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	2000      	movs	r0, #0
 800e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29c:	462a      	mov	r2, r5
 800e29e:	f000 fb9e 	bl	800e9de <_realloc_r>
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d1e0      	bne.n	800e26a <__ssputs_r+0x5a>
 800e2a8:	6921      	ldr	r1, [r4, #16]
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	f7ff feb0 	bl	800e010 <_free_r>
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	f8ca 3000 	str.w	r3, [sl]
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2bc:	81a3      	strh	r3, [r4, #12]
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	e7e9      	b.n	800e298 <__ssputs_r+0x88>

0800e2c4 <_svfiprintf_r>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	4698      	mov	r8, r3
 800e2ca:	898b      	ldrh	r3, [r1, #12]
 800e2cc:	061b      	lsls	r3, r3, #24
 800e2ce:	b09d      	sub	sp, #116	; 0x74
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	d50e      	bpl.n	800e2f6 <_svfiprintf_r+0x32>
 800e2d8:	690b      	ldr	r3, [r1, #16]
 800e2da:	b963      	cbnz	r3, 800e2f6 <_svfiprintf_r+0x32>
 800e2dc:	2140      	movs	r1, #64	; 0x40
 800e2de:	f7ff ff0b 	bl	800e0f8 <_malloc_r>
 800e2e2:	6028      	str	r0, [r5, #0]
 800e2e4:	6128      	str	r0, [r5, #16]
 800e2e6:	b920      	cbnz	r0, 800e2f2 <_svfiprintf_r+0x2e>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	e0d0      	b.n	800e494 <_svfiprintf_r+0x1d0>
 800e2f2:	2340      	movs	r3, #64	; 0x40
 800e2f4:	616b      	str	r3, [r5, #20]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fa:	2320      	movs	r3, #32
 800e2fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e300:	f8cd 800c 	str.w	r8, [sp, #12]
 800e304:	2330      	movs	r3, #48	; 0x30
 800e306:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4ac <_svfiprintf_r+0x1e8>
 800e30a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30e:	f04f 0901 	mov.w	r9, #1
 800e312:	4623      	mov	r3, r4
 800e314:	469a      	mov	sl, r3
 800e316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31a:	b10a      	cbz	r2, 800e320 <_svfiprintf_r+0x5c>
 800e31c:	2a25      	cmp	r2, #37	; 0x25
 800e31e:	d1f9      	bne.n	800e314 <_svfiprintf_r+0x50>
 800e320:	ebba 0b04 	subs.w	fp, sl, r4
 800e324:	d00b      	beq.n	800e33e <_svfiprintf_r+0x7a>
 800e326:	465b      	mov	r3, fp
 800e328:	4622      	mov	r2, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	4638      	mov	r0, r7
 800e32e:	f7ff ff6f 	bl	800e210 <__ssputs_r>
 800e332:	3001      	adds	r0, #1
 800e334:	f000 80a9 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e33a:	445a      	add	r2, fp
 800e33c:	9209      	str	r2, [sp, #36]	; 0x24
 800e33e:	f89a 3000 	ldrb.w	r3, [sl]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80a1 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e348:	2300      	movs	r3, #0
 800e34a:	f04f 32ff 	mov.w	r2, #4294967295
 800e34e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e352:	f10a 0a01 	add.w	sl, sl, #1
 800e356:	9304      	str	r3, [sp, #16]
 800e358:	9307      	str	r3, [sp, #28]
 800e35a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e35e:	931a      	str	r3, [sp, #104]	; 0x68
 800e360:	4654      	mov	r4, sl
 800e362:	2205      	movs	r2, #5
 800e364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e368:	4850      	ldr	r0, [pc, #320]	; (800e4ac <_svfiprintf_r+0x1e8>)
 800e36a:	f7f1 ff51 	bl	8000210 <memchr>
 800e36e:	9a04      	ldr	r2, [sp, #16]
 800e370:	b9d8      	cbnz	r0, 800e3aa <_svfiprintf_r+0xe6>
 800e372:	06d0      	lsls	r0, r2, #27
 800e374:	bf44      	itt	mi
 800e376:	2320      	movmi	r3, #32
 800e378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37c:	0711      	lsls	r1, r2, #28
 800e37e:	bf44      	itt	mi
 800e380:	232b      	movmi	r3, #43	; 0x2b
 800e382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e386:	f89a 3000 	ldrb.w	r3, [sl]
 800e38a:	2b2a      	cmp	r3, #42	; 0x2a
 800e38c:	d015      	beq.n	800e3ba <_svfiprintf_r+0xf6>
 800e38e:	9a07      	ldr	r2, [sp, #28]
 800e390:	4654      	mov	r4, sl
 800e392:	2000      	movs	r0, #0
 800e394:	f04f 0c0a 	mov.w	ip, #10
 800e398:	4621      	mov	r1, r4
 800e39a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39e:	3b30      	subs	r3, #48	; 0x30
 800e3a0:	2b09      	cmp	r3, #9
 800e3a2:	d94d      	bls.n	800e440 <_svfiprintf_r+0x17c>
 800e3a4:	b1b0      	cbz	r0, 800e3d4 <_svfiprintf_r+0x110>
 800e3a6:	9207      	str	r2, [sp, #28]
 800e3a8:	e014      	b.n	800e3d4 <_svfiprintf_r+0x110>
 800e3aa:	eba0 0308 	sub.w	r3, r0, r8
 800e3ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	9304      	str	r3, [sp, #16]
 800e3b6:	46a2      	mov	sl, r4
 800e3b8:	e7d2      	b.n	800e360 <_svfiprintf_r+0x9c>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	1d19      	adds	r1, r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	9103      	str	r1, [sp, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	bfbb      	ittet	lt
 800e3c6:	425b      	neglt	r3, r3
 800e3c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3cc:	9307      	strge	r3, [sp, #28]
 800e3ce:	9307      	strlt	r3, [sp, #28]
 800e3d0:	bfb8      	it	lt
 800e3d2:	9204      	strlt	r2, [sp, #16]
 800e3d4:	7823      	ldrb	r3, [r4, #0]
 800e3d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d8:	d10c      	bne.n	800e3f4 <_svfiprintf_r+0x130>
 800e3da:	7863      	ldrb	r3, [r4, #1]
 800e3dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3de:	d134      	bne.n	800e44a <_svfiprintf_r+0x186>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	9203      	str	r2, [sp, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bfb8      	it	lt
 800e3ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3f0:	3402      	adds	r4, #2
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4bc <_svfiprintf_r+0x1f8>
 800e3f8:	7821      	ldrb	r1, [r4, #0]
 800e3fa:	2203      	movs	r2, #3
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	f7f1 ff07 	bl	8000210 <memchr>
 800e402:	b138      	cbz	r0, 800e414 <_svfiprintf_r+0x150>
 800e404:	9b04      	ldr	r3, [sp, #16]
 800e406:	eba0 000a 	sub.w	r0, r0, sl
 800e40a:	2240      	movs	r2, #64	; 0x40
 800e40c:	4082      	lsls	r2, r0
 800e40e:	4313      	orrs	r3, r2
 800e410:	3401      	adds	r4, #1
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e418:	4825      	ldr	r0, [pc, #148]	; (800e4b0 <_svfiprintf_r+0x1ec>)
 800e41a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41e:	2206      	movs	r2, #6
 800e420:	f7f1 fef6 	bl	8000210 <memchr>
 800e424:	2800      	cmp	r0, #0
 800e426:	d038      	beq.n	800e49a <_svfiprintf_r+0x1d6>
 800e428:	4b22      	ldr	r3, [pc, #136]	; (800e4b4 <_svfiprintf_r+0x1f0>)
 800e42a:	bb1b      	cbnz	r3, 800e474 <_svfiprintf_r+0x1b0>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	3307      	adds	r3, #7
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	3308      	adds	r3, #8
 800e436:	9303      	str	r3, [sp, #12]
 800e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43a:	4433      	add	r3, r6
 800e43c:	9309      	str	r3, [sp, #36]	; 0x24
 800e43e:	e768      	b.n	800e312 <_svfiprintf_r+0x4e>
 800e440:	fb0c 3202 	mla	r2, ip, r2, r3
 800e444:	460c      	mov	r4, r1
 800e446:	2001      	movs	r0, #1
 800e448:	e7a6      	b.n	800e398 <_svfiprintf_r+0xd4>
 800e44a:	2300      	movs	r3, #0
 800e44c:	3401      	adds	r4, #1
 800e44e:	9305      	str	r3, [sp, #20]
 800e450:	4619      	mov	r1, r3
 800e452:	f04f 0c0a 	mov.w	ip, #10
 800e456:	4620      	mov	r0, r4
 800e458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45c:	3a30      	subs	r2, #48	; 0x30
 800e45e:	2a09      	cmp	r2, #9
 800e460:	d903      	bls.n	800e46a <_svfiprintf_r+0x1a6>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0c6      	beq.n	800e3f4 <_svfiprintf_r+0x130>
 800e466:	9105      	str	r1, [sp, #20]
 800e468:	e7c4      	b.n	800e3f4 <_svfiprintf_r+0x130>
 800e46a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46e:	4604      	mov	r4, r0
 800e470:	2301      	movs	r3, #1
 800e472:	e7f0      	b.n	800e456 <_svfiprintf_r+0x192>
 800e474:	ab03      	add	r3, sp, #12
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	462a      	mov	r2, r5
 800e47a:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <_svfiprintf_r+0x1f4>)
 800e47c:	a904      	add	r1, sp, #16
 800e47e:	4638      	mov	r0, r7
 800e480:	f3af 8000 	nop.w
 800e484:	1c42      	adds	r2, r0, #1
 800e486:	4606      	mov	r6, r0
 800e488:	d1d6      	bne.n	800e438 <_svfiprintf_r+0x174>
 800e48a:	89ab      	ldrh	r3, [r5, #12]
 800e48c:	065b      	lsls	r3, r3, #25
 800e48e:	f53f af2d 	bmi.w	800e2ec <_svfiprintf_r+0x28>
 800e492:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e494:	b01d      	add	sp, #116	; 0x74
 800e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49a:	ab03      	add	r3, sp, #12
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	462a      	mov	r2, r5
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <_svfiprintf_r+0x1f4>)
 800e4a2:	a904      	add	r1, sp, #16
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f000 f879 	bl	800e59c <_printf_i>
 800e4aa:	e7eb      	b.n	800e484 <_svfiprintf_r+0x1c0>
 800e4ac:	0800f89f 	.word	0x0800f89f
 800e4b0:	0800f8a9 	.word	0x0800f8a9
 800e4b4:	00000000 	.word	0x00000000
 800e4b8:	0800e211 	.word	0x0800e211
 800e4bc:	0800f8a5 	.word	0x0800f8a5

0800e4c0 <_printf_common>:
 800e4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	4699      	mov	r9, r3
 800e4c8:	688a      	ldr	r2, [r1, #8]
 800e4ca:	690b      	ldr	r3, [r1, #16]
 800e4cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	bfb8      	it	lt
 800e4d4:	4613      	movlt	r3, r2
 800e4d6:	6033      	str	r3, [r6, #0]
 800e4d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4dc:	4607      	mov	r7, r0
 800e4de:	460c      	mov	r4, r1
 800e4e0:	b10a      	cbz	r2, 800e4e6 <_printf_common+0x26>
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	6033      	str	r3, [r6, #0]
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	0699      	lsls	r1, r3, #26
 800e4ea:	bf42      	ittt	mi
 800e4ec:	6833      	ldrmi	r3, [r6, #0]
 800e4ee:	3302      	addmi	r3, #2
 800e4f0:	6033      	strmi	r3, [r6, #0]
 800e4f2:	6825      	ldr	r5, [r4, #0]
 800e4f4:	f015 0506 	ands.w	r5, r5, #6
 800e4f8:	d106      	bne.n	800e508 <_printf_common+0x48>
 800e4fa:	f104 0a19 	add.w	sl, r4, #25
 800e4fe:	68e3      	ldr	r3, [r4, #12]
 800e500:	6832      	ldr	r2, [r6, #0]
 800e502:	1a9b      	subs	r3, r3, r2
 800e504:	42ab      	cmp	r3, r5
 800e506:	dc26      	bgt.n	800e556 <_printf_common+0x96>
 800e508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e50c:	1e13      	subs	r3, r2, #0
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	bf18      	it	ne
 800e512:	2301      	movne	r3, #1
 800e514:	0692      	lsls	r2, r2, #26
 800e516:	d42b      	bmi.n	800e570 <_printf_common+0xb0>
 800e518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e51c:	4649      	mov	r1, r9
 800e51e:	4638      	mov	r0, r7
 800e520:	47c0      	blx	r8
 800e522:	3001      	adds	r0, #1
 800e524:	d01e      	beq.n	800e564 <_printf_common+0xa4>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	6922      	ldr	r2, [r4, #16]
 800e52a:	f003 0306 	and.w	r3, r3, #6
 800e52e:	2b04      	cmp	r3, #4
 800e530:	bf02      	ittt	eq
 800e532:	68e5      	ldreq	r5, [r4, #12]
 800e534:	6833      	ldreq	r3, [r6, #0]
 800e536:	1aed      	subeq	r5, r5, r3
 800e538:	68a3      	ldr	r3, [r4, #8]
 800e53a:	bf0c      	ite	eq
 800e53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e540:	2500      	movne	r5, #0
 800e542:	4293      	cmp	r3, r2
 800e544:	bfc4      	itt	gt
 800e546:	1a9b      	subgt	r3, r3, r2
 800e548:	18ed      	addgt	r5, r5, r3
 800e54a:	2600      	movs	r6, #0
 800e54c:	341a      	adds	r4, #26
 800e54e:	42b5      	cmp	r5, r6
 800e550:	d11a      	bne.n	800e588 <_printf_common+0xc8>
 800e552:	2000      	movs	r0, #0
 800e554:	e008      	b.n	800e568 <_printf_common+0xa8>
 800e556:	2301      	movs	r3, #1
 800e558:	4652      	mov	r2, sl
 800e55a:	4649      	mov	r1, r9
 800e55c:	4638      	mov	r0, r7
 800e55e:	47c0      	blx	r8
 800e560:	3001      	adds	r0, #1
 800e562:	d103      	bne.n	800e56c <_printf_common+0xac>
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56c:	3501      	adds	r5, #1
 800e56e:	e7c6      	b.n	800e4fe <_printf_common+0x3e>
 800e570:	18e1      	adds	r1, r4, r3
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	2030      	movs	r0, #48	; 0x30
 800e576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e57a:	4422      	add	r2, r4
 800e57c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e584:	3302      	adds	r3, #2
 800e586:	e7c7      	b.n	800e518 <_printf_common+0x58>
 800e588:	2301      	movs	r3, #1
 800e58a:	4622      	mov	r2, r4
 800e58c:	4649      	mov	r1, r9
 800e58e:	4638      	mov	r0, r7
 800e590:	47c0      	blx	r8
 800e592:	3001      	adds	r0, #1
 800e594:	d0e6      	beq.n	800e564 <_printf_common+0xa4>
 800e596:	3601      	adds	r6, #1
 800e598:	e7d9      	b.n	800e54e <_printf_common+0x8e>
	...

0800e59c <_printf_i>:
 800e59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	7e0f      	ldrb	r7, [r1, #24]
 800e5a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5a4:	2f78      	cmp	r7, #120	; 0x78
 800e5a6:	4691      	mov	r9, r2
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	469a      	mov	sl, r3
 800e5ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5b2:	d807      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5b4:	2f62      	cmp	r7, #98	; 0x62
 800e5b6:	d80a      	bhi.n	800e5ce <_printf_i+0x32>
 800e5b8:	2f00      	cmp	r7, #0
 800e5ba:	f000 80d4 	beq.w	800e766 <_printf_i+0x1ca>
 800e5be:	2f58      	cmp	r7, #88	; 0x58
 800e5c0:	f000 80c0 	beq.w	800e744 <_printf_i+0x1a8>
 800e5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5cc:	e03a      	b.n	800e644 <_printf_i+0xa8>
 800e5ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5d2:	2b15      	cmp	r3, #21
 800e5d4:	d8f6      	bhi.n	800e5c4 <_printf_i+0x28>
 800e5d6:	a101      	add	r1, pc, #4	; (adr r1, 800e5dc <_printf_i+0x40>)
 800e5d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5dc:	0800e635 	.word	0x0800e635
 800e5e0:	0800e649 	.word	0x0800e649
 800e5e4:	0800e5c5 	.word	0x0800e5c5
 800e5e8:	0800e5c5 	.word	0x0800e5c5
 800e5ec:	0800e5c5 	.word	0x0800e5c5
 800e5f0:	0800e5c5 	.word	0x0800e5c5
 800e5f4:	0800e649 	.word	0x0800e649
 800e5f8:	0800e5c5 	.word	0x0800e5c5
 800e5fc:	0800e5c5 	.word	0x0800e5c5
 800e600:	0800e5c5 	.word	0x0800e5c5
 800e604:	0800e5c5 	.word	0x0800e5c5
 800e608:	0800e74d 	.word	0x0800e74d
 800e60c:	0800e675 	.word	0x0800e675
 800e610:	0800e707 	.word	0x0800e707
 800e614:	0800e5c5 	.word	0x0800e5c5
 800e618:	0800e5c5 	.word	0x0800e5c5
 800e61c:	0800e76f 	.word	0x0800e76f
 800e620:	0800e5c5 	.word	0x0800e5c5
 800e624:	0800e675 	.word	0x0800e675
 800e628:	0800e5c5 	.word	0x0800e5c5
 800e62c:	0800e5c5 	.word	0x0800e5c5
 800e630:	0800e70f 	.word	0x0800e70f
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	1d1a      	adds	r2, r3, #4
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	602a      	str	r2, [r5, #0]
 800e63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e644:	2301      	movs	r3, #1
 800e646:	e09f      	b.n	800e788 <_printf_i+0x1ec>
 800e648:	6820      	ldr	r0, [r4, #0]
 800e64a:	682b      	ldr	r3, [r5, #0]
 800e64c:	0607      	lsls	r7, r0, #24
 800e64e:	f103 0104 	add.w	r1, r3, #4
 800e652:	6029      	str	r1, [r5, #0]
 800e654:	d501      	bpl.n	800e65a <_printf_i+0xbe>
 800e656:	681e      	ldr	r6, [r3, #0]
 800e658:	e003      	b.n	800e662 <_printf_i+0xc6>
 800e65a:	0646      	lsls	r6, r0, #25
 800e65c:	d5fb      	bpl.n	800e656 <_printf_i+0xba>
 800e65e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e662:	2e00      	cmp	r6, #0
 800e664:	da03      	bge.n	800e66e <_printf_i+0xd2>
 800e666:	232d      	movs	r3, #45	; 0x2d
 800e668:	4276      	negs	r6, r6
 800e66a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e66e:	485a      	ldr	r0, [pc, #360]	; (800e7d8 <_printf_i+0x23c>)
 800e670:	230a      	movs	r3, #10
 800e672:	e012      	b.n	800e69a <_printf_i+0xfe>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	6820      	ldr	r0, [r4, #0]
 800e678:	1d19      	adds	r1, r3, #4
 800e67a:	6029      	str	r1, [r5, #0]
 800e67c:	0605      	lsls	r5, r0, #24
 800e67e:	d501      	bpl.n	800e684 <_printf_i+0xe8>
 800e680:	681e      	ldr	r6, [r3, #0]
 800e682:	e002      	b.n	800e68a <_printf_i+0xee>
 800e684:	0641      	lsls	r1, r0, #25
 800e686:	d5fb      	bpl.n	800e680 <_printf_i+0xe4>
 800e688:	881e      	ldrh	r6, [r3, #0]
 800e68a:	4853      	ldr	r0, [pc, #332]	; (800e7d8 <_printf_i+0x23c>)
 800e68c:	2f6f      	cmp	r7, #111	; 0x6f
 800e68e:	bf0c      	ite	eq
 800e690:	2308      	moveq	r3, #8
 800e692:	230a      	movne	r3, #10
 800e694:	2100      	movs	r1, #0
 800e696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e69a:	6865      	ldr	r5, [r4, #4]
 800e69c:	60a5      	str	r5, [r4, #8]
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	bfa2      	ittt	ge
 800e6a2:	6821      	ldrge	r1, [r4, #0]
 800e6a4:	f021 0104 	bicge.w	r1, r1, #4
 800e6a8:	6021      	strge	r1, [r4, #0]
 800e6aa:	b90e      	cbnz	r6, 800e6b0 <_printf_i+0x114>
 800e6ac:	2d00      	cmp	r5, #0
 800e6ae:	d04b      	beq.n	800e748 <_printf_i+0x1ac>
 800e6b0:	4615      	mov	r5, r2
 800e6b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6b6:	fb03 6711 	mls	r7, r3, r1, r6
 800e6ba:	5dc7      	ldrb	r7, [r0, r7]
 800e6bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6c0:	4637      	mov	r7, r6
 800e6c2:	42bb      	cmp	r3, r7
 800e6c4:	460e      	mov	r6, r1
 800e6c6:	d9f4      	bls.n	800e6b2 <_printf_i+0x116>
 800e6c8:	2b08      	cmp	r3, #8
 800e6ca:	d10b      	bne.n	800e6e4 <_printf_i+0x148>
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	07de      	lsls	r6, r3, #31
 800e6d0:	d508      	bpl.n	800e6e4 <_printf_i+0x148>
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	6861      	ldr	r1, [r4, #4]
 800e6d6:	4299      	cmp	r1, r3
 800e6d8:	bfde      	ittt	le
 800e6da:	2330      	movle	r3, #48	; 0x30
 800e6dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6e4:	1b52      	subs	r2, r2, r5
 800e6e6:	6122      	str	r2, [r4, #16]
 800e6e8:	f8cd a000 	str.w	sl, [sp]
 800e6ec:	464b      	mov	r3, r9
 800e6ee:	aa03      	add	r2, sp, #12
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	f7ff fee4 	bl	800e4c0 <_printf_common>
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	d14a      	bne.n	800e792 <_printf_i+0x1f6>
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	b004      	add	sp, #16
 800e702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	f043 0320 	orr.w	r3, r3, #32
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	4833      	ldr	r0, [pc, #204]	; (800e7dc <_printf_i+0x240>)
 800e710:	2778      	movs	r7, #120	; 0x78
 800e712:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	6829      	ldr	r1, [r5, #0]
 800e71a:	061f      	lsls	r7, r3, #24
 800e71c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e720:	d402      	bmi.n	800e728 <_printf_i+0x18c>
 800e722:	065f      	lsls	r7, r3, #25
 800e724:	bf48      	it	mi
 800e726:	b2b6      	uxthmi	r6, r6
 800e728:	07df      	lsls	r7, r3, #31
 800e72a:	bf48      	it	mi
 800e72c:	f043 0320 	orrmi.w	r3, r3, #32
 800e730:	6029      	str	r1, [r5, #0]
 800e732:	bf48      	it	mi
 800e734:	6023      	strmi	r3, [r4, #0]
 800e736:	b91e      	cbnz	r6, 800e740 <_printf_i+0x1a4>
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	f023 0320 	bic.w	r3, r3, #32
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	2310      	movs	r3, #16
 800e742:	e7a7      	b.n	800e694 <_printf_i+0xf8>
 800e744:	4824      	ldr	r0, [pc, #144]	; (800e7d8 <_printf_i+0x23c>)
 800e746:	e7e4      	b.n	800e712 <_printf_i+0x176>
 800e748:	4615      	mov	r5, r2
 800e74a:	e7bd      	b.n	800e6c8 <_printf_i+0x12c>
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	6826      	ldr	r6, [r4, #0]
 800e750:	6961      	ldr	r1, [r4, #20]
 800e752:	1d18      	adds	r0, r3, #4
 800e754:	6028      	str	r0, [r5, #0]
 800e756:	0635      	lsls	r5, r6, #24
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	d501      	bpl.n	800e760 <_printf_i+0x1c4>
 800e75c:	6019      	str	r1, [r3, #0]
 800e75e:	e002      	b.n	800e766 <_printf_i+0x1ca>
 800e760:	0670      	lsls	r0, r6, #25
 800e762:	d5fb      	bpl.n	800e75c <_printf_i+0x1c0>
 800e764:	8019      	strh	r1, [r3, #0]
 800e766:	2300      	movs	r3, #0
 800e768:	6123      	str	r3, [r4, #16]
 800e76a:	4615      	mov	r5, r2
 800e76c:	e7bc      	b.n	800e6e8 <_printf_i+0x14c>
 800e76e:	682b      	ldr	r3, [r5, #0]
 800e770:	1d1a      	adds	r2, r3, #4
 800e772:	602a      	str	r2, [r5, #0]
 800e774:	681d      	ldr	r5, [r3, #0]
 800e776:	6862      	ldr	r2, [r4, #4]
 800e778:	2100      	movs	r1, #0
 800e77a:	4628      	mov	r0, r5
 800e77c:	f7f1 fd48 	bl	8000210 <memchr>
 800e780:	b108      	cbz	r0, 800e786 <_printf_i+0x1ea>
 800e782:	1b40      	subs	r0, r0, r5
 800e784:	6060      	str	r0, [r4, #4]
 800e786:	6863      	ldr	r3, [r4, #4]
 800e788:	6123      	str	r3, [r4, #16]
 800e78a:	2300      	movs	r3, #0
 800e78c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e790:	e7aa      	b.n	800e6e8 <_printf_i+0x14c>
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	462a      	mov	r2, r5
 800e796:	4649      	mov	r1, r9
 800e798:	4640      	mov	r0, r8
 800e79a:	47d0      	blx	sl
 800e79c:	3001      	adds	r0, #1
 800e79e:	d0ad      	beq.n	800e6fc <_printf_i+0x160>
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	079b      	lsls	r3, r3, #30
 800e7a4:	d413      	bmi.n	800e7ce <_printf_i+0x232>
 800e7a6:	68e0      	ldr	r0, [r4, #12]
 800e7a8:	9b03      	ldr	r3, [sp, #12]
 800e7aa:	4298      	cmp	r0, r3
 800e7ac:	bfb8      	it	lt
 800e7ae:	4618      	movlt	r0, r3
 800e7b0:	e7a6      	b.n	800e700 <_printf_i+0x164>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	4649      	mov	r1, r9
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	47d0      	blx	sl
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d09d      	beq.n	800e6fc <_printf_i+0x160>
 800e7c0:	3501      	adds	r5, #1
 800e7c2:	68e3      	ldr	r3, [r4, #12]
 800e7c4:	9903      	ldr	r1, [sp, #12]
 800e7c6:	1a5b      	subs	r3, r3, r1
 800e7c8:	42ab      	cmp	r3, r5
 800e7ca:	dcf2      	bgt.n	800e7b2 <_printf_i+0x216>
 800e7cc:	e7eb      	b.n	800e7a6 <_printf_i+0x20a>
 800e7ce:	2500      	movs	r5, #0
 800e7d0:	f104 0619 	add.w	r6, r4, #25
 800e7d4:	e7f5      	b.n	800e7c2 <_printf_i+0x226>
 800e7d6:	bf00      	nop
 800e7d8:	0800f8b0 	.word	0x0800f8b0
 800e7dc:	0800f8c1 	.word	0x0800f8c1

0800e7e0 <__sflush_r>:
 800e7e0:	898a      	ldrh	r2, [r1, #12]
 800e7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	0710      	lsls	r0, r2, #28
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	d458      	bmi.n	800e8a0 <__sflush_r+0xc0>
 800e7ee:	684b      	ldr	r3, [r1, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	dc05      	bgt.n	800e800 <__sflush_r+0x20>
 800e7f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	dc02      	bgt.n	800e800 <__sflush_r+0x20>
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e802:	2e00      	cmp	r6, #0
 800e804:	d0f9      	beq.n	800e7fa <__sflush_r+0x1a>
 800e806:	2300      	movs	r3, #0
 800e808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e80c:	682f      	ldr	r7, [r5, #0]
 800e80e:	6a21      	ldr	r1, [r4, #32]
 800e810:	602b      	str	r3, [r5, #0]
 800e812:	d032      	beq.n	800e87a <__sflush_r+0x9a>
 800e814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	075a      	lsls	r2, r3, #29
 800e81a:	d505      	bpl.n	800e828 <__sflush_r+0x48>
 800e81c:	6863      	ldr	r3, [r4, #4]
 800e81e:	1ac0      	subs	r0, r0, r3
 800e820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e822:	b10b      	cbz	r3, 800e828 <__sflush_r+0x48>
 800e824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e826:	1ac0      	subs	r0, r0, r3
 800e828:	2300      	movs	r3, #0
 800e82a:	4602      	mov	r2, r0
 800e82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e82e:	6a21      	ldr	r1, [r4, #32]
 800e830:	4628      	mov	r0, r5
 800e832:	47b0      	blx	r6
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	89a3      	ldrh	r3, [r4, #12]
 800e838:	d106      	bne.n	800e848 <__sflush_r+0x68>
 800e83a:	6829      	ldr	r1, [r5, #0]
 800e83c:	291d      	cmp	r1, #29
 800e83e:	d82b      	bhi.n	800e898 <__sflush_r+0xb8>
 800e840:	4a29      	ldr	r2, [pc, #164]	; (800e8e8 <__sflush_r+0x108>)
 800e842:	410a      	asrs	r2, r1
 800e844:	07d6      	lsls	r6, r2, #31
 800e846:	d427      	bmi.n	800e898 <__sflush_r+0xb8>
 800e848:	2200      	movs	r2, #0
 800e84a:	6062      	str	r2, [r4, #4]
 800e84c:	04d9      	lsls	r1, r3, #19
 800e84e:	6922      	ldr	r2, [r4, #16]
 800e850:	6022      	str	r2, [r4, #0]
 800e852:	d504      	bpl.n	800e85e <__sflush_r+0x7e>
 800e854:	1c42      	adds	r2, r0, #1
 800e856:	d101      	bne.n	800e85c <__sflush_r+0x7c>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b903      	cbnz	r3, 800e85e <__sflush_r+0x7e>
 800e85c:	6560      	str	r0, [r4, #84]	; 0x54
 800e85e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e860:	602f      	str	r7, [r5, #0]
 800e862:	2900      	cmp	r1, #0
 800e864:	d0c9      	beq.n	800e7fa <__sflush_r+0x1a>
 800e866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e86a:	4299      	cmp	r1, r3
 800e86c:	d002      	beq.n	800e874 <__sflush_r+0x94>
 800e86e:	4628      	mov	r0, r5
 800e870:	f7ff fbce 	bl	800e010 <_free_r>
 800e874:	2000      	movs	r0, #0
 800e876:	6360      	str	r0, [r4, #52]	; 0x34
 800e878:	e7c0      	b.n	800e7fc <__sflush_r+0x1c>
 800e87a:	2301      	movs	r3, #1
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b0      	blx	r6
 800e880:	1c41      	adds	r1, r0, #1
 800e882:	d1c8      	bne.n	800e816 <__sflush_r+0x36>
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0c5      	beq.n	800e816 <__sflush_r+0x36>
 800e88a:	2b1d      	cmp	r3, #29
 800e88c:	d001      	beq.n	800e892 <__sflush_r+0xb2>
 800e88e:	2b16      	cmp	r3, #22
 800e890:	d101      	bne.n	800e896 <__sflush_r+0xb6>
 800e892:	602f      	str	r7, [r5, #0]
 800e894:	e7b1      	b.n	800e7fa <__sflush_r+0x1a>
 800e896:	89a3      	ldrh	r3, [r4, #12]
 800e898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e89c:	81a3      	strh	r3, [r4, #12]
 800e89e:	e7ad      	b.n	800e7fc <__sflush_r+0x1c>
 800e8a0:	690f      	ldr	r7, [r1, #16]
 800e8a2:	2f00      	cmp	r7, #0
 800e8a4:	d0a9      	beq.n	800e7fa <__sflush_r+0x1a>
 800e8a6:	0793      	lsls	r3, r2, #30
 800e8a8:	680e      	ldr	r6, [r1, #0]
 800e8aa:	bf08      	it	eq
 800e8ac:	694b      	ldreq	r3, [r1, #20]
 800e8ae:	600f      	str	r7, [r1, #0]
 800e8b0:	bf18      	it	ne
 800e8b2:	2300      	movne	r3, #0
 800e8b4:	eba6 0807 	sub.w	r8, r6, r7
 800e8b8:	608b      	str	r3, [r1, #8]
 800e8ba:	f1b8 0f00 	cmp.w	r8, #0
 800e8be:	dd9c      	ble.n	800e7fa <__sflush_r+0x1a>
 800e8c0:	6a21      	ldr	r1, [r4, #32]
 800e8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8c4:	4643      	mov	r3, r8
 800e8c6:	463a      	mov	r2, r7
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b0      	blx	r6
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	dc06      	bgt.n	800e8de <__sflush_r+0xfe>
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d6:	81a3      	strh	r3, [r4, #12]
 800e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8dc:	e78e      	b.n	800e7fc <__sflush_r+0x1c>
 800e8de:	4407      	add	r7, r0
 800e8e0:	eba8 0800 	sub.w	r8, r8, r0
 800e8e4:	e7e9      	b.n	800e8ba <__sflush_r+0xda>
 800e8e6:	bf00      	nop
 800e8e8:	dfbffffe 	.word	0xdfbffffe

0800e8ec <_fflush_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	690b      	ldr	r3, [r1, #16]
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	b913      	cbnz	r3, 800e8fc <_fflush_r+0x10>
 800e8f6:	2500      	movs	r5, #0
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	b118      	cbz	r0, 800e906 <_fflush_r+0x1a>
 800e8fe:	6a03      	ldr	r3, [r0, #32]
 800e900:	b90b      	cbnz	r3, 800e906 <_fflush_r+0x1a>
 800e902:	f7ff f9dd 	bl	800dcc0 <__sinit>
 800e906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d0f3      	beq.n	800e8f6 <_fflush_r+0xa>
 800e90e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e910:	07d0      	lsls	r0, r2, #31
 800e912:	d404      	bmi.n	800e91e <_fflush_r+0x32>
 800e914:	0599      	lsls	r1, r3, #22
 800e916:	d402      	bmi.n	800e91e <_fflush_r+0x32>
 800e918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e91a:	f7ff fb51 	bl	800dfc0 <__retarget_lock_acquire_recursive>
 800e91e:	4628      	mov	r0, r5
 800e920:	4621      	mov	r1, r4
 800e922:	f7ff ff5d 	bl	800e7e0 <__sflush_r>
 800e926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e928:	07da      	lsls	r2, r3, #31
 800e92a:	4605      	mov	r5, r0
 800e92c:	d4e4      	bmi.n	800e8f8 <_fflush_r+0xc>
 800e92e:	89a3      	ldrh	r3, [r4, #12]
 800e930:	059b      	lsls	r3, r3, #22
 800e932:	d4e1      	bmi.n	800e8f8 <_fflush_r+0xc>
 800e934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e936:	f7ff fb44 	bl	800dfc2 <__retarget_lock_release_recursive>
 800e93a:	e7dd      	b.n	800e8f8 <_fflush_r+0xc>

0800e93c <fiprintf>:
 800e93c:	b40e      	push	{r1, r2, r3}
 800e93e:	b503      	push	{r0, r1, lr}
 800e940:	4601      	mov	r1, r0
 800e942:	ab03      	add	r3, sp, #12
 800e944:	4805      	ldr	r0, [pc, #20]	; (800e95c <fiprintf+0x20>)
 800e946:	f853 2b04 	ldr.w	r2, [r3], #4
 800e94a:	6800      	ldr	r0, [r0, #0]
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	f000 f89f 	bl	800ea90 <_vfiprintf_r>
 800e952:	b002      	add	sp, #8
 800e954:	f85d eb04 	ldr.w	lr, [sp], #4
 800e958:	b003      	add	sp, #12
 800e95a:	4770      	bx	lr
 800e95c:	20000064 	.word	0x20000064

0800e960 <memmove>:
 800e960:	4288      	cmp	r0, r1
 800e962:	b510      	push	{r4, lr}
 800e964:	eb01 0402 	add.w	r4, r1, r2
 800e968:	d902      	bls.n	800e970 <memmove+0x10>
 800e96a:	4284      	cmp	r4, r0
 800e96c:	4623      	mov	r3, r4
 800e96e:	d807      	bhi.n	800e980 <memmove+0x20>
 800e970:	1e43      	subs	r3, r0, #1
 800e972:	42a1      	cmp	r1, r4
 800e974:	d008      	beq.n	800e988 <memmove+0x28>
 800e976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e97e:	e7f8      	b.n	800e972 <memmove+0x12>
 800e980:	4402      	add	r2, r0
 800e982:	4601      	mov	r1, r0
 800e984:	428a      	cmp	r2, r1
 800e986:	d100      	bne.n	800e98a <memmove+0x2a>
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e992:	e7f7      	b.n	800e984 <memmove+0x24>

0800e994 <_sbrk_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4d06      	ldr	r5, [pc, #24]	; (800e9b0 <_sbrk_r+0x1c>)
 800e998:	2300      	movs	r3, #0
 800e99a:	4604      	mov	r4, r0
 800e99c:	4608      	mov	r0, r1
 800e99e:	602b      	str	r3, [r5, #0]
 800e9a0:	f7f3 fce0 	bl	8002364 <_sbrk>
 800e9a4:	1c43      	adds	r3, r0, #1
 800e9a6:	d102      	bne.n	800e9ae <_sbrk_r+0x1a>
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	b103      	cbz	r3, 800e9ae <_sbrk_r+0x1a>
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	bd38      	pop	{r3, r4, r5, pc}
 800e9b0:	20003cac 	.word	0x20003cac

0800e9b4 <memcpy>:
 800e9b4:	440a      	add	r2, r1
 800e9b6:	4291      	cmp	r1, r2
 800e9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9bc:	d100      	bne.n	800e9c0 <memcpy+0xc>
 800e9be:	4770      	bx	lr
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9ca:	4291      	cmp	r1, r2
 800e9cc:	d1f9      	bne.n	800e9c2 <memcpy+0xe>
 800e9ce:	bd10      	pop	{r4, pc}

0800e9d0 <abort>:
 800e9d0:	b508      	push	{r3, lr}
 800e9d2:	2006      	movs	r0, #6
 800e9d4:	f000 fa34 	bl	800ee40 <raise>
 800e9d8:	2001      	movs	r0, #1
 800e9da:	f7f3 fc4b 	bl	8002274 <_exit>

0800e9de <_realloc_r>:
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	4614      	mov	r4, r2
 800e9e6:	460e      	mov	r6, r1
 800e9e8:	b921      	cbnz	r1, 800e9f4 <_realloc_r+0x16>
 800e9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	f7ff bb82 	b.w	800e0f8 <_malloc_r>
 800e9f4:	b92a      	cbnz	r2, 800ea02 <_realloc_r+0x24>
 800e9f6:	f7ff fb0b 	bl	800e010 <_free_r>
 800e9fa:	4625      	mov	r5, r4
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea02:	f000 fa39 	bl	800ee78 <_malloc_usable_size_r>
 800ea06:	4284      	cmp	r4, r0
 800ea08:	4607      	mov	r7, r0
 800ea0a:	d802      	bhi.n	800ea12 <_realloc_r+0x34>
 800ea0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea10:	d812      	bhi.n	800ea38 <_realloc_r+0x5a>
 800ea12:	4621      	mov	r1, r4
 800ea14:	4640      	mov	r0, r8
 800ea16:	f7ff fb6f 	bl	800e0f8 <_malloc_r>
 800ea1a:	4605      	mov	r5, r0
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d0ed      	beq.n	800e9fc <_realloc_r+0x1e>
 800ea20:	42bc      	cmp	r4, r7
 800ea22:	4622      	mov	r2, r4
 800ea24:	4631      	mov	r1, r6
 800ea26:	bf28      	it	cs
 800ea28:	463a      	movcs	r2, r7
 800ea2a:	f7ff ffc3 	bl	800e9b4 <memcpy>
 800ea2e:	4631      	mov	r1, r6
 800ea30:	4640      	mov	r0, r8
 800ea32:	f7ff faed 	bl	800e010 <_free_r>
 800ea36:	e7e1      	b.n	800e9fc <_realloc_r+0x1e>
 800ea38:	4635      	mov	r5, r6
 800ea3a:	e7df      	b.n	800e9fc <_realloc_r+0x1e>

0800ea3c <__sfputc_r>:
 800ea3c:	6893      	ldr	r3, [r2, #8]
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	b410      	push	{r4}
 800ea44:	6093      	str	r3, [r2, #8]
 800ea46:	da08      	bge.n	800ea5a <__sfputc_r+0x1e>
 800ea48:	6994      	ldr	r4, [r2, #24]
 800ea4a:	42a3      	cmp	r3, r4
 800ea4c:	db01      	blt.n	800ea52 <__sfputc_r+0x16>
 800ea4e:	290a      	cmp	r1, #10
 800ea50:	d103      	bne.n	800ea5a <__sfputc_r+0x1e>
 800ea52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea56:	f000 b935 	b.w	800ecc4 <__swbuf_r>
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	1c58      	adds	r0, r3, #1
 800ea5e:	6010      	str	r0, [r2, #0]
 800ea60:	7019      	strb	r1, [r3, #0]
 800ea62:	4608      	mov	r0, r1
 800ea64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <__sfputs_r>:
 800ea6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	460f      	mov	r7, r1
 800ea70:	4614      	mov	r4, r2
 800ea72:	18d5      	adds	r5, r2, r3
 800ea74:	42ac      	cmp	r4, r5
 800ea76:	d101      	bne.n	800ea7c <__sfputs_r+0x12>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	e007      	b.n	800ea8c <__sfputs_r+0x22>
 800ea7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea80:	463a      	mov	r2, r7
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7ff ffda 	bl	800ea3c <__sfputc_r>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d1f3      	bne.n	800ea74 <__sfputs_r+0xa>
 800ea8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea90 <_vfiprintf_r>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	460d      	mov	r5, r1
 800ea96:	b09d      	sub	sp, #116	; 0x74
 800ea98:	4614      	mov	r4, r2
 800ea9a:	4698      	mov	r8, r3
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	b118      	cbz	r0, 800eaa8 <_vfiprintf_r+0x18>
 800eaa0:	6a03      	ldr	r3, [r0, #32]
 800eaa2:	b90b      	cbnz	r3, 800eaa8 <_vfiprintf_r+0x18>
 800eaa4:	f7ff f90c 	bl	800dcc0 <__sinit>
 800eaa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaaa:	07d9      	lsls	r1, r3, #31
 800eaac:	d405      	bmi.n	800eaba <_vfiprintf_r+0x2a>
 800eaae:	89ab      	ldrh	r3, [r5, #12]
 800eab0:	059a      	lsls	r2, r3, #22
 800eab2:	d402      	bmi.n	800eaba <_vfiprintf_r+0x2a>
 800eab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eab6:	f7ff fa83 	bl	800dfc0 <__retarget_lock_acquire_recursive>
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	071b      	lsls	r3, r3, #28
 800eabe:	d501      	bpl.n	800eac4 <_vfiprintf_r+0x34>
 800eac0:	692b      	ldr	r3, [r5, #16]
 800eac2:	b99b      	cbnz	r3, 800eaec <_vfiprintf_r+0x5c>
 800eac4:	4629      	mov	r1, r5
 800eac6:	4630      	mov	r0, r6
 800eac8:	f000 f93a 	bl	800ed40 <__swsetup_r>
 800eacc:	b170      	cbz	r0, 800eaec <_vfiprintf_r+0x5c>
 800eace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ead0:	07dc      	lsls	r4, r3, #31
 800ead2:	d504      	bpl.n	800eade <_vfiprintf_r+0x4e>
 800ead4:	f04f 30ff 	mov.w	r0, #4294967295
 800ead8:	b01d      	add	sp, #116	; 0x74
 800eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eade:	89ab      	ldrh	r3, [r5, #12]
 800eae0:	0598      	lsls	r0, r3, #22
 800eae2:	d4f7      	bmi.n	800ead4 <_vfiprintf_r+0x44>
 800eae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eae6:	f7ff fa6c 	bl	800dfc2 <__retarget_lock_release_recursive>
 800eaea:	e7f3      	b.n	800ead4 <_vfiprintf_r+0x44>
 800eaec:	2300      	movs	r3, #0
 800eaee:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800eafa:	2330      	movs	r3, #48	; 0x30
 800eafc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ecb0 <_vfiprintf_r+0x220>
 800eb00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb04:	f04f 0901 	mov.w	r9, #1
 800eb08:	4623      	mov	r3, r4
 800eb0a:	469a      	mov	sl, r3
 800eb0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb10:	b10a      	cbz	r2, 800eb16 <_vfiprintf_r+0x86>
 800eb12:	2a25      	cmp	r2, #37	; 0x25
 800eb14:	d1f9      	bne.n	800eb0a <_vfiprintf_r+0x7a>
 800eb16:	ebba 0b04 	subs.w	fp, sl, r4
 800eb1a:	d00b      	beq.n	800eb34 <_vfiprintf_r+0xa4>
 800eb1c:	465b      	mov	r3, fp
 800eb1e:	4622      	mov	r2, r4
 800eb20:	4629      	mov	r1, r5
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff ffa1 	bl	800ea6a <__sfputs_r>
 800eb28:	3001      	adds	r0, #1
 800eb2a:	f000 80a9 	beq.w	800ec80 <_vfiprintf_r+0x1f0>
 800eb2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb30:	445a      	add	r2, fp
 800eb32:	9209      	str	r2, [sp, #36]	; 0x24
 800eb34:	f89a 3000 	ldrb.w	r3, [sl]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f000 80a1 	beq.w	800ec80 <_vfiprintf_r+0x1f0>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f04f 32ff 	mov.w	r2, #4294967295
 800eb44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb48:	f10a 0a01 	add.w	sl, sl, #1
 800eb4c:	9304      	str	r3, [sp, #16]
 800eb4e:	9307      	str	r3, [sp, #28]
 800eb50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb54:	931a      	str	r3, [sp, #104]	; 0x68
 800eb56:	4654      	mov	r4, sl
 800eb58:	2205      	movs	r2, #5
 800eb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb5e:	4854      	ldr	r0, [pc, #336]	; (800ecb0 <_vfiprintf_r+0x220>)
 800eb60:	f7f1 fb56 	bl	8000210 <memchr>
 800eb64:	9a04      	ldr	r2, [sp, #16]
 800eb66:	b9d8      	cbnz	r0, 800eba0 <_vfiprintf_r+0x110>
 800eb68:	06d1      	lsls	r1, r2, #27
 800eb6a:	bf44      	itt	mi
 800eb6c:	2320      	movmi	r3, #32
 800eb6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb72:	0713      	lsls	r3, r2, #28
 800eb74:	bf44      	itt	mi
 800eb76:	232b      	movmi	r3, #43	; 0x2b
 800eb78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800eb80:	2b2a      	cmp	r3, #42	; 0x2a
 800eb82:	d015      	beq.n	800ebb0 <_vfiprintf_r+0x120>
 800eb84:	9a07      	ldr	r2, [sp, #28]
 800eb86:	4654      	mov	r4, sl
 800eb88:	2000      	movs	r0, #0
 800eb8a:	f04f 0c0a 	mov.w	ip, #10
 800eb8e:	4621      	mov	r1, r4
 800eb90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb94:	3b30      	subs	r3, #48	; 0x30
 800eb96:	2b09      	cmp	r3, #9
 800eb98:	d94d      	bls.n	800ec36 <_vfiprintf_r+0x1a6>
 800eb9a:	b1b0      	cbz	r0, 800ebca <_vfiprintf_r+0x13a>
 800eb9c:	9207      	str	r2, [sp, #28]
 800eb9e:	e014      	b.n	800ebca <_vfiprintf_r+0x13a>
 800eba0:	eba0 0308 	sub.w	r3, r0, r8
 800eba4:	fa09 f303 	lsl.w	r3, r9, r3
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	46a2      	mov	sl, r4
 800ebae:	e7d2      	b.n	800eb56 <_vfiprintf_r+0xc6>
 800ebb0:	9b03      	ldr	r3, [sp, #12]
 800ebb2:	1d19      	adds	r1, r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	9103      	str	r1, [sp, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	bfbb      	ittet	lt
 800ebbc:	425b      	neglt	r3, r3
 800ebbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ebc2:	9307      	strge	r3, [sp, #28]
 800ebc4:	9307      	strlt	r3, [sp, #28]
 800ebc6:	bfb8      	it	lt
 800ebc8:	9204      	strlt	r2, [sp, #16]
 800ebca:	7823      	ldrb	r3, [r4, #0]
 800ebcc:	2b2e      	cmp	r3, #46	; 0x2e
 800ebce:	d10c      	bne.n	800ebea <_vfiprintf_r+0x15a>
 800ebd0:	7863      	ldrb	r3, [r4, #1]
 800ebd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ebd4:	d134      	bne.n	800ec40 <_vfiprintf_r+0x1b0>
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	1d1a      	adds	r2, r3, #4
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	9203      	str	r2, [sp, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	bfb8      	it	lt
 800ebe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebe6:	3402      	adds	r4, #2
 800ebe8:	9305      	str	r3, [sp, #20]
 800ebea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ecc0 <_vfiprintf_r+0x230>
 800ebee:	7821      	ldrb	r1, [r4, #0]
 800ebf0:	2203      	movs	r2, #3
 800ebf2:	4650      	mov	r0, sl
 800ebf4:	f7f1 fb0c 	bl	8000210 <memchr>
 800ebf8:	b138      	cbz	r0, 800ec0a <_vfiprintf_r+0x17a>
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	eba0 000a 	sub.w	r0, r0, sl
 800ec00:	2240      	movs	r2, #64	; 0x40
 800ec02:	4082      	lsls	r2, r0
 800ec04:	4313      	orrs	r3, r2
 800ec06:	3401      	adds	r4, #1
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec0e:	4829      	ldr	r0, [pc, #164]	; (800ecb4 <_vfiprintf_r+0x224>)
 800ec10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec14:	2206      	movs	r2, #6
 800ec16:	f7f1 fafb 	bl	8000210 <memchr>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d03f      	beq.n	800ec9e <_vfiprintf_r+0x20e>
 800ec1e:	4b26      	ldr	r3, [pc, #152]	; (800ecb8 <_vfiprintf_r+0x228>)
 800ec20:	bb1b      	cbnz	r3, 800ec6a <_vfiprintf_r+0x1da>
 800ec22:	9b03      	ldr	r3, [sp, #12]
 800ec24:	3307      	adds	r3, #7
 800ec26:	f023 0307 	bic.w	r3, r3, #7
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	9303      	str	r3, [sp, #12]
 800ec2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec30:	443b      	add	r3, r7
 800ec32:	9309      	str	r3, [sp, #36]	; 0x24
 800ec34:	e768      	b.n	800eb08 <_vfiprintf_r+0x78>
 800ec36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	2001      	movs	r0, #1
 800ec3e:	e7a6      	b.n	800eb8e <_vfiprintf_r+0xfe>
 800ec40:	2300      	movs	r3, #0
 800ec42:	3401      	adds	r4, #1
 800ec44:	9305      	str	r3, [sp, #20]
 800ec46:	4619      	mov	r1, r3
 800ec48:	f04f 0c0a 	mov.w	ip, #10
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec52:	3a30      	subs	r2, #48	; 0x30
 800ec54:	2a09      	cmp	r2, #9
 800ec56:	d903      	bls.n	800ec60 <_vfiprintf_r+0x1d0>
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0c6      	beq.n	800ebea <_vfiprintf_r+0x15a>
 800ec5c:	9105      	str	r1, [sp, #20]
 800ec5e:	e7c4      	b.n	800ebea <_vfiprintf_r+0x15a>
 800ec60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec64:	4604      	mov	r4, r0
 800ec66:	2301      	movs	r3, #1
 800ec68:	e7f0      	b.n	800ec4c <_vfiprintf_r+0x1bc>
 800ec6a:	ab03      	add	r3, sp, #12
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	462a      	mov	r2, r5
 800ec70:	4b12      	ldr	r3, [pc, #72]	; (800ecbc <_vfiprintf_r+0x22c>)
 800ec72:	a904      	add	r1, sp, #16
 800ec74:	4630      	mov	r0, r6
 800ec76:	f3af 8000 	nop.w
 800ec7a:	4607      	mov	r7, r0
 800ec7c:	1c78      	adds	r0, r7, #1
 800ec7e:	d1d6      	bne.n	800ec2e <_vfiprintf_r+0x19e>
 800ec80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec82:	07d9      	lsls	r1, r3, #31
 800ec84:	d405      	bmi.n	800ec92 <_vfiprintf_r+0x202>
 800ec86:	89ab      	ldrh	r3, [r5, #12]
 800ec88:	059a      	lsls	r2, r3, #22
 800ec8a:	d402      	bmi.n	800ec92 <_vfiprintf_r+0x202>
 800ec8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec8e:	f7ff f998 	bl	800dfc2 <__retarget_lock_release_recursive>
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	065b      	lsls	r3, r3, #25
 800ec96:	f53f af1d 	bmi.w	800ead4 <_vfiprintf_r+0x44>
 800ec9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec9c:	e71c      	b.n	800ead8 <_vfiprintf_r+0x48>
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	462a      	mov	r2, r5
 800eca4:	4b05      	ldr	r3, [pc, #20]	; (800ecbc <_vfiprintf_r+0x22c>)
 800eca6:	a904      	add	r1, sp, #16
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f7ff fc77 	bl	800e59c <_printf_i>
 800ecae:	e7e4      	b.n	800ec7a <_vfiprintf_r+0x1ea>
 800ecb0:	0800f89f 	.word	0x0800f89f
 800ecb4:	0800f8a9 	.word	0x0800f8a9
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	0800ea6b 	.word	0x0800ea6b
 800ecc0:	0800f8a5 	.word	0x0800f8a5

0800ecc4 <__swbuf_r>:
 800ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc6:	460e      	mov	r6, r1
 800ecc8:	4614      	mov	r4, r2
 800ecca:	4605      	mov	r5, r0
 800eccc:	b118      	cbz	r0, 800ecd6 <__swbuf_r+0x12>
 800ecce:	6a03      	ldr	r3, [r0, #32]
 800ecd0:	b90b      	cbnz	r3, 800ecd6 <__swbuf_r+0x12>
 800ecd2:	f7fe fff5 	bl	800dcc0 <__sinit>
 800ecd6:	69a3      	ldr	r3, [r4, #24]
 800ecd8:	60a3      	str	r3, [r4, #8]
 800ecda:	89a3      	ldrh	r3, [r4, #12]
 800ecdc:	071a      	lsls	r2, r3, #28
 800ecde:	d525      	bpl.n	800ed2c <__swbuf_r+0x68>
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	b31b      	cbz	r3, 800ed2c <__swbuf_r+0x68>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	6922      	ldr	r2, [r4, #16]
 800ece8:	1a98      	subs	r0, r3, r2
 800ecea:	6963      	ldr	r3, [r4, #20]
 800ecec:	b2f6      	uxtb	r6, r6
 800ecee:	4283      	cmp	r3, r0
 800ecf0:	4637      	mov	r7, r6
 800ecf2:	dc04      	bgt.n	800ecfe <__swbuf_r+0x3a>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f7ff fdf8 	bl	800e8ec <_fflush_r>
 800ecfc:	b9e0      	cbnz	r0, 800ed38 <__swbuf_r+0x74>
 800ecfe:	68a3      	ldr	r3, [r4, #8]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	60a3      	str	r3, [r4, #8]
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	1c5a      	adds	r2, r3, #1
 800ed08:	6022      	str	r2, [r4, #0]
 800ed0a:	701e      	strb	r6, [r3, #0]
 800ed0c:	6962      	ldr	r2, [r4, #20]
 800ed0e:	1c43      	adds	r3, r0, #1
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d004      	beq.n	800ed1e <__swbuf_r+0x5a>
 800ed14:	89a3      	ldrh	r3, [r4, #12]
 800ed16:	07db      	lsls	r3, r3, #31
 800ed18:	d506      	bpl.n	800ed28 <__swbuf_r+0x64>
 800ed1a:	2e0a      	cmp	r6, #10
 800ed1c:	d104      	bne.n	800ed28 <__swbuf_r+0x64>
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4628      	mov	r0, r5
 800ed22:	f7ff fde3 	bl	800e8ec <_fflush_r>
 800ed26:	b938      	cbnz	r0, 800ed38 <__swbuf_r+0x74>
 800ed28:	4638      	mov	r0, r7
 800ed2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f000 f806 	bl	800ed40 <__swsetup_r>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d0d5      	beq.n	800ece4 <__swbuf_r+0x20>
 800ed38:	f04f 37ff 	mov.w	r7, #4294967295
 800ed3c:	e7f4      	b.n	800ed28 <__swbuf_r+0x64>
	...

0800ed40 <__swsetup_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4b2a      	ldr	r3, [pc, #168]	; (800edec <__swsetup_r+0xac>)
 800ed44:	4605      	mov	r5, r0
 800ed46:	6818      	ldr	r0, [r3, #0]
 800ed48:	460c      	mov	r4, r1
 800ed4a:	b118      	cbz	r0, 800ed54 <__swsetup_r+0x14>
 800ed4c:	6a03      	ldr	r3, [r0, #32]
 800ed4e:	b90b      	cbnz	r3, 800ed54 <__swsetup_r+0x14>
 800ed50:	f7fe ffb6 	bl	800dcc0 <__sinit>
 800ed54:	89a3      	ldrh	r3, [r4, #12]
 800ed56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed5a:	0718      	lsls	r0, r3, #28
 800ed5c:	d422      	bmi.n	800eda4 <__swsetup_r+0x64>
 800ed5e:	06d9      	lsls	r1, r3, #27
 800ed60:	d407      	bmi.n	800ed72 <__swsetup_r+0x32>
 800ed62:	2309      	movs	r3, #9
 800ed64:	602b      	str	r3, [r5, #0]
 800ed66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed70:	e034      	b.n	800eddc <__swsetup_r+0x9c>
 800ed72:	0758      	lsls	r0, r3, #29
 800ed74:	d512      	bpl.n	800ed9c <__swsetup_r+0x5c>
 800ed76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed78:	b141      	cbz	r1, 800ed8c <__swsetup_r+0x4c>
 800ed7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	d002      	beq.n	800ed88 <__swsetup_r+0x48>
 800ed82:	4628      	mov	r0, r5
 800ed84:	f7ff f944 	bl	800e010 <_free_r>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ed8c:	89a3      	ldrh	r3, [r4, #12]
 800ed8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed92:	81a3      	strh	r3, [r4, #12]
 800ed94:	2300      	movs	r3, #0
 800ed96:	6063      	str	r3, [r4, #4]
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	6023      	str	r3, [r4, #0]
 800ed9c:	89a3      	ldrh	r3, [r4, #12]
 800ed9e:	f043 0308 	orr.w	r3, r3, #8
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	6923      	ldr	r3, [r4, #16]
 800eda6:	b94b      	cbnz	r3, 800edbc <__swsetup_r+0x7c>
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edb2:	d003      	beq.n	800edbc <__swsetup_r+0x7c>
 800edb4:	4621      	mov	r1, r4
 800edb6:	4628      	mov	r0, r5
 800edb8:	f000 f88c 	bl	800eed4 <__smakebuf_r>
 800edbc:	89a0      	ldrh	r0, [r4, #12]
 800edbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edc2:	f010 0301 	ands.w	r3, r0, #1
 800edc6:	d00a      	beq.n	800edde <__swsetup_r+0x9e>
 800edc8:	2300      	movs	r3, #0
 800edca:	60a3      	str	r3, [r4, #8]
 800edcc:	6963      	ldr	r3, [r4, #20]
 800edce:	425b      	negs	r3, r3
 800edd0:	61a3      	str	r3, [r4, #24]
 800edd2:	6923      	ldr	r3, [r4, #16]
 800edd4:	b943      	cbnz	r3, 800ede8 <__swsetup_r+0xa8>
 800edd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edda:	d1c4      	bne.n	800ed66 <__swsetup_r+0x26>
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	0781      	lsls	r1, r0, #30
 800ede0:	bf58      	it	pl
 800ede2:	6963      	ldrpl	r3, [r4, #20]
 800ede4:	60a3      	str	r3, [r4, #8]
 800ede6:	e7f4      	b.n	800edd2 <__swsetup_r+0x92>
 800ede8:	2000      	movs	r0, #0
 800edea:	e7f7      	b.n	800eddc <__swsetup_r+0x9c>
 800edec:	20000064 	.word	0x20000064

0800edf0 <_raise_r>:
 800edf0:	291f      	cmp	r1, #31
 800edf2:	b538      	push	{r3, r4, r5, lr}
 800edf4:	4604      	mov	r4, r0
 800edf6:	460d      	mov	r5, r1
 800edf8:	d904      	bls.n	800ee04 <_raise_r+0x14>
 800edfa:	2316      	movs	r3, #22
 800edfc:	6003      	str	r3, [r0, #0]
 800edfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee06:	b112      	cbz	r2, 800ee0e <_raise_r+0x1e>
 800ee08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee0c:	b94b      	cbnz	r3, 800ee22 <_raise_r+0x32>
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f000 f830 	bl	800ee74 <_getpid_r>
 800ee14:	462a      	mov	r2, r5
 800ee16:	4601      	mov	r1, r0
 800ee18:	4620      	mov	r0, r4
 800ee1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee1e:	f000 b817 	b.w	800ee50 <_kill_r>
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d00a      	beq.n	800ee3c <_raise_r+0x4c>
 800ee26:	1c59      	adds	r1, r3, #1
 800ee28:	d103      	bne.n	800ee32 <_raise_r+0x42>
 800ee2a:	2316      	movs	r3, #22
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7e7      	b.n	800ee02 <_raise_r+0x12>
 800ee32:	2400      	movs	r4, #0
 800ee34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee38:	4628      	mov	r0, r5
 800ee3a:	4798      	blx	r3
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e7e0      	b.n	800ee02 <_raise_r+0x12>

0800ee40 <raise>:
 800ee40:	4b02      	ldr	r3, [pc, #8]	; (800ee4c <raise+0xc>)
 800ee42:	4601      	mov	r1, r0
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	f7ff bfd3 	b.w	800edf0 <_raise_r>
 800ee4a:	bf00      	nop
 800ee4c:	20000064 	.word	0x20000064

0800ee50 <_kill_r>:
 800ee50:	b538      	push	{r3, r4, r5, lr}
 800ee52:	4d07      	ldr	r5, [pc, #28]	; (800ee70 <_kill_r+0x20>)
 800ee54:	2300      	movs	r3, #0
 800ee56:	4604      	mov	r4, r0
 800ee58:	4608      	mov	r0, r1
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	602b      	str	r3, [r5, #0]
 800ee5e:	f7f3 f9f9 	bl	8002254 <_kill>
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	d102      	bne.n	800ee6c <_kill_r+0x1c>
 800ee66:	682b      	ldr	r3, [r5, #0]
 800ee68:	b103      	cbz	r3, 800ee6c <_kill_r+0x1c>
 800ee6a:	6023      	str	r3, [r4, #0]
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	bf00      	nop
 800ee70:	20003cac 	.word	0x20003cac

0800ee74 <_getpid_r>:
 800ee74:	f7f3 b9e6 	b.w	8002244 <_getpid>

0800ee78 <_malloc_usable_size_r>:
 800ee78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7c:	1f18      	subs	r0, r3, #4
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	bfbc      	itt	lt
 800ee82:	580b      	ldrlt	r3, [r1, r0]
 800ee84:	18c0      	addlt	r0, r0, r3
 800ee86:	4770      	bx	lr

0800ee88 <__swhatbuf_r>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee90:	2900      	cmp	r1, #0
 800ee92:	b096      	sub	sp, #88	; 0x58
 800ee94:	4615      	mov	r5, r2
 800ee96:	461e      	mov	r6, r3
 800ee98:	da0d      	bge.n	800eeb6 <__swhatbuf_r+0x2e>
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eea0:	f04f 0100 	mov.w	r1, #0
 800eea4:	bf0c      	ite	eq
 800eea6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eeaa:	2340      	movne	r3, #64	; 0x40
 800eeac:	2000      	movs	r0, #0
 800eeae:	6031      	str	r1, [r6, #0]
 800eeb0:	602b      	str	r3, [r5, #0]
 800eeb2:	b016      	add	sp, #88	; 0x58
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
 800eeb6:	466a      	mov	r2, sp
 800eeb8:	f000 f848 	bl	800ef4c <_fstat_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	dbec      	blt.n	800ee9a <__swhatbuf_r+0x12>
 800eec0:	9901      	ldr	r1, [sp, #4]
 800eec2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eec6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eeca:	4259      	negs	r1, r3
 800eecc:	4159      	adcs	r1, r3
 800eece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eed2:	e7eb      	b.n	800eeac <__swhatbuf_r+0x24>

0800eed4 <__smakebuf_r>:
 800eed4:	898b      	ldrh	r3, [r1, #12]
 800eed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eed8:	079d      	lsls	r5, r3, #30
 800eeda:	4606      	mov	r6, r0
 800eedc:	460c      	mov	r4, r1
 800eede:	d507      	bpl.n	800eef0 <__smakebuf_r+0x1c>
 800eee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	6123      	str	r3, [r4, #16]
 800eee8:	2301      	movs	r3, #1
 800eeea:	6163      	str	r3, [r4, #20]
 800eeec:	b002      	add	sp, #8
 800eeee:	bd70      	pop	{r4, r5, r6, pc}
 800eef0:	ab01      	add	r3, sp, #4
 800eef2:	466a      	mov	r2, sp
 800eef4:	f7ff ffc8 	bl	800ee88 <__swhatbuf_r>
 800eef8:	9900      	ldr	r1, [sp, #0]
 800eefa:	4605      	mov	r5, r0
 800eefc:	4630      	mov	r0, r6
 800eefe:	f7ff f8fb 	bl	800e0f8 <_malloc_r>
 800ef02:	b948      	cbnz	r0, 800ef18 <__smakebuf_r+0x44>
 800ef04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef08:	059a      	lsls	r2, r3, #22
 800ef0a:	d4ef      	bmi.n	800eeec <__smakebuf_r+0x18>
 800ef0c:	f023 0303 	bic.w	r3, r3, #3
 800ef10:	f043 0302 	orr.w	r3, r3, #2
 800ef14:	81a3      	strh	r3, [r4, #12]
 800ef16:	e7e3      	b.n	800eee0 <__smakebuf_r+0xc>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	6020      	str	r0, [r4, #0]
 800ef1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	9b00      	ldr	r3, [sp, #0]
 800ef24:	6163      	str	r3, [r4, #20]
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	6120      	str	r0, [r4, #16]
 800ef2a:	b15b      	cbz	r3, 800ef44 <__smakebuf_r+0x70>
 800ef2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f000 f81d 	bl	800ef70 <_isatty_r>
 800ef36:	b128      	cbz	r0, 800ef44 <__smakebuf_r+0x70>
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	f023 0303 	bic.w	r3, r3, #3
 800ef3e:	f043 0301 	orr.w	r3, r3, #1
 800ef42:	81a3      	strh	r3, [r4, #12]
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	431d      	orrs	r5, r3
 800ef48:	81a5      	strh	r5, [r4, #12]
 800ef4a:	e7cf      	b.n	800eeec <__smakebuf_r+0x18>

0800ef4c <_fstat_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d07      	ldr	r5, [pc, #28]	; (800ef6c <_fstat_r+0x20>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	4611      	mov	r1, r2
 800ef58:	602b      	str	r3, [r5, #0]
 800ef5a:	f7f3 f9da 	bl	8002312 <_fstat>
 800ef5e:	1c43      	adds	r3, r0, #1
 800ef60:	d102      	bne.n	800ef68 <_fstat_r+0x1c>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	b103      	cbz	r3, 800ef68 <_fstat_r+0x1c>
 800ef66:	6023      	str	r3, [r4, #0]
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20003cac 	.word	0x20003cac

0800ef70 <_isatty_r>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4d06      	ldr	r5, [pc, #24]	; (800ef8c <_isatty_r+0x1c>)
 800ef74:	2300      	movs	r3, #0
 800ef76:	4604      	mov	r4, r0
 800ef78:	4608      	mov	r0, r1
 800ef7a:	602b      	str	r3, [r5, #0]
 800ef7c:	f7f3 f9d9 	bl	8002332 <_isatty>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d102      	bne.n	800ef8a <_isatty_r+0x1a>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	b103      	cbz	r3, 800ef8a <_isatty_r+0x1a>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	20003cac 	.word	0x20003cac

0800ef90 <_init>:
 800ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef92:	bf00      	nop
 800ef94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef96:	bc08      	pop	{r3}
 800ef98:	469e      	mov	lr, r3
 800ef9a:	4770      	bx	lr

0800ef9c <_fini>:
 800ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9e:	bf00      	nop
 800efa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa2:	bc08      	pop	{r3}
 800efa4:	469e      	mov	lr, r3
 800efa6:	4770      	bx	lr
