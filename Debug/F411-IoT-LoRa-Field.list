
F411-IoT-LoRa-Field.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010290  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  08010430  08010430  00020430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f58  08010f58  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010f58  08010f58  00020f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f60  08010f60  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f60  08010f60  00020f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f64  08010f64  00020f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08010f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cf0  200001a0  08011108  000301a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e90  08011108  00033e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001655d  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7b  00000000  00000000  0004672d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  000495a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0004a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018861  00000000  00000000  0004b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178ec  00000000  00000000  00064091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093732  00000000  00000000  0007b97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c8  00000000  00000000  0010f100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010418 	.word	0x08010418

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	08010418 	.word	0x08010418

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db0a      	blt.n	80005de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <__NVIC_SetPriority+0x4c>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005dc:	e00a      	b.n	80005f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <__NVIC_SetPriority+0x50>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	3b04      	subs	r3, #4
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	b2d2      	uxtb	r2, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	761a      	strb	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000618:	d301      	bcc.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e00f      	b.n	800063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <SysTick_Config+0x40>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b01      	subs	r3, #1
 8000624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	210f      	movs	r1, #15
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f7ff ffc2 	bl	80005b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SysTick_Config+0x40>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <SysTick_Config+0x40>)
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010

0800064c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800066c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00b      	beq.n	800068c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000674:	e000      	b.n	8000678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000676:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a0:	b098      	sub	sp, #96	; 0x60
 80006a2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80006a4:	4bce      	ldr	r3, [pc, #824]	; (80009e0 <main+0x344>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22c0      	movs	r2, #192	; 0xc0
 80006ac:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006ae:	4bcc      	ldr	r3, [pc, #816]	; (80009e0 <main+0x344>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	22a8      	movs	r2, #168	; 0xa8
 80006b6:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b8:	4bc9      	ldr	r3, [pc, #804]	; (80009e0 <main+0x344>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2200      	movs	r2, #0
 80006c0:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006c2:	4bc7      	ldr	r3, [pc, #796]	; (80009e0 <main+0x344>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	2201      	movs	r2, #1
 80006ca:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc4      	ldr	r3, [pc, #784]	; (80009e0 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d8:	4bc1      	ldr	r3, [pc, #772]	; (80009e0 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006e4:	4bbe      	ldr	r3, [pc, #760]	; (80009e0 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006f0:	4bbb      	ldr	r3, [pc, #748]	; (80009e0 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb8      	ldr	r3, [pc, #736]	; (80009e0 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000708:	4bb5      	ldr	r3, [pc, #724]	; (80009e0 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 8000714:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000720:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 800072c:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000738:	4ba9      	ldr	r3, [pc, #676]	; (80009e0 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 800075c:	4ba0      	ldr	r3, [pc, #640]	; (80009e0 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000768:	4b9d      	ldr	r3, [pc, #628]	; (80009e0 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2206      	movs	r2, #6
 8000770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000780:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 800078c:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000798:	4b91      	ldr	r3, [pc, #580]	; (80009e0 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 80007a4:	4b8e      	ldr	r3, [pc, #568]	; (80009e0 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007b0:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007bc:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007d4:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007e0:	4b7f      	ldr	r3, [pc, #508]	; (80009e0 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007ec:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007fa:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <main+0x344>)
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000804:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000808:	4b75      	ldr	r3, [pc, #468]	; (80009e0 <main+0x344>)
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000812:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <main+0x344>)
 8000818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 8000824:	4b6e      	ldr	r3, [pc, #440]	; (80009e0 <main+0x344>)
 8000826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000832:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <main+0x344>)
 8000834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000838:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000840:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <main+0x344>)
 8000842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000846:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800084a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <main+0x344>)
 8000850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000854:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 800085c:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <main+0x344>)
 800085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <main+0x344>)
 800086c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000870:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000874:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000878:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <main+0x344>)
 800087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000886:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <main+0x344>)
 8000888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <main+0x344>)
 8000896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <main+0x344>)
 80008a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <main+0x344>)
 80008b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b6:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008be:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <main+0x344>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <main+0x344>)
 80008ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x348>)
 80008da:	f005 ff81 	bl	80067e0 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x34c>)
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x350>)
 80008e2:	f00e fa9d 	bl	800ee20 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008e6:	4942      	ldr	r1, [pc, #264]	; (80009f0 <main+0x354>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <main+0x358>)
 80008ea:	f00e fa99 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008ee:	4942      	ldr	r1, [pc, #264]	; (80009f8 <main+0x35c>)
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x360>)
 80008f2:	f00e fa95 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x364>)
 80008f8:	4842      	ldr	r0, [pc, #264]	; (8000a04 <main+0x368>)
 80008fa:	f00e fa91 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008fe:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x36c>)
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x370>)
 8000902:	f00e fa8d 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x374>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x378>)
 800090a:	f00e fa89 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800090e:	4942      	ldr	r1, [pc, #264]	; (8000a18 <main+0x37c>)
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <main+0x380>)
 8000912:	f00e fa85 	bl	800ee20 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000916:	4942      	ldr	r1, [pc, #264]	; (8000a20 <main+0x384>)
 8000918:	4842      	ldr	r0, [pc, #264]	; (8000a24 <main+0x388>)
 800091a:	f00e fa81 	bl	800ee20 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <main+0x348>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x348>)
 8000950:	2206      	movs	r2, #6
 8000952:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <main+0x348>)
 8000958:	2201      	movs	r2, #1
 800095a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <main+0x348>)
 8000960:	2203      	movs	r2, #3
 8000962:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <main+0x348>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <main+0x348>)
 8000980:	220a      	movs	r2, #10
 8000982:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <main+0x348>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <main+0x348>)
 8000990:	2233      	movs	r2, #51	; 0x33
 8000992:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <main+0x348>)
 8000998:	2234      	movs	r2, #52	; 0x34
 800099a:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <main+0x348>)
 80009a0:	2235      	movs	r2, #53	; 0x35
 80009a2:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <main+0x348>)
 80009a8:	220c      	movs	r2, #12
 80009aa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <main+0x348>)
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <main+0x348>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <main+0x348>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <main+0x38c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x344>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <main+0x390>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <main+0x344>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <main+0x344>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <main+0x394>)
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e029      	b.n	8000a34 <main+0x398>
 80009e0:	2000276c 	.word	0x2000276c
 80009e4:	20000b80 	.word	0x20000b80
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b86 	.word	0x20000b86
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000ba6 	.word	0x20000ba6
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000bb6 	.word	0x20000bb6
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000bc6 	.word	0x20000bc6
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000bcc 	.word	0x20000bcc
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000be2 	.word	0x20000be2
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bf2 	.word	0x20000bf2
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bdc 	.word	0x20000bdc
 8000a28:	2000381c 	.word	0x2000381c
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	200001bc 	.word	0x200001bc

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a34:	484e      	ldr	r0, [pc, #312]	; (8000b70 <main+0x4d4>)
 8000a36:	f00b fe1d 	bl	800c674 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <main+0x4d4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a40:	484c      	ldr	r0, [pc, #304]	; (8000b74 <main+0x4d8>)
 8000a42:	f00b fe17 	bl	800c674 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <main+0x4d8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a4c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a50:	2103      	movs	r1, #3
 8000a52:	4848      	ldr	r0, [pc, #288]	; (8000b74 <main+0x4d8>)
 8000a54:	f00b feb1 	bl	800c7ba <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f002 f85a 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 fae6 	bl	800102c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a60:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <main+0x4dc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <main+0x4e0>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	099b      	lsrs	r3, r3, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fdcb 	bl	8000608 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fced 	bl	8001450 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a76:	f000 fb41 	bl	80010fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a7a:	f000 fc6b 	bl	8001354 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7e:	f000 fc93 	bl	80013a8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a82:	f000 fcbb 	bl	80013fc <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a86:	f000 fb6f 	bl	8001168 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a8a:	f000 fbe7 	bl	800125c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	483b      	ldr	r0, [pc, #236]	; (8000b80 <main+0x4e4>)
 8000a94:	f002 fd10 	bl	80034b8 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a98:	210e      	movs	r1, #14
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <main+0x4e8>)
 8000a9c:	f000 fd60 	bl	8001560 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aa0:	f001 fc50 	bl	8002344 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa4:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <main+0x4ec>)
 8000aa6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <main+0x41a>
 8000aae:	2113      	movs	r1, #19
 8000ab0:	4836      	ldr	r0, [pc, #216]	; (8000b8c <main+0x4f0>)
 8000ab2:	f000 fd55 	bl	8001560 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4935      	ldr	r1, [pc, #212]	; (8000b90 <main+0x4f4>)
 8000aba:	4836      	ldr	r0, [pc, #216]	; (8000b94 <main+0x4f8>)
 8000abc:	f004 fe25 	bl	800570a <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4935      	ldr	r1, [pc, #212]	; (8000b98 <main+0x4fc>)
 8000ac4:	4835      	ldr	r0, [pc, #212]	; (8000b9c <main+0x500>)
 8000ac6:	f004 fe20 	bl	800570a <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <main+0x504>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <main+0x43e>
 8000ad2:	2112      	movs	r1, #18
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <main+0x508>)
 8000ad6:	f000 fd43 	bl	8001560 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <main+0x50c>)
 8000adc:	22f0      	movs	r2, #240	; 0xf0
 8000ade:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <main+0x50c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <main+0x50c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <main+0x50c>)
 8000aee:	22c0      	movs	r2, #192	; 0xc0
 8000af0:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <main+0x50c>)
 8000af4:	f00d fa8e 	bl	800e014 <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <main+0x50c>)
 8000afc:	f00d fb04 	bl	800e108 <eth_socket_init>

   SPI_READ_EN=1;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <main+0x510>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <main+0x50c>)
 8000b08:	220f      	movs	r2, #15
 8000b0a:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <main+0x50c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <main+0x50c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <main+0x50c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1e:	481d      	ldr	r0, [pc, #116]	; (8000b94 <main+0x4f8>)
 8000b20:	f001 fc38 	bl	8002394 <ESP8266_HW_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10c      	bne.n	8000b44 <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <main+0x514>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <main+0x4ec>)
 8000b32:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04a      	beq.n	8000bd0 <main+0x534>
 8000b3a:	2113      	movs	r1, #19
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0x518>)
 8000b3e:	f000 fd0f 	bl	8001560 <ITM0_Write>
 8000b42:	e045      	b.n	8000bd0 <main+0x534>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b44:	f001 fbfe 	bl	8002344 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <main+0x4f8>)
 8000b4a:	f001 fc23 	bl	8002394 <ESP8266_HW_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d131      	bne.n	8000bb8 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <main+0x514>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <main+0x4ec>)
 8000b5c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d035      	beq.n	8000bd0 <main+0x534>
 8000b64:	2113      	movs	r1, #19
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <main+0x518>)
 8000b68:	f000 fcfa 	bl	8001560 <ITM0_Write>
 8000b6c:	e030      	b.n	8000bd0 <main+0x534>
 8000b6e:	bf00      	nop
 8000b70:	200018cc 	.word	0x200018cc
 8000b74:	20001e18 	.word	0x20001e18
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	40020000 	.word	0x40020000
 8000b84:	08010430 	.word	0x08010430
 8000b88:	20000b80 	.word	0x20000b80
 8000b8c:	08010440 	.word	0x08010440
 8000b90:	20003e34 	.word	0x20003e34
 8000b94:	200002a4 	.word	0x200002a4
 8000b98:	20003e38 	.word	0x20003e38
 8000b9c:	200002e8 	.word	0x200002e8
 8000ba0:	20000021 	.word	0x20000021
 8000ba4:	08010454 	.word	0x08010454
 8000ba8:	2000276c 	.word	0x2000276c
 8000bac:	2000382c 	.word	0x2000382c
 8000bb0:	2000381f 	.word	0x2000381f
 8000bb4:	08010468 	.word	0x08010468
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb8:	4bac      	ldr	r3, [pc, #688]	; (8000e6c <main+0x7d0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bbe:	4bac      	ldr	r3, [pc, #688]	; (8000e70 <main+0x7d4>)
 8000bc0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <main+0x534>
 8000bc8:	2115      	movs	r1, #21
 8000bca:	48aa      	ldr	r0, [pc, #680]	; (8000e74 <main+0x7d8>)
 8000bcc:	f000 fcc8 	bl	8001560 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f002 f80e 	bl	8002bf4 <HAL_Delay>
     LoRa_set_sndTIMER(&lr,5000); //Inicio el ciclo de envíos
 8000bd8:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bdc:	48a6      	ldr	r0, [pc, #664]	; (8000e78 <main+0x7dc>)
 8000bde:	f00b f8a5 	bl	800bd2c <LoRa_set_sndTIMER>





	  	  if (ESP_HW_Init==1)
 8000be2:	4ba2      	ldr	r3, [pc, #648]	; (8000e6c <main+0x7d0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	f040 809d 	bne.w	8000d26 <main+0x68a>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000bec:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <main+0x7e0>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	f040 8098 	bne.w	8000d26 <main+0x68a>
 8000bf6:	4b9e      	ldr	r3, [pc, #632]	; (8000e70 <main+0x7d4>)
 8000bf8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <main+0x68a>
 8000c02:	4b9b      	ldr	r3, [pc, #620]	; (8000e70 <main+0x7d4>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c08:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c0c:	f340 808b 	ble.w	8000d26 <main+0x68a>
 8000c10:	4b9b      	ldr	r3, [pc, #620]	; (8000e80 <main+0x7e4>)
 8000c12:	7c9b      	ldrb	r3, [r3, #18]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 8086 	beq.w	8000d26 <main+0x68a>
	  			{	ETH.S0_data_available=0;
 8000c1a:	4b99      	ldr	r3, [pc, #612]	; (8000e80 <main+0x7e4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c20:	4b98      	ldr	r3, [pc, #608]	; (8000e84 <main+0x7e8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c26:	4b95      	ldr	r3, [pc, #596]	; (8000e7c <main+0x7e0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4896      	ldr	r0, [pc, #600]	; (8000e88 <main+0x7ec>)
 8000c30:	f00b fdf1 	bl	800c816 <ModBUS_F03_Read>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4698      	mov	r8, r3
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4893      	ldr	r0, [pc, #588]	; (8000e88 <main+0x7ec>)
 8000c3c:	f00b fdeb 	bl	800c816 <ModBUS_F03_Read>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461c      	mov	r4, r3
 8000c44:	2102      	movs	r1, #2
 8000c46:	4890      	ldr	r0, [pc, #576]	; (8000e88 <main+0x7ec>)
 8000c48:	f00b fde5 	bl	800c816 <ModBUS_F03_Read>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461d      	mov	r5, r3
 8000c50:	2103      	movs	r1, #3
 8000c52:	488d      	ldr	r0, [pc, #564]	; (8000e88 <main+0x7ec>)
 8000c54:	f00b fddf 	bl	800c816 <ModBUS_F03_Read>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461e      	mov	r6, r3
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	488a      	ldr	r0, [pc, #552]	; (8000e88 <main+0x7ec>)
 8000c60:	f00b fdd9 	bl	800c816 <ModBUS_F03_Read>
 8000c64:	4603      	mov	r3, r0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	2105      	movs	r1, #5
 8000c6a:	4887      	ldr	r0, [pc, #540]	; (8000e88 <main+0x7ec>)
 8000c6c:	f00b fdd3 	bl	800c816 <ModBUS_F03_Read>
 8000c70:	4603      	mov	r3, r0
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	2106      	movs	r1, #6
 8000c76:	4884      	ldr	r0, [pc, #528]	; (8000e88 <main+0x7ec>)
 8000c78:	f00b fdcd 	bl	800c816 <ModBUS_F03_Read>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	2107      	movs	r1, #7
 8000c82:	4881      	ldr	r0, [pc, #516]	; (8000e88 <main+0x7ec>)
 8000c84:	f00b fdc7 	bl	800c816 <ModBUS_F03_Read>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	487e      	ldr	r0, [pc, #504]	; (8000e88 <main+0x7ec>)
 8000c90:	f00b fdc1 	bl	800c816 <ModBUS_F03_Read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	2109      	movs	r1, #9
 8000c9a:	487b      	ldr	r0, [pc, #492]	; (8000e88 <main+0x7ec>)
 8000c9c:	f00b fdbb 	bl	800c816 <ModBUS_F03_Read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8000caa:	4b78      	ldr	r3, [pc, #480]	; (8000e8c <main+0x7f0>)
 8000cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cae:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <main+0x7f4>)
 8000cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8000cb6:	9208      	str	r2, [sp, #32]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	9207      	str	r2, [sp, #28]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	9206      	str	r2, [sp, #24]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	9205      	str	r2, [sp, #20]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	9204      	str	r2, [sp, #16]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	9303      	str	r3, [sp, #12]
 8000ccc:	9602      	str	r6, [sp, #8]
 8000cce:	9501      	str	r5, [sp, #4]
 8000cd0:	9400      	str	r4, [sp, #0]
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	4a6f      	ldr	r2, [pc, #444]	; (8000e94 <main+0x7f8>)
 8000cd6:	4970      	ldr	r1, [pc, #448]	; (8000e98 <main+0x7fc>)
 8000cd8:	4870      	ldr	r0, [pc, #448]	; (8000e9c <main+0x800>)
 8000cda:	f00a fcc9 	bl	800b670 <httpPOST>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d020      	beq.n	8000d26 <main+0x68a>
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000ce4:	486a      	ldr	r0, [pc, #424]	; (8000e90 <main+0x7f4>)
 8000ce6:	f7ff fa85 	bl	80001f4 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	2341      	movs	r3, #65	; 0x41
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	4966      	ldr	r1, [pc, #408]	; (8000e90 <main+0x7f4>)
 8000cf6:	486a      	ldr	r0, [pc, #424]	; (8000ea0 <main+0x804>)
 8000cf8:	f00d ffd6 	bl	800eca8 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000cfc:	4864      	ldr	r0, [pc, #400]	; (8000e90 <main+0x7f4>)
 8000cfe:	f7ff fa79 	bl	80001f4 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b5a      	ldr	r3, [pc, #360]	; (8000e70 <main+0x7d4>)
 8000d08:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d0c:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <main+0x7d4>)
 8000d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d807      	bhi.n	8000d26 <main+0x68a>
	  							{
	  								EnviarDatos(&wf);
 8000d16:	4856      	ldr	r0, [pc, #344]	; (8000e70 <main+0x7d4>)
 8000d18:	f005 fd4c 	bl	80067b4 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d1c:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <main+0x7d4>)
 8000d1e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d26:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <main+0x808>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d003      	beq.n	8000d36 <main+0x69a>
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <main+0x80c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d175      	bne.n	8000e22 <main+0x786>
	  		{
	  			if(FLAG_UART1==1)
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <main+0x808>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d11c      	bne.n	8000d78 <main+0x6dc>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <main+0x810>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <main+0x814>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	495a      	ldr	r1, [pc, #360]	; (8000eb4 <main+0x818>)
 8000d4a:	485b      	ldr	r0, [pc, #364]	; (8000eb8 <main+0x81c>)
 8000d4c:	f00d ffac 	bl	800eca8 <CopiaVector>
	  					FLAG_UART1=0;
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <main+0x808>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d56:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <main+0x820>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d102      	bne.n	8000d64 <main+0x6c8>
	  						{
	  							error_rxdata=0;
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <main+0x820>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d64:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <main+0x820>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <main+0x6dc>
	  						{
	  							error_rxdata=5;
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <main+0x820>)
 8000d6e:	2205      	movs	r2, #5
 8000d70:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d72:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <main+0x820>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <main+0x80c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d102      	bne.n	8000d86 <main+0x6ea>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <main+0x80c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <main+0x7d0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d149      	bne.n	8000e22 <main+0x786>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <main+0x810>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <main+0x7d4>)
 8000d94:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <main+0x810>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <main+0x814>)
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	4944      	ldr	r1, [pc, #272]	; (8000eb4 <main+0x818>)
 8000da4:	4844      	ldr	r0, [pc, #272]	; (8000eb8 <main+0x81c>)
 8000da6:	f00d ff7f 	bl	800eca8 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000daa:	4831      	ldr	r0, [pc, #196]	; (8000e70 <main+0x7d4>)
 8000dac:	f005 fde2 	bl	8006974 <AT_ESP8266_ND>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <main+0x824>)
 8000db6:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <main+0x7d4>)
 8000dba:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d12f      	bne.n	8000e22 <main+0x786>
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <main+0x7d4>)
 8000dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc8:	2b63      	cmp	r3, #99	; 0x63
 8000dca:	d12a      	bne.n	8000e22 <main+0x786>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <main+0x7d4>)
 8000dce:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000dd2:	2341      	movs	r3, #65	; 0x41
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	493a      	ldr	r1, [pc, #232]	; (8000ec4 <main+0x828>)
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <main+0x82c>)
 8000ddc:	f00d ff64 	bl	800eca8 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <main+0x7d4>)
 8000de2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000de6:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <main+0x830>)
 8000de8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000dec:	4837      	ldr	r0, [pc, #220]	; (8000ecc <main+0x830>)
 8000dee:	f00b fd97 	bl	800c920 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <main+0x830>)
 8000df4:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000df8:	2341      	movs	r3, #65	; 0x41
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4934      	ldr	r1, [pc, #208]	; (8000ed0 <main+0x834>)
 8000e00:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <main+0x804>)
 8000e02:	f00d ff51 	bl	800eca8 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <main+0x830>)
 8000e08:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e0c:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <main+0x7d4>)
 8000e0e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <main+0x7d4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <main+0x7d4>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <main+0x838>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d005      	beq.n	8000e36 <main+0x79a>
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <main+0x7dc>)
 8000e2c:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	f040 80a9 	bne.w	8000f88 <main+0x8ec>
	  		{
	  			if(FLAG_UART2==1)
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <main+0x838>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d105      	bne.n	8000e4a <main+0x7ae>
	  				{
	  				FLAG_UART2=0;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <main+0x838>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <main+0x7dc>)
 8000e46:	f00a ff8d 	bl	800bd64 <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <main+0x7dc>)
 8000e4c:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	f040 8099 	bne.w	8000f88 <main+0x8ec>
	  				{
	  					lr.tmr_dly_ON=0;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <main+0x7dc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_set_sndTIMER(&lr,5000);  //Vuelvo a enviar cada 5 seg
 8000e5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <main+0x7dc>)
 8000e64:	f00a ff62 	bl	800bd2c <LoRa_set_sndTIMER>
 8000e68:	e036      	b.n	8000ed8 <main+0x83c>
 8000e6a:	bf00      	nop
 8000e6c:	2000381f 	.word	0x2000381f
 8000e70:	20000b80 	.word	0x20000b80
 8000e74:	0801047c 	.word	0x0801047c
 8000e78:	20000378 	.word	0x20000378
 8000e7c:	20002764 	.word	0x20002764
 8000e80:	2000276c 	.word	0x2000276c
 8000e84:	20002768 	.word	0x20002768
 8000e88:	200018cc 	.word	0x200018cc
 8000e8c:	20002564 	.word	0x20002564
 8000e90:	20002364 	.word	0x20002364
 8000e94:	2000001c 	.word	0x2000001c
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000e14 	.word	0x20000e14
 8000ea4:	20003824 	.word	0x20003824
 8000ea8:	20003823 	.word	0x20003823
 8000eac:	20003e40 	.word	0x20003e40
 8000eb0:	20003e30 	.word	0x20003e30
 8000eb4:	20003c30 	.word	0x20003c30
 8000eb8:	20001214 	.word	0x20001214
 8000ebc:	20003827 	.word	0x20003827
 8000ec0:	20003826 	.word	0x20003826
 8000ec4:	20000c14 	.word	0x20000c14
 8000ec8:	20001e25 	.word	0x20001e25
 8000ecc:	20001e18 	.word	0x20001e18
 8000ed0:	20001fac 	.word	0x20001fac
 8000ed4:	20003825 	.word	0x20003825
						lr.dest_address[0]='\0';
 8000ed8:	4b44      	ldr	r3, [pc, #272]	; (8000fec <main+0x950>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <main+0x950>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc

			  			/*strncat(lr.dest_address,"1",1);
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");*/
		  				lr.estado=_SENT;
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <main+0x950>)
 8000ee8:	2214      	movs	r2, #20
 8000eea:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec

		  				//Define address to send
		  				strncat(lr.dest_address,"1",1);
 8000eee:	4840      	ldr	r0, [pc, #256]	; (8000ff0 <main+0x954>)
 8000ef0:	f7ff f980 	bl	80001f4 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <main+0x954>)
 8000efa:	4413      	add	r3, r2
 8000efc:	493d      	ldr	r1, [pc, #244]	; (8000ff4 <main+0x958>)
 8000efe:	461a      	mov	r2, r3
 8000f00:	460b      	mov	r3, r1
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	8013      	strh	r3, [r2, #0]
		  				//generate data to send
		  				char data[6];
		  				int n=0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
		  					while(n<11)
 8000f0a:	e02a      	b.n	8000f62 <main+0x8c6>
		  					{
			  					data[0]='\0';
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	773b      	strb	r3, [r7, #28]
			  					itoa(ModBUS_F03_Read(&mb_eth,n),data,10);
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	4838      	ldr	r0, [pc, #224]	; (8000ff8 <main+0x95c>)
 8000f18:	f00b fc7d 	bl	800c816 <ModBUS_F03_Read>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	220a      	movs	r2, #10
 8000f26:	4619      	mov	r1, r3
 8000f28:	f00d ff50 	bl	800edcc <itoa>
								strncat(lr.txbuff,data,strlen(data));
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f95f 	bl	80001f4 <strlen>
 8000f36:	4602      	mov	r2, r0
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482f      	ldr	r0, [pc, #188]	; (8000ffc <main+0x960>)
 8000f40:	f00d ff76 	bl	800ee30 <strncat>
								strncat(lr.txbuff,";",1);
 8000f44:	482d      	ldr	r0, [pc, #180]	; (8000ffc <main+0x960>)
 8000f46:	f7ff f955 	bl	80001f4 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <main+0x960>)
 8000f50:	4413      	add	r3, r2
 8000f52:	492b      	ldr	r1, [pc, #172]	; (8001000 <main+0x964>)
 8000f54:	461a      	mov	r2, r3
 8000f56:	460b      	mov	r3, r1
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	8013      	strh	r3, [r2, #0]
								n++;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	3301      	adds	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
		  					while(n<11)
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	2b0a      	cmp	r3, #10
 8000f66:	ddd1      	ble.n	8000f0c <main+0x870>
		  					}
		  				lr.txitems=strlen(lr.txbuff);
 8000f68:	4824      	ldr	r0, [pc, #144]	; (8000ffc <main+0x960>)
 8000f6a:	f7ff f943 	bl	80001f4 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <main+0x950>)
 8000f74:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
			  			error=LoRa_Send(&lr,&huart2);
 8000f78:	4922      	ldr	r1, [pc, #136]	; (8001004 <main+0x968>)
 8000f7a:	481c      	ldr	r0, [pc, #112]	; (8000fec <main+0x950>)
 8000f7c:	f00a fe28 	bl	800bbd0 <LoRa_Send>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <main+0x96c>)
 8000f86:	701a      	strb	r2, [r3, #0]
	  				}

	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <main+0x970>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d108      	bne.n	8000fa2 <main+0x906>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f90:	2201      	movs	r2, #1
 8000f92:	491f      	ldr	r1, [pc, #124]	; (8001010 <main+0x974>)
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <main+0x978>)
 8000f96:	f008 fefd 	bl	8009d94 <WiFi_Conn_ND>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <main+0x97c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <main+0x980>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	f47f ae1b 	bne.w	8000be2 <main+0x546>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <main+0x984>)
 8000fb4:	f002 fa80 	bl	80034b8 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000fb8:	2115      	movs	r1, #21
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <main+0x988>)
 8000fbc:	f000 fad0 	bl	8001560 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc4:	f001 fe16 	bl	8002bf4 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <main+0x984>)
 8000fd0:	f002 fa72 	bl	80034b8 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000fd4:	2118      	movs	r1, #24
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <main+0x98c>)
 8000fd8:	f000 fac2 	bl	8001560 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000fdc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe0:	f001 fe08 	bl	8002bf4 <HAL_Delay>
	  				esp_restart=0;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <main+0x980>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000fea:	e5fa      	b.n	8000be2 <main+0x546>
 8000fec:	20000378 	.word	0x20000378
 8000ff0:	2000038e 	.word	0x2000038e
 8000ff4:	08010494 	.word	0x08010494
 8000ff8:	200018cc 	.word	0x200018cc
 8000ffc:	20000854 	.word	0x20000854
 8001000:	08010498 	.word	0x08010498
 8001004:	200002e8 	.word	0x200002e8
 8001008:	20000b7c 	.word	0x20000b7c
 800100c:	2000381f 	.word	0x2000381f
 8001010:	200002a4 	.word	0x200002a4
 8001014:	20000b80 	.word	0x20000b80
 8001018:	20003829 	.word	0x20003829
 800101c:	20003828 	.word	0x20003828
 8001020:	40020000 	.word	0x40020000
 8001024:	0801049c 	.word	0x0801049c
 8001028:	080104b4 	.word	0x080104b4

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00d fec8 	bl	800edd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <SystemClock_Config+0xc8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <SystemClock_Config+0xc8>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <SystemClock_Config+0xc8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <SystemClock_Config+0xcc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <SystemClock_Config+0xcc>)
 8001076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <SystemClock_Config+0xcc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800109c:	230c      	movs	r3, #12
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fa35 	bl	8003520 <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010bc:	f001 fa14 	bl	80024e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2103      	movs	r1, #3
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fc97 	bl	8003a10 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010e8:	f001 f9fe 	bl	80024e8 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI1_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_SPI1_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI1_Init+0x64>)
 8001108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI1_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI1_Init+0x64>)
 8001130:	2210      	movs	r2, #16
 8001132:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI1_Init+0x64>)
 8001148:	220a      	movs	r2, #10
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_SPI1_Init+0x64>)
 800114e:	f002 fe3f 	bl	8003dd0 <HAL_SPI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001158:	f001 f9c6 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001bc 	.word	0x200001bc
 8001164:	40013000 	.word	0x40013000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <MX_TIM2_Init+0xf0>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011a2:	2264      	movs	r2, #100	; 0x64
 80011a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011ae:	2264      	movs	r2, #100	; 0x64
 80011b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011be:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011c0:	f003 f8fc 	bl	80043bc <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011ca:	f001 f98d 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d8:	4619      	mov	r1, r3
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011dc:	f003 fd04 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011e6:	f001 f97f 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011ec:	f003 f935 	bl	800445a <HAL_TIM_OC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011f6:	f001 f977 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011fa:	2108      	movs	r1, #8
 80011fc:	4816      	ldr	r0, [pc, #88]	; (8001258 <MX_TIM2_Init+0xf0>)
 80011fe:	f003 fb35 	bl	800486c <HAL_TIM_OnePulse_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001208:	f001 f96e 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <MX_TIM2_Init+0xf0>)
 800121c:	f004 f8a0 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001226:	f001 f95f 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800122a:	2320      	movs	r3, #32
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_TIM2_Init+0xf0>)
 8001242:	f003 fc75 	bl	8004b30 <HAL_TIM_OC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800124c:	f001 f94c 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000214 	.word	0x20000214

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_TIM3_Init+0xf0>)
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <MX_TIM3_Init+0xf4>)
 8001290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_TIM3_Init+0xf0>)
 8001294:	2264      	movs	r2, #100	; 0x64
 8001296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_TIM3_Init+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM3_Init+0xf0>)
 80012a0:	2296      	movs	r2, #150	; 0x96
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_TIM3_Init+0xf0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_TIM3_Init+0xf0>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <MX_TIM3_Init+0xf0>)
 80012b2:	f003 f883 	bl	80043bc <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012bc:	f001 f914 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	4619      	mov	r1, r3
 80012cc:	481f      	ldr	r0, [pc, #124]	; (800134c <MX_TIM3_Init+0xf0>)
 80012ce:	f003 fc8b 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80012d8:	f001 f906 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_TIM3_Init+0xf0>)
 80012de:	f003 f8bc 	bl	800445a <HAL_TIM_OC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012e8:	f001 f8fe 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012ec:	2108      	movs	r1, #8
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_TIM3_Init+0xf0>)
 80012f0:	f003 fabc 	bl	800486c <HAL_TIM_OnePulse_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012fa:	f001 f8f5 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_TIM3_Init+0xf0>)
 800130e:	f004 f827 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001318:	f001 f8e6 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800131c:	2320      	movs	r3, #32
 800131e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM3_Init+0xf0>)
 8001334:	f003 fbfc 	bl	8004b30 <HAL_TIM_OC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800133e:	f001 f8d3 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000025c 	.word	0x2000025c
 8001350:	40000400 	.word	0x40000400

08001354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART1_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800138c:	f004 f86a 	bl	8005464 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f001 f8a7 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002a4 	.word	0x200002a4
 80013a4:	40011000 	.word	0x40011000

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f004 f840 	bl	8005464 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f001 f87d 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002e8 	.word	0x200002e8
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART6_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001434:	f004 f816 	bl	8005464 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f001 f853 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000032c 	.word	0x2000032c
 800144c:	40011400 	.word	0x40011400

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <MX_GPIO_Init+0x104>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a39      	ldr	r2, [pc, #228]	; (8001554 <MX_GPIO_Init+0x104>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <MX_GPIO_Init+0x104>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <MX_GPIO_Init+0x104>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <MX_GPIO_Init+0x104>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <MX_GPIO_Init+0x104>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <MX_GPIO_Init+0x104>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <MX_GPIO_Init+0x104>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <MX_GPIO_Init+0x104>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <MX_GPIO_Init+0x104>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <MX_GPIO_Init+0x104>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <MX_GPIO_Init+0x104>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <MX_GPIO_Init+0x108>)
 80014de:	f001 ffeb 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2102      	movs	r1, #2
 80014e6:	481d      	ldr	r0, [pc, #116]	; (800155c <MX_GPIO_Init+0x10c>)
 80014e8:	f001 ffe6 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2110      	movs	r1, #16
 80014f0:	481a      	ldr	r0, [pc, #104]	; (800155c <MX_GPIO_Init+0x10c>)
 80014f2:	f001 ffe1 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_GPIO_Init+0x108>)
 8001510:	f001 fd6a 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8001514:	f240 1301 	movw	r3, #257	; 0x101
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_GPIO_Init+0x10c>)
 800152a:	f001 fd5d 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 800152e:	2312      	movs	r3, #18
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_GPIO_Init+0x10c>)
 8001546:	f001 fd4f 	bl	8002fe8 <HAL_GPIO_Init>

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000

08001560 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e009      	b.n	8001584 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f867 	bl	800064c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3301      	adds	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf1      	blt.n	8001570 <ITM0_Write+0x10>
  }
  return len;
 800158c:	683b      	ldr	r3, [r7, #0]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <SysTick_Handler+0x1a8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a66      	ldr	r2, [pc, #408]	; (8001740 <SysTick_Handler+0x1a8>)
 80015a6:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 80015a8:	4b66      	ldr	r3, [pc, #408]	; (8001744 <SysTick_Handler+0x1ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a65      	ldr	r2, [pc, #404]	; (8001744 <SysTick_Handler+0x1ac>)
 80015b0:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <SysTick_Handler+0x1b0>)
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <SysTick_Handler+0x2c>
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <SysTick_Handler+0x1b4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a62      	ldr	r2, [pc, #392]	; (800174c <SysTick_Handler+0x1b4>)
 80015c2:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80015c4:	4b60      	ldr	r3, [pc, #384]	; (8001748 <SysTick_Handler+0x1b0>)
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <SysTick_Handler+0x4e>
 80015cc:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <SysTick_Handler+0x1b0>)
 80015ce:	885b      	ldrh	r3, [r3, #2]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b5e      	ldr	r3, [pc, #376]	; (800174c <SysTick_Handler+0x1b4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	da05      	bge.n	80015e6 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <SysTick_Handler+0x1b0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80015e0:	4b5a      	ldr	r3, [pc, #360]	; (800174c <SysTick_Handler+0x1b4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80015e6:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <SysTick_Handler+0x1b8>)
 80015e8:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d116      	bne.n	800161e <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <SysTick_Handler+0x1b8>)
 80015f2:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <SysTick_Handler+0x1b8>)
 80015fa:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80015fe:	4b54      	ldr	r3, [pc, #336]	; (8001750 <SysTick_Handler+0x1b8>)
 8001600:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001604:	4b52      	ldr	r3, [pc, #328]	; (8001750 <SysTick_Handler+0x1b8>)
 8001606:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 800160a:	429a      	cmp	r2, r3
 800160c:	dd07      	ble.n	800161e <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 800160e:	4b50      	ldr	r3, [pc, #320]	; (8001750 <SysTick_Handler+0x1b8>)
 8001610:	2201      	movs	r2, #1
 8001612:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001616:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <SysTick_Handler+0x1b8>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <SysTick_Handler+0x1bc>)
 8001620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001624:	f240 2261 	movw	r2, #609	; 0x261
 8001628:	4293      	cmp	r3, r2
 800162a:	d005      	beq.n	8001638 <SysTick_Handler+0xa0>
 800162c:	4b49      	ldr	r3, [pc, #292]	; (8001754 <SysTick_Handler+0x1bc>)
 800162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001632:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001636:	d109      	bne.n	800164c <SysTick_Handler+0xb4>
 8001638:	4b46      	ldr	r3, [pc, #280]	; (8001754 <SysTick_Handler+0x1bc>)
 800163a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800163e:	2b00      	cmp	r3, #0
 8001640:	d104      	bne.n	800164c <SysTick_Handler+0xb4>
 8001642:	4b45      	ldr	r3, [pc, #276]	; (8001758 <SysTick_Handler+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a43      	ldr	r2, [pc, #268]	; (8001758 <SysTick_Handler+0x1c0>)
 800164a:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <SysTick_Handler+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001654:	db0c      	blt.n	8001670 <SysTick_Handler+0xd8>
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <SysTick_Handler+0x1bc>)
 8001658:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d007      	beq.n	8001670 <SysTick_Handler+0xd8>
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <SysTick_Handler+0x1bc>)
 8001662:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <SysTick_Handler+0xd8>
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <SysTick_Handler+0x1c4>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001670:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <SysTick_Handler+0x1c8>)
 8001672:	7b9b      	ldrb	r3, [r3, #14]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10e      	bne.n	8001696 <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <SysTick_Handler+0x1c8>)
 800167a:	899b      	ldrh	r3, [r3, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <SysTick_Handler+0x1c8>)
 8001682:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <SysTick_Handler+0x1c8>)
 8001686:	899b      	ldrh	r3, [r3, #12]
 8001688:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800168c:	d303      	bcc.n	8001696 <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <SysTick_Handler+0x1c8>)
 8001690:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001694:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <SysTick_Handler+0x1a8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	f040 8420 	bne.w	8001ee0 <SysTick_Handler+0x948>
  {
	  dbgn++;
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <SysTick_Handler+0x1cc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <SysTick_Handler+0x1cc>)
 80016a8:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <SysTick_Handler+0x1a8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <SysTick_Handler+0x1d0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <SysTick_Handler+0x1d0>)
 80016b8:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <SysTick_Handler+0x1d4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016c2:	d102      	bne.n	80016ca <SysTick_Handler+0x132>
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <SysTick_Handler+0x1d4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <SysTick_Handler+0x1d8>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d104      	bne.n	80016dc <SysTick_Handler+0x144>
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <SysTick_Handler+0x1d4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a24      	ldr	r2, [pc, #144]	; (800176c <SysTick_Handler+0x1d4>)
 80016da:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <SysTick_Handler+0x1d4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d102      	bne.n	80016ea <SysTick_Handler+0x152>
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <SysTick_Handler+0x1d8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <SysTick_Handler+0x1d8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d104      	bne.n	80016fc <SysTick_Handler+0x164>
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <SysTick_Handler+0x1d4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <SysTick_Handler+0x1d4>)
 80016fa:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <SysTick_Handler+0x1d4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <SysTick_Handler+0x172>
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <SysTick_Handler+0x1d8>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800170a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170e:	4819      	ldr	r0, [pc, #100]	; (8001774 <SysTick_Handler+0x1dc>)
 8001710:	f001 feeb 	bl	80034ea <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <SysTick_Handler+0x1e0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 83d1 	beq.w	8001ec0 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <SysTick_Handler+0x1e4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 83d0 	beq.w	8001ec8 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001728:	2100      	movs	r1, #0
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <SysTick_Handler+0x1c8>)
 800172c:	f00c fd68 	bl	800e200 <eth_rd_SOCKET_STAT>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SysTick_Handler+0x1c8>)
 8001736:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <SysTick_Handler+0x1c8>)
 800173a:	7b9b      	ldrb	r3, [r3, #14]
 800173c:	e020      	b.n	8001780 <SysTick_Handler+0x1e8>
 800173e:	bf00      	nop
 8001740:	20000370 	.word	0x20000370
 8001744:	20003e48 	.word	0x20003e48
 8001748:	200018cc 	.word	0x200018cc
 800174c:	20003e50 	.word	0x20003e50
 8001750:	20000378 	.word	0x20000378
 8001754:	20000b80 	.word	0x20000b80
 8001758:	20002768 	.word	0x20002768
 800175c:	20002764 	.word	0x20002764
 8001760:	2000276c 	.word	0x2000276c
 8001764:	20003e74 	.word	0x20003e74
 8001768:	20000374 	.word	0x20000374
 800176c:	20003e4c 	.word	0x20003e4c
 8001770:	2000382a 	.word	0x2000382a
 8001774:	40020800 	.word	0x40020800
 8001778:	2000381c 	.word	0x2000381c
 800177c:	2000382c 	.word	0x2000382c
 8001780:	2b5f      	cmp	r3, #95	; 0x5f
 8001782:	f200 83a6 	bhi.w	8001ed2 <SysTick_Handler+0x93a>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <SysTick_Handler+0x1f4>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800190d 	.word	0x0800190d
 8001790:	08001ed3 	.word	0x08001ed3
 8001794:	08001ed3 	.word	0x08001ed3
 8001798:	08001ed3 	.word	0x08001ed3
 800179c:	08001ed3 	.word	0x08001ed3
 80017a0:	08001ed3 	.word	0x08001ed3
 80017a4:	08001ed3 	.word	0x08001ed3
 80017a8:	08001ed3 	.word	0x08001ed3
 80017ac:	08001ed3 	.word	0x08001ed3
 80017b0:	08001ed3 	.word	0x08001ed3
 80017b4:	08001ed3 	.word	0x08001ed3
 80017b8:	08001ed3 	.word	0x08001ed3
 80017bc:	08001ed3 	.word	0x08001ed3
 80017c0:	08001ed3 	.word	0x08001ed3
 80017c4:	08001ed3 	.word	0x08001ed3
 80017c8:	08001ed3 	.word	0x08001ed3
 80017cc:	08001ed3 	.word	0x08001ed3
 80017d0:	08001ed3 	.word	0x08001ed3
 80017d4:	08001ed3 	.word	0x08001ed3
 80017d8:	08001945 	.word	0x08001945
 80017dc:	08001997 	.word	0x08001997
 80017e0:	080019af 	.word	0x080019af
 80017e4:	080019c7 	.word	0x080019c7
 80017e8:	080019df 	.word	0x080019df
 80017ec:	08001d3b 	.word	0x08001d3b
 80017f0:	08001ed3 	.word	0x08001ed3
 80017f4:	08001d53 	.word	0x08001d53
 80017f8:	08001d6b 	.word	0x08001d6b
 80017fc:	08001da9 	.word	0x08001da9
 8001800:	08001de7 	.word	0x08001de7
 8001804:	08001ed3 	.word	0x08001ed3
 8001808:	08001ed3 	.word	0x08001ed3
 800180c:	08001ed3 	.word	0x08001ed3
 8001810:	08001ed3 	.word	0x08001ed3
 8001814:	08001dff 	.word	0x08001dff
 8001818:	08001ed3 	.word	0x08001ed3
 800181c:	08001ed3 	.word	0x08001ed3
 8001820:	08001ed3 	.word	0x08001ed3
 8001824:	08001ed3 	.word	0x08001ed3
 8001828:	08001ed3 	.word	0x08001ed3
 800182c:	08001ed3 	.word	0x08001ed3
 8001830:	08001ed3 	.word	0x08001ed3
 8001834:	08001ed3 	.word	0x08001ed3
 8001838:	08001ed3 	.word	0x08001ed3
 800183c:	08001ed3 	.word	0x08001ed3
 8001840:	08001ed3 	.word	0x08001ed3
 8001844:	08001ed3 	.word	0x08001ed3
 8001848:	08001ed3 	.word	0x08001ed3
 800184c:	08001ed3 	.word	0x08001ed3
 8001850:	08001ed3 	.word	0x08001ed3
 8001854:	08001e79 	.word	0x08001e79
 8001858:	08001ed3 	.word	0x08001ed3
 800185c:	08001ed3 	.word	0x08001ed3
 8001860:	08001ed3 	.word	0x08001ed3
 8001864:	08001ed3 	.word	0x08001ed3
 8001868:	08001ed3 	.word	0x08001ed3
 800186c:	08001ed3 	.word	0x08001ed3
 8001870:	08001ed3 	.word	0x08001ed3
 8001874:	08001ed3 	.word	0x08001ed3
 8001878:	08001ed3 	.word	0x08001ed3
 800187c:	08001ed3 	.word	0x08001ed3
 8001880:	08001ed3 	.word	0x08001ed3
 8001884:	08001ed3 	.word	0x08001ed3
 8001888:	08001ed3 	.word	0x08001ed3
 800188c:	08001ed3 	.word	0x08001ed3
 8001890:	08001ed3 	.word	0x08001ed3
 8001894:	08001e91 	.word	0x08001e91
 8001898:	08001ed3 	.word	0x08001ed3
 800189c:	08001ed3 	.word	0x08001ed3
 80018a0:	08001ed3 	.word	0x08001ed3
 80018a4:	08001ed3 	.word	0x08001ed3
 80018a8:	08001ed3 	.word	0x08001ed3
 80018ac:	08001ed3 	.word	0x08001ed3
 80018b0:	08001ed3 	.word	0x08001ed3
 80018b4:	08001ed3 	.word	0x08001ed3
 80018b8:	08001ed3 	.word	0x08001ed3
 80018bc:	08001ed3 	.word	0x08001ed3
 80018c0:	08001ed3 	.word	0x08001ed3
 80018c4:	08001ed3 	.word	0x08001ed3
 80018c8:	08001ed3 	.word	0x08001ed3
 80018cc:	08001ed3 	.word	0x08001ed3
 80018d0:	08001ed3 	.word	0x08001ed3
 80018d4:	08001ed3 	.word	0x08001ed3
 80018d8:	08001ed3 	.word	0x08001ed3
 80018dc:	08001ed3 	.word	0x08001ed3
 80018e0:	08001ed3 	.word	0x08001ed3
 80018e4:	08001ed3 	.word	0x08001ed3
 80018e8:	08001ed3 	.word	0x08001ed3
 80018ec:	08001ed3 	.word	0x08001ed3
 80018f0:	08001ed3 	.word	0x08001ed3
 80018f4:	08001ed3 	.word	0x08001ed3
 80018f8:	08001ed3 	.word	0x08001ed3
 80018fc:	08001ed3 	.word	0x08001ed3
 8001900:	08001ed3 	.word	0x08001ed3
 8001904:	08001ed3 	.word	0x08001ed3
 8001908:	08001ea9 	.word	0x08001ea9
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 800190c:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <SysTick_Handler+0x580>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <SysTick_Handler+0x384>
 8001914:	2113      	movs	r1, #19
 8001916:	4881      	ldr	r0, [pc, #516]	; (8001b1c <SysTick_Handler+0x584>)
 8001918:	f7ff fe22 	bl	8001560 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 800191c:	2201      	movs	r2, #1
 800191e:	2100      	movs	r1, #0
 8001920:	487f      	ldr	r0, [pc, #508]	; (8001b20 <SysTick_Handler+0x588>)
 8001922:	f00c fb3b 	bl	800df9c <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001926:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <SysTick_Handler+0x588>)
 8001928:	899b      	ldrh	r3, [r3, #12]
 800192a:	f241 3287 	movw	r2, #4999	; 0x1387
 800192e:	4293      	cmp	r3, r2
 8001930:	f240 82cc 	bls.w	8001ecc <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001934:	487a      	ldr	r0, [pc, #488]	; (8001b20 <SysTick_Handler+0x588>)
 8001936:	f00c fb6d 	bl	800e014 <eth_init>

						 eth_socket_init(&ETH,0);
 800193a:	2100      	movs	r1, #0
 800193c:	4878      	ldr	r0, [pc, #480]	; (8001b20 <SysTick_Handler+0x588>)
 800193e:	f00c fbe3 	bl	800e108 <eth_socket_init>
					 }

				 }
			 break;
 8001942:	e2c3      	b.n	8001ecc <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001944:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <SysTick_Handler+0x588>)
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800194e:	2b01      	cmp	r3, #1
 8001950:	d110      	bne.n	8001974 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001952:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <SysTick_Handler+0x580>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <SysTick_Handler+0x3ca>
 800195a:	2111      	movs	r1, #17
 800195c:	4871      	ldr	r0, [pc, #452]	; (8001b24 <SysTick_Handler+0x58c>)
 800195e:	f7ff fdff 	bl	8001560 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001962:	2202      	movs	r2, #2
 8001964:	2100      	movs	r1, #0
 8001966:	486e      	ldr	r0, [pc, #440]	; (8001b20 <SysTick_Handler+0x588>)
 8001968:	f00c fb18 	bl	800df9c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <SysTick_Handler+0x588>)
 800196e:	2200      	movs	r2, #0
 8001970:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001972:	e2ae      	b.n	8001ed2 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001974:	2204      	movs	r2, #4
 8001976:	2100      	movs	r1, #0
 8001978:	4869      	ldr	r0, [pc, #420]	; (8001b20 <SysTick_Handler+0x588>)
 800197a:	f00c fb0f 	bl	800df9c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <SysTick_Handler+0x580>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <SysTick_Handler+0x3f6>
 8001986:	2115      	movs	r1, #21
 8001988:	4867      	ldr	r0, [pc, #412]	; (8001b28 <SysTick_Handler+0x590>)
 800198a:	f7ff fde9 	bl	8001560 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 800198e:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <SysTick_Handler+0x588>)
 8001990:	2200      	movs	r2, #0
 8001992:	819a      	strh	r2, [r3, #12]
			 break;
 8001994:	e29d      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001996:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <SysTick_Handler+0x580>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <SysTick_Handler+0x40e>
 800199e:	2113      	movs	r1, #19
 80019a0:	4862      	ldr	r0, [pc, #392]	; (8001b2c <SysTick_Handler+0x594>)
 80019a2:	f7ff fddd 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <SysTick_Handler+0x588>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019ac:	e291      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 80019ae:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <SysTick_Handler+0x580>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <SysTick_Handler+0x426>
 80019b6:	2114      	movs	r1, #20
 80019b8:	485d      	ldr	r0, [pc, #372]	; (8001b30 <SysTick_Handler+0x598>)
 80019ba:	f7ff fdd1 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <SysTick_Handler+0x588>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019c4:	e285      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <SysTick_Handler+0x580>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <SysTick_Handler+0x43e>
 80019ce:	2114      	movs	r1, #20
 80019d0:	4858      	ldr	r0, [pc, #352]	; (8001b34 <SysTick_Handler+0x59c>)
 80019d2:	f7ff fdc5 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <SysTick_Handler+0x588>)
 80019d8:	2200      	movs	r2, #0
 80019da:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80019dc:	e279      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <SysTick_Handler+0x580>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <SysTick_Handler+0x456>
 80019e6:	2118      	movs	r1, #24
 80019e8:	4853      	ldr	r0, [pc, #332]	; (8001b38 <SysTick_Handler+0x5a0>)
 80019ea:	f7ff fdb9 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <SysTick_Handler+0x588>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <SysTick_Handler+0x588>)
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80b0 	bne.w	8001b64 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a04:	2302      	movs	r3, #2
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <SysTick_Handler+0x5a4>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	2226      	movs	r2, #38	; 0x26
 8001a10:	2104      	movs	r1, #4
 8001a12:	4843      	ldr	r0, [pc, #268]	; (8001b20 <SysTick_Handler+0x588>)
 8001a14:	f00c f997 	bl	800dd46 <SPI_ETH_REG>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a1e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8253 	beq.w	8001ed0 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <SysTick_Handler+0x5ac>)
 8001a30:	2100      	movs	r1, #0
 8001a32:	483b      	ldr	r0, [pc, #236]	; (8001b20 <SysTick_Handler+0x588>)
 8001a34:	f00c fc1e 	bl	800e274 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <SysTick_Handler+0x5ac>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001a42:	4837      	ldr	r0, [pc, #220]	; (8001b20 <SysTick_Handler+0x588>)
 8001a44:	f00c f9f7 	bl	800de36 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4834      	ldr	r0, [pc, #208]	; (8001b20 <SysTick_Handler+0x588>)
 8001a4e:	f00c faa5 	bl	800df9c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a52:	bf00      	nop
 8001a54:	2100      	movs	r1, #0
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <SysTick_Handler+0x588>)
 8001a58:	f00c fbef 	bl	800e23a <eth_rd_SOCKET_CMD>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f8      	bne.n	8001a54 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4936      	ldr	r1, [pc, #216]	; (8001b48 <SysTick_Handler+0x5b0>)
 8001a70:	4836      	ldr	r0, [pc, #216]	; (8001b4c <SysTick_Handler+0x5b4>)
 8001a72:	f00d f919 	bl	800eca8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <SysTick_Handler+0x5b8>)
 8001a7e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <SysTick_Handler+0x5a8>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <SysTick_Handler+0x4f8>
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <SysTick_Handler+0x588>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <SysTick_Handler+0x5b8>)
 8001a92:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a96:	4619      	mov	r1, r3
 8001a98:	482c      	ldr	r0, [pc, #176]	; (8001b4c <SysTick_Handler+0x5b4>)
 8001a9a:	f00a fe3f 	bl	800c71c <ModBUS_Check>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001aa4:	482a      	ldr	r0, [pc, #168]	; (8001b50 <SysTick_Handler+0x5b8>)
 8001aa6:	f00a ff3b 	bl	800c920 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <SysTick_Handler+0x5b8>)
 8001aac:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4927      	ldr	r1, [pc, #156]	; (8001b54 <SysTick_Handler+0x5bc>)
 8001ab8:	4823      	ldr	r0, [pc, #140]	; (8001b48 <SysTick_Handler+0x5b0>)
 8001aba:	f00d f8f5 	bl	800eca8 <CopiaVector>
 8001abe:	e007      	b.n	8001ad0 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <SysTick_Handler+0x580>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <SysTick_Handler+0x538>
 8001ac8:	2111      	movs	r1, #17
 8001aca:	4823      	ldr	r0, [pc, #140]	; (8001b58 <SysTick_Handler+0x5c0>)
 8001acc:	f7ff fd48 	bl	8001560 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <SysTick_Handler+0x5b8>)
 8001ad2:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <SysTick_Handler+0x5c4>)
 8001ada:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <SysTick_Handler+0x5c4>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <SysTick_Handler+0x5c8>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <SysTick_Handler+0x588>)
 8001ae6:	f00c fc95 	bl	800e414 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <SysTick_Handler+0x5c8>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f240 4124 	movw	r1, #1060	; 0x424
 8001af4:	480a      	ldr	r0, [pc, #40]	; (8001b20 <SysTick_Handler+0x588>)
 8001af6:	f00c f99e 	bl	800de36 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001afa:	2220      	movs	r2, #32
 8001afc:	2100      	movs	r1, #0
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <SysTick_Handler+0x588>)
 8001b00:	f00c fa4c 	bl	800df9c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b04:	bf00      	nop
 8001b06:	2100      	movs	r1, #0
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <SysTick_Handler+0x588>)
 8001b0a:	f00c fb96 	bl	800e23a <eth_rd_SOCKET_CMD>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f8      	bne.n	8001b06 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001b14:	e1dc      	b.n	8001ed0 <SysTick_Handler+0x938>
 8001b16:	bf00      	nop
 8001b18:	20000021 	.word	0x20000021
 8001b1c:	080104d0 	.word	0x080104d0
 8001b20:	2000276c 	.word	0x2000276c
 8001b24:	080104e4 	.word	0x080104e4
 8001b28:	080104f8 	.word	0x080104f8
 8001b2c:	08010510 	.word	0x08010510
 8001b30:	08010524 	.word	0x08010524
 8001b34:	0801053c 	.word	0x0801053c
 8001b38:	08010554 	.word	0x08010554
 8001b3c:	200037dc 	.word	0x200037dc
 8001b40:	200037d4 	.word	0x200037d4
 8001b44:	200037d8 	.word	0x200037d8
 8001b48:	20002788 	.word	0x20002788
 8001b4c:	200018d9 	.word	0x200018d9
 8001b50:	200018cc 	.word	0x200018cc
 8001b54:	20001a60 	.word	0x20001a60
 8001b58:	08010570 	.word	0x08010570
 8001b5c:	200037da 	.word	0x200037da
 8001b60:	200037d6 	.word	0x200037d6
						if (mb_eth._w_answer==0)
 8001b64:	4bac      	ldr	r3, [pc, #688]	; (8001e18 <SysTick_Handler+0x880>)
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d167      	bne.n	8001c3c <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b6c:	4bab      	ldr	r3, [pc, #684]	; (8001e1c <SysTick_Handler+0x884>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b72:	4baa      	ldr	r3, [pc, #680]	; (8001e1c <SysTick_Handler+0x884>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b78:	4ba8      	ldr	r3, [pc, #672]	; (8001e1c <SysTick_Handler+0x884>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b7e:	4ba7      	ldr	r3, [pc, #668]	; (8001e1c <SysTick_Handler+0x884>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b84:	4ba5      	ldr	r3, [pc, #660]	; (8001e1c <SysTick_Handler+0x884>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001b8c:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <SysTick_Handler+0x884>)
 8001b8e:	2206      	movs	r2, #6
 8001b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001b94:	4ba1      	ldr	r3, [pc, #644]	; (8001e1c <SysTick_Handler+0x884>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001b9c:	4b9f      	ldr	r3, [pc, #636]	; (8001e1c <SysTick_Handler+0x884>)
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001ba4:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <SysTick_Handler+0x884>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001bac:	4b9b      	ldr	r3, [pc, #620]	; (8001e1c <SysTick_Handler+0x884>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <SysTick_Handler+0x884>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001bbc:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <SysTick_Handler+0x884>)
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001bc4:	4b96      	ldr	r3, [pc, #600]	; (8001e20 <SysTick_Handler+0x888>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001bca:	220f      	movs	r2, #15
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4892      	ldr	r0, [pc, #584]	; (8001e18 <SysTick_Handler+0x880>)
 8001bd0:	f00a fe4f 	bl	800c872 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	4991      	ldr	r1, [pc, #580]	; (8001e24 <SysTick_Handler+0x88c>)
 8001bde:	4892      	ldr	r0, [pc, #584]	; (8001e28 <SysTick_Handler+0x890>)
 8001be0:	f00d f862 	bl	800eca8 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001be4:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <SysTick_Handler+0x888>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	4a90      	ldr	r2, [pc, #576]	; (8001e2c <SysTick_Handler+0x894>)
 8001bea:	2100      	movs	r1, #0
 8001bec:	488b      	ldr	r0, [pc, #556]	; (8001e1c <SysTick_Handler+0x884>)
 8001bee:	f00c fc11 	bl	800e414 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <SysTick_Handler+0x894>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f240 4124 	movw	r1, #1060	; 0x424
 8001bfc:	4887      	ldr	r0, [pc, #540]	; (8001e1c <SysTick_Handler+0x884>)
 8001bfe:	f00c f91a 	bl	800de36 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001c02:	2220      	movs	r2, #32
 8001c04:	2100      	movs	r1, #0
 8001c06:	4885      	ldr	r0, [pc, #532]	; (8001e1c <SysTick_Handler+0x884>)
 8001c08:	f00c f9c8 	bl	800df9c <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c0c:	bf00      	nop
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4882      	ldr	r0, [pc, #520]	; (8001e1c <SysTick_Handler+0x884>)
 8001c12:	f00c fb12 	bl	800e23a <eth_rd_SOCKET_CMD>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f8      	bne.n	8001c0e <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	; (8001e18 <SysTick_Handler+0x880>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001c22:	4b83      	ldr	r3, [pc, #524]	; (8001e30 <SysTick_Handler+0x898>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <SysTick_Handler+0x89c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 814f 	beq.w	8001ed0 <SysTick_Handler+0x938>
 8001c32:	2117      	movs	r1, #23
 8001c34:	4880      	ldr	r0, [pc, #512]	; (8001e38 <SysTick_Handler+0x8a0>)
 8001c36:	f7ff fc93 	bl	8001560 <ITM0_Write>
			 break;
 8001c3a:	e149      	b.n	8001ed0 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	4b7e      	ldr	r3, [pc, #504]	; (8001e3c <SysTick_Handler+0x8a4>)
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	230f      	movs	r3, #15
 8001c46:	2226      	movs	r2, #38	; 0x26
 8001c48:	2104      	movs	r1, #4
 8001c4a:	4874      	ldr	r0, [pc, #464]	; (8001e1c <SysTick_Handler+0x884>)
 8001c4c:	f00c f87b 	bl	800dd46 <SPI_ETH_REG>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001c56:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c58:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8137 	beq.w	8001ed0 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c62:	4b77      	ldr	r3, [pc, #476]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <SysTick_Handler+0x8ac>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	486c      	ldr	r0, [pc, #432]	; (8001e1c <SysTick_Handler+0x884>)
 8001c6c:	f00c fb02 	bl	800e274 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c70:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <SysTick_Handler+0x8ac>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c7a:	4868      	ldr	r0, [pc, #416]	; (8001e1c <SysTick_Handler+0x884>)
 8001c7c:	f00c f8db 	bl	800de36 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	2100      	movs	r1, #0
 8001c84:	4865      	ldr	r0, [pc, #404]	; (8001e1c <SysTick_Handler+0x884>)
 8001c86:	f00c f989 	bl	800df9c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c8a:	bf00      	nop
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4863      	ldr	r0, [pc, #396]	; (8001e1c <SysTick_Handler+0x884>)
 8001c90:	f00c fad3 	bl	800e23a <eth_rd_SOCKET_CMD>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f8      	bne.n	8001c8c <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4960      	ldr	r1, [pc, #384]	; (8001e28 <SysTick_Handler+0x890>)
 8001ca8:	4867      	ldr	r0, [pc, #412]	; (8001e48 <SysTick_Handler+0x8b0>)
 8001caa:	f00c fffd 	bl	800eca8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001cae:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <SysTick_Handler+0x880>)
 8001cb6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001cba:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <SysTick_Handler+0x8a8>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <SysTick_Handler+0x730>
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <SysTick_Handler+0x884>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <SysTick_Handler+0x880>)
 8001cca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001cce:	4619      	mov	r1, r3
 8001cd0:	485d      	ldr	r0, [pc, #372]	; (8001e48 <SysTick_Handler+0x8b0>)
 8001cd2:	f00a fd23 	bl	800c71c <ModBUS_Check>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d024      	beq.n	8001d26 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <SysTick_Handler+0x880>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <SysTick_Handler+0x898>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ce8:	484b      	ldr	r0, [pc, #300]	; (8001e18 <SysTick_Handler+0x880>)
 8001cea:	f00a fe19 	bl	800c920 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001cee:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <SysTick_Handler+0x880>)
 8001cf0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4953      	ldr	r1, [pc, #332]	; (8001e48 <SysTick_Handler+0x8b0>)
 8001cfc:	4853      	ldr	r0, [pc, #332]	; (8001e4c <SysTick_Handler+0x8b4>)
 8001cfe:	f00c ffd3 	bl	800eca8 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	4951      	ldr	r1, [pc, #324]	; (8001e50 <SysTick_Handler+0x8b8>)
 8001d0c:	4851      	ldr	r0, [pc, #324]	; (8001e54 <SysTick_Handler+0x8bc>)
 8001d0e:	f00c ffcb 	bl	800eca8 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001d12:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <SysTick_Handler+0x89c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80da 	beq.w	8001ed0 <SysTick_Handler+0x938>
 8001d1c:	2117      	movs	r1, #23
 8001d1e:	484e      	ldr	r0, [pc, #312]	; (8001e58 <SysTick_Handler+0x8c0>)
 8001d20:	f7ff fc1e 	bl	8001560 <ITM0_Write>
			 break;
 8001d24:	e0d4      	b.n	8001ed0 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <SysTick_Handler+0x89c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80d0 	beq.w	8001ed0 <SysTick_Handler+0x938>
 8001d30:	2111      	movs	r1, #17
 8001d32:	484a      	ldr	r0, [pc, #296]	; (8001e5c <SysTick_Handler+0x8c4>)
 8001d34:	f7ff fc14 	bl	8001560 <ITM0_Write>
			 break;
 8001d38:	e0ca      	b.n	8001ed0 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <SysTick_Handler+0x89c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <SysTick_Handler+0x7b2>
 8001d42:	2115      	movs	r1, #21
 8001d44:	4846      	ldr	r0, [pc, #280]	; (8001e60 <SysTick_Handler+0x8c8>)
 8001d46:	f7ff fc0b 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <SysTick_Handler+0x884>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d50:	e0bf      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <SysTick_Handler+0x89c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <SysTick_Handler+0x7ca>
 8001d5a:	2114      	movs	r1, #20
 8001d5c:	4841      	ldr	r0, [pc, #260]	; (8001e64 <SysTick_Handler+0x8cc>)
 8001d5e:	f7ff fbff 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <SysTick_Handler+0x884>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d68:	e0b3      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <SysTick_Handler+0x89c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <SysTick_Handler+0x7e2>
 8001d72:	2116      	movs	r1, #22
 8001d74:	483c      	ldr	r0, [pc, #240]	; (8001e68 <SysTick_Handler+0x8d0>)
 8001d76:	f7ff fbf3 	bl	8001560 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4827      	ldr	r0, [pc, #156]	; (8001e1c <SysTick_Handler+0x884>)
 8001d80:	f00c f90c 	bl	800df9c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d84:	bf00      	nop
 8001d86:	2301      	movs	r3, #1
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <SysTick_Handler+0x8a4>)
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	230f      	movs	r3, #15
 8001d90:	2201      	movs	r2, #1
 8001d92:	2104      	movs	r1, #4
 8001d94:	4821      	ldr	r0, [pc, #132]	; (8001e1c <SysTick_Handler+0x884>)
 8001d96:	f00b ffd6 	bl	800dd46 <SPI_ETH_REG>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f2      	bne.n	8001d86 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <SysTick_Handler+0x884>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001da6:	e094      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <SysTick_Handler+0x89c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <SysTick_Handler+0x820>
 8001db0:	2117      	movs	r1, #23
 8001db2:	482e      	ldr	r0, [pc, #184]	; (8001e6c <SysTick_Handler+0x8d4>)
 8001db4:	f7ff fbd4 	bl	8001560 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001db8:	2208      	movs	r2, #8
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4817      	ldr	r0, [pc, #92]	; (8001e1c <SysTick_Handler+0x884>)
 8001dbe:	f00c f8ed 	bl	800df9c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001dc2:	bf00      	nop
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <SysTick_Handler+0x8a4>)
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	230f      	movs	r3, #15
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4812      	ldr	r0, [pc, #72]	; (8001e1c <SysTick_Handler+0x884>)
 8001dd4:	f00b ffb7 	bl	800dd46 <SPI_ETH_REG>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f2      	bne.n	8001dc4 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <SysTick_Handler+0x884>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001de4:	e075      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <SysTick_Handler+0x89c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <SysTick_Handler+0x85e>
 8001dee:	2115      	movs	r1, #21
 8001df0:	481f      	ldr	r0, [pc, #124]	; (8001e70 <SysTick_Handler+0x8d8>)
 8001df2:	f7ff fbb5 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <SysTick_Handler+0x884>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dfc:	e069      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <SysTick_Handler+0x89c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <SysTick_Handler+0x876>
 8001e06:	2110      	movs	r1, #16
 8001e08:	481a      	ldr	r0, [pc, #104]	; (8001e74 <SysTick_Handler+0x8dc>)
 8001e0a:	f7ff fba9 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e0e:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <SysTick_Handler+0x884>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e14:	e05d      	b.n	8001ed2 <SysTick_Handler+0x93a>
 8001e16:	bf00      	nop
 8001e18:	200018cc 	.word	0x200018cc
 8001e1c:	2000276c 	.word	0x2000276c
 8001e20:	200037da 	.word	0x200037da
 8001e24:	20001a60 	.word	0x20001a60
 8001e28:	20002788 	.word	0x20002788
 8001e2c:	200037d6 	.word	0x200037d6
 8001e30:	20003e50 	.word	0x20003e50
 8001e34:	20000021 	.word	0x20000021
 8001e38:	08010580 	.word	0x08010580
 8001e3c:	200037dc 	.word	0x200037dc
 8001e40:	200037d4 	.word	0x200037d4
 8001e44:	200037d8 	.word	0x200037d8
 8001e48:	200018d9 	.word	0x200018d9
 8001e4c:	20002f88 	.word	0x20002f88
 8001e50:	20001bec 	.word	0x20001bec
 8001e54:	20002138 	.word	0x20002138
 8001e58:	08010594 	.word	0x08010594
 8001e5c:	08010570 	.word	0x08010570
 8001e60:	080105a8 	.word	0x080105a8
 8001e64:	080105c0 	.word	0x080105c0
 8001e68:	080105d8 	.word	0x080105d8
 8001e6c:	080105f0 	.word	0x080105f0
 8001e70:	08010608 	.word	0x08010608
 8001e74:	08010620 	.word	0x08010620
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e78:	4b62      	ldr	r3, [pc, #392]	; (8002004 <SysTick_Handler+0xa6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <SysTick_Handler+0x8f0>
 8001e80:	2112      	movs	r1, #18
 8001e82:	4861      	ldr	r0, [pc, #388]	; (8002008 <SysTick_Handler+0xa70>)
 8001e84:	f7ff fb6c 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e88:	4b60      	ldr	r3, [pc, #384]	; (800200c <SysTick_Handler+0xa74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e8e:	e020      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001e90:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <SysTick_Handler+0xa6c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <SysTick_Handler+0x908>
 8001e98:	2113      	movs	r1, #19
 8001e9a:	485d      	ldr	r0, [pc, #372]	; (8002010 <SysTick_Handler+0xa78>)
 8001e9c:	f7ff fb60 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	; (800200c <SysTick_Handler+0xa74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ea6:	e014      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <SysTick_Handler+0xa6c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <SysTick_Handler+0x920>
 8001eb0:	2111      	movs	r1, #17
 8001eb2:	4858      	ldr	r0, [pc, #352]	; (8002014 <SysTick_Handler+0xa7c>)
 8001eb4:	f7ff fb54 	bl	8001560 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <SysTick_Handler+0xa74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ebe:	e008      	b.n	8001ed2 <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001ec0:	4852      	ldr	r0, [pc, #328]	; (800200c <SysTick_Handler+0xa74>)
 8001ec2:	f00b ff19 	bl	800dcf8 <SPI_ETH>
 8001ec6:	e004      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 default:
 8001ec8:	bf00      	nop
 8001eca:	e002      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 break;
 8001ecc:	bf00      	nop
 8001ece:	e000      	b.n	8001ed2 <SysTick_Handler+0x93a>
			 break;
 8001ed0:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <SysTick_Handler+0xa80>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d102      	bne.n	8001ee0 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001eda:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <SysTick_Handler+0xa80>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	; (800201c <SysTick_Handler+0xa84>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d104      	bne.n	8001ef2 <SysTick_Handler+0x95a>
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <SysTick_Handler+0xa88>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a4c      	ldr	r2, [pc, #304]	; (8002020 <SysTick_Handler+0xa88>)
 8001ef0:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <SysTick_Handler+0xa88>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	dd0f      	ble.n	8001f1a <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <SysTick_Handler+0xa88>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001f00:	4b48      	ldr	r3, [pc, #288]	; (8002024 <SysTick_Handler+0xa8c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <SysTick_Handler+0xa84>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001f0c:	4b46      	ldr	r3, [pc, #280]	; (8002028 <SysTick_Handler+0xa90>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <SysTick_Handler+0xa94>)
 8001f12:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <SysTick_Handler+0xa90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 fe4b 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <SysTick_Handler+0xa98>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d105      	bne.n	8001f34 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <SysTick_Handler+0xa9c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a41      	ldr	r2, [pc, #260]	; (8002034 <SysTick_Handler+0xa9c>)
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e002      	b.n	8001f3a <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <SysTick_Handler+0xa9c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <SysTick_Handler+0xa98>)
 8001f3c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d158      	bne.n	8001ff6 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <SysTick_Handler+0xaa0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d017      	beq.n	8001f7c <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <SysTick_Handler+0xa98>)
 8001f4e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d006      	beq.n	8001f64 <SysTick_Handler+0x9cc>
 8001f56:	4b36      	ldr	r3, [pc, #216]	; (8002030 <SysTick_Handler+0xa98>)
 8001f58:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <SysTick_Handler+0xa98>)
 8001f60:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <SysTick_Handler+0xa98>)
 8001f66:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d106      	bne.n	8001f7c <SysTick_Handler+0x9e4>
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <SysTick_Handler+0xa98>)
 8001f70:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001f74:	3301      	adds	r3, #1
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <SysTick_Handler+0xa98>)
 8001f78:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f7c:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <SysTick_Handler+0xa98>)
 8001f7e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d018      	beq.n	8001fb8 <SysTick_Handler+0xa20>
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <SysTick_Handler+0xa98>)
 8001f88:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001f8c:	f241 527c 	movw	r2, #5500	; 0x157c
 8001f90:	4293      	cmp	r3, r2
 8001f92:	dd11      	ble.n	8001fb8 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <SysTick_Handler+0xaa0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <SysTick_Handler+0xaa4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f242 020c 	movw	r2, #8204	; 0x200c
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d107      	bne.n	8001fb8 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4925      	ldr	r1, [pc, #148]	; (8002040 <SysTick_Handler+0xaa8>)
 8001fac:	4823      	ldr	r0, [pc, #140]	; (800203c <SysTick_Handler+0xaa4>)
 8001fae:	f003 fbac 	bl	800570a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <SysTick_Handler+0xaac>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <SysTick_Handler+0xa98>)
 8001fba:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d11d      	bne.n	8001ffe <SysTick_Handler+0xa66>
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <SysTick_Handler+0xa98>)
 8001fc4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001fc8:	f245 0214 	movw	r2, #20500	; 0x5014
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	dd16      	ble.n	8001ffe <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <SysTick_Handler+0xaa0>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <SysTick_Handler+0xaa4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f242 020c 	movw	r2, #8204	; 0x200c
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10c      	bne.n	8001ffe <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4916      	ldr	r1, [pc, #88]	; (8002040 <SysTick_Handler+0xaa8>)
 8001fe8:	4814      	ldr	r0, [pc, #80]	; (800203c <SysTick_Handler+0xaa4>)
 8001fea:	f003 fb8e 	bl	800570a <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <SysTick_Handler+0xaac>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	e003      	b.n	8001ffe <SysTick_Handler+0xa66>
		wf._ticks=0;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <SysTick_Handler+0xa98>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000021 	.word	0x20000021
 8002008:	08010634 	.word	0x08010634
 800200c:	2000276c 	.word	0x2000276c
 8002010:	08010648 	.word	0x08010648
 8002014:	0801065c 	.word	0x0801065c
 8002018:	20000374 	.word	0x20000374
 800201c:	20003822 	.word	0x20003822
 8002020:	20003e60 	.word	0x20003e60
 8002024:	20003e64 	.word	0x20003e64
 8002028:	20003e5c 	.word	0x20003e5c
 800202c:	20003e68 	.word	0x20003e68
 8002030:	20000b80 	.word	0x20000b80
 8002034:	20003e54 	.word	0x20003e54
 8002038:	20003823 	.word	0x20003823
 800203c:	200002a4 	.word	0x200002a4
 8002040:	20003e34 	.word	0x20003e34
 8002044:	20003820 	.word	0x20003820

08002048 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_UART_ErrorCallback+0x98>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11c      	bne.n	8002094 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_UART_ErrorCallback+0x9c>)
 8002064:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002068:	3301      	adds	r3, #1
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_UART_ErrorCallback+0x9c>)
 800206c:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f003 fa3c 	bl	80054fe <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002086:	f7ff f965 	bl	8001354 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800208a:	2201      	movs	r2, #1
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_UART_ErrorCallback+0xa0>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f003 fb3b 	bl	800570a <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <HAL_UART_ErrorCallback+0xa4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d11c      	bne.n	80020d8 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_UART_ErrorCallback+0x9c>)
 80020a8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_UART_ErrorCallback+0x9c>)
 80020b0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f003 fa1a 	bl	80054fe <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80020ca:	f7ff f96d 	bl	80013a8 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80020ce:	2201      	movs	r2, #1
 80020d0:	4905      	ldr	r1, [pc, #20]	; (80020e8 <HAL_UART_ErrorCallback+0xa0>)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 fb19 	bl	800570a <HAL_UART_Receive_IT>
	}
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40011000 	.word	0x40011000
 80020e4:	20000b80 	.word	0x20000b80
 80020e8:	20003e34 	.word	0x20003e34
 80020ec:	40004400 	.word	0x40004400

080020f0 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_UART_RxCpltCallback+0xc0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d123      	bne.n	800214a <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_UART_RxCpltCallback+0xc4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <HAL_UART_RxCpltCallback+0xc8>)
 8002108:	7811      	ldrb	r1, [r2, #0]
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <HAL_UART_RxCpltCallback+0xcc>)
 800210c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_UART_RxCpltCallback+0xc4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_UART_RxCpltCallback+0xc4>)
 8002116:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_UART_RxCpltCallback+0xc4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	db03      	blt.n	800212a <HAL_UART_RxCpltCallback+0x3a>
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_UART_RxCpltCallback+0xc4>)
 8002124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002128:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800212a:	2100      	movs	r1, #0
 800212c:	4824      	ldr	r0, [pc, #144]	; (80021c0 <HAL_UART_RxCpltCallback+0xd0>)
 800212e:	f002 f9ed 	bl	800450c <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002136:	2201      	movs	r2, #1
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_UART_RxCpltCallback+0xd4>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002140:	2201      	movs	r2, #1
 8002142:	491d      	ldr	r1, [pc, #116]	; (80021b8 <HAL_UART_RxCpltCallback+0xc8>)
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f003 fae0 	bl	800570a <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_UART_RxCpltCallback+0xd8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d128      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_UART_RxCpltCallback+0xdc>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_UART_RxCpltCallback+0xe0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b2d1      	uxtb	r1, r2
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_UART_RxCpltCallback+0xe4>)
 8002160:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_UART_RxCpltCallback+0xe0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_UART_RxCpltCallback+0xe0>)
 800216a:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_UART_RxCpltCallback+0xe0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002174:	db03      	blt.n	800217e <HAL_UART_RxCpltCallback+0x8e>
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_UART_RxCpltCallback+0xe0>)
 8002178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800217e:	2201      	movs	r2, #1
 8002180:	2102      	movs	r1, #2
 8002182:	4815      	ldr	r0, [pc, #84]	; (80021d8 <HAL_UART_RxCpltCallback+0xe8>)
 8002184:	f001 f998 	bl	80034b8 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002188:	2100      	movs	r1, #0
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <HAL_UART_RxCpltCallback+0xec>)
 800218c:	f002 f9be 	bl	800450c <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_UART_RxCpltCallback+0xf0>)
 8002192:	2201      	movs	r2, #1
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_UART_RxCpltCallback+0xf4>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 800219c:	2201      	movs	r2, #1
 800219e:	490b      	ldr	r1, [pc, #44]	; (80021cc <HAL_UART_RxCpltCallback+0xdc>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f003 fab2 	bl	800570a <HAL_UART_Receive_IT>
		 }
 }
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40011000 	.word	0x40011000
 80021b4:	20003e6c 	.word	0x20003e6c
 80021b8:	20003e34 	.word	0x20003e34
 80021bc:	20003830 	.word	0x20003830
 80021c0:	20000214 	.word	0x20000214
 80021c4:	20003820 	.word	0x20003820
 80021c8:	40004400 	.word	0x40004400
 80021cc:	20003e38 	.word	0x20003e38
 80021d0:	20003e70 	.word	0x20003e70
 80021d4:	20003a30 	.word	0x20003a30
 80021d8:	40020000 	.word	0x40020000
 80021dc:	2000025c 	.word	0x2000025c
 80021e0:	40000400 	.word	0x40000400
 80021e4:	20003821 	.word	0x20003821

080021e8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d12d      	bne.n	8002256 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f002 fa83 	bl	8004708 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002214:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	4932      	ldr	r1, [pc, #200]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002230:	4833      	ldr	r0, [pc, #204]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002232:	f00c fd39 	bl	800eca8 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002236:	2201      	movs	r2, #1
 8002238:	4932      	ldr	r1, [pc, #200]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800223a:	4833      	ldr	r0, [pc, #204]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800223c:	f003 fa65 	bl	800570a <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002242:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	482b      	ldr	r0, [pc, #172]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002252:	f7ff f985 	bl	8001560 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d13f      	bne.n	80022e0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002260:	2100      	movs	r1, #0
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f002 fa50 	bl	8004708 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2102      	movs	r1, #2
 800226c:	4829      	ldr	r0, [pc, #164]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800226e:	f001 f923 	bl	80034b8 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002284:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022a0:	4822      	ldr	r0, [pc, #136]	; (800232c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80022a2:	f00c fd01 	bl	800eca8 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80022ac:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80022b0:	2201      	movs	r2, #1
 80022b2:	4920      	ldr	r1, [pc, #128]	; (8002334 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80022b4:	4820      	ldr	r0, [pc, #128]	; (8002338 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80022b6:	f003 fa28 	bl	800570a <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80022bc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10d      	bne.n	80022e0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80022c4:	2117      	movs	r1, #23
 80022c6:	481d      	ldr	r0, [pc, #116]	; (800233c <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80022c8:	f7ff f94a 	bl	8001560 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4815      	ldr	r0, [pc, #84]	; (8002328 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80022d4:	f7ff f944 	bl	8001560 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80022d8:	2102      	movs	r1, #2
 80022da:	4819      	ldr	r0, [pc, #100]	; (8002340 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80022dc:	f7ff f940 	bl	8001560 <ITM0_Write>
				 }
		}
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20003824 	.word	0x20003824
 80022ec:	20003820 	.word	0x20003820
 80022f0:	20003e6c 	.word	0x20003e6c
 80022f4:	20003e40 	.word	0x20003e40
 80022f8:	20003830 	.word	0x20003830
 80022fc:	20003e30 	.word	0x20003e30
 8002300:	20003c30 	.word	0x20003c30
 8002304:	20003e34 	.word	0x20003e34
 8002308:	200002a4 	.word	0x200002a4
 800230c:	20000b80 	.word	0x20000b80
 8002310:	40000400 	.word	0x40000400
 8002314:	40020000 	.word	0x40020000
 8002318:	20003825 	.word	0x20003825
 800231c:	20003821 	.word	0x20003821
 8002320:	20003e70 	.word	0x20003e70
 8002324:	20003e44 	.word	0x20003e44
 8002328:	20003a30 	.word	0x20003a30
 800232c:	200003ce 	.word	0x200003ce
 8002330:	20000378 	.word	0x20000378
 8002334:	20003e38 	.word	0x20003e38
 8002338:	200002e8 	.word	0x200002e8
 800233c:	08010670 	.word	0x08010670
 8002340:	08010688 	.word	0x08010688

08002344 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <ESP8266_HW_Reset+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <ESP8266_HW_Reset+0x44>)
 8002356:	f001 f8af 	bl	80034b8 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800235a:	2115      	movs	r1, #21
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <ESP8266_HW_Reset+0x48>)
 800235e:	f7ff f8ff 	bl	8001560 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8002362:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002366:	f000 fc45 	bl	8002bf4 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 800236a:	210f      	movs	r1, #15
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <ESP8266_HW_Reset+0x4c>)
 800236e:	f7ff f8f7 	bl	8001560 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <ESP8266_HW_Reset+0x44>)
 800237a:	f001 f89d 	bl	80034b8 <HAL_GPIO_WritePin>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000381d 	.word	0x2000381d
 8002388:	40020000 	.word	0x40020000
 800238c:	0801049c 	.word	0x0801049c
 8002390:	0801068c 	.word	0x0801068c

08002394 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af06      	add	r7, sp, #24
 800239a:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	220c      	movs	r2, #12
 80023a0:	4943      	ldr	r1, [pc, #268]	; (80024b0 <ESP8266_HW_Init+0x11c>)
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f003 f8da 	bl	800555c <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ac:	f000 fc22 	bl	8002bf4 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <ESP8266_HW_Init+0x120>)
 80023b2:	2205      	movs	r2, #5
 80023b4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <ESP8266_HW_Init+0x124>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <ESP8266_HW_Init+0x120>)
 80023be:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023c2:	e00e      	b.n	80023e2 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023c4:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <ESP8266_HW_Init+0x124>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <ESP8266_HW_Init+0x120>)
 80023ca:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <ESP8266_HW_Init+0x128>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80023d6:	4293      	cmp	r3, r2
 80023d8:	dd03      	ble.n	80023e2 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023e0:	e012      	b.n	8002408 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023e2:	2300      	movs	r3, #0
 80023e4:	9304      	str	r3, [sp, #16]
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <ESP8266_HW_Init+0x130>)
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <ESP8266_HW_Init+0x134>)
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <ESP8266_HW_Init+0x138>)
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ESP8266_HW_Init+0x13c>)
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <ESP8266_HW_Init+0x140>)
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <ESP8266_HW_Init+0x144>)
 80023fa:	4938      	ldr	r1, [pc, #224]	; (80024dc <ESP8266_HW_Init+0x148>)
 80023fc:	4838      	ldr	r0, [pc, #224]	; (80024e0 <ESP8266_HW_Init+0x14c>)
 80023fe:	f00c f8ed 	bl	800e5dc <FT_String_ND>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d1dd      	bne.n	80023c4 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d129      	bne.n	8002464 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <ESP8266_HW_Init+0x120>)
 8002412:	2205      	movs	r2, #5
 8002414:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <ESP8266_HW_Init+0x124>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <ESP8266_HW_Init+0x120>)
 800241e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002422:	e00a      	b.n	800243a <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <ESP8266_HW_Init+0x124>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <ESP8266_HW_Init+0x120>)
 800242a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <ESP8266_HW_Init+0x128>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f241 3287 	movw	r2, #4999	; 0x1387
 8002436:	4293      	cmp	r3, r2
 8002438:	dc13      	bgt.n	8002462 <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800243a:	2300      	movs	r3, #0
 800243c:	9304      	str	r3, [sp, #16]
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <ESP8266_HW_Init+0x130>)
 8002440:	9303      	str	r3, [sp, #12]
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <ESP8266_HW_Init+0x134>)
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <ESP8266_HW_Init+0x138>)
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <ESP8266_HW_Init+0x13c>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <ESP8266_HW_Init+0x140>)
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <ESP8266_HW_Init+0x144>)
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <ESP8266_HW_Init+0x148>)
 8002454:	4822      	ldr	r0, [pc, #136]	; (80024e0 <ESP8266_HW_Init+0x14c>)
 8002456:	f00c f8c1 	bl	800e5dc <FT_String_ND>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d1e1      	bne.n	8002424 <ESP8266_HW_Init+0x90>
 8002460:	e000      	b.n	8002464 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 8002462:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <ESP8266_HW_Init+0x128>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f241 3287 	movw	r2, #4999	; 0x1387
 800246c:	4293      	cmp	r3, r2
 800246e:	dc06      	bgt.n	800247e <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <ESP8266_HW_Init+0x150>)
 8002472:	220a      	movs	r2, #10
 8002474:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <ESP8266_HW_Init+0x128>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e008      	b.n	8002490 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <ESP8266_HW_Init+0x150>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <ESP8266_HW_Init+0x150>)
 8002488:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <ESP8266_HW_Init+0x128>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <ESP8266_HW_Init+0x150>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d981      	bls.n	800239c <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <ESP8266_HW_Init+0x150>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b0a      	cmp	r3, #10
 800249e:	d101      	bne.n	80024a4 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 80024a4:	2300      	movs	r3, #0
	  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	0801069c 	.word	0x0801069c
 80024b4:	20000b80 	.word	0x20000b80
 80024b8:	20003e40 	.word	0x20003e40
 80024bc:	20003e48 	.word	0x20003e48
 80024c0:	2000381e 	.word	0x2000381e
 80024c4:	20001614 	.word	0x20001614
 80024c8:	20003e58 	.word	0x20003e58
 80024cc:	20001860 	.word	0x20001860
 80024d0:	20001414 	.word	0x20001414
 80024d4:	2000186c 	.word	0x2000186c
 80024d8:	080106ac 	.word	0x080106ac
 80024dc:	20001858 	.word	0x20001858
 80024e0:	20003c30 	.word	0x20003c30
 80024e4:	2000381d 	.word	0x2000381d

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
}
 80024ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <Error_Handler+0x8>
	...

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_MspInit+0x4c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_MspInit+0x4c>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x4c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x4c>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_SPI_MspInit+0x84>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12b      	bne.n	80025be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_SPI_MspInit+0x88>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_SPI_MspInit+0x88>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800259e:	23e0      	movs	r3, #224	; 0xe0
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_SPI_MspInit+0x8c>)
 80025ba:	f000 fd15 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40013000 	.word	0x40013000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d116      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201c      	movs	r0, #28
 8002608:	f000 fc17 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	201c      	movs	r0, #28
 800260e:	f000 fc30 	bl	8002e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002612:	e01a      	b.n	800264a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_TIM_Base_MspInit+0x84>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d115      	bne.n	800264a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_TIM_Base_MspInit+0x80>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	201d      	movs	r0, #29
 8002640:	f000 fbfb 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002644:	201d      	movs	r0, #29
 8002646:	f000 fc14 	bl	8002e72 <HAL_NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40000400 	.word	0x40000400

0800265c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	; 0x38
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a54      	ldr	r2, [pc, #336]	; (80027cc <HAL_UART_MspInit+0x170>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d135      	bne.n	80026ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002688:	f043 0310 	orr.w	r3, r3, #16
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_UART_MspInit+0x174>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <HAL_UART_MspInit+0x174>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_UART_MspInit+0x174>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c8:	2307      	movs	r3, #7
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <HAL_UART_MspInit+0x178>)
 80026d4:	f000 fc88 	bl	8002fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	2025      	movs	r0, #37	; 0x25
 80026de:	f000 fbac 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026e2:	2025      	movs	r0, #37	; 0x25
 80026e4:	f000 fbc5 	bl	8002e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026e8:	e06b      	b.n	80027c2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <HAL_UART_MspInit+0x17c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d134      	bne.n	800275e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_UART_MspInit+0x174>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <HAL_UART_MspInit+0x174>)
 80026fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002702:	6413      	str	r3, [r2, #64]	; 0x40
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <HAL_UART_MspInit+0x174>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6313      	str	r3, [r2, #48]	; 0x30
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800272c:	230c      	movs	r3, #12
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800273c:	2307      	movs	r3, #7
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	4823      	ldr	r0, [pc, #140]	; (80027d4 <HAL_UART_MspInit+0x178>)
 8002748:	f000 fc4e 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	2026      	movs	r0, #38	; 0x26
 8002752:	f000 fb72 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002756:	2026      	movs	r0, #38	; 0x26
 8002758:	f000 fb8b 	bl	8002e72 <HAL_NVIC_EnableIRQ>
}
 800275c:	e031      	b.n	80027c2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_UART_MspInit+0x180>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d12c      	bne.n	80027c2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_UART_MspInit+0x174>)
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	6453      	str	r3, [r2, #68]	; 0x44
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_UART_MspInit+0x174>)
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_UART_MspInit+0x174>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_UART_MspInit+0x174>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6313      	str	r3, [r2, #48]	; 0x30
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_UART_MspInit+0x174>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027b2:	2308      	movs	r3, #8
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <HAL_UART_MspInit+0x178>)
 80027be:	f000 fc13 	bl	8002fe8 <HAL_GPIO_Init>
}
 80027c2:	bf00      	nop
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40011000 	.word	0x40011000
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40004400 	.word	0x40004400
 80027dc:	40011400 	.word	0x40011400

080027e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_UART_MspDeInit+0x80>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10e      	bne.n	8002810 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 80027f8:	f023 0310 	bic.w	r3, r3, #16
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80027fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002802:	4819      	ldr	r0, [pc, #100]	; (8002868 <HAL_UART_MspDeInit+0x88>)
 8002804:	f000 fd74 	bl	80032f0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002808:	2025      	movs	r0, #37	; 0x25
 800280a:	f000 fb40 	bl	8002e8e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800280e:	e022      	b.n	8002856 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <HAL_UART_MspDeInit+0x8c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10d      	bne.n	8002836 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 8002820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002826:	210c      	movs	r1, #12
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <HAL_UART_MspDeInit+0x88>)
 800282a:	f000 fd61 	bl	80032f0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800282e:	2026      	movs	r0, #38	; 0x26
 8002830:	f000 fb2d 	bl	8002e8e <HAL_NVIC_DisableIRQ>
}
 8002834:	e00f      	b.n	8002856 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <HAL_UART_MspDeInit+0x90>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10a      	bne.n	8002856 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_UART_MspDeInit+0x84>)
 8002846:	f023 0320 	bic.w	r3, r3, #32
 800284a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800284c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <HAL_UART_MspDeInit+0x88>)
 8002852:	f000 fd4d 	bl	80032f0 <HAL_GPIO_DeInit>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40011000 	.word	0x40011000
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40004400 	.word	0x40004400
 8002870:	40011400 	.word	0x40011400

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <NMI_Handler+0x4>

0800287a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <MemManage_Handler+0x4>

08002886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <BusFault_Handler+0x4>

0800288c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <UsageFault_Handler+0x4>

08002892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <TIM2_IRQHandler+0x10>)
 80028c2:	f002 f82d 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000214 	.word	0x20000214

080028d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <TIM3_IRQHandler+0x10>)
 80028d6:	f002 f823 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000025c 	.word	0x2000025c

080028e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <USART1_IRQHandler+0x10>)
 80028ea:	f002 ff3f 	bl	800576c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200002a4 	.word	0x200002a4

080028f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <USART2_IRQHandler+0x10>)
 80028fe:	f002 ff35 	bl	800576c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002e8 	.word	0x200002e8

0800290c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	return 1;
 8002910:	2301      	movs	r3, #1
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <_kill>:

int _kill(int pid, int sig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002926:	f00c fa0f 	bl	800ed48 <__errno>
 800292a:	4603      	mov	r3, r0
 800292c:	2216      	movs	r2, #22
 800292e:	601a      	str	r2, [r3, #0]
	return -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_exit>:

void _exit (int status)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ffe7 	bl	800291c <_kill>
	while (1) {}		/* Make sure we hang here */
 800294e:	e7fe      	b.n	800294e <_exit+0x12>

08002950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e00a      	b.n	8002978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002962:	f3af 8000 	nop.w
 8002966:	4601      	mov	r1, r0
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	60ba      	str	r2, [r7, #8]
 800296e:	b2ca      	uxtb	r2, r1
 8002970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	dbf0      	blt.n	8002962 <_read+0x12>
	}

return len;
 8002980:	687b      	ldr	r3, [r7, #4]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e009      	b.n	80029b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	60ba      	str	r2, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3301      	adds	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	dbf1      	blt.n	800299c <_write+0x12>
	}
	return len;
 80029b8:	687b      	ldr	r3, [r7, #4]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <_close>:

int _close(int file)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ea:	605a      	str	r2, [r3, #4]
	return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_isatty>:

int _isatty(int file)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
	return 1;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <_sbrk+0x5c>)
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <_sbrk+0x60>)
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <_sbrk+0x64>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <_sbrk+0x64>)
 8002a4a:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <_sbrk+0x68>)
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d207      	bcs.n	8002a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a5c:	f00c f974 	bl	800ed48 <__errno>
 8002a60:	4603      	mov	r3, r0
 8002a62:	220c      	movs	r2, #12
 8002a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	e009      	b.n	8002a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <_sbrk+0x64>)
 8002a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20020000 	.word	0x20020000
 8002a8c:	00000400 	.word	0x00000400
 8002a90:	20003e78 	.word	0x20003e78
 8002a94:	20003e90 	.word	0x20003e90

08002a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <SystemInit+0x20>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <SystemInit+0x20>)
 8002aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac0:	480d      	ldr	r0, [pc, #52]	; (8002af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ac2:	490e      	ldr	r1, [pc, #56]	; (8002afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac8:	e002      	b.n	8002ad0 <LoopCopyDataInit>

08002aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ace:	3304      	adds	r3, #4

08002ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad4:	d3f9      	bcc.n	8002aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ad8:	4c0b      	ldr	r4, [pc, #44]	; (8002b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002adc:	e001      	b.n	8002ae2 <LoopFillZerobss>

08002ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae0:	3204      	adds	r2, #4

08002ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae4:	d3fb      	bcc.n	8002ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ae6:	f7ff ffd7 	bl	8002a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aea:	f00c f933 	bl	800ed54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aee:	f7fd fdd5 	bl	800069c <main>
  bx  lr    
 8002af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002afc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002b00:	08010f68 	.word	0x08010f68
  ldr r2, =_sbss
 8002b04:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002b08:	20003e90 	.word	0x20003e90

08002b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <HAL_Init+0x40>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_Init+0x40>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_Init+0x40>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 f973 	bl	8002e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff fcd6 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f999 	bl	8002eaa <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 f953 	bl	8002e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000084 	.word	0x20000084
 8002bac:	2000008c 	.word	0x2000008c
 8002bb0:	20000088 	.word	0x20000088

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000008c 	.word	0x2000008c
 8002bd8:	20003e7c 	.word	0x20003e7c

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20003e7c 	.word	0x20003e7c

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000008c 	.word	0x2000008c

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <__NVIC_EnableIRQ+0x38>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db12      	blt.n	8002d14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	490a      	ldr	r1, [pc, #40]	; (8002d20 <__NVIC_DisableIRQ+0x44>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	3320      	adds	r3, #32
 8002d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d08:	f3bf 8f4f 	dsb	sy
}
 8002d0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d0e:	f3bf 8f6f 	isb	sy
}
 8002d12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df0:	d301      	bcc.n	8002df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <SysTick_Config+0x40>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfe:	210f      	movs	r1, #15
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f7ff ff8e 	bl	8002d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <SysTick_Config+0x40>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SysTick_Config+0x40>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff05 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4c:	f7ff ff1a 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	6978      	ldr	r0, [r7, #20]
 8002e58:	f7ff ff8e 	bl	8002d78 <NVIC_EncodePriority>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff5d 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff0d 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff1d 	bl	8002cdc <__NVIC_DisableIRQ>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ff94 	bl	8002de0 <SysTick_Config>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff fe84 	bl	8002bdc <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d008      	beq.n	8002ef4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e052      	b.n	8002f9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0216 	bic.w	r2, r2, #22
 8002f02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <HAL_DMA_Abort+0x62>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0208 	bic.w	r2, r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f44:	e013      	b.n	8002f6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f46:	f7ff fe49 	bl	8002bdc <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d90c      	bls.n	8002f6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e015      	b.n	8002f9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e4      	bne.n	8002f46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	223f      	movs	r2, #63	; 0x3f
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e00c      	b.n	8002fda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e159      	b.n	80032b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 8148 	bne.w	80032b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	2b02      	cmp	r3, #2
 8003038:	d130      	bne.n	800309c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d017      	beq.n	80030d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a2 	beq.w	80032b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_GPIO_Init+0x2e8>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x2e8>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_GPIO_Init+0x2e8>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318a:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_GPIO_Init+0x2ec>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <HAL_GPIO_Init+0x2f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x202>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x1fe>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_GPIO_Init+0x2f8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x1fa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a46      	ldr	r2, [pc, #280]	; (80032e4 <HAL_GPIO_Init+0x2fc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x1f6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a45      	ldr	r2, [pc, #276]	; (80032e8 <HAL_GPIO_Init+0x300>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x1f2>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031da:	2307      	movs	r3, #7
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031ea:	2300      	movs	r3, #0
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fc:	4935      	ldr	r1, [pc, #212]	; (80032d4 <HAL_GPIO_Init+0x2ec>)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_GPIO_Init+0x304>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322e:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <HAL_GPIO_Init+0x304>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_GPIO_Init+0x304>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003258:	4a24      	ldr	r2, [pc, #144]	; (80032ec <HAL_GPIO_Init+0x304>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800325e:	4b23      	ldr	r3, [pc, #140]	; (80032ec <HAL_GPIO_Init+0x304>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_GPIO_Init+0x304>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_GPIO_Init+0x304>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_GPIO_Init+0x304>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b0f      	cmp	r3, #15
 80032bc:	f67f aea2 	bls.w	8003004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e0bb      	b.n	8003484 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800330c:	2201      	movs	r2, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	429a      	cmp	r2, r3
 8003324:	f040 80ab 	bne.w	800347e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003328:	4a5c      	ldr	r2, [pc, #368]	; (800349c <HAL_GPIO_DeInit+0x1ac>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_GPIO_DeInit+0x1b0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d019      	beq.n	8003386 <HAL_GPIO_DeInit+0x96>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_GPIO_DeInit+0x1b4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_DeInit+0x92>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_DeInit+0x1b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00d      	beq.n	800337e <HAL_GPIO_DeInit+0x8e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a51      	ldr	r2, [pc, #324]	; (80034ac <HAL_GPIO_DeInit+0x1bc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <HAL_GPIO_DeInit+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a50      	ldr	r2, [pc, #320]	; (80034b0 <HAL_GPIO_DeInit+0x1c0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_GPIO_DeInit+0x86>
 8003372:	2304      	movs	r3, #4
 8003374:	e008      	b.n	8003388 <HAL_GPIO_DeInit+0x98>
 8003376:	2307      	movs	r3, #7
 8003378:	e006      	b.n	8003388 <HAL_GPIO_DeInit+0x98>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_DeInit+0x98>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_DeInit+0x98>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_DeInit+0x98>
 8003386:	2300      	movs	r3, #0
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	d132      	bne.n	80033fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003398:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43db      	mvns	r3, r3
 80033a0:	4944      	ldr	r1, [pc, #272]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4941      	ldr	r1, [pc, #260]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	493d      	ldr	r1, [pc, #244]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033be:	4013      	ands	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033c2:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	493a      	ldr	r1, [pc, #232]	; (80034b4 <HAL_GPIO_DeInit+0x1c4>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033e0:	4a2e      	ldr	r2, [pc, #184]	; (800349c <HAL_GPIO_DeInit+0x1ac>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	482a      	ldr	r0, [pc, #168]	; (800349c <HAL_GPIO_DeInit+0x1ac>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	400a      	ands	r2, r1
 80033f8:	3302      	adds	r3, #2
 80033fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2103      	movs	r1, #3
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	08d2      	lsrs	r2, r2, #3
 8003434:	4019      	ands	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2103      	movs	r1, #3
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	2101      	movs	r1, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2103      	movs	r1, #3
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b0f      	cmp	r3, #15
 8003488:	f67f af40 	bls.w	800330c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40013800 	.word	0x40013800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40020800 	.word	0x40020800
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4013      	ands	r3, r2
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43d9      	mvns	r1, r3
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	400b      	ands	r3, r1
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e267      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d075      	beq.n	800362a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	4b88      	ldr	r3, [pc, #544]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d00c      	beq.n	8003564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d112      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003562:	d10b      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	4b7e      	ldr	r3, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d05b      	beq.n	8003628 <HAL_RCC_OscConfig+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d157      	bne.n	8003628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e242      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x74>
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a75      	ldr	r2, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e01d      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x98>
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6f      	ldr	r2, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6c      	ldr	r2, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 80035b8:	4b69      	ldr	r3, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a68      	ldr	r2, [pc, #416]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7ff fb00 	bl	8002bdc <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7ff fafc 	bl	8002bdc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e207      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0xc0>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7ff faec 	bl	8002bdc <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7ff fae8 	bl	8002bdc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1f3      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0xe8>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e1c7      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4937      	ldr	r1, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	e03a      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x244>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7ff faa1 	bl	8002bdc <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369e:	f7ff fa9d 	bl	8002bdc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1a8      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4925      	ldr	r1, [pc, #148]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x244>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7ff fa80 	bl	8002bdc <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e0:	f7ff fa7c 	bl	8002bdc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e187      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d036      	beq.n	8003778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x248>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7ff fa60 	bl	8002bdc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7ff fa5c 	bl	8002bdc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e167      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x240>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x200>
 800373e:	e01b      	b.n	8003778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_OscConfig+0x248>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7ff fa49 	bl	8002bdc <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	e00e      	b.n	800376c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374e:	f7ff fa45 	bl	8002bdc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d907      	bls.n	800376c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e150      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
 8003760:	40023800 	.word	0x40023800
 8003764:	42470000 	.word	0x42470000
 8003768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ea      	bne.n	800374e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8097 	beq.w	80038b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a7c      	ldr	r2, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b7a      	ldr	r3, [pc, #488]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a73      	ldr	r2, [pc, #460]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7ff fa05 	bl	8002bdc <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7ff fa01 	bl	8002bdc <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e10c      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_OscConfig+0x474>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x2ea>
 80037fc:	4b64      	ldr	r3, [pc, #400]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a63      	ldr	r2, [pc, #396]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
 8003808:	e01c      	b.n	8003844 <HAL_RCC_OscConfig+0x324>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b05      	cmp	r3, #5
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x30c>
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a5e      	ldr	r2, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a5b      	ldr	r2, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0x324>
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a57      	ldr	r2, [pc, #348]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a54      	ldr	r2, [pc, #336]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d015      	beq.n	8003878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7ff f9c6 	bl	8002bdc <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7ff f9c2 	bl	8002bdc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0cb      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ee      	beq.n	8003854 <HAL_RCC_OscConfig+0x334>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff f9b0 	bl	8002bdc <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7ff f9ac 	bl	8002bdc <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0b5      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003896:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ee      	bne.n	8003880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a38      	ldr	r2, [pc, #224]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a1 	beq.w	8003a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d05c      	beq.n	8003984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d141      	bne.n	8003956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7ff f980 	bl	8002bdc <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7ff f97c 	bl	8002bdc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e087      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	491b      	ldr	r1, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7ff f955 	bl	8002bdc <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003936:	f7ff f951 	bl	8002bdc <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e05c      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x416>
 8003954:	e054      	b.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCC_OscConfig+0x478>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7ff f93e 	bl	8002bdc <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003964:	f7ff f93a 	bl	8002bdc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e045      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_OscConfig+0x470>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x444>
 8003982:	e03d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e038      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
 8003990:	40023800 	.word	0x40023800
 8003994:	40007000 	.word	0x40007000
 8003998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCC_OscConfig+0x4ec>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d028      	beq.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d121      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d11a      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d111      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cc      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d90c      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d044      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ace:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e067      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4934      	ldr	r1, [pc, #208]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b00:	f7ff f86c 	bl	8002bdc <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7ff f868 	bl	8002bdc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e04f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 020c 	and.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20c      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 f821 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490a      	ldr	r1, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe ffcc 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08010cd0 	.word	0x08010cd0
 8003bd4:	20000084 	.word	0x20000084
 8003bd8:	20000088 	.word	0x20000088

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b090      	sub	sp, #64	; 0x40
 8003be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
 8003be8:	2300      	movs	r3, #0
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bec:	2300      	movs	r3, #0
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d00d      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x40>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	f200 80a1 	bhi.w	8003d48 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0e:	e09b      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c14:	e09b      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c16:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c1a:	e098      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c26:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c44:	2100      	movs	r1, #0
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c48:	fb03 f201 	mul.w	r2, r3, r1
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	4a43      	ldr	r2, [pc, #268]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c56:	fba0 1202 	umull	r1, r2, r0, r2
 8003c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c62:	4413      	add	r3, r2
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	2200      	movs	r2, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	61fa      	str	r2, [r7, #28]
 8003c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c76:	f7fc fb1b 	bl	80002b0 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4613      	mov	r3, r2
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	e053      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c84:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	617a      	str	r2, [r7, #20]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c96:	f04f 0b00 	mov.w	fp, #0
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	465b      	mov	r3, fp
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	0159      	lsls	r1, r3, #5
 8003ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cac:	0150      	lsls	r0, r2, #5
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cb6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cce:	ebb2 0408 	subs.w	r4, r2, r8
 8003cd2:	eb63 0509 	sbc.w	r5, r3, r9
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	00eb      	lsls	r3, r5, #3
 8003ce0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce4:	00e2      	lsls	r2, r4, #3
 8003ce6:	4614      	mov	r4, r2
 8003ce8:	461d      	mov	r5, r3
 8003cea:	eb14 030a 	adds.w	r3, r4, sl
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	eb45 030b 	adc.w	r3, r5, fp
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d02:	4629      	mov	r1, r5
 8003d04:	028b      	lsls	r3, r1, #10
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	028a      	lsls	r2, r1, #10
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	2200      	movs	r2, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d20:	f7fc fac6 	bl	80002b0 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3740      	adds	r7, #64	; 0x40
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	017d7840 	.word	0x017d7840

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000084 	.word	0x20000084

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff0 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	08010ce0 	.word	0x08010ce0

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dac:	f7ff ffdc 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0b5b      	lsrs	r3, r3, #13
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08010ce0 	.word	0x08010ce0

08003dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07b      	b.n	8003eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df2:	d009      	beq.n	8003e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
 8003dfa:	e005      	b.n	8003e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe fb8e 	bl	8002544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	ea42 0103 	orr.w	r1, r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0104 	and.w	r1, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0210 	and.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08c      	sub	sp, #48	; 0x30
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x26>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e18a      	b.n	800421e <HAL_SPI_TransmitReceive+0x33c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f10:	f7fe fe64 	bl	8002bdc <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d00f      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x70>
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f38:	d107      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x68>
 8003f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f50:	e15b      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x82>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x82>
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f6a:	e14e      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d003      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	887a      	ldrh	r2, [r7, #2]
 8003f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d178      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x10a>
 8003fe6:	8b7b      	ldrh	r3, [r7, #26]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d166      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004010:	e053      	b.n	80040ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11b      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x176>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x176>
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d113      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	881a      	ldrh	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d119      	bne.n	800409a <HAL_SPI_TransmitReceive+0x1b8>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d014      	beq.n	800409a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	b292      	uxth	r2, r2
 800407c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004096:	2301      	movs	r3, #1
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800409a:	f7fe fd9f 	bl	8002bdc <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d807      	bhi.n	80040ba <HAL_SPI_TransmitReceive+0x1d8>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d003      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040b8:	e0a7      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1a6      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x130>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1a1      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x130>
 80040ce:	e07c      	b.n	80041ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_TransmitReceive+0x1fc>
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d16b      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004104:	e057      	b.n	80041b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d11c      	bne.n	800414e <HAL_SPI_TransmitReceive+0x26c>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_SPI_TransmitReceive+0x26c>
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d114      	bne.n	800414e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d119      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x2ae>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d014      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004190:	f7fe fd24 	bl	8002bdc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	429a      	cmp	r2, r3
 800419e:	d803      	bhi.n	80041a8 <HAL_SPI_TransmitReceive+0x2c6>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x2cc>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b4:	e029      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1a2      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x224>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d19d      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f8b2 	bl	8004338 <SPI_EndRxTxTransaction>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041e6:	e010      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	e000      	b.n	800420a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004208:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800421a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800421e:	4618      	mov	r0, r3
 8004220:	3730      	adds	r7, #48	; 0x30
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004238:	f7fe fcd0 	bl	8002bdc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4413      	add	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004248:	f7fe fcc8 	bl	8002bdc <HAL_GetTick>
 800424c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	0d1b      	lsrs	r3, r3, #20
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425e:	e054      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d050      	beq.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004268:	f7fe fcb8 	bl	8002bdc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	429a      	cmp	r2, r3
 8004276:	d902      	bls.n	800427e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d13d      	bne.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800428c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d111      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d004      	beq.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d107      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d10f      	bne.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e017      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3b01      	subs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d19b      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000084 	.word	0x20000084

08004338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <SPI_EndRxTxTransaction+0x7c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <SPI_EndRxTxTransaction+0x80>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0d5b      	lsrs	r3, r3, #21
 8004350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d112      	bne.n	800438a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff5a 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00f      	b.n	80043aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3b01      	subs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d0f2      	beq.n	800438a <SPI_EndRxTxTransaction+0x52>
 80043a4:	e000      	b.n	80043a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80043a6:	bf00      	nop
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000084 	.word	0x20000084
 80043b8:	165e9f81 	.word	0x165e9f81

080043bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e041      	b.n	8004452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe f8f6 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 fce4 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e041      	b.n	80044f0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f839 	bl	80044f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 fc95 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_TIM_OC_Start_IT+0x28>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e022      	b.n	800457a <HAL_TIM_OC_Start_IT+0x6e>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d109      	bne.n	800454e <HAL_TIM_OC_Start_IT+0x42>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e015      	b.n	800457a <HAL_TIM_OC_Start_IT+0x6e>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d109      	bne.n	8004568 <HAL_TIM_OC_Start_IT+0x5c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	bf14      	ite	ne
 8004560:	2301      	movne	r3, #1
 8004562:	2300      	moveq	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e008      	b.n	800457a <HAL_TIM_OC_Start_IT+0x6e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0b3      	b.n	80046ea <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_OC_Start_IT+0x86>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004590:	e013      	b.n	80045ba <HAL_TIM_OC_Start_IT+0xae>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_OC_Start_IT+0x96>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_OC_Start_IT+0xae>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_OC_Start_IT+0xa6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b0:	e003      	b.n	80045ba <HAL_TIM_OC_Start_IT+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d841      	bhi.n	8004644 <HAL_TIM_OC_Start_IT+0x138>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_TIM_OC_Start_IT+0xbc>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	08004645 	.word	0x08004645
 80045d0:	08004645 	.word	0x08004645
 80045d4:	08004645 	.word	0x08004645
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	08004645 	.word	0x08004645
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004645 	.word	0x08004645
 80045e8:	08004621 	.word	0x08004621
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004645 	.word	0x08004645
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004633 	.word	0x08004633
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0202 	orr.w	r2, r2, #2
 800460a:	60da      	str	r2, [r3, #12]
      break;
 800460c:	e01d      	b.n	800464a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0204 	orr.w	r2, r2, #4
 800461c:	60da      	str	r2, [r3, #12]
      break;
 800461e:	e014      	b.n	800464a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	60da      	str	r2, [r3, #12]
      break;
 8004630:	e00b      	b.n	800464a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0210 	orr.w	r2, r2, #16
 8004640:	60da      	str	r2, [r3, #12]
      break;
 8004642:	e002      	b.n	800464a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	bf00      	nop
  }

  if (status == HAL_OK)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d14b      	bne.n	80046e8 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fe5b 	bl	8005314 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d107      	bne.n	8004678 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_TIM_OC_Start_IT+0x1e8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d018      	beq.n	80046b4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d013      	beq.n	80046b4 <HAL_TIM_OC_Start_IT+0x1a8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_TIM_OC_Start_IT+0x1f0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a16      	ldr	r2, [pc, #88]	; (8004700 <HAL_TIM_OC_Start_IT+0x1f4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_TIM_OC_Start_IT+0x1a8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_TIM_OC_Start_IT+0x1f8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d111      	bne.n	80046d8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d010      	beq.n	80046e8 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	e007      	b.n	80046e8 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40000c00 	.word	0x40000c00
 8004704:	40014000 	.word	0x40014000

08004708 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d841      	bhi.n	80047a0 <HAL_TIM_OC_Stop_IT+0x98>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_TIM_OC_Stop_IT+0x1c>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004759 	.word	0x08004759
 8004728:	080047a1 	.word	0x080047a1
 800472c:	080047a1 	.word	0x080047a1
 8004730:	080047a1 	.word	0x080047a1
 8004734:	0800476b 	.word	0x0800476b
 8004738:	080047a1 	.word	0x080047a1
 800473c:	080047a1 	.word	0x080047a1
 8004740:	080047a1 	.word	0x080047a1
 8004744:	0800477d 	.word	0x0800477d
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047a1 	.word	0x080047a1
 8004750:	080047a1 	.word	0x080047a1
 8004754:	0800478f 	.word	0x0800478f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0202 	bic.w	r2, r2, #2
 8004766:	60da      	str	r2, [r3, #12]
      break;
 8004768:	e01d      	b.n	80047a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0204 	bic.w	r2, r2, #4
 8004778:	60da      	str	r2, [r3, #12]
      break;
 800477a:	e014      	b.n	80047a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0208 	bic.w	r2, r2, #8
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0210 	bic.w	r2, r2, #16
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e002      	b.n	80047a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d157      	bne.n	800485c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2200      	movs	r2, #0
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fdad 	bl	8005314 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <HAL_TIM_OC_Stop_IT+0x160>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d117      	bne.n	80047f4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10f      	bne.n	80047f4 <HAL_TIM_OC_Stop_IT+0xec>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	f240 4344 	movw	r3, #1092	; 0x444
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_OC_Stop_IT+0xec>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <HAL_TIM_OC_Stop_IT+0x11c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	f240 4344 	movw	r3, #1092	; 0x444
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_TIM_OC_Stop_IT+0x11c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_TIM_OC_Stop_IT+0x12c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004832:	e013      	b.n	800485c <HAL_TIM_OC_Stop_IT+0x154>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d104      	bne.n	8004844 <HAL_TIM_OC_Stop_IT+0x13c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004842:	e00b      	b.n	800485c <HAL_TIM_OC_Stop_IT+0x154>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d104      	bne.n	8004854 <HAL_TIM_OC_Stop_IT+0x14c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004852:	e003      	b.n	800485c <HAL_TIM_OC_Stop_IT+0x154>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000

0800486c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e041      	b.n	8004904 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f839 	bl	800490c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 fa8b 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0202 	mvn.w	r2, #2
 800494c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa11 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fc3c 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa14 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0204 	mvn.w	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9e7 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fd fc12 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9ea 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9bd 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd fbe8 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9c0 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f993 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd fbbe 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f996 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0201 	mvn.w	r2, #1
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f969 	bl	8004d76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fcc0 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f95b 	bl	8004db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0220 	mvn.w	r2, #32
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fc8a 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e048      	b.n	8004be0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	d839      	bhi.n	8004bd0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004bd1 	.word	0x08004bd1
 8004b70:	08004bd1 	.word	0x08004bd1
 8004b74:	08004ba7 	.word	0x08004ba7
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bb5 	.word	0x08004bb5
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bc3 	.word	0x08004bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f992 	bl	8004ec8 <TIM_OC1_SetConfig>
      break;
 8004ba4:	e017      	b.n	8004bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f9f1 	bl	8004f94 <TIM_OC2_SetConfig>
      break;
 8004bb2:	e010      	b.n	8004bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fa56 	bl	800506c <TIM_OC3_SetConfig>
      break;
 8004bc0:	e009      	b.n	8004bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fab9 	bl	8005140 <TIM_OC4_SetConfig>
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b4      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x186>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x172>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa6>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x11a>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b50      	cmp	r3, #80	; 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x13a>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fb19 	bl	80052d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fb02 	bl	80052d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fa76 	bl	80051e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	; 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 facf 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fa95 	bl	800523e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	; 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fabf 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fa56 	bl	80051e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 faaf 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 faa6 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a34      	ldr	r2, [pc, #208]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a31      	ldr	r2, [pc, #196]	; (8004eb0 <TIM_Base_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <TIM_Base_SetConfig+0xec>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <TIM_Base_SetConfig+0xe8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <TIM_Base_SetConfig+0xec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <TIM_OC1_SetConfig+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10c      	bne.n	8004f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0308 	bic.w	r3, r3, #8
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <TIM_OC1_SetConfig+0xc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40010000 	.word	0x40010000

08004f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0210 	bic.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0320 	bic.w	r3, r3, #32
 8004fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <TIM_OC2_SetConfig+0xd4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10d      	bne.n	8005010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC2_SetConfig+0xd4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d113      	bne.n	8005040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000

0800506c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	; (800513c <TIM_OC3_SetConfig+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10d      	bne.n	80050e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <TIM_OC3_SetConfig+0xd0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40010000 	.word	0x40010000

08005140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800518a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <TIM_OC4_SetConfig+0x9c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000

080051e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 030a 	bic.w	r3, r3, #10
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523e:	b480      	push	{r7}
 8005240:	b087      	sub	sp, #28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0210 	bic.w	r2, r3, #16
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	031b      	lsls	r3, r3, #12
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f043 0307 	orr.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2201      	movs	r2, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	43db      	mvns	r3, r3
 8005336:	401a      	ands	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e050      	b.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d018      	beq.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c4:	d013      	beq.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00e      	beq.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a15      	ldr	r2, [pc, #84]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d004      	beq.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a13      	ldr	r2, [pc, #76]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d10c      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40010000 	.word	0x40010000
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00
 8005438:	40014000 	.word	0x40014000

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e03f      	b.n	80054f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fd f8e6 	bl	800265c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fe49 	bl	8006140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e021      	b.n	8005554 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005526:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fd f959 	bl	80027e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d17c      	bne.n	8005676 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Transmit+0x2c>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e075      	b.n	8005678 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_UART_Transmit+0x3e>
 8005596:	2302      	movs	r3, #2
 8005598:	e06e      	b.n	8005678 <HAL_UART_Transmit+0x11c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2221      	movs	r2, #33	; 0x21
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b0:	f7fd fb14 	bl	8002bdc <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d108      	bne.n	80055de <HAL_UART_Transmit+0x82>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e003      	b.n	80055e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055ee:	e02a      	b.n	8005646 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2180      	movs	r1, #128	; 0x80
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fb5a 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e036      	b.n	8005678 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800561e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	3302      	adds	r3, #2
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e007      	b.n	8005638 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1cf      	bne.n	80055f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fb2a 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e006      	b.n	8005678 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
  }
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	d130      	bne.n	80056fc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_UART_Transmit_IT+0x26>
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e029      	b.n	80056fe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Transmit_IT+0x38>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e022      	b.n	80056fe <HAL_UART_Transmit_IT+0x7e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2221      	movs	r2, #33	; 0x21
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	4613      	mov	r3, r2
 8005716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b20      	cmp	r3, #32
 8005722:	d11d      	bne.n	8005760 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Receive_IT+0x26>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e016      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive_IT+0x38>
 800573e:	2302      	movs	r3, #2
 8005740:	e00f      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	461a      	mov	r2, r3
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb1a 	bl	8005d90 <UART_Start_Receive_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	e000      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b0ba      	sub	sp, #232	; 0xe8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005798:	2300      	movs	r3, #0
 800579a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_UART_IRQHandler+0x66>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fbfd 	bl	8005fca <UART_Receive_IT>
      return;
 80057d0:	e256      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80de 	beq.w	8005998 <HAL_UART_IRQHandler+0x22c>
 80057dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80d1 	beq.w	8005998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xae>
 8005802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0201 	orr.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xd2>
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f043 0202 	orr.w	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_UART_IRQHandler+0xf6>
 800584a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0204 	orr.w	r2, r3, #4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_UART_IRQHandler+0x126>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0208 	orr.w	r2, r3, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 81ed 	beq.w	8005c76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_UART_IRQHandler+0x14e>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fb88 	bl	8005fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <HAL_UART_IRQHandler+0x17a>
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04f      	beq.n	8005986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa90 	bl	8005e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d141      	bne.n	800597e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3314      	adds	r3, #20
 8005900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800592a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800593e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d9      	bne.n	80058fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4a7d      	ldr	r2, [pc, #500]	; (8005b48 <HAL_UART_IRQHandler+0x3dc>)
 8005954:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd fb21 	bl	8002fa2 <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00e      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc fb66 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00a      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc fb62 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e006      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc fb5e 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005992:	e170      	b.n	8005c76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	bf00      	nop
    return;
 8005996:	e16e      	b.n	8005c76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	2b01      	cmp	r3, #1
 800599e:	f040 814a 	bne.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8143 	beq.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 813c 	beq.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	f040 80b4 	bne.w	8005b4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8140 	beq.w	8005c7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f080 8139 	bcs.w	8005c7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	f000 8088 	beq.w	8005b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1d9      	bne.n	8005a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e1      	bne.n	8005a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e3      	bne.n	8005aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fd f9ca 	bl	8002ec2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8ac 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b44:	e099      	b.n	8005c7a <HAL_UART_IRQHandler+0x50e>
 8005b46:	bf00      	nop
 8005b48:	08005ed3 	.word	0x08005ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 808b 	beq.w	8005c7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8086 	beq.w	8005c7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b96:	647a      	str	r2, [r7, #68]	; 0x44
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bce:	633a      	str	r2, [r7, #48]	; 0x30
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0310 	bic.w	r3, r3, #16
 8005c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e3      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f834 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c34:	e023      	b.n	8005c7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_UART_IRQHandler+0x4ea>
 8005c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f953 	bl	8005efa <UART_Transmit_IT>
    return;
 8005c54:	e014      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00e      	beq.n	8005c80 <HAL_UART_IRQHandler+0x514>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f993 	bl	8005f9a <UART_EndTransmit_IT>
    return;
 8005c74:	e004      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
    return;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
      return;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
      return;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	37e8      	adds	r7, #232	; 0xe8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop

08005c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b090      	sub	sp, #64	; 0x40
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc4:	e050      	b.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d04c      	beq.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd4:	f7fc ff82 	bl	8002bdc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d241      	bcs.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d04:	637a      	str	r2, [r7, #52]	; 0x34
 8005d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	613b      	str	r3, [r7, #16]
   return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d38:	623a      	str	r2, [r7, #32]
 8005d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e00f      	b.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d09f      	beq.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3740      	adds	r7, #64	; 0x40
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2222      	movs	r2, #34	; 0x22
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ddc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0220 	orr.w	r2, r2, #32
 8005dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b095      	sub	sp, #84	; 0x54
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e34:	643a      	str	r2, [r7, #64]	; 0x40
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d119      	bne.n	8005eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ea4:	61ba      	str	r2, [r7, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ec6:	bf00      	nop
 8005ec8:	3754      	adds	r7, #84	; 0x54
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7fc f8ab 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b21      	cmp	r3, #33	; 0x21
 8005f0c:	d13e      	bne.n	8005f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d114      	bne.n	8005f42 <UART_Transmit_IT+0x48>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]
 8005f40:	e008      	b.n	8005f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6211      	str	r1, [r2, #32]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fe64 	bl	8005c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b08c      	sub	sp, #48	; 0x30
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b22      	cmp	r3, #34	; 0x22
 8005fdc:	f040 80ab 	bne.w	8006136 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d117      	bne.n	800601a <UART_Receive_IT+0x50>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d113      	bne.n	800601a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006008:	b29a      	uxth	r2, r3
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	1c9a      	adds	r2, r3, #2
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
 8006018:	e026      	b.n	8006068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602c:	d007      	beq.n	800603e <UART_Receive_IT+0x74>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10a      	bne.n	800604c <UART_Receive_IT+0x82>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e008      	b.n	800605e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	b2da      	uxtb	r2, r3
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	4619      	mov	r1, r3
 8006076:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006078:	2b00      	cmp	r3, #0
 800607a:	d15a      	bne.n	8006132 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0220 	bic.w	r2, r2, #32
 800608a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d135      	bne.n	8006128 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	613b      	str	r3, [r7, #16]
   return(result);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	623a      	str	r2, [r7, #32]
 80060e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	69f9      	ldr	r1, [r7, #28]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b10      	cmp	r3, #16
 8006102:	d10a      	bne.n	800611a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fdbb 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
 8006126:	e002      	b.n	800612e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb ffe1 	bl	80020f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e002      	b.n	8006138 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3730      	adds	r7, #48	; 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006144:	b0c0      	sub	sp, #256	; 0x100
 8006146:	af00      	add	r7, sp, #0
 8006148:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	68d9      	ldr	r1, [r3, #12]
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	ea40 0301 	orr.w	r3, r0, r1
 8006168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	431a      	orrs	r2, r3
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	431a      	orrs	r2, r3
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006198:	f021 010c 	bic.w	r1, r1, #12
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061a6:	430b      	orrs	r3, r1
 80061a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ba:	6999      	ldr	r1, [r3, #24]
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	ea40 0301 	orr.w	r3, r0, r1
 80061c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b8f      	ldr	r3, [pc, #572]	; (800640c <UART_SetConfig+0x2cc>)
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d005      	beq.n	80061e0 <UART_SetConfig+0xa0>
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b8d      	ldr	r3, [pc, #564]	; (8006410 <UART_SetConfig+0x2d0>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d104      	bne.n	80061ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061e0:	f7fd fde2 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 80061e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061e8:	e003      	b.n	80061f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ea:	f7fd fdc9 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80061ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fc:	f040 810c 	bne.w	8006418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006204:	2200      	movs	r2, #0
 8006206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800620a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800620e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	1891      	adds	r1, r2, r2
 8006218:	65b9      	str	r1, [r7, #88]	; 0x58
 800621a:	415b      	adcs	r3, r3
 800621c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800621e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006222:	4621      	mov	r1, r4
 8006224:	eb12 0801 	adds.w	r8, r2, r1
 8006228:	4629      	mov	r1, r5
 800622a:	eb43 0901 	adc.w	r9, r3, r1
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800623a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800623e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006242:	4690      	mov	r8, r2
 8006244:	4699      	mov	r9, r3
 8006246:	4623      	mov	r3, r4
 8006248:	eb18 0303 	adds.w	r3, r8, r3
 800624c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006250:	462b      	mov	r3, r5
 8006252:	eb49 0303 	adc.w	r3, r9, r3
 8006256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006266:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800626a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800626e:	460b      	mov	r3, r1
 8006270:	18db      	adds	r3, r3, r3
 8006272:	653b      	str	r3, [r7, #80]	; 0x50
 8006274:	4613      	mov	r3, r2
 8006276:	eb42 0303 	adc.w	r3, r2, r3
 800627a:	657b      	str	r3, [r7, #84]	; 0x54
 800627c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006284:	f7fa f814 	bl	80002b0 <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4b61      	ldr	r3, [pc, #388]	; (8006414 <UART_SetConfig+0x2d4>)
 800628e:	fba3 2302 	umull	r2, r3, r3, r2
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	011c      	lsls	r4, r3, #4
 8006296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629a:	2200      	movs	r2, #0
 800629c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	1891      	adds	r1, r2, r2
 80062ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80062b0:	415b      	adcs	r3, r3
 80062b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062b8:	4641      	mov	r1, r8
 80062ba:	eb12 0a01 	adds.w	sl, r2, r1
 80062be:	4649      	mov	r1, r9
 80062c0:	eb43 0b01 	adc.w	fp, r3, r1
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d8:	4692      	mov	sl, r2
 80062da:	469b      	mov	fp, r3
 80062dc:	4643      	mov	r3, r8
 80062de:	eb1a 0303 	adds.w	r3, sl, r3
 80062e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062e6:	464b      	mov	r3, r9
 80062e8:	eb4b 0303 	adc.w	r3, fp, r3
 80062ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006304:	460b      	mov	r3, r1
 8006306:	18db      	adds	r3, r3, r3
 8006308:	643b      	str	r3, [r7, #64]	; 0x40
 800630a:	4613      	mov	r3, r2
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
 8006312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800631a:	f7f9 ffc9 	bl	80002b0 <__aeabi_uldivmod>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4611      	mov	r1, r2
 8006324:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <UART_SetConfig+0x2d4>)
 8006326:	fba3 2301 	umull	r2, r3, r3, r1
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2264      	movs	r2, #100	; 0x64
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	1acb      	subs	r3, r1, r3
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800633a:	4b36      	ldr	r3, [pc, #216]	; (8006414 <UART_SetConfig+0x2d4>)
 800633c:	fba3 2302 	umull	r2, r3, r3, r2
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006348:	441c      	add	r4, r3
 800634a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634e:	2200      	movs	r2, #0
 8006350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006354:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	1891      	adds	r1, r2, r2
 8006362:	63b9      	str	r1, [r7, #56]	; 0x38
 8006364:	415b      	adcs	r3, r3
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800636c:	4641      	mov	r1, r8
 800636e:	1851      	adds	r1, r2, r1
 8006370:	6339      	str	r1, [r7, #48]	; 0x30
 8006372:	4649      	mov	r1, r9
 8006374:	414b      	adcs	r3, r1
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006384:	4659      	mov	r1, fp
 8006386:	00cb      	lsls	r3, r1, #3
 8006388:	4651      	mov	r1, sl
 800638a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638e:	4651      	mov	r1, sl
 8006390:	00ca      	lsls	r2, r1, #3
 8006392:	4610      	mov	r0, r2
 8006394:	4619      	mov	r1, r3
 8006396:	4603      	mov	r3, r0
 8006398:	4642      	mov	r2, r8
 800639a:	189b      	adds	r3, r3, r2
 800639c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063a0:	464b      	mov	r3, r9
 80063a2:	460a      	mov	r2, r1
 80063a4:	eb42 0303 	adc.w	r3, r2, r3
 80063a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063c0:	460b      	mov	r3, r1
 80063c2:	18db      	adds	r3, r3, r3
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c6:	4613      	mov	r3, r2
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063d6:	f7f9 ff6b 	bl	80002b0 <__aeabi_uldivmod>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <UART_SetConfig+0x2d4>)
 80063e0:	fba3 1302 	umull	r1, r3, r3, r2
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	2164      	movs	r1, #100	; 0x64
 80063e8:	fb01 f303 	mul.w	r3, r1, r3
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	3332      	adds	r3, #50	; 0x32
 80063f2:	4a08      	ldr	r2, [pc, #32]	; (8006414 <UART_SetConfig+0x2d4>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	f003 0207 	and.w	r2, r3, #7
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4422      	add	r2, r4
 8006406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006408:	e105      	b.n	8006616 <UART_SetConfig+0x4d6>
 800640a:	bf00      	nop
 800640c:	40011000 	.word	0x40011000
 8006410:	40011400 	.word	0x40011400
 8006414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800642a:	4642      	mov	r2, r8
 800642c:	464b      	mov	r3, r9
 800642e:	1891      	adds	r1, r2, r2
 8006430:	6239      	str	r1, [r7, #32]
 8006432:	415b      	adcs	r3, r3
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
 8006436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800643a:	4641      	mov	r1, r8
 800643c:	1854      	adds	r4, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb43 0501 	adc.w	r5, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	00eb      	lsls	r3, r5, #3
 800644e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006452:	00e2      	lsls	r2, r4, #3
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	4643      	mov	r3, r8
 800645a:	18e3      	adds	r3, r4, r3
 800645c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006460:	464b      	mov	r3, r9
 8006462:	eb45 0303 	adc.w	r3, r5, r3
 8006466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006486:	4629      	mov	r1, r5
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	4621      	mov	r1, r4
 800648c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006490:	4621      	mov	r1, r4
 8006492:	008a      	lsls	r2, r1, #2
 8006494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006498:	f7f9 ff0a 	bl	80002b0 <__aeabi_uldivmod>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4b60      	ldr	r3, [pc, #384]	; (8006624 <UART_SetConfig+0x4e4>)
 80064a2:	fba3 2302 	umull	r2, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	011c      	lsls	r4, r3, #4
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	1891      	adds	r1, r2, r2
 80064c2:	61b9      	str	r1, [r7, #24]
 80064c4:	415b      	adcs	r3, r3
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064cc:	4641      	mov	r1, r8
 80064ce:	1851      	adds	r1, r2, r1
 80064d0:	6139      	str	r1, [r7, #16]
 80064d2:	4649      	mov	r1, r9
 80064d4:	414b      	adcs	r3, r1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e4:	4659      	mov	r1, fp
 80064e6:	00cb      	lsls	r3, r1, #3
 80064e8:	4651      	mov	r1, sl
 80064ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ee:	4651      	mov	r1, sl
 80064f0:	00ca      	lsls	r2, r1, #3
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	4642      	mov	r2, r8
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006500:	464b      	mov	r3, r9
 8006502:	460a      	mov	r2, r1
 8006504:	eb42 0303 	adc.w	r3, r2, r3
 8006508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	67bb      	str	r3, [r7, #120]	; 0x78
 8006516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006524:	4649      	mov	r1, r9
 8006526:	008b      	lsls	r3, r1, #2
 8006528:	4641      	mov	r1, r8
 800652a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800652e:	4641      	mov	r1, r8
 8006530:	008a      	lsls	r2, r1, #2
 8006532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006536:	f7f9 febb 	bl	80002b0 <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4b39      	ldr	r3, [pc, #228]	; (8006624 <UART_SetConfig+0x4e4>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a34      	ldr	r2, [pc, #208]	; (8006624 <UART_SetConfig+0x4e4>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800655e:	441c      	add	r4, r3
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006564:	2200      	movs	r2, #0
 8006566:	673b      	str	r3, [r7, #112]	; 0x70
 8006568:	677a      	str	r2, [r7, #116]	; 0x74
 800656a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	1891      	adds	r1, r2, r2
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	415b      	adcs	r3, r3
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657e:	4641      	mov	r1, r8
 8006580:	1851      	adds	r1, r2, r1
 8006582:	6039      	str	r1, [r7, #0]
 8006584:	4649      	mov	r1, r9
 8006586:	414b      	adcs	r3, r1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006596:	4659      	mov	r1, fp
 8006598:	00cb      	lsls	r3, r1, #3
 800659a:	4651      	mov	r1, sl
 800659c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a0:	4651      	mov	r1, sl
 80065a2:	00ca      	lsls	r2, r1, #3
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	4642      	mov	r2, r8
 80065ac:	189b      	adds	r3, r3, r2
 80065ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80065b0:	464b      	mov	r3, r9
 80065b2:	460a      	mov	r2, r1
 80065b4:	eb42 0303 	adc.w	r3, r2, r3
 80065b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	663b      	str	r3, [r7, #96]	; 0x60
 80065c4:	667a      	str	r2, [r7, #100]	; 0x64
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065d2:	4649      	mov	r1, r9
 80065d4:	008b      	lsls	r3, r1, #2
 80065d6:	4641      	mov	r1, r8
 80065d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065dc:	4641      	mov	r1, r8
 80065de:	008a      	lsls	r2, r1, #2
 80065e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065e4:	f7f9 fe64 	bl	80002b0 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <UART_SetConfig+0x4e4>)
 80065ee:	fba3 1302 	umull	r1, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2164      	movs	r1, #100	; 0x64
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	3332      	adds	r3, #50	; 0x32
 8006600:	4a08      	ldr	r2, [pc, #32]	; (8006624 <UART_SetConfig+0x4e4>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f003 020f 	and.w	r2, r3, #15
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4422      	add	r2, r4
 8006614:	609a      	str	r2, [r3, #8]
}
 8006616:	bf00      	nop
 8006618:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	51eb851f 	.word	0x51eb851f

08006628 <NOP>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void NOP(struct WIFI *a)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <MUX>:
void MUX(struct WIFI *a)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2204      	movs	r2, #4
 80066b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <IPDef>:
void IPDef(struct WIFI *a)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2205      	movs	r2, #5
 80066e4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2206      	movs	r2, #6
 800673c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2208      	movs	r2, #8
 8006768:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2209      	movs	r2, #9
 8006794:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2207      	movs	r2, #7
 80067c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006976:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800697a:	af06      	add	r7, sp, #24
 800697c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006984:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006986:	2300      	movs	r3, #0
 8006988:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006992:	2300      	movs	r3, #0
 8006994:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80069a4:	2320      	movs	r3, #32
 80069a6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80069aa:	2322      	movs	r3, #34	; 0x22
 80069ac:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80069b0:	4b71      	ldr	r3, [pc, #452]	; (8006b78 <AT_ESP8266_ND+0x204>)
 80069b2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80069b6:	4a71      	ldr	r2, [pc, #452]	; (8006b7c <AT_ESP8266_ND+0x208>)
 80069b8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	4611      	mov	r1, r2
 80069c0:	8019      	strh	r1, [r3, #0]
 80069c2:	3302      	adds	r3, #2
 80069c4:	0c12      	lsrs	r2, r2, #16
 80069c6:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80069c8:	f642 4322 	movw	r3, #11298	; 0x2c22
 80069cc:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80069d0:	f640 230d 	movw	r3, #2573	; 0xa0d
 80069d4:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80069e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7f9 fbf6 	bl	80001f4 <strlen>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006a1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7f9 fbdb 	bl	80001f4 <strlen>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006aa6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006aaa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006aae:	6809      	ldr	r1, [r1, #0]
 8006ab0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	9604      	str	r6, [sp, #16]
 8006ab8:	9103      	str	r1, [sp, #12]
 8006aba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006abe:	9102      	str	r1, [sp, #8]
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	4a2e      	ldr	r2, [pc, #184]	; (8006b80 <AT_ESP8266_ND+0x20c>)
 8006ac8:	4621      	mov	r1, r4
 8006aca:	f007 fd87 	bl	800e5dc <FT_String_ND>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f040 812a 	bne.w	8006d2a <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006ae6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d145      	bne.n	8006b84 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b30:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b34:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b3e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b42:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b46:	6809      	ldr	r1, [r1, #0]
 8006b48:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b4c:	2604      	movs	r6, #4
 8006b4e:	9604      	str	r6, [sp, #16]
 8006b50:	9103      	str	r1, [sp, #12]
 8006b52:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b56:	9102      	str	r1, [sp, #8]
 8006b58:	9201      	str	r2, [sp, #4]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <AT_ESP8266_ND+0x20c>)
 8006b60:	4621      	mov	r1, r4
 8006b62:	f007 fd3b 	bl	800e5dc <FT_String_ND>
 8006b66:	4602      	mov	r2, r0
 8006b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b76:	e044      	b.n	8006c02 <AT_ESP8266_ND+0x28e>
 8006b78:	00222c22 	.word	0x00222c22
 8006b7c:	0801088c 	.word	0x0801088c
 8006b80:	080106b4 	.word	0x080106b4
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bbc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bc0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006bca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bd2:	6809      	ldr	r1, [r1, #0]
 8006bd4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bd8:	2605      	movs	r6, #5
 8006bda:	9604      	str	r6, [sp, #16]
 8006bdc:	9103      	str	r1, [sp, #12]
 8006bde:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006be2:	9102      	str	r1, [sp, #8]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462b      	mov	r3, r5
 8006bea:	4ac1      	ldr	r2, [pc, #772]	; (8006ef0 <AT_ESP8266_ND+0x57c>)
 8006bec:	4621      	mov	r1, r4
 8006bee:	f007 fcf5 	bl	800e5dc <FT_String_ND>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006c02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d15a      	bne.n	8006cca <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2263      	movs	r2, #99	; 0x63
 8006c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c6a:	2341      	movs	r3, #65	; 0x41
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f008 f81a 	bl	800eca8 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c90:	2341      	movs	r3, #65	; 0x41
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	2205      	movs	r2, #5
 8006c98:	f008 f806 	bl	800eca8 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d126      	bne.n	8006d2a <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2237      	movs	r2, #55	; 0x37
 8006ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2204      	movs	r2, #4
 8006d36:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d88:	6809      	ldr	r1, [r1, #0]
 8006d8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d8e:	2600      	movs	r6, #0
 8006d90:	9604      	str	r6, [sp, #16]
 8006d92:	9103      	str	r1, [sp, #12]
 8006d94:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d98:	9102      	str	r1, [sp, #8]
 8006d9a:	9201      	str	r2, [sp, #4]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	462b      	mov	r3, r5
 8006da0:	4a54      	ldr	r2, [pc, #336]	; (8006ef4 <AT_ESP8266_ND+0x580>)
 8006da2:	4621      	mov	r1, r4
 8006da4:	f007 fc1a 	bl	800e5dc <FT_String_ND>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	f040 8334 	bne.w	8007418 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2206      	movs	r2, #6
 8006dc2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006dd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dfe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e14:	6809      	ldr	r1, [r1, #0]
 8006e16:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	9604      	str	r6, [sp, #16]
 8006e1e:	9103      	str	r1, [sp, #12]
 8006e20:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e24:	9102      	str	r1, [sp, #8]
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <AT_ESP8266_ND+0x584>)
 8006e2e:	4621      	mov	r1, r4
 8006e30:	f007 fbd4 	bl	800e5dc <FT_String_ND>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d113      	bne.n	8006e62 <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e3a:	2313      	movs	r3, #19
 8006e3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006e40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006e5e:	f001 b981 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006eaa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eb8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ebc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ec0:	6809      	ldr	r1, [r1, #0]
 8006ec2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	9604      	str	r6, [sp, #16]
 8006eca:	9103      	str	r1, [sp, #12]
 8006ecc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ed0:	9102      	str	r1, [sp, #8]
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	4a08      	ldr	r2, [pc, #32]	; (8006efc <AT_ESP8266_ND+0x588>)
 8006eda:	4621      	mov	r1, r4
 8006edc:	f007 fb7e 	bl	800e5dc <FT_String_ND>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d10c      	bne.n	8006f00 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006ee6:	230d      	movs	r3, #13
 8006ee8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006eec:	f001 b93a 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
 8006ef0:	080106b4 	.word	0x080106b4
 8006ef4:	080106bc 	.word	0x080106bc
 8006ef8:	080106c4 	.word	0x080106c4
 8006efc:	080106cc 	.word	0x080106cc
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006f10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f48:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f4c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f56:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f5a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f5e:	6809      	ldr	r1, [r1, #0]
 8006f60:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f64:	2600      	movs	r6, #0
 8006f66:	9604      	str	r6, [sp, #16]
 8006f68:	9103      	str	r1, [sp, #12]
 8006f6a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f6e:	9102      	str	r1, [sp, #8]
 8006f70:	9201      	str	r2, [sp, #4]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	462b      	mov	r3, r5
 8006f76:	4ab7      	ldr	r2, [pc, #732]	; (8007254 <AT_ESP8266_ND+0x8e0>)
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f007 fb2f 	bl	800e5dc <FT_String_ND>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d104      	bne.n	8006f8e <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006f84:	231c      	movs	r3, #28
 8006f86:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f8a:	f001 b8eb 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	220f      	movs	r2, #15
 8006f9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fd6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fe4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fe8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fec:	6809      	ldr	r1, [r1, #0]
 8006fee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	9604      	str	r6, [sp, #16]
 8006ff6:	9103      	str	r1, [sp, #12]
 8006ff8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ffc:	9102      	str	r1, [sp, #8]
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	462b      	mov	r3, r5
 8007004:	4a94      	ldr	r2, [pc, #592]	; (8007258 <AT_ESP8266_ND+0x8e4>)
 8007006:	4621      	mov	r1, r4
 8007008:	f007 fae8 	bl	800e5dc <FT_String_ND>
 800700c:	4603      	mov	r3, r0
 800700e:	2b01      	cmp	r3, #1
 8007010:	d104      	bne.n	800701c <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8007012:	2317      	movs	r3, #23
 8007014:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007018:	f001 b8a4 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 800701c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2203      	movs	r2, #3
 8007028:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 800702c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800703a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007064:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007068:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007072:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007076:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800707a:	6809      	ldr	r1, [r1, #0]
 800707c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007080:	2600      	movs	r6, #0
 8007082:	9604      	str	r6, [sp, #16]
 8007084:	9103      	str	r1, [sp, #12]
 8007086:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800708a:	9102      	str	r1, [sp, #8]
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	462b      	mov	r3, r5
 8007092:	4a72      	ldr	r2, [pc, #456]	; (800725c <AT_ESP8266_ND+0x8e8>)
 8007094:	4621      	mov	r1, r4
 8007096:	f007 faa1 	bl	800e5dc <FT_String_ND>
 800709a:	4603      	mov	r3, r0
 800709c:	2b01      	cmp	r3, #1
 800709e:	d104      	bne.n	80070aa <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 80070a0:	2314      	movs	r3, #20
 80070a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070a6:	f001 b85d 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 80070aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	220c      	movs	r2, #12
 80070b6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80070ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070f2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070f6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007100:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007104:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007108:	6809      	ldr	r1, [r1, #0]
 800710a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800710e:	2600      	movs	r6, #0
 8007110:	9604      	str	r6, [sp, #16]
 8007112:	9103      	str	r1, [sp, #12]
 8007114:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007118:	9102      	str	r1, [sp, #8]
 800711a:	9201      	str	r2, [sp, #4]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	462b      	mov	r3, r5
 8007120:	4a4f      	ldr	r2, [pc, #316]	; (8007260 <AT_ESP8266_ND+0x8ec>)
 8007122:	4621      	mov	r1, r4
 8007124:	f007 fa5a 	bl	800e5dc <FT_String_ND>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d104      	bne.n	8007138 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800712e:	2315      	movs	r3, #21
 8007130:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007134:	f001 b816 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	220b      	movs	r2, #11
 8007144:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800714c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800715a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007172:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007176:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007180:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007184:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800718e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007192:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007196:	6809      	ldr	r1, [r1, #0]
 8007198:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800719c:	2600      	movs	r6, #0
 800719e:	9604      	str	r6, [sp, #16]
 80071a0:	9103      	str	r1, [sp, #12]
 80071a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071a6:	9102      	str	r1, [sp, #8]
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462b      	mov	r3, r5
 80071ae:	4a2d      	ldr	r2, [pc, #180]	; (8007264 <AT_ESP8266_ND+0x8f0>)
 80071b0:	4621      	mov	r1, r4
 80071b2:	f007 fa13 	bl	800e5dc <FT_String_ND>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d104      	bne.n	80071c6 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80071bc:	2309      	movs	r3, #9
 80071be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071c2:	f000 bfcf 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80071c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	220b      	movs	r2, #11
 80071d2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80071d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800720e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007212:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800721c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007220:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007224:	6809      	ldr	r1, [r1, #0]
 8007226:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800722a:	2600      	movs	r6, #0
 800722c:	9604      	str	r6, [sp, #16]
 800722e:	9103      	str	r1, [sp, #12]
 8007230:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007234:	9102      	str	r1, [sp, #8]
 8007236:	9201      	str	r2, [sp, #4]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	462b      	mov	r3, r5
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <AT_ESP8266_ND+0x8f4>)
 800723e:	4621      	mov	r1, r4
 8007240:	f007 f9cc 	bl	800e5dc <FT_String_ND>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d110      	bne.n	800726c <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 800724a:	2307      	movs	r3, #7
 800724c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007250:	f000 bf88 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
 8007254:	080106d8 	.word	0x080106d8
 8007258:	080106e4 	.word	0x080106e4
 800725c:	080106f4 	.word	0x080106f4
 8007260:	080106f8 	.word	0x080106f8
 8007264:	08010708 	.word	0x08010708
 8007268:	08010714 	.word	0x08010714
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 800726c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	220b      	movs	r2, #11
 8007278:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800727c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800728a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007298:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072b4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072b8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072c2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072c6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072ca:	6809      	ldr	r1, [r1, #0]
 80072cc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072d0:	2600      	movs	r6, #0
 80072d2:	9604      	str	r6, [sp, #16]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072da:	9102      	str	r1, [sp, #8]
 80072dc:	9201      	str	r2, [sp, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	462b      	mov	r3, r5
 80072e2:	4ab7      	ldr	r2, [pc, #732]	; (80075c0 <AT_ESP8266_ND+0xc4c>)
 80072e4:	4621      	mov	r1, r4
 80072e6:	f007 f979 	bl	800e5dc <FT_String_ND>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d104      	bne.n	80072fa <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80072f0:	2308      	movs	r3, #8
 80072f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072f6:	f000 bf35 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80072fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	220a      	movs	r2, #10
 8007306:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800730a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800730e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007342:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007346:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007350:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007354:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007358:	6809      	ldr	r1, [r1, #0]
 800735a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800735e:	2600      	movs	r6, #0
 8007360:	9604      	str	r6, [sp, #16]
 8007362:	9103      	str	r1, [sp, #12]
 8007364:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007368:	9102      	str	r1, [sp, #8]
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	462b      	mov	r3, r5
 8007370:	4a94      	ldr	r2, [pc, #592]	; (80075c4 <AT_ESP8266_ND+0xc50>)
 8007372:	4621      	mov	r1, r4
 8007374:	f007 f932 	bl	800e5dc <FT_String_ND>
 8007378:	4603      	mov	r3, r0
 800737a:	2b01      	cmp	r3, #1
 800737c:	d104      	bne.n	8007388 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800737e:	231b      	movs	r3, #27
 8007380:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007384:	f000 beee 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2207      	movs	r2, #7
 8007394:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073ec:	2600      	movs	r6, #0
 80073ee:	9604      	str	r6, [sp, #16]
 80073f0:	9103      	str	r1, [sp, #12]
 80073f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073f6:	9102      	str	r1, [sp, #8]
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	462b      	mov	r3, r5
 80073fe:	4a72      	ldr	r2, [pc, #456]	; (80075c8 <AT_ESP8266_ND+0xc54>)
 8007400:	4621      	mov	r1, r4
 8007402:	f007 f8eb 	bl	800e5dc <FT_String_ND>
 8007406:	4603      	mov	r3, r0
 8007408:	2b01      	cmp	r3, #1
 800740a:	f040 86ab 	bne.w	8008164 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 800740e:	230f      	movs	r3, #15
 8007410:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007414:	f000 bea6 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800741c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2207      	movs	r2, #7
 8007424:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800742c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007452:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007456:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007460:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007464:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800746e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007472:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007476:	6809      	ldr	r1, [r1, #0]
 8007478:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800747c:	2600      	movs	r6, #0
 800747e:	9604      	str	r6, [sp, #16]
 8007480:	9103      	str	r1, [sp, #12]
 8007482:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007486:	9102      	str	r1, [sp, #8]
 8007488:	9201      	str	r2, [sp, #4]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462b      	mov	r3, r5
 800748e:	4a4f      	ldr	r2, [pc, #316]	; (80075cc <AT_ESP8266_ND+0xc58>)
 8007490:	4621      	mov	r1, r4
 8007492:	f007 f8a3 	bl	800e5dc <FT_String_ND>
 8007496:	4603      	mov	r3, r0
 8007498:	2b01      	cmp	r3, #1
 800749a:	f040 8326 	bne.w	8007aea <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800749e:	2302      	movs	r3, #2
 80074a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 80074a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2208      	movs	r2, #8
 80074b0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 80074b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007502:	6809      	ldr	r1, [r1, #0]
 8007504:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007508:	2600      	movs	r6, #0
 800750a:	9604      	str	r6, [sp, #16]
 800750c:	9103      	str	r1, [sp, #12]
 800750e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007512:	9102      	str	r1, [sp, #8]
 8007514:	9201      	str	r2, [sp, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	462b      	mov	r3, r5
 800751a:	4a2d      	ldr	r2, [pc, #180]	; (80075d0 <AT_ESP8266_ND+0xc5c>)
 800751c:	4621      	mov	r1, r4
 800751e:	f007 f85d 	bl	800e5dc <FT_String_ND>
 8007522:	4603      	mov	r3, r0
 8007524:	2b01      	cmp	r3, #1
 8007526:	d104      	bne.n	8007532 <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007528:	2306      	movs	r3, #6
 800752a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800752e:	f000 be19 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2215      	movs	r2, #21
 800753e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007546:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800755e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800756c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800757a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800757e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007588:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800758c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007590:	6809      	ldr	r1, [r1, #0]
 8007592:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007596:	2600      	movs	r6, #0
 8007598:	9604      	str	r6, [sp, #16]
 800759a:	9103      	str	r1, [sp, #12]
 800759c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075a0:	9102      	str	r1, [sp, #8]
 80075a2:	9201      	str	r2, [sp, #4]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462b      	mov	r3, r5
 80075a8:	4a0a      	ldr	r2, [pc, #40]	; (80075d4 <AT_ESP8266_ND+0xc60>)
 80075aa:	4621      	mov	r1, r4
 80075ac:	f007 f816 	bl	800e5dc <FT_String_ND>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d110      	bne.n	80075d8 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80075b6:	230e      	movs	r3, #14
 80075b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075bc:	f000 bdd2 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
 80075c0:	08010720 	.word	0x08010720
 80075c4:	0801072c 	.word	0x0801072c
 80075c8:	08010738 	.word	0x08010738
 80075cc:	08010740 	.word	0x08010740
 80075d0:	08010748 	.word	0x08010748
 80075d4:	08010754 	.word	0x08010754
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80075d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	220c      	movs	r2, #12
 80075e4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80075e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007616:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007620:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007624:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800762e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007632:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007636:	6809      	ldr	r1, [r1, #0]
 8007638:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800763c:	2600      	movs	r6, #0
 800763e:	9604      	str	r6, [sp, #16]
 8007640:	9103      	str	r1, [sp, #12]
 8007642:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007646:	9102      	str	r1, [sp, #8]
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	462b      	mov	r3, r5
 800764e:	4ab7      	ldr	r2, [pc, #732]	; (800792c <AT_ESP8266_ND+0xfb8>)
 8007650:	4621      	mov	r1, r4
 8007652:	f006 ffc3 	bl	800e5dc <FT_String_ND>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d104      	bne.n	8007666 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 800765c:	2316      	movs	r3, #22
 800765e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007662:	f000 bd7f 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	220b      	movs	r2, #11
 8007672:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076c4:	6809      	ldr	r1, [r1, #0]
 80076c6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076ca:	2600      	movs	r6, #0
 80076cc:	9604      	str	r6, [sp, #16]
 80076ce:	9103      	str	r1, [sp, #12]
 80076d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076d4:	9102      	str	r1, [sp, #8]
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	462b      	mov	r3, r5
 80076dc:	4a94      	ldr	r2, [pc, #592]	; (8007930 <AT_ESP8266_ND+0xfbc>)
 80076de:	4621      	mov	r1, r4
 80076e0:	f006 ff7c 	bl	800e5dc <FT_String_ND>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d104      	bne.n	80076f4 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80076ea:	231a      	movs	r3, #26
 80076ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076f0:	f000 bd38 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80076f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2211      	movs	r2, #17
 8007700:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800772e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800773c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007740:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800774a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800774e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007752:	6809      	ldr	r1, [r1, #0]
 8007754:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007758:	2600      	movs	r6, #0
 800775a:	9604      	str	r6, [sp, #16]
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007762:	9102      	str	r1, [sp, #8]
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	462b      	mov	r3, r5
 800776a:	4a72      	ldr	r2, [pc, #456]	; (8007934 <AT_ESP8266_ND+0xfc0>)
 800776c:	4621      	mov	r1, r4
 800776e:	f006 ff35 	bl	800e5dc <FT_String_ND>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d104      	bne.n	8007782 <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007778:	2311      	movs	r3, #17
 800777a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800777e:	f000 bcf1 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007786:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	220a      	movs	r2, #10
 800778e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e0:	6809      	ldr	r1, [r1, #0]
 80077e2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077e6:	2600      	movs	r6, #0
 80077e8:	9604      	str	r6, [sp, #16]
 80077ea:	9103      	str	r1, [sp, #12]
 80077ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077f0:	9102      	str	r1, [sp, #8]
 80077f2:	9201      	str	r2, [sp, #4]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	462b      	mov	r3, r5
 80077f8:	4a4f      	ldr	r2, [pc, #316]	; (8007938 <AT_ESP8266_ND+0xfc4>)
 80077fa:	4621      	mov	r1, r4
 80077fc:	f006 feee 	bl	800e5dc <FT_String_ND>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d104      	bne.n	8007810 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8007806:	231d      	movs	r3, #29
 8007808:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800780c:	f000 bcaa 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	220b      	movs	r2, #11
 800781c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800782e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007832:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800783c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800784a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007858:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800785c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007866:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800786a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800786e:	6809      	ldr	r1, [r1, #0]
 8007870:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007874:	2600      	movs	r6, #0
 8007876:	9604      	str	r6, [sp, #16]
 8007878:	9103      	str	r1, [sp, #12]
 800787a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800787e:	9102      	str	r1, [sp, #8]
 8007880:	9201      	str	r2, [sp, #4]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	462b      	mov	r3, r5
 8007886:	4a2d      	ldr	r2, [pc, #180]	; (800793c <AT_ESP8266_ND+0xfc8>)
 8007888:	4621      	mov	r1, r4
 800788a:	f006 fea7 	bl	800e5dc <FT_String_ND>
 800788e:	4603      	mov	r3, r0
 8007890:	2b01      	cmp	r3, #1
 8007892:	d104      	bne.n	800789e <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007894:	231e      	movs	r3, #30
 8007896:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800789a:	f000 bc63 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800789e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	220b      	movs	r2, #11
 80078aa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80078ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078fc:	6809      	ldr	r1, [r1, #0]
 80078fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007902:	2600      	movs	r6, #0
 8007904:	9604      	str	r6, [sp, #16]
 8007906:	9103      	str	r1, [sp, #12]
 8007908:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800790c:	9102      	str	r1, [sp, #8]
 800790e:	9201      	str	r2, [sp, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	462b      	mov	r3, r5
 8007914:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <AT_ESP8266_ND+0xfcc>)
 8007916:	4621      	mov	r1, r4
 8007918:	f006 fe60 	bl	800e5dc <FT_String_ND>
 800791c:	4603      	mov	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d110      	bne.n	8007944 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007922:	231f      	movs	r3, #31
 8007924:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007928:	f000 bc1c 	b.w	8008164 <AT_ESP8266_ND+0x17f0>
 800792c:	080106f8 	.word	0x080106f8
 8007930:	08010708 	.word	0x08010708
 8007934:	0801076c 	.word	0x0801076c
 8007938:	080106d8 	.word	0x080106d8
 800793c:	08010714 	.word	0x08010714
 8007940:	08010720 	.word	0x08010720
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007944:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007948:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2208      	movs	r2, #8
 8007950:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800797e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800798c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007990:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800799a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800799e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079a2:	6809      	ldr	r1, [r1, #0]
 80079a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079a8:	2600      	movs	r6, #0
 80079aa:	9604      	str	r6, [sp, #16]
 80079ac:	9103      	str	r1, [sp, #12]
 80079ae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079b2:	9102      	str	r1, [sp, #8]
 80079b4:	9201      	str	r2, [sp, #4]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	462b      	mov	r3, r5
 80079ba:	4ac4      	ldr	r2, [pc, #784]	; (8007ccc <AT_ESP8266_ND+0x1358>)
 80079bc:	4621      	mov	r1, r4
 80079be:	f006 fe0d 	bl	800e5dc <FT_String_ND>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d103      	bne.n	80079d0 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 80079c8:	2320      	movs	r3, #32
 80079ca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079ce:	e3c9      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 80079d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	220a      	movs	r2, #10
 80079dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80079e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a1c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a26:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a2a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a2e:	6809      	ldr	r1, [r1, #0]
 8007a30:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a34:	2600      	movs	r6, #0
 8007a36:	9604      	str	r6, [sp, #16]
 8007a38:	9103      	str	r1, [sp, #12]
 8007a3a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a3e:	9102      	str	r1, [sp, #8]
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	462b      	mov	r3, r5
 8007a46:	4aa2      	ldr	r2, [pc, #648]	; (8007cd0 <AT_ESP8266_ND+0x135c>)
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f006 fdc7 	bl	800e5dc <FT_String_ND>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d103      	bne.n	8007a5c <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007a54:	2321      	movs	r3, #33	; 0x21
 8007a56:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a5a:	e383      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2205      	movs	r2, #5
 8007a68:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aa4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aa8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ab2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ab6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007aba:	6809      	ldr	r1, [r1, #0]
 8007abc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	9604      	str	r6, [sp, #16]
 8007ac4:	9103      	str	r1, [sp, #12]
 8007ac6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007aca:	9102      	str	r1, [sp, #8]
 8007acc:	9201      	str	r2, [sp, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	4a80      	ldr	r2, [pc, #512]	; (8007cd4 <AT_ESP8266_ND+0x1360>)
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	f006 fd81 	bl	800e5dc <FT_String_ND>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f040 8341 	bne.w	8008164 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007ae2:	2322      	movs	r3, #34	; 0x22
 8007ae4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ae8:	e33c      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	220f      	movs	r2, #15
 8007af6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007afa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b32:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b36:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b40:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b44:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b48:	6809      	ldr	r1, [r1, #0]
 8007b4a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b4e:	2600      	movs	r6, #0
 8007b50:	9604      	str	r6, [sp, #16]
 8007b52:	9103      	str	r1, [sp, #12]
 8007b54:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b58:	9102      	str	r1, [sp, #8]
 8007b5a:	9201      	str	r2, [sp, #4]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	462b      	mov	r3, r5
 8007b60:	4a5d      	ldr	r2, [pc, #372]	; (8007cd8 <AT_ESP8266_ND+0x1364>)
 8007b62:	4621      	mov	r1, r4
 8007b64:	f006 fd3a 	bl	800e5dc <FT_String_ND>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d112      	bne.n	8007b94 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007b6e:	230a      	movs	r3, #10
 8007b70:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007b92:	e2e7      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2209      	movs	r2, #9
 8007ba0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007bb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bdc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007be0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bf2:	6809      	ldr	r1, [r1, #0]
 8007bf4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	9604      	str	r6, [sp, #16]
 8007bfc:	9103      	str	r1, [sp, #12]
 8007bfe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c02:	9102      	str	r1, [sp, #8]
 8007c04:	9201      	str	r2, [sp, #4]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	462b      	mov	r3, r5
 8007c0a:	4a34      	ldr	r2, [pc, #208]	; (8007cdc <AT_ESP8266_ND+0x1368>)
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	f006 fce5 	bl	800e5dc <FT_String_ND>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d112      	bne.n	8007c3e <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007c18:	2319      	movs	r3, #25
 8007c1a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007c3c:	e292      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2208      	movs	r2, #8
 8007c4a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c86:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c8a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c94:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c98:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c9c:	6809      	ldr	r1, [r1, #0]
 8007c9e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	9604      	str	r6, [sp, #16]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cac:	9102      	str	r1, [sp, #8]
 8007cae:	9201      	str	r2, [sp, #4]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <AT_ESP8266_ND+0x136c>)
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	f006 fc90 	bl	800e5dc <FT_String_ND>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d110      	bne.n	8007ce4 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cc8:	e24c      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
 8007cca:	bf00      	nop
 8007ccc:	08010780 	.word	0x08010780
 8007cd0:	0801072c 	.word	0x0801072c
 8007cd4:	0801078c 	.word	0x0801078c
 8007cd8:	08010794 	.word	0x08010794
 8007cdc:	080107a4 	.word	0x080107a4
 8007ce0:	08010748 	.word	0x08010748
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d30:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d3a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d3e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d42:	6809      	ldr	r1, [r1, #0]
 8007d44:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	9103      	str	r1, [sp, #12]
 8007d4e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d52:	9102      	str	r1, [sp, #8]
 8007d54:	9201      	str	r2, [sp, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4633      	mov	r3, r6
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4621      	mov	r1, r4
 8007d60:	f006 fc3c 	bl	800e5dc <FT_String_ND>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d112      	bne.n	8007d90 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 81f3 	beq.w	8008164 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007d7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007d8e:	e1e9      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	220d      	movs	r2, #13
 8007d9c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007dbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dd8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ddc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007de6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dee:	6809      	ldr	r1, [r1, #0]
 8007df0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007df4:	2600      	movs	r6, #0
 8007df6:	9604      	str	r6, [sp, #16]
 8007df8:	9103      	str	r1, [sp, #12]
 8007dfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007dfe:	9102      	str	r1, [sp, #8]
 8007e00:	9201      	str	r2, [sp, #4]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	462b      	mov	r3, r5
 8007e06:	4aaf      	ldr	r2, [pc, #700]	; (80080c4 <AT_ESP8266_ND+0x1750>)
 8007e08:	4621      	mov	r1, r4
 8007e0a:	f006 fbe7 	bl	800e5dc <FT_String_ND>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d112      	bne.n	8007e3a <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007e14:	2312      	movs	r3, #18
 8007e16:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007e38:	e194      	b.n	8008164 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	220d      	movs	r2, #13
 8007e46:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e82:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e86:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e90:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e94:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e98:	6809      	ldr	r1, [r1, #0]
 8007e9a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	9604      	str	r6, [sp, #16]
 8007ea2:	9103      	str	r1, [sp, #12]
 8007ea4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ea8:	9102      	str	r1, [sp, #8]
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462b      	mov	r3, r5
 8007eb0:	4a85      	ldr	r2, [pc, #532]	; (80080c8 <AT_ESP8266_ND+0x1754>)
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f006 fb92 	bl	800e5dc <FT_String_ND>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d112      	bne.n	8007ee4 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007edc:	230c      	movs	r3, #12
 8007ede:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ee2:	e13f      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	220e      	movs	r2, #14
 8007ef0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f2c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f30:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f3a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f3e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f42:	6809      	ldr	r1, [r1, #0]
 8007f44:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f48:	2600      	movs	r6, #0
 8007f4a:	9604      	str	r6, [sp, #16]
 8007f4c:	9103      	str	r1, [sp, #12]
 8007f4e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f52:	9102      	str	r1, [sp, #8]
 8007f54:	9201      	str	r2, [sp, #4]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	462b      	mov	r3, r5
 8007f5a:	4a5c      	ldr	r2, [pc, #368]	; (80080cc <AT_ESP8266_ND+0x1758>)
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	f006 fb3d 	bl	800e5dc <FT_String_ND>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d112      	bne.n	8007f8e <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007f86:	230b      	movs	r3, #11
 8007f88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f8c:	e0ea      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007f8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	220a      	movs	r2, #10
 8007f9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fd6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fe4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fe8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fec:	6809      	ldr	r1, [r1, #0]
 8007fee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	9604      	str	r6, [sp, #16]
 8007ff6:	9103      	str	r1, [sp, #12]
 8007ff8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ffc:	9102      	str	r1, [sp, #8]
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	462b      	mov	r3, r5
 8008004:	4a32      	ldr	r2, [pc, #200]	; (80080d0 <AT_ESP8266_ND+0x175c>)
 8008006:	4621      	mov	r1, r4
 8008008:	f006 fae8 	bl	800e5dc <FT_String_ND>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d112      	bne.n	8008038 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8008012:	2318      	movs	r3, #24
 8008014:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008036:	e095      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2208      	movs	r2, #8
 8008044:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008080:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008084:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800808e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008092:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008096:	6809      	ldr	r1, [r1, #0]
 8008098:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800809c:	2600      	movs	r6, #0
 800809e:	9604      	str	r6, [sp, #16]
 80080a0:	9103      	str	r1, [sp, #12]
 80080a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080a6:	9102      	str	r1, [sp, #8]
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	462b      	mov	r3, r5
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <AT_ESP8266_ND+0x1760>)
 80080b0:	4621      	mov	r1, r4
 80080b2:	f006 fa93 	bl	800e5dc <FT_String_ND>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10d      	bne.n	80080d8 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 80080bc:	2303      	movs	r3, #3
 80080be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80080c2:	e04f      	b.n	8008164 <AT_ESP8266_ND+0x17f0>
 80080c4:	080107b0 	.word	0x080107b0
 80080c8:	080107c0 	.word	0x080107c0
 80080cc:	080107d0 	.word	0x080107d0
 80080d0:	080107e0 	.word	0x080107e0
 80080d4:	080107ec 	.word	0x080107ec
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80080d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2209      	movs	r2, #9
 80080e4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80080e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80080f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008120:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008124:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800812e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008132:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008136:	6809      	ldr	r1, [r1, #0]
 8008138:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800813c:	2600      	movs	r6, #0
 800813e:	9604      	str	r6, [sp, #16]
 8008140:	9103      	str	r1, [sp, #12]
 8008142:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008146:	9102      	str	r1, [sp, #8]
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	462b      	mov	r3, r5
 800814e:	4a77      	ldr	r2, [pc, #476]	; (800832c <AT_ESP8266_ND+0x19b8>)
 8008150:	4621      	mov	r1, r4
 8008152:	f006 fa43 	bl	800e5dc <FT_String_ND>
 8008156:	4603      	mov	r3, r0
 8008158:	2b01      	cmp	r3, #1
 800815a:	d103      	bne.n	8008164 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 800815c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008160:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008172:	3b01      	subs	r3, #1
 8008174:	2b08      	cmp	r3, #8
 8008176:	f201 85d6 	bhi.w	8009d26 <AT_ESP8266_ND+0x33b2>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <AT_ESP8266_ND+0x180c>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081a5 	.word	0x080081a5
 8008184:	08008335 	.word	0x08008335
 8008188:	080085dd 	.word	0x080085dd
 800818c:	08008791 	.word	0x08008791
 8008190:	080089ad 	.word	0x080089ad
 8008194:	08008cc1 	.word	0x08008cc1
 8008198:	08008fb9 	.word	0x08008fb9
 800819c:	08009533 	.word	0x08009533
 80081a0:	08009749 	.word	0x08009749
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80081a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80081b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d14f      	bne.n	8008266 <AT_ESP8266_ND+0x18f2>
 80081c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d04b      	beq.n	8008266 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80081ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d047      	beq.n	8008266 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 80081d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d043      	beq.n	8008266 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80081de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081e2:	2b13      	cmp	r3, #19
 80081e4:	d03f      	beq.n	8008266 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80081e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2201      	movs	r2, #1
 8008202:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008214:	4620      	mov	r0, r4
 8008216:	f7f7 ffed 	bl	80001f4 <strlen>
 800821a:	4603      	mov	r3, r0
 800821c:	4423      	add	r3, r4
 800821e:	4a44      	ldr	r2, [pc, #272]	; (8008330 <AT_ESP8266_ND+0x19bc>)
 8008220:	461c      	mov	r4, r3
 8008222:	4613      	mov	r3, r2
 8008224:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008226:	6020      	str	r0, [r4, #0]
 8008228:	6061      	str	r1, [r4, #4]
 800822a:	60a2      	str	r2, [r4, #8]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008230:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008234:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800823e:	4618      	mov	r0, r3
 8008240:	f7f7 ffd8 	bl	80001f4 <strlen>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008256:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800825a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2264      	movs	r2, #100	; 0x64
 8008262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11b      	bne.n	80082ce <AT_ESP8266_ND+0x195a>
 8008296:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d023      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
 800829e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a2:	2b1c      	cmp	r3, #28
 80082a4:	d01f      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 80082a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d01b      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 80082ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d017      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80082b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ba:	2b0b      	cmp	r3, #11
 80082bc:	d013      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80082be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c2:	2b0c      	cmp	r3, #12
 80082c4:	d00f      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80082c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ca:	2b13      	cmp	r3, #19
 80082cc:	d00b      	beq.n	80082e6 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80082ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80082dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e0:	4293      	cmp	r3, r2
 80082e2:	f341 852a 	ble.w	8009d3a <AT_ESP8266_ND+0x33c6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80082e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80082f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008328:	f001 bd07 	b.w	8009d3a <AT_ESP8266_ND+0x33c6>
 800832c:	080107f8 	.word	0x080107f8
 8008330:	08010804 	.word	0x08010804
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008352:	2b01      	cmp	r3, #1
 8008354:	f040 80c8 	bne.w	80084e8 <AT_ESP8266_ND+0x1b74>
 8008358:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800835c:	2b01      	cmp	r3, #1
 800835e:	f000 80c3 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 8008362:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008366:	2b02      	cmp	r3, #2
 8008368:	f000 80be 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 800836c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008370:	2b03      	cmp	r3, #3
 8008372:	f000 80b9 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008376:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800837a:	2b04      	cmp	r3, #4
 800837c:	f000 80b4 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 8008380:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008384:	2b0a      	cmp	r3, #10
 8008386:	f000 80af 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 800838a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800838e:	2b0b      	cmp	r3, #11
 8008390:	f000 80aa 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008394:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008398:	2b0c      	cmp	r3, #12
 800839a:	f000 80a5 	beq.w	80084e8 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800839e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80083ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80083be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7f7 ff11 	bl	80001f4 <strlen>
 80083d2:	4603      	mov	r3, r0
 80083d4:	4423      	add	r3, r4
 80083d6:	4980      	ldr	r1, [pc, #512]	; (80085d8 <AT_ESP8266_ND+0x1c64>)
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	cb03      	ldmia	r3!, {r0, r1}
 80083de:	6010      	str	r0, [r2, #0]
 80083e0:	6051      	str	r1, [r2, #4]
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80083e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083f4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80083f8:	2201      	movs	r2, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f006 fd18 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800840e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008412:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	1d9d      	adds	r5, r3, #6
 800841a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3306      	adds	r3, #6
 8008426:	4618      	mov	r0, r3
 8008428:	f7f7 fee4 	bl	80001f4 <strlen>
 800842c:	4603      	mov	r3, r0
 800842e:	461a      	mov	r2, r3
 8008430:	4629      	mov	r1, r5
 8008432:	4620      	mov	r0, r4
 8008434:	f006 fcfc 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008446:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800844a:	4618      	mov	r0, r3
 800844c:	f7f7 fed2 	bl	80001f4 <strlen>
 8008450:	4602      	mov	r2, r0
 8008452:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008456:	4619      	mov	r1, r3
 8008458:	4620      	mov	r0, r4
 800845a:	f006 fce9 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800845e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800846c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800847a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3326      	adds	r3, #38	; 0x26
 8008486:	4618      	mov	r0, r3
 8008488:	f7f7 feb4 	bl	80001f4 <strlen>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	4629      	mov	r1, r5
 8008492:	4620      	mov	r0, r4
 8008494:	f006 fccc 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084a6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80084aa:	2203      	movs	r2, #3
 80084ac:	4618      	mov	r0, r3
 80084ae:	f006 fcbf 	bl	800ee30 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80084b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7f7 fe97 	bl	80001f4 <strlen>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80084d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	22c8      	movs	r2, #200	; 0xc8
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80084e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11b      	bne.n	8008550 <AT_ESP8266_ND+0x1bdc>
 8008518:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d023      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
 8008520:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008524:	2b02      	cmp	r3, #2
 8008526:	d01f      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852c:	2b03      	cmp	r3, #3
 800852e:	d01b      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8008530:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008534:	2b04      	cmp	r3, #4
 8008536:	d017      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008538:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853c:	2b0a      	cmp	r3, #10
 800853e:	d013      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 8008540:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008544:	2b0b      	cmp	r3, #11
 8008546:	d00f      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008548:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800854c:	2b0c      	cmp	r3, #12
 800854e:	d00b      	beq.n	8008568 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800855e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008562:	4293      	cmp	r3, r2
 8008564:	f341 83eb 	ble.w	8009d3e <AT_ESP8266_ND+0x33ca>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008568:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 800857a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d01f      	beq.n	80085c2 <AT_ESP8266_ND+0x1c4e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 8008592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(&a);
							HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 80085a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	889b      	ldrh	r3, [r3, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	4619      	mov	r1, r3
 80085be:	f7fa ff7b 	bl	80034b8 <HAL_GPIO_WritePin>
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80085c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80085d2:	f001 bbb4 	b.w	8009d3e <AT_ESP8266_ND+0x33ca>
 80085d6:	bf00      	nop
 80085d8:	08010814 	.word	0x08010814
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80085ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d15d      	bne.n	80086ba <AT_ESP8266_ND+0x1d46>
 80085fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008602:	2b04      	cmp	r3, #4
 8008604:	d059      	beq.n	80086ba <AT_ESP8266_ND+0x1d46>
 8008606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860a:	2b0a      	cmp	r3, #10
 800860c:	d055      	beq.n	80086ba <AT_ESP8266_ND+0x1d46>
 800860e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008612:	2b0d      	cmp	r3, #13
 8008614:	d051      	beq.n	80086ba <AT_ESP8266_ND+0x1d46>
						{
						a->_pasos=0;
 8008616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800861a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008626:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800862a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2201      	movs	r2, #1
 8008632:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8008636:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800863a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	4619      	mov	r1, r3
 8008652:	f7fa ff31 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008664:	4620      	mov	r0, r4
 8008666:	f7f7 fdc5 	bl	80001f4 <strlen>
 800866a:	4603      	mov	r3, r0
 800866c:	4423      	add	r3, r4
 800866e:	49cc      	ldr	r1, [pc, #816]	; (80089a0 <AT_ESP8266_ND+0x202c>)
 8008670:	461a      	mov	r2, r3
 8008672:	460b      	mov	r3, r1
 8008674:	cb03      	ldmia	r3!, {r0, r1}
 8008676:	6010      	str	r0, [r2, #0]
 8008678:	6051      	str	r1, [r2, #4]
 800867a:	8819      	ldrh	r1, [r3, #0]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	8111      	strh	r1, [r2, #8]
 8008680:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008690:	4618      	mov	r0, r3
 8008692:	f7f7 fdaf 	bl	80001f4 <strlen>
 8008696:	4603      	mov	r3, r0
 8008698:	461a      	mov	r2, r3
 800869a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80086a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80086d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d113      	bne.n	8008712 <AT_ESP8266_ND+0x1d9e>
 80086ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ee:	2b0a      	cmp	r3, #10
 80086f0:	d01b      	beq.n	800872a <AT_ESP8266_ND+0x1db6>
 80086f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086f6:	2b0b      	cmp	r3, #11
 80086f8:	d017      	beq.n	800872a <AT_ESP8266_ND+0x1db6>
																		  ||(AT_decode==at_wifi_gotip)
 80086fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086fe:	2b0c      	cmp	r3, #12
 8008700:	d013      	beq.n	800872a <AT_ESP8266_ND+0x1db6>
																		  ||(AT_decode==at_restart	)
 8008702:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008706:	2b04      	cmp	r3, #4
 8008708:	d00f      	beq.n	800872a <AT_ESP8266_ND+0x1db6>
																		  ||(AT_decode==at_deconectar_ok )))
 800870a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800870e:	2b0d      	cmp	r3, #13
 8008710:	d00b      	beq.n	800872a <AT_ESP8266_ND+0x1db6>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008720:	f241 3288 	movw	r2, #5000	; 0x1388
 8008724:	4293      	cmp	r3, r2
 8008726:	f341 830c 	ble.w	8009d42 <AT_ESP8266_ND+0x33ce>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800872a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800873c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008740:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800874c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 800875c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	889b      	ldrh	r3, [r3, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	4619      	mov	r1, r3
 8008778:	f7fa fe9e 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 800877c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800878c:	f001 bad9 	b.w	8009d42 <AT_ESP8266_ND+0x33ce>
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80087a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d17b      	bne.n	80088aa <AT_ESP8266_ND+0x1f36>
 80087b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d077      	beq.n	80088aa <AT_ESP8266_ND+0x1f36>
									   &&(AT_decode!=at_ok)
 80087ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d073      	beq.n	80088aa <AT_ESP8266_ND+0x1f36>
									   &&(AT_decode!=at_error))
 80087c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d06f      	beq.n	80088aa <AT_ESP8266_ND+0x1f36>
						{
						a->_pasos=0;
 80087ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80087da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 80087ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	889b      	ldrh	r3, [r3, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	4619      	mov	r1, r3
 8008806:	f7fa fe57 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800880a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008818:	2b01      	cmp	r3, #1
 800881a:	d115      	bne.n	8008848 <AT_ESP8266_ND+0x1ed4>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800881c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800882a:	4620      	mov	r0, r4
 800882c:	f7f7 fce2 	bl	80001f4 <strlen>
 8008830:	4603      	mov	r3, r0
 8008832:	4423      	add	r3, r4
 8008834:	4a5b      	ldr	r2, [pc, #364]	; (80089a4 <AT_ESP8266_ND+0x2030>)
 8008836:	461c      	mov	r4, r3
 8008838:	4613      	mov	r3, r2
 800883a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800883c:	6020      	str	r0, [r4, #0]
 800883e:	6061      	str	r1, [r4, #4]
 8008840:	60a2      	str	r2, [r4, #8]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	e014      	b.n	8008872 <AT_ESP8266_ND+0x1efe>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008856:	4620      	mov	r0, r4
 8008858:	f7f7 fccc 	bl	80001f4 <strlen>
 800885c:	4603      	mov	r3, r0
 800885e:	4423      	add	r3, r4
 8008860:	4a51      	ldr	r2, [pc, #324]	; (80089a8 <AT_ESP8266_ND+0x2034>)
 8008862:	461c      	mov	r4, r3
 8008864:	4613      	mov	r3, r2
 8008866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008868:	6020      	str	r0, [r4, #0]
 800886a:	6061      	str	r1, [r4, #4]
 800886c:	60a2      	str	r2, [r4, #8]
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008880:	4618      	mov	r0, r3
 8008882:	f7f7 fcb7 	bl	80001f4 <strlen>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008898:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800889c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80088a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80088aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80088c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d123      	bne.n	8008922 <AT_ESP8266_ND+0x1fae>
 80088da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d02b      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
 80088e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088e6:	2b0b      	cmp	r3, #11
 80088e8:	d027      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_wifi_gotip)
 80088ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ee:	2b0c      	cmp	r3, #12
 80088f0:	d023      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_restart)
 80088f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d01f      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_error)
 80088fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d01b      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_multiple_conn_ok)
 8008902:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008906:	2b07      	cmp	r3, #7
 8008908:	d017      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_no_multiple_conn_ok)
 800890a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800890e:	2b08      	cmp	r3, #8
 8008910:	d013      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_multiple_conn_err)
 8008912:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008916:	2b1e      	cmp	r3, #30
 8008918:	d00f      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(AT_decode==at_no_multiple_conn_err)))
 800891a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800891e:	2b1f      	cmp	r3, #31
 8008920:	d00b      	beq.n	800893a <AT_ESP8266_ND+0x1fc6>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008930:	f241 3288 	movw	r2, #5000	; 0x1388
 8008934:	4293      	cmp	r3, r2
 8008936:	f341 8206 	ble.w	8009d46 <AT_ESP8266_ND+0x33d2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800893a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800894c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800895c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 800896c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	889b      	ldrh	r3, [r3, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	4619      	mov	r1, r3
 8008988:	f7fa fd96 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 800898c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800899c:	f001 b9d3 	b.w	8009d46 <AT_ESP8266_ND+0x33d2>
 80089a0:	08010820 	.word	0x08010820
 80089a4:	0801082c 	.word	0x0801082c
 80089a8:	0801083c 	.word	0x0801083c
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	f040 8103 	bne.w	8008bd6 <AT_ESP8266_ND+0x2262>
 80089d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	f000 80fe 	beq.w	8008bd6 <AT_ESP8266_ND+0x2262>
									   &&(AT_decode!=at_ok)
 80089da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	f000 80f9 	beq.w	8008bd6 <AT_ESP8266_ND+0x2262>
									   &&(AT_decode!=at_error)
 80089e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	f000 80f4 	beq.w	8008bd6 <AT_ESP8266_ND+0x2262>
									   &&(AT_decode!=at_def_ip_err)
 80089ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089f2:	2b21      	cmp	r3, #33	; 0x21
 80089f4:	f000 80ef 	beq.w	8008bd6 <AT_ESP8266_ND+0x2262>
									   &&(AT_decode!=at_def_ip_ok))
 80089f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089fc:	2b1b      	cmp	r3, #27
 80089fe:	f000 80ea 	beq.w	8008bd6 <AT_ESP8266_ND+0x2262>
						{
						a->_pasos=0;
 8008a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	889b      	ldrh	r3, [r3, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f7fa fd3b 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a50:	4620      	mov	r0, r4
 8008a52:	f7f7 fbcf 	bl	80001f4 <strlen>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4423      	add	r3, r4
 8008a5a:	4998      	ldr	r1, [pc, #608]	; (8008cbc <AT_ESP8266_ND+0x2348>)
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	460b      	mov	r3, r1
 8008a60:	cb03      	ldmia	r3!, {r0, r1}
 8008a62:	6010      	str	r0, [r2, #0]
 8008a64:	6051      	str	r1, [r2, #4]
 8008a66:	8819      	ldrh	r1, [r3, #0]
 8008a68:	789b      	ldrb	r3, [r3, #2]
 8008a6a:	8111      	strh	r1, [r2, #8]
 8008a6c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a7c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008a80:	2201      	movs	r2, #1
 8008a82:	4618      	mov	r0, r3
 8008a84:	f006 f9d4 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	334c      	adds	r3, #76	; 0x4c
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f7 fb9f 	bl	80001f4 <strlen>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4629      	mov	r1, r5
 8008abc:	4620      	mov	r0, r4
 8008abe:	f006 f9b7 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ad0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f006 f9aa 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3362      	adds	r3, #98	; 0x62
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f7 fb75 	bl	80001f4 <strlen>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4629      	mov	r1, r5
 8008b10:	4620      	mov	r0, r4
 8008b12:	f006 f98d 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b24:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f006 f980 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3372      	adds	r3, #114	; 0x72
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f7 fb4b 	bl	80001f4 <strlen>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	4629      	mov	r1, r5
 8008b64:	4620      	mov	r0, r4
 8008b66:	f006 f963 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b78:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f006 f956 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b92:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008b96:	2202      	movs	r2, #2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f006 f949 	bl	800ee30 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f7 fb21 	bl	80001f4 <strlen>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d11b      	bne.n	8008c3e <AT_ESP8266_ND+0x22ca>
 8008c06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d023      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
 8008c0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c12:	2b0b      	cmp	r3, #11
 8008c14:	d01f      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(AT_decode==at_wifi_gotip)
 8008c16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c1a:	2b0c      	cmp	r3, #12
 8008c1c:	d01b      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(AT_decode==at_restart)
 8008c1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d017      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(AT_decode==at_error)
 8008c26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d013      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(AT_decode==at_def_ip_err)
 8008c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c32:	2b21      	cmp	r3, #33	; 0x21
 8008c34:	d00f      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(AT_decode==at_def_ip_ok)))
 8008c36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c3a:	2b1b      	cmp	r3, #27
 8008c3c:	d00b      	beq.n	8008c56 <AT_ESP8266_ND+0x22e2>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c50:	4293      	cmp	r3, r2
 8008c52:	f341 807a 	ble.w	8009d4a <AT_ESP8266_ND+0x33d6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 8008c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	889b      	ldrh	r3, [r3, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f7fa fc08 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 8008ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008cb8:	f001 b847 	b.w	8009d4a <AT_ESP8266_ND+0x33d6>
 8008cbc:	0801072c 	.word	0x0801072c
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	f040 80f2 	bne.w	8008ec8 <AT_ESP8266_ND+0x2554>
 8008ce4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ce8:	2b0b      	cmp	r3, #11
 8008cea:	f000 80ed 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
									   &&(AT_decode!=at_wifi_gotip)
 8008cee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf2:	2b0c      	cmp	r3, #12
 8008cf4:	f000 80e8 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008cf8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cfc:	2b0e      	cmp	r3, #14
 8008cfe:	f000 80e3 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
									   &&(AT_decode!=at_tcp_conectado)
 8008d02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	f000 80de 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
									   &&(AT_decode!=at_tcp_desconectado)
 8008d0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	f000 80d9 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
									   &&(AT_decode!=at_error))
 8008d16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	f000 80d4 	beq.w	8008ec8 <AT_ESP8266_ND+0x2554>
						{
						a->_pasos=0;
 8008d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8008d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	889b      	ldrh	r3, [r3, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	f7fa fbac 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7f7 fa40 	bl	80001f4 <strlen>
 8008d74:	4603      	mov	r3, r0
 8008d76:	4423      	add	r3, r4
 8008d78:	4ab1      	ldr	r2, [pc, #708]	; (8009040 <AT_ESP8266_ND+0x26cc>)
 8008d7a:	461c      	mov	r4, r3
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d80:	6020      	str	r0, [r4, #0]
 8008d82:	6061      	str	r1, [r4, #4]
 8008d84:	60a2      	str	r2, [r4, #8]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d98:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f006 f846 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008db2:	4620      	mov	r0, r4
 8008db4:	f7f7 fa1e 	bl	80001f4 <strlen>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4423      	add	r3, r4
 8008dbc:	4aa1      	ldr	r2, [pc, #644]	; (8009044 <AT_ESP8266_ND+0x26d0>)
 8008dbe:	6810      	ldr	r0, [r2, #0]
 8008dc0:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dd0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f006 f82a 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3336      	adds	r3, #54	; 0x36
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f7 f9f5 	bl	80001f4 <strlen>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4620      	mov	r0, r4
 8008e12:	f006 f80d 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e24:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008e28:	2202      	movs	r2, #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f006 f800 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3346      	adds	r3, #70	; 0x46
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7f7 f9cb 	bl	80001f4 <strlen>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	461a      	mov	r2, r3
 8008e62:	4629      	mov	r1, r5
 8008e64:	4620      	mov	r0, r4
 8008e66:	f005 ffe3 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e78:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f7 f9b9 	bl	80001f4 <strlen>
 8008e82:	4602      	mov	r2, r0
 8008e84:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f005 ffd0 	bl	800ee30 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f7 f9a8 	bl	80001f4 <strlen>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008ee6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d120      	bne.n	8008f3a <AT_ESP8266_ND+0x25c6>
 8008ef8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008efc:	2b0a      	cmp	r3, #10
 8008efe:	d028      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
 8008f00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f04:	2b0b      	cmp	r3, #11
 8008f06:	d024      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_wifi_gotip)
 8008f08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f0c:	2b0c      	cmp	r3, #12
 8008f0e:	d020      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008f10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f14:	2b0e      	cmp	r3, #14
 8008f16:	d01c      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_tcp_conectado)
 8008f18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f1c:	2b0f      	cmp	r3, #15
 8008f1e:	d018      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008f20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d014      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_error)
 8008f28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d010      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(AT_decode==at_busy_p)))
 8008f30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f38:	d00b      	beq.n	8008f52 <AT_ESP8266_ND+0x25de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	f340 86fe 	ble.w	8009d4e <AT_ESP8266_ND+0x33da>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 8008f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	889b      	ldrh	r3, [r3, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f7fa fa8a 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008fb4:	f000 becb 	b.w	8009d4e <AT_ESP8266_ND+0x33da>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008fb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fbc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008fc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d003      	beq.n	8008fd8 <AT_ESP8266_ND+0x2664>
 8008fd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fd4:	2b0a      	cmp	r3, #10
 8008fd6:	d137      	bne.n	8009048 <AT_ESP8266_ND+0x26d4>
				{
					a->_estado=AT_decode;
 8008fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 800900a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	4619      	mov	r1, r3
 8009026:	f7fa fa47 	bl	80034b8 <HAL_GPIO_WritePin>
					//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
					a->_subpaso=0;
 800902a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2200      	movs	r2, #0
 8009036:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800903a:	f000 be8a 	b.w	8009d52 <AT_ESP8266_ND+0x33de>
 800903e:	bf00      	nop
 8009040:	0801084c 	.word	0x0801084c
 8009044:	0801085c 	.word	0x0801085c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009056:	2b01      	cmp	r3, #1
 8009058:	f040 80e1 	bne.w	800921e <AT_ESP8266_ND+0x28aa>
 800905c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800906a:	2b00      	cmp	r3, #0
 800906c:	f040 80d7 	bne.w	800921e <AT_ESP8266_ND+0x28aa>
										a->_ejecucion=1;
 8009070:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2201      	movs	r2, #1
 800907c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8009080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	889b      	ldrh	r3, [r3, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	4619      	mov	r1, r3
 800909c:	f7fa fa0c 	bl	80034b8 <HAL_GPIO_WritePin>
										a->_estado=24;
 80090a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2218      	movs	r2, #24
 80090ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80090b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80090c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80090de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80090ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80090fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009102:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800910c:	4620      	mov	r0, r4
 800910e:	f7f7 f871 	bl	80001f4 <strlen>
 8009112:	4603      	mov	r3, r0
 8009114:	4423      	add	r3, r4
 8009116:	4abe      	ldr	r2, [pc, #760]	; (8009410 <AT_ESP8266_ND+0x2a9c>)
 8009118:	461c      	mov	r4, r3
 800911a:	4613      	mov	r3, r2
 800911c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800911e:	6020      	str	r0, [r4, #0]
 8009120:	6061      	str	r1, [r4, #4]
 8009122:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009132:	f107 0214 	add.w	r2, r7, #20
 8009136:	4611      	mov	r1, r2
 8009138:	4618      	mov	r0, r3
 800913a:	f005 fd81 	bl	800ec40 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 800913e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009142:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	4618      	mov	r0, r3
 8009152:	f7f7 f84f 	bl	80001f4 <strlen>
 8009156:	4602      	mov	r2, r0
 8009158:	f107 0314 	add.w	r3, r7, #20
 800915c:	4619      	mov	r1, r3
 800915e:	4620      	mov	r0, r4
 8009160:	f005 fe66 	bl	800ee30 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009172:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009176:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f005 fe4c 	bl	800ee20 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009196:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800919a:	2202      	movs	r2, #2
 800919c:	4618      	mov	r0, r3
 800919e:	f005 fe47 	bl	800ee30 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80091a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7f7 f81f 	bl	80001f4 <strlen>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80091c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80091d6:	4620      	mov	r0, r4
 80091d8:	f7f7 f80c 	bl	80001f4 <strlen>
 80091dc:	4603      	mov	r3, r0
 80091de:	4423      	add	r3, r4
 80091e0:	4a8c      	ldr	r2, [pc, #560]	; (8009414 <AT_ESP8266_ND+0x2aa0>)
 80091e2:	461c      	mov	r4, r3
 80091e4:	4613      	mov	r3, r2
 80091e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80091e8:	6020      	str	r0, [r4, #0]
 80091ea:	6061      	str	r1, [r4, #4]
 80091ec:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80091ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 800920c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800921e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 800923c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 80a6 	bne.w	800939c <AT_ESP8266_ND+0x2a28>
 8009250:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009254:	2b13      	cmp	r3, #19
 8009256:	f000 80a1 	beq.w	800939c <AT_ESP8266_ND+0x2a28>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 800925a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009276:	4619      	mov	r1, r3
 8009278:	4610      	mov	r0, r2
 800927a:	f7f6 ffb1 	bl	80001e0 <strcmp>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01b      	beq.n	80092bc <AT_ESP8266_ND+0x2948>
 8009284:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d017      	beq.n	80092bc <AT_ESP8266_ND+0x2948>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 800928c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009290:	2b14      	cmp	r3, #20
 8009292:	d013      	beq.n	80092bc <AT_ESP8266_ND+0x2948>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a6:	4293      	cmp	r3, r2
 80092a8:	dd78      	ble.n	800939c <AT_ESP8266_ND+0x2a28>
 80092aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d16f      	bne.n	800939c <AT_ESP8266_ND+0x2a28>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 80092bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	dd0e      	ble.n	80092f0 <AT_ESP8266_ND+0x297c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80092d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80092f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800930e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800932c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2201      	movs	r2, #1
 8009338:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800933c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009340:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800934a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800935c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009366:	2361      	movs	r3, #97	; 0x61
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	2301      	movs	r3, #1
 800936c:	f005 fc9c 	bl	800eca8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800937e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009382:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800938c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009390:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 800939c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093aa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80093ae:	f040 84d0 	bne.w	8009d52 <AT_ESP8266_ND+0x33de>
 80093b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093b6:	2b13      	cmp	r3, #19
 80093b8:	d02e      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
 80093ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80093c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093cc:	4293      	cmp	r3, r2
 80093ce:	dc23      	bgt.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_wifi_disconnect)
 80093d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093d4:	2b0a      	cmp	r3, #10
 80093d6:	d01f      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_wifi_connected)
 80093d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093dc:	2b0b      	cmp	r3, #11
 80093de:	d01b      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_wifi_gotip)
 80093e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093e4:	2b0c      	cmp	r3, #12
 80093e6:	d017      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_tcp_desconectado)
 80093e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	d013      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_tcp_snd_err)
 80093f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093f4:	2b11      	cmp	r3, #17
 80093f6:	d00f      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_tcp_enviado_error)
 80093f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093fc:	2b12      	cmp	r3, #18
 80093fe:	d00b      	beq.n	8009418 <AT_ESP8266_ND+0x2aa4>
																				 ||(AT_decode==at_busy_p)))
 8009400:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009408:	f040 84a3 	bne.w	8009d52 <AT_ESP8266_ND+0x33de>
 800940c:	e004      	b.n	8009418 <AT_ESP8266_ND+0x2aa4>
 800940e:	bf00      	nop
 8009410:	08010860 	.word	0x08010860
 8009414:	0801086c 	.word	0x0801086c
									a->_debug_count5++;
 8009418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	dd25      	ble.n	8009498 <AT_ESP8266_ND+0x2b24>
										a->_debug_count8++;
 800944c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800946a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	dd10      	ble.n	80094cc <AT_ESP8266_ND+0x2b58>
 80094aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d00c      	beq.n	80094cc <AT_ESP8266_ND+0x2b58>
 80094b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094b6:	2b0a      	cmp	r3, #10
 80094b8:	d008      	beq.n	80094cc <AT_ESP8266_ND+0x2b58>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	220f      	movs	r2, #15
 80094c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80094ca:	e008      	b.n	80094de <AT_ESP8266_ND+0x2b6a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80094cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80094da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80094de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80094ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 80094fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	889b      	ldrh	r3, [r3, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	4619      	mov	r1, r3
 800951a:	f7f9 ffcd 	bl	80034b8 <HAL_GPIO_WritePin>
									a->_subpaso=0;
 800951e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800952e:	f000 bc10 	b.w	8009d52 <AT_ESP8266_ND+0x33de>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009546:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009550:	2b01      	cmp	r3, #1
 8009552:	d17f      	bne.n	8009654 <AT_ESP8266_ND+0x2ce0>
						{
						a->_pasos=0;
 8009554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8009564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2201      	movs	r2, #1
 8009570:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8009574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009584:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	889b      	ldrh	r3, [r3, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	4619      	mov	r1, r3
 8009590:	f7f9 ff92 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8009594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7f6 fe26 	bl	80001f4 <strlen>
 80095a8:	4603      	mov	r3, r0
 80095aa:	4423      	add	r3, r4
 80095ac:	4a87      	ldr	r2, [pc, #540]	; (80097cc <AT_ESP8266_ND+0x2e58>)
 80095ae:	461c      	mov	r4, r3
 80095b0:	4615      	mov	r5, r2
 80095b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095b4:	6020      	str	r0, [r4, #0]
 80095b6:	6061      	str	r1, [r4, #4]
 80095b8:	60a2      	str	r2, [r4, #8]
 80095ba:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80095bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80095d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	335c      	adds	r3, #92	; 0x5c
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7f6 fe05 	bl	80001f4 <strlen>
 80095ea:	4603      	mov	r3, r0
 80095ec:	461a      	mov	r2, r3
 80095ee:	4629      	mov	r1, r5
 80095f0:	4620      	mov	r0, r4
 80095f2:	f005 fc1d 	bl	800ee30 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80095f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009604:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009608:	4618      	mov	r0, r3
 800960a:	f7f6 fdf3 	bl	80001f4 <strlen>
 800960e:	4602      	mov	r2, r0
 8009610:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009614:	4619      	mov	r1, r3
 8009616:	4620      	mov	r0, r4
 8009618:	f005 fc0a 	bl	800ee30 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800961c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800962a:	4618      	mov	r0, r3
 800962c:	f7f6 fde2 	bl	80001f4 <strlen>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009654:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009658:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d123      	bne.n	80096cc <AT_ESP8266_ND+0x2d58>
 8009684:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009688:	2b0a      	cmp	r3, #10
 800968a:	d02b      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 800968c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009690:	2b0b      	cmp	r3, #11
 8009692:	d027      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 8009694:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009698:	2b0c      	cmp	r3, #12
 800969a:	d023      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 800969c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a0:	2b0e      	cmp	r3, #14
 80096a2:	d01f      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a8:	2b0f      	cmp	r3, #15
 80096aa:	d01b      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b0:	2b10      	cmp	r3, #16
 80096b2:	d017      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b8:	2b15      	cmp	r3, #21
 80096ba:	d013      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096c0:	2b16      	cmp	r3, #22
 80096c2:	d00f      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096c8:	2b17      	cmp	r3, #23
 80096ca:	d00b      	beq.n	80096e4 <AT_ESP8266_ND+0x2d70>
 80096cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096da:	f241 3288 	movw	r2, #5000	; 0x1388
 80096de:	4293      	cmp	r3, r2
 80096e0:	f340 8339 	ble.w	8009d56 <AT_ESP8266_ND+0x33e2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80096f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80096f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 8009716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009726:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	889b      	ldrh	r3, [r3, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	4619      	mov	r1, r3
 8009732:	f7f9 fec1 	bl	80034b8 <HAL_GPIO_WritePin>
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 8009736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800973a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009746:	e306      	b.n	8009d56 <AT_ESP8266_ND+0x33e2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009758:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800975c:	2b10      	cmp	r3, #16
 800975e:	d003      	beq.n	8009768 <AT_ESP8266_ND+0x2df4>
 8009760:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009764:	2b0a      	cmp	r3, #10
 8009766:	d133      	bne.n	80097d0 <AT_ESP8266_ND+0x2e5c>
				{
					a->_estado=AT_decode;
 8009768:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800977a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 800978a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 800979a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	889b      	ldrh	r3, [r3, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	4619      	mov	r1, r3
 80097b6:	f7f9 fe7f 	bl	80034b8 <HAL_GPIO_WritePin>
					//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
					a->_subpaso=0;
 80097ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80097ca:	e2c6      	b.n	8009d5a <AT_ESP8266_ND+0x33e6>
 80097cc:	08010878 	.word	0x08010878
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80097d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f040 8112 	bne.w	8009a08 <AT_ESP8266_ND+0x3094>
 80097e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 8108 	bne.w	8009a08 <AT_ESP8266_ND+0x3094>
										a->_ejecucion=1;
 80097f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2201      	movs	r2, #1
 8009804:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
 8009808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	889b      	ldrh	r3, [r3, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	4619      	mov	r1, r3
 8009824:	f7f9 fe48 	bl	80034b8 <HAL_GPIO_WritePin>
										a->_estado=24;
 8009828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800982c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2218      	movs	r2, #24
 8009834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800986a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009894:	4620      	mov	r0, r4
 8009896:	f7f6 fcad 	bl	80001f4 <strlen>
 800989a:	4603      	mov	r3, r0
 800989c:	4423      	add	r3, r4
 800989e:	4a83      	ldr	r2, [pc, #524]	; (8009aac <AT_ESP8266_ND+0x3138>)
 80098a0:	461c      	mov	r4, r3
 80098a2:	4613      	mov	r3, r2
 80098a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098a6:	6020      	str	r0, [r4, #0]
 80098a8:	6061      	str	r1, [r4, #4]
 80098aa:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80098ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80098ba:	f107 020c 	add.w	r2, r7, #12
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f005 f9bd 	bl	800ec40 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80098c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80098d4:	f107 030c 	add.w	r3, r7, #12
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f6 fc8b 	bl	80001f4 <strlen>
 80098de:	4602      	mov	r2, r0
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	4619      	mov	r1, r3
 80098e6:	4620      	mov	r0, r4
 80098e8:	f005 faa2 	bl	800ee30 <strncat>
										strncat(a->_uart2snd,",",1);
 80098ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7f6 fc7a 	bl	80001f4 <strlen>
 8009900:	4603      	mov	r3, r0
 8009902:	4423      	add	r3, r4
 8009904:	496a      	ldr	r1, [pc, #424]	; (8009ab0 <AT_ESP8266_ND+0x313c>)
 8009906:	461a      	mov	r2, r3
 8009908:	460b      	mov	r3, r1
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800990e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800991c:	f107 020c 	add.w	r2, r7, #12
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f005 f98c 	bl	800ec40 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	4618      	mov	r0, r3
 800993c:	f7f6 fc5a 	bl	80001f4 <strlen>
 8009940:	4602      	mov	r2, r0
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4619      	mov	r1, r3
 8009948:	4620      	mov	r0, r4
 800994a:	f005 fa71 	bl	800ee30 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800994e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800995c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f005 fa57 	bl	800ee20 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009972:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009976:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009980:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009984:	2202      	movs	r2, #2
 8009986:	4618      	mov	r0, r3
 8009988:	f005 fa52 	bl	800ee30 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800998c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800999a:	4618      	mov	r0, r3
 800999c:	f7f6 fc2a 	bl	80001f4 <strlen>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80099b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80099c0:	4620      	mov	r0, r4
 80099c2:	f7f6 fc17 	bl	80001f4 <strlen>
 80099c6:	4603      	mov	r3, r0
 80099c8:	4423      	add	r3, r4
 80099ca:	4a3a      	ldr	r2, [pc, #232]	; (8009ab4 <AT_ESP8266_ND+0x3140>)
 80099cc:	461c      	mov	r4, r3
 80099ce:	4613      	mov	r3, r2
 80099d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099d2:	6020      	str	r0, [r4, #0]
 80099d4:	6061      	str	r1, [r4, #4]
 80099d6:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80099d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80099f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f040 80b8 	bne.w	8009baa <AT_ESP8266_ND+0x3236>
 8009a3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a3e:	2b13      	cmp	r3, #19
 8009a40:	f000 80b3 	beq.w	8009baa <AT_ESP8266_ND+0x3236>
 8009a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7f6 fbbc 	bl	80001e0 <strcmp>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d024      	beq.n	8009ab8 <AT_ESP8266_ND+0x3144>
 8009a6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d020      	beq.n	8009ab8 <AT_ESP8266_ND+0x3144>
 8009a76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a7a:	2b14      	cmp	r3, #20
 8009a7c:	d01c      	beq.n	8009ab8 <AT_ESP8266_ND+0x3144>
 8009a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a90:	4293      	cmp	r3, r2
 8009a92:	f340 808a 	ble.w	8009baa <AT_ESP8266_ND+0x3236>
 8009a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	f040 8080 	bne.w	8009baa <AT_ESP8266_ND+0x3236>
 8009aaa:	e005      	b.n	8009ab8 <AT_ESP8266_ND+0x3144>
 8009aac:	08010860 	.word	0x08010860
 8009ab0:	08010888 	.word	0x08010888
 8009ab4:	0801086c 	.word	0x0801086c
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aca:	4293      	cmp	r3, r2
 8009acc:	dd17      	ble.n	8009afe <AT_ESP8266_ND+0x318a>
 8009ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d10e      	bne.n	8009afe <AT_ESP8266_ND+0x318a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009b74:	2361      	movs	r3, #97	; 0x61
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f005 f895 	bl	800eca8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009bbc:	f040 80cd 	bne.w	8009d5a <AT_ESP8266_ND+0x33e6>
 8009bc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bc4:	2b13      	cmp	r3, #19
 8009bc6:	d02b      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bcc:	2b0b      	cmp	r3, #11
 8009bce:	d027      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bd4:	2b0c      	cmp	r3, #12
 8009bd6:	d023      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bea:	4293      	cmp	r3, r2
 8009bec:	dc18      	bgt.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bf2:	2b0a      	cmp	r3, #10
 8009bf4:	d014      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bf6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009bfa:	2b10      	cmp	r3, #16
 8009bfc:	d010      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009bfe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c02:	2b11      	cmp	r3, #17
 8009c04:	d00c      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009c06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c0a:	2b12      	cmp	r3, #18
 8009c0c:	d008      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009c0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c12:	2b16      	cmp	r3, #22
 8009c14:	d004      	beq.n	8009c20 <AT_ESP8266_ND+0x32ac>
 8009c16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c1a:	2b19      	cmp	r3, #25
 8009c1c:	f040 809d 	bne.w	8009d5a <AT_ESP8266_ND+0x33e6>
									a->_debug_count5++;
 8009c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c50:	4293      	cmp	r3, r2
 8009c52:	dd25      	ble.n	8009ca0 <AT_ESP8266_ND+0x332c>
										a->_debug_count8++;
 8009c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dd07      	ble.n	8009cc2 <AT_ESP8266_ND+0x334e>
 8009cb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cb6:	2b10      	cmp	r3, #16
 8009cb8:	d003      	beq.n	8009cc2 <AT_ESP8266_ND+0x334e>
 8009cba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cbe:	2b0a      	cmp	r3, #10
 8009cc0:	d108      	bne.n	8009cd4 <AT_ESP8266_ND+0x3360>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
 8009cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	889b      	ldrh	r3, [r3, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f7f9 fbd2 	bl	80034b8 <HAL_GPIO_WritePin>
									a->_subpaso=0;
 8009d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009d24:	e019      	b.n	8009d5a <AT_ESP8266_ND+0x33e6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009d38:	e010      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d3a:	bf00      	nop
 8009d3c:	e00e      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d3e:	bf00      	nop
 8009d40:	e00c      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d42:	bf00      	nop
 8009d44:	e00a      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d46:	bf00      	nop
 8009d48:	e008      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d4a:	bf00      	nop
 8009d4c:	e006      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d4e:	bf00      	nop
 8009d50:	e004      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d52:	bf00      	nop
 8009d54:	e002      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d56:	bf00      	nop
 8009d58:	e000      	b.n	8009d5c <AT_ESP8266_ND+0x33e8>
			break;
 8009d5a:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d94 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da6:	f240 328d 	movw	r2, #909	; 0x38d
 8009daa:	4293      	cmp	r3, r2
 8009dac:	f001 83c3 	beq.w	800b536 <WiFi_Conn_ND+0x17a2>
 8009db0:	f240 328d 	movw	r2, #909	; 0x38d
 8009db4:	4293      	cmp	r3, r2
 8009db6:	f301 8453 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009dba:	f240 3289 	movw	r2, #905	; 0x389
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	f001 8335 	beq.w	800b42e <WiFi_Conn_ND+0x169a>
 8009dc4:	f240 3289 	movw	r2, #905	; 0x389
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	f301 8449 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009dce:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009dd2:	f001 8224 	beq.w	800b21e <WiFi_Conn_ND+0x148a>
 8009dd6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009dda:	f301 8441 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009dde:	f240 3229 	movw	r2, #809	; 0x329
 8009de2:	4293      	cmp	r3, r2
 8009de4:	f301 843c 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009de8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009dec:	f280 80a5 	bge.w	8009f3a <WiFi_Conn_ND+0x1a6>
 8009df0:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009df4:	4293      	cmp	r3, r2
 8009df6:	f000 8776 	beq.w	800ace6 <WiFi_Conn_ND+0xf52>
 8009dfa:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	f301 842e 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e04:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	f000 86fc 	beq.w	800ac06 <WiFi_Conn_ND+0xe72>
 8009e0e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009e12:	4293      	cmp	r3, r2
 8009e14:	f301 8424 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e18:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009e1c:	f000 862b 	beq.w	800aa76 <WiFi_Conn_ND+0xce2>
 8009e20:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009e24:	f301 841c 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e28:	f240 2261 	movw	r2, #609	; 0x261
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	f000 85b1 	beq.w	800a994 <WiFi_Conn_ND+0xc00>
 8009e32:	f240 2261 	movw	r2, #609	; 0x261
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f301 8412 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e3c:	f240 225d 	movw	r2, #605	; 0x25d
 8009e40:	4293      	cmp	r3, r2
 8009e42:	f000 8551 	beq.w	800a8e8 <WiFi_Conn_ND+0xb54>
 8009e46:	f240 225d 	movw	r2, #605	; 0x25d
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	f301 8408 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e50:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009e54:	f000 84cf 	beq.w	800a7f6 <WiFi_Conn_ND+0xa62>
 8009e58:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009e5c:	f301 8400 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e60:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009e64:	4293      	cmp	r3, r2
 8009e66:	f000 846a 	beq.w	800a73e <WiFi_Conn_ND+0x9aa>
 8009e6a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009e6e:	f281 83f7 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e72:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009e76:	4293      	cmp	r3, r2
 8009e78:	f000 8425 	beq.w	800a6c6 <WiFi_Conn_ND+0x932>
 8009e7c:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009e80:	f281 83ee 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009e88:	f000 83b0 	beq.w	800a5ec <WiFi_Conn_ND+0x858>
 8009e8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009e90:	f301 83e6 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009e94:	f240 1299 	movw	r2, #409	; 0x199
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	f000 8369 	beq.w	800a570 <WiFi_Conn_ND+0x7dc>
 8009e9e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009ea2:	f281 83dd 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009ea6:	f240 1295 	movw	r2, #405	; 0x195
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f000 8329 	beq.w	800a502 <WiFi_Conn_ND+0x76e>
 8009eb0:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009eb4:	f281 83d4 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009eb8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ebc:	f000 82a0 	beq.w	800a400 <WiFi_Conn_ND+0x66c>
 8009ec0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ec4:	f301 83cc 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009ec8:	f240 1235 	movw	r2, #309	; 0x135
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	f000 8271 	beq.w	800a3b4 <WiFi_Conn_ND+0x620>
 8009ed2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009ed6:	f281 83c3 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009eda:	f240 1231 	movw	r2, #305	; 0x131
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f000 8263 	beq.w	800a3aa <WiFi_Conn_ND+0x616>
 8009ee4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009ee8:	f281 83ba 	bge.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009eec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009ef0:	f000 8207 	beq.w	800a302 <WiFi_Conn_ND+0x56e>
 8009ef4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009ef8:	f301 83b2 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009efc:	2bd1      	cmp	r3, #209	; 0xd1
 8009efe:	f000 81a0 	beq.w	800a242 <WiFi_Conn_ND+0x4ae>
 8009f02:	2bd1      	cmp	r3, #209	; 0xd1
 8009f04:	f301 83ac 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f08:	2bcd      	cmp	r3, #205	; 0xcd
 8009f0a:	f000 8170 	beq.w	800a1ee <WiFi_Conn_ND+0x45a>
 8009f0e:	2bcd      	cmp	r3, #205	; 0xcd
 8009f10:	f301 83a6 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f14:	2bc8      	cmp	r3, #200	; 0xc8
 8009f16:	f000 80f1 	beq.w	800a0fc <WiFi_Conn_ND+0x368>
 8009f1a:	2bc8      	cmp	r3, #200	; 0xc8
 8009f1c:	f301 83a0 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f20:	2b6d      	cmp	r3, #109	; 0x6d
 8009f22:	f000 80b3 	beq.w	800a08c <WiFi_Conn_ND+0x2f8>
 8009f26:	2b6d      	cmp	r3, #109	; 0x6d
 8009f28:	f301 839a 	bgt.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f2c:	2b64      	cmp	r3, #100	; 0x64
 8009f2e:	d021      	beq.n	8009f74 <WiFi_Conn_ND+0x1e0>
 8009f30:	2b69      	cmp	r3, #105	; 0x69
 8009f32:	f000 8096 	beq.w	800a062 <WiFi_Conn_ND+0x2ce>
 8009f36:	f001 bb93 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f3a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	f201 838e 	bhi.w	800b660 <WiFi_Conn_ND+0x18cc>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <WiFi_Conn_ND+0x1b8>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	0800adf3 	.word	0x0800adf3
 8009f50:	0800b661 	.word	0x0800b661
 8009f54:	0800b661 	.word	0x0800b661
 8009f58:	0800b661 	.word	0x0800b661
 8009f5c:	0800b661 	.word	0x0800b661
 8009f60:	0800aec1 	.word	0x0800aec1
 8009f64:	0800af61 	.word	0x0800af61
 8009f68:	0800b001 	.word	0x0800b001
 8009f6c:	0800b0a1 	.word	0x0800b0a1
 8009f70:	0800b141 	.word	0x0800b141
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7a:	2b64      	cmp	r3, #100	; 0x64
 8009f7c:	d046      	beq.n	800a00c <WiFi_Conn_ND+0x278>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d041      	beq.n	800a00c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8e:	2b1c      	cmp	r3, #28
 8009f90:	d03c      	beq.n	800a00c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d037      	beq.n	800a00c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	d032      	beq.n	800a00c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fac:	2b13      	cmp	r3, #19
 8009fae:	d02d      	beq.n	800a00c <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7fc fb4f 	bl	8006654 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d14e      	bne.n	800a05e <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7fc fcd7 	bl	8006974 <AT_ESP8266_ND>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d109      	bne.n	8009ff4 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7f7 fab6 	bl	8001560 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a000:	b29a      	uxth	r2, r3
 800a002:	2364      	movs	r3, #100	; 0x64
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f7fb faa9 	bl	800555c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a00a:	e028      	b.n	800a05e <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a012:	2b01      	cmp	r3, #1
 800a014:	d004      	beq.n	800a020 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a01c:	2b1c      	cmp	r3, #28
 800a01e:	d103      	bne.n	800a028 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	226d      	movs	r2, #109	; 0x6d
 800a024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d00f      	beq.n	800a052 <WiFi_Conn_ND+0x2be>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d00a      	beq.n	800a052 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a042:	2b0b      	cmp	r3, #11
 800a044:	d005      	beq.n	800a052 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04c:	2b0c      	cmp	r3, #12
 800a04e:	f041 82d8 	bne.w	800b602 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2269      	movs	r2, #105	; 0x69
 800a056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a05a:	f001 bad2 	b.w	800b602 <WiFi_Conn_ND+0x186e>
 800a05e:	f001 bad0 	b.w	800b602 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7fc faf6 	bl	8006654 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2264      	movs	r2, #100	; 0x64
 800a06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a088:	f001 baea 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00c      	beq.n	800a0b0 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7fc fb08 	bl	80066ac <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a0ae:	e00e      	b.n	800a0ce <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7fc fae5 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	22c8      	movs	r2, #200	; 0xc8
 800a0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	f041 8296 	bne.w	800b606 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7fc faba 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2264      	movs	r2, #100	; 0x64
 800a0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a0f8:	f001 ba85 	b.w	800b606 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a102:	2bc8      	cmp	r3, #200	; 0xc8
 800a104:	d04f      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d04a      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a116:	2b02      	cmp	r3, #2
 800a118:	d045      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a120:	2b03      	cmp	r3, #3
 800a122:	d040      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d03b      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a134:	2b0a      	cmp	r3, #10
 800a136:	d036      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13e:	2b0b      	cmp	r3, #11
 800a140:	d031      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	2b0c      	cmp	r3, #12
 800a14a:	d02c      	beq.n	800a1a6 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7fc fa97 	bl	8006680 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d124      	bne.n	800a1a6 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7fc fc09 	bl	8006974 <AT_ESP8266_ND>
 800a162:	4602      	mov	r2, r0
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d109      	bne.n	800a190 <WiFi_Conn_ND+0x3fc>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f7f7 f9e8 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	2364      	movs	r3, #100	; 0x64
 800a1a0:	68b8      	ldr	r0, [r7, #8]
 800a1a2:	f7fb f9db 	bl	800555c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d004      	beq.n	800a1ba <WiFi_Conn_ND+0x426>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b6:	2b0c      	cmp	r3, #12
 800a1b8:	d103      	bne.n	800a1c2 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	22d1      	movs	r2, #209	; 0xd1
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d00a      	beq.n	800a1e2 <WiFi_Conn_ND+0x44e>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d005      	beq.n	800a1e2 <WiFi_Conn_ND+0x44e>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	f041 8214 	bne.w	800b60a <WiFi_Conn_ND+0x1876>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22cd      	movs	r2, #205	; 0xcd
 800a1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a1ea:	f001 ba0e 	b.w	800b60a <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a1ee:	f241 3088 	movw	r0, #5000	; 0x1388
 800a1f2:	f7f8 fcff 	bl	8002bf4 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7fc fa42 	bl	8006680 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	22c8      	movs	r2, #200	; 0xc8
 800a200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	f041 81f7 	bne.w	800b60e <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7fc fa17 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2264      	movs	r2, #100	; 0x64
 800a22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a23e:	f001 b9e6 	b.w	800b60e <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a250:	2b01      	cmp	r3, #1
 800a252:	d108      	bne.n	800a266 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f240 3229 	movw	r2, #809	; 0x329
 800a25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26c:	2b0a      	cmp	r3, #10
 800a26e:	d004      	beq.n	800a27a <WiFi_Conn_ND+0x4e6>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a276:	2b0d      	cmp	r3, #13
 800a278:	d10a      	bne.n	800a290 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7fc fa00 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	22c8      	movs	r2, #200	; 0xc8
 800a284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	2b04      	cmp	r3, #4
 800a298:	d10e      	bne.n	800a2b8 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7fc f9da 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2264      	movs	r2, #100	; 0x64
 800a2a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d011      	beq.n	800a2e6 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7fc fa4a 	bl	800675c <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a2e2:	f001 b9bd 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7fc f9e0 	bl	80066ac <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a2fe:	f001 b9af 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a308:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a30c:	d03b      	beq.n	800a386 <WiFi_Conn_ND+0x5f2>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a314:	2b04      	cmp	r3, #4
 800a316:	d036      	beq.n	800a386 <WiFi_Conn_ND+0x5f2>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31e:	2b0a      	cmp	r3, #10
 800a320:	d031      	beq.n	800a386 <WiFi_Conn_ND+0x5f2>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a328:	2b0d      	cmp	r3, #13
 800a32a:	d02c      	beq.n	800a386 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f7fc f9e9 	bl	8006704 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d124      	bne.n	800a386 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7fc fb19 	bl	8006974 <AT_ESP8266_ND>
 800a342:	4602      	mov	r2, r0
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d109      	bne.n	800a370 <WiFi_Conn_ND+0x5dc>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7f7 f8f8 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	2364      	movs	r3, #100	; 0x64
 800a380:	68b8      	ldr	r0, [r7, #8]
 800a382:	f7fb f8eb 	bl	800555c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38c:	2b0a      	cmp	r3, #10
 800a38e:	d005      	beq.n	800a39c <WiFi_Conn_ND+0x608>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a396:	2b0d      	cmp	r3, #13
 800a398:	f041 813b 	bne.w	800b612 <WiFi_Conn_ND+0x187e>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f240 1235 	movw	r2, #309	; 0x135
 800a3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3a6:	f001 b934 	b.w	800b612 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fc f93c 	bl	8006628 <NOP>
			}
			break;
 800a3b0:	f001 b956 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7fc f95f 	bl	8006680 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22c8      	movs	r2, #200	; 0xc8
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	f041 811c 	bne.w	800b616 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7fc f938 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2264      	movs	r2, #100	; 0x64
 800a3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a3fc:	f001 b90b 	b.w	800b616 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a40a:	d04f      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	2b04      	cmp	r3, #4
 800a414:	d04a      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d045      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	2b02      	cmp	r3, #2
 800a428:	d040      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a430:	2b07      	cmp	r3, #7
 800a432:	d03b      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43a:	2b08      	cmp	r3, #8
 800a43c:	d036      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b1e      	cmp	r3, #30
 800a446:	d031      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b1f      	cmp	r3, #31
 800a450:	d02c      	beq.n	800a4ac <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7fc f92a 	bl	80066ac <MUX>
						if(b->_enviaruart==1)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d124      	bne.n	800a4ac <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7fc fa86 	bl	8006974 <AT_ESP8266_ND>
 800a468:	4602      	mov	r2, r0
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d109      	bne.n	800a496 <WiFi_Conn_ND+0x702>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a48e:	4619      	mov	r1, r3
 800a490:	4610      	mov	r0, r2
 800a492:	f7f7 f865 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	2364      	movs	r3, #100	; 0x64
 800a4a6:	68b8      	ldr	r0, [r7, #8]
 800a4a8:	f7fb f858 	bl	800555c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d009      	beq.n	800a4ca <WiFi_Conn_ND+0x736>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	2b07      	cmp	r3, #7
 800a4be:	d004      	beq.n	800a4ca <WiFi_Conn_ND+0x736>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d104      	bne.n	800a4d4 <WiFi_Conn_ND+0x740>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f240 1299 	movw	r2, #409	; 0x199
 800a4d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d00a      	beq.n	800a4f4 <WiFi_Conn_ND+0x760>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b1e      	cmp	r3, #30
 800a4e6:	d005      	beq.n	800a4f4 <WiFi_Conn_ND+0x760>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ee:	2b1f      	cmp	r3, #31
 800a4f0:	f041 8093 	bne.w	800b61a <WiFi_Conn_ND+0x1886>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f240 1295 	movw	r2, #405	; 0x195
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a4fe:	f001 b88c 	b.w	800b61a <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7fc f890 	bl	8006628 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d112      	bne.n	800a538 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f7fc f89e 	bl	8006654 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2264      	movs	r2, #100	; 0x64
 800a51c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53e:	2b0a      	cmp	r3, #10
 800a540:	d005      	beq.n	800a54e <WiFi_Conn_ND+0x7ba>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a548:	2b0d      	cmp	r3, #13
 800a54a:	f041 8068 	bne.w	800b61e <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7fc f896 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	22c8      	movs	r2, #200	; 0xc8
 800a558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a56c:	f001 b857 	b.w	800b61e <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7fc f859 	bl	8006628 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	2b04      	cmp	r3, #4
 800a586:	d10e      	bne.n	800a5a6 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7fc f863 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2264      	movs	r2, #100	; 0x64
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ac:	2b0a      	cmp	r3, #10
 800a5ae:	d004      	beq.n	800a5ba <WiFi_Conn_ND+0x826>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	2b0d      	cmp	r3, #13
 800a5b8:	d10a      	bne.n	800a5d0 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7fc f860 	bl	8006680 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	22c8      	movs	r2, #200	; 0xc8
 800a5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7fc f881 	bl	80066d8 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a5e8:	f001 b83a 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a5f6:	d045      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d040      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d03b      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a612:	2b02      	cmp	r3, #2
 800a614:	d036      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61c:	2b1b      	cmp	r3, #27
 800a61e:	d031      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a626:	2b21      	cmp	r3, #33	; 0x21
 800a628:	d02c      	beq.n	800a684 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7fc f854 	bl	80066d8 <IPDef>
						if(b->_enviaruart==1)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a636:	2b01      	cmp	r3, #1
 800a638:	d124      	bne.n	800a684 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7fc f99a 	bl	8006974 <AT_ESP8266_ND>
 800a640:	4602      	mov	r2, r0
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a656:	2b01      	cmp	r3, #1
 800a658:	d109      	bne.n	800a66e <WiFi_Conn_ND+0x8da>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7f6 ff79 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	2364      	movs	r3, #100	; 0x64
 800a67e:	68b8      	ldr	r0, [r7, #8]
 800a680:	f7fa ff6c 	bl	800555c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d004      	beq.n	800a698 <WiFi_Conn_ND+0x904>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a694:	2b1b      	cmp	r3, #27
 800a696:	d104      	bne.n	800a6a2 <WiFi_Conn_ND+0x90e>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d005      	beq.n	800a6b8 <WiFi_Conn_ND+0x924>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b2:	2b21      	cmp	r3, #33	; 0x21
 800a6b4:	f040 87b5 	bne.w	800b622 <WiFi_Conn_ND+0x188e>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a6c2:	f000 bfae 	b.w	800b622 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7fb ffae 	bl	8006628 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d004      	beq.n	800a6e0 <WiFi_Conn_ND+0x94c>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d112      	bne.n	800a706 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7fb ffb7 	bl	8006654 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2264      	movs	r2, #100	; 0x64
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70c:	2b0a      	cmp	r3, #10
 800a70e:	d005      	beq.n	800a71c <WiFi_Conn_ND+0x988>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a716:	2b0d      	cmp	r3, #13
 800a718:	f040 8785 	bne.w	800b626 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7fb ffaf 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	22c8      	movs	r2, #200	; 0xc8
 800a726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a73a:	f000 bf74 	b.w	800b626 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7fb ff72 	bl	8006628 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d112      	bne.n	800a774 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7fb ff80 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2264      	movs	r2, #100	; 0x64
 800a758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77a:	2b0a      	cmp	r3, #10
 800a77c:	d004      	beq.n	800a788 <WiFi_Conn_ND+0x9f4>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a784:	2b0d      	cmp	r3, #13
 800a786:	d10e      	bne.n	800a7a6 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7fb ff79 	bl	8006680 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	22c8      	movs	r2, #200	; 0xc8
 800a792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d111      	bne.n	800a7d4 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7fb ffbd 	bl	8006730 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a7d0:	f000 bf46 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7fb ff53 	bl	8006680 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	22c8      	movs	r2, #200	; 0xc8
 800a7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a7f2:	f000 bf35 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a800:	d04a      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d045      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	2b01      	cmp	r3, #1
 800a814:	d040      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81c:	2b0a      	cmp	r3, #10
 800a81e:	d03b      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a826:	2b0e      	cmp	r3, #14
 800a828:	d036      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a830:	2b0f      	cmp	r3, #15
 800a832:	d031      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83a:	2b10      	cmp	r3, #16
 800a83c:	d02c      	beq.n	800a898 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7fb ff76 	bl	8006730 <ConectarTCP>
						if(b->_enviaruart==1)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d124      	bne.n	800a898 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7fc f890 	bl	8006974 <AT_ESP8266_ND>
 800a854:	4602      	mov	r2, r0
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d109      	bne.n	800a882 <WiFi_Conn_ND+0xaee>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7f6 fe6f 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a88e:	b29a      	uxth	r2, r3
 800a890:	2364      	movs	r3, #100	; 0x64
 800a892:	68b8      	ldr	r0, [r7, #8]
 800a894:	f7fa fe62 	bl	800555c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d009      	beq.n	800a8b6 <WiFi_Conn_ND+0xb22>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a8:	2b0e      	cmp	r3, #14
 800a8aa:	d004      	beq.n	800a8b6 <WiFi_Conn_ND+0xb22>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	d106      	bne.n	800a8c4 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f240 2261 	movw	r2, #609	; 0x261
 800a8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a8c0:	f000 beb3 	b.w	800b62a <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d005      	beq.n	800a8da <WiFi_Conn_ND+0xb46>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d4:	2b10      	cmp	r3, #16
 800a8d6:	f040 86a8 	bne.w	800b62a <WiFi_Conn_ND+0x1896>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f240 225d 	movw	r2, #605	; 0x25d
 800a8e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a8e4:	f000 bea1 	b.w	800b62a <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7fb fe9d 	bl	8006628 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d112      	bne.n	800a91e <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7fb feab 	bl	8006654 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2264      	movs	r2, #100	; 0x64
 800a902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a924:	2b0a      	cmp	r3, #10
 800a926:	d004      	beq.n	800a932 <WiFi_Conn_ND+0xb9e>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92e:	2b0d      	cmp	r3, #13
 800a930:	d10e      	bne.n	800a950 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7fb fea4 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22c8      	movs	r2, #200	; 0xc8
 800a93c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a956:	2b02      	cmp	r3, #2
 800a958:	d00a      	beq.n	800a970 <WiFi_Conn_ND+0xbdc>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a960:	2b10      	cmp	r3, #16
 800a962:	d005      	beq.n	800a970 <WiFi_Conn_ND+0xbdc>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96a:	2b0e      	cmp	r3, #14
 800a96c:	f040 865f 	bne.w	800b62e <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7fb fedd 	bl	8006730 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a990:	f000 be4d 	b.w	800b62e <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7fb fe47 	bl	8006628 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d112      	bne.n	800a9ca <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f7fb fe55 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2264      	movs	r2, #100	; 0x64
 800a9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d0:	2b0a      	cmp	r3, #10
 800a9d2:	d004      	beq.n	800a9de <WiFi_Conn_ND+0xc4a>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9da:	2b0d      	cmp	r3, #13
 800a9dc:	d10e      	bne.n	800a9fc <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7fb fe4e 	bl	8006680 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	22c8      	movs	r2, #200	; 0xc8
 800a9e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d004      	beq.n	800aa10 <WiFi_Conn_ND+0xc7c>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0c:	2b10      	cmp	r3, #16
 800aa0e:	d10f      	bne.n	800aa30 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7fb fe8d 	bl	8006730 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	2b0e      	cmp	r3, #14
 800aa38:	d005      	beq.n	800aa46 <WiFi_Conn_ND+0xcb2>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa40:	2b0f      	cmp	r3, #15
 800aa42:	f040 85f6 	bne.w	800b632 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	f240 85f0 	bls.w	800b632 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7fb feae 	bl	80067b4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800aa72:	f000 bdde 	b.w	800b632 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800aa80:	d054      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d04f      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa92:	2b0a      	cmp	r3, #10
 800aa94:	d04a      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9c:	2b10      	cmp	r3, #16
 800aa9e:	d045      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa6:	2b11      	cmp	r3, #17
 800aaa8:	d040      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab0:	2b14      	cmp	r3, #20
 800aab2:	d03b      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	2b12      	cmp	r3, #18
 800aabc:	d036      	beq.n	800ab2c <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d907      	bls.n	800aad8 <WiFi_Conn_ND+0xd44>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7fb fe6e 	bl	80067b4 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d124      	bne.n	800ab2c <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7fb ff46 	bl	8006974 <AT_ESP8266_ND>
 800aae8:	4602      	mov	r2, r0
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d109      	bne.n	800ab16 <WiFi_Conn_ND+0xd82>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7f6 fd25 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	2364      	movs	r3, #100	; 0x64
 800ab26:	68b8      	ldr	r0, [r7, #8]
 800ab28:	f7fa fd18 	bl	800555c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ab36:	d13b      	bne.n	800abb0 <WiFi_Conn_ND+0xe1c>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d136      	bne.n	800abb0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d031      	beq.n	800abb0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab52:	2b0a      	cmp	r3, #10
 800ab54:	d02c      	beq.n	800abb0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5c:	2b10      	cmp	r3, #16
 800ab5e:	d027      	beq.n	800abb0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab66:	2b11      	cmp	r3, #17
 800ab68:	d022      	beq.n	800abb0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab70:	2b12      	cmp	r3, #18
 800ab72:	d01d      	beq.n	800abb0 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d109      	bne.n	800ab9a <WiFi_Conn_ND+0xe06>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab92:	4619      	mov	r1, r3
 800ab94:	4610      	mov	r0, r2
 800ab96:	f7f6 fce3 	bl	8001560 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	2364      	movs	r3, #100	; 0x64
 800abaa:	68b8      	ldr	r0, [r7, #8]
 800abac:	f7fa fcd6 	bl	800555c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb6:	2b13      	cmp	r3, #19
 800abb8:	d104      	bne.n	800abc4 <WiFi_Conn_ND+0xe30>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f240 22c5 	movw	r2, #709	; 0x2c5
 800abc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d014      	beq.n	800abf8 <WiFi_Conn_ND+0xe64>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd4:	2b0a      	cmp	r3, #10
 800abd6:	d00f      	beq.n	800abf8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	2b10      	cmp	r3, #16
 800abe0:	d00a      	beq.n	800abf8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe8:	2b11      	cmp	r3, #17
 800abea:	d005      	beq.n	800abf8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	2b12      	cmp	r3, #18
 800abf4:	f040 851f 	bne.w	800b636 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f240 22c1 	movw	r2, #705	; 0x2c1
 800abfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ac02:	f000 bd18 	b.w	800b636 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7fb fd0e 	bl	8006628 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d112      	bne.n	800ac3c <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7fb fd1c 	bl	8006654 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2264      	movs	r2, #100	; 0x64
 800ac20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac42:	2b0a      	cmp	r3, #10
 800ac44:	d004      	beq.n	800ac50 <WiFi_Conn_ND+0xebc>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b0d      	cmp	r3, #13
 800ac4e:	d10e      	bne.n	800ac6e <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7fb fd15 	bl	8006680 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	22c8      	movs	r2, #200	; 0xc8
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	2b0c      	cmp	r3, #12
 800ac76:	d10f      	bne.n	800ac98 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fb fd59 	bl	8006730 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d00f      	beq.n	800acc2 <WiFi_Conn_ND+0xf2e>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca8:	2b10      	cmp	r3, #16
 800acaa:	d00a      	beq.n	800acc2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb2:	2b11      	cmp	r3, #17
 800acb4:	d005      	beq.n	800acc2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acbc:	2b12      	cmp	r3, #18
 800acbe:	f040 84bc 	bne.w	800b63a <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7fb fd34 	bl	8006730 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ace2:	f000 bcaa 	b.w	800b63a <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7fb fc9e 	bl	8006628 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d112      	bne.n	800ad1c <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7fb fcac 	bl	8006654 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2264      	movs	r2, #100	; 0x64
 800ad00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad22:	2b0a      	cmp	r3, #10
 800ad24:	d004      	beq.n	800ad30 <WiFi_Conn_ND+0xf9c>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2c:	2b0d      	cmp	r3, #13
 800ad2e:	d10e      	bne.n	800ad4e <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7fb fca5 	bl	8006680 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	22c8      	movs	r2, #200	; 0xc8
 800ad3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d00e      	beq.n	800ad76 <WiFi_Conn_ND+0xfe2>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5e:	2b0b      	cmp	r3, #11
 800ad60:	d009      	beq.n	800ad76 <WiFi_Conn_ND+0xfe2>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad68:	2b0c      	cmp	r3, #12
 800ad6a:	d004      	beq.n	800ad76 <WiFi_Conn_ND+0xfe2>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d10f      	bne.n	800ad96 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7fb fcda 	bl	8006730 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ad96:	20c8      	movs	r0, #200	; 0xc8
 800ad98:	f7f7 ff2c 	bl	8002bf4 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d916      	bls.n	800add4 <WiFi_Conn_ND+0x1040>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d011      	beq.n	800add4 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7fb fcff 	bl	80067b4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800adbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800add0:	f000 bc46 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f240 2261 	movw	r2, #609	; 0x261
 800adda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800adee:	f000 bc37 	b.w	800b660 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800adfc:	d045      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d040      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0e:	2b0a      	cmp	r3, #10
 800ae10:	d03b      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	2b15      	cmp	r3, #21
 800ae1a:	d036      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae22:	2b16      	cmp	r3, #22
 800ae24:	d031      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2c:	2b17      	cmp	r3, #23
 800ae2e:	d02c      	beq.n	800ae8a <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7fb fc93 	bl	800675c <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d124      	bne.n	800ae8a <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7fb fd97 	bl	8006974 <AT_ESP8266_ND>
 800ae46:	4602      	mov	r2, r0
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d109      	bne.n	800ae74 <WiFi_Conn_ND+0x10e0>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7f6 fb76 	bl	8001560 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	2364      	movs	r3, #100	; 0x64
 800ae84:	68b8      	ldr	r0, [r7, #8]
 800ae86:	f7fa fb69 	bl	800555c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae90:	2b15      	cmp	r3, #21
 800ae92:	d004      	beq.n	800ae9e <WiFi_Conn_ND+0x110a>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	2b17      	cmp	r3, #23
 800ae9c:	d104      	bne.n	800aea8 <WiFi_Conn_ND+0x1114>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f240 3229 	movw	r2, #809	; 0x329
 800aea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeae:	2b16      	cmp	r3, #22
 800aeb0:	f040 83c5 	bne.w	800b63e <WiFi_Conn_ND+0x18aa>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f240 3225 	movw	r2, #805	; 0x325
 800aeba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800aebe:	e3be      	b.n	800b63e <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7fb fbb1 	bl	8006628 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d112      	bne.n	800aef6 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7fb fbbf 	bl	8006654 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2264      	movs	r2, #100	; 0x64
 800aeda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aefc:	2b0a      	cmp	r3, #10
 800aefe:	d004      	beq.n	800af0a <WiFi_Conn_ND+0x1176>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af06:	2b0d      	cmp	r3, #13
 800af08:	d10e      	bne.n	800af28 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7fb fbb8 	bl	8006680 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	22c8      	movs	r2, #200	; 0xc8
 800af14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d005      	beq.n	800af3e <WiFi_Conn_ND+0x11aa>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af38:	2b10      	cmp	r3, #16
 800af3a:	f040 8382 	bne.w	800b642 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7fb fbf6 	bl	8006730 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800af5e:	e370      	b.n	800b642 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7fb fb61 	bl	8006628 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d112      	bne.n	800af96 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f7fb fb6f 	bl	8006654 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2264      	movs	r2, #100	; 0x64
 800af7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9c:	2b0a      	cmp	r3, #10
 800af9e:	d004      	beq.n	800afaa <WiFi_Conn_ND+0x1216>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa6:	2b0d      	cmp	r3, #13
 800afa8:	d10e      	bne.n	800afc8 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7fb fb68 	bl	8006680 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	22c8      	movs	r2, #200	; 0xc8
 800afb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d005      	beq.n	800afde <WiFi_Conn_ND+0x124a>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd8:	2b10      	cmp	r3, #16
 800afda:	f040 8334 	bne.w	800b646 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7fb fba6 	bl	8006730 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800affe:	e322      	b.n	800b646 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7fb fb11 	bl	8006628 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d112      	bne.n	800b036 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7fb fb1f 	bl	8006654 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2264      	movs	r2, #100	; 0x64
 800b01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b03c:	2b0a      	cmp	r3, #10
 800b03e:	d004      	beq.n	800b04a <WiFi_Conn_ND+0x12b6>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b046:	2b0d      	cmp	r3, #13
 800b048:	d10e      	bne.n	800b068 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7fb fb18 	bl	8006680 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	22c8      	movs	r2, #200	; 0xc8
 800b054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d005      	beq.n	800b07e <WiFi_Conn_ND+0x12ea>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b078:	2b10      	cmp	r3, #16
 800b07a:	f040 82e6 	bne.w	800b64a <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7fb fb56 	bl	8006730 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b08a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b09e:	e2d4      	b.n	800b64a <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7fb fac1 	bl	8006628 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	d112      	bne.n	800b0d6 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7fb facf 	bl	8006654 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2264      	movs	r2, #100	; 0x64
 800b0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0dc:	2b0a      	cmp	r3, #10
 800b0de:	d004      	beq.n	800b0ea <WiFi_Conn_ND+0x1356>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e6:	2b0d      	cmp	r3, #13
 800b0e8:	d10e      	bne.n	800b108 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7fb fac8 	bl	8006680 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	22c8      	movs	r2, #200	; 0xc8
 800b0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d005      	beq.n	800b11e <WiFi_Conn_ND+0x138a>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b118:	2b10      	cmp	r3, #16
 800b11a:	f040 8298 	bne.w	800b64e <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7fb fb06 	bl	8006730 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b13e:	e286      	b.n	800b64e <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7fb fa71 	bl	8006628 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b154:	2b04      	cmp	r3, #4
 800b156:	d112      	bne.n	800b17e <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7fb fa7b 	bl	8006654 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2264      	movs	r2, #100	; 0x64
 800b162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b184:	2b0a      	cmp	r3, #10
 800b186:	d004      	beq.n	800b192 <WiFi_Conn_ND+0x13fe>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18e:	2b0d      	cmp	r3, #13
 800b190:	d10e      	bne.n	800b1b0 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f7fb fa74 	bl	8006680 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	22c8      	movs	r2, #200	; 0xc8
 800b19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d004      	beq.n	800b1c4 <WiFi_Conn_ND+0x1430>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c0:	2b10      	cmp	r3, #16
 800b1c2:	d10f      	bne.n	800b1e4 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7fb fab3 	bl	8006730 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	f040 8231 	bne.w	800b652 <WiFi_Conn_ND+0x18be>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 822b 	beq.w	800b652 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7fb fac3 	bl	8006788 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b21c:	e219      	b.n	800b652 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b228:	d063      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b230:	2b02      	cmp	r3, #2
 800b232:	d05e      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b23a:	2b0a      	cmp	r3, #10
 800b23c:	d059      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b244:	2b0b      	cmp	r3, #11
 800b246:	d054      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b24e:	2b0c      	cmp	r3, #12
 800b250:	d04f      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b258:	2b10      	cmp	r3, #16
 800b25a:	d04a      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b262:	2b11      	cmp	r3, #17
 800b264:	d045      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b26c:	2b12      	cmp	r3, #18
 800b26e:	d040      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b276:	2b13      	cmp	r3, #19
 800b278:	d03b      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b280:	2b16      	cmp	r3, #22
 800b282:	d036      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28a:	2b19      	cmp	r3, #25
 800b28c:	d031      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d02c      	beq.n	800b2f2 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7fb fa75 	bl	8006788 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d124      	bne.n	800b2f2 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f7fb fb63 	bl	8006974 <AT_ESP8266_ND>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d109      	bne.n	800b2dc <WiFi_Conn_ND+0x1548>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	f7f6 f942 	bl	8001560 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	2364      	movs	r3, #100	; 0x64
 800b2ec:	68b8      	ldr	r0, [r7, #8]
 800b2ee:	f7fa f935 	bl	800555c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b2fc:	d154      	bne.n	800b3a8 <WiFi_Conn_ND+0x1614>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b304:	2b01      	cmp	r3, #1
 800b306:	d14f      	bne.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d04a      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b318:	2b0a      	cmp	r3, #10
 800b31a:	d045      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b322:	2b0b      	cmp	r3, #11
 800b324:	d040      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b32c:	2b0c      	cmp	r3, #12
 800b32e:	d03b      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b336:	2b10      	cmp	r3, #16
 800b338:	d036      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b340:	2b11      	cmp	r3, #17
 800b342:	d031      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b34a:	2b12      	cmp	r3, #18
 800b34c:	d02c      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b354:	2b13      	cmp	r3, #19
 800b356:	d027      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b35e:	2b16      	cmp	r3, #22
 800b360:	d022      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b368:	2b19      	cmp	r3, #25
 800b36a:	d01d      	beq.n	800b3a8 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d109      	bne.n	800b392 <WiFi_Conn_ND+0x15fe>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7f6 f8e7 	bl	8001560 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	2364      	movs	r3, #100	; 0x64
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	f7fa f8da 	bl	800555c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ae:	2b13      	cmp	r3, #19
 800b3b0:	d104      	bne.n	800b3bc <WiFi_Conn_ND+0x1628>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f240 328d 	movw	r2, #909	; 0x38d
 800b3b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d02d      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d028      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b3d6:	2b0a      	cmp	r3, #10
 800b3d8:	d023      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e0:	2b0b      	cmp	r3, #11
 800b3e2:	d01e      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b3ea:	2b0c      	cmp	r3, #12
 800b3ec:	d019      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f4:	2b10      	cmp	r3, #16
 800b3f6:	d014      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b3fe:	2b11      	cmp	r3, #17
 800b400:	d00f      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b408:	2b12      	cmp	r3, #18
 800b40a:	d00a      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b412:	2b16      	cmp	r3, #22
 800b414:	d005      	beq.n	800b422 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41c:	2b19      	cmp	r3, #25
 800b41e:	f040 811a 	bne.w	800b656 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f240 3289 	movw	r2, #905	; 0x389
 800b428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b42c:	e113      	b.n	800b656 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7fb f8fa 	bl	8006628 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43a:	2b04      	cmp	r3, #4
 800b43c:	d009      	beq.n	800b452 <WiFi_Conn_ND+0x16be>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b444:	2b0b      	cmp	r3, #11
 800b446:	d004      	beq.n	800b452 <WiFi_Conn_ND+0x16be>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44e:	2b0c      	cmp	r3, #12
 800b450:	d112      	bne.n	800b478 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7fb f8fe 	bl	8006654 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2264      	movs	r2, #100	; 0x64
 800b45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47e:	2b0a      	cmp	r3, #10
 800b480:	d004      	beq.n	800b48c <WiFi_Conn_ND+0x16f8>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b488:	2b0d      	cmp	r3, #13
 800b48a:	d10e      	bne.n	800b4aa <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7fb f8f7 	bl	8006680 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	22c8      	movs	r2, #200	; 0xc8
 800b496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	2b16      	cmp	r3, #22
 800b4b2:	d10c      	bne.n	800b4ce <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f240 3225 	movw	r2, #805	; 0x325
 800b4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d4:	2b18      	cmp	r3, #24
 800b4d6:	d10c      	bne.n	800b4f2 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f240 3229 	movw	r2, #809	; 0x329
 800b4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f8:	2b19      	cmp	r3, #25
 800b4fa:	d008      	beq.n	800b50e <WiFi_Conn_ND+0x177a>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b502:	2b11      	cmp	r3, #17
 800b504:	d003      	beq.n	800b50e <WiFi_Conn_ND+0x177a>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2212      	movs	r2, #18
 800b50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b514:	2b01      	cmp	r3, #1
 800b516:	f040 80a0 	bne.w	800b65a <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b534:	e091      	b.n	800b65a <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7fb f876 	bl	8006628 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b542:	2b04      	cmp	r3, #4
 800b544:	d009      	beq.n	800b55a <WiFi_Conn_ND+0x17c6>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b54c:	2b0b      	cmp	r3, #11
 800b54e:	d004      	beq.n	800b55a <WiFi_Conn_ND+0x17c6>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b556:	2b0c      	cmp	r3, #12
 800b558:	d112      	bne.n	800b580 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7fb f87a 	bl	8006654 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2264      	movs	r2, #100	; 0x64
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b586:	2b0a      	cmp	r3, #10
 800b588:	d004      	beq.n	800b594 <WiFi_Conn_ND+0x1800>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b590:	2b0d      	cmp	r3, #13
 800b592:	d10e      	bne.n	800b5b2 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7fb f873 	bl	8006680 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	22c8      	movs	r2, #200	; 0xc8
 800b59e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d004      	beq.n	800b5c6 <WiFi_Conn_ND+0x1832>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d14b      	bne.n	800b65e <WiFi_Conn_ND+0x18ca>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d046      	beq.n	800b65e <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7fb f8d9 	bl	8006788 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b600:	e02d      	b.n	800b65e <WiFi_Conn_ND+0x18ca>
			break;
 800b602:	bf00      	nop
 800b604:	e02c      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b606:	bf00      	nop
 800b608:	e02a      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b60a:	bf00      	nop
 800b60c:	e028      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b60e:	bf00      	nop
 800b610:	e026      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b612:	bf00      	nop
 800b614:	e024      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b616:	bf00      	nop
 800b618:	e022      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b61a:	bf00      	nop
 800b61c:	e020      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b61e:	bf00      	nop
 800b620:	e01e      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b622:	bf00      	nop
 800b624:	e01c      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b626:	bf00      	nop
 800b628:	e01a      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b62a:	bf00      	nop
 800b62c:	e018      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b62e:	bf00      	nop
 800b630:	e016      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b632:	bf00      	nop
 800b634:	e014      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b636:	bf00      	nop
 800b638:	e012      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
			break;
 800b63a:	bf00      	nop
 800b63c:	e010      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b63e:	bf00      	nop
 800b640:	e00e      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b642:	bf00      	nop
 800b644:	e00c      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b646:	bf00      	nop
 800b648:	e00a      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b64a:	bf00      	nop
 800b64c:	e008      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b64e:	bf00      	nop
 800b650:	e006      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b652:	bf00      	nop
 800b654:	e004      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b656:	bf00      	nop
 800b658:	e002      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <WiFi_Conn_ND+0x18cc>
						break;
 800b65e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop

0800b670 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b670:	b5b0      	push	{r4, r5, r7, lr}
 800b672:	b09c      	sub	sp, #112	; 0x70
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b67e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b682:	2200      	movs	r2, #0
 800b684:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b68e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b692:	f7f4 fdaf 	bl	80001f4 <strlen>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b69e:	4413      	add	r3, r2
 800b6a0:	4aeb      	ldr	r2, [pc, #940]	; (800ba50 <httpPOST+0x3e0>)
 800b6a2:	6810      	ldr	r0, [r2, #0]
 800b6a4:	6018      	str	r0, [r3, #0]
 800b6a6:	8892      	ldrh	r2, [r2, #4]
 800b6a8:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7f4 fda2 	bl	80001f4 <strlen>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	68f9      	ldr	r1, [r7, #12]
 800b6b6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b6ba:	f003 fbb9 	bl	800ee30 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b6be:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b6c2:	f7f4 fd97 	bl	80001f4 <strlen>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6ce:	4413      	add	r3, r2
 800b6d0:	49e0      	ldr	r1, [pc, #896]	; (800ba54 <httpPOST+0x3e4>)
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	cb03      	ldmia	r3!, {r0, r1}
 800b6d8:	6010      	str	r0, [r2, #0]
 800b6da:	6051      	str	r1, [r2, #4]
 800b6dc:	8819      	ldrh	r1, [r3, #0]
 800b6de:	789b      	ldrb	r3, [r3, #2]
 800b6e0:	8111      	strh	r1, [r2, #8]
 800b6e2:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b6e4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b6e8:	f7f4 fd84 	bl	80001f4 <strlen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4ad8      	ldr	r2, [pc, #864]	; (800ba58 <httpPOST+0x3e8>)
 800b6f8:	8811      	ldrh	r1, [r2, #0]
 800b6fa:	7892      	ldrb	r2, [r2, #2]
 800b6fc:	8019      	strh	r1, [r3, #0]
 800b6fe:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b700:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b704:	f7f4 fd76 	bl	80001f4 <strlen>
 800b708:	4603      	mov	r3, r0
 800b70a:	461a      	mov	r2, r3
 800b70c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b710:	4413      	add	r3, r2
 800b712:	4ad2      	ldr	r2, [pc, #840]	; (800ba5c <httpPOST+0x3ec>)
 800b714:	6810      	ldr	r0, [r2, #0]
 800b716:	6018      	str	r0, [r3, #0]
 800b718:	8891      	ldrh	r1, [r2, #4]
 800b71a:	7992      	ldrb	r2, [r2, #6]
 800b71c:	8099      	strh	r1, [r3, #4]
 800b71e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b720:	68b8      	ldr	r0, [r7, #8]
 800b722:	f7f4 fd67 	bl	80001f4 <strlen>
 800b726:	4603      	mov	r3, r0
 800b728:	461a      	mov	r2, r3
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b730:	f003 fb7e 	bl	800ee30 <strncat>
	strncat(post,":",1);
 800b734:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b738:	f7f4 fd5c 	bl	80001f4 <strlen>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b744:	4413      	add	r3, r2
 800b746:	49c6      	ldr	r1, [pc, #792]	; (800ba60 <httpPOST+0x3f0>)
 800b748:	461a      	mov	r2, r3
 800b74a:	460b      	mov	r3, r1
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7f4 fd4f 	bl	80001f4 <strlen>
 800b756:	4603      	mov	r3, r0
 800b758:	461a      	mov	r2, r3
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b760:	f003 fb66 	bl	800ee30 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b764:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b768:	f7f4 fd44 	bl	80001f4 <strlen>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b774:	4413      	add	r3, r2
 800b776:	4ab8      	ldr	r2, [pc, #736]	; (800ba58 <httpPOST+0x3e8>)
 800b778:	8811      	ldrh	r1, [r2, #0]
 800b77a:	7892      	ldrb	r2, [r2, #2]
 800b77c:	8019      	strh	r1, [r3, #0]
 800b77e:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b780:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b784:	f7f4 fd36 	bl	80001f4 <strlen>
 800b788:	4603      	mov	r3, r0
 800b78a:	461a      	mov	r2, r3
 800b78c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b790:	4413      	add	r3, r2
 800b792:	4ab4      	ldr	r2, [pc, #720]	; (800ba64 <httpPOST+0x3f4>)
 800b794:	461d      	mov	r5, r3
 800b796:	4614      	mov	r4, r2
 800b798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b79a:	6028      	str	r0, [r5, #0]
 800b79c:	6069      	str	r1, [r5, #4]
 800b79e:	60aa      	str	r2, [r5, #8]
 800b7a0:	60eb      	str	r3, [r5, #12]
 800b7a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b7a4:	6128      	str	r0, [r5, #16]
 800b7a6:	6169      	str	r1, [r5, #20]
 800b7a8:	61aa      	str	r2, [r5, #24]
 800b7aa:	8823      	ldrh	r3, [r4, #0]
 800b7ac:	78a2      	ldrb	r2, [r4, #2]
 800b7ae:	83ab      	strh	r3, [r5, #28]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b7b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b7b8:	f7f4 fd1c 	bl	80001f4 <strlen>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7c4:	4413      	add	r3, r2
 800b7c6:	4aa4      	ldr	r2, [pc, #656]	; (800ba58 <httpPOST+0x3e8>)
 800b7c8:	8811      	ldrh	r1, [r2, #0]
 800b7ca:	7892      	ldrb	r2, [r2, #2]
 800b7cc:	8019      	strh	r1, [r3, #0]
 800b7ce:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b7d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b7d4:	f7f4 fd0e 	bl	80001f4 <strlen>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7e0:	4413      	add	r3, r2
 800b7e2:	4aa1      	ldr	r2, [pc, #644]	; (800ba68 <httpPOST+0x3f8>)
 800b7e4:	461c      	mov	r4, r3
 800b7e6:	4615      	mov	r5, r2
 800b7e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7ea:	6020      	str	r0, [r4, #0]
 800b7ec:	6061      	str	r1, [r4, #4]
 800b7ee:	60a2      	str	r2, [r4, #8]
 800b7f0:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b7f8:	887b      	ldrh	r3, [r7, #2]
 800b7fa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f003 fa1d 	bl	800ec40 <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b806:	2300      	movs	r3, #0
 800b808:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b80c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b810:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b814:	4611      	mov	r1, r2
 800b816:	4618      	mov	r0, r3
 800b818:	f003 fa12 	bl	800ec40 <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b81c:	2300      	movs	r3, #0
 800b81e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b822:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b826:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f003 fa07 	bl	800ec40 <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b832:	2300      	movs	r3, #0
 800b834:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800b838:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b83c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f003 f9fc 	bl	800ec40 <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b848:	2300      	movs	r3, #0
 800b84a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800b84e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b852:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b856:	4611      	mov	r1, r2
 800b858:	4618      	mov	r0, r3
 800b85a:	f003 f9f1 	bl	800ec40 <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b85e:	2300      	movs	r3, #0
 800b860:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b864:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b868:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f003 f9e6 	bl	800ec40 <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b874:	2300      	movs	r3, #0
 800b876:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800b87a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b87e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b882:	4611      	mov	r1, r2
 800b884:	4618      	mov	r0, r3
 800b886:	f003 f9db 	bl	800ec40 <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b88a:	2300      	movs	r3, #0
 800b88c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800b890:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f003 f9d0 	bl	800ec40 <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800b8a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b8aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f003 f9c5 	bl	800ec40 <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800b8bc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b8c0:	f107 0220 	add.w	r2, r7, #32
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f003 f9ba 	bl	800ec40 <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b8d0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b8d4:	f107 0218 	add.w	r2, r7, #24
 800b8d8:	4611      	mov	r1, r2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f003 f9b0 	bl	800ec40 <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b8e0:	4862      	ldr	r0, [pc, #392]	; (800ba6c <httpPOST+0x3fc>)
 800b8e2:	f7f4 fc87 	bl	80001f4 <strlen>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4960      	ldr	r1, [pc, #384]	; (800ba6c <httpPOST+0x3fc>)
 800b8ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8f0:	f003 fa9e 	bl	800ee30 <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b8f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f4 fc7b 	bl	80001f4 <strlen>
 800b8fe:	4602      	mov	r2, r0
 800b900:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b904:	4619      	mov	r1, r3
 800b906:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b90a:	f003 fa91 	bl	800ee30 <strncat>
	strncat(body,filtro,strlen(filtro));
 800b90e:	4858      	ldr	r0, [pc, #352]	; (800ba70 <httpPOST+0x400>)
 800b910:	f7f4 fc70 	bl	80001f4 <strlen>
 800b914:	4603      	mov	r3, r0
 800b916:	461a      	mov	r2, r3
 800b918:	4955      	ldr	r1, [pc, #340]	; (800ba70 <httpPOST+0x400>)
 800b91a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b91e:	f003 fa87 	bl	800ee30 <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b922:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b926:	4618      	mov	r0, r3
 800b928:	f7f4 fc64 	bl	80001f4 <strlen>
 800b92c:	4602      	mov	r2, r0
 800b92e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b932:	4619      	mov	r1, r3
 800b934:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b938:	f003 fa7a 	bl	800ee30 <strncat>
	strncat(body,ev1,strlen(ev1));
 800b93c:	484d      	ldr	r0, [pc, #308]	; (800ba74 <httpPOST+0x404>)
 800b93e:	f7f4 fc59 	bl	80001f4 <strlen>
 800b942:	4603      	mov	r3, r0
 800b944:	461a      	mov	r2, r3
 800b946:	494b      	ldr	r1, [pc, #300]	; (800ba74 <httpPOST+0x404>)
 800b948:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b94c:	f003 fa70 	bl	800ee30 <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b954:	4618      	mov	r0, r3
 800b956:	f7f4 fc4d 	bl	80001f4 <strlen>
 800b95a:	4602      	mov	r2, r0
 800b95c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b960:	4619      	mov	r1, r3
 800b962:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b966:	f003 fa63 	bl	800ee30 <strncat>
	strncat(body,ev2,strlen(ev2));
 800b96a:	4843      	ldr	r0, [pc, #268]	; (800ba78 <httpPOST+0x408>)
 800b96c:	f7f4 fc42 	bl	80001f4 <strlen>
 800b970:	4603      	mov	r3, r0
 800b972:	461a      	mov	r2, r3
 800b974:	4940      	ldr	r1, [pc, #256]	; (800ba78 <httpPOST+0x408>)
 800b976:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b97a:	f003 fa59 	bl	800ee30 <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b97e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b982:	4618      	mov	r0, r3
 800b984:	f7f4 fc36 	bl	80001f4 <strlen>
 800b988:	4602      	mov	r2, r0
 800b98a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b98e:	4619      	mov	r1, r3
 800b990:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b994:	f003 fa4c 	bl	800ee30 <strncat>
	strncat(body,ev3,strlen(ev3));
 800b998:	4838      	ldr	r0, [pc, #224]	; (800ba7c <httpPOST+0x40c>)
 800b99a:	f7f4 fc2b 	bl	80001f4 <strlen>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4936      	ldr	r1, [pc, #216]	; (800ba7c <httpPOST+0x40c>)
 800b9a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b9a8:	f003 fa42 	bl	800ee30 <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b9ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f4 fc1f 	bl	80001f4 <strlen>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b9c2:	f003 fa35 	bl	800ee30 <strncat>
	strncat(body,ev4,strlen(ev4));
 800b9c6:	482e      	ldr	r0, [pc, #184]	; (800ba80 <httpPOST+0x410>)
 800b9c8:	f7f4 fc14 	bl	80001f4 <strlen>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	492b      	ldr	r1, [pc, #172]	; (800ba80 <httpPOST+0x410>)
 800b9d2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b9d6:	f003 fa2b 	bl	800ee30 <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b9da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f4 fc08 	bl	80001f4 <strlen>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b9f0:	f003 fa1e 	bl	800ee30 <strncat>
	strncat(body,ev5,strlen(ev5));
 800b9f4:	4823      	ldr	r0, [pc, #140]	; (800ba84 <httpPOST+0x414>)
 800b9f6:	f7f4 fbfd 	bl	80001f4 <strlen>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4921      	ldr	r1, [pc, #132]	; (800ba84 <httpPOST+0x414>)
 800ba00:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800ba04:	f003 fa14 	bl	800ee30 <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800ba08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f4 fbf1 	bl	80001f4 <strlen>
 800ba12:	4602      	mov	r2, r0
 800ba14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800ba1e:	f003 fa07 	bl	800ee30 <strncat>
	strncat(body,ev6,strlen(ev6));
 800ba22:	4819      	ldr	r0, [pc, #100]	; (800ba88 <httpPOST+0x418>)
 800ba24:	f7f4 fbe6 	bl	80001f4 <strlen>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	4916      	ldr	r1, [pc, #88]	; (800ba88 <httpPOST+0x418>)
 800ba2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800ba32:	f003 f9fd 	bl	800ee30 <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800ba36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f4 fbda 	bl	80001f4 <strlen>
 800ba40:	4602      	mov	r2, r0
 800ba42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba46:	4619      	mov	r1, r3
 800ba48:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800ba4c:	e01e      	b.n	800ba8c <httpPOST+0x41c>
 800ba4e:	bf00      	nop
 800ba50:	080108a0 	.word	0x080108a0
 800ba54:	080108a8 	.word	0x080108a8
 800ba58:	080108b4 	.word	0x080108b4
 800ba5c:	080108b8 	.word	0x080108b8
 800ba60:	080108c0 	.word	0x080108c0
 800ba64:	080108c4 	.word	0x080108c4
 800ba68:	080108e4 	.word	0x080108e4
 800ba6c:	20000090 	.word	0x20000090
 800ba70:	200000a0 	.word	0x200000a0
 800ba74:	200000b0 	.word	0x200000b0
 800ba78:	200000c0 	.word	0x200000c0
 800ba7c:	200000d0 	.word	0x200000d0
 800ba80:	200000e0 	.word	0x200000e0
 800ba84:	200000f0 	.word	0x200000f0
 800ba88:	20000100 	.word	0x20000100
 800ba8c:	f003 f9d0 	bl	800ee30 <strncat>
	strncat(body,ev7,strlen(ev7));
 800ba90:	484a      	ldr	r0, [pc, #296]	; (800bbbc <httpPOST+0x54c>)
 800ba92:	f7f4 fbaf 	bl	80001f4 <strlen>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4948      	ldr	r1, [pc, #288]	; (800bbbc <httpPOST+0x54c>)
 800ba9c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800baa0:	f003 f9c6 	bl	800ee30 <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800baa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f4 fba3 	bl	80001f4 <strlen>
 800baae:	4602      	mov	r2, r0
 800bab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bab4:	4619      	mov	r1, r3
 800bab6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800baba:	f003 f9b9 	bl	800ee30 <strncat>
	strncat(body,ev8,strlen(ev8));
 800babe:	4840      	ldr	r0, [pc, #256]	; (800bbc0 <httpPOST+0x550>)
 800bac0:	f7f4 fb98 	bl	80001f4 <strlen>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	493d      	ldr	r1, [pc, #244]	; (800bbc0 <httpPOST+0x550>)
 800baca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bace:	f003 f9af 	bl	800ee30 <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800bad2:	f107 0320 	add.w	r3, r7, #32
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7f4 fb8c 	bl	80001f4 <strlen>
 800badc:	4602      	mov	r2, r0
 800bade:	f107 0320 	add.w	r3, r7, #32
 800bae2:	4619      	mov	r1, r3
 800bae4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bae8:	f003 f9a2 	bl	800ee30 <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800baec:	4835      	ldr	r0, [pc, #212]	; (800bbc4 <httpPOST+0x554>)
 800baee:	f7f4 fb81 	bl	80001f4 <strlen>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	4933      	ldr	r1, [pc, #204]	; (800bbc4 <httpPOST+0x554>)
 800baf8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bafc:	f003 f998 	bl	800ee30 <strncat>
	strncat(body,_devId,strlen(_devId));
 800bb00:	f107 0318 	add.w	r3, r7, #24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f4 fb75 	bl	80001f4 <strlen>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	f107 0318 	add.w	r3, r7, #24
 800bb10:	4619      	mov	r1, r3
 800bb12:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb16:	f003 f98b 	bl	800ee30 <strncat>

	strncat(body,"}",strlen("}"));
 800bb1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb1e:	f7f4 fb69 	bl	80001f4 <strlen>
 800bb22:	4603      	mov	r3, r0
 800bb24:	461a      	mov	r2, r3
 800bb26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb2a:	4413      	add	r3, r2
 800bb2c:	4926      	ldr	r1, [pc, #152]	; (800bbc8 <httpPOST+0x558>)
 800bb2e:	461a      	mov	r2, r3
 800bb30:	460b      	mov	r3, r1
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bb36:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb3a:	f7f4 fb5b 	bl	80001f4 <strlen>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	f107 0310 	add.w	r3, r7, #16
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f003 f87a 	bl	800ec40 <INTOA>
	strncat(post,length,strlen(length));
 800bb4c:	f107 0310 	add.w	r3, r7, #16
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f4 fb4f 	bl	80001f4 <strlen>
 800bb56:	4602      	mov	r2, r0
 800bb58:	f107 0310 	add.w	r3, r7, #16
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bb62:	f003 f965 	bl	800ee30 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bb66:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bb6a:	f7f4 fb43 	bl	80001f4 <strlen>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	461a      	mov	r2, r3
 800bb72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb76:	4413      	add	r3, r2
 800bb78:	4a14      	ldr	r2, [pc, #80]	; (800bbcc <httpPOST+0x55c>)
 800bb7a:	6810      	ldr	r0, [r2, #0]
 800bb7c:	6018      	str	r0, [r3, #0]
 800bb7e:	7912      	ldrb	r2, [r2, #4]
 800bb80:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bb82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb86:	f7f4 fb35 	bl	80001f4 <strlen>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d20d      	bcs.n	800bbb0 <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800bb94:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb98:	f7f4 fb2c 	bl	80001f4 <strlen>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800bba4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bba8:	f003 f942 	bl	800ee30 <strncat>
		return 1 ;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <httpPOST+0x542>
	}
		else
		{
			return 0;
 800bbb0:	2300      	movs	r3, #0
		}
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3770      	adds	r7, #112	; 0x70
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000110 	.word	0x20000110
 800bbc0:	20000120 	.word	0x20000120
 800bbc4:	20000130 	.word	0x20000130
 800bbc8:	080108f4 	.word	0x080108f4
 800bbcc:	080108f8 	.word	0x080108f8

0800bbd0 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bbd0:	b5b0      	push	{r4, r5, r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bbe0:	2bf1      	cmp	r3, #241	; 0xf1
 800bbe2:	dd01      	ble.n	800bbe8 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e099      	b.n	800bd1c <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bbe8:	2300      	movs	r3, #0
 800bbea:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bbf2:	f107 0108 	add.w	r1, r7, #8
 800bbf6:	220a      	movs	r2, #10
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f003 f8e7 	bl	800edcc <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7f4 faf1 	bl	80001f4 <strlen>
 800bc12:	4603      	mov	r3, r0
 800bc14:	4423      	add	r3, r4
 800bc16:	4943      	ldr	r1, [pc, #268]	; (800bd24 <LoRa_Send+0x154>)
 800bc18:	461a      	mov	r2, r3
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	cb03      	ldmia	r3!, {r0, r1}
 800bc1e:	6010      	str	r0, [r2, #0]
 800bc20:	6051      	str	r1, [r2, #4]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f103 0516 	add.w	r5, r3, #22
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3316      	adds	r3, #22
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7f4 fadc 	bl	80001f4 <strlen>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4629      	mov	r1, r5
 800bc42:	4620      	mov	r0, r4
 800bc44:	f003 f8f4 	bl	800ee30 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f7f4 fad0 	bl	80001f4 <strlen>
 800bc54:	4603      	mov	r3, r0
 800bc56:	4423      	add	r3, r4
 800bc58:	4933      	ldr	r1, [pc, #204]	; (800bd28 <LoRa_Send+0x158>)
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	881b      	ldrh	r3, [r3, #0]
 800bc60:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc68:	f107 0308 	add.w	r3, r7, #8
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f4 fac1 	bl	80001f4 <strlen>
 800bc72:	4602      	mov	r2, r0
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f003 f8d8 	bl	800ee30 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7f4 fab4 	bl	80001f4 <strlen>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4423      	add	r3, r4
 800bc90:	4925      	ldr	r1, [pc, #148]	; (800bd28 <LoRa_Send+0x158>)
 800bc92:	461a      	mov	r2, r3
 800bc94:	460b      	mov	r3, r1
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7f4 faa7 	bl	80001f4 <strlen>
 800bca6:	4603      	mov	r3, r0
 800bca8:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bcba:	e012      	b.n	800bce2 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bcc6:	7819      	ldrb	r1, [r3, #0]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	4413      	add	r3, r2
 800bcce:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	701a      	strb	r2, [r3, #0]
			la++;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	617b      	str	r3, [r7, #20]
			lc++;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	3301      	adds	r3, #1
 800bce0:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	dbe8      	blt.n	800bcbc <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	617a      	str	r2, [r7, #20]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	220d      	movs	r2, #13
 800bcf6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	617a      	str	r2, [r7, #20]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	4413      	add	r3, r2
 800bd04:	220a      	movs	r2, #10
 800bd06:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	b292      	uxth	r2, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	6838      	ldr	r0, [r7, #0]
 800bd18:	f7f9 fcb2 	bl	8005680 <HAL_UART_Transmit_IT>
	}

}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bdb0      	pop	{r4, r5, r7, pc}
 800bd24:	08010900 	.word	0x08010900
 800bd28:	0801090c 	.word	0x0801090c

0800bd2c <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=1;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800bd56:	bf00      	nop
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
	...

0800bd64 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fa25 	bl	800c1bc <Lora_idSTR>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b10      	cmp	r3, #16
 800bd76:	f200 820c 	bhi.w	800c192 <LoRa_decode+0x42e>
 800bd7a:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <LoRa_decode+0x1c>)
 800bd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd80:	0800bdc5 	.word	0x0800bdc5
 800bd84:	0800be9d 	.word	0x0800be9d
 800bd88:	0800c0d1 	.word	0x0800c0d1
 800bd8c:	0800c0db 	.word	0x0800c0db
 800bd90:	0800c0e5 	.word	0x0800c0e5
 800bd94:	0800c0ef 	.word	0x0800c0ef
 800bd98:	0800c0f9 	.word	0x0800c0f9
 800bd9c:	0800c103 	.word	0x0800c103
 800bda0:	0800c10d 	.word	0x0800c10d
 800bda4:	0800c117 	.word	0x0800c117
 800bda8:	0800c121 	.word	0x0800c121
 800bdac:	0800c161 	.word	0x0800c161
 800bdb0:	0800c16b 	.word	0x0800c16b
 800bdb4:	0800c17f 	.word	0x0800c17f
 800bdb8:	0800c175 	.word	0x0800c175
 800bdbc:	0800c0c7 	.word	0x0800c0c7
 800bdc0:	0800c189 	.word	0x0800c189
	{
		case _OK:
		{
			switch(b->estado)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	2b13      	cmp	r3, #19
 800bdce:	d860      	bhi.n	800be92 <LoRa_decode+0x12e>
 800bdd0:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <LoRa_decode+0x74>)
 800bdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd6:	bf00      	nop
 800bdd8:	0800be29 	.word	0x0800be29
 800bddc:	0800be93 	.word	0x0800be93
 800bde0:	0800be93 	.word	0x0800be93
 800bde4:	0800be93 	.word	0x0800be93
 800bde8:	0800be93 	.word	0x0800be93
 800bdec:	0800be93 	.word	0x0800be93
 800bdf0:	0800be33 	.word	0x0800be33
 800bdf4:	0800be3d 	.word	0x0800be3d
 800bdf8:	0800be93 	.word	0x0800be93
 800bdfc:	0800be47 	.word	0x0800be47
 800be00:	0800be93 	.word	0x0800be93
 800be04:	0800be51 	.word	0x0800be51
 800be08:	0800be93 	.word	0x0800be93
 800be0c:	0800be5b 	.word	0x0800be5b
 800be10:	0800be93 	.word	0x0800be93
 800be14:	0800be65 	.word	0x0800be65
 800be18:	0800be93 	.word	0x0800be93
 800be1c:	0800be6f 	.word	0x0800be6f
 800be20:	0800be93 	.word	0x0800be93
 800be24:	0800be79 	.word	0x0800be79
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be30:	e02f      	b.n	800be92 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2206      	movs	r2, #6
 800be36:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be3a:	e02a      	b.n	800be92 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2209      	movs	r2, #9
 800be40:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be44:	e025      	b.n	800be92 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	220b      	movs	r2, #11
 800be4a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be4e:	e020      	b.n	800be92 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	220d      	movs	r2, #13
 800be54:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be58:	e01b      	b.n	800be92 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	220f      	movs	r2, #15
 800be5e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be62:	e016      	b.n	800be92 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2211      	movs	r2, #17
 800be68:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be6c:	e011      	b.n	800be92 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2213      	movs	r2, #19
 800be72:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800be76:	e00c      	b.n	800be92 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2215      	movs	r2, #21
 800be7c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800be88:	2111      	movs	r1, #17
 800be8a:	48a8      	ldr	r0, [pc, #672]	; (800c12c <LoRa_decode+0x3c8>)
 800be8c:	f7f5 fb68 	bl	8001560 <ITM0_Write>
					}
					break;
 800be90:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800be92:	210c      	movs	r1, #12
 800be94:	48a6      	ldr	r0, [pc, #664]	; (800c130 <LoRa_decode+0x3cc>)
 800be96:	f7f5 fb63 	bl	8001560 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800be9a:	e17f      	b.n	800c19c <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800be9c:	210d      	movs	r1, #13
 800be9e:	48a5      	ldr	r0, [pc, #660]	; (800c134 <LoRa_decode+0x3d0>)
 800bea0:	f7f5 fb5e 	bl	8001560 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	221a      	movs	r2, #26
 800bea8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	617b      	str	r3, [r7, #20]
					int j=0;
 800beb8:	2300      	movs	r3, #0
 800beba:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bec0:	e002      	b.n	800bec8 <LoRa_decode+0x164>
					{ i++;}
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	3301      	adds	r3, #1
 800bec6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	4413      	add	r3, r2
 800bece:	3356      	adds	r3, #86	; 0x56
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b3d      	cmp	r3, #61	; 0x3d
 800bed4:	d1f5      	bne.n	800bec2 <LoRa_decode+0x15e>
					i++;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	3301      	adds	r3, #1
 800beda:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bedc:	e017      	b.n	800bf0e <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	4413      	add	r3, r2
 800bee4:	3356      	adds	r3, #86	; 0x56
 800bee6:	7819      	ldrb	r1, [r3, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	4413      	add	r3, r2
 800beee:	3306      	adds	r3, #6
 800bef0:	460a      	mov	r2, r1
 800bef2:	701a      	strb	r2, [r3, #0]
						i++;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	3301      	adds	r3, #1
 800bef8:	617b      	str	r3, [r7, #20]
						j++;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	3301      	adds	r3, #1
 800befe:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b06      	cmp	r3, #6
 800bf04:	dd03      	ble.n	800bf0e <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fb9a 	bl	800c640 <Lora_rx_del>
							break;
 800bf0c:	e006      	b.n	800bf1c <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	3356      	adds	r3, #86	; 0x56
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b2c      	cmp	r3, #44	; 0x2c
 800bf1a:	d1e0      	bne.n	800bede <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	4413      	add	r3, r2
 800bf22:	3306      	adds	r3, #6
 800bf24:	2200      	movs	r2, #0
 800bf26:	701a      	strb	r2, [r3, #0]
					j=0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	613b      	str	r3, [r7, #16]
					i++;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bf32:	e017      	b.n	800bf64 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	4413      	add	r3, r2
 800bf3a:	3356      	adds	r3, #86	; 0x56
 800bf3c:	7819      	ldrb	r1, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	4413      	add	r3, r2
 800bf44:	330c      	adds	r3, #12
 800bf46:	460a      	mov	r2, r1
 800bf48:	701a      	strb	r2, [r3, #0]
						i++;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
						j++;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	3301      	adds	r3, #1
 800bf54:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	dd03      	ble.n	800bf64 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fb6f 	bl	800c640 <Lora_rx_del>
							break;
 800bf62:	e006      	b.n	800bf72 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	4413      	add	r3, r2
 800bf6a:	3356      	adds	r3, #86	; 0x56
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b2c      	cmp	r3, #44	; 0x2c
 800bf70:	d1e0      	bne.n	800bf34 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4413      	add	r3, r2
 800bf78:	330c      	adds	r3, #12
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
					j=0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	613b      	str	r3, [r7, #16]
					i++;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	3301      	adds	r3, #1
 800bf86:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	330c      	adds	r3, #12
 800bf8c:	210a      	movs	r1, #10
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 fed5 	bl	800ed3e <atoi>
 800bf94:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bf96:	e019      	b.n	800bfcc <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	3356      	adds	r3, #86	; 0x56
 800bfa0:	7819      	ldrb	r1, [r3, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bfac:	460a      	mov	r2, r1
 800bfae:	701a      	strb	r2, [r3, #0]
						j++;
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	613b      	str	r3, [r7, #16]
						i++;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	dd03      	ble.n	800bfcc <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fb3b 	bl	800c640 <Lora_rx_del>
							break;
 800bfca:	e006      	b.n	800bfda <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3356      	adds	r3, #86	; 0x56
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b2c      	cmp	r3, #44	; 0x2c
 800bfd8:	d1de      	bne.n	800bf98 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
					i++;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bfec:	e017      	b.n	800c01e <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	4413      	add	r3, r2
 800bff4:	3356      	adds	r3, #86	; 0x56
 800bff6:	7819      	ldrb	r1, [r3, #0]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	4413      	add	r3, r2
 800bffe:	3310      	adds	r3, #16
 800c000:	460a      	mov	r2, r1
 800c002:	701a      	strb	r2, [r3, #0]
						i++;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	3301      	adds	r3, #1
 800c008:	617b      	str	r3, [r7, #20]
						j++;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	3301      	adds	r3, #1
 800c00e:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	2b05      	cmp	r3, #5
 800c014:	dd03      	ble.n	800c01e <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fb12 	bl	800c640 <Lora_rx_del>
							break;
 800c01c:	e006      	b.n	800c02c <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	3356      	adds	r3, #86	; 0x56
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b2c      	cmp	r3, #44	; 0x2c
 800c02a:	d1e0      	bne.n	800bfee <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3310      	adds	r3, #16
 800c030:	210a      	movs	r1, #10
 800c032:	4618      	mov	r0, r3
 800c034:	f002 fe83 	bl	800ed3e <atoi>
 800c038:	4602      	mov	r2, r0
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	4413      	add	r3, r2
 800c046:	3310      	adds	r3, #16
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
					j=0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	613b      	str	r3, [r7, #16]
					i++;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	3301      	adds	r3, #1
 800c054:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c056:	e017      	b.n	800c088 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	4413      	add	r3, r2
 800c05e:	3356      	adds	r3, #86	; 0x56
 800c060:	7819      	ldrb	r1, [r3, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	4413      	add	r3, r2
 800c068:	3310      	adds	r3, #16
 800c06a:	460a      	mov	r2, r1
 800c06c:	701a      	strb	r2, [r3, #0]
						i++;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	3301      	adds	r3, #1
 800c072:	617b      	str	r3, [r7, #20]
						j++;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	3301      	adds	r3, #1
 800c078:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	2b05      	cmp	r3, #5
 800c07e:	dd03      	ble.n	800c088 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fadd 	bl	800c640 <Lora_rx_del>
							break;
 800c086:	e006      	b.n	800c096 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	4413      	add	r3, r2
 800c08e:	3356      	adds	r3, #86	; 0x56
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b0d      	cmp	r3, #13
 800c094:	d1e0      	bne.n	800c058 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	4413      	add	r3, r2
 800c09c:	3310      	adds	r3, #16
 800c09e:	2200      	movs	r2, #0
 800c0a0:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3310      	adds	r3, #16
 800c0a6:	210a      	movs	r1, #10
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f002 fe48 	bl	800ed3e <atoi>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c0c4:	e06a      	b.n	800c19c <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c0c6:	210d      	movs	r1, #13
 800c0c8:	481b      	ldr	r0, [pc, #108]	; (800c138 <LoRa_decode+0x3d4>)
 800c0ca:	f7f5 fa49 	bl	8001560 <ITM0_Write>
			break;
 800c0ce:	e065      	b.n	800c19c <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c0d0:	210f      	movs	r1, #15
 800c0d2:	481a      	ldr	r0, [pc, #104]	; (800c13c <LoRa_decode+0x3d8>)
 800c0d4:	f7f5 fa44 	bl	8001560 <ITM0_Write>
			break;
 800c0d8:	e060      	b.n	800c19c <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c0da:	210f      	movs	r1, #15
 800c0dc:	4818      	ldr	r0, [pc, #96]	; (800c140 <LoRa_decode+0x3dc>)
 800c0de:	f7f5 fa3f 	bl	8001560 <ITM0_Write>
			break;
 800c0e2:	e05b      	b.n	800c19c <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c0e4:	210e      	movs	r1, #14
 800c0e6:	4817      	ldr	r0, [pc, #92]	; (800c144 <LoRa_decode+0x3e0>)
 800c0e8:	f7f5 fa3a 	bl	8001560 <ITM0_Write>
			break;
 800c0ec:	e056      	b.n	800c19c <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c0ee:	210d      	movs	r1, #13
 800c0f0:	4815      	ldr	r0, [pc, #84]	; (800c148 <LoRa_decode+0x3e4>)
 800c0f2:	f7f5 fa35 	bl	8001560 <ITM0_Write>
			break;
 800c0f6:	e051      	b.n	800c19c <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c0f8:	2113      	movs	r1, #19
 800c0fa:	4814      	ldr	r0, [pc, #80]	; (800c14c <LoRa_decode+0x3e8>)
 800c0fc:	f7f5 fa30 	bl	8001560 <ITM0_Write>
			break;
 800c100:	e04c      	b.n	800c19c <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c102:	210e      	movs	r1, #14
 800c104:	4812      	ldr	r0, [pc, #72]	; (800c150 <LoRa_decode+0x3ec>)
 800c106:	f7f5 fa2b 	bl	8001560 <ITM0_Write>
			break;
 800c10a:	e047      	b.n	800c19c <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c10c:	2111      	movs	r1, #17
 800c10e:	4811      	ldr	r0, [pc, #68]	; (800c154 <LoRa_decode+0x3f0>)
 800c110:	f7f5 fa26 	bl	8001560 <ITM0_Write>
			break;
 800c114:	e042      	b.n	800c19c <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c116:	2111      	movs	r1, #17
 800c118:	480f      	ldr	r0, [pc, #60]	; (800c158 <LoRa_decode+0x3f4>)
 800c11a:	f7f5 fa21 	bl	8001560 <ITM0_Write>
			break;
 800c11e:	e03d      	b.n	800c19c <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c120:	210e      	movs	r1, #14
 800c122:	480e      	ldr	r0, [pc, #56]	; (800c15c <LoRa_decode+0x3f8>)
 800c124:	f7f5 fa1c 	bl	8001560 <ITM0_Write>
			break;
 800c128:	e038      	b.n	800c19c <LoRa_decode+0x438>
 800c12a:	bf00      	nop
 800c12c:	0801093c 	.word	0x0801093c
 800c130:	08010950 	.word	0x08010950
 800c134:	08010960 	.word	0x08010960
 800c138:	08010970 	.word	0x08010970
 800c13c:	08010980 	.word	0x08010980
 800c140:	08010990 	.word	0x08010990
 800c144:	080109a0 	.word	0x080109a0
 800c148:	080109b0 	.word	0x080109b0
 800c14c:	080109c0 	.word	0x080109c0
 800c150:	080109d4 	.word	0x080109d4
 800c154:	080109e4 	.word	0x080109e4
 800c158:	080109f8 	.word	0x080109f8
 800c15c:	08010a0c 	.word	0x08010a0c
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c160:	210f      	movs	r1, #15
 800c162:	4810      	ldr	r0, [pc, #64]	; (800c1a4 <LoRa_decode+0x440>)
 800c164:	f7f5 f9fc 	bl	8001560 <ITM0_Write>
			break;
 800c168:	e018      	b.n	800c19c <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c16a:	210e      	movs	r1, #14
 800c16c:	480e      	ldr	r0, [pc, #56]	; (800c1a8 <LoRa_decode+0x444>)
 800c16e:	f7f5 f9f7 	bl	8001560 <ITM0_Write>
			break;
 800c172:	e013      	b.n	800c19c <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c174:	210d      	movs	r1, #13
 800c176:	480d      	ldr	r0, [pc, #52]	; (800c1ac <LoRa_decode+0x448>)
 800c178:	f7f5 f9f2 	bl	8001560 <ITM0_Write>
			break;
 800c17c:	e00e      	b.n	800c19c <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c17e:	210d      	movs	r1, #13
 800c180:	480b      	ldr	r0, [pc, #44]	; (800c1b0 <LoRa_decode+0x44c>)
 800c182:	f7f5 f9ed 	bl	8001560 <ITM0_Write>
			break;
 800c186:	e009      	b.n	800c19c <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c188:	2114      	movs	r1, #20
 800c18a:	480a      	ldr	r0, [pc, #40]	; (800c1b4 <LoRa_decode+0x450>)
 800c18c:	f7f5 f9e8 	bl	8001560 <ITM0_Write>
			break;
 800c190:	e004      	b.n	800c19c <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c192:	2110      	movs	r1, #16
 800c194:	4808      	ldr	r0, [pc, #32]	; (800c1b8 <LoRa_decode+0x454>)
 800c196:	f7f5 f9e3 	bl	8001560 <ITM0_Write>
			break;
 800c19a:	bf00      	nop
	}
 }
 800c19c:	bf00      	nop
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	08010a1c 	.word	0x08010a1c
 800c1a8:	08010a2c 	.word	0x08010a2c
 800c1ac:	08010a3c 	.word	0x08010a3c
 800c1b0:	08010a4c 	.word	0x08010a4c
 800c1b4:	08010a5c 	.word	0x08010a5c
 800c1b8:	08010a74 	.word	0x08010a74

0800c1bc <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b090      	sub	sp, #64	; 0x40
 800c1c0:	af06      	add	r7, sp, #24
 800c1c2:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c1ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c1ce:	dd01      	ble.n	800c1d4 <Lora_idSTR+0x18>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	e229      	b.n	800c628 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c1d8:	2304      	movs	r3, #4
 800c1da:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1e8:	f107 021c 	add.w	r2, r7, #28
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9304      	str	r3, [sp, #16]
 800c1f0:	f107 0320 	add.w	r3, r7, #32
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1fa:	9302      	str	r3, [sp, #8]
 800c1fc:	f107 030c 	add.w	r3, r7, #12
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	f107 0310 	add.w	r3, r7, #16
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	4613      	mov	r3, r2
 800c20a:	4ab9      	ldr	r2, [pc, #740]	; (800c4f0 <Lora_idSTR+0x334>)
 800c20c:	f002 f9e6 	bl	800e5dc <FT_String_ND>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <Lora_idSTR+0x5e>
 800c216:	2300      	movs	r3, #0
 800c218:	e206      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800c21a:	2305      	movs	r3, #5
 800c21c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c22a:	f107 021c 	add.w	r2, r7, #28
 800c22e:	2300      	movs	r3, #0
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	f107 0320 	add.w	r3, r7, #32
 800c236:	9303      	str	r3, [sp, #12]
 800c238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	f107 030c 	add.w	r3, r7, #12
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	f107 0310 	add.w	r3, r7, #16
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	4613      	mov	r3, r2
 800c24c:	4aa9      	ldr	r2, [pc, #676]	; (800c4f4 <Lora_idSTR+0x338>)
 800c24e:	f002 f9c5 	bl	800e5dc <FT_String_ND>
 800c252:	4603      	mov	r3, r0
 800c254:	2b01      	cmp	r3, #1
 800c256:	d101      	bne.n	800c25c <Lora_idSTR+0xa0>
 800c258:	2301      	movs	r3, #1
 800c25a:	e1e5      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800c25c:	2305      	movs	r3, #5
 800c25e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c26c:	f107 021c 	add.w	r2, r7, #28
 800c270:	2300      	movs	r3, #0
 800c272:	9304      	str	r3, [sp, #16]
 800c274:	f107 0320 	add.w	r3, r7, #32
 800c278:	9303      	str	r3, [sp, #12]
 800c27a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	f107 030c 	add.w	r3, r7, #12
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f107 0310 	add.w	r3, r7, #16
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	4613      	mov	r3, r2
 800c28e:	4a9a      	ldr	r2, [pc, #616]	; (800c4f8 <Lora_idSTR+0x33c>)
 800c290:	f002 f9a4 	bl	800e5dc <FT_String_ND>
 800c294:	4603      	mov	r3, r0
 800c296:	2b01      	cmp	r3, #1
 800c298:	d101      	bne.n	800c29e <Lora_idSTR+0xe2>
 800c29a:	230f      	movs	r3, #15
 800c29c:	e1c4      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c29e:	2306      	movs	r3, #6
 800c2a0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2ae:	f107 021c 	add.w	r2, r7, #28
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9304      	str	r3, [sp, #16]
 800c2b6:	f107 0320 	add.w	r3, r7, #32
 800c2ba:	9303      	str	r3, [sp, #12]
 800c2bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2c0:	9302      	str	r3, [sp, #8]
 800c2c2:	f107 030c 	add.w	r3, r7, #12
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	f107 0310 	add.w	r3, r7, #16
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	4a8a      	ldr	r2, [pc, #552]	; (800c4fc <Lora_idSTR+0x340>)
 800c2d2:	f002 f983 	bl	800e5dc <FT_String_ND>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d101      	bne.n	800c2e0 <Lora_idSTR+0x124>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	e1a3      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c2e0:	2306      	movs	r3, #6
 800c2e2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2f0:	f107 021c 	add.w	r2, r7, #28
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	f107 0320 	add.w	r3, r7, #32
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	f107 030c 	add.w	r3, r7, #12
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f107 0310 	add.w	r3, r7, #16
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	4613      	mov	r3, r2
 800c312:	4a7b      	ldr	r2, [pc, #492]	; (800c500 <Lora_idSTR+0x344>)
 800c314:	f002 f962 	bl	800e5dc <FT_String_ND>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d101      	bne.n	800c322 <Lora_idSTR+0x166>
 800c31e:	2303      	movs	r3, #3
 800c320:	e182      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c322:	2306      	movs	r3, #6
 800c324:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c332:	f107 021c 	add.w	r2, r7, #28
 800c336:	2300      	movs	r3, #0
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	f107 0320 	add.w	r3, r7, #32
 800c33e:	9303      	str	r3, [sp, #12]
 800c340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	f107 030c 	add.w	r3, r7, #12
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	f107 0310 	add.w	r3, r7, #16
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	4613      	mov	r3, r2
 800c354:	4a6b      	ldr	r2, [pc, #428]	; (800c504 <Lora_idSTR+0x348>)
 800c356:	f002 f941 	bl	800e5dc <FT_String_ND>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d101      	bne.n	800c364 <Lora_idSTR+0x1a8>
 800c360:	2304      	movs	r3, #4
 800c362:	e161      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c364:	2305      	movs	r3, #5
 800c366:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c374:	f107 021c 	add.w	r2, r7, #28
 800c378:	2300      	movs	r3, #0
 800c37a:	9304      	str	r3, [sp, #16]
 800c37c:	f107 0320 	add.w	r3, r7, #32
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	f107 0310 	add.w	r3, r7, #16
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	4613      	mov	r3, r2
 800c396:	4a5c      	ldr	r2, [pc, #368]	; (800c508 <Lora_idSTR+0x34c>)
 800c398:	f002 f920 	bl	800e5dc <FT_String_ND>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d101      	bne.n	800c3a6 <Lora_idSTR+0x1ea>
 800c3a2:	2305      	movs	r3, #5
 800c3a4:	e140      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c3a6:	230b      	movs	r3, #11
 800c3a8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3b6:	f107 021c 	add.w	r2, r7, #28
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	f107 0320 	add.w	r3, r7, #32
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	f107 030c 	add.w	r3, r7, #12
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	f107 0310 	add.w	r3, r7, #16
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	4a4c      	ldr	r2, [pc, #304]	; (800c50c <Lora_idSTR+0x350>)
 800c3da:	f002 f8ff 	bl	800e5dc <FT_String_ND>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <Lora_idSTR+0x22c>
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	e11f      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c3e8:	2306      	movs	r3, #6
 800c3ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3f8:	f107 021c 	add.w	r2, r7, #28
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	f107 0320 	add.w	r3, r7, #32
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	f107 030c 	add.w	r3, r7, #12
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	f107 0310 	add.w	r3, r7, #16
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	4613      	mov	r3, r2
 800c41a:	4a3d      	ldr	r2, [pc, #244]	; (800c510 <Lora_idSTR+0x354>)
 800c41c:	f002 f8de 	bl	800e5dc <FT_String_ND>
 800c420:	4603      	mov	r3, r0
 800c422:	2b01      	cmp	r3, #1
 800c424:	d101      	bne.n	800c42a <Lora_idSTR+0x26e>
 800c426:	2307      	movs	r3, #7
 800c428:	e0fe      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c42a:	2309      	movs	r3, #9
 800c42c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c43a:	f107 021c 	add.w	r2, r7, #28
 800c43e:	2300      	movs	r3, #0
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	f107 0320 	add.w	r3, r7, #32
 800c446:	9303      	str	r3, [sp, #12]
 800c448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44c:	9302      	str	r3, [sp, #8]
 800c44e:	f107 030c 	add.w	r3, r7, #12
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	f107 0310 	add.w	r3, r7, #16
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	4613      	mov	r3, r2
 800c45c:	4a2d      	ldr	r2, [pc, #180]	; (800c514 <Lora_idSTR+0x358>)
 800c45e:	f002 f8bd 	bl	800e5dc <FT_String_ND>
 800c462:	4603      	mov	r3, r0
 800c464:	2b01      	cmp	r3, #1
 800c466:	d101      	bne.n	800c46c <Lora_idSTR+0x2b0>
 800c468:	2308      	movs	r3, #8
 800c46a:	e0dd      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c46c:	2309      	movs	r3, #9
 800c46e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c47c:	f107 021c 	add.w	r2, r7, #28
 800c480:	2300      	movs	r3, #0
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	f107 0320 	add.w	r3, r7, #32
 800c488:	9303      	str	r3, [sp, #12]
 800c48a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c48e:	9302      	str	r3, [sp, #8]
 800c490:	f107 030c 	add.w	r3, r7, #12
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	f107 0310 	add.w	r3, r7, #16
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	4613      	mov	r3, r2
 800c49e:	4a1e      	ldr	r2, [pc, #120]	; (800c518 <Lora_idSTR+0x35c>)
 800c4a0:	f002 f89c 	bl	800e5dc <FT_String_ND>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d101      	bne.n	800c4ae <Lora_idSTR+0x2f2>
 800c4aa:	2309      	movs	r3, #9
 800c4ac:	e0bc      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c4ae:	2306      	movs	r3, #6
 800c4b0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4be:	f107 021c 	add.w	r2, r7, #28
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	9304      	str	r3, [sp, #16]
 800c4c6:	f107 0320 	add.w	r3, r7, #32
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4d0:	9302      	str	r3, [sp, #8]
 800c4d2:	f107 030c 	add.w	r3, r7, #12
 800c4d6:	9301      	str	r3, [sp, #4]
 800c4d8:	f107 0310 	add.w	r3, r7, #16
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	4a0e      	ldr	r2, [pc, #56]	; (800c51c <Lora_idSTR+0x360>)
 800c4e2:	f002 f87b 	bl	800e5dc <FT_String_ND>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d119      	bne.n	800c520 <Lora_idSTR+0x364>
 800c4ec:	230a      	movs	r3, #10
 800c4ee:	e09b      	b.n	800c628 <Lora_idSTR+0x46c>
 800c4f0:	08010a88 	.word	0x08010a88
 800c4f4:	08010a90 	.word	0x08010a90
 800c4f8:	08010a98 	.word	0x08010a98
 800c4fc:	08010aa0 	.word	0x08010aa0
 800c500:	08010aa8 	.word	0x08010aa8
 800c504:	08010ab0 	.word	0x08010ab0
 800c508:	08010ab8 	.word	0x08010ab8
 800c50c:	08010ac0 	.word	0x08010ac0
 800c510:	08010acc 	.word	0x08010acc
 800c514:	08010ad4 	.word	0x08010ad4
 800c518:	08010ae0 	.word	0x08010ae0
 800c51c:	08010aec 	.word	0x08010aec
		i=strlen("+CRFOP=");
 800c520:	2307      	movs	r3, #7
 800c522:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c530:	f107 021c 	add.w	r2, r7, #28
 800c534:	2300      	movs	r3, #0
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	f107 0320 	add.w	r3, r7, #32
 800c53c:	9303      	str	r3, [sp, #12]
 800c53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c542:	9302      	str	r3, [sp, #8]
 800c544:	f107 030c 	add.w	r3, r7, #12
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	f107 0310 	add.w	r3, r7, #16
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	4613      	mov	r3, r2
 800c552:	4a37      	ldr	r2, [pc, #220]	; (800c630 <Lora_idSTR+0x474>)
 800c554:	f002 f842 	bl	800e5dc <FT_String_ND>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d101      	bne.n	800c562 <Lora_idSTR+0x3a6>
 800c55e:	230b      	movs	r3, #11
 800c560:	e062      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c562:	2306      	movs	r3, #6
 800c564:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c572:	f107 021c 	add.w	r2, r7, #28
 800c576:	2300      	movs	r3, #0
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	f107 0320 	add.w	r3, r7, #32
 800c57e:	9303      	str	r3, [sp, #12]
 800c580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c584:	9302      	str	r3, [sp, #8]
 800c586:	f107 030c 	add.w	r3, r7, #12
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	f107 0310 	add.w	r3, r7, #16
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	4613      	mov	r3, r2
 800c594:	4a27      	ldr	r2, [pc, #156]	; (800c634 <Lora_idSTR+0x478>)
 800c596:	f002 f821 	bl	800e5dc <FT_String_ND>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d101      	bne.n	800c5a4 <Lora_idSTR+0x3e8>
 800c5a0:	230c      	movs	r3, #12
 800c5a2:	e041      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c5a4:	2305      	movs	r3, #5
 800c5a6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5b4:	f107 021c 	add.w	r2, r7, #28
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	f107 0320 	add.w	r3, r7, #32
 800c5c0:	9303      	str	r3, [sp, #12]
 800c5c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c6:	9302      	str	r3, [sp, #8]
 800c5c8:	f107 030c 	add.w	r3, r7, #12
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	f107 0310 	add.w	r3, r7, #16
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	4a18      	ldr	r2, [pc, #96]	; (800c638 <Lora_idSTR+0x47c>)
 800c5d8:	f002 f800 	bl	800e5dc <FT_String_ND>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d101      	bne.n	800c5e6 <Lora_idSTR+0x42a>
 800c5e2:	230e      	movs	r3, #14
 800c5e4:	e020      	b.n	800c628 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c5e6:	2305      	movs	r3, #5
 800c5e8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5f6:	f107 021c 	add.w	r2, r7, #28
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	f107 0320 	add.w	r3, r7, #32
 800c602:	9303      	str	r3, [sp, #12]
 800c604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c608:	9302      	str	r3, [sp, #8]
 800c60a:	f107 030c 	add.w	r3, r7, #12
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	f107 0310 	add.w	r3, r7, #16
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	4613      	mov	r3, r2
 800c618:	4a08      	ldr	r2, [pc, #32]	; (800c63c <Lora_idSTR+0x480>)
 800c61a:	f001 ffdf 	bl	800e5dc <FT_String_ND>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <Lora_idSTR+0x46c>
 800c624:	230d      	movs	r3, #13
 800c626:	e7ff      	b.n	800c628 <Lora_idSTR+0x46c>
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3728      	adds	r7, #40	; 0x28
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	08010af4 	.word	0x08010af4
 800c634:	08010afc 	.word	0x08010afc
 800c638:	08010b04 	.word	0x08010b04
 800c63c:	08010b0c 	.word	0x08010b0c

0800c640 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68e:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2220      	movs	r2, #32
 800c69a:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a1c      	ldr	r2, [pc, #112]	; (800c714 <ModBUS_Config+0xa0>)
 800c6a2:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a18      	ldr	r2, [pc, #96]	; (800c718 <ModBUS_Config+0xa4>)
 800c6b8:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2210      	movs	r2, #16
 800c6c6:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2210      	movs	r2, #16
 800c6d4:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2220      	movs	r2, #32
 800c704:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr
 800c714:	f0f0af5a 	.word	0xf0f0af5a
 800c718:	a5fa0f0f 	.word	0xa5fa0f0f

0800c71c <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3305      	adds	r3, #5
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	3306      	adds	r3, #6
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d10b      	bne.n	800c74c <ModBUS_Check+0x30>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3302      	adds	r3, #2
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3303      	adds	r3, #3
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4413      	add	r3, r2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <ModBUS_Check+0x30>
	{
		return(1);
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c74c:	2300      	movs	r3, #0
	}
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7b5b      	ldrb	r3, [r3, #13]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d11d      	bne.n	800c7ac <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d116      	bne.n	800c7ac <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c788:	429a      	cmp	r2, r3
 800c78a:	d10f      	bne.n	800c7ac <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c796:	429a      	cmp	r2, r3
 800c798:	d108      	bne.n	800c7ac <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d101      	bne.n	800c7ac <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e000      	b.n	800c7ae <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c7ac:	2300      	movs	r3, #0
	}
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b085      	sub	sp, #20
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	70fb      	strb	r3, [r7, #3]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c7d4:	78fa      	ldrb	r2, [r7, #3]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d901      	bls.n	800c7de <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e015      	b.n	800c80a <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	883a      	ldrh	r2, [r7, #0]
 800c7e6:	b2d1      	uxtb	r1, r2
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	460a      	mov	r2, r1
 800c7ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c7f2:	883b      	ldrh	r3, [r7, #0]
 800c7f4:	0a1b      	lsrs	r3, r3, #8
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c7fa:	78fb      	ldrb	r3, [r7, #3]
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	4413      	add	r3, r2
 800c802:	7bfa      	ldrb	r2, [r7, #15]
 800c804:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c808:	2300      	movs	r3, #0
	}
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c816:	b480      	push	{r7}
 800c818:	b085      	sub	sp, #20
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c822:	2300      	movs	r3, #0
 800c824:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c826:	2300      	movs	r3, #0
 800c828:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	429a      	cmp	r2, r3
 800c834:	d901      	bls.n	800c83a <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c836:	2301      	movs	r3, #1
 800c838:	e015      	b.n	800c866 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c83a:	78fb      	ldrb	r3, [r7, #3]
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	4413      	add	r3, r2
 800c842:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c846:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c848:	89fb      	ldrh	r3, [r7, #14]
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	3301      	adds	r3, #1
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	4413      	add	r3, r2
 800c858:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	89fb      	ldrh	r3, [r7, #14]
 800c860:	4313      	orrs	r3, r2
 800c862:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c864:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c866:	4618      	mov	r0, r3
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	460b      	mov	r3, r1
 800c87c:	807b      	strh	r3, [r7, #2]
 800c87e:	4613      	mov	r3, r2
 800c880:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c882:	887b      	ldrh	r3, [r7, #2]
 800c884:	2b00      	cmp	r3, #0
 800c886:	bf14      	ite	ne
 800c888:	2301      	movne	r3, #1
 800c88a:	2300      	moveq	r3, #0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	461a      	mov	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c896:	887b      	ldrh	r3, [r7, #2]
 800c898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c89c:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c89e:	887b      	ldrh	r3, [r7, #2]
 800c8a0:	0a1b      	lsrs	r3, r3, #8
 800c8a2:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c8a4:	887b      	ldrh	r3, [r7, #2]
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2206      	movs	r2, #6
 800c8d8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	781a      	ldrb	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2203      	movs	r2, #3
 800c8ea:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c8ee:	887b      	ldrh	r3, [r7, #2]
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	787a      	ldrb	r2, [r7, #1]
 800c904:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	220c      	movs	r2, #12
 800c90c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c910:	bf00      	nop
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
	...

0800c920 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b09c      	sub	sp, #112	; 0x70
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	f041 813f 	bne.w	800dbb0 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f103 020d 	add.w	r2, r3, #13
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7ff feeb 	bl	800c71c <ModBUS_Check>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f001 812f 	beq.w	800dbac <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7d1b      	ldrb	r3, [r3, #20]
 800c952:	3b01      	subs	r3, #1
 800c954:	2b0f      	cmp	r3, #15
 800c956:	f201 80f3 	bhi.w	800db40 <ModBUS+0x1220>
 800c95a:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <ModBUS+0x40>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c9a1 	.word	0x0800c9a1
 800c964:	0800cbe1 	.word	0x0800cbe1
 800c968:	0800ce21 	.word	0x0800ce21
 800c96c:	0800d059 	.word	0x0800d059
 800c970:	0800d291 	.word	0x0800d291
 800c974:	0800d4a7 	.word	0x0800d4a7
 800c978:	0800db41 	.word	0x0800db41
 800c97c:	0800db41 	.word	0x0800db41
 800c980:	0800db41 	.word	0x0800db41
 800c984:	0800db41 	.word	0x0800db41
 800c988:	0800db41 	.word	0x0800db41
 800c98c:	0800db41 	.word	0x0800db41
 800c990:	0800db41 	.word	0x0800db41
 800c994:	0800db41 	.word	0x0800db41
 800c998:	0800d663 	.word	0x0800d663
 800c99c:	0800d8f3 	.word	0x0800d8f3

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	7c5a      	ldrb	r2, [r3, #17]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	7c1a      	ldrb	r2, [r3, #16]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7bda      	ldrb	r2, [r3, #15]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7b9a      	ldrb	r2, [r3, #14]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7b5a      	ldrb	r2, [r3, #13]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	795b      	ldrb	r3, [r3, #5]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	f040 80e6 	bne.w	800cbac <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d5b      	ldrb	r3, [r3, #21]
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ca02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	7d9b      	ldrb	r3, [r3, #22]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7ddb      	ldrb	r3, [r3, #23]
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca36:	021b      	lsls	r3, r3, #8
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	7e1b      	ldrb	r3, [r3, #24]
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d87e      	bhi.n	800cb78 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ca80:	461a      	mov	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ca88:	4413      	add	r3, r2
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800ca90:	4293      	cmp	r3, r2
 800ca92:	dc57      	bgt.n	800cb44 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	613b      	str	r3, [r7, #16]
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800caa0:	2300      	movs	r3, #0
 800caa2:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800cab4:	40d3      	lsrs	r3, r2
 800cab6:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cabe:	08db      	lsrs	r3, r3, #3
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <ModBUS+0x1bc>
									{
										bytes=div;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cada:	e002      	b.n	800cae2 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	3301      	adds	r3, #1
 800cae0:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800caec:	e00e      	b.n	800cb0c <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800caee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caf0:	3308      	adds	r3, #8
 800caf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800caf4:	b2d1      	uxtb	r1, r2
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	4413      	add	r3, r2
 800cafa:	460a      	mov	r2, r1
 800cafc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cb00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb02:	0a1b      	lsrs	r3, r3, #8
 800cb04:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cb06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cb0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dced      	bgt.n	800caee <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb28:	3303      	adds	r3, #3
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb38:	1d9a      	adds	r2, r3, #6
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb40:	f001 b8d5 	b.w	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2202      	movs	r2, #2
 800cb48:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2281      	movs	r2, #129	; 0x81
 800cb50:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2203      	movs	r2, #3
 800cb60:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb6a:	1d9a      	adds	r2, r3, #6
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb72:	2302      	movs	r3, #2
 800cb74:	f001 b8bb 	b.w	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2203      	movs	r2, #3
 800cb7c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2281      	movs	r2, #129	; 0x81
 800cb84:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2203      	movs	r2, #3
 800cb94:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb9e:	1d9a      	adds	r2, r3, #6
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cba6:	2303      	movs	r3, #3
 800cba8:	f001 b8a1 	b.w	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2281      	movs	r2, #129	; 0x81
 800cbb8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2203      	movs	r2, #3
 800cbc8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbd2:	1d9a      	adds	r2, r3, #6
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cbda:	2301      	movs	r3, #1
 800cbdc:	f001 b887 	b.w	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7c5a      	ldrb	r2, [r3, #17]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7c1a      	ldrb	r2, [r3, #16]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7bda      	ldrb	r2, [r3, #15]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	7b9a      	ldrb	r2, [r3, #14]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7b5a      	ldrb	r2, [r3, #13]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	799b      	ldrb	r3, [r3, #6]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	f040 80e6 	bne.w	800cdec <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7d5b      	ldrb	r3, [r3, #21]
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cc42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7d9b      	ldrb	r3, [r3, #22]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	7ddb      	ldrb	r3, [r3, #23]
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cc76:	021b      	lsls	r3, r3, #8
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cc86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	7e1b      	ldrb	r3, [r3, #24]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d87e      	bhi.n	800cdb8 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccc8:	4413      	add	r3, r2
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	dc57      	bgt.n	800cd84 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	667b      	str	r3, [r7, #100]	; 0x64
 800cce0:	2300      	movs	r3, #0
 800cce2:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800ccf4:	40d3      	lsrs	r3, r2
 800ccf6:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccfe:	08db      	lsrs	r3, r3, #3
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d102      	bne.n	800cd1c <ModBUS+0x3fc>
									{
										bytes=div;
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	667b      	str	r3, [r7, #100]	; 0x64
 800cd1a:	e002      	b.n	800cd22 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800cd22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cd2c:	e00e      	b.n	800cd4c <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cd2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd30:	3308      	adds	r3, #8
 800cd32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd34:	b2d1      	uxtb	r1, r2
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	460a      	mov	r2, r1
 800cd3c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cd40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	dced      	bgt.n	800cd2e <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2202      	movs	r2, #2
 800cd56:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cd68:	3303      	adds	r3, #3
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd78:	1d9a      	adds	r2, r3, #6
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd80:	f000 bfb5 	b.w	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2282      	movs	r2, #130	; 0x82
 800cd90:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdaa:	1d9a      	adds	r2, r3, #6
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	f000 bf9b 	b.w	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2282      	movs	r2, #130	; 0x82
 800cdc4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdde:	1d9a      	adds	r2, r3, #6
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cde6:	2303      	movs	r3, #3
 800cde8:	f000 bf81 	b.w	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2282      	movs	r2, #130	; 0x82
 800cdf8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2203      	movs	r2, #3
 800ce08:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce12:	1d9a      	adds	r2, r3, #6
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	f000 bf67 	b.w	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7c5a      	ldrb	r2, [r3, #17]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7c1a      	ldrb	r2, [r3, #16]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7bda      	ldrb	r2, [r3, #15]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7b9a      	ldrb	r2, [r3, #14]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7b5a      	ldrb	r2, [r3, #13]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	79db      	ldrb	r3, [r3, #7]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	f040 80e2 	bne.w	800d024 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7d5b      	ldrb	r3, [r3, #21]
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ce72:	021b      	lsls	r3, r3, #8
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ce82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7d9b      	ldrb	r3, [r3, #22]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7ddb      	ldrb	r3, [r3, #23]
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7e1b      	ldrb	r3, [r3, #24]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d87a      	bhi.n	800cff0 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf00:	461a      	mov	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf08:	4413      	add	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800cf10:	4293      	cmp	r3, r2
 800cf12:	dc53      	bgt.n	800cfbc <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cf14:	e029      	b.n	800cf6a <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf20:	4413      	add	r3, r2
 800cf22:	005a      	lsls	r2, r3, #1
 800cf24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	3309      	adds	r3, #9
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	440a      	add	r2, r1
 800cf2e:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4413      	add	r3, r2
 800cf36:	460a      	mov	r2, r1
 800cf38:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf42:	461a      	mov	r2, r3
 800cf44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf46:	4413      	add	r3, r2
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	1c5a      	adds	r2, r3, #1
 800cf4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf4e:	3305      	adds	r3, #5
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	440a      	add	r2, r1
 800cf56:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	460a      	mov	r2, r1
 800cf60:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cf64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf66:	3301      	adds	r3, #1
 800cf68:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf70:	461a      	mov	r2, r3
 800cf72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf74:	4293      	cmp	r3, r2
 800cf76:	dbce      	blt.n	800cf16 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cfa0:	3303      	adds	r3, #3
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfb0:	1d9a      	adds	r2, r3, #6
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cfb8:	f000 be99 	b.w	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2283      	movs	r2, #131	; 0x83
 800cfc8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2203      	movs	r2, #3
 800cfd8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfe2:	1d9a      	adds	r2, r3, #6
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cfea:	2302      	movs	r3, #2
 800cfec:	f000 be7f 	b.w	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2203      	movs	r2, #3
 800cff4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2283      	movs	r2, #131	; 0x83
 800cffc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2203      	movs	r2, #3
 800d00c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d016:	1d9a      	adds	r2, r3, #6
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d01e:	2303      	movs	r3, #3
 800d020:	f000 be65 	b.w	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2283      	movs	r2, #131	; 0x83
 800d030:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2203      	movs	r2, #3
 800d040:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d04a:	1d9a      	adds	r2, r3, #6
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d052:	2301      	movs	r3, #1
 800d054:	f000 be4b 	b.w	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7c5a      	ldrb	r2, [r3, #17]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7c1a      	ldrb	r2, [r3, #16]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7bda      	ldrb	r2, [r3, #15]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7b9a      	ldrb	r2, [r3, #14]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7b5a      	ldrb	r2, [r3, #13]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	7a1b      	ldrb	r3, [r3, #8]
 800d092:	2b01      	cmp	r3, #1
 800d094:	f040 80e2 	bne.w	800d25c <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7d5b      	ldrb	r3, [r3, #21]
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d0aa:	021b      	lsls	r3, r3, #8
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d0ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7d9b      	ldrb	r3, [r3, #22]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7ddb      	ldrb	r3, [r3, #23]
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d0fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d102:	b29a      	uxth	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7e1b      	ldrb	r3, [r3, #24]
 800d114:	b29b      	uxth	r3, r3
 800d116:	4313      	orrs	r3, r2
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	429a      	cmp	r2, r3
 800d130:	d87a      	bhi.n	800d228 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d138:	461a      	mov	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d140:	4413      	add	r3, r2
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800d148:	4293      	cmp	r3, r2
 800d14a:	dc53      	bgt.n	800d1f4 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d14c:	e029      	b.n	800d1a2 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d154:	461a      	mov	r2, r3
 800d156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d158:	4413      	add	r3, r2
 800d15a:	005a      	lsls	r2, r3, #1
 800d15c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	3309      	adds	r3, #9
 800d162:	6879      	ldr	r1, [r7, #4]
 800d164:	440a      	add	r2, r1
 800d166:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	460a      	mov	r2, r1
 800d170:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d17a:	461a      	mov	r2, r3
 800d17c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d17e:	4413      	add	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d186:	3305      	adds	r3, #5
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	6879      	ldr	r1, [r7, #4]
 800d18c:	440a      	add	r2, r1
 800d18e:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	4413      	add	r3, r2
 800d196:	460a      	mov	r2, r1
 800d198:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800d19c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d19e:	3301      	adds	r3, #1
 800d1a0:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	dbce      	blt.n	800d14e <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2204      	movs	r2, #4
 800d1c6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d1d8:	3303      	adds	r3, #3
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1e8:	1d9a      	adds	r2, r3, #6
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d1f0:	f000 bd7d 	b.w	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2284      	movs	r2, #132	; 0x84
 800d200:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2203      	movs	r2, #3
 800d210:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d21a:	1d9a      	adds	r2, r3, #6
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d222:	2302      	movs	r3, #2
 800d224:	f000 bd63 	b.w	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2203      	movs	r2, #3
 800d22c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2284      	movs	r2, #132	; 0x84
 800d234:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2203      	movs	r2, #3
 800d244:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d24e:	1d9a      	adds	r2, r3, #6
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d256:	2303      	movs	r3, #3
 800d258:	f000 bd49 	b.w	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2284      	movs	r2, #132	; 0x84
 800d268:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2203      	movs	r2, #3
 800d278:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d282:	1d9a      	adds	r2, r3, #6
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d28a:	2301      	movs	r3, #1
 800d28c:	f000 bd2f 	b.w	800dcee <ModBUS+0x13ce>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	7c5a      	ldrb	r2, [r3, #17]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	7c1a      	ldrb	r2, [r3, #16]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	7bda      	ldrb	r2, [r3, #15]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7b9a      	ldrb	r2, [r3, #14]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7b5a      	ldrb	r2, [r3, #13]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	7a5b      	ldrb	r3, [r3, #9]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	f040 80d1 	bne.w	800d472 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7d5b      	ldrb	r3, [r3, #21]
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d2e2:	021b      	lsls	r3, r3, #8
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d2f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7d9b      	ldrb	r3, [r3, #22]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	4313      	orrs	r3, r2
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7ddb      	ldrb	r3, [r3, #23]
 800d318:	b29a      	uxth	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d326:	021b      	lsls	r3, r3, #8
 800d328:	b29a      	uxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7e1b      	ldrb	r3, [r3, #24]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	b29a      	uxth	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d35e:	461a      	mov	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d366:	429a      	cmp	r2, r3
 800d368:	dd69      	ble.n	800d43e <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <ModBUS+0xa60>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d37a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d37e:	d144      	bne.n	800d40a <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d386:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d38a:	d10d      	bne.n	800d3a8 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d398:	4611      	mov	r1, r2
 800d39a:	2201      	movs	r2, #1
 800d39c:	408a      	lsls	r2, r1
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d3a6:	e003      	b.n	800d3b0 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7e1a      	ldrb	r2, [r3, #24]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7dda      	ldrb	r2, [r3, #23]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7d9a      	ldrb	r2, [r3, #22]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7d5a      	ldrb	r2, [r3, #21]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2205      	movs	r2, #5
 800d3dc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d3ee:	3306      	adds	r3, #6
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3fe:	1d9a      	adds	r2, r3, #6
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d406:	f000 bc72 	b.w	800dcee <ModBUS+0x13ce>
												m3->_MBUS_2SND[8]=0x02;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2202      	movs	r2, #2
 800d40e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2285      	movs	r2, #133	; 0x85
 800d416:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2203      	movs	r2, #3
 800d426:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d430:	1d9a      	adds	r2, r3, #6
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d438:	2302      	movs	r3, #2
 800d43a:	f000 bc58 	b.w	800dcee <ModBUS+0x13ce>
											m3->_MBUS_2SND[8]=0x03;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2203      	movs	r2, #3
 800d442:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2285      	movs	r2, #133	; 0x85
 800d44a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2203      	movs	r2, #3
 800d45a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d464:	1d9a      	adds	r2, r3, #6
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d46c:	2303      	movs	r3, #3
 800d46e:	f000 bc3e 	b.w	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x01;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2285      	movs	r2, #133	; 0x85
 800d47e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2203      	movs	r2, #3
 800d48e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d498:	1d9a      	adds	r2, r3, #6
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	f000 bc24 	b.w	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	7c5a      	ldrb	r2, [r3, #17]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7c1a      	ldrb	r2, [r3, #16]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7bda      	ldrb	r2, [r3, #15]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7b9a      	ldrb	r2, [r3, #14]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	7b5a      	ldrb	r2, [r3, #13]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d4dc:	2300      	movs	r3, #0
 800d4de:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7a9b      	ldrb	r3, [r3, #10]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	f040 80a3 	bne.w	800d630 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7d5b      	ldrb	r3, [r3, #21]
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d50c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d510:	b29a      	uxth	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7d9b      	ldrb	r3, [r3, #22]
 800d522:	b29b      	uxth	r3, r3
 800d524:	4313      	orrs	r3, r2
 800d526:	b29a      	uxth	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d534:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7ddb      	ldrb	r3, [r3, #23]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d558:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	7e1b      	ldrb	r3, [r3, #24]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	4313      	orrs	r3, r2
 800d572:	b29a      	uxth	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d586:	b29b      	uxth	r3, r3
 800d588:	429a      	cmp	r2, r3
 800d58a:	d838      	bhi.n	800d5fe <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d58c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	7dd1      	ldrb	r1, [r2, #23]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	4413      	add	r3, r2
 800d596:	460a      	mov	r2, r1
 800d598:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d59c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d59e:	3301      	adds	r3, #1
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	7e11      	ldrb	r1, [r2, #24]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	460a      	mov	r2, r1
 800d5aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	7e1a      	ldrb	r2, [r3, #24]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7dda      	ldrb	r2, [r3, #23]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7d9a      	ldrb	r2, [r3, #22]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	7d5a      	ldrb	r2, [r3, #21]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2206      	movs	r2, #6
 800d5da:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2206      	movs	r2, #6
 800d5ea:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d5f4:	1d9a      	adds	r2, r3, #6
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d5fc:	e377      	b.n	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2202      	movs	r2, #2
 800d602:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2286      	movs	r2, #134	; 0x86
 800d60a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2203      	movs	r2, #3
 800d61a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d624:	1d9a      	adds	r2, r3, #6
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d62c:	2302      	movs	r3, #2
 800d62e:	e35e      	b.n	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2286      	movs	r2, #134	; 0x86
 800d63c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2203      	movs	r2, #3
 800d64c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d656:	1d9a      	adds	r2, r3, #6
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d65e:	2301      	movs	r3, #1
 800d660:	e345      	b.n	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7c5a      	ldrb	r2, [r3, #17]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7c1a      	ldrb	r2, [r3, #16]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7bda      	ldrb	r2, [r3, #15]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	7b9a      	ldrb	r2, [r3, #14]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7b5a      	ldrb	r2, [r3, #13]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d694:	2300      	movs	r3, #0
 800d696:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7adb      	ldrb	r3, [r3, #11]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	f040 810f 	bne.w	800d8c0 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7d5b      	ldrb	r3, [r3, #21]
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d6b4:	021b      	lsls	r3, r3, #8
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d6c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7d9b      	ldrb	r3, [r3, #22]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	7ddb      	ldrb	r3, [r3, #23]
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d6f8:	021b      	lsls	r3, r3, #8
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d708:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	7e1b      	ldrb	r3, [r3, #24]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	4313      	orrs	r3, r2
 800d722:	b29a      	uxth	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d736:	b29b      	uxth	r3, r3
 800d738:	429a      	cmp	r2, r3
 800d73a:	f200 80a8 	bhi.w	800d88e <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d744:	461a      	mov	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d74c:	4413      	add	r3, r2
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d754:	4293      	cmp	r3, r2
 800d756:	f300 8081 	bgt.w	800d85c <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d75a:	2300      	movs	r3, #0
 800d75c:	657b      	str	r3, [r7, #84]	; 0x54
 800d75e:	2300      	movs	r3, #0
 800d760:	653b      	str	r3, [r7, #80]	; 0x50
 800d762:	2300      	movs	r3, #0
 800d764:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d766:	2300      	movs	r3, #0
 800d768:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7e5b      	ldrb	r3, [r3, #25]
 800d76e:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d770:	e00e      	b.n	800d790 <ModBUS+0xe70>
									{
										data=data<<8;
 800d772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d774:	021b      	lsls	r3, r3, #8
 800d776:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d77a:	330c      	adds	r3, #12
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	4413      	add	r3, r2
 800d780:	7b5b      	ldrb	r3, [r3, #13]
 800d782:	461a      	mov	r2, r3
 800d784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d786:	4313      	orrs	r3, r2
 800d788:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78c:	3b01      	subs	r3, #1
 800d78e:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1ed      	bne.n	800d772 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d79c:	461a      	mov	r2, r3
 800d79e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7a0:	4093      	lsls	r3, r2
 800d7a2:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d7a4:	e00f      	b.n	800d7c6 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b0:	4413      	add	r3, r2
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d3e8      	bcc.n	800d7a6 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7d6:	43db      	mvns	r3, r3
 800d7d8:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e2:	401a      	ands	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7ec:	43db      	mvns	r3, r3
 800d7ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d7fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7fc:	431a      	orrs	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7e1a      	ldrb	r2, [r3, #24]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	7dda      	ldrb	r2, [r3, #23]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7d9a      	ldrb	r2, [r3, #22]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7d5a      	ldrb	r2, [r3, #21]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	220f      	movs	r2, #15
 800d830:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d842:	3306      	adds	r3, #6
 800d844:	b2da      	uxtb	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d852:	1d9a      	adds	r2, r3, #6
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d85a:	e248      	b.n	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2202      	movs	r2, #2
 800d860:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	228f      	movs	r2, #143	; 0x8f
 800d868:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2203      	movs	r2, #3
 800d878:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d882:	1d9a      	adds	r2, r3, #6
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d88a:	2302      	movs	r3, #2
 800d88c:	e22f      	b.n	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2203      	movs	r2, #3
 800d892:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	228f      	movs	r2, #143	; 0x8f
 800d89a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8b4:	1d9a      	adds	r2, r3, #6
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e216      	b.n	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	228f      	movs	r2, #143	; 0x8f
 800d8cc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2203      	movs	r2, #3
 800d8dc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8e6:	1d9a      	adds	r2, r3, #6
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e1fd      	b.n	800dcee <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7c5a      	ldrb	r2, [r3, #17]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7c1a      	ldrb	r2, [r3, #16]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	7bda      	ldrb	r2, [r3, #15]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7b9a      	ldrb	r2, [r3, #14]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7b5a      	ldrb	r2, [r3, #13]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d924:	2300      	movs	r3, #0
 800d926:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d92a:	2300      	movs	r3, #0
 800d92c:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7b1b      	ldrb	r3, [r3, #12]
 800d932:	2b01      	cmp	r3, #1
 800d934:	f040 80eb 	bne.w	800db0e <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7d5b      	ldrb	r3, [r3, #21]
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d95a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d95e:	b29a      	uxth	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	7d9b      	ldrb	r3, [r3, #22]
 800d970:	b29b      	uxth	r3, r3
 800d972:	4313      	orrs	r3, r2
 800d974:	b29a      	uxth	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7ddb      	ldrb	r3, [r3, #23]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d998:	021b      	lsls	r3, r3, #8
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d9a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7e1b      	ldrb	r3, [r3, #24]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d87f      	bhi.n	800dadc <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d9ea:	4413      	add	r3, r2
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	dc59      	bgt.n	800daaa <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d9f6:	e029      	b.n	800da4c <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d9f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d9fc:	f103 020d 	add.w	r2, r3, #13
 800da00:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800da02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da06:	440b      	add	r3, r1
 800da08:	6879      	ldr	r1, [r7, #4]
 800da0a:	440a      	add	r2, r1
 800da0c:	7b51      	ldrb	r1, [r2, #13]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	4413      	add	r3, r2
 800da12:	460a      	mov	r2, r1
 800da14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800da18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da1c:	3301      	adds	r3, #1
 800da1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800da22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da26:	f103 020d 	add.w	r2, r3, #13
 800da2a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800da2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da30:	440b      	add	r3, r1
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	440a      	add	r2, r1
 800da36:	7b51      	ldrb	r1, [r2, #13]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	4413      	add	r3, r2
 800da3c:	460a      	mov	r2, r1
 800da3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800da42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da46:	3301      	adds	r3, #1
 800da48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7e5b      	ldrb	r3, [r3, #25]
 800da50:	b29b      	uxth	r3, r3
 800da52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800da56:	429a      	cmp	r2, r3
 800da58:	d3ce      	bcc.n	800d9f8 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7e1a      	ldrb	r2, [r3, #24]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	7dda      	ldrb	r2, [r3, #23]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7d9a      	ldrb	r2, [r3, #22]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7d5a      	ldrb	r2, [r3, #21]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2210      	movs	r2, #16
 800da86:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2206      	movs	r2, #6
 800da96:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800daa0:	1d9a      	adds	r2, r3, #6
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800daa8:	e121      	b.n	800dcee <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2202      	movs	r2, #2
 800daae:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2290      	movs	r2, #144	; 0x90
 800dab6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2203      	movs	r2, #3
 800dac6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dad0:	1d9a      	adds	r2, r3, #6
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800dad8:	2302      	movs	r3, #2
 800dada:	e108      	b.n	800dcee <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2203      	movs	r2, #3
 800dae0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2290      	movs	r2, #144	; 0x90
 800dae8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2203      	movs	r2, #3
 800daf8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db02:	1d9a      	adds	r2, r3, #6
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800db0a:	2303      	movs	r3, #3
 800db0c:	e0ef      	b.n	800dcee <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2290      	movs	r2, #144	; 0x90
 800db1a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2203      	movs	r2, #3
 800db2a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db34:	1d9a      	adds	r2, r3, #6
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800db3c:	2301      	movs	r3, #1
 800db3e:	e0d6      	b.n	800dcee <ModBUS+0x13ce>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
 800db4c:	3b80      	subs	r3, #128	; 0x80
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	7cda      	ldrb	r2, [r3, #19]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2203      	movs	r2, #3
 800db64:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7c5a      	ldrb	r2, [r3, #17]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7c1a      	ldrb	r2, [r3, #16]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7bda      	ldrb	r2, [r3, #15]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7b9a      	ldrb	r2, [r3, #14]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7b5a      	ldrb	r2, [r3, #13]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dba0:	1d9a      	adds	r2, r3, #6
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e0a0      	b.n	800dcee <ModBUS+0x13ce>


		}
		else
		{
			return(1);
 800dbac:	2301      	movs	r3, #1
 800dbae:	e09e      	b.n	800dcee <ModBUS+0x13ce>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 8099 	bne.w	800dcec <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f103 020d 	add.w	r2, r3, #13
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7fe fda7 	bl	800c71c <ModBUS_Check>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 808b 	beq.w	800dcec <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7fe fdbf 	bl	800c75a <ModBUS_Check_tid>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d04f      	beq.n	800dc82 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	7d1b      	ldrb	r3, [r3, #20]
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d143      	bne.n	800dc72 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800dbfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800dbfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800dc16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc1e:	e022      	b.n	800dc66 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800dc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	f103 0209 	add.w	r2, r3, #9
 800dc28:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2c:	440b      	add	r3, r1
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	6879      	ldr	r1, [r7, #4]
 800dc32:	440a      	add	r2, r1
 800dc34:	7b51      	ldrb	r1, [r2, #13]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	460a      	mov	r2, r1
 800dc3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800dc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc42:	3305      	adds	r3, #5
 800dc44:	005a      	lsls	r2, r3, #1
 800dc46:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc4a:	440b      	add	r3, r1
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	3301      	adds	r3, #1
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	440a      	add	r2, r1
 800dc54:	7b51      	ldrb	r1, [r2, #13]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	4413      	add	r3, r2
 800dc5a:	460a      	mov	r2, r1
 800dc5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800dc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc62:	3301      	adds	r3, #1
 800dc64:	643b      	str	r3, [r7, #64]	; 0x40
 800dc66:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dc6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	dbd7      	blt.n	800dc20 <ModBUS+0x1300>

						}


					}
					break;
 800dc70:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7c9b      	ldrb	r3, [r3, #18]
 800dc76:	461a      	mov	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	7d5b      	ldrb	r3, [r3, #21]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc80:	e035      	b.n	800dcee <ModBUS+0x13ce>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	7d1b      	ldrb	r3, [r3, #20]
 800dc86:	3b81      	subs	r3, #129	; 0x81
 800dc88:	2b15      	cmp	r3, #21
 800dc8a:	d830      	bhi.n	800dcee <ModBUS+0x13ce>
 800dc8c:	a201      	add	r2, pc, #4	; (adr r2, 800dc94 <ModBUS+0x1374>)
 800dc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc92:	bf00      	nop
 800dc94:	0800dcef 	.word	0x0800dcef
 800dc98:	0800dcef 	.word	0x0800dcef
 800dc9c:	0800dcef 	.word	0x0800dcef
 800dca0:	0800dcef 	.word	0x0800dcef
 800dca4:	0800dcef 	.word	0x0800dcef
 800dca8:	0800dcef 	.word	0x0800dcef
 800dcac:	0800dcef 	.word	0x0800dcef
 800dcb0:	0800dcef 	.word	0x0800dcef
 800dcb4:	0800dcef 	.word	0x0800dcef
 800dcb8:	0800dcef 	.word	0x0800dcef
 800dcbc:	0800dcef 	.word	0x0800dcef
 800dcc0:	0800dcef 	.word	0x0800dcef
 800dcc4:	0800dcef 	.word	0x0800dcef
 800dcc8:	0800dcef 	.word	0x0800dcef
 800dccc:	0800dcef 	.word	0x0800dcef
 800dcd0:	0800dcef 	.word	0x0800dcef
 800dcd4:	0800dcef 	.word	0x0800dcef
 800dcd8:	0800dcef 	.word	0x0800dcef
 800dcdc:	0800dcef 	.word	0x0800dcef
 800dce0:	0800dcef 	.word	0x0800dcef
 800dce4:	0800dcef 	.word	0x0800dcef
 800dce8:	0800dcef 	.word	0x0800dcef
					break;
				}


				//ERROR
			}
 800dcec:	bf00      	nop
		}
	}


}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3770      	adds	r7, #112	; 0x70
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop

0800dcf8 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6858      	ldr	r0, [r3, #4]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	891b      	ldrh	r3, [r3, #8]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f7f5 fbd4 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6818      	ldr	r0, [r3, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f103 0114 	add.w	r1, r3, #20
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f103 0218 	add.w	r2, r3, #24
 800dd20:	2364      	movs	r3, #100	; 0x64
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	2304      	movs	r3, #4
 800dd26:	f7f6 f8dc 	bl	8003ee2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6858      	ldr	r0, [r3, #4]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	891b      	ldrh	r3, [r3, #8]
 800dd32:	2201      	movs	r2, #1
 800dd34:	4619      	mov	r1, r3
 800dd36:	f7f5 fbbf 	bl	80034b8 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7edb      	ldrb	r3, [r3, #27]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b086      	sub	sp, #24
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	4608      	mov	r0, r1
 800dd50:	4611      	mov	r1, r2
 800dd52:	461a      	mov	r2, r3
 800dd54:	4603      	mov	r3, r0
 800dd56:	70fb      	strb	r3, [r7, #3]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70bb      	strb	r3, [r7, #2]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	787a      	ldrb	r2, [r7, #1]
 800dd68:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	78ba      	ldrb	r2, [r7, #2]
 800dd74:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800dd7c:	787b      	ldrb	r3, [r7, #1]
 800dd7e:	2bf0      	cmp	r3, #240	; 0xf0
 800dd80:	d11d      	bne.n	800ddbe <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800dd82:	2300      	movs	r3, #0
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	e013      	b.n	800ddb0 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	6a3a      	ldr	r2, [r7, #32]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	781a      	ldrb	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ffaf 	bl	800dcf8 <SPI_ETH>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	7d9b      	ldrb	r3, [r3, #22]
 800dda2:	3301      	adds	r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	3301      	adds	r3, #1
 800ddae:	613b      	str	r3, [r7, #16]
 800ddb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddb4:	693a      	ldr	r2, [r7, #16]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	dbe6      	blt.n	800dd88 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800ddba:	8afb      	ldrh	r3, [r7, #22]
 800ddbc:	e037      	b.n	800de2e <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800ddbe:	787b      	ldrb	r3, [r7, #1]
 800ddc0:	2b0f      	cmp	r3, #15
 800ddc2:	d134      	bne.n	800de2e <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800ddca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d120      	bne.n	800de14 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]
 800ddd6:	e016      	b.n	800de06 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff ff8d 	bl	800dcf8 <SPI_ETH>
 800ddde:	4603      	mov	r3, r0
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	8afb      	ldrh	r3, [r7, #22]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	7d9b      	ldrb	r3, [r3, #22]
 800ddec:	3301      	adds	r3, #1
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <SPI_ETH_REG+0xba>
 800ddfa:	8afb      	ldrh	r3, [r7, #22]
 800ddfc:	021b      	lsls	r3, r3, #8
 800ddfe:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	3301      	adds	r3, #1
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	dbe3      	blt.n	800ddd8 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800de10:	8afb      	ldrh	r3, [r7, #22]
 800de12:	e00c      	b.n	800de2e <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7ff ff6f 	bl	800dcf8 <SPI_ETH>
 800de1a:	4603      	mov	r3, r0
 800de1c:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	7d9b      	ldrb	r3, [r3, #22]
 800de22:	3301      	adds	r3, #1
 800de24:	b2da      	uxtb	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	759a      	strb	r2, [r3, #22]
			return(res);
 800de2a:	8afb      	ldrh	r3, [r7, #22]
 800de2c:	e7ff      	b.n	800de2e <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3718      	adds	r7, #24
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b086      	sub	sp, #24
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	460b      	mov	r3, r1
 800de40:	807b      	strh	r3, [r7, #2]
 800de42:	4613      	mov	r3, r2
 800de44:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800de46:	2300      	movs	r3, #0
 800de48:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	22f0      	movs	r2, #240	; 0xf0
 800de4e:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800de50:	883b      	ldrh	r3, [r7, #0]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800de56:	883b      	ldrh	r3, [r7, #0]
 800de58:	0a1b      	lsrs	r3, r3, #8
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800de60:	2300      	movs	r3, #0
 800de62:	613b      	str	r3, [r7, #16]
 800de64:	e01b      	b.n	800de9e <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800de66:	887b      	ldrh	r3, [r7, #2]
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800de6e:	887b      	ldrh	r3, [r7, #2]
 800de70:	0a1b      	lsrs	r3, r3, #8
 800de72:	b29b      	uxth	r3, r3
 800de74:	b2da      	uxtb	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	755a      	strb	r2, [r3, #21]
		addr++;
 800de7a:	887b      	ldrh	r3, [r7, #2]
 800de7c:	3301      	adds	r3, #1
 800de7e:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800de80:	f107 020c 	add.w	r2, r7, #12
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	4413      	add	r3, r2
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff ff32 	bl	800dcf8 <SPI_ETH>
 800de94:	4603      	mov	r3, r0
 800de96:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	3301      	adds	r3, #1
 800de9c:	613b      	str	r3, [r7, #16]
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	dde0      	ble.n	800de66 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800dea4:	8afb      	ldrh	r3, [r7, #22]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800deae:	b590      	push	{r4, r7, lr}
 800deb0:	b087      	sub	sp, #28
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	461a      	mov	r2, r3
 800deba:	460b      	mov	r3, r1
 800debc:	817b      	strh	r3, [r7, #10]
 800debe:	4613      	mov	r3, r2
 800dec0:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	220f      	movs	r2, #15
 800dec6:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800deca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dece:	d226      	bcs.n	800df1e <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	e01a      	b.n	800df12 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800dedc:	897b      	ldrh	r3, [r7, #10]
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dee4:	897b      	ldrh	r3, [r7, #10]
 800dee6:	0a1b      	lsrs	r3, r3, #8
 800dee8:	b29b      	uxth	r3, r3
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800def0:	893a      	ldrh	r2, [r7, #8]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	4413      	add	r3, r2
 800def6:	461a      	mov	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	189c      	adds	r4, r3, r2
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f7ff fefb 	bl	800dcf8 <SPI_ETH>
 800df02:	4603      	mov	r3, r0
 800df04:	7023      	strb	r3, [r4, #0]
				addr++;
 800df06:	897b      	ldrh	r3, [r7, #10]
 800df08:	3301      	adds	r3, #1
 800df0a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	3301      	adds	r3, #1
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	429a      	cmp	r2, r3
 800df18:	dbe0      	blt.n	800dedc <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800df1a:	2300      	movs	r3, #0
 800df1c:	e000      	b.n	800df20 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800df1e:	2301      	movs	r3, #1
	}
}
 800df20:	4618      	mov	r0, r3
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	bd90      	pop	{r4, r7, pc}

0800df28 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	607a      	str	r2, [r7, #4]
 800df32:	461a      	mov	r2, r3
 800df34:	460b      	mov	r3, r1
 800df36:	817b      	strh	r3, [r7, #10]
 800df38:	4613      	mov	r3, r2
 800df3a:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	22f0      	movs	r2, #240	; 0xf0
 800df40:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800df42:	8c3b      	ldrh	r3, [r7, #32]
 800df44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df48:	d223      	bcs.n	800df92 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800df4a:	2300      	movs	r3, #0
 800df4c:	617b      	str	r3, [r7, #20]
 800df4e:	e01a      	b.n	800df86 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800df50:	897b      	ldrh	r3, [r7, #10]
 800df52:	b2da      	uxtb	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800df58:	897b      	ldrh	r3, [r7, #10]
 800df5a:	0a1b      	lsrs	r3, r3, #8
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800df64:	893a      	ldrh	r2, [r7, #8]
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	4413      	add	r3, r2
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	4413      	add	r3, r2
 800df6e:	7f1a      	ldrb	r2, [r3, #28]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff febf 	bl	800dcf8 <SPI_ETH>
				addr++;
 800df7a:	897b      	ldrh	r3, [r7, #10]
 800df7c:	3301      	adds	r3, #1
 800df7e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	3301      	adds	r3, #1
 800df84:	617b      	str	r3, [r7, #20]
 800df86:	8c3b      	ldrh	r3, [r7, #32]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	dbe0      	blt.n	800df50 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800df8e:	2300      	movs	r3, #0
 800df90:	e000      	b.n	800df94 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800df92:	2301      	movs	r3, #1
	}
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	22f0      	movs	r2, #240	; 0xf0
 800dfb0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dfb2:	78fb      	ldrb	r3, [r7, #3]
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	78ba      	ldrb	r2, [r7, #2]
 800dfc6:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff fe95 	bl	800dcf8 <SPI_ETH>
}
 800dfce:	bf00      	nop
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	22f0      	movs	r2, #240	; 0xf0
 800dfec:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800dfee:	78fb      	ldrb	r3, [r7, #3]
 800dff0:	3304      	adds	r3, #4
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	78ba      	ldrb	r2, [r7, #2]
 800e002:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fe77 	bl	800dcf8 <SPI_ETH>
}
 800e00a:	bf00      	nop
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af02      	add	r7, sp, #8
 800e01a:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e022:	331c      	adds	r3, #28
 800e024:	2204      	movs	r2, #4
 800e026:	9201      	str	r2, [sp, #4]
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	23f0      	movs	r3, #240	; 0xf0
 800e02c:	2201      	movs	r2, #1
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff fe88 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e036:	2119      	movs	r1, #25
 800e038:	482d      	ldr	r0, [pc, #180]	; (800e0f0 <eth_init+0xdc>)
 800e03a:	f7f3 fa91 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e044:	2204      	movs	r2, #4
 800e046:	9201      	str	r2, [sp, #4]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	23f0      	movs	r3, #240	; 0xf0
 800e04c:	2205      	movs	r2, #5
 800e04e:	2100      	movs	r1, #0
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7ff fe78 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e056:	2116      	movs	r1, #22
 800e058:	4826      	ldr	r0, [pc, #152]	; (800e0f4 <eth_init+0xe0>)
 800e05a:	f7f3 fa81 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e064:	3304      	adds	r3, #4
 800e066:	2206      	movs	r2, #6
 800e068:	9201      	str	r2, [sp, #4]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	23f0      	movs	r3, #240	; 0xf0
 800e06e:	2209      	movs	r2, #9
 800e070:	2100      	movs	r1, #0
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fe67 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e078:	2113      	movs	r1, #19
 800e07a:	481f      	ldr	r0, [pc, #124]	; (800e0f8 <eth_init+0xe4>)
 800e07c:	f7f3 fa70 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e086:	330a      	adds	r3, #10
 800e088:	2204      	movs	r2, #4
 800e08a:	9201      	str	r2, [sp, #4]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	23f0      	movs	r3, #240	; 0xf0
 800e090:	220f      	movs	r2, #15
 800e092:	2100      	movs	r1, #0
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff fe56 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e09a:	2112      	movs	r1, #18
 800e09c:	4817      	ldr	r0, [pc, #92]	; (800e0fc <eth_init+0xe8>)
 800e09e:	f7f3 fa5f 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0a8:	330e      	adds	r3, #14
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	9201      	str	r2, [sp, #4]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	23f0      	movs	r3, #240	; 0xf0
 800e0b2:	221a      	movs	r2, #26
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7ff fe45 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e0bc:	2128      	movs	r1, #40	; 0x28
 800e0be:	4810      	ldr	r0, [pc, #64]	; (800e100 <eth_init+0xec>)
 800e0c0:	f7f3 fa4e 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0ca:	330f      	adds	r3, #15
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	9201      	str	r2, [sp, #4]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	23f0      	movs	r3, #240	; 0xf0
 800e0d4:	221b      	movs	r2, #27
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff fe34 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e0de:	2128      	movs	r1, #40	; 0x28
 800e0e0:	4808      	ldr	r0, [pc, #32]	; (800e104 <eth_init+0xf0>)
 800e0e2:	f7f3 fa3d 	bl	8001560 <ITM0_Write>

}
 800e0e6:	bf00      	nop
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	08010b14 	.word	0x08010b14
 800e0f4:	08010b30 	.word	0x08010b30
 800e0f8:	08010b4c 	.word	0x08010b4c
 800e0fc:	08010b64 	.word	0x08010b64
 800e100:	08010b7c 	.word	0x08010b7c
 800e104:	08010ba8 	.word	0x08010ba8

0800e108 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af02      	add	r7, sp, #8
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	460b      	mov	r3, r1
 800e112:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	2201      	movs	r2, #1
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff ff5c 	bl	800dfd8 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e120:	2119      	movs	r1, #25
 800e122:	4830      	ldr	r0, [pc, #192]	; (800e1e4 <eth_socket_init+0xdc>)
 800e124:	f7f3 fa1c 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e12e:	331a      	adds	r3, #26
 800e130:	2202      	movs	r2, #2
 800e132:	9201      	str	r2, [sp, #4]
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	23f0      	movs	r3, #240	; 0xf0
 800e138:	2204      	movs	r2, #4
 800e13a:	2104      	movs	r1, #4
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff fe02 	bl	800dd46 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e142:	212c      	movs	r1, #44	; 0x2c
 800e144:	4828      	ldr	r0, [pc, #160]	; (800e1e8 <eth_socket_init+0xe0>)
 800e146:	f7f3 fa0b 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e150:	331c      	adds	r3, #28
 800e152:	2204      	movs	r2, #4
 800e154:	9201      	str	r2, [sp, #4]
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	23f0      	movs	r3, #240	; 0xf0
 800e15a:	220c      	movs	r2, #12
 800e15c:	2104      	movs	r1, #4
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fdf1 	bl	800dd46 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e164:	212e      	movs	r1, #46	; 0x2e
 800e166:	4821      	ldr	r0, [pc, #132]	; (800e1ec <eth_socket_init+0xe4>)
 800e168:	f7f3 f9fa 	bl	8001560 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e172:	2202      	movs	r2, #2
 800e174:	9201      	str	r2, [sp, #4]
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	23f0      	movs	r3, #240	; 0xf0
 800e17a:	2210      	movs	r2, #16
 800e17c:	2104      	movs	r1, #4
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff fde1 	bl	800dd46 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e184:	2120      	movs	r1, #32
 800e186:	481a      	ldr	r0, [pc, #104]	; (800e1f0 <eth_socket_init+0xe8>)
 800e188:	f7f3 f9ea 	bl	8001560 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e18c:	78fb      	ldrb	r3, [r7, #3]
 800e18e:	2201      	movs	r2, #1
 800e190:	4619      	mov	r1, r3
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff ff02 	bl	800df9c <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e198:	2119      	movs	r1, #25
 800e19a:	4816      	ldr	r0, [pc, #88]	; (800e1f4 <eth_socket_init+0xec>)
 800e19c:	f7f3 f9e0 	bl	8001560 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d10a      	bne.n	800e1c4 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff fef1 	bl	800df9c <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e1ba:	211b      	movs	r1, #27
 800e1bc:	480e      	ldr	r0, [pc, #56]	; (800e1f8 <eth_socket_init+0xf0>)
 800e1be:	f7f3 f9cf 	bl	8001560 <ITM0_Write>
 800e1c2:	e009      	b.n	800e1d8 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e1c4:	78fb      	ldrb	r3, [r7, #3]
 800e1c6:	2204      	movs	r2, #4
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff fee6 	bl	800df9c <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e1d0:	2115      	movs	r1, #21
 800e1d2:	480a      	ldr	r0, [pc, #40]	; (800e1fc <eth_socket_init+0xf4>)
 800e1d4:	f7f3 f9c4 	bl	8001560 <ITM0_Write>
	 }
}
 800e1d8:	bf00      	nop
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	08010bd4 	.word	0x08010bd4
 800e1e8:	08010bf0 	.word	0x08010bf0
 800e1ec:	08010c20 	.word	0x08010c20
 800e1f0:	08010c50 	.word	0x08010c50
 800e1f4:	08010c74 	.word	0x08010c74
 800e1f8:	08010c90 	.word	0x08010c90
 800e1fc:	08010cac 	.word	0x08010cac

0800e200 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	460b      	mov	r3, r1
 800e20a:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	220f      	movs	r2, #15
 800e210:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e212:	78fb      	ldrb	r3, [r7, #3]
 800e214:	3304      	adds	r3, #4
 800e216:	b2da      	uxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2203      	movs	r2, #3
 800e220:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff fd65 	bl	800dcf8 <SPI_ETH>
	return(y->RX[3]);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7edb      	ldrb	r3, [r3, #27]
}
 800e232:	4618      	mov	r0, r3
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b082      	sub	sp, #8
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	460b      	mov	r3, r1
 800e244:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	220f      	movs	r2, #15
 800e24a:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e24c:	78fb      	ldrb	r3, [r7, #3]
 800e24e:	3304      	adds	r3, #4
 800e250:	b2da      	uxtb	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7ff fd48 	bl	800dcf8 <SPI_ETH>
	return(y->RX[3]);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	7edb      	ldrb	r3, [r3, #27]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08c      	sub	sp, #48	; 0x30
 800e278:	af02      	add	r7, sp, #8
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	607a      	str	r2, [r7, #4]
 800e27e:	461a      	mov	r2, r3
 800e280:	460b      	mov	r3, r1
 800e282:	72fb      	strb	r3, [r7, #11]
 800e284:	4613      	mov	r3, r2
 800e286:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e288:	2300      	movs	r3, #0
 800e28a:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e28c:	2300      	movs	r3, #0
 800e28e:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e290:	2300      	movs	r3, #0
 800e292:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e294:	2300      	movs	r3, #0
 800e296:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e298:	2300      	movs	r3, #0
 800e29a:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e29c:	2300      	movs	r3, #0
 800e29e:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e2b0:	7afb      	ldrb	r3, [r7, #11]
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d83e      	bhi.n	800e334 <eth_rd_SOCKET_DATA+0xc0>
 800e2b6:	a201      	add	r2, pc, #4	; (adr r2, 800e2bc <eth_rd_SOCKET_DATA+0x48>)
 800e2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2bc:	0800e2cd 	.word	0x0800e2cd
 800e2c0:	0800e2e7 	.word	0x0800e2e7
 800e2c4:	0800e301 	.word	0x0800e301
 800e2c8:	0800e31b 	.word	0x0800e31b
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2d6:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e2e4:	e033      	b.n	800e34e <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e2f0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e2fe:	e026      	b.n	800e34e <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e30a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e312:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e316:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e318:	e019      	b.n	800e34e <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e320:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e324:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e330:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e332:	e00c      	b.n	800e34e <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e33e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e34a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e34c:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e34e:	7afb      	ldrb	r3, [r7, #11]
 800e350:	3304      	adds	r3, #4
 800e352:	b2d9      	uxtb	r1, r3
 800e354:	2302      	movs	r3, #2
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	f107 0310 	add.w	r3, r7, #16
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	230f      	movs	r3, #15
 800e360:	2228      	movs	r2, #40	; 0x28
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff fcef 	bl	800dd46 <SPI_ETH_REG>
 800e368:	4603      	mov	r3, r0
 800e36a:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e36c:	8b7a      	ldrh	r2, [r7, #26]
 800e36e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e370:	4013      	ands	r3, r2
 800e372:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e374:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e376:	8b3b      	ldrh	r3, [r7, #24]
 800e378:	4413      	add	r3, r2
 800e37a:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e37c:	8b3a      	ldrh	r2, [r7, #24]
 800e37e:	893b      	ldrh	r3, [r7, #8]
 800e380:	441a      	add	r2, r3
 800e382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e384:	3301      	adds	r3, #1
 800e386:	429a      	cmp	r2, r3
 800e388:	dd2c      	ble.n	800e3e4 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e38a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e38c:	8b3b      	ldrh	r3, [r7, #24]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	b29b      	uxth	r3, r3
 800e392:	3301      	adds	r3, #1
 800e394:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f103 021c 	add.w	r2, r3, #28
 800e39c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e39e:	8af9      	ldrh	r1, [r7, #22]
 800e3a0:	8bfb      	ldrh	r3, [r7, #30]
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fd81 	bl	800deae <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e3ac:	8bba      	ldrh	r2, [r7, #28]
 800e3ae:	8bfb      	ldrh	r3, [r7, #30]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e3b4:	893a      	ldrh	r2, [r7, #8]
 800e3b6:	8bfb      	ldrh	r3, [r7, #30]
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e3bc:	8bfb      	ldrh	r3, [r7, #30]
 800e3be:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f103 021c 	add.w	r2, r3, #28
 800e3c6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e3c8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e3ca:	8c3b      	ldrh	r3, [r7, #32]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff fd6c 	bl	800deae <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e3d6:	8b7a      	ldrh	r2, [r7, #26]
 800e3d8:	893b      	ldrh	r3, [r7, #8]
 800e3da:	4413      	add	r3, r2
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	801a      	strh	r2, [r3, #0]
 800e3e2:	e010      	b.n	800e406 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f103 021c 	add.w	r2, r3, #28
 800e3ea:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e3ec:	8af9      	ldrh	r1, [r7, #22]
 800e3ee:	893b      	ldrh	r3, [r7, #8]
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7ff fd5a 	bl	800deae <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e3fa:	8b7a      	ldrh	r2, [r7, #26]
 800e3fc:	893b      	ldrh	r3, [r7, #8]
 800e3fe:	4413      	add	r3, r2
 800e400:	b29a      	uxth	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	b29b      	uxth	r3, r3
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3728      	adds	r7, #40	; 0x28
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop

0800e414 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af02      	add	r7, sp, #8
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	607a      	str	r2, [r7, #4]
 800e41e:	461a      	mov	r2, r3
 800e420:	460b      	mov	r3, r1
 800e422:	72fb      	strb	r3, [r7, #11]
 800e424:	4613      	mov	r3, r2
 800e426:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e428:	2300      	movs	r3, #0
 800e42a:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e42c:	2300      	movs	r3, #0
 800e42e:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e430:	2300      	movs	r3, #0
 800e432:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e434:	2300      	movs	r3, #0
 800e436:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e438:	2300      	movs	r3, #0
 800e43a:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e43c:	2300      	movs	r3, #0
 800e43e:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e440:	2300      	movs	r3, #0
 800e442:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e444:	2300      	movs	r3, #0
 800e446:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e448:	2300      	movs	r3, #0
 800e44a:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e44c:	2300      	movs	r3, #0
 800e44e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e450:	2300      	movs	r3, #0
 800e452:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e454:	7afb      	ldrb	r3, [r7, #11]
 800e456:	2b03      	cmp	r3, #3
 800e458:	d83e      	bhi.n	800e4d8 <eth_wr_SOCKET_DATA+0xc4>
 800e45a:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <eth_wr_SOCKET_DATA+0x4c>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e471 	.word	0x0800e471
 800e464:	0800e48b 	.word	0x0800e48b
 800e468:	0800e4a5 	.word	0x0800e4a5
 800e46c:	0800e4bf 	.word	0x0800e4bf
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e476:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e47a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e486:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e488:	e033      	b.n	800e4f2 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e494:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e4a0:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4a2:	e026      	b.n	800e4f2 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4ba:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4bc:	e019      	b.n	800e4f2 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e4c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4d4:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4d6:	e00c      	b.n	800e4f2 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e4ee:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e4f0:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e4f2:	e00e      	b.n	800e512 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e4f4:	7afb      	ldrb	r3, [r7, #11]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	b2d9      	uxtb	r1, r3
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	9301      	str	r3, [sp, #4]
 800e4fe:	f107 0310 	add.w	r3, r7, #16
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	230f      	movs	r3, #15
 800e506:	2220      	movs	r2, #32
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f7ff fc1c 	bl	800dd46 <SPI_ETH_REG>
 800e50e:	4603      	mov	r3, r0
 800e510:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e514:	893b      	ldrh	r3, [r7, #8]
 800e516:	429a      	cmp	r2, r3
 800e518:	d3ec      	bcc.n	800e4f4 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e51a:	7afb      	ldrb	r3, [r7, #11]
 800e51c:	3304      	adds	r3, #4
 800e51e:	b2d9      	uxtb	r1, r3
 800e520:	2302      	movs	r3, #2
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	f107 0310 	add.w	r3, r7, #16
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	230f      	movs	r3, #15
 800e52c:	2224      	movs	r2, #36	; 0x24
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f7ff fc09 	bl	800dd46 <SPI_ETH_REG>
 800e534:	4603      	mov	r3, r0
 800e536:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e538:	8b3a      	ldrh	r2, [r7, #24]
 800e53a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e53c:	4013      	ands	r3, r2
 800e53e:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e540:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e542:	8afb      	ldrh	r3, [r7, #22]
 800e544:	4413      	add	r3, r2
 800e546:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e548:	8afa      	ldrh	r2, [r7, #22]
 800e54a:	893b      	ldrh	r3, [r7, #8]
 800e54c:	441a      	add	r2, r3
 800e54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e550:	3301      	adds	r3, #1
 800e552:	429a      	cmp	r2, r3
 800e554:	dd2c      	ble.n	800e5b0 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e558:	8afb      	ldrh	r3, [r7, #22]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	3301      	adds	r3, #1
 800e560:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f103 021c 	add.w	r2, r3, #28
 800e568:	8c38      	ldrh	r0, [r7, #32]
 800e56a:	8ab9      	ldrh	r1, [r7, #20]
 800e56c:	8bbb      	ldrh	r3, [r7, #28]
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	4603      	mov	r3, r0
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f7ff fcd8 	bl	800df28 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e578:	8b7a      	ldrh	r2, [r7, #26]
 800e57a:	8bbb      	ldrh	r3, [r7, #28]
 800e57c:	4413      	add	r3, r2
 800e57e:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e580:	893a      	ldrh	r2, [r7, #8]
 800e582:	8bbb      	ldrh	r3, [r7, #28]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e588:	8bbb      	ldrh	r3, [r7, #28]
 800e58a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f103 021c 	add.w	r2, r3, #28
 800e592:	8c38      	ldrh	r0, [r7, #32]
 800e594:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e596:	8bfb      	ldrh	r3, [r7, #30]
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	4603      	mov	r3, r0
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff fcc3 	bl	800df28 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e5a2:	8b3a      	ldrh	r2, [r7, #24]
 800e5a4:	893b      	ldrh	r3, [r7, #8]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	801a      	strh	r2, [r3, #0]
 800e5ae:	e010      	b.n	800e5d2 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f103 021c 	add.w	r2, r3, #28
 800e5b6:	8c38      	ldrh	r0, [r7, #32]
 800e5b8:	8ab9      	ldrh	r1, [r7, #20]
 800e5ba:	893b      	ldrh	r3, [r7, #8]
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	4603      	mov	r3, r0
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f7ff fcb1 	bl	800df28 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e5c6:	8b3a      	ldrh	r2, [r7, #24]
 800e5c8:	893b      	ldrh	r3, [r7, #8]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	801a      	strh	r2, [r3, #0]
					}

}
 800e5d2:	bf00      	nop
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3728      	adds	r7, #40	; 0x28
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b090      	sub	sp, #64	; 0x40
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	633b      	str	r3, [r7, #48]	; 0x30
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5fe:	2300      	movs	r3, #0
 800e600:	623b      	str	r3, [r7, #32]
 800e602:	2300      	movs	r3, #0
 800e604:	61fb      	str	r3, [r7, #28]
 800e606:	2300      	movs	r3, #0
 800e608:	61bb      	str	r3, [r7, #24]
 800e60a:	2300      	movs	r3, #0
 800e60c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]
 800e612:	2300      	movs	r3, #0
 800e614:	627b      	str	r3, [r7, #36]	; 0x24
 800e616:	2300      	movs	r3, #0
 800e618:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e626:	6a3a      	ldr	r2, [r7, #32]
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	f2c0 82fe 	blt.w	800ec2c <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e630:	2300      	movs	r3, #0
 800e632:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e634:	e00c      	b.n	800e650 <FT_String_ND+0x74>
							{
								n++;
 800e636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e638:	3301      	adds	r3, #1
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e63c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	441a      	add	r2, r3
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	3301      	adds	r3, #1
 800e646:	429a      	cmp	r2, r3
 800e648:	dd02      	ble.n	800e650 <FT_String_ND+0x74>
								{
									estado=0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e64e:	e009      	b.n	800e664 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	4413      	add	r3, r2
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	6879      	ldr	r1, [r7, #4]
 800e65c:	440b      	add	r3, r1
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	429a      	cmp	r2, r3
 800e662:	d1e8      	bne.n	800e636 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e666:	3301      	adds	r3, #1
 800e668:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	3301      	adds	r3, #1
 800e66e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	429a      	cmp	r2, r3
 800e676:	d108      	bne.n	800e68a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e682:	601a      	str	r2, [r3, #0]
									estado=1;
 800e684:	2301      	movs	r3, #1
 800e686:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e688:	e010      	b.n	800e6ac <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e68a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	429a      	cmp	r2, r3
 800e690:	dd02      	ble.n	800e698 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e692:	2300      	movs	r3, #0
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e696:	e009      	b.n	800e6ac <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	4413      	add	r3, r2
 800e69e:	781a      	ldrb	r2, [r3, #0]
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	440b      	add	r3, r1
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d0db      	beq.n	800e664 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	1e5a      	subs	r2, r3, #1
 800e6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b2:	4413      	add	r3, r2
 800e6b4:	6a3a      	ldr	r2, [r7, #32]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	dd02      	ble.n	800e6c0 <FT_String_ND+0xe4>
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d1b7      	bne.n	800e630 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	e2b1      	b.n	800ec2e <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e6ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d12c      	bne.n	800e72a <FT_String_ND+0x14e>
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d129      	bne.n	800e72a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e6d6:	e014      	b.n	800e702 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	441a      	add	r2, r3
 800e6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e2:	4413      	add	r3, r2
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	441a      	add	r2, r3
 800e6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ec:	6819      	ldr	r1, [r3, #0]
 800e6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f0:	440b      	add	r3, r1
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	68f9      	ldr	r1, [r7, #12]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	7812      	ldrb	r2, [r2, #0]
 800e6fa:	701a      	strb	r2, [r3, #0]
										n3++;
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fe:	3301      	adds	r3, #1
 800e700:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	441a      	add	r2, r3
 800e70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70c:	4413      	add	r3, r2
 800e70e:	6a3a      	ldr	r2, [r7, #32]
 800e710:	429a      	cmp	r2, r3
 800e712:	dae1      	bge.n	800e6d8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71a:	4413      	add	r3, r2
 800e71c:	1e5a      	subs	r2, r3, #1
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	601a      	str	r2, [r3, #0]
							estado=3;
 800e722:	2303      	movs	r3, #3
 800e724:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	e281      	b.n	800ec2e <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	f040 80b6 	bne.w	800e89e <FT_String_ND+0x2c2>
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	2b01      	cmp	r3, #1
 800e736:	f040 80b2 	bne.w	800e89e <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e73a:	e012      	b.n	800e762 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e73c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	1ad2      	subs	r2, r2, r3
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	4413      	add	r3, r2
 800e746:	461a      	mov	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	441a      	add	r2, r3
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e750:	440b      	add	r3, r1
 800e752:	7812      	ldrb	r2, [r2, #0]
 800e754:	701a      	strb	r2, [r3, #0]
								n4++;
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	3301      	adds	r3, #1
 800e75a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e760:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	1ad2      	subs	r2, r2, r3
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	4413      	add	r3, r2
 800e76c:	6a3a      	ldr	r2, [r7, #32]
 800e76e:	429a      	cmp	r2, r3
 800e770:	dae4      	bge.n	800e73c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e772:	499e      	ldr	r1, [pc, #632]	; (800e9ec <FT_String_ND+0x410>)
 800e774:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e776:	f000 fb6f 	bl	800ee58 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e77a:	499d      	ldr	r1, [pc, #628]	; (800e9f0 <FT_String_ND+0x414>)
 800e77c:	2000      	movs	r0, #0
 800e77e:	f000 fb6b 	bl	800ee58 <strtok>
 800e782:	4603      	mov	r3, r0
 800e784:	4618      	mov	r0, r3
 800e786:	f000 fada 	bl	800ed3e <atoi>
 800e78a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e78e:	3306      	adds	r3, #6
 800e790:	222c      	movs	r2, #44	; 0x2c
 800e792:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	2b09      	cmp	r3, #9
 800e798:	dc0d      	bgt.n	800e7b6 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e79c:	3308      	adds	r3, #8
 800e79e:	223a      	movs	r2, #58	; 0x3a
 800e7a0:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	3309      	adds	r3, #9
 800e7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7a8:	4413      	add	r3, r2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	3309      	adds	r3, #9
 800e7b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7b4:	e021      	b.n	800e7fa <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	2b63      	cmp	r3, #99	; 0x63
 800e7ba:	dc0d      	bgt.n	800e7d8 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e7bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7be:	3309      	adds	r3, #9
 800e7c0:	223a      	movs	r2, #58	; 0x3a
 800e7c2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	330a      	adds	r3, #10
 800e7c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ca:	4413      	add	r3, r2
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	330a      	adds	r3, #10
 800e7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7d6:	e010      	b.n	800e7fa <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7de:	da0c      	bge.n	800e7fa <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7e2:	330a      	adds	r3, #10
 800e7e4:	223a      	movs	r2, #58	; 0x3a
 800e7e6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	330b      	adds	r3, #11
 800e7ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ee:	4413      	add	r3, r2
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	330b      	adds	r3, #11
 800e7f8:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7fe:	601a      	str	r2, [r3, #0]
							n4=0;
 800e800:	2300      	movs	r3, #0
 800e802:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e804:	e016      	b.n	800e834 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	1ad2      	subs	r2, r2, r3
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	441a      	add	r2, r3
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	4413      	add	r3, r2
 800e814:	461a      	mov	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	441a      	add	r2, r3
 800e81a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	1ac9      	subs	r1, r1, r3
 800e820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e822:	440b      	add	r3, r1
 800e824:	4619      	mov	r1, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	440b      	add	r3, r1
 800e82a:	7812      	ldrb	r2, [r2, #0]
 800e82c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	3301      	adds	r3, #1
 800e832:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	1ad2      	subs	r2, r2, r3
 800e83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83c:	441a      	add	r2, r3
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	4413      	add	r3, r2
 800e842:	6a3a      	ldr	r2, [r7, #32]
 800e844:	429a      	cmp	r2, r3
 800e846:	dade      	bge.n	800e806 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	441a      	add	r2, r3
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	1e5a      	subs	r2, r3, #1
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	1ad2      	subs	r2, r2, r3
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	441a      	add	r2, r3
 800e862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e864:	4413      	add	r3, r2
 800e866:	461a      	mov	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	2200      	movs	r2, #0
 800e86e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	1ad2      	subs	r2, r2, r3
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	4413      	add	r3, r2
 800e87a:	461a      	mov	r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	4413      	add	r3, r2
 800e880:	2200      	movs	r2, #0
 800e882:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	1ad2      	subs	r2, r2, r3
 800e88a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	440b      	add	r3, r1
 800e890:	429a      	cmp	r2, r3
 800e892:	d102      	bne.n	800e89a <FT_String_ND+0x2be>
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e89a:	2303      	movs	r3, #3
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8a0:	2b03      	cmp	r3, #3
 800e8a2:	d146      	bne.n	800e932 <FT_String_ND+0x356>
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d143      	bne.n	800e932 <FT_String_ND+0x356>
						{
						n3=0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e8ae:	e00e      	b.n	800e8ce <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	441a      	add	r2, r3
 800e8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8c2:	440b      	add	r3, r1
 800e8c4:	7812      	ldrb	r2, [r2, #0]
 800e8c6:	701a      	strb	r2, [r3, #0]
										n3++;
 800e8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e8ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	dbec      	blt.n	800e8b0 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e8da:	e014      	b.n	800e906 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	441a      	add	r2, r3
 800e8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e6:	4413      	add	r3, r2
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	441a      	add	r2, r3
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f0:	6819      	ldr	r1, [r3, #0]
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	440b      	add	r3, r1
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	68f9      	ldr	r1, [r7, #12]
 800e8fa:	440b      	add	r3, r1
 800e8fc:	7812      	ldrb	r2, [r2, #0]
 800e8fe:	701a      	strb	r2, [r3, #0]
										n5++;
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	3301      	adds	r3, #1
 800e904:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	441a      	add	r2, r3
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	441a      	add	r2, r3
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	429a      	cmp	r2, r3
 800e918:	dde0      	ble.n	800e8dc <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	4413      	add	r3, r2
 800e922:	1e5a      	subs	r2, r3, #1
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e92c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e92e:	2303      	movs	r3, #3
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e934:	2b04      	cmp	r3, #4
 800e936:	f040 80b6 	bne.w	800eaa6 <FT_String_ND+0x4ca>
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	f040 80b2 	bne.w	800eaa6 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e942:	e012      	b.n	800e96a <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	1ad2      	subs	r2, r2, r3
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	4413      	add	r3, r2
 800e94e:	461a      	mov	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	441a      	add	r2, r3
 800e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e958:	440b      	add	r3, r1
 800e95a:	7812      	ldrb	r2, [r2, #0]
 800e95c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	3301      	adds	r3, #1
 800e962:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e968:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e96a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e972:	4413      	add	r3, r2
 800e974:	6a3a      	ldr	r2, [r7, #32]
 800e976:	429a      	cmp	r2, r3
 800e978:	dae4      	bge.n	800e944 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e97a:	491c      	ldr	r1, [pc, #112]	; (800e9ec <FT_String_ND+0x410>)
 800e97c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e97e:	f000 fa6b 	bl	800ee58 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e982:	491b      	ldr	r1, [pc, #108]	; (800e9f0 <FT_String_ND+0x414>)
 800e984:	2000      	movs	r0, #0
 800e986:	f000 fa67 	bl	800ee58 <strtok>
 800e98a:	4603      	mov	r3, r0
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 f9d6 	bl	800ed3e <atoi>
 800e992:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e996:	3306      	adds	r3, #6
 800e998:	222c      	movs	r2, #44	; 0x2c
 800e99a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b09      	cmp	r3, #9
 800e9a0:	dc07      	bgt.n	800e9b2 <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	223a      	movs	r2, #58	; 0x3a
 800e9a8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	3309      	adds	r3, #9
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b0:	e015      	b.n	800e9de <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b63      	cmp	r3, #99	; 0x63
 800e9b6:	dc07      	bgt.n	800e9c8 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ba:	3309      	adds	r3, #9
 800e9bc:	223a      	movs	r2, #58	; 0x3a
 800e9be:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	330a      	adds	r3, #10
 800e9c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9c6:	e00a      	b.n	800e9de <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9ce:	da06      	bge.n	800e9de <FT_String_ND+0x402>
														{
															c[10]=':';
 800e9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9d2:	330a      	adds	r3, #10
 800e9d4:	223a      	movs	r2, #58	; 0x3a
 800e9d6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	330b      	adds	r3, #11
 800e9dc:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e2:	601a      	str	r2, [r3, #0]
							n4=0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9e8:	e01b      	b.n	800ea22 <FT_String_ND+0x446>
 800e9ea:	bf00      	nop
 800e9ec:	08010cc4 	.word	0x08010cc4
 800e9f0:	08010cc8 	.word	0x08010cc8
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e9f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	441a      	add	r2, r3
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	4413      	add	r3, r2
 800ea02:	461a      	mov	r2, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	441a      	add	r2, r3
 800ea08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	1ac9      	subs	r1, r1, r3
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	440b      	add	r3, r1
 800ea12:	4619      	mov	r1, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	440b      	add	r3, r1
 800ea18:	7812      	ldrb	r2, [r2, #0]
 800ea1a:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	3301      	adds	r3, #1
 800ea20:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ea22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	1ad2      	subs	r2, r2, r3
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	441a      	add	r2, r3
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2e:	4413      	add	r3, r2
 800ea30:	6a3a      	ldr	r2, [r7, #32]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	dade      	bge.n	800e9f4 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ea36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	441a      	add	r2, r3
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	1e5a      	subs	r2, r3, #1
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	601a      	str	r2, [r3, #0]
							n5=0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea4a:	e00f      	b.n	800ea6c <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ea4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	1ad2      	subs	r2, r2, r3
 800ea52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea54:	4413      	add	r3, r2
 800ea56:	461a      	mov	r2, r3
 800ea58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea5a:	441a      	add	r2, r3
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea60:	440b      	add	r3, r1
 800ea62:	7812      	ldrb	r2, [r2, #0]
 800ea64:	701a      	strb	r2, [r3, #0]
								n5++;
 800ea66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea68:	3301      	adds	r3, #1
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	1ad2      	subs	r2, r2, r3
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	441a      	add	r2, r3
 800ea76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	dbe6      	blt.n	800ea4c <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ea7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea82:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ea84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	441a      	add	r2, r3
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4413      	add	r3, r2
 800ea96:	6a3a      	ldr	r2, [r7, #32]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d102      	bne.n	800eaa2 <FT_String_ND+0x4c6>
							{
								estado=4;
 800ea9c:	2304      	movs	r3, #4
 800ea9e:	627b      	str	r3, [r7, #36]	; 0x24
 800eaa0:	e001      	b.n	800eaa6 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800eaa2:	2305      	movs	r3, #5
 800eaa4:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800eaa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eaa8:	2b05      	cmp	r3, #5
 800eaaa:	f040 80bd 	bne.w	800ec28 <FT_String_ND+0x64c>
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	f040 80b9 	bne.w	800ec28 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eab6:	e012      	b.n	800eade <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	1ad2      	subs	r2, r2, r3
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	4413      	add	r3, r2
 800eac2:	461a      	mov	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	441a      	add	r2, r3
 800eac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eacc:	440b      	add	r3, r1
 800eace:	7812      	ldrb	r2, [r2, #0]
 800ead0:	701a      	strb	r2, [r3, #0]
								n4++;
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	3301      	adds	r3, #1
 800ead6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ead8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eadc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	1ad2      	subs	r2, r2, r3
 800eae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae6:	4413      	add	r3, r2
 800eae8:	6a3a      	ldr	r2, [r7, #32]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	dae4      	bge.n	800eab8 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eaee:	4952      	ldr	r1, [pc, #328]	; (800ec38 <FT_String_ND+0x65c>)
 800eaf0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eaf2:	f000 f9b1 	bl	800ee58 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800eaf6:	4951      	ldr	r1, [pc, #324]	; (800ec3c <FT_String_ND+0x660>)
 800eaf8:	2000      	movs	r0, #0
 800eafa:	f000 f9ad 	bl	800ee58 <strtok>
 800eafe:	4603      	mov	r3, r0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f000 f91c 	bl	800ed3e <atoi>
 800eb06:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eb08:	494c      	ldr	r1, [pc, #304]	; (800ec3c <FT_String_ND+0x660>)
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	f000 f9a4 	bl	800ee58 <strtok>
 800eb10:	4603      	mov	r3, r0
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 f913 	bl	800ed3e <atoi>
 800eb18:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800eb1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb1c:	3306      	adds	r3, #6
 800eb1e:	222c      	movs	r2, #44	; 0x2c
 800eb20:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b09      	cmp	r3, #9
 800eb26:	dc07      	bgt.n	800eb38 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800eb28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb2a:	330a      	adds	r3, #10
 800eb2c:	223a      	movs	r2, #58	; 0x3a
 800eb2e:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	330b      	adds	r3, #11
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb36:	e015      	b.n	800eb64 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	2b63      	cmp	r3, #99	; 0x63
 800eb3c:	dc07      	bgt.n	800eb4e <FT_String_ND+0x572>
														{
															c[11]=':';
 800eb3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb40:	330b      	adds	r3, #11
 800eb42:	223a      	movs	r2, #58	; 0x3a
 800eb44:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	330c      	adds	r3, #12
 800eb4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb4c:	e00a      	b.n	800eb64 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb54:	da06      	bge.n	800eb64 <FT_String_ND+0x588>
														{
															c[12]=':';
 800eb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb58:	330c      	adds	r3, #12
 800eb5a:	223a      	movs	r2, #58	; 0x3a
 800eb5c:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	330d      	adds	r3, #13
 800eb62:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb68:	601a      	str	r2, [r3, #0]
							n4=0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb6e:	e016      	b.n	800eb9e <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eb70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	1ad2      	subs	r2, r2, r3
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	441a      	add	r2, r3
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	4413      	add	r3, r2
 800eb7e:	461a      	mov	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	441a      	add	r2, r3
 800eb84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	1ac9      	subs	r1, r1, r3
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	440b      	add	r3, r1
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	440b      	add	r3, r1
 800eb94:	7812      	ldrb	r2, [r2, #0]
 800eb96:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	1ad2      	subs	r2, r2, r3
 800eba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba6:	441a      	add	r2, r3
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	4413      	add	r3, r2
 800ebac:	6a3a      	ldr	r2, [r7, #32]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	dade      	bge.n	800eb70 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ebb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	441a      	add	r2, r3
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	1e5a      	subs	r2, r3, #1
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	601a      	str	r2, [r3, #0]
							n5=0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebc6:	e00f      	b.n	800ebe8 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ebc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	1ad2      	subs	r2, r2, r3
 800ebce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd0:	4413      	add	r3, r2
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd6:	441a      	add	r2, r3
 800ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebdc:	440b      	add	r3, r1
 800ebde:	7812      	ldrb	r2, [r2, #0]
 800ebe0:	701a      	strb	r2, [r3, #0]
								n5++;
 800ebe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	1ad2      	subs	r2, r2, r3
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	441a      	add	r2, r3
 800ebf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	dbe6      	blt.n	800ebc8 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ebfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebfe:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ec00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	441a      	add	r2, r3
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	1ad2      	subs	r2, r2, r3
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4413      	add	r3, r2
 800ec12:	6a3a      	ldr	r2, [r7, #32]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d105      	bne.n	800ec24 <FT_String_ND+0x648>
							{
								estado=4;
 800ec18:	2304      	movs	r3, #4
 800ec1a:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ec1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	601a      	str	r2, [r3, #0]
 800ec22:	e001      	b.n	800ec28 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800ec24:	2305      	movs	r3, #5
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	e000      	b.n	800ec2e <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ec2c:	2302      	movs	r3, #2
			}
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3740      	adds	r7, #64	; 0x40
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	08010cc4 	.word	0x08010cc4
 800ec3c:	08010cc8 	.word	0x08010cc8

0800ec40 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ec4a:	2330      	movs	r3, #48	; 0x30
 800ec4c:	60bb      	str	r3, [r7, #8]
 800ec4e:	f107 030c 	add.w	r3, r7, #12
 800ec52:	2200      	movs	r2, #0
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	605a      	str	r2, [r3, #4]
 800ec58:	609a      	str	r2, [r3, #8]
 800ec5a:	60da      	str	r2, [r3, #12]
int i=0;	
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ec60:	f107 0308 	add.w	r3, r7, #8
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	490f      	ldr	r1, [pc, #60]	; (800eca4 <INTOA+0x64>)
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f000 f8b9 	bl	800ede0 <siprintf>
		while(i<=strlen(origbuff))
 800ec6e:	e00b      	b.n	800ec88 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	603a      	str	r2, [r7, #0]
 800ec76:	f107 0108 	add.w	r1, r7, #8
 800ec7a:	69fa      	ldr	r2, [r7, #28]
 800ec7c:	440a      	add	r2, r1
 800ec7e:	7812      	ldrb	r2, [r2, #0]
 800ec80:	701a      	strb	r2, [r3, #0]
		i++;
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	3301      	adds	r3, #1
 800ec86:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ec88:	f107 0308 	add.w	r3, r7, #8
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f1 fab1 	bl	80001f4 <strlen>
 800ec92:	4602      	mov	r2, r0
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d2ea      	bcs.n	800ec70 <INTOA+0x30>
		}
		return(i);
 800ec9a:	69fb      	ldr	r3, [r7, #28]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	08010ccc 	.word	0x08010ccc

0800eca8 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b088      	sub	sp, #32
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
int x =0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ecba:	2300      	movs	r3, #0
 800ecbc:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ecbe:	f107 0310 	add.w	r3, r7, #16
 800ecc2:	617b      	str	r3, [r7, #20]
if (c==0)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d105      	bne.n	800ecd6 <CopiaVector+0x2e>
{
	x=strlen(b);
 800ecca:	68b8      	ldr	r0, [r7, #8]
 800eccc:	f7f1 fa92 	bl	80001f4 <strlen>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	e02e      	b.n	800ed34 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ece0:	dd01      	ble.n	800ece6 <CopiaVector+0x3e>
			{
				return(1);
 800ece2:	2301      	movs	r3, #1
 800ece4:	e027      	b.n	800ed36 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ecea:	e00a      	b.n	800ed02 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	1c53      	adds	r3, r2, #1
 800ecf0:	60bb      	str	r3, [r7, #8]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1c59      	adds	r1, r3, #1
 800ecf6:	60f9      	str	r1, [r7, #12]
 800ecf8:	7812      	ldrb	r2, [r2, #0]
 800ecfa:	701a      	strb	r2, [r3, #0]
					p++;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ed02:	69fa      	ldr	r2, [r7, #28]
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	dbf0      	blt.n	800ecec <CopiaVector+0x44>
				}


			if (d==1)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d111      	bne.n	800ed34 <CopiaVector+0x8c>
			{
			  p=c;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ed14:	e008      	b.n	800ed28 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	60fa      	str	r2, [r7, #12]
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	7812      	ldrb	r2, [r2, #0]
 800ed20:	701a      	strb	r2, [r3, #0]
				  p++;
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	3301      	adds	r3, #1
 800ed26:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed2e:	dbf2      	blt.n	800ed16 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800ed30:	2300      	movs	r3, #0
 800ed32:	e000      	b.n	800ed36 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ed34:	2301      	movs	r3, #1
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3720      	adds	r7, #32
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <atoi>:
 800ed3e:	220a      	movs	r2, #10
 800ed40:	2100      	movs	r1, #0
 800ed42:	f000 b967 	b.w	800f014 <strtol>
	...

0800ed48 <__errno>:
 800ed48:	4b01      	ldr	r3, [pc, #4]	; (800ed50 <__errno+0x8>)
 800ed4a:	6818      	ldr	r0, [r3, #0]
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	2000013c 	.word	0x2000013c

0800ed54 <__libc_init_array>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	4d0d      	ldr	r5, [pc, #52]	; (800ed8c <__libc_init_array+0x38>)
 800ed58:	4c0d      	ldr	r4, [pc, #52]	; (800ed90 <__libc_init_array+0x3c>)
 800ed5a:	1b64      	subs	r4, r4, r5
 800ed5c:	10a4      	asrs	r4, r4, #2
 800ed5e:	2600      	movs	r6, #0
 800ed60:	42a6      	cmp	r6, r4
 800ed62:	d109      	bne.n	800ed78 <__libc_init_array+0x24>
 800ed64:	4d0b      	ldr	r5, [pc, #44]	; (800ed94 <__libc_init_array+0x40>)
 800ed66:	4c0c      	ldr	r4, [pc, #48]	; (800ed98 <__libc_init_array+0x44>)
 800ed68:	f001 fb56 	bl	8010418 <_init>
 800ed6c:	1b64      	subs	r4, r4, r5
 800ed6e:	10a4      	asrs	r4, r4, #2
 800ed70:	2600      	movs	r6, #0
 800ed72:	42a6      	cmp	r6, r4
 800ed74:	d105      	bne.n	800ed82 <__libc_init_array+0x2e>
 800ed76:	bd70      	pop	{r4, r5, r6, pc}
 800ed78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed7c:	4798      	blx	r3
 800ed7e:	3601      	adds	r6, #1
 800ed80:	e7ee      	b.n	800ed60 <__libc_init_array+0xc>
 800ed82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed86:	4798      	blx	r3
 800ed88:	3601      	adds	r6, #1
 800ed8a:	e7f2      	b.n	800ed72 <__libc_init_array+0x1e>
 800ed8c:	08010f60 	.word	0x08010f60
 800ed90:	08010f60 	.word	0x08010f60
 800ed94:	08010f60 	.word	0x08010f60
 800ed98:	08010f64 	.word	0x08010f64

0800ed9c <__itoa>:
 800ed9c:	1e93      	subs	r3, r2, #2
 800ed9e:	2b22      	cmp	r3, #34	; 0x22
 800eda0:	b510      	push	{r4, lr}
 800eda2:	460c      	mov	r4, r1
 800eda4:	d904      	bls.n	800edb0 <__itoa+0x14>
 800eda6:	2300      	movs	r3, #0
 800eda8:	700b      	strb	r3, [r1, #0]
 800edaa:	461c      	mov	r4, r3
 800edac:	4620      	mov	r0, r4
 800edae:	bd10      	pop	{r4, pc}
 800edb0:	2a0a      	cmp	r2, #10
 800edb2:	d109      	bne.n	800edc8 <__itoa+0x2c>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	da07      	bge.n	800edc8 <__itoa+0x2c>
 800edb8:	232d      	movs	r3, #45	; 0x2d
 800edba:	700b      	strb	r3, [r1, #0]
 800edbc:	4240      	negs	r0, r0
 800edbe:	2101      	movs	r1, #1
 800edc0:	4421      	add	r1, r4
 800edc2:	f000 f931 	bl	800f028 <__utoa>
 800edc6:	e7f1      	b.n	800edac <__itoa+0x10>
 800edc8:	2100      	movs	r1, #0
 800edca:	e7f9      	b.n	800edc0 <__itoa+0x24>

0800edcc <itoa>:
 800edcc:	f7ff bfe6 	b.w	800ed9c <__itoa>

0800edd0 <memset>:
 800edd0:	4402      	add	r2, r0
 800edd2:	4603      	mov	r3, r0
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d100      	bne.n	800edda <memset+0xa>
 800edd8:	4770      	bx	lr
 800edda:	f803 1b01 	strb.w	r1, [r3], #1
 800edde:	e7f9      	b.n	800edd4 <memset+0x4>

0800ede0 <siprintf>:
 800ede0:	b40e      	push	{r1, r2, r3}
 800ede2:	b500      	push	{lr}
 800ede4:	b09c      	sub	sp, #112	; 0x70
 800ede6:	ab1d      	add	r3, sp, #116	; 0x74
 800ede8:	9002      	str	r0, [sp, #8]
 800edea:	9006      	str	r0, [sp, #24]
 800edec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800edf0:	4809      	ldr	r0, [pc, #36]	; (800ee18 <siprintf+0x38>)
 800edf2:	9107      	str	r1, [sp, #28]
 800edf4:	9104      	str	r1, [sp, #16]
 800edf6:	4909      	ldr	r1, [pc, #36]	; (800ee1c <siprintf+0x3c>)
 800edf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edfc:	9105      	str	r1, [sp, #20]
 800edfe:	6800      	ldr	r0, [r0, #0]
 800ee00:	9301      	str	r3, [sp, #4]
 800ee02:	a902      	add	r1, sp, #8
 800ee04:	f000 fac6 	bl	800f394 <_svfiprintf_r>
 800ee08:	9b02      	ldr	r3, [sp, #8]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	701a      	strb	r2, [r3, #0]
 800ee0e:	b01c      	add	sp, #112	; 0x70
 800ee10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee14:	b003      	add	sp, #12
 800ee16:	4770      	bx	lr
 800ee18:	2000013c 	.word	0x2000013c
 800ee1c:	ffff0208 	.word	0xffff0208

0800ee20 <strcpy>:
 800ee20:	4603      	mov	r3, r0
 800ee22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee26:	f803 2b01 	strb.w	r2, [r3], #1
 800ee2a:	2a00      	cmp	r2, #0
 800ee2c:	d1f9      	bne.n	800ee22 <strcpy+0x2>
 800ee2e:	4770      	bx	lr

0800ee30 <strncat>:
 800ee30:	b530      	push	{r4, r5, lr}
 800ee32:	4604      	mov	r4, r0
 800ee34:	7825      	ldrb	r5, [r4, #0]
 800ee36:	4623      	mov	r3, r4
 800ee38:	3401      	adds	r4, #1
 800ee3a:	2d00      	cmp	r5, #0
 800ee3c:	d1fa      	bne.n	800ee34 <strncat+0x4>
 800ee3e:	3a01      	subs	r2, #1
 800ee40:	d304      	bcc.n	800ee4c <strncat+0x1c>
 800ee42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee46:	f803 4b01 	strb.w	r4, [r3], #1
 800ee4a:	b904      	cbnz	r4, 800ee4e <strncat+0x1e>
 800ee4c:	bd30      	pop	{r4, r5, pc}
 800ee4e:	2a00      	cmp	r2, #0
 800ee50:	d1f5      	bne.n	800ee3e <strncat+0xe>
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e7f3      	b.n	800ee3e <strncat+0xe>
	...

0800ee58 <strtok>:
 800ee58:	4b16      	ldr	r3, [pc, #88]	; (800eeb4 <strtok+0x5c>)
 800ee5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee5c:	681e      	ldr	r6, [r3, #0]
 800ee5e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ee60:	4605      	mov	r5, r0
 800ee62:	b9fc      	cbnz	r4, 800eea4 <strtok+0x4c>
 800ee64:	2050      	movs	r0, #80	; 0x50
 800ee66:	9101      	str	r1, [sp, #4]
 800ee68:	f000 f950 	bl	800f10c <malloc>
 800ee6c:	9901      	ldr	r1, [sp, #4]
 800ee6e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ee70:	4602      	mov	r2, r0
 800ee72:	b920      	cbnz	r0, 800ee7e <strtok+0x26>
 800ee74:	4b10      	ldr	r3, [pc, #64]	; (800eeb8 <strtok+0x60>)
 800ee76:	4811      	ldr	r0, [pc, #68]	; (800eebc <strtok+0x64>)
 800ee78:	2157      	movs	r1, #87	; 0x57
 800ee7a:	f000 f917 	bl	800f0ac <__assert_func>
 800ee7e:	e9c0 4400 	strd	r4, r4, [r0]
 800ee82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ee86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ee8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ee8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ee92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ee96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ee9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ee9e:	6184      	str	r4, [r0, #24]
 800eea0:	7704      	strb	r4, [r0, #28]
 800eea2:	6244      	str	r4, [r0, #36]	; 0x24
 800eea4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800eea6:	2301      	movs	r3, #1
 800eea8:	4628      	mov	r0, r5
 800eeaa:	b002      	add	sp, #8
 800eeac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeb0:	f000 b806 	b.w	800eec0 <__strtok_r>
 800eeb4:	2000013c 	.word	0x2000013c
 800eeb8:	08010cec 	.word	0x08010cec
 800eebc:	08010d03 	.word	0x08010d03

0800eec0 <__strtok_r>:
 800eec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eec2:	b908      	cbnz	r0, 800eec8 <__strtok_r+0x8>
 800eec4:	6810      	ldr	r0, [r2, #0]
 800eec6:	b188      	cbz	r0, 800eeec <__strtok_r+0x2c>
 800eec8:	4604      	mov	r4, r0
 800eeca:	4620      	mov	r0, r4
 800eecc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eed0:	460f      	mov	r7, r1
 800eed2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eed6:	b91e      	cbnz	r6, 800eee0 <__strtok_r+0x20>
 800eed8:	b965      	cbnz	r5, 800eef4 <__strtok_r+0x34>
 800eeda:	6015      	str	r5, [r2, #0]
 800eedc:	4628      	mov	r0, r5
 800eede:	e005      	b.n	800eeec <__strtok_r+0x2c>
 800eee0:	42b5      	cmp	r5, r6
 800eee2:	d1f6      	bne.n	800eed2 <__strtok_r+0x12>
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1f0      	bne.n	800eeca <__strtok_r+0xa>
 800eee8:	6014      	str	r4, [r2, #0]
 800eeea:	7003      	strb	r3, [r0, #0]
 800eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeee:	461c      	mov	r4, r3
 800eef0:	e00c      	b.n	800ef0c <__strtok_r+0x4c>
 800eef2:	b915      	cbnz	r5, 800eefa <__strtok_r+0x3a>
 800eef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eef8:	460e      	mov	r6, r1
 800eefa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eefe:	42ab      	cmp	r3, r5
 800ef00:	d1f7      	bne.n	800eef2 <__strtok_r+0x32>
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d0f3      	beq.n	800eeee <__strtok_r+0x2e>
 800ef06:	2300      	movs	r3, #0
 800ef08:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ef0c:	6014      	str	r4, [r2, #0]
 800ef0e:	e7ed      	b.n	800eeec <__strtok_r+0x2c>

0800ef10 <_strtol_l.constprop.0>:
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef16:	d001      	beq.n	800ef1c <_strtol_l.constprop.0+0xc>
 800ef18:	2b24      	cmp	r3, #36	; 0x24
 800ef1a:	d906      	bls.n	800ef2a <_strtol_l.constprop.0+0x1a>
 800ef1c:	f7ff ff14 	bl	800ed48 <__errno>
 800ef20:	2316      	movs	r3, #22
 800ef22:	6003      	str	r3, [r0, #0]
 800ef24:	2000      	movs	r0, #0
 800ef26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f010 <_strtol_l.constprop.0+0x100>
 800ef2e:	460d      	mov	r5, r1
 800ef30:	462e      	mov	r6, r5
 800ef32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ef3a:	f017 0708 	ands.w	r7, r7, #8
 800ef3e:	d1f7      	bne.n	800ef30 <_strtol_l.constprop.0+0x20>
 800ef40:	2c2d      	cmp	r4, #45	; 0x2d
 800ef42:	d132      	bne.n	800efaa <_strtol_l.constprop.0+0x9a>
 800ef44:	782c      	ldrb	r4, [r5, #0]
 800ef46:	2701      	movs	r7, #1
 800ef48:	1cb5      	adds	r5, r6, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d05b      	beq.n	800f006 <_strtol_l.constprop.0+0xf6>
 800ef4e:	2b10      	cmp	r3, #16
 800ef50:	d109      	bne.n	800ef66 <_strtol_l.constprop.0+0x56>
 800ef52:	2c30      	cmp	r4, #48	; 0x30
 800ef54:	d107      	bne.n	800ef66 <_strtol_l.constprop.0+0x56>
 800ef56:	782c      	ldrb	r4, [r5, #0]
 800ef58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ef5c:	2c58      	cmp	r4, #88	; 0x58
 800ef5e:	d14d      	bne.n	800effc <_strtol_l.constprop.0+0xec>
 800ef60:	786c      	ldrb	r4, [r5, #1]
 800ef62:	2310      	movs	r3, #16
 800ef64:	3502      	adds	r5, #2
 800ef66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ef6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef6e:	f04f 0c00 	mov.w	ip, #0
 800ef72:	fbb8 f9f3 	udiv	r9, r8, r3
 800ef76:	4666      	mov	r6, ip
 800ef78:	fb03 8a19 	mls	sl, r3, r9, r8
 800ef7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ef80:	f1be 0f09 	cmp.w	lr, #9
 800ef84:	d816      	bhi.n	800efb4 <_strtol_l.constprop.0+0xa4>
 800ef86:	4674      	mov	r4, lr
 800ef88:	42a3      	cmp	r3, r4
 800ef8a:	dd24      	ble.n	800efd6 <_strtol_l.constprop.0+0xc6>
 800ef8c:	f1bc 0f00 	cmp.w	ip, #0
 800ef90:	db1e      	blt.n	800efd0 <_strtol_l.constprop.0+0xc0>
 800ef92:	45b1      	cmp	r9, r6
 800ef94:	d31c      	bcc.n	800efd0 <_strtol_l.constprop.0+0xc0>
 800ef96:	d101      	bne.n	800ef9c <_strtol_l.constprop.0+0x8c>
 800ef98:	45a2      	cmp	sl, r4
 800ef9a:	db19      	blt.n	800efd0 <_strtol_l.constprop.0+0xc0>
 800ef9c:	fb06 4603 	mla	r6, r6, r3, r4
 800efa0:	f04f 0c01 	mov.w	ip, #1
 800efa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efa8:	e7e8      	b.n	800ef7c <_strtol_l.constprop.0+0x6c>
 800efaa:	2c2b      	cmp	r4, #43	; 0x2b
 800efac:	bf04      	itt	eq
 800efae:	782c      	ldrbeq	r4, [r5, #0]
 800efb0:	1cb5      	addeq	r5, r6, #2
 800efb2:	e7ca      	b.n	800ef4a <_strtol_l.constprop.0+0x3a>
 800efb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800efb8:	f1be 0f19 	cmp.w	lr, #25
 800efbc:	d801      	bhi.n	800efc2 <_strtol_l.constprop.0+0xb2>
 800efbe:	3c37      	subs	r4, #55	; 0x37
 800efc0:	e7e2      	b.n	800ef88 <_strtol_l.constprop.0+0x78>
 800efc2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800efc6:	f1be 0f19 	cmp.w	lr, #25
 800efca:	d804      	bhi.n	800efd6 <_strtol_l.constprop.0+0xc6>
 800efcc:	3c57      	subs	r4, #87	; 0x57
 800efce:	e7db      	b.n	800ef88 <_strtol_l.constprop.0+0x78>
 800efd0:	f04f 3cff 	mov.w	ip, #4294967295
 800efd4:	e7e6      	b.n	800efa4 <_strtol_l.constprop.0+0x94>
 800efd6:	f1bc 0f00 	cmp.w	ip, #0
 800efda:	da05      	bge.n	800efe8 <_strtol_l.constprop.0+0xd8>
 800efdc:	2322      	movs	r3, #34	; 0x22
 800efde:	6003      	str	r3, [r0, #0]
 800efe0:	4646      	mov	r6, r8
 800efe2:	b942      	cbnz	r2, 800eff6 <_strtol_l.constprop.0+0xe6>
 800efe4:	4630      	mov	r0, r6
 800efe6:	e79e      	b.n	800ef26 <_strtol_l.constprop.0+0x16>
 800efe8:	b107      	cbz	r7, 800efec <_strtol_l.constprop.0+0xdc>
 800efea:	4276      	negs	r6, r6
 800efec:	2a00      	cmp	r2, #0
 800efee:	d0f9      	beq.n	800efe4 <_strtol_l.constprop.0+0xd4>
 800eff0:	f1bc 0f00 	cmp.w	ip, #0
 800eff4:	d000      	beq.n	800eff8 <_strtol_l.constprop.0+0xe8>
 800eff6:	1e69      	subs	r1, r5, #1
 800eff8:	6011      	str	r1, [r2, #0]
 800effa:	e7f3      	b.n	800efe4 <_strtol_l.constprop.0+0xd4>
 800effc:	2430      	movs	r4, #48	; 0x30
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1b1      	bne.n	800ef66 <_strtol_l.constprop.0+0x56>
 800f002:	2308      	movs	r3, #8
 800f004:	e7af      	b.n	800ef66 <_strtol_l.constprop.0+0x56>
 800f006:	2c30      	cmp	r4, #48	; 0x30
 800f008:	d0a5      	beq.n	800ef56 <_strtol_l.constprop.0+0x46>
 800f00a:	230a      	movs	r3, #10
 800f00c:	e7ab      	b.n	800ef66 <_strtol_l.constprop.0+0x56>
 800f00e:	bf00      	nop
 800f010:	08010dc2 	.word	0x08010dc2

0800f014 <strtol>:
 800f014:	4613      	mov	r3, r2
 800f016:	460a      	mov	r2, r1
 800f018:	4601      	mov	r1, r0
 800f01a:	4802      	ldr	r0, [pc, #8]	; (800f024 <strtol+0x10>)
 800f01c:	6800      	ldr	r0, [r0, #0]
 800f01e:	f7ff bf77 	b.w	800ef10 <_strtol_l.constprop.0>
 800f022:	bf00      	nop
 800f024:	2000013c 	.word	0x2000013c

0800f028 <__utoa>:
 800f028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f02a:	4c1f      	ldr	r4, [pc, #124]	; (800f0a8 <__utoa+0x80>)
 800f02c:	b08b      	sub	sp, #44	; 0x2c
 800f02e:	4605      	mov	r5, r0
 800f030:	460b      	mov	r3, r1
 800f032:	466e      	mov	r6, sp
 800f034:	f104 0c20 	add.w	ip, r4, #32
 800f038:	6820      	ldr	r0, [r4, #0]
 800f03a:	6861      	ldr	r1, [r4, #4]
 800f03c:	4637      	mov	r7, r6
 800f03e:	c703      	stmia	r7!, {r0, r1}
 800f040:	3408      	adds	r4, #8
 800f042:	4564      	cmp	r4, ip
 800f044:	463e      	mov	r6, r7
 800f046:	d1f7      	bne.n	800f038 <__utoa+0x10>
 800f048:	7921      	ldrb	r1, [r4, #4]
 800f04a:	7139      	strb	r1, [r7, #4]
 800f04c:	1e91      	subs	r1, r2, #2
 800f04e:	6820      	ldr	r0, [r4, #0]
 800f050:	6038      	str	r0, [r7, #0]
 800f052:	2922      	cmp	r1, #34	; 0x22
 800f054:	f04f 0100 	mov.w	r1, #0
 800f058:	d904      	bls.n	800f064 <__utoa+0x3c>
 800f05a:	7019      	strb	r1, [r3, #0]
 800f05c:	460b      	mov	r3, r1
 800f05e:	4618      	mov	r0, r3
 800f060:	b00b      	add	sp, #44	; 0x2c
 800f062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f064:	1e58      	subs	r0, r3, #1
 800f066:	4684      	mov	ip, r0
 800f068:	fbb5 f7f2 	udiv	r7, r5, r2
 800f06c:	fb02 5617 	mls	r6, r2, r7, r5
 800f070:	3628      	adds	r6, #40	; 0x28
 800f072:	446e      	add	r6, sp
 800f074:	460c      	mov	r4, r1
 800f076:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f07a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f07e:	462e      	mov	r6, r5
 800f080:	42b2      	cmp	r2, r6
 800f082:	f101 0101 	add.w	r1, r1, #1
 800f086:	463d      	mov	r5, r7
 800f088:	d9ee      	bls.n	800f068 <__utoa+0x40>
 800f08a:	2200      	movs	r2, #0
 800f08c:	545a      	strb	r2, [r3, r1]
 800f08e:	1919      	adds	r1, r3, r4
 800f090:	1aa5      	subs	r5, r4, r2
 800f092:	42aa      	cmp	r2, r5
 800f094:	dae3      	bge.n	800f05e <__utoa+0x36>
 800f096:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f09a:	780e      	ldrb	r6, [r1, #0]
 800f09c:	7006      	strb	r6, [r0, #0]
 800f09e:	3201      	adds	r2, #1
 800f0a0:	f801 5901 	strb.w	r5, [r1], #-1
 800f0a4:	e7f4      	b.n	800f090 <__utoa+0x68>
 800f0a6:	bf00      	nop
 800f0a8:	08010d60 	.word	0x08010d60

0800f0ac <__assert_func>:
 800f0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0ae:	4614      	mov	r4, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4b09      	ldr	r3, [pc, #36]	; (800f0d8 <__assert_func+0x2c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	68d8      	ldr	r0, [r3, #12]
 800f0ba:	b14c      	cbz	r4, 800f0d0 <__assert_func+0x24>
 800f0bc:	4b07      	ldr	r3, [pc, #28]	; (800f0dc <__assert_func+0x30>)
 800f0be:	9100      	str	r1, [sp, #0]
 800f0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0c4:	4906      	ldr	r1, [pc, #24]	; (800f0e0 <__assert_func+0x34>)
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f000 f80e 	bl	800f0e8 <fiprintf>
 800f0cc:	f000 fe20 	bl	800fd10 <abort>
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <__assert_func+0x38>)
 800f0d2:	461c      	mov	r4, r3
 800f0d4:	e7f3      	b.n	800f0be <__assert_func+0x12>
 800f0d6:	bf00      	nop
 800f0d8:	2000013c 	.word	0x2000013c
 800f0dc:	08010d85 	.word	0x08010d85
 800f0e0:	08010d92 	.word	0x08010d92
 800f0e4:	08010dc0 	.word	0x08010dc0

0800f0e8 <fiprintf>:
 800f0e8:	b40e      	push	{r1, r2, r3}
 800f0ea:	b503      	push	{r0, r1, lr}
 800f0ec:	4601      	mov	r1, r0
 800f0ee:	ab03      	add	r3, sp, #12
 800f0f0:	4805      	ldr	r0, [pc, #20]	; (800f108 <fiprintf+0x20>)
 800f0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f6:	6800      	ldr	r0, [r0, #0]
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	f000 fa75 	bl	800f5e8 <_vfiprintf_r>
 800f0fe:	b002      	add	sp, #8
 800f100:	f85d eb04 	ldr.w	lr, [sp], #4
 800f104:	b003      	add	sp, #12
 800f106:	4770      	bx	lr
 800f108:	2000013c 	.word	0x2000013c

0800f10c <malloc>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	; (800f118 <malloc+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f000 b86f 	b.w	800f1f4 <_malloc_r>
 800f116:	bf00      	nop
 800f118:	2000013c 	.word	0x2000013c

0800f11c <_free_r>:
 800f11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f11e:	2900      	cmp	r1, #0
 800f120:	d044      	beq.n	800f1ac <_free_r+0x90>
 800f122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f126:	9001      	str	r0, [sp, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f1a1 0404 	sub.w	r4, r1, #4
 800f12e:	bfb8      	it	lt
 800f130:	18e4      	addlt	r4, r4, r3
 800f132:	f001 f83d 	bl	80101b0 <__malloc_lock>
 800f136:	4a1e      	ldr	r2, [pc, #120]	; (800f1b0 <_free_r+0x94>)
 800f138:	9801      	ldr	r0, [sp, #4]
 800f13a:	6813      	ldr	r3, [r2, #0]
 800f13c:	b933      	cbnz	r3, 800f14c <_free_r+0x30>
 800f13e:	6063      	str	r3, [r4, #4]
 800f140:	6014      	str	r4, [r2, #0]
 800f142:	b003      	add	sp, #12
 800f144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f148:	f001 b838 	b.w	80101bc <__malloc_unlock>
 800f14c:	42a3      	cmp	r3, r4
 800f14e:	d908      	bls.n	800f162 <_free_r+0x46>
 800f150:	6825      	ldr	r5, [r4, #0]
 800f152:	1961      	adds	r1, r4, r5
 800f154:	428b      	cmp	r3, r1
 800f156:	bf01      	itttt	eq
 800f158:	6819      	ldreq	r1, [r3, #0]
 800f15a:	685b      	ldreq	r3, [r3, #4]
 800f15c:	1949      	addeq	r1, r1, r5
 800f15e:	6021      	streq	r1, [r4, #0]
 800f160:	e7ed      	b.n	800f13e <_free_r+0x22>
 800f162:	461a      	mov	r2, r3
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	b10b      	cbz	r3, 800f16c <_free_r+0x50>
 800f168:	42a3      	cmp	r3, r4
 800f16a:	d9fa      	bls.n	800f162 <_free_r+0x46>
 800f16c:	6811      	ldr	r1, [r2, #0]
 800f16e:	1855      	adds	r5, r2, r1
 800f170:	42a5      	cmp	r5, r4
 800f172:	d10b      	bne.n	800f18c <_free_r+0x70>
 800f174:	6824      	ldr	r4, [r4, #0]
 800f176:	4421      	add	r1, r4
 800f178:	1854      	adds	r4, r2, r1
 800f17a:	42a3      	cmp	r3, r4
 800f17c:	6011      	str	r1, [r2, #0]
 800f17e:	d1e0      	bne.n	800f142 <_free_r+0x26>
 800f180:	681c      	ldr	r4, [r3, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	6053      	str	r3, [r2, #4]
 800f186:	4421      	add	r1, r4
 800f188:	6011      	str	r1, [r2, #0]
 800f18a:	e7da      	b.n	800f142 <_free_r+0x26>
 800f18c:	d902      	bls.n	800f194 <_free_r+0x78>
 800f18e:	230c      	movs	r3, #12
 800f190:	6003      	str	r3, [r0, #0]
 800f192:	e7d6      	b.n	800f142 <_free_r+0x26>
 800f194:	6825      	ldr	r5, [r4, #0]
 800f196:	1961      	adds	r1, r4, r5
 800f198:	428b      	cmp	r3, r1
 800f19a:	bf04      	itt	eq
 800f19c:	6819      	ldreq	r1, [r3, #0]
 800f19e:	685b      	ldreq	r3, [r3, #4]
 800f1a0:	6063      	str	r3, [r4, #4]
 800f1a2:	bf04      	itt	eq
 800f1a4:	1949      	addeq	r1, r1, r5
 800f1a6:	6021      	streq	r1, [r4, #0]
 800f1a8:	6054      	str	r4, [r2, #4]
 800f1aa:	e7ca      	b.n	800f142 <_free_r+0x26>
 800f1ac:	b003      	add	sp, #12
 800f1ae:	bd30      	pop	{r4, r5, pc}
 800f1b0:	20003e80 	.word	0x20003e80

0800f1b4 <sbrk_aligned>:
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	4e0e      	ldr	r6, [pc, #56]	; (800f1f0 <sbrk_aligned+0x3c>)
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	6831      	ldr	r1, [r6, #0]
 800f1bc:	4605      	mov	r5, r0
 800f1be:	b911      	cbnz	r1, 800f1c6 <sbrk_aligned+0x12>
 800f1c0:	f000 fcd6 	bl	800fb70 <_sbrk_r>
 800f1c4:	6030      	str	r0, [r6, #0]
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f000 fcd1 	bl	800fb70 <_sbrk_r>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	d00a      	beq.n	800f1e8 <sbrk_aligned+0x34>
 800f1d2:	1cc4      	adds	r4, r0, #3
 800f1d4:	f024 0403 	bic.w	r4, r4, #3
 800f1d8:	42a0      	cmp	r0, r4
 800f1da:	d007      	beq.n	800f1ec <sbrk_aligned+0x38>
 800f1dc:	1a21      	subs	r1, r4, r0
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f000 fcc6 	bl	800fb70 <_sbrk_r>
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d101      	bne.n	800f1ec <sbrk_aligned+0x38>
 800f1e8:	f04f 34ff 	mov.w	r4, #4294967295
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	bd70      	pop	{r4, r5, r6, pc}
 800f1f0:	20003e84 	.word	0x20003e84

0800f1f4 <_malloc_r>:
 800f1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f8:	1ccd      	adds	r5, r1, #3
 800f1fa:	f025 0503 	bic.w	r5, r5, #3
 800f1fe:	3508      	adds	r5, #8
 800f200:	2d0c      	cmp	r5, #12
 800f202:	bf38      	it	cc
 800f204:	250c      	movcc	r5, #12
 800f206:	2d00      	cmp	r5, #0
 800f208:	4607      	mov	r7, r0
 800f20a:	db01      	blt.n	800f210 <_malloc_r+0x1c>
 800f20c:	42a9      	cmp	r1, r5
 800f20e:	d905      	bls.n	800f21c <_malloc_r+0x28>
 800f210:	230c      	movs	r3, #12
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	2600      	movs	r6, #0
 800f216:	4630      	mov	r0, r6
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	4e2e      	ldr	r6, [pc, #184]	; (800f2d8 <_malloc_r+0xe4>)
 800f21e:	f000 ffc7 	bl	80101b0 <__malloc_lock>
 800f222:	6833      	ldr	r3, [r6, #0]
 800f224:	461c      	mov	r4, r3
 800f226:	bb34      	cbnz	r4, 800f276 <_malloc_r+0x82>
 800f228:	4629      	mov	r1, r5
 800f22a:	4638      	mov	r0, r7
 800f22c:	f7ff ffc2 	bl	800f1b4 <sbrk_aligned>
 800f230:	1c43      	adds	r3, r0, #1
 800f232:	4604      	mov	r4, r0
 800f234:	d14d      	bne.n	800f2d2 <_malloc_r+0xde>
 800f236:	6834      	ldr	r4, [r6, #0]
 800f238:	4626      	mov	r6, r4
 800f23a:	2e00      	cmp	r6, #0
 800f23c:	d140      	bne.n	800f2c0 <_malloc_r+0xcc>
 800f23e:	6823      	ldr	r3, [r4, #0]
 800f240:	4631      	mov	r1, r6
 800f242:	4638      	mov	r0, r7
 800f244:	eb04 0803 	add.w	r8, r4, r3
 800f248:	f000 fc92 	bl	800fb70 <_sbrk_r>
 800f24c:	4580      	cmp	r8, r0
 800f24e:	d13a      	bne.n	800f2c6 <_malloc_r+0xd2>
 800f250:	6821      	ldr	r1, [r4, #0]
 800f252:	3503      	adds	r5, #3
 800f254:	1a6d      	subs	r5, r5, r1
 800f256:	f025 0503 	bic.w	r5, r5, #3
 800f25a:	3508      	adds	r5, #8
 800f25c:	2d0c      	cmp	r5, #12
 800f25e:	bf38      	it	cc
 800f260:	250c      	movcc	r5, #12
 800f262:	4629      	mov	r1, r5
 800f264:	4638      	mov	r0, r7
 800f266:	f7ff ffa5 	bl	800f1b4 <sbrk_aligned>
 800f26a:	3001      	adds	r0, #1
 800f26c:	d02b      	beq.n	800f2c6 <_malloc_r+0xd2>
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	442b      	add	r3, r5
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	e00e      	b.n	800f294 <_malloc_r+0xa0>
 800f276:	6822      	ldr	r2, [r4, #0]
 800f278:	1b52      	subs	r2, r2, r5
 800f27a:	d41e      	bmi.n	800f2ba <_malloc_r+0xc6>
 800f27c:	2a0b      	cmp	r2, #11
 800f27e:	d916      	bls.n	800f2ae <_malloc_r+0xba>
 800f280:	1961      	adds	r1, r4, r5
 800f282:	42a3      	cmp	r3, r4
 800f284:	6025      	str	r5, [r4, #0]
 800f286:	bf18      	it	ne
 800f288:	6059      	strne	r1, [r3, #4]
 800f28a:	6863      	ldr	r3, [r4, #4]
 800f28c:	bf08      	it	eq
 800f28e:	6031      	streq	r1, [r6, #0]
 800f290:	5162      	str	r2, [r4, r5]
 800f292:	604b      	str	r3, [r1, #4]
 800f294:	4638      	mov	r0, r7
 800f296:	f104 060b 	add.w	r6, r4, #11
 800f29a:	f000 ff8f 	bl	80101bc <__malloc_unlock>
 800f29e:	f026 0607 	bic.w	r6, r6, #7
 800f2a2:	1d23      	adds	r3, r4, #4
 800f2a4:	1af2      	subs	r2, r6, r3
 800f2a6:	d0b6      	beq.n	800f216 <_malloc_r+0x22>
 800f2a8:	1b9b      	subs	r3, r3, r6
 800f2aa:	50a3      	str	r3, [r4, r2]
 800f2ac:	e7b3      	b.n	800f216 <_malloc_r+0x22>
 800f2ae:	6862      	ldr	r2, [r4, #4]
 800f2b0:	42a3      	cmp	r3, r4
 800f2b2:	bf0c      	ite	eq
 800f2b4:	6032      	streq	r2, [r6, #0]
 800f2b6:	605a      	strne	r2, [r3, #4]
 800f2b8:	e7ec      	b.n	800f294 <_malloc_r+0xa0>
 800f2ba:	4623      	mov	r3, r4
 800f2bc:	6864      	ldr	r4, [r4, #4]
 800f2be:	e7b2      	b.n	800f226 <_malloc_r+0x32>
 800f2c0:	4634      	mov	r4, r6
 800f2c2:	6876      	ldr	r6, [r6, #4]
 800f2c4:	e7b9      	b.n	800f23a <_malloc_r+0x46>
 800f2c6:	230c      	movs	r3, #12
 800f2c8:	603b      	str	r3, [r7, #0]
 800f2ca:	4638      	mov	r0, r7
 800f2cc:	f000 ff76 	bl	80101bc <__malloc_unlock>
 800f2d0:	e7a1      	b.n	800f216 <_malloc_r+0x22>
 800f2d2:	6025      	str	r5, [r4, #0]
 800f2d4:	e7de      	b.n	800f294 <_malloc_r+0xa0>
 800f2d6:	bf00      	nop
 800f2d8:	20003e80 	.word	0x20003e80

0800f2dc <__ssputs_r>:
 800f2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e0:	688e      	ldr	r6, [r1, #8]
 800f2e2:	429e      	cmp	r6, r3
 800f2e4:	4682      	mov	sl, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	4690      	mov	r8, r2
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	d838      	bhi.n	800f360 <__ssputs_r+0x84>
 800f2ee:	898a      	ldrh	r2, [r1, #12]
 800f2f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2f4:	d032      	beq.n	800f35c <__ssputs_r+0x80>
 800f2f6:	6825      	ldr	r5, [r4, #0]
 800f2f8:	6909      	ldr	r1, [r1, #16]
 800f2fa:	eba5 0901 	sub.w	r9, r5, r1
 800f2fe:	6965      	ldr	r5, [r4, #20]
 800f300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f308:	3301      	adds	r3, #1
 800f30a:	444b      	add	r3, r9
 800f30c:	106d      	asrs	r5, r5, #1
 800f30e:	429d      	cmp	r5, r3
 800f310:	bf38      	it	cc
 800f312:	461d      	movcc	r5, r3
 800f314:	0553      	lsls	r3, r2, #21
 800f316:	d531      	bpl.n	800f37c <__ssputs_r+0xa0>
 800f318:	4629      	mov	r1, r5
 800f31a:	f7ff ff6b 	bl	800f1f4 <_malloc_r>
 800f31e:	4606      	mov	r6, r0
 800f320:	b950      	cbnz	r0, 800f338 <__ssputs_r+0x5c>
 800f322:	230c      	movs	r3, #12
 800f324:	f8ca 3000 	str.w	r3, [sl]
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f32e:	81a3      	strh	r3, [r4, #12]
 800f330:	f04f 30ff 	mov.w	r0, #4294967295
 800f334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f338:	6921      	ldr	r1, [r4, #16]
 800f33a:	464a      	mov	r2, r9
 800f33c:	f000 ff10 	bl	8010160 <memcpy>
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f34a:	81a3      	strh	r3, [r4, #12]
 800f34c:	6126      	str	r6, [r4, #16]
 800f34e:	6165      	str	r5, [r4, #20]
 800f350:	444e      	add	r6, r9
 800f352:	eba5 0509 	sub.w	r5, r5, r9
 800f356:	6026      	str	r6, [r4, #0]
 800f358:	60a5      	str	r5, [r4, #8]
 800f35a:	463e      	mov	r6, r7
 800f35c:	42be      	cmp	r6, r7
 800f35e:	d900      	bls.n	800f362 <__ssputs_r+0x86>
 800f360:	463e      	mov	r6, r7
 800f362:	6820      	ldr	r0, [r4, #0]
 800f364:	4632      	mov	r2, r6
 800f366:	4641      	mov	r1, r8
 800f368:	f000 ff08 	bl	801017c <memmove>
 800f36c:	68a3      	ldr	r3, [r4, #8]
 800f36e:	1b9b      	subs	r3, r3, r6
 800f370:	60a3      	str	r3, [r4, #8]
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	4433      	add	r3, r6
 800f376:	6023      	str	r3, [r4, #0]
 800f378:	2000      	movs	r0, #0
 800f37a:	e7db      	b.n	800f334 <__ssputs_r+0x58>
 800f37c:	462a      	mov	r2, r5
 800f37e:	f000 ff23 	bl	80101c8 <_realloc_r>
 800f382:	4606      	mov	r6, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	d1e1      	bne.n	800f34c <__ssputs_r+0x70>
 800f388:	6921      	ldr	r1, [r4, #16]
 800f38a:	4650      	mov	r0, sl
 800f38c:	f7ff fec6 	bl	800f11c <_free_r>
 800f390:	e7c7      	b.n	800f322 <__ssputs_r+0x46>
	...

0800f394 <_svfiprintf_r>:
 800f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f398:	4698      	mov	r8, r3
 800f39a:	898b      	ldrh	r3, [r1, #12]
 800f39c:	061b      	lsls	r3, r3, #24
 800f39e:	b09d      	sub	sp, #116	; 0x74
 800f3a0:	4607      	mov	r7, r0
 800f3a2:	460d      	mov	r5, r1
 800f3a4:	4614      	mov	r4, r2
 800f3a6:	d50e      	bpl.n	800f3c6 <_svfiprintf_r+0x32>
 800f3a8:	690b      	ldr	r3, [r1, #16]
 800f3aa:	b963      	cbnz	r3, 800f3c6 <_svfiprintf_r+0x32>
 800f3ac:	2140      	movs	r1, #64	; 0x40
 800f3ae:	f7ff ff21 	bl	800f1f4 <_malloc_r>
 800f3b2:	6028      	str	r0, [r5, #0]
 800f3b4:	6128      	str	r0, [r5, #16]
 800f3b6:	b920      	cbnz	r0, 800f3c2 <_svfiprintf_r+0x2e>
 800f3b8:	230c      	movs	r3, #12
 800f3ba:	603b      	str	r3, [r7, #0]
 800f3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c0:	e0d1      	b.n	800f566 <_svfiprintf_r+0x1d2>
 800f3c2:	2340      	movs	r3, #64	; 0x40
 800f3c4:	616b      	str	r3, [r5, #20]
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ca:	2320      	movs	r3, #32
 800f3cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3d4:	2330      	movs	r3, #48	; 0x30
 800f3d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f580 <_svfiprintf_r+0x1ec>
 800f3da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3de:	f04f 0901 	mov.w	r9, #1
 800f3e2:	4623      	mov	r3, r4
 800f3e4:	469a      	mov	sl, r3
 800f3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3ea:	b10a      	cbz	r2, 800f3f0 <_svfiprintf_r+0x5c>
 800f3ec:	2a25      	cmp	r2, #37	; 0x25
 800f3ee:	d1f9      	bne.n	800f3e4 <_svfiprintf_r+0x50>
 800f3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f3f4:	d00b      	beq.n	800f40e <_svfiprintf_r+0x7a>
 800f3f6:	465b      	mov	r3, fp
 800f3f8:	4622      	mov	r2, r4
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4638      	mov	r0, r7
 800f3fe:	f7ff ff6d 	bl	800f2dc <__ssputs_r>
 800f402:	3001      	adds	r0, #1
 800f404:	f000 80aa 	beq.w	800f55c <_svfiprintf_r+0x1c8>
 800f408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f40a:	445a      	add	r2, fp
 800f40c:	9209      	str	r2, [sp, #36]	; 0x24
 800f40e:	f89a 3000 	ldrb.w	r3, [sl]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80a2 	beq.w	800f55c <_svfiprintf_r+0x1c8>
 800f418:	2300      	movs	r3, #0
 800f41a:	f04f 32ff 	mov.w	r2, #4294967295
 800f41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f422:	f10a 0a01 	add.w	sl, sl, #1
 800f426:	9304      	str	r3, [sp, #16]
 800f428:	9307      	str	r3, [sp, #28]
 800f42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f42e:	931a      	str	r3, [sp, #104]	; 0x68
 800f430:	4654      	mov	r4, sl
 800f432:	2205      	movs	r2, #5
 800f434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f438:	4851      	ldr	r0, [pc, #324]	; (800f580 <_svfiprintf_r+0x1ec>)
 800f43a:	f7f0 fee9 	bl	8000210 <memchr>
 800f43e:	9a04      	ldr	r2, [sp, #16]
 800f440:	b9d8      	cbnz	r0, 800f47a <_svfiprintf_r+0xe6>
 800f442:	06d0      	lsls	r0, r2, #27
 800f444:	bf44      	itt	mi
 800f446:	2320      	movmi	r3, #32
 800f448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44c:	0711      	lsls	r1, r2, #28
 800f44e:	bf44      	itt	mi
 800f450:	232b      	movmi	r3, #43	; 0x2b
 800f452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f456:	f89a 3000 	ldrb.w	r3, [sl]
 800f45a:	2b2a      	cmp	r3, #42	; 0x2a
 800f45c:	d015      	beq.n	800f48a <_svfiprintf_r+0xf6>
 800f45e:	9a07      	ldr	r2, [sp, #28]
 800f460:	4654      	mov	r4, sl
 800f462:	2000      	movs	r0, #0
 800f464:	f04f 0c0a 	mov.w	ip, #10
 800f468:	4621      	mov	r1, r4
 800f46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f46e:	3b30      	subs	r3, #48	; 0x30
 800f470:	2b09      	cmp	r3, #9
 800f472:	d94e      	bls.n	800f512 <_svfiprintf_r+0x17e>
 800f474:	b1b0      	cbz	r0, 800f4a4 <_svfiprintf_r+0x110>
 800f476:	9207      	str	r2, [sp, #28]
 800f478:	e014      	b.n	800f4a4 <_svfiprintf_r+0x110>
 800f47a:	eba0 0308 	sub.w	r3, r0, r8
 800f47e:	fa09 f303 	lsl.w	r3, r9, r3
 800f482:	4313      	orrs	r3, r2
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	46a2      	mov	sl, r4
 800f488:	e7d2      	b.n	800f430 <_svfiprintf_r+0x9c>
 800f48a:	9b03      	ldr	r3, [sp, #12]
 800f48c:	1d19      	adds	r1, r3, #4
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	9103      	str	r1, [sp, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	bfbb      	ittet	lt
 800f496:	425b      	neglt	r3, r3
 800f498:	f042 0202 	orrlt.w	r2, r2, #2
 800f49c:	9307      	strge	r3, [sp, #28]
 800f49e:	9307      	strlt	r3, [sp, #28]
 800f4a0:	bfb8      	it	lt
 800f4a2:	9204      	strlt	r2, [sp, #16]
 800f4a4:	7823      	ldrb	r3, [r4, #0]
 800f4a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f4a8:	d10c      	bne.n	800f4c4 <_svfiprintf_r+0x130>
 800f4aa:	7863      	ldrb	r3, [r4, #1]
 800f4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ae:	d135      	bne.n	800f51c <_svfiprintf_r+0x188>
 800f4b0:	9b03      	ldr	r3, [sp, #12]
 800f4b2:	1d1a      	adds	r2, r3, #4
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	9203      	str	r2, [sp, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	bfb8      	it	lt
 800f4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4c0:	3402      	adds	r4, #2
 800f4c2:	9305      	str	r3, [sp, #20]
 800f4c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f590 <_svfiprintf_r+0x1fc>
 800f4c8:	7821      	ldrb	r1, [r4, #0]
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	4650      	mov	r0, sl
 800f4ce:	f7f0 fe9f 	bl	8000210 <memchr>
 800f4d2:	b140      	cbz	r0, 800f4e6 <_svfiprintf_r+0x152>
 800f4d4:	2340      	movs	r3, #64	; 0x40
 800f4d6:	eba0 000a 	sub.w	r0, r0, sl
 800f4da:	fa03 f000 	lsl.w	r0, r3, r0
 800f4de:	9b04      	ldr	r3, [sp, #16]
 800f4e0:	4303      	orrs	r3, r0
 800f4e2:	3401      	adds	r4, #1
 800f4e4:	9304      	str	r3, [sp, #16]
 800f4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ea:	4826      	ldr	r0, [pc, #152]	; (800f584 <_svfiprintf_r+0x1f0>)
 800f4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4f0:	2206      	movs	r2, #6
 800f4f2:	f7f0 fe8d 	bl	8000210 <memchr>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d038      	beq.n	800f56c <_svfiprintf_r+0x1d8>
 800f4fa:	4b23      	ldr	r3, [pc, #140]	; (800f588 <_svfiprintf_r+0x1f4>)
 800f4fc:	bb1b      	cbnz	r3, 800f546 <_svfiprintf_r+0x1b2>
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	3307      	adds	r3, #7
 800f502:	f023 0307 	bic.w	r3, r3, #7
 800f506:	3308      	adds	r3, #8
 800f508:	9303      	str	r3, [sp, #12]
 800f50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f50c:	4433      	add	r3, r6
 800f50e:	9309      	str	r3, [sp, #36]	; 0x24
 800f510:	e767      	b.n	800f3e2 <_svfiprintf_r+0x4e>
 800f512:	fb0c 3202 	mla	r2, ip, r2, r3
 800f516:	460c      	mov	r4, r1
 800f518:	2001      	movs	r0, #1
 800f51a:	e7a5      	b.n	800f468 <_svfiprintf_r+0xd4>
 800f51c:	2300      	movs	r3, #0
 800f51e:	3401      	adds	r4, #1
 800f520:	9305      	str	r3, [sp, #20]
 800f522:	4619      	mov	r1, r3
 800f524:	f04f 0c0a 	mov.w	ip, #10
 800f528:	4620      	mov	r0, r4
 800f52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f52e:	3a30      	subs	r2, #48	; 0x30
 800f530:	2a09      	cmp	r2, #9
 800f532:	d903      	bls.n	800f53c <_svfiprintf_r+0x1a8>
 800f534:	2b00      	cmp	r3, #0
 800f536:	d0c5      	beq.n	800f4c4 <_svfiprintf_r+0x130>
 800f538:	9105      	str	r1, [sp, #20]
 800f53a:	e7c3      	b.n	800f4c4 <_svfiprintf_r+0x130>
 800f53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f540:	4604      	mov	r4, r0
 800f542:	2301      	movs	r3, #1
 800f544:	e7f0      	b.n	800f528 <_svfiprintf_r+0x194>
 800f546:	ab03      	add	r3, sp, #12
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	462a      	mov	r2, r5
 800f54c:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <_svfiprintf_r+0x1f8>)
 800f54e:	a904      	add	r1, sp, #16
 800f550:	4638      	mov	r0, r7
 800f552:	f3af 8000 	nop.w
 800f556:	1c42      	adds	r2, r0, #1
 800f558:	4606      	mov	r6, r0
 800f55a:	d1d6      	bne.n	800f50a <_svfiprintf_r+0x176>
 800f55c:	89ab      	ldrh	r3, [r5, #12]
 800f55e:	065b      	lsls	r3, r3, #25
 800f560:	f53f af2c 	bmi.w	800f3bc <_svfiprintf_r+0x28>
 800f564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f566:	b01d      	add	sp, #116	; 0x74
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	ab03      	add	r3, sp, #12
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	462a      	mov	r2, r5
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <_svfiprintf_r+0x1f8>)
 800f574:	a904      	add	r1, sp, #16
 800f576:	4638      	mov	r0, r7
 800f578:	f000 f9d4 	bl	800f924 <_printf_i>
 800f57c:	e7eb      	b.n	800f556 <_svfiprintf_r+0x1c2>
 800f57e:	bf00      	nop
 800f580:	08010ec2 	.word	0x08010ec2
 800f584:	08010ecc 	.word	0x08010ecc
 800f588:	00000000 	.word	0x00000000
 800f58c:	0800f2dd 	.word	0x0800f2dd
 800f590:	08010ec8 	.word	0x08010ec8

0800f594 <__sfputc_r>:
 800f594:	6893      	ldr	r3, [r2, #8]
 800f596:	3b01      	subs	r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	b410      	push	{r4}
 800f59c:	6093      	str	r3, [r2, #8]
 800f59e:	da08      	bge.n	800f5b2 <__sfputc_r+0x1e>
 800f5a0:	6994      	ldr	r4, [r2, #24]
 800f5a2:	42a3      	cmp	r3, r4
 800f5a4:	db01      	blt.n	800f5aa <__sfputc_r+0x16>
 800f5a6:	290a      	cmp	r1, #10
 800f5a8:	d103      	bne.n	800f5b2 <__sfputc_r+0x1e>
 800f5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ae:	f000 baef 	b.w	800fb90 <__swbuf_r>
 800f5b2:	6813      	ldr	r3, [r2, #0]
 800f5b4:	1c58      	adds	r0, r3, #1
 800f5b6:	6010      	str	r0, [r2, #0]
 800f5b8:	7019      	strb	r1, [r3, #0]
 800f5ba:	4608      	mov	r0, r1
 800f5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <__sfputs_r>:
 800f5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	4614      	mov	r4, r2
 800f5ca:	18d5      	adds	r5, r2, r3
 800f5cc:	42ac      	cmp	r4, r5
 800f5ce:	d101      	bne.n	800f5d4 <__sfputs_r+0x12>
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	e007      	b.n	800f5e4 <__sfputs_r+0x22>
 800f5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d8:	463a      	mov	r2, r7
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f7ff ffda 	bl	800f594 <__sfputc_r>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d1f3      	bne.n	800f5cc <__sfputs_r+0xa>
 800f5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5e8 <_vfiprintf_r>:
 800f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	460d      	mov	r5, r1
 800f5ee:	b09d      	sub	sp, #116	; 0x74
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	4698      	mov	r8, r3
 800f5f4:	4606      	mov	r6, r0
 800f5f6:	b118      	cbz	r0, 800f600 <_vfiprintf_r+0x18>
 800f5f8:	6983      	ldr	r3, [r0, #24]
 800f5fa:	b90b      	cbnz	r3, 800f600 <_vfiprintf_r+0x18>
 800f5fc:	f000 fcaa 	bl	800ff54 <__sinit>
 800f600:	4b89      	ldr	r3, [pc, #548]	; (800f828 <_vfiprintf_r+0x240>)
 800f602:	429d      	cmp	r5, r3
 800f604:	d11b      	bne.n	800f63e <_vfiprintf_r+0x56>
 800f606:	6875      	ldr	r5, [r6, #4]
 800f608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f60a:	07d9      	lsls	r1, r3, #31
 800f60c:	d405      	bmi.n	800f61a <_vfiprintf_r+0x32>
 800f60e:	89ab      	ldrh	r3, [r5, #12]
 800f610:	059a      	lsls	r2, r3, #22
 800f612:	d402      	bmi.n	800f61a <_vfiprintf_r+0x32>
 800f614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f616:	f000 fd3b 	bl	8010090 <__retarget_lock_acquire_recursive>
 800f61a:	89ab      	ldrh	r3, [r5, #12]
 800f61c:	071b      	lsls	r3, r3, #28
 800f61e:	d501      	bpl.n	800f624 <_vfiprintf_r+0x3c>
 800f620:	692b      	ldr	r3, [r5, #16]
 800f622:	b9eb      	cbnz	r3, 800f660 <_vfiprintf_r+0x78>
 800f624:	4629      	mov	r1, r5
 800f626:	4630      	mov	r0, r6
 800f628:	f000 fb04 	bl	800fc34 <__swsetup_r>
 800f62c:	b1c0      	cbz	r0, 800f660 <_vfiprintf_r+0x78>
 800f62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f630:	07dc      	lsls	r4, r3, #31
 800f632:	d50e      	bpl.n	800f652 <_vfiprintf_r+0x6a>
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	b01d      	add	sp, #116	; 0x74
 800f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63e:	4b7b      	ldr	r3, [pc, #492]	; (800f82c <_vfiprintf_r+0x244>)
 800f640:	429d      	cmp	r5, r3
 800f642:	d101      	bne.n	800f648 <_vfiprintf_r+0x60>
 800f644:	68b5      	ldr	r5, [r6, #8]
 800f646:	e7df      	b.n	800f608 <_vfiprintf_r+0x20>
 800f648:	4b79      	ldr	r3, [pc, #484]	; (800f830 <_vfiprintf_r+0x248>)
 800f64a:	429d      	cmp	r5, r3
 800f64c:	bf08      	it	eq
 800f64e:	68f5      	ldreq	r5, [r6, #12]
 800f650:	e7da      	b.n	800f608 <_vfiprintf_r+0x20>
 800f652:	89ab      	ldrh	r3, [r5, #12]
 800f654:	0598      	lsls	r0, r3, #22
 800f656:	d4ed      	bmi.n	800f634 <_vfiprintf_r+0x4c>
 800f658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f65a:	f000 fd1a 	bl	8010092 <__retarget_lock_release_recursive>
 800f65e:	e7e9      	b.n	800f634 <_vfiprintf_r+0x4c>
 800f660:	2300      	movs	r3, #0
 800f662:	9309      	str	r3, [sp, #36]	; 0x24
 800f664:	2320      	movs	r3, #32
 800f666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f66a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f66e:	2330      	movs	r3, #48	; 0x30
 800f670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f834 <_vfiprintf_r+0x24c>
 800f674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f678:	f04f 0901 	mov.w	r9, #1
 800f67c:	4623      	mov	r3, r4
 800f67e:	469a      	mov	sl, r3
 800f680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f684:	b10a      	cbz	r2, 800f68a <_vfiprintf_r+0xa2>
 800f686:	2a25      	cmp	r2, #37	; 0x25
 800f688:	d1f9      	bne.n	800f67e <_vfiprintf_r+0x96>
 800f68a:	ebba 0b04 	subs.w	fp, sl, r4
 800f68e:	d00b      	beq.n	800f6a8 <_vfiprintf_r+0xc0>
 800f690:	465b      	mov	r3, fp
 800f692:	4622      	mov	r2, r4
 800f694:	4629      	mov	r1, r5
 800f696:	4630      	mov	r0, r6
 800f698:	f7ff ff93 	bl	800f5c2 <__sfputs_r>
 800f69c:	3001      	adds	r0, #1
 800f69e:	f000 80aa 	beq.w	800f7f6 <_vfiprintf_r+0x20e>
 800f6a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6a4:	445a      	add	r2, fp
 800f6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 80a2 	beq.w	800f7f6 <_vfiprintf_r+0x20e>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6bc:	f10a 0a01 	add.w	sl, sl, #1
 800f6c0:	9304      	str	r3, [sp, #16]
 800f6c2:	9307      	str	r3, [sp, #28]
 800f6c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6c8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6ca:	4654      	mov	r4, sl
 800f6cc:	2205      	movs	r2, #5
 800f6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d2:	4858      	ldr	r0, [pc, #352]	; (800f834 <_vfiprintf_r+0x24c>)
 800f6d4:	f7f0 fd9c 	bl	8000210 <memchr>
 800f6d8:	9a04      	ldr	r2, [sp, #16]
 800f6da:	b9d8      	cbnz	r0, 800f714 <_vfiprintf_r+0x12c>
 800f6dc:	06d1      	lsls	r1, r2, #27
 800f6de:	bf44      	itt	mi
 800f6e0:	2320      	movmi	r3, #32
 800f6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6e6:	0713      	lsls	r3, r2, #28
 800f6e8:	bf44      	itt	mi
 800f6ea:	232b      	movmi	r3, #43	; 0x2b
 800f6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f6f6:	d015      	beq.n	800f724 <_vfiprintf_r+0x13c>
 800f6f8:	9a07      	ldr	r2, [sp, #28]
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	f04f 0c0a 	mov.w	ip, #10
 800f702:	4621      	mov	r1, r4
 800f704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f708:	3b30      	subs	r3, #48	; 0x30
 800f70a:	2b09      	cmp	r3, #9
 800f70c:	d94e      	bls.n	800f7ac <_vfiprintf_r+0x1c4>
 800f70e:	b1b0      	cbz	r0, 800f73e <_vfiprintf_r+0x156>
 800f710:	9207      	str	r2, [sp, #28]
 800f712:	e014      	b.n	800f73e <_vfiprintf_r+0x156>
 800f714:	eba0 0308 	sub.w	r3, r0, r8
 800f718:	fa09 f303 	lsl.w	r3, r9, r3
 800f71c:	4313      	orrs	r3, r2
 800f71e:	9304      	str	r3, [sp, #16]
 800f720:	46a2      	mov	sl, r4
 800f722:	e7d2      	b.n	800f6ca <_vfiprintf_r+0xe2>
 800f724:	9b03      	ldr	r3, [sp, #12]
 800f726:	1d19      	adds	r1, r3, #4
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	9103      	str	r1, [sp, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	bfbb      	ittet	lt
 800f730:	425b      	neglt	r3, r3
 800f732:	f042 0202 	orrlt.w	r2, r2, #2
 800f736:	9307      	strge	r3, [sp, #28]
 800f738:	9307      	strlt	r3, [sp, #28]
 800f73a:	bfb8      	it	lt
 800f73c:	9204      	strlt	r2, [sp, #16]
 800f73e:	7823      	ldrb	r3, [r4, #0]
 800f740:	2b2e      	cmp	r3, #46	; 0x2e
 800f742:	d10c      	bne.n	800f75e <_vfiprintf_r+0x176>
 800f744:	7863      	ldrb	r3, [r4, #1]
 800f746:	2b2a      	cmp	r3, #42	; 0x2a
 800f748:	d135      	bne.n	800f7b6 <_vfiprintf_r+0x1ce>
 800f74a:	9b03      	ldr	r3, [sp, #12]
 800f74c:	1d1a      	adds	r2, r3, #4
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	9203      	str	r2, [sp, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	bfb8      	it	lt
 800f756:	f04f 33ff 	movlt.w	r3, #4294967295
 800f75a:	3402      	adds	r4, #2
 800f75c:	9305      	str	r3, [sp, #20]
 800f75e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f844 <_vfiprintf_r+0x25c>
 800f762:	7821      	ldrb	r1, [r4, #0]
 800f764:	2203      	movs	r2, #3
 800f766:	4650      	mov	r0, sl
 800f768:	f7f0 fd52 	bl	8000210 <memchr>
 800f76c:	b140      	cbz	r0, 800f780 <_vfiprintf_r+0x198>
 800f76e:	2340      	movs	r3, #64	; 0x40
 800f770:	eba0 000a 	sub.w	r0, r0, sl
 800f774:	fa03 f000 	lsl.w	r0, r3, r0
 800f778:	9b04      	ldr	r3, [sp, #16]
 800f77a:	4303      	orrs	r3, r0
 800f77c:	3401      	adds	r4, #1
 800f77e:	9304      	str	r3, [sp, #16]
 800f780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f784:	482c      	ldr	r0, [pc, #176]	; (800f838 <_vfiprintf_r+0x250>)
 800f786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f78a:	2206      	movs	r2, #6
 800f78c:	f7f0 fd40 	bl	8000210 <memchr>
 800f790:	2800      	cmp	r0, #0
 800f792:	d03f      	beq.n	800f814 <_vfiprintf_r+0x22c>
 800f794:	4b29      	ldr	r3, [pc, #164]	; (800f83c <_vfiprintf_r+0x254>)
 800f796:	bb1b      	cbnz	r3, 800f7e0 <_vfiprintf_r+0x1f8>
 800f798:	9b03      	ldr	r3, [sp, #12]
 800f79a:	3307      	adds	r3, #7
 800f79c:	f023 0307 	bic.w	r3, r3, #7
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	9303      	str	r3, [sp, #12]
 800f7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a6:	443b      	add	r3, r7
 800f7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7aa:	e767      	b.n	800f67c <_vfiprintf_r+0x94>
 800f7ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	2001      	movs	r0, #1
 800f7b4:	e7a5      	b.n	800f702 <_vfiprintf_r+0x11a>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	3401      	adds	r4, #1
 800f7ba:	9305      	str	r3, [sp, #20]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	f04f 0c0a 	mov.w	ip, #10
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7c8:	3a30      	subs	r2, #48	; 0x30
 800f7ca:	2a09      	cmp	r2, #9
 800f7cc:	d903      	bls.n	800f7d6 <_vfiprintf_r+0x1ee>
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d0c5      	beq.n	800f75e <_vfiprintf_r+0x176>
 800f7d2:	9105      	str	r1, [sp, #20]
 800f7d4:	e7c3      	b.n	800f75e <_vfiprintf_r+0x176>
 800f7d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7da:	4604      	mov	r4, r0
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e7f0      	b.n	800f7c2 <_vfiprintf_r+0x1da>
 800f7e0:	ab03      	add	r3, sp, #12
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	462a      	mov	r2, r5
 800f7e6:	4b16      	ldr	r3, [pc, #88]	; (800f840 <_vfiprintf_r+0x258>)
 800f7e8:	a904      	add	r1, sp, #16
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f3af 8000 	nop.w
 800f7f0:	4607      	mov	r7, r0
 800f7f2:	1c78      	adds	r0, r7, #1
 800f7f4:	d1d6      	bne.n	800f7a4 <_vfiprintf_r+0x1bc>
 800f7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7f8:	07d9      	lsls	r1, r3, #31
 800f7fa:	d405      	bmi.n	800f808 <_vfiprintf_r+0x220>
 800f7fc:	89ab      	ldrh	r3, [r5, #12]
 800f7fe:	059a      	lsls	r2, r3, #22
 800f800:	d402      	bmi.n	800f808 <_vfiprintf_r+0x220>
 800f802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f804:	f000 fc45 	bl	8010092 <__retarget_lock_release_recursive>
 800f808:	89ab      	ldrh	r3, [r5, #12]
 800f80a:	065b      	lsls	r3, r3, #25
 800f80c:	f53f af12 	bmi.w	800f634 <_vfiprintf_r+0x4c>
 800f810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f812:	e711      	b.n	800f638 <_vfiprintf_r+0x50>
 800f814:	ab03      	add	r3, sp, #12
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	462a      	mov	r2, r5
 800f81a:	4b09      	ldr	r3, [pc, #36]	; (800f840 <_vfiprintf_r+0x258>)
 800f81c:	a904      	add	r1, sp, #16
 800f81e:	4630      	mov	r0, r6
 800f820:	f000 f880 	bl	800f924 <_printf_i>
 800f824:	e7e4      	b.n	800f7f0 <_vfiprintf_r+0x208>
 800f826:	bf00      	nop
 800f828:	08010f18 	.word	0x08010f18
 800f82c:	08010f38 	.word	0x08010f38
 800f830:	08010ef8 	.word	0x08010ef8
 800f834:	08010ec2 	.word	0x08010ec2
 800f838:	08010ecc 	.word	0x08010ecc
 800f83c:	00000000 	.word	0x00000000
 800f840:	0800f5c3 	.word	0x0800f5c3
 800f844:	08010ec8 	.word	0x08010ec8

0800f848 <_printf_common>:
 800f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84c:	4616      	mov	r6, r2
 800f84e:	4699      	mov	r9, r3
 800f850:	688a      	ldr	r2, [r1, #8]
 800f852:	690b      	ldr	r3, [r1, #16]
 800f854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f858:	4293      	cmp	r3, r2
 800f85a:	bfb8      	it	lt
 800f85c:	4613      	movlt	r3, r2
 800f85e:	6033      	str	r3, [r6, #0]
 800f860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f864:	4607      	mov	r7, r0
 800f866:	460c      	mov	r4, r1
 800f868:	b10a      	cbz	r2, 800f86e <_printf_common+0x26>
 800f86a:	3301      	adds	r3, #1
 800f86c:	6033      	str	r3, [r6, #0]
 800f86e:	6823      	ldr	r3, [r4, #0]
 800f870:	0699      	lsls	r1, r3, #26
 800f872:	bf42      	ittt	mi
 800f874:	6833      	ldrmi	r3, [r6, #0]
 800f876:	3302      	addmi	r3, #2
 800f878:	6033      	strmi	r3, [r6, #0]
 800f87a:	6825      	ldr	r5, [r4, #0]
 800f87c:	f015 0506 	ands.w	r5, r5, #6
 800f880:	d106      	bne.n	800f890 <_printf_common+0x48>
 800f882:	f104 0a19 	add.w	sl, r4, #25
 800f886:	68e3      	ldr	r3, [r4, #12]
 800f888:	6832      	ldr	r2, [r6, #0]
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	42ab      	cmp	r3, r5
 800f88e:	dc26      	bgt.n	800f8de <_printf_common+0x96>
 800f890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f894:	1e13      	subs	r3, r2, #0
 800f896:	6822      	ldr	r2, [r4, #0]
 800f898:	bf18      	it	ne
 800f89a:	2301      	movne	r3, #1
 800f89c:	0692      	lsls	r2, r2, #26
 800f89e:	d42b      	bmi.n	800f8f8 <_printf_common+0xb0>
 800f8a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	4638      	mov	r0, r7
 800f8a8:	47c0      	blx	r8
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	d01e      	beq.n	800f8ec <_printf_common+0xa4>
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	68e5      	ldr	r5, [r4, #12]
 800f8b2:	6832      	ldr	r2, [r6, #0]
 800f8b4:	f003 0306 	and.w	r3, r3, #6
 800f8b8:	2b04      	cmp	r3, #4
 800f8ba:	bf08      	it	eq
 800f8bc:	1aad      	subeq	r5, r5, r2
 800f8be:	68a3      	ldr	r3, [r4, #8]
 800f8c0:	6922      	ldr	r2, [r4, #16]
 800f8c2:	bf0c      	ite	eq
 800f8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8c8:	2500      	movne	r5, #0
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	bfc4      	itt	gt
 800f8ce:	1a9b      	subgt	r3, r3, r2
 800f8d0:	18ed      	addgt	r5, r5, r3
 800f8d2:	2600      	movs	r6, #0
 800f8d4:	341a      	adds	r4, #26
 800f8d6:	42b5      	cmp	r5, r6
 800f8d8:	d11a      	bne.n	800f910 <_printf_common+0xc8>
 800f8da:	2000      	movs	r0, #0
 800f8dc:	e008      	b.n	800f8f0 <_printf_common+0xa8>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4652      	mov	r2, sl
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	47c0      	blx	r8
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d103      	bne.n	800f8f4 <_printf_common+0xac>
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f4:	3501      	adds	r5, #1
 800f8f6:	e7c6      	b.n	800f886 <_printf_common+0x3e>
 800f8f8:	18e1      	adds	r1, r4, r3
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	2030      	movs	r0, #48	; 0x30
 800f8fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f902:	4422      	add	r2, r4
 800f904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f90c:	3302      	adds	r3, #2
 800f90e:	e7c7      	b.n	800f8a0 <_printf_common+0x58>
 800f910:	2301      	movs	r3, #1
 800f912:	4622      	mov	r2, r4
 800f914:	4649      	mov	r1, r9
 800f916:	4638      	mov	r0, r7
 800f918:	47c0      	blx	r8
 800f91a:	3001      	adds	r0, #1
 800f91c:	d0e6      	beq.n	800f8ec <_printf_common+0xa4>
 800f91e:	3601      	adds	r6, #1
 800f920:	e7d9      	b.n	800f8d6 <_printf_common+0x8e>
	...

0800f924 <_printf_i>:
 800f924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f928:	7e0f      	ldrb	r7, [r1, #24]
 800f92a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f92c:	2f78      	cmp	r7, #120	; 0x78
 800f92e:	4691      	mov	r9, r2
 800f930:	4680      	mov	r8, r0
 800f932:	460c      	mov	r4, r1
 800f934:	469a      	mov	sl, r3
 800f936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f93a:	d807      	bhi.n	800f94c <_printf_i+0x28>
 800f93c:	2f62      	cmp	r7, #98	; 0x62
 800f93e:	d80a      	bhi.n	800f956 <_printf_i+0x32>
 800f940:	2f00      	cmp	r7, #0
 800f942:	f000 80d8 	beq.w	800faf6 <_printf_i+0x1d2>
 800f946:	2f58      	cmp	r7, #88	; 0x58
 800f948:	f000 80a3 	beq.w	800fa92 <_printf_i+0x16e>
 800f94c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f954:	e03a      	b.n	800f9cc <_printf_i+0xa8>
 800f956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f95a:	2b15      	cmp	r3, #21
 800f95c:	d8f6      	bhi.n	800f94c <_printf_i+0x28>
 800f95e:	a101      	add	r1, pc, #4	; (adr r1, 800f964 <_printf_i+0x40>)
 800f960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f964:	0800f9bd 	.word	0x0800f9bd
 800f968:	0800f9d1 	.word	0x0800f9d1
 800f96c:	0800f94d 	.word	0x0800f94d
 800f970:	0800f94d 	.word	0x0800f94d
 800f974:	0800f94d 	.word	0x0800f94d
 800f978:	0800f94d 	.word	0x0800f94d
 800f97c:	0800f9d1 	.word	0x0800f9d1
 800f980:	0800f94d 	.word	0x0800f94d
 800f984:	0800f94d 	.word	0x0800f94d
 800f988:	0800f94d 	.word	0x0800f94d
 800f98c:	0800f94d 	.word	0x0800f94d
 800f990:	0800fadd 	.word	0x0800fadd
 800f994:	0800fa01 	.word	0x0800fa01
 800f998:	0800fabf 	.word	0x0800fabf
 800f99c:	0800f94d 	.word	0x0800f94d
 800f9a0:	0800f94d 	.word	0x0800f94d
 800f9a4:	0800faff 	.word	0x0800faff
 800f9a8:	0800f94d 	.word	0x0800f94d
 800f9ac:	0800fa01 	.word	0x0800fa01
 800f9b0:	0800f94d 	.word	0x0800f94d
 800f9b4:	0800f94d 	.word	0x0800f94d
 800f9b8:	0800fac7 	.word	0x0800fac7
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	1d1a      	adds	r2, r3, #4
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	602a      	str	r2, [r5, #0]
 800f9c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e0a3      	b.n	800fb18 <_printf_i+0x1f4>
 800f9d0:	6820      	ldr	r0, [r4, #0]
 800f9d2:	6829      	ldr	r1, [r5, #0]
 800f9d4:	0606      	lsls	r6, r0, #24
 800f9d6:	f101 0304 	add.w	r3, r1, #4
 800f9da:	d50a      	bpl.n	800f9f2 <_printf_i+0xce>
 800f9dc:	680e      	ldr	r6, [r1, #0]
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	2e00      	cmp	r6, #0
 800f9e2:	da03      	bge.n	800f9ec <_printf_i+0xc8>
 800f9e4:	232d      	movs	r3, #45	; 0x2d
 800f9e6:	4276      	negs	r6, r6
 800f9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9ec:	485e      	ldr	r0, [pc, #376]	; (800fb68 <_printf_i+0x244>)
 800f9ee:	230a      	movs	r3, #10
 800f9f0:	e019      	b.n	800fa26 <_printf_i+0x102>
 800f9f2:	680e      	ldr	r6, [r1, #0]
 800f9f4:	602b      	str	r3, [r5, #0]
 800f9f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f9fa:	bf18      	it	ne
 800f9fc:	b236      	sxthne	r6, r6
 800f9fe:	e7ef      	b.n	800f9e0 <_printf_i+0xbc>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	6820      	ldr	r0, [r4, #0]
 800fa04:	1d19      	adds	r1, r3, #4
 800fa06:	6029      	str	r1, [r5, #0]
 800fa08:	0601      	lsls	r1, r0, #24
 800fa0a:	d501      	bpl.n	800fa10 <_printf_i+0xec>
 800fa0c:	681e      	ldr	r6, [r3, #0]
 800fa0e:	e002      	b.n	800fa16 <_printf_i+0xf2>
 800fa10:	0646      	lsls	r6, r0, #25
 800fa12:	d5fb      	bpl.n	800fa0c <_printf_i+0xe8>
 800fa14:	881e      	ldrh	r6, [r3, #0]
 800fa16:	4854      	ldr	r0, [pc, #336]	; (800fb68 <_printf_i+0x244>)
 800fa18:	2f6f      	cmp	r7, #111	; 0x6f
 800fa1a:	bf0c      	ite	eq
 800fa1c:	2308      	moveq	r3, #8
 800fa1e:	230a      	movne	r3, #10
 800fa20:	2100      	movs	r1, #0
 800fa22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa26:	6865      	ldr	r5, [r4, #4]
 800fa28:	60a5      	str	r5, [r4, #8]
 800fa2a:	2d00      	cmp	r5, #0
 800fa2c:	bfa2      	ittt	ge
 800fa2e:	6821      	ldrge	r1, [r4, #0]
 800fa30:	f021 0104 	bicge.w	r1, r1, #4
 800fa34:	6021      	strge	r1, [r4, #0]
 800fa36:	b90e      	cbnz	r6, 800fa3c <_printf_i+0x118>
 800fa38:	2d00      	cmp	r5, #0
 800fa3a:	d04d      	beq.n	800fad8 <_printf_i+0x1b4>
 800fa3c:	4615      	mov	r5, r2
 800fa3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa42:	fb03 6711 	mls	r7, r3, r1, r6
 800fa46:	5dc7      	ldrb	r7, [r0, r7]
 800fa48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa4c:	4637      	mov	r7, r6
 800fa4e:	42bb      	cmp	r3, r7
 800fa50:	460e      	mov	r6, r1
 800fa52:	d9f4      	bls.n	800fa3e <_printf_i+0x11a>
 800fa54:	2b08      	cmp	r3, #8
 800fa56:	d10b      	bne.n	800fa70 <_printf_i+0x14c>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	07de      	lsls	r6, r3, #31
 800fa5c:	d508      	bpl.n	800fa70 <_printf_i+0x14c>
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	6861      	ldr	r1, [r4, #4]
 800fa62:	4299      	cmp	r1, r3
 800fa64:	bfde      	ittt	le
 800fa66:	2330      	movle	r3, #48	; 0x30
 800fa68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa70:	1b52      	subs	r2, r2, r5
 800fa72:	6122      	str	r2, [r4, #16]
 800fa74:	f8cd a000 	str.w	sl, [sp]
 800fa78:	464b      	mov	r3, r9
 800fa7a:	aa03      	add	r2, sp, #12
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	4640      	mov	r0, r8
 800fa80:	f7ff fee2 	bl	800f848 <_printf_common>
 800fa84:	3001      	adds	r0, #1
 800fa86:	d14c      	bne.n	800fb22 <_printf_i+0x1fe>
 800fa88:	f04f 30ff 	mov.w	r0, #4294967295
 800fa8c:	b004      	add	sp, #16
 800fa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa92:	4835      	ldr	r0, [pc, #212]	; (800fb68 <_printf_i+0x244>)
 800fa94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fa98:	6829      	ldr	r1, [r5, #0]
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800faa0:	6029      	str	r1, [r5, #0]
 800faa2:	061d      	lsls	r5, r3, #24
 800faa4:	d514      	bpl.n	800fad0 <_printf_i+0x1ac>
 800faa6:	07df      	lsls	r7, r3, #31
 800faa8:	bf44      	itt	mi
 800faaa:	f043 0320 	orrmi.w	r3, r3, #32
 800faae:	6023      	strmi	r3, [r4, #0]
 800fab0:	b91e      	cbnz	r6, 800faba <_printf_i+0x196>
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	f023 0320 	bic.w	r3, r3, #32
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	2310      	movs	r3, #16
 800fabc:	e7b0      	b.n	800fa20 <_printf_i+0xfc>
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	f043 0320 	orr.w	r3, r3, #32
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	2378      	movs	r3, #120	; 0x78
 800fac8:	4828      	ldr	r0, [pc, #160]	; (800fb6c <_printf_i+0x248>)
 800faca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800face:	e7e3      	b.n	800fa98 <_printf_i+0x174>
 800fad0:	0659      	lsls	r1, r3, #25
 800fad2:	bf48      	it	mi
 800fad4:	b2b6      	uxthmi	r6, r6
 800fad6:	e7e6      	b.n	800faa6 <_printf_i+0x182>
 800fad8:	4615      	mov	r5, r2
 800fada:	e7bb      	b.n	800fa54 <_printf_i+0x130>
 800fadc:	682b      	ldr	r3, [r5, #0]
 800fade:	6826      	ldr	r6, [r4, #0]
 800fae0:	6961      	ldr	r1, [r4, #20]
 800fae2:	1d18      	adds	r0, r3, #4
 800fae4:	6028      	str	r0, [r5, #0]
 800fae6:	0635      	lsls	r5, r6, #24
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	d501      	bpl.n	800faf0 <_printf_i+0x1cc>
 800faec:	6019      	str	r1, [r3, #0]
 800faee:	e002      	b.n	800faf6 <_printf_i+0x1d2>
 800faf0:	0670      	lsls	r0, r6, #25
 800faf2:	d5fb      	bpl.n	800faec <_printf_i+0x1c8>
 800faf4:	8019      	strh	r1, [r3, #0]
 800faf6:	2300      	movs	r3, #0
 800faf8:	6123      	str	r3, [r4, #16]
 800fafa:	4615      	mov	r5, r2
 800fafc:	e7ba      	b.n	800fa74 <_printf_i+0x150>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	1d1a      	adds	r2, r3, #4
 800fb02:	602a      	str	r2, [r5, #0]
 800fb04:	681d      	ldr	r5, [r3, #0]
 800fb06:	6862      	ldr	r2, [r4, #4]
 800fb08:	2100      	movs	r1, #0
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7f0 fb80 	bl	8000210 <memchr>
 800fb10:	b108      	cbz	r0, 800fb16 <_printf_i+0x1f2>
 800fb12:	1b40      	subs	r0, r0, r5
 800fb14:	6060      	str	r0, [r4, #4]
 800fb16:	6863      	ldr	r3, [r4, #4]
 800fb18:	6123      	str	r3, [r4, #16]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb20:	e7a8      	b.n	800fa74 <_printf_i+0x150>
 800fb22:	6923      	ldr	r3, [r4, #16]
 800fb24:	462a      	mov	r2, r5
 800fb26:	4649      	mov	r1, r9
 800fb28:	4640      	mov	r0, r8
 800fb2a:	47d0      	blx	sl
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	d0ab      	beq.n	800fa88 <_printf_i+0x164>
 800fb30:	6823      	ldr	r3, [r4, #0]
 800fb32:	079b      	lsls	r3, r3, #30
 800fb34:	d413      	bmi.n	800fb5e <_printf_i+0x23a>
 800fb36:	68e0      	ldr	r0, [r4, #12]
 800fb38:	9b03      	ldr	r3, [sp, #12]
 800fb3a:	4298      	cmp	r0, r3
 800fb3c:	bfb8      	it	lt
 800fb3e:	4618      	movlt	r0, r3
 800fb40:	e7a4      	b.n	800fa8c <_printf_i+0x168>
 800fb42:	2301      	movs	r3, #1
 800fb44:	4632      	mov	r2, r6
 800fb46:	4649      	mov	r1, r9
 800fb48:	4640      	mov	r0, r8
 800fb4a:	47d0      	blx	sl
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d09b      	beq.n	800fa88 <_printf_i+0x164>
 800fb50:	3501      	adds	r5, #1
 800fb52:	68e3      	ldr	r3, [r4, #12]
 800fb54:	9903      	ldr	r1, [sp, #12]
 800fb56:	1a5b      	subs	r3, r3, r1
 800fb58:	42ab      	cmp	r3, r5
 800fb5a:	dcf2      	bgt.n	800fb42 <_printf_i+0x21e>
 800fb5c:	e7eb      	b.n	800fb36 <_printf_i+0x212>
 800fb5e:	2500      	movs	r5, #0
 800fb60:	f104 0619 	add.w	r6, r4, #25
 800fb64:	e7f5      	b.n	800fb52 <_printf_i+0x22e>
 800fb66:	bf00      	nop
 800fb68:	08010ed3 	.word	0x08010ed3
 800fb6c:	08010ee4 	.word	0x08010ee4

0800fb70 <_sbrk_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4d06      	ldr	r5, [pc, #24]	; (800fb8c <_sbrk_r+0x1c>)
 800fb74:	2300      	movs	r3, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	4608      	mov	r0, r1
 800fb7a:	602b      	str	r3, [r5, #0]
 800fb7c:	f7f2 ff56 	bl	8002a2c <_sbrk>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_sbrk_r+0x1a>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_sbrk_r+0x1a>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	20003e8c 	.word	0x20003e8c

0800fb90 <__swbuf_r>:
 800fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb92:	460e      	mov	r6, r1
 800fb94:	4614      	mov	r4, r2
 800fb96:	4605      	mov	r5, r0
 800fb98:	b118      	cbz	r0, 800fba2 <__swbuf_r+0x12>
 800fb9a:	6983      	ldr	r3, [r0, #24]
 800fb9c:	b90b      	cbnz	r3, 800fba2 <__swbuf_r+0x12>
 800fb9e:	f000 f9d9 	bl	800ff54 <__sinit>
 800fba2:	4b21      	ldr	r3, [pc, #132]	; (800fc28 <__swbuf_r+0x98>)
 800fba4:	429c      	cmp	r4, r3
 800fba6:	d12b      	bne.n	800fc00 <__swbuf_r+0x70>
 800fba8:	686c      	ldr	r4, [r5, #4]
 800fbaa:	69a3      	ldr	r3, [r4, #24]
 800fbac:	60a3      	str	r3, [r4, #8]
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	071a      	lsls	r2, r3, #28
 800fbb2:	d52f      	bpl.n	800fc14 <__swbuf_r+0x84>
 800fbb4:	6923      	ldr	r3, [r4, #16]
 800fbb6:	b36b      	cbz	r3, 800fc14 <__swbuf_r+0x84>
 800fbb8:	6923      	ldr	r3, [r4, #16]
 800fbba:	6820      	ldr	r0, [r4, #0]
 800fbbc:	1ac0      	subs	r0, r0, r3
 800fbbe:	6963      	ldr	r3, [r4, #20]
 800fbc0:	b2f6      	uxtb	r6, r6
 800fbc2:	4283      	cmp	r3, r0
 800fbc4:	4637      	mov	r7, r6
 800fbc6:	dc04      	bgt.n	800fbd2 <__swbuf_r+0x42>
 800fbc8:	4621      	mov	r1, r4
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f000 f92e 	bl	800fe2c <_fflush_r>
 800fbd0:	bb30      	cbnz	r0, 800fc20 <__swbuf_r+0x90>
 800fbd2:	68a3      	ldr	r3, [r4, #8]
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	60a3      	str	r3, [r4, #8]
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	6022      	str	r2, [r4, #0]
 800fbde:	701e      	strb	r6, [r3, #0]
 800fbe0:	6963      	ldr	r3, [r4, #20]
 800fbe2:	3001      	adds	r0, #1
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	d004      	beq.n	800fbf2 <__swbuf_r+0x62>
 800fbe8:	89a3      	ldrh	r3, [r4, #12]
 800fbea:	07db      	lsls	r3, r3, #31
 800fbec:	d506      	bpl.n	800fbfc <__swbuf_r+0x6c>
 800fbee:	2e0a      	cmp	r6, #10
 800fbf0:	d104      	bne.n	800fbfc <__swbuf_r+0x6c>
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f000 f919 	bl	800fe2c <_fflush_r>
 800fbfa:	b988      	cbnz	r0, 800fc20 <__swbuf_r+0x90>
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc00:	4b0a      	ldr	r3, [pc, #40]	; (800fc2c <__swbuf_r+0x9c>)
 800fc02:	429c      	cmp	r4, r3
 800fc04:	d101      	bne.n	800fc0a <__swbuf_r+0x7a>
 800fc06:	68ac      	ldr	r4, [r5, #8]
 800fc08:	e7cf      	b.n	800fbaa <__swbuf_r+0x1a>
 800fc0a:	4b09      	ldr	r3, [pc, #36]	; (800fc30 <__swbuf_r+0xa0>)
 800fc0c:	429c      	cmp	r4, r3
 800fc0e:	bf08      	it	eq
 800fc10:	68ec      	ldreq	r4, [r5, #12]
 800fc12:	e7ca      	b.n	800fbaa <__swbuf_r+0x1a>
 800fc14:	4621      	mov	r1, r4
 800fc16:	4628      	mov	r0, r5
 800fc18:	f000 f80c 	bl	800fc34 <__swsetup_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d0cb      	beq.n	800fbb8 <__swbuf_r+0x28>
 800fc20:	f04f 37ff 	mov.w	r7, #4294967295
 800fc24:	e7ea      	b.n	800fbfc <__swbuf_r+0x6c>
 800fc26:	bf00      	nop
 800fc28:	08010f18 	.word	0x08010f18
 800fc2c:	08010f38 	.word	0x08010f38
 800fc30:	08010ef8 	.word	0x08010ef8

0800fc34 <__swsetup_r>:
 800fc34:	4b32      	ldr	r3, [pc, #200]	; (800fd00 <__swsetup_r+0xcc>)
 800fc36:	b570      	push	{r4, r5, r6, lr}
 800fc38:	681d      	ldr	r5, [r3, #0]
 800fc3a:	4606      	mov	r6, r0
 800fc3c:	460c      	mov	r4, r1
 800fc3e:	b125      	cbz	r5, 800fc4a <__swsetup_r+0x16>
 800fc40:	69ab      	ldr	r3, [r5, #24]
 800fc42:	b913      	cbnz	r3, 800fc4a <__swsetup_r+0x16>
 800fc44:	4628      	mov	r0, r5
 800fc46:	f000 f985 	bl	800ff54 <__sinit>
 800fc4a:	4b2e      	ldr	r3, [pc, #184]	; (800fd04 <__swsetup_r+0xd0>)
 800fc4c:	429c      	cmp	r4, r3
 800fc4e:	d10f      	bne.n	800fc70 <__swsetup_r+0x3c>
 800fc50:	686c      	ldr	r4, [r5, #4]
 800fc52:	89a3      	ldrh	r3, [r4, #12]
 800fc54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc58:	0719      	lsls	r1, r3, #28
 800fc5a:	d42c      	bmi.n	800fcb6 <__swsetup_r+0x82>
 800fc5c:	06dd      	lsls	r5, r3, #27
 800fc5e:	d411      	bmi.n	800fc84 <__swsetup_r+0x50>
 800fc60:	2309      	movs	r3, #9
 800fc62:	6033      	str	r3, [r6, #0]
 800fc64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	e03e      	b.n	800fcee <__swsetup_r+0xba>
 800fc70:	4b25      	ldr	r3, [pc, #148]	; (800fd08 <__swsetup_r+0xd4>)
 800fc72:	429c      	cmp	r4, r3
 800fc74:	d101      	bne.n	800fc7a <__swsetup_r+0x46>
 800fc76:	68ac      	ldr	r4, [r5, #8]
 800fc78:	e7eb      	b.n	800fc52 <__swsetup_r+0x1e>
 800fc7a:	4b24      	ldr	r3, [pc, #144]	; (800fd0c <__swsetup_r+0xd8>)
 800fc7c:	429c      	cmp	r4, r3
 800fc7e:	bf08      	it	eq
 800fc80:	68ec      	ldreq	r4, [r5, #12]
 800fc82:	e7e6      	b.n	800fc52 <__swsetup_r+0x1e>
 800fc84:	0758      	lsls	r0, r3, #29
 800fc86:	d512      	bpl.n	800fcae <__swsetup_r+0x7a>
 800fc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc8a:	b141      	cbz	r1, 800fc9e <__swsetup_r+0x6a>
 800fc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc90:	4299      	cmp	r1, r3
 800fc92:	d002      	beq.n	800fc9a <__swsetup_r+0x66>
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff fa41 	bl	800f11c <_free_r>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6363      	str	r3, [r4, #52]	; 0x34
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fca4:	81a3      	strh	r3, [r4, #12]
 800fca6:	2300      	movs	r3, #0
 800fca8:	6063      	str	r3, [r4, #4]
 800fcaa:	6923      	ldr	r3, [r4, #16]
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	f043 0308 	orr.w	r3, r3, #8
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	b94b      	cbnz	r3, 800fcce <__swsetup_r+0x9a>
 800fcba:	89a3      	ldrh	r3, [r4, #12]
 800fcbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcc4:	d003      	beq.n	800fcce <__swsetup_r+0x9a>
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4630      	mov	r0, r6
 800fcca:	f000 fa09 	bl	80100e0 <__smakebuf_r>
 800fcce:	89a0      	ldrh	r0, [r4, #12]
 800fcd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcd4:	f010 0301 	ands.w	r3, r0, #1
 800fcd8:	d00a      	beq.n	800fcf0 <__swsetup_r+0xbc>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	60a3      	str	r3, [r4, #8]
 800fcde:	6963      	ldr	r3, [r4, #20]
 800fce0:	425b      	negs	r3, r3
 800fce2:	61a3      	str	r3, [r4, #24]
 800fce4:	6923      	ldr	r3, [r4, #16]
 800fce6:	b943      	cbnz	r3, 800fcfa <__swsetup_r+0xc6>
 800fce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fcec:	d1ba      	bne.n	800fc64 <__swsetup_r+0x30>
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	0781      	lsls	r1, r0, #30
 800fcf2:	bf58      	it	pl
 800fcf4:	6963      	ldrpl	r3, [r4, #20]
 800fcf6:	60a3      	str	r3, [r4, #8]
 800fcf8:	e7f4      	b.n	800fce4 <__swsetup_r+0xb0>
 800fcfa:	2000      	movs	r0, #0
 800fcfc:	e7f7      	b.n	800fcee <__swsetup_r+0xba>
 800fcfe:	bf00      	nop
 800fd00:	2000013c 	.word	0x2000013c
 800fd04:	08010f18 	.word	0x08010f18
 800fd08:	08010f38 	.word	0x08010f38
 800fd0c:	08010ef8 	.word	0x08010ef8

0800fd10 <abort>:
 800fd10:	b508      	push	{r3, lr}
 800fd12:	2006      	movs	r0, #6
 800fd14:	f000 fab0 	bl	8010278 <raise>
 800fd18:	2001      	movs	r0, #1
 800fd1a:	f7f2 fe0f 	bl	800293c <_exit>
	...

0800fd20 <__sflush_r>:
 800fd20:	898a      	ldrh	r2, [r1, #12]
 800fd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd26:	4605      	mov	r5, r0
 800fd28:	0710      	lsls	r0, r2, #28
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	d458      	bmi.n	800fde0 <__sflush_r+0xc0>
 800fd2e:	684b      	ldr	r3, [r1, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	dc05      	bgt.n	800fd40 <__sflush_r+0x20>
 800fd34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	dc02      	bgt.n	800fd40 <__sflush_r+0x20>
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd42:	2e00      	cmp	r6, #0
 800fd44:	d0f9      	beq.n	800fd3a <__sflush_r+0x1a>
 800fd46:	2300      	movs	r3, #0
 800fd48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd4c:	682f      	ldr	r7, [r5, #0]
 800fd4e:	602b      	str	r3, [r5, #0]
 800fd50:	d032      	beq.n	800fdb8 <__sflush_r+0x98>
 800fd52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd54:	89a3      	ldrh	r3, [r4, #12]
 800fd56:	075a      	lsls	r2, r3, #29
 800fd58:	d505      	bpl.n	800fd66 <__sflush_r+0x46>
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	1ac0      	subs	r0, r0, r3
 800fd5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd60:	b10b      	cbz	r3, 800fd66 <__sflush_r+0x46>
 800fd62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd64:	1ac0      	subs	r0, r0, r3
 800fd66:	2300      	movs	r3, #0
 800fd68:	4602      	mov	r2, r0
 800fd6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd6c:	6a21      	ldr	r1, [r4, #32]
 800fd6e:	4628      	mov	r0, r5
 800fd70:	47b0      	blx	r6
 800fd72:	1c43      	adds	r3, r0, #1
 800fd74:	89a3      	ldrh	r3, [r4, #12]
 800fd76:	d106      	bne.n	800fd86 <__sflush_r+0x66>
 800fd78:	6829      	ldr	r1, [r5, #0]
 800fd7a:	291d      	cmp	r1, #29
 800fd7c:	d82c      	bhi.n	800fdd8 <__sflush_r+0xb8>
 800fd7e:	4a2a      	ldr	r2, [pc, #168]	; (800fe28 <__sflush_r+0x108>)
 800fd80:	40ca      	lsrs	r2, r1
 800fd82:	07d6      	lsls	r6, r2, #31
 800fd84:	d528      	bpl.n	800fdd8 <__sflush_r+0xb8>
 800fd86:	2200      	movs	r2, #0
 800fd88:	6062      	str	r2, [r4, #4]
 800fd8a:	04d9      	lsls	r1, r3, #19
 800fd8c:	6922      	ldr	r2, [r4, #16]
 800fd8e:	6022      	str	r2, [r4, #0]
 800fd90:	d504      	bpl.n	800fd9c <__sflush_r+0x7c>
 800fd92:	1c42      	adds	r2, r0, #1
 800fd94:	d101      	bne.n	800fd9a <__sflush_r+0x7a>
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	b903      	cbnz	r3, 800fd9c <__sflush_r+0x7c>
 800fd9a:	6560      	str	r0, [r4, #84]	; 0x54
 800fd9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd9e:	602f      	str	r7, [r5, #0]
 800fda0:	2900      	cmp	r1, #0
 800fda2:	d0ca      	beq.n	800fd3a <__sflush_r+0x1a>
 800fda4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fda8:	4299      	cmp	r1, r3
 800fdaa:	d002      	beq.n	800fdb2 <__sflush_r+0x92>
 800fdac:	4628      	mov	r0, r5
 800fdae:	f7ff f9b5 	bl	800f11c <_free_r>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	6360      	str	r0, [r4, #52]	; 0x34
 800fdb6:	e7c1      	b.n	800fd3c <__sflush_r+0x1c>
 800fdb8:	6a21      	ldr	r1, [r4, #32]
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	47b0      	blx	r6
 800fdc0:	1c41      	adds	r1, r0, #1
 800fdc2:	d1c7      	bne.n	800fd54 <__sflush_r+0x34>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d0c4      	beq.n	800fd54 <__sflush_r+0x34>
 800fdca:	2b1d      	cmp	r3, #29
 800fdcc:	d001      	beq.n	800fdd2 <__sflush_r+0xb2>
 800fdce:	2b16      	cmp	r3, #22
 800fdd0:	d101      	bne.n	800fdd6 <__sflush_r+0xb6>
 800fdd2:	602f      	str	r7, [r5, #0]
 800fdd4:	e7b1      	b.n	800fd3a <__sflush_r+0x1a>
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fddc:	81a3      	strh	r3, [r4, #12]
 800fdde:	e7ad      	b.n	800fd3c <__sflush_r+0x1c>
 800fde0:	690f      	ldr	r7, [r1, #16]
 800fde2:	2f00      	cmp	r7, #0
 800fde4:	d0a9      	beq.n	800fd3a <__sflush_r+0x1a>
 800fde6:	0793      	lsls	r3, r2, #30
 800fde8:	680e      	ldr	r6, [r1, #0]
 800fdea:	bf08      	it	eq
 800fdec:	694b      	ldreq	r3, [r1, #20]
 800fdee:	600f      	str	r7, [r1, #0]
 800fdf0:	bf18      	it	ne
 800fdf2:	2300      	movne	r3, #0
 800fdf4:	eba6 0807 	sub.w	r8, r6, r7
 800fdf8:	608b      	str	r3, [r1, #8]
 800fdfa:	f1b8 0f00 	cmp.w	r8, #0
 800fdfe:	dd9c      	ble.n	800fd3a <__sflush_r+0x1a>
 800fe00:	6a21      	ldr	r1, [r4, #32]
 800fe02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe04:	4643      	mov	r3, r8
 800fe06:	463a      	mov	r2, r7
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b0      	blx	r6
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	dc06      	bgt.n	800fe1e <__sflush_r+0xfe>
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe16:	81a3      	strh	r3, [r4, #12]
 800fe18:	f04f 30ff 	mov.w	r0, #4294967295
 800fe1c:	e78e      	b.n	800fd3c <__sflush_r+0x1c>
 800fe1e:	4407      	add	r7, r0
 800fe20:	eba8 0800 	sub.w	r8, r8, r0
 800fe24:	e7e9      	b.n	800fdfa <__sflush_r+0xda>
 800fe26:	bf00      	nop
 800fe28:	20400001 	.word	0x20400001

0800fe2c <_fflush_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	690b      	ldr	r3, [r1, #16]
 800fe30:	4605      	mov	r5, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	b913      	cbnz	r3, 800fe3c <_fflush_r+0x10>
 800fe36:	2500      	movs	r5, #0
 800fe38:	4628      	mov	r0, r5
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
 800fe3c:	b118      	cbz	r0, 800fe46 <_fflush_r+0x1a>
 800fe3e:	6983      	ldr	r3, [r0, #24]
 800fe40:	b90b      	cbnz	r3, 800fe46 <_fflush_r+0x1a>
 800fe42:	f000 f887 	bl	800ff54 <__sinit>
 800fe46:	4b14      	ldr	r3, [pc, #80]	; (800fe98 <_fflush_r+0x6c>)
 800fe48:	429c      	cmp	r4, r3
 800fe4a:	d11b      	bne.n	800fe84 <_fflush_r+0x58>
 800fe4c:	686c      	ldr	r4, [r5, #4]
 800fe4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d0ef      	beq.n	800fe36 <_fflush_r+0xa>
 800fe56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe58:	07d0      	lsls	r0, r2, #31
 800fe5a:	d404      	bmi.n	800fe66 <_fflush_r+0x3a>
 800fe5c:	0599      	lsls	r1, r3, #22
 800fe5e:	d402      	bmi.n	800fe66 <_fflush_r+0x3a>
 800fe60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe62:	f000 f915 	bl	8010090 <__retarget_lock_acquire_recursive>
 800fe66:	4628      	mov	r0, r5
 800fe68:	4621      	mov	r1, r4
 800fe6a:	f7ff ff59 	bl	800fd20 <__sflush_r>
 800fe6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe70:	07da      	lsls	r2, r3, #31
 800fe72:	4605      	mov	r5, r0
 800fe74:	d4e0      	bmi.n	800fe38 <_fflush_r+0xc>
 800fe76:	89a3      	ldrh	r3, [r4, #12]
 800fe78:	059b      	lsls	r3, r3, #22
 800fe7a:	d4dd      	bmi.n	800fe38 <_fflush_r+0xc>
 800fe7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe7e:	f000 f908 	bl	8010092 <__retarget_lock_release_recursive>
 800fe82:	e7d9      	b.n	800fe38 <_fflush_r+0xc>
 800fe84:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <_fflush_r+0x70>)
 800fe86:	429c      	cmp	r4, r3
 800fe88:	d101      	bne.n	800fe8e <_fflush_r+0x62>
 800fe8a:	68ac      	ldr	r4, [r5, #8]
 800fe8c:	e7df      	b.n	800fe4e <_fflush_r+0x22>
 800fe8e:	4b04      	ldr	r3, [pc, #16]	; (800fea0 <_fflush_r+0x74>)
 800fe90:	429c      	cmp	r4, r3
 800fe92:	bf08      	it	eq
 800fe94:	68ec      	ldreq	r4, [r5, #12]
 800fe96:	e7da      	b.n	800fe4e <_fflush_r+0x22>
 800fe98:	08010f18 	.word	0x08010f18
 800fe9c:	08010f38 	.word	0x08010f38
 800fea0:	08010ef8 	.word	0x08010ef8

0800fea4 <std>:
 800fea4:	2300      	movs	r3, #0
 800fea6:	b510      	push	{r4, lr}
 800fea8:	4604      	mov	r4, r0
 800feaa:	e9c0 3300 	strd	r3, r3, [r0]
 800feae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800feb2:	6083      	str	r3, [r0, #8]
 800feb4:	8181      	strh	r1, [r0, #12]
 800feb6:	6643      	str	r3, [r0, #100]	; 0x64
 800feb8:	81c2      	strh	r2, [r0, #14]
 800feba:	6183      	str	r3, [r0, #24]
 800febc:	4619      	mov	r1, r3
 800febe:	2208      	movs	r2, #8
 800fec0:	305c      	adds	r0, #92	; 0x5c
 800fec2:	f7fe ff85 	bl	800edd0 <memset>
 800fec6:	4b05      	ldr	r3, [pc, #20]	; (800fedc <std+0x38>)
 800fec8:	6263      	str	r3, [r4, #36]	; 0x24
 800feca:	4b05      	ldr	r3, [pc, #20]	; (800fee0 <std+0x3c>)
 800fecc:	62a3      	str	r3, [r4, #40]	; 0x28
 800fece:	4b05      	ldr	r3, [pc, #20]	; (800fee4 <std+0x40>)
 800fed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fed2:	4b05      	ldr	r3, [pc, #20]	; (800fee8 <std+0x44>)
 800fed4:	6224      	str	r4, [r4, #32]
 800fed6:	6323      	str	r3, [r4, #48]	; 0x30
 800fed8:	bd10      	pop	{r4, pc}
 800feda:	bf00      	nop
 800fedc:	080102b1 	.word	0x080102b1
 800fee0:	080102d3 	.word	0x080102d3
 800fee4:	0801030b 	.word	0x0801030b
 800fee8:	0801032f 	.word	0x0801032f

0800feec <_cleanup_r>:
 800feec:	4901      	ldr	r1, [pc, #4]	; (800fef4 <_cleanup_r+0x8>)
 800feee:	f000 b8af 	b.w	8010050 <_fwalk_reent>
 800fef2:	bf00      	nop
 800fef4:	0800fe2d 	.word	0x0800fe2d

0800fef8 <__sfmoreglue>:
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	2268      	movs	r2, #104	; 0x68
 800fefc:	1e4d      	subs	r5, r1, #1
 800fefe:	4355      	muls	r5, r2
 800ff00:	460e      	mov	r6, r1
 800ff02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff06:	f7ff f975 	bl	800f1f4 <_malloc_r>
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	b140      	cbz	r0, 800ff20 <__sfmoreglue+0x28>
 800ff0e:	2100      	movs	r1, #0
 800ff10:	e9c0 1600 	strd	r1, r6, [r0]
 800ff14:	300c      	adds	r0, #12
 800ff16:	60a0      	str	r0, [r4, #8]
 800ff18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff1c:	f7fe ff58 	bl	800edd0 <memset>
 800ff20:	4620      	mov	r0, r4
 800ff22:	bd70      	pop	{r4, r5, r6, pc}

0800ff24 <__sfp_lock_acquire>:
 800ff24:	4801      	ldr	r0, [pc, #4]	; (800ff2c <__sfp_lock_acquire+0x8>)
 800ff26:	f000 b8b3 	b.w	8010090 <__retarget_lock_acquire_recursive>
 800ff2a:	bf00      	nop
 800ff2c:	20003e89 	.word	0x20003e89

0800ff30 <__sfp_lock_release>:
 800ff30:	4801      	ldr	r0, [pc, #4]	; (800ff38 <__sfp_lock_release+0x8>)
 800ff32:	f000 b8ae 	b.w	8010092 <__retarget_lock_release_recursive>
 800ff36:	bf00      	nop
 800ff38:	20003e89 	.word	0x20003e89

0800ff3c <__sinit_lock_acquire>:
 800ff3c:	4801      	ldr	r0, [pc, #4]	; (800ff44 <__sinit_lock_acquire+0x8>)
 800ff3e:	f000 b8a7 	b.w	8010090 <__retarget_lock_acquire_recursive>
 800ff42:	bf00      	nop
 800ff44:	20003e8a 	.word	0x20003e8a

0800ff48 <__sinit_lock_release>:
 800ff48:	4801      	ldr	r0, [pc, #4]	; (800ff50 <__sinit_lock_release+0x8>)
 800ff4a:	f000 b8a2 	b.w	8010092 <__retarget_lock_release_recursive>
 800ff4e:	bf00      	nop
 800ff50:	20003e8a 	.word	0x20003e8a

0800ff54 <__sinit>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	f7ff fff0 	bl	800ff3c <__sinit_lock_acquire>
 800ff5c:	69a3      	ldr	r3, [r4, #24]
 800ff5e:	b11b      	cbz	r3, 800ff68 <__sinit+0x14>
 800ff60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff64:	f7ff bff0 	b.w	800ff48 <__sinit_lock_release>
 800ff68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff6c:	6523      	str	r3, [r4, #80]	; 0x50
 800ff6e:	4b13      	ldr	r3, [pc, #76]	; (800ffbc <__sinit+0x68>)
 800ff70:	4a13      	ldr	r2, [pc, #76]	; (800ffc0 <__sinit+0x6c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff76:	42a3      	cmp	r3, r4
 800ff78:	bf04      	itt	eq
 800ff7a:	2301      	moveq	r3, #1
 800ff7c:	61a3      	streq	r3, [r4, #24]
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f000 f820 	bl	800ffc4 <__sfp>
 800ff84:	6060      	str	r0, [r4, #4]
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 f81c 	bl	800ffc4 <__sfp>
 800ff8c:	60a0      	str	r0, [r4, #8]
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 f818 	bl	800ffc4 <__sfp>
 800ff94:	2200      	movs	r2, #0
 800ff96:	60e0      	str	r0, [r4, #12]
 800ff98:	2104      	movs	r1, #4
 800ff9a:	6860      	ldr	r0, [r4, #4]
 800ff9c:	f7ff ff82 	bl	800fea4 <std>
 800ffa0:	68a0      	ldr	r0, [r4, #8]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	2109      	movs	r1, #9
 800ffa6:	f7ff ff7d 	bl	800fea4 <std>
 800ffaa:	68e0      	ldr	r0, [r4, #12]
 800ffac:	2202      	movs	r2, #2
 800ffae:	2112      	movs	r1, #18
 800ffb0:	f7ff ff78 	bl	800fea4 <std>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	61a3      	str	r3, [r4, #24]
 800ffb8:	e7d2      	b.n	800ff60 <__sinit+0xc>
 800ffba:	bf00      	nop
 800ffbc:	08010ce8 	.word	0x08010ce8
 800ffc0:	0800feed 	.word	0x0800feed

0800ffc4 <__sfp>:
 800ffc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc6:	4607      	mov	r7, r0
 800ffc8:	f7ff ffac 	bl	800ff24 <__sfp_lock_acquire>
 800ffcc:	4b1e      	ldr	r3, [pc, #120]	; (8010048 <__sfp+0x84>)
 800ffce:	681e      	ldr	r6, [r3, #0]
 800ffd0:	69b3      	ldr	r3, [r6, #24]
 800ffd2:	b913      	cbnz	r3, 800ffda <__sfp+0x16>
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	f7ff ffbd 	bl	800ff54 <__sinit>
 800ffda:	3648      	adds	r6, #72	; 0x48
 800ffdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	d503      	bpl.n	800ffec <__sfp+0x28>
 800ffe4:	6833      	ldr	r3, [r6, #0]
 800ffe6:	b30b      	cbz	r3, 801002c <__sfp+0x68>
 800ffe8:	6836      	ldr	r6, [r6, #0]
 800ffea:	e7f7      	b.n	800ffdc <__sfp+0x18>
 800ffec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fff0:	b9d5      	cbnz	r5, 8010028 <__sfp+0x64>
 800fff2:	4b16      	ldr	r3, [pc, #88]	; (801004c <__sfp+0x88>)
 800fff4:	60e3      	str	r3, [r4, #12]
 800fff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fffa:	6665      	str	r5, [r4, #100]	; 0x64
 800fffc:	f000 f847 	bl	801008e <__retarget_lock_init_recursive>
 8010000:	f7ff ff96 	bl	800ff30 <__sfp_lock_release>
 8010004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801000c:	6025      	str	r5, [r4, #0]
 801000e:	61a5      	str	r5, [r4, #24]
 8010010:	2208      	movs	r2, #8
 8010012:	4629      	mov	r1, r5
 8010014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010018:	f7fe feda 	bl	800edd0 <memset>
 801001c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010024:	4620      	mov	r0, r4
 8010026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010028:	3468      	adds	r4, #104	; 0x68
 801002a:	e7d9      	b.n	800ffe0 <__sfp+0x1c>
 801002c:	2104      	movs	r1, #4
 801002e:	4638      	mov	r0, r7
 8010030:	f7ff ff62 	bl	800fef8 <__sfmoreglue>
 8010034:	4604      	mov	r4, r0
 8010036:	6030      	str	r0, [r6, #0]
 8010038:	2800      	cmp	r0, #0
 801003a:	d1d5      	bne.n	800ffe8 <__sfp+0x24>
 801003c:	f7ff ff78 	bl	800ff30 <__sfp_lock_release>
 8010040:	230c      	movs	r3, #12
 8010042:	603b      	str	r3, [r7, #0]
 8010044:	e7ee      	b.n	8010024 <__sfp+0x60>
 8010046:	bf00      	nop
 8010048:	08010ce8 	.word	0x08010ce8
 801004c:	ffff0001 	.word	0xffff0001

08010050 <_fwalk_reent>:
 8010050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010054:	4606      	mov	r6, r0
 8010056:	4688      	mov	r8, r1
 8010058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801005c:	2700      	movs	r7, #0
 801005e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010062:	f1b9 0901 	subs.w	r9, r9, #1
 8010066:	d505      	bpl.n	8010074 <_fwalk_reent+0x24>
 8010068:	6824      	ldr	r4, [r4, #0]
 801006a:	2c00      	cmp	r4, #0
 801006c:	d1f7      	bne.n	801005e <_fwalk_reent+0xe>
 801006e:	4638      	mov	r0, r7
 8010070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010074:	89ab      	ldrh	r3, [r5, #12]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d907      	bls.n	801008a <_fwalk_reent+0x3a>
 801007a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801007e:	3301      	adds	r3, #1
 8010080:	d003      	beq.n	801008a <_fwalk_reent+0x3a>
 8010082:	4629      	mov	r1, r5
 8010084:	4630      	mov	r0, r6
 8010086:	47c0      	blx	r8
 8010088:	4307      	orrs	r7, r0
 801008a:	3568      	adds	r5, #104	; 0x68
 801008c:	e7e9      	b.n	8010062 <_fwalk_reent+0x12>

0801008e <__retarget_lock_init_recursive>:
 801008e:	4770      	bx	lr

08010090 <__retarget_lock_acquire_recursive>:
 8010090:	4770      	bx	lr

08010092 <__retarget_lock_release_recursive>:
 8010092:	4770      	bx	lr

08010094 <__swhatbuf_r>:
 8010094:	b570      	push	{r4, r5, r6, lr}
 8010096:	460e      	mov	r6, r1
 8010098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801009c:	2900      	cmp	r1, #0
 801009e:	b096      	sub	sp, #88	; 0x58
 80100a0:	4614      	mov	r4, r2
 80100a2:	461d      	mov	r5, r3
 80100a4:	da08      	bge.n	80100b8 <__swhatbuf_r+0x24>
 80100a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	602a      	str	r2, [r5, #0]
 80100ae:	061a      	lsls	r2, r3, #24
 80100b0:	d410      	bmi.n	80100d4 <__swhatbuf_r+0x40>
 80100b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100b6:	e00e      	b.n	80100d6 <__swhatbuf_r+0x42>
 80100b8:	466a      	mov	r2, sp
 80100ba:	f000 f95f 	bl	801037c <_fstat_r>
 80100be:	2800      	cmp	r0, #0
 80100c0:	dbf1      	blt.n	80100a6 <__swhatbuf_r+0x12>
 80100c2:	9a01      	ldr	r2, [sp, #4]
 80100c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100cc:	425a      	negs	r2, r3
 80100ce:	415a      	adcs	r2, r3
 80100d0:	602a      	str	r2, [r5, #0]
 80100d2:	e7ee      	b.n	80100b2 <__swhatbuf_r+0x1e>
 80100d4:	2340      	movs	r3, #64	; 0x40
 80100d6:	2000      	movs	r0, #0
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	b016      	add	sp, #88	; 0x58
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080100e0 <__smakebuf_r>:
 80100e0:	898b      	ldrh	r3, [r1, #12]
 80100e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100e4:	079d      	lsls	r5, r3, #30
 80100e6:	4606      	mov	r6, r0
 80100e8:	460c      	mov	r4, r1
 80100ea:	d507      	bpl.n	80100fc <__smakebuf_r+0x1c>
 80100ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	6123      	str	r3, [r4, #16]
 80100f4:	2301      	movs	r3, #1
 80100f6:	6163      	str	r3, [r4, #20]
 80100f8:	b002      	add	sp, #8
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	ab01      	add	r3, sp, #4
 80100fe:	466a      	mov	r2, sp
 8010100:	f7ff ffc8 	bl	8010094 <__swhatbuf_r>
 8010104:	9900      	ldr	r1, [sp, #0]
 8010106:	4605      	mov	r5, r0
 8010108:	4630      	mov	r0, r6
 801010a:	f7ff f873 	bl	800f1f4 <_malloc_r>
 801010e:	b948      	cbnz	r0, 8010124 <__smakebuf_r+0x44>
 8010110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010114:	059a      	lsls	r2, r3, #22
 8010116:	d4ef      	bmi.n	80100f8 <__smakebuf_r+0x18>
 8010118:	f023 0303 	bic.w	r3, r3, #3
 801011c:	f043 0302 	orr.w	r3, r3, #2
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	e7e3      	b.n	80100ec <__smakebuf_r+0xc>
 8010124:	4b0d      	ldr	r3, [pc, #52]	; (801015c <__smakebuf_r+0x7c>)
 8010126:	62b3      	str	r3, [r6, #40]	; 0x28
 8010128:	89a3      	ldrh	r3, [r4, #12]
 801012a:	6020      	str	r0, [r4, #0]
 801012c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010130:	81a3      	strh	r3, [r4, #12]
 8010132:	9b00      	ldr	r3, [sp, #0]
 8010134:	6163      	str	r3, [r4, #20]
 8010136:	9b01      	ldr	r3, [sp, #4]
 8010138:	6120      	str	r0, [r4, #16]
 801013a:	b15b      	cbz	r3, 8010154 <__smakebuf_r+0x74>
 801013c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010140:	4630      	mov	r0, r6
 8010142:	f000 f92d 	bl	80103a0 <_isatty_r>
 8010146:	b128      	cbz	r0, 8010154 <__smakebuf_r+0x74>
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f023 0303 	bic.w	r3, r3, #3
 801014e:	f043 0301 	orr.w	r3, r3, #1
 8010152:	81a3      	strh	r3, [r4, #12]
 8010154:	89a0      	ldrh	r0, [r4, #12]
 8010156:	4305      	orrs	r5, r0
 8010158:	81a5      	strh	r5, [r4, #12]
 801015a:	e7cd      	b.n	80100f8 <__smakebuf_r+0x18>
 801015c:	0800feed 	.word	0x0800feed

08010160 <memcpy>:
 8010160:	440a      	add	r2, r1
 8010162:	4291      	cmp	r1, r2
 8010164:	f100 33ff 	add.w	r3, r0, #4294967295
 8010168:	d100      	bne.n	801016c <memcpy+0xc>
 801016a:	4770      	bx	lr
 801016c:	b510      	push	{r4, lr}
 801016e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010176:	4291      	cmp	r1, r2
 8010178:	d1f9      	bne.n	801016e <memcpy+0xe>
 801017a:	bd10      	pop	{r4, pc}

0801017c <memmove>:
 801017c:	4288      	cmp	r0, r1
 801017e:	b510      	push	{r4, lr}
 8010180:	eb01 0402 	add.w	r4, r1, r2
 8010184:	d902      	bls.n	801018c <memmove+0x10>
 8010186:	4284      	cmp	r4, r0
 8010188:	4623      	mov	r3, r4
 801018a:	d807      	bhi.n	801019c <memmove+0x20>
 801018c:	1e43      	subs	r3, r0, #1
 801018e:	42a1      	cmp	r1, r4
 8010190:	d008      	beq.n	80101a4 <memmove+0x28>
 8010192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010196:	f803 2f01 	strb.w	r2, [r3, #1]!
 801019a:	e7f8      	b.n	801018e <memmove+0x12>
 801019c:	4402      	add	r2, r0
 801019e:	4601      	mov	r1, r0
 80101a0:	428a      	cmp	r2, r1
 80101a2:	d100      	bne.n	80101a6 <memmove+0x2a>
 80101a4:	bd10      	pop	{r4, pc}
 80101a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101ae:	e7f7      	b.n	80101a0 <memmove+0x24>

080101b0 <__malloc_lock>:
 80101b0:	4801      	ldr	r0, [pc, #4]	; (80101b8 <__malloc_lock+0x8>)
 80101b2:	f7ff bf6d 	b.w	8010090 <__retarget_lock_acquire_recursive>
 80101b6:	bf00      	nop
 80101b8:	20003e88 	.word	0x20003e88

080101bc <__malloc_unlock>:
 80101bc:	4801      	ldr	r0, [pc, #4]	; (80101c4 <__malloc_unlock+0x8>)
 80101be:	f7ff bf68 	b.w	8010092 <__retarget_lock_release_recursive>
 80101c2:	bf00      	nop
 80101c4:	20003e88 	.word	0x20003e88

080101c8 <_realloc_r>:
 80101c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101cc:	4680      	mov	r8, r0
 80101ce:	4614      	mov	r4, r2
 80101d0:	460e      	mov	r6, r1
 80101d2:	b921      	cbnz	r1, 80101de <_realloc_r+0x16>
 80101d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101d8:	4611      	mov	r1, r2
 80101da:	f7ff b80b 	b.w	800f1f4 <_malloc_r>
 80101de:	b92a      	cbnz	r2, 80101ec <_realloc_r+0x24>
 80101e0:	f7fe ff9c 	bl	800f11c <_free_r>
 80101e4:	4625      	mov	r5, r4
 80101e6:	4628      	mov	r0, r5
 80101e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ec:	f000 f8fa 	bl	80103e4 <_malloc_usable_size_r>
 80101f0:	4284      	cmp	r4, r0
 80101f2:	4607      	mov	r7, r0
 80101f4:	d802      	bhi.n	80101fc <_realloc_r+0x34>
 80101f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101fa:	d812      	bhi.n	8010222 <_realloc_r+0x5a>
 80101fc:	4621      	mov	r1, r4
 80101fe:	4640      	mov	r0, r8
 8010200:	f7fe fff8 	bl	800f1f4 <_malloc_r>
 8010204:	4605      	mov	r5, r0
 8010206:	2800      	cmp	r0, #0
 8010208:	d0ed      	beq.n	80101e6 <_realloc_r+0x1e>
 801020a:	42bc      	cmp	r4, r7
 801020c:	4622      	mov	r2, r4
 801020e:	4631      	mov	r1, r6
 8010210:	bf28      	it	cs
 8010212:	463a      	movcs	r2, r7
 8010214:	f7ff ffa4 	bl	8010160 <memcpy>
 8010218:	4631      	mov	r1, r6
 801021a:	4640      	mov	r0, r8
 801021c:	f7fe ff7e 	bl	800f11c <_free_r>
 8010220:	e7e1      	b.n	80101e6 <_realloc_r+0x1e>
 8010222:	4635      	mov	r5, r6
 8010224:	e7df      	b.n	80101e6 <_realloc_r+0x1e>

08010226 <_raise_r>:
 8010226:	291f      	cmp	r1, #31
 8010228:	b538      	push	{r3, r4, r5, lr}
 801022a:	4604      	mov	r4, r0
 801022c:	460d      	mov	r5, r1
 801022e:	d904      	bls.n	801023a <_raise_r+0x14>
 8010230:	2316      	movs	r3, #22
 8010232:	6003      	str	r3, [r0, #0]
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	bd38      	pop	{r3, r4, r5, pc}
 801023a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801023c:	b112      	cbz	r2, 8010244 <_raise_r+0x1e>
 801023e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010242:	b94b      	cbnz	r3, 8010258 <_raise_r+0x32>
 8010244:	4620      	mov	r0, r4
 8010246:	f000 f831 	bl	80102ac <_getpid_r>
 801024a:	462a      	mov	r2, r5
 801024c:	4601      	mov	r1, r0
 801024e:	4620      	mov	r0, r4
 8010250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010254:	f000 b818 	b.w	8010288 <_kill_r>
 8010258:	2b01      	cmp	r3, #1
 801025a:	d00a      	beq.n	8010272 <_raise_r+0x4c>
 801025c:	1c59      	adds	r1, r3, #1
 801025e:	d103      	bne.n	8010268 <_raise_r+0x42>
 8010260:	2316      	movs	r3, #22
 8010262:	6003      	str	r3, [r0, #0]
 8010264:	2001      	movs	r0, #1
 8010266:	e7e7      	b.n	8010238 <_raise_r+0x12>
 8010268:	2400      	movs	r4, #0
 801026a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801026e:	4628      	mov	r0, r5
 8010270:	4798      	blx	r3
 8010272:	2000      	movs	r0, #0
 8010274:	e7e0      	b.n	8010238 <_raise_r+0x12>
	...

08010278 <raise>:
 8010278:	4b02      	ldr	r3, [pc, #8]	; (8010284 <raise+0xc>)
 801027a:	4601      	mov	r1, r0
 801027c:	6818      	ldr	r0, [r3, #0]
 801027e:	f7ff bfd2 	b.w	8010226 <_raise_r>
 8010282:	bf00      	nop
 8010284:	2000013c 	.word	0x2000013c

08010288 <_kill_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d07      	ldr	r5, [pc, #28]	; (80102a8 <_kill_r+0x20>)
 801028c:	2300      	movs	r3, #0
 801028e:	4604      	mov	r4, r0
 8010290:	4608      	mov	r0, r1
 8010292:	4611      	mov	r1, r2
 8010294:	602b      	str	r3, [r5, #0]
 8010296:	f7f2 fb41 	bl	800291c <_kill>
 801029a:	1c43      	adds	r3, r0, #1
 801029c:	d102      	bne.n	80102a4 <_kill_r+0x1c>
 801029e:	682b      	ldr	r3, [r5, #0]
 80102a0:	b103      	cbz	r3, 80102a4 <_kill_r+0x1c>
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	bf00      	nop
 80102a8:	20003e8c 	.word	0x20003e8c

080102ac <_getpid_r>:
 80102ac:	f7f2 bb2e 	b.w	800290c <_getpid>

080102b0 <__sread>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	f000 f89c 	bl	80103f4 <_read_r>
 80102bc:	2800      	cmp	r0, #0
 80102be:	bfab      	itete	ge
 80102c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102c2:	89a3      	ldrhlt	r3, [r4, #12]
 80102c4:	181b      	addge	r3, r3, r0
 80102c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102ca:	bfac      	ite	ge
 80102cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80102ce:	81a3      	strhlt	r3, [r4, #12]
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <__swrite>:
 80102d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d6:	461f      	mov	r7, r3
 80102d8:	898b      	ldrh	r3, [r1, #12]
 80102da:	05db      	lsls	r3, r3, #23
 80102dc:	4605      	mov	r5, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	4616      	mov	r6, r2
 80102e2:	d505      	bpl.n	80102f0 <__swrite+0x1e>
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	2302      	movs	r3, #2
 80102ea:	2200      	movs	r2, #0
 80102ec:	f000 f868 	bl	80103c0 <_lseek_r>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	4632      	mov	r2, r6
 80102fe:	463b      	mov	r3, r7
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010306:	f000 b817 	b.w	8010338 <_write_r>

0801030a <__sseek>:
 801030a:	b510      	push	{r4, lr}
 801030c:	460c      	mov	r4, r1
 801030e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010312:	f000 f855 	bl	80103c0 <_lseek_r>
 8010316:	1c43      	adds	r3, r0, #1
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	bf15      	itete	ne
 801031c:	6560      	strne	r0, [r4, #84]	; 0x54
 801031e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010326:	81a3      	strheq	r3, [r4, #12]
 8010328:	bf18      	it	ne
 801032a:	81a3      	strhne	r3, [r4, #12]
 801032c:	bd10      	pop	{r4, pc}

0801032e <__sclose>:
 801032e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010332:	f000 b813 	b.w	801035c <_close_r>
	...

08010338 <_write_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d07      	ldr	r5, [pc, #28]	; (8010358 <_write_r+0x20>)
 801033c:	4604      	mov	r4, r0
 801033e:	4608      	mov	r0, r1
 8010340:	4611      	mov	r1, r2
 8010342:	2200      	movs	r2, #0
 8010344:	602a      	str	r2, [r5, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	f7f2 fb1f 	bl	800298a <_write>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_write_r+0x1e>
 8010350:	682b      	ldr	r3, [r5, #0]
 8010352:	b103      	cbz	r3, 8010356 <_write_r+0x1e>
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	20003e8c 	.word	0x20003e8c

0801035c <_close_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d06      	ldr	r5, [pc, #24]	; (8010378 <_close_r+0x1c>)
 8010360:	2300      	movs	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	4608      	mov	r0, r1
 8010366:	602b      	str	r3, [r5, #0]
 8010368:	f7f2 fb2b 	bl	80029c2 <_close>
 801036c:	1c43      	adds	r3, r0, #1
 801036e:	d102      	bne.n	8010376 <_close_r+0x1a>
 8010370:	682b      	ldr	r3, [r5, #0]
 8010372:	b103      	cbz	r3, 8010376 <_close_r+0x1a>
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	bd38      	pop	{r3, r4, r5, pc}
 8010378:	20003e8c 	.word	0x20003e8c

0801037c <_fstat_r>:
 801037c:	b538      	push	{r3, r4, r5, lr}
 801037e:	4d07      	ldr	r5, [pc, #28]	; (801039c <_fstat_r+0x20>)
 8010380:	2300      	movs	r3, #0
 8010382:	4604      	mov	r4, r0
 8010384:	4608      	mov	r0, r1
 8010386:	4611      	mov	r1, r2
 8010388:	602b      	str	r3, [r5, #0]
 801038a:	f7f2 fb26 	bl	80029da <_fstat>
 801038e:	1c43      	adds	r3, r0, #1
 8010390:	d102      	bne.n	8010398 <_fstat_r+0x1c>
 8010392:	682b      	ldr	r3, [r5, #0]
 8010394:	b103      	cbz	r3, 8010398 <_fstat_r+0x1c>
 8010396:	6023      	str	r3, [r4, #0]
 8010398:	bd38      	pop	{r3, r4, r5, pc}
 801039a:	bf00      	nop
 801039c:	20003e8c 	.word	0x20003e8c

080103a0 <_isatty_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	4d06      	ldr	r5, [pc, #24]	; (80103bc <_isatty_r+0x1c>)
 80103a4:	2300      	movs	r3, #0
 80103a6:	4604      	mov	r4, r0
 80103a8:	4608      	mov	r0, r1
 80103aa:	602b      	str	r3, [r5, #0]
 80103ac:	f7f2 fb25 	bl	80029fa <_isatty>
 80103b0:	1c43      	adds	r3, r0, #1
 80103b2:	d102      	bne.n	80103ba <_isatty_r+0x1a>
 80103b4:	682b      	ldr	r3, [r5, #0]
 80103b6:	b103      	cbz	r3, 80103ba <_isatty_r+0x1a>
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	bd38      	pop	{r3, r4, r5, pc}
 80103bc:	20003e8c 	.word	0x20003e8c

080103c0 <_lseek_r>:
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	4d07      	ldr	r5, [pc, #28]	; (80103e0 <_lseek_r+0x20>)
 80103c4:	4604      	mov	r4, r0
 80103c6:	4608      	mov	r0, r1
 80103c8:	4611      	mov	r1, r2
 80103ca:	2200      	movs	r2, #0
 80103cc:	602a      	str	r2, [r5, #0]
 80103ce:	461a      	mov	r2, r3
 80103d0:	f7f2 fb1e 	bl	8002a10 <_lseek>
 80103d4:	1c43      	adds	r3, r0, #1
 80103d6:	d102      	bne.n	80103de <_lseek_r+0x1e>
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	b103      	cbz	r3, 80103de <_lseek_r+0x1e>
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	bd38      	pop	{r3, r4, r5, pc}
 80103e0:	20003e8c 	.word	0x20003e8c

080103e4 <_malloc_usable_size_r>:
 80103e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103e8:	1f18      	subs	r0, r3, #4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	bfbc      	itt	lt
 80103ee:	580b      	ldrlt	r3, [r1, r0]
 80103f0:	18c0      	addlt	r0, r0, r3
 80103f2:	4770      	bx	lr

080103f4 <_read_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	; (8010414 <_read_r+0x20>)
 80103f8:	4604      	mov	r4, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f2 faa4 	bl	8002950 <_read>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_read_r+0x1e>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_read_r+0x1e>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20003e8c 	.word	0x20003e8c

08010418 <_init>:
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	bf00      	nop
 801041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041e:	bc08      	pop	{r3}
 8010420:	469e      	mov	lr, r3
 8010422:	4770      	bx	lr

08010424 <_fini>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	bf00      	nop
 8010428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042a:	bc08      	pop	{r3}
 801042c:	469e      	mov	lr, r3
 801042e:	4770      	bx	lr
