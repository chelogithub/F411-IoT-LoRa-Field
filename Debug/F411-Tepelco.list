
F411-Tepelco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010058  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  080101f8  080101f8  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d04  08010d04  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010d04  08010d04  00020d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d0c  08010d0c  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d0c  08010d0c  00020d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d10  08010d10  00020d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08010d14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b64  200001a0  08010eb4  000301a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d04  08010eb4  00033d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162c6  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1b  00000000  00000000  00046496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000492b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0004a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001885b  00000000  00000000  0004b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017869  00000000  00000000  00063d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935b6  00000000  00000000  0007b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ebaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  0010ebfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080101e0 	.word	0x080101e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	080101e0 	.word	0x080101e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db0a      	blt.n	80005de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <__NVIC_SetPriority+0x4c>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005dc:	e00a      	b.n	80005f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <__NVIC_SetPriority+0x50>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	3b04      	subs	r3, #4
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	b2d2      	uxtb	r2, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	761a      	strb	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000618:	d301      	bcc.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e00f      	b.n	800063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <SysTick_Config+0x40>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b01      	subs	r3, #1
 8000624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	210f      	movs	r1, #15
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f7ff ffc2 	bl	80005b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SysTick_Config+0x40>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <SysTick_Config+0x40>)
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010

0800064c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800066c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00b      	beq.n	800068c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000674:	e000      	b.n	8000678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000676:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a0:	b094      	sub	sp, #80	; 0x50
 80006a2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80006a4:	4bce      	ldr	r3, [pc, #824]	; (80009e0 <main+0x344>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22c0      	movs	r2, #192	; 0xc0
 80006ac:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006ae:	4bcc      	ldr	r3, [pc, #816]	; (80009e0 <main+0x344>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	22a8      	movs	r2, #168	; 0xa8
 80006b6:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b8:	4bc9      	ldr	r3, [pc, #804]	; (80009e0 <main+0x344>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2200      	movs	r2, #0
 80006c0:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006c2:	4bc7      	ldr	r3, [pc, #796]	; (80009e0 <main+0x344>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	2201      	movs	r2, #1
 80006ca:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc4      	ldr	r3, [pc, #784]	; (80009e0 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d8:	4bc1      	ldr	r3, [pc, #772]	; (80009e0 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006e4:	4bbe      	ldr	r3, [pc, #760]	; (80009e0 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006f0:	4bbb      	ldr	r3, [pc, #748]	; (80009e0 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb8      	ldr	r3, [pc, #736]	; (80009e0 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000708:	4bb5      	ldr	r3, [pc, #724]	; (80009e0 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 8000714:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000720:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 800072c:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000738:	4ba9      	ldr	r3, [pc, #676]	; (80009e0 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000750:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 800075c:	4ba0      	ldr	r3, [pc, #640]	; (80009e0 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000768:	4b9d      	ldr	r3, [pc, #628]	; (80009e0 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2206      	movs	r2, #6
 8000770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000780:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 800078c:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000798:	4b91      	ldr	r3, [pc, #580]	; (80009e0 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 80007a4:	4b8e      	ldr	r3, [pc, #568]	; (80009e0 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007b0:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007bc:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c8:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007d4:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007e0:	4b7f      	ldr	r3, [pc, #508]	; (80009e0 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007ec:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007fa:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <main+0x344>)
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000804:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000808:	4b75      	ldr	r3, [pc, #468]	; (80009e0 <main+0x344>)
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000812:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <main+0x344>)
 8000818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 8000824:	4b6e      	ldr	r3, [pc, #440]	; (80009e0 <main+0x344>)
 8000826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000832:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <main+0x344>)
 8000834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000838:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000840:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <main+0x344>)
 8000842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000846:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800084a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <main+0x344>)
 8000850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000854:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 800085c:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <main+0x344>)
 800085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <main+0x344>)
 800086c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000870:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000874:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000878:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <main+0x344>)
 800087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 8000886:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <main+0x344>)
 8000888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <main+0x344>)
 8000896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <main+0x344>)
 80008a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <main+0x344>)
 80008b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b6:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008be:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <main+0x344>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <main+0x344>)
 80008ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <main+0x348>)
 80008da:	f005 ff5d 	bl	8006798 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008de:	4942      	ldr	r1, [pc, #264]	; (80009e8 <main+0x34c>)
 80008e0:	4840      	ldr	r0, [pc, #256]	; (80009e4 <main+0x348>)
 80008e2:	f00e f981 	bl	800ebe8 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008e6:	4941      	ldr	r1, [pc, #260]	; (80009ec <main+0x350>)
 80008e8:	4841      	ldr	r0, [pc, #260]	; (80009f0 <main+0x354>)
 80008ea:	f00e f97d 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008ee:	4941      	ldr	r1, [pc, #260]	; (80009f4 <main+0x358>)
 80008f0:	4841      	ldr	r0, [pc, #260]	; (80009f8 <main+0x35c>)
 80008f2:	f00e f979 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008f6:	4941      	ldr	r1, [pc, #260]	; (80009fc <main+0x360>)
 80008f8:	4841      	ldr	r0, [pc, #260]	; (8000a00 <main+0x364>)
 80008fa:	f00e f975 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80008fe:	4941      	ldr	r1, [pc, #260]	; (8000a04 <main+0x368>)
 8000900:	4841      	ldr	r0, [pc, #260]	; (8000a08 <main+0x36c>)
 8000902:	f00e f971 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000906:	4941      	ldr	r1, [pc, #260]	; (8000a0c <main+0x370>)
 8000908:	4841      	ldr	r0, [pc, #260]	; (8000a10 <main+0x374>)
 800090a:	f00e f96d 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800090e:	4941      	ldr	r1, [pc, #260]	; (8000a14 <main+0x378>)
 8000910:	4841      	ldr	r0, [pc, #260]	; (8000a18 <main+0x37c>)
 8000912:	f00e f969 	bl	800ebe8 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000916:	4941      	ldr	r1, [pc, #260]	; (8000a1c <main+0x380>)
 8000918:	4841      	ldr	r0, [pc, #260]	; (8000a20 <main+0x384>)
 800091a:	f00e f965 	bl	800ebe8 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <main+0x348>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <main+0x348>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
		wf._data2SND[1]=0x00;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <main+0x348>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
		wf._data2SND[2]=0x00;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0x348>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		wf._data2SND[3]=0x00;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <main+0x348>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
		wf._data2SND[4]=0x00;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <main+0x348>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		wf._data2SND[5]=0x06;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x348>)
 8000950:	2206      	movs	r2, #6
 8000952:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
		wf._data2SND[6]=0x01;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <main+0x348>)
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
		wf._data2SND[7]=0x03;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <main+0x348>)
 8000960:	2203      	movs	r2, #3
 8000962:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <main+0x348>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[9]=0x00;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <main+0x348>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[10]=0x00;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <main+0x348>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[11]=0x0A;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <main+0x348>)
 8000980:	220a      	movs	r2, #10
 8000982:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[12]=0x00;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <main+0x348>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[13]=0x33;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <main+0x348>)
 8000990:	2233      	movs	r2, #51	; 0x33
 8000992:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[14]=0x34;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <main+0x348>)
 8000998:	2234      	movs	r2, #52	; 0x34
 800099a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[15]=0x35;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <main+0x348>)
 80009a0:	2235      	movs	r2, #53	; 0x35
 80009a2:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._n_D2SND=12;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <main+0x348>)
 80009a8:	220c      	movs	r2, #12
 80009aa:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <main+0x348>)
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <main+0x348>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		wf._DBG_EN=1;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <main+0x348>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x388>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x344>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0x38c>)
 80009d0:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <main+0x344>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <main+0x344>)
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <main+0x390>)
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e027      	b.n	8000a30 <main+0x394>
 80009e0:	200025e0 	.word	0x200025e0
 80009e4:	200009fc 	.word	0x200009fc
 80009e8:	20000024 	.word	0x20000024
 80009ec:	2000002c 	.word	0x2000002c
 80009f0:	20000a1c 	.word	0x20000a1c
 80009f4:	20000038 	.word	0x20000038
 80009f8:	20000a2c 	.word	0x20000a2c
 80009fc:	20000048 	.word	0x20000048
 8000a00:	20000a3c 	.word	0x20000a3c
 8000a04:	20000050 	.word	0x20000050
 8000a08:	20000a42 	.word	0x20000a42
 8000a0c:	20000060 	.word	0x20000060
 8000a10:	20000a58 	.word	0x20000a58
 8000a14:	20000070 	.word	0x20000070
 8000a18:	20000a68 	.word	0x20000a68
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000a52 	.word	0x20000a52
 8000a24:	20003690 	.word	0x20003690
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	200001bc 	.word	0x200001bc

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <main+0x4d0>)
 8000a32:	f00b fd03 	bl	800c43c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <main+0x4d0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a3c:	484c      	ldr	r0, [pc, #304]	; (8000b70 <main+0x4d4>)
 8000a3e:	f00b fcfd 	bl	800c43c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a42:	4b4b      	ldr	r3, [pc, #300]	; (8000b70 <main+0x4d4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a48:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4848      	ldr	r0, [pc, #288]	; (8000b70 <main+0x4d4>)
 8000a50:	f00b fd97 	bl	800c582 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f002 f838 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 fac4 	bl	8000fe4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <main+0x4d8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <main+0x4dc>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	099b      	lsrs	r3, r3, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdcd 	bl	8000608 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fccb 	bl	8001408 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a72:	f000 fb1f 	bl	80010b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a76:	f000 fc49 	bl	800130c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fc71 	bl	8001360 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a7e:	f000 fc99 	bl	80013b4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a82:	f000 fb4d 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a86:	f000 fbc5 	bl	8001214 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	483b      	ldr	r0, [pc, #236]	; (8000b7c <main+0x4e0>)
 8000a90:	f002 fcee 	bl	8003470 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a94:	210e      	movs	r1, #14
 8000a96:	483a      	ldr	r0, [pc, #232]	; (8000b80 <main+0x4e4>)
 8000a98:	f000 fd3e 	bl	8001518 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000a9c:	f001 fc2e 	bl	80022fc <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <main+0x4e8>)
 8000aa2:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <main+0x416>
 8000aaa:	2113      	movs	r1, #19
 8000aac:	4836      	ldr	r0, [pc, #216]	; (8000b88 <main+0x4ec>)
 8000aae:	f000 fd33 	bl	8001518 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4935      	ldr	r1, [pc, #212]	; (8000b8c <main+0x4f0>)
 8000ab6:	4836      	ldr	r0, [pc, #216]	; (8000b90 <main+0x4f4>)
 8000ab8:	f004 fe03 	bl	80056c2 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	4935      	ldr	r1, [pc, #212]	; (8000b94 <main+0x4f8>)
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <main+0x4fc>)
 8000ac2:	f004 fdfe 	bl	80056c2 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <main+0x500>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <main+0x43a>
 8000ace:	2112      	movs	r1, #18
 8000ad0:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <main+0x504>)
 8000ad2:	f000 fd21 	bl	8001518 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <main+0x508>)
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <main+0x508>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <main+0x508>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <main+0x508>)
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	75da      	strb	r2, [r3, #23]

   	 eth_init(&ETH);
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <main+0x508>)
 8000af0:	f00d f974 	bl	800dddc <eth_init>

   	 eth_socket_init(&ETH,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <main+0x508>)
 8000af8:	f00d f9ea 	bl	800ded0 <eth_socket_init>

   SPI_READ_EN=1;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <main+0x50c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
   ETH.operacion=SPI_READ;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <main+0x508>)
 8000b04:	220f      	movs	r2, #15
 8000b06:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <main+0x508>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <main+0x508>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <main+0x508>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b1a:	481d      	ldr	r0, [pc, #116]	; (8000b90 <main+0x4f4>)
 8000b1c:	f001 fc16 	bl	800234c <ESP8266_HW_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10c      	bne.n	8000b40 <main+0x4a4>
     {
   	  ESP_HW_Init=1;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <main+0x510>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <main+0x4e8>)
 8000b2e:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d04a      	beq.n	8000bcc <main+0x530>
 8000b36:	2113      	movs	r1, #19
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <main+0x514>)
 8000b3a:	f000 fced 	bl	8001518 <ITM0_Write>
 8000b3e:	e045      	b.n	8000bcc <main+0x530>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b40:	f001 fbdc 	bl	80022fc <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <main+0x4f4>)
 8000b46:	f001 fc01 	bl	800234c <ESP8266_HW_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d131      	bne.n	8000bb4 <main+0x518>
   	  {
   		  ESP_HW_Init=1;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <main+0x510>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0x4e8>)
 8000b58:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d035      	beq.n	8000bcc <main+0x530>
 8000b60:	2113      	movs	r1, #19
 8000b62:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <main+0x514>)
 8000b64:	f000 fcd8 	bl	8001518 <ITM0_Write>
 8000b68:	e030      	b.n	8000bcc <main+0x530>
 8000b6a:	bf00      	nop
 8000b6c:	20001740 	.word	0x20001740
 8000b70:	20001c8c 	.word	0x20001c8c
 8000b74:	20000084 	.word	0x20000084
 8000b78:	10624dd3 	.word	0x10624dd3
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	080101f8 	.word	0x080101f8
 8000b84:	200009fc 	.word	0x200009fc
 8000b88:	08010208 	.word	0x08010208
 8000b8c:	20003ca8 	.word	0x20003ca8
 8000b90:	200002a4 	.word	0x200002a4
 8000b94:	20003cac 	.word	0x20003cac
 8000b98:	200002e8 	.word	0x200002e8
 8000b9c:	200025d8 	.word	0x200025d8
 8000ba0:	0801021c 	.word	0x0801021c
 8000ba4:	200025e0 	.word	0x200025e0
 8000ba8:	200036a0 	.word	0x200036a0
 8000bac:	20003693 	.word	0x20003693
 8000bb0:	08010230 	.word	0x08010230
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb4:	4bab      	ldr	r3, [pc, #684]	; (8000e64 <main+0x7c8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bba:	4bab      	ldr	r3, [pc, #684]	; (8000e68 <main+0x7cc>)
 8000bbc:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <main+0x530>
 8000bc4:	2115      	movs	r1, #21
 8000bc6:	48a9      	ldr	r0, [pc, #676]	; (8000e6c <main+0x7d0>)
 8000bc8:	f000 fca6 	bl	8001518 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd0:	f001 ffec 	bl	8002bac <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bd4:	4ba3      	ldr	r3, [pc, #652]	; (8000e64 <main+0x7c8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 809d 	bne.w	8000d18 <main+0x67c>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S0_data_available))
 8000bde:	4ba4      	ldr	r3, [pc, #656]	; (8000e70 <main+0x7d4>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	f040 8098 	bne.w	8000d18 <main+0x67c>
 8000be8:	4b9f      	ldr	r3, [pc, #636]	; (8000e68 <main+0x7cc>)
 8000bea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8092 	bne.w	8000d18 <main+0x67c>
 8000bf4:	4b9c      	ldr	r3, [pc, #624]	; (8000e68 <main+0x7cc>)
 8000bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bfa:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bfe:	f340 808b 	ble.w	8000d18 <main+0x67c>
 8000c02:	4b9c      	ldr	r3, [pc, #624]	; (8000e74 <main+0x7d8>)
 8000c04:	7c9b      	ldrb	r3, [r3, #18]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8086 	beq.w	8000d18 <main+0x67c>
	  			{	ETH.S0_data_available=0;
 8000c0c:	4b99      	ldr	r3, [pc, #612]	; (8000e74 <main+0x7d8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	749a      	strb	r2, [r3, #18]
	  				wf_snd_flag_ticks=0;
 8000c12:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <main+0x7dc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c18:	4b95      	ldr	r3, [pc, #596]	; (8000e70 <main+0x7d4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4896      	ldr	r0, [pc, #600]	; (8000e7c <main+0x7e0>)
 8000c22:	f00b fcdc 	bl	800c5de <ModBUS_F03_Read>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4893      	ldr	r0, [pc, #588]	; (8000e7c <main+0x7e0>)
 8000c2e:	f00b fcd6 	bl	800c5de <ModBUS_F03_Read>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461c      	mov	r4, r3
 8000c36:	2102      	movs	r1, #2
 8000c38:	4890      	ldr	r0, [pc, #576]	; (8000e7c <main+0x7e0>)
 8000c3a:	f00b fcd0 	bl	800c5de <ModBUS_F03_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461d      	mov	r5, r3
 8000c42:	2103      	movs	r1, #3
 8000c44:	488d      	ldr	r0, [pc, #564]	; (8000e7c <main+0x7e0>)
 8000c46:	f00b fcca 	bl	800c5de <ModBUS_F03_Read>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461e      	mov	r6, r3
 8000c4e:	2104      	movs	r1, #4
 8000c50:	488a      	ldr	r0, [pc, #552]	; (8000e7c <main+0x7e0>)
 8000c52:	f00b fcc4 	bl	800c5de <ModBUS_F03_Read>
 8000c56:	4603      	mov	r3, r0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4887      	ldr	r0, [pc, #540]	; (8000e7c <main+0x7e0>)
 8000c5e:	f00b fcbe 	bl	800c5de <ModBUS_F03_Read>
 8000c62:	4603      	mov	r3, r0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	2106      	movs	r1, #6
 8000c68:	4884      	ldr	r0, [pc, #528]	; (8000e7c <main+0x7e0>)
 8000c6a:	f00b fcb8 	bl	800c5de <ModBUS_F03_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	2107      	movs	r1, #7
 8000c74:	4881      	ldr	r0, [pc, #516]	; (8000e7c <main+0x7e0>)
 8000c76:	f00b fcb2 	bl	800c5de <ModBUS_F03_Read>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	2108      	movs	r1, #8
 8000c80:	487e      	ldr	r0, [pc, #504]	; (8000e7c <main+0x7e0>)
 8000c82:	f00b fcac 	bl	800c5de <ModBUS_F03_Read>
 8000c86:	4603      	mov	r3, r0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	2109      	movs	r1, #9
 8000c8c:	487b      	ldr	r0, [pc, #492]	; (8000e7c <main+0x7e0>)
 8000c8e:	f00b fca6 	bl	800c5de <ModBUS_F03_Read>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8000c9c:	4b78      	ldr	r3, [pc, #480]	; (8000e80 <main+0x7e4>)
 8000c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <main+0x7e8>)
 8000ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ca8:	9208      	str	r2, [sp, #32]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	9207      	str	r2, [sp, #28]
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	9206      	str	r2, [sp, #24]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	9205      	str	r2, [sp, #20]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	9204      	str	r2, [sp, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	9303      	str	r3, [sp, #12]
 8000cbe:	9602      	str	r6, [sp, #8]
 8000cc0:	9501      	str	r5, [sp, #4]
 8000cc2:	9400      	str	r4, [sp, #0]
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	4a70      	ldr	r2, [pc, #448]	; (8000e88 <main+0x7ec>)
 8000cc8:	4970      	ldr	r1, [pc, #448]	; (8000e8c <main+0x7f0>)
 8000cca:	4871      	ldr	r0, [pc, #452]	; (8000e90 <main+0x7f4>)
 8000ccc:	f00a fbc2 	bl	800b454 <httpPOST>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d020      	beq.n	8000d18 <main+0x67c>
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cd6:	486b      	ldr	r0, [pc, #428]	; (8000e84 <main+0x7e8>)
 8000cd8:	f7ff fa8c 	bl	80001f4 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2341      	movs	r3, #65	; 0x41
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4967      	ldr	r1, [pc, #412]	; (8000e84 <main+0x7e8>)
 8000ce8:	486a      	ldr	r0, [pc, #424]	; (8000e94 <main+0x7f8>)
 8000cea:	f00d fec1 	bl	800ea70 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000cee:	4865      	ldr	r0, [pc, #404]	; (8000e84 <main+0x7e8>)
 8000cf0:	f7ff fa80 	bl	80001f4 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b5b      	ldr	r3, [pc, #364]	; (8000e68 <main+0x7cc>)
 8000cfa:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <main+0x7cc>)
 8000d00:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d807      	bhi.n	8000d18 <main+0x67c>
	  							{
	  								EnviarDatos(&wf);
 8000d08:	4857      	ldr	r0, [pc, #348]	; (8000e68 <main+0x7cc>)
 8000d0a:	f005 fd2f 	bl	800676c <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <main+0x7cc>)
 8000d10:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d18:	4b5f      	ldr	r3, [pc, #380]	; (8000e98 <main+0x7fc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d003      	beq.n	8000d28 <main+0x68c>
 8000d20:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <main+0x800>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d175      	bne.n	8000e14 <main+0x778>
	  		{
	  			if(FLAG_UART1==1)
 8000d28:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <main+0x7fc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d11c      	bne.n	8000d6a <main+0x6ce>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <main+0x804>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <main+0x808>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	495b      	ldr	r1, [pc, #364]	; (8000ea8 <main+0x80c>)
 8000d3c:	485b      	ldr	r0, [pc, #364]	; (8000eac <main+0x810>)
 8000d3e:	f00d fe97 	bl	800ea70 <CopiaVector>
	  					FLAG_UART1=0;
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <main+0x7fc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d48:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <main+0x814>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d102      	bne.n	8000d56 <main+0x6ba>
	  						{
	  							error_rxdata=0;
 8000d50:	4b57      	ldr	r3, [pc, #348]	; (8000eb0 <main+0x814>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d56:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <main+0x814>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d105      	bne.n	8000d6a <main+0x6ce>
	  						{
	  							error_rxdata=5;
 8000d5e:	4b54      	ldr	r3, [pc, #336]	; (8000eb0 <main+0x814>)
 8000d60:	2205      	movs	r2, #5
 8000d62:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d64:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <main+0x814>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <main+0x800>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <main+0x6dc>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d72:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <main+0x800>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d78:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <main+0x7c8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d149      	bne.n	8000e14 <main+0x778>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d80:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <main+0x804>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <main+0x7cc>)
 8000d86:	f8c2 3cd0 	str.w	r3, [r2, #3280]	; 0xcd0
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <main+0x804>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <main+0x808>)
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	4944      	ldr	r1, [pc, #272]	; (8000ea8 <main+0x80c>)
 8000d96:	4845      	ldr	r0, [pc, #276]	; (8000eac <main+0x810>)
 8000d98:	f00d fe6a 	bl	800ea70 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000d9c:	4832      	ldr	r0, [pc, #200]	; (8000e68 <main+0x7cc>)
 8000d9e:	f005 fdc5 	bl	800692c <AT_ESP8266_ND>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <main+0x818>)
 8000da8:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <main+0x7cc>)
 8000dac:	f8d3 3cc8 	ldr.w	r3, [r3, #3272]	; 0xcc8
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d12f      	bne.n	8000e14 <main+0x778>
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <main+0x7cc>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	2b63      	cmp	r3, #99	; 0x63
 8000dbc:	d12a      	bne.n	8000e14 <main+0x778>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <main+0x7cc>)
 8000dc0:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8000dc4:	2341      	movs	r3, #65	; 0x41
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	493b      	ldr	r1, [pc, #236]	; (8000eb8 <main+0x81c>)
 8000dcc:	483b      	ldr	r0, [pc, #236]	; (8000ebc <main+0x820>)
 8000dce:	f00d fe4f 	bl	800ea70 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <main+0x7cc>)
 8000dd4:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8000dd8:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <main+0x824>)
 8000dda:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000dde:	4838      	ldr	r0, [pc, #224]	; (8000ec0 <main+0x824>)
 8000de0:	f00b fc82 	bl	800c6e8 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <main+0x824>)
 8000de6:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000dea:	2341      	movs	r3, #65	; 0x41
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	4934      	ldr	r1, [pc, #208]	; (8000ec4 <main+0x828>)
 8000df2:	4828      	ldr	r0, [pc, #160]	; (8000e94 <main+0x7f8>)
 8000df4:	f00d fe3c 	bl	800ea70 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000df8:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <main+0x824>)
 8000dfa:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <main+0x7cc>)
 8000e00:	f8c2 3cdc 	str.w	r3, [r2, #3292]	; 0xcdc
	  						wf._new_data_rcv=0;//
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <main+0x7cc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
	  						wf._send_data=1;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x7cc>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <main+0x82c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <main+0x78c>
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <main+0x830>)
 8000e1e:	f893 366e 	ldrb.w	r3, [r3, #1646]	; 0x66e
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f040 808e 	bne.w	8000f44 <main+0x8a8>
	  		{
	  			if(FLAG_UART2==1)
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <main+0x82c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <main+0x7a0>
	  				{
	  				FLAG_UART2=0;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <main+0x82c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e36:	4825      	ldr	r0, [pc, #148]	; (8000ecc <main+0x830>)
 8000e38:	f00a fea0 	bl	800bb7c <LoRa_decode>
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <main+0x830>)
 8000e3e:	f893 366e 	ldrb.w	r3, [r3, #1646]	; 0x66e
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d17e      	bne.n	8000f44 <main+0x8a8>
	  				{
	  					lr.tmr_dly_ON=0;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <main+0x830>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000e4e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <main+0x830>)
 8000e54:	f00a fe77 	bl	800bb46 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <main+0x830>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <main+0x830>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	e035      	b.n	8000ed0 <main+0x834>
 8000e64:	20003693 	.word	0x20003693
 8000e68:	200009fc 	.word	0x200009fc
 8000e6c:	08010244 	.word	0x08010244
 8000e70:	200025d9 	.word	0x200025d9
 8000e74:	200025e0 	.word	0x200025e0
 8000e78:	200025dc 	.word	0x200025dc
 8000e7c:	20001740 	.word	0x20001740
 8000e80:	200023d8 	.word	0x200023d8
 8000e84:	200021d8 	.word	0x200021d8
 8000e88:	2000001c 	.word	0x2000001c
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000c88 	.word	0x20000c88
 8000e98:	20003698 	.word	0x20003698
 8000e9c:	20003697 	.word	0x20003697
 8000ea0:	20003cb4 	.word	0x20003cb4
 8000ea4:	20003ca4 	.word	0x20003ca4
 8000ea8:	20003aa4 	.word	0x20003aa4
 8000eac:	20001088 	.word	0x20001088
 8000eb0:	2000369b 	.word	0x2000369b
 8000eb4:	2000369a 	.word	0x2000369a
 8000eb8:	20000a88 	.word	0x20000a88
 8000ebc:	20001c99 	.word	0x20001c99
 8000ec0:	20001c8c 	.word	0x20001c8c
 8000ec4:	20001e20 	.word	0x20001e20
 8000ec8:	20003699 	.word	0x20003699
 8000ecc:	20000378 	.word	0x20000378
 8000ed0:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
			  			strncat(lr.dest_address,"1",1);
 8000ed4:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <main+0x90c>)
 8000ed6:	f7ff f98d 	bl	80001f4 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <main+0x90c>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4932      	ldr	r1, [pc, #200]	; (8000fac <main+0x910>)
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000eec:	4830      	ldr	r0, [pc, #192]	; (8000fb0 <main+0x914>)
 8000eee:	f7ff f981 	bl	80001f4 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <main+0x914>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <main+0x918>)
 8000efc:	4614      	mov	r4, r2
 8000efe:	469c      	mov	ip, r3
 8000f00:	f104 0e20 	add.w	lr, r4, #32
 8000f04:	4665      	mov	r5, ip
 8000f06:	4626      	mov	r6, r4
 8000f08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f0a:	6028      	str	r0, [r5, #0]
 8000f0c:	6069      	str	r1, [r5, #4]
 8000f0e:	60aa      	str	r2, [r5, #8]
 8000f10:	60eb      	str	r3, [r5, #12]
 8000f12:	3410      	adds	r4, #16
 8000f14:	f10c 0c10 	add.w	ip, ip, #16
 8000f18:	4574      	cmp	r4, lr
 8000f1a:	d1f3      	bne.n	8000f04 <main+0x868>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	4622      	mov	r2, r4
 8000f20:	6810      	ldr	r0, [r2, #0]
 8000f22:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <main+0x91c>)
 8000f26:	2223      	movs	r2, #35	; 0x23
 8000f28:	f8c3 2660 	str.w	r2, [r3, #1632]	; 0x660
		  				lr.estado=ESPERANDO_RPTA;										//
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <main+0x91c>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
			  			error=LoRa_Send(&lr,&huart2);
 8000f34:	4921      	ldr	r1, [pc, #132]	; (8000fbc <main+0x920>)
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <main+0x91c>)
 8000f38:	f00a fd3c 	bl	800b9b4 <LoRa_Send>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x924>)
 8000f42:	701a      	strb	r2, [r3, #0]
	  			//ITM0_Write(lr.txbuff,strlen(lr.txbuff))


	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <main+0x928>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <main+0x8c2>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	491e      	ldr	r1, [pc, #120]	; (8000fc8 <main+0x92c>)
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <main+0x930>)
 8000f52:	f008 fe11 	bl	8009b78 <WiFi_Conn_ND>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <main+0x934>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <main+0x938>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	f47f ae36 	bne.w	8000bd4 <main+0x538>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <main+0x93c>)
 8000f70:	f002 fa7e 	bl	8003470 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000f74:	2115      	movs	r1, #21
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <main+0x940>)
 8000f78:	f000 face 	bl	8001518 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8000f7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f80:	f001 fe14 	bl	8002bac <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <main+0x93c>)
 8000f8c:	f002 fa70 	bl	8003470 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000f90:	2118      	movs	r1, #24
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <main+0x944>)
 8000f94:	f000 fac0 	bl	8001518 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 8000f98:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f9c:	f001 fe06 	bl	8002bac <HAL_Delay>
	  				esp_restart=0;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <main+0x938>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 8000fa6:	e615      	b.n	8000bd4 <main+0x538>
 8000fa8:	2000038e 	.word	0x2000038e
 8000fac:	0801025c 	.word	0x0801025c
 8000fb0:	200006d4 	.word	0x200006d4
 8000fb4:	08010260 	.word	0x08010260
 8000fb8:	20000378 	.word	0x20000378
 8000fbc:	200002e8 	.word	0x200002e8
 8000fc0:	200009f8 	.word	0x200009f8
 8000fc4:	20003693 	.word	0x20003693
 8000fc8:	200002a4 	.word	0x200002a4
 8000fcc:	200009fc 	.word	0x200009fc
 8000fd0:	2000369d 	.word	0x2000369d
 8000fd4:	2000369c 	.word	0x2000369c
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	08010284 	.word	0x08010284
 8000fe0:	0801029c 	.word	0x0801029c

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00d fdd0 	bl	800eb98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <SystemClock_Config+0xc8>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <SystemClock_Config+0xc8>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <SystemClock_Config+0xc8>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <SystemClock_Config+0xcc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <SystemClock_Config+0xcc>)
 800102e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <SystemClock_Config+0xcc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001040:	2301      	movs	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104a:	2302      	movs	r3, #2
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001054:	230c      	movs	r3, #12
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001058:	2360      	movs	r3, #96	; 0x60
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fa35 	bl	80034d8 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001074:	f001 fa14 	bl	80024a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2103      	movs	r1, #3
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fc97 	bl	80039c8 <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010a0:	f001 f9fe 	bl	80024a0 <Error_Handler>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3750      	adds	r7, #80	; 0x50
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_SPI1_Init+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI1_Init+0x64>)
 8001100:	220a      	movs	r2, #10
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_SPI1_Init+0x64>)
 8001106:	f002 fe3f 	bl	8003d88 <HAL_SPI_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001110:	f001 f9c6 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200001bc 	.word	0x200001bc
 800111c:	40013000 	.word	0x40013000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <MX_TIM2_Init+0xf0>)
 800115a:	2264      	movs	r2, #100	; 0x64
 800115c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001166:	2264      	movs	r2, #100	; 0x64
 8001168:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_TIM2_Init+0xf0>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001176:	4826      	ldr	r0, [pc, #152]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001178:	f003 f8fc 	bl	8004374 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001182:	f001 f98d 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	4619      	mov	r1, r3
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <MX_TIM2_Init+0xf0>)
 8001194:	f003 fd04 	bl	8004ba0 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800119e:	f001 f97f 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_TIM2_Init+0xf0>)
 80011a4:	f003 f935 	bl	8004412 <HAL_TIM_OC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011ae:	f001 f977 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011b2:	2108      	movs	r1, #8
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <MX_TIM2_Init+0xf0>)
 80011b6:	f003 fb35 	bl	8004824 <HAL_TIM_OnePulse_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011c0:	f001 f96e 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4619      	mov	r1, r3
 80011d2:	480f      	ldr	r0, [pc, #60]	; (8001210 <MX_TIM2_Init+0xf0>)
 80011d4:	f004 f8a0 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011de:	f001 f95f 	bl	80024a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80011e2:	2320      	movs	r3, #32
 80011e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_TIM2_Init+0xf0>)
 80011fa:	f003 fc75 	bl	8004ae8 <HAL_TIM_OC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001204:	f001 f94c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000214 	.word	0x20000214

08001214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <MX_TIM3_Init+0xf4>)
 8001248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <MX_TIM3_Init+0xf0>)
 800124c:	2264      	movs	r2, #100	; 0x64
 800124e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001258:	2296      	movs	r2, #150	; 0x96
 800125a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_TIM3_Init+0xf0>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <MX_TIM3_Init+0xf0>)
 800126a:	f003 f883 	bl	8004374 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001274:	f001 f914 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	4619      	mov	r1, r3
 8001284:	481f      	ldr	r0, [pc, #124]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001286:	f003 fc8b 	bl	8004ba0 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001290:	f001 f906 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001294:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_TIM3_Init+0xf0>)
 8001296:	f003 f8bc 	bl	8004412 <HAL_TIM_OC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012a0:	f001 f8fe 	bl	80024a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012a4:	2108      	movs	r1, #8
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <MX_TIM3_Init+0xf0>)
 80012a8:	f003 fabc 	bl	8004824 <HAL_TIM_OnePulse_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012b2:	f001 f8f5 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4619      	mov	r1, r3
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <MX_TIM3_Init+0xf0>)
 80012c6:	f004 f827 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80012d0:	f001 f8e6 	bl	80024a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012d4:	2320      	movs	r3, #32
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM3_Init+0xf0>)
 80012ec:	f003 fbfc 	bl	8004ae8 <HAL_TIM_OC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80012f6:	f001 f8d3 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000025c 	.word	0x2000025c
 8001308:	40000400 	.word	0x40000400

0800130c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART1_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001344:	f004 f86a 	bl	800541c <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f001 f8a7 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002a4 	.word	0x200002a4
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f004 f840 	bl	800541c <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f001 f87d 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e8 	.word	0x200002e8
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART6_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART6_UART_Init+0x4c>)
 80013ec:	f004 f816 	bl	800541c <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f001 f853 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000032c 	.word	0x2000032c
 8001404:	40011400 	.word	0x40011400

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_GPIO_Init+0x104>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a39      	ldr	r2, [pc, #228]	; (800150c <MX_GPIO_Init+0x104>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_GPIO_Init+0x104>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <MX_GPIO_Init+0x104>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <MX_GPIO_Init+0x104>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <MX_GPIO_Init+0x104>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <MX_GPIO_Init+0x104>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <MX_GPIO_Init+0x104>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_GPIO_Init+0x104>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <MX_GPIO_Init+0x104>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <MX_GPIO_Init+0x104>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <MX_GPIO_Init+0x104>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001494:	481e      	ldr	r0, [pc, #120]	; (8001510 <MX_GPIO_Init+0x108>)
 8001496:	f001 ffeb 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2102      	movs	r1, #2
 800149e:	481d      	ldr	r0, [pc, #116]	; (8001514 <MX_GPIO_Init+0x10c>)
 80014a0:	f001 ffe6 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2110      	movs	r1, #16
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_GPIO_Init+0x10c>)
 80014aa:	f001 ffe1 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <MX_GPIO_Init+0x108>)
 80014c8:	f001 fd6a 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 80014cc:	f240 1301 	movw	r3, #257	; 0x101
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_GPIO_Init+0x10c>)
 80014e2:	f001 fd5d 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 80014e6:	2312      	movs	r3, #18
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_GPIO_Init+0x10c>)
 80014fe:	f001 fd4f 	bl	8002fa0 <HAL_GPIO_Init>

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40020800 	.word	0x40020800
 8001514:	40020000 	.word	0x40020000

08001518 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e009      	b.n	800153c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f88b 	bl	800064c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <ITM0_Write+0x10>
  }
  return len;
 8001544:	683b      	ldr	r3, [r7, #0]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <SysTick_Handler+0x1a8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <SysTick_Handler+0x1a8>)
 800155e:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <SysTick_Handler+0x1ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a65      	ldr	r2, [pc, #404]	; (80016fc <SysTick_Handler+0x1ac>)
 8001568:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800156a:	4b65      	ldr	r3, [pc, #404]	; (8001700 <SysTick_Handler+0x1b0>)
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <SysTick_Handler+0x2c>
 8001572:	4b64      	ldr	r3, [pc, #400]	; (8001704 <SysTick_Handler+0x1b4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a62      	ldr	r2, [pc, #392]	; (8001704 <SysTick_Handler+0x1b4>)
 800157a:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <SysTick_Handler+0x1b0>)
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00c      	beq.n	800159e <SysTick_Handler+0x4e>
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <SysTick_Handler+0x1b0>)
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <SysTick_Handler+0x1b4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	da05      	bge.n	800159e <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <SysTick_Handler+0x1b0>)
 8001594:	2200      	movs	r2, #0
 8001596:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <SysTick_Handler+0x1b4>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <SysTick_Handler+0x1b8>)
 80015a0:	f893 366d 	ldrb.w	r3, [r3, #1645]	; 0x66d
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d116      	bne.n	80015d6 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <SysTick_Handler+0x1b8>)
 80015aa:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a55      	ldr	r2, [pc, #340]	; (8001708 <SysTick_Handler+0x1b8>)
 80015b2:	f8c2 3674 	str.w	r3, [r2, #1652]	; 0x674
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <SysTick_Handler+0x1b8>)
 80015b8:	f8d3 2674 	ldr.w	r2, [r3, #1652]	; 0x674
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <SysTick_Handler+0x1b8>)
 80015be:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dd07      	ble.n	80015d6 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <SysTick_Handler+0x1b8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
			lr.tmr_dly_en=0;
 80015ce:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <SysTick_Handler+0x1b8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <SysTick_Handler+0x1bc>)
 80015d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015dc:	f240 2261 	movw	r2, #609	; 0x261
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d005      	beq.n	80015f0 <SysTick_Handler+0xa0>
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <SysTick_Handler+0x1bc>)
 80015e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ea:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015ee:	d109      	bne.n	8001604 <SysTick_Handler+0xb4>
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <SysTick_Handler+0x1bc>)
 80015f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <SysTick_Handler+0xb4>
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <SysTick_Handler+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a43      	ldr	r2, [pc, #268]	; (8001710 <SysTick_Handler+0x1c0>)
 8001602:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001604:	4b42      	ldr	r3, [pc, #264]	; (8001710 <SysTick_Handler+0x1c0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800160c:	db0c      	blt.n	8001628 <SysTick_Handler+0xd8>
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <SysTick_Handler+0x1bc>)
 8001610:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d007      	beq.n	8001628 <SysTick_Handler+0xd8>
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <SysTick_Handler+0x1bc>)
 800161a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <SysTick_Handler+0xd8>
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <SysTick_Handler+0x1c4>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <SysTick_Handler+0x1c8>)
 800162a:	7b9b      	ldrb	r3, [r3, #14]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10e      	bne.n	800164e <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <SysTick_Handler+0x1c8>)
 8001632:	899b      	ldrh	r3, [r3, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <SysTick_Handler+0x1c8>)
 800163a:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <SysTick_Handler+0x1c8>)
 800163e:	899b      	ldrh	r3, [r3, #12]
 8001640:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001644:	d303      	bcc.n	800164e <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <SysTick_Handler+0x1c8>)
 8001648:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800164c:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <SysTick_Handler+0x1a8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	f040 8420 	bne.w	8001e98 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <SysTick_Handler+0x1cc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <SysTick_Handler+0x1cc>)
 8001660:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <SysTick_Handler+0x1a8>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <SysTick_Handler+0x1d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <SysTick_Handler+0x1d0>)
 8001670:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <SysTick_Handler+0x1d4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800167a:	d102      	bne.n	8001682 <SysTick_Handler+0x132>
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SysTick_Handler+0x1d4>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <SysTick_Handler+0x1d8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d104      	bne.n	8001694 <SysTick_Handler+0x144>
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <SysTick_Handler+0x1d4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <SysTick_Handler+0x1d4>)
 8001692:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <SysTick_Handler+0x1d4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d102      	bne.n	80016a2 <SysTick_Handler+0x152>
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <SysTick_Handler+0x1d8>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <SysTick_Handler+0x1d8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d104      	bne.n	80016b4 <SysTick_Handler+0x164>
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <SysTick_Handler+0x1d4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <SysTick_Handler+0x1d4>)
 80016b2:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <SysTick_Handler+0x1d4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <SysTick_Handler+0x172>
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <SysTick_Handler+0x1d8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c6:	4819      	ldr	r0, [pc, #100]	; (800172c <SysTick_Handler+0x1dc>)
 80016c8:	f001 feeb 	bl	80034a2 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <SysTick_Handler+0x1e0>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 83d1 	beq.w	8001e78 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <SysTick_Handler+0x1e4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 83d0 	beq.w	8001e80 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80016e0:	2100      	movs	r1, #0
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <SysTick_Handler+0x1c8>)
 80016e4:	f00c fc70 	bl	800dfc8 <eth_rd_SOCKET_STAT>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <SysTick_Handler+0x1c8>)
 80016ee:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <SysTick_Handler+0x1c8>)
 80016f2:	7b9b      	ldrb	r3, [r3, #14]
 80016f4:	e020      	b.n	8001738 <SysTick_Handler+0x1e8>
 80016f6:	bf00      	nop
 80016f8:	20000370 	.word	0x20000370
 80016fc:	20003cbc 	.word	0x20003cbc
 8001700:	20001740 	.word	0x20001740
 8001704:	20003cc4 	.word	0x20003cc4
 8001708:	20000378 	.word	0x20000378
 800170c:	200009fc 	.word	0x200009fc
 8001710:	200025dc 	.word	0x200025dc
 8001714:	200025d9 	.word	0x200025d9
 8001718:	200025e0 	.word	0x200025e0
 800171c:	20003ce8 	.word	0x20003ce8
 8001720:	20000374 	.word	0x20000374
 8001724:	20003cc0 	.word	0x20003cc0
 8001728:	2000369e 	.word	0x2000369e
 800172c:	40020800 	.word	0x40020800
 8001730:	20003690 	.word	0x20003690
 8001734:	200036a0 	.word	0x200036a0
 8001738:	2b5f      	cmp	r3, #95	; 0x5f
 800173a:	f200 83a6 	bhi.w	8001e8a <SysTick_Handler+0x93a>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <SysTick_Handler+0x1f4>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080018c5 	.word	0x080018c5
 8001748:	08001e8b 	.word	0x08001e8b
 800174c:	08001e8b 	.word	0x08001e8b
 8001750:	08001e8b 	.word	0x08001e8b
 8001754:	08001e8b 	.word	0x08001e8b
 8001758:	08001e8b 	.word	0x08001e8b
 800175c:	08001e8b 	.word	0x08001e8b
 8001760:	08001e8b 	.word	0x08001e8b
 8001764:	08001e8b 	.word	0x08001e8b
 8001768:	08001e8b 	.word	0x08001e8b
 800176c:	08001e8b 	.word	0x08001e8b
 8001770:	08001e8b 	.word	0x08001e8b
 8001774:	08001e8b 	.word	0x08001e8b
 8001778:	08001e8b 	.word	0x08001e8b
 800177c:	08001e8b 	.word	0x08001e8b
 8001780:	08001e8b 	.word	0x08001e8b
 8001784:	08001e8b 	.word	0x08001e8b
 8001788:	08001e8b 	.word	0x08001e8b
 800178c:	08001e8b 	.word	0x08001e8b
 8001790:	080018fd 	.word	0x080018fd
 8001794:	0800194f 	.word	0x0800194f
 8001798:	08001967 	.word	0x08001967
 800179c:	0800197f 	.word	0x0800197f
 80017a0:	08001997 	.word	0x08001997
 80017a4:	08001cf3 	.word	0x08001cf3
 80017a8:	08001e8b 	.word	0x08001e8b
 80017ac:	08001d0b 	.word	0x08001d0b
 80017b0:	08001d23 	.word	0x08001d23
 80017b4:	08001d61 	.word	0x08001d61
 80017b8:	08001d9f 	.word	0x08001d9f
 80017bc:	08001e8b 	.word	0x08001e8b
 80017c0:	08001e8b 	.word	0x08001e8b
 80017c4:	08001e8b 	.word	0x08001e8b
 80017c8:	08001e8b 	.word	0x08001e8b
 80017cc:	08001db7 	.word	0x08001db7
 80017d0:	08001e8b 	.word	0x08001e8b
 80017d4:	08001e8b 	.word	0x08001e8b
 80017d8:	08001e8b 	.word	0x08001e8b
 80017dc:	08001e8b 	.word	0x08001e8b
 80017e0:	08001e8b 	.word	0x08001e8b
 80017e4:	08001e8b 	.word	0x08001e8b
 80017e8:	08001e8b 	.word	0x08001e8b
 80017ec:	08001e8b 	.word	0x08001e8b
 80017f0:	08001e8b 	.word	0x08001e8b
 80017f4:	08001e8b 	.word	0x08001e8b
 80017f8:	08001e8b 	.word	0x08001e8b
 80017fc:	08001e8b 	.word	0x08001e8b
 8001800:	08001e8b 	.word	0x08001e8b
 8001804:	08001e8b 	.word	0x08001e8b
 8001808:	08001e8b 	.word	0x08001e8b
 800180c:	08001e31 	.word	0x08001e31
 8001810:	08001e8b 	.word	0x08001e8b
 8001814:	08001e8b 	.word	0x08001e8b
 8001818:	08001e8b 	.word	0x08001e8b
 800181c:	08001e8b 	.word	0x08001e8b
 8001820:	08001e8b 	.word	0x08001e8b
 8001824:	08001e8b 	.word	0x08001e8b
 8001828:	08001e8b 	.word	0x08001e8b
 800182c:	08001e8b 	.word	0x08001e8b
 8001830:	08001e8b 	.word	0x08001e8b
 8001834:	08001e8b 	.word	0x08001e8b
 8001838:	08001e8b 	.word	0x08001e8b
 800183c:	08001e8b 	.word	0x08001e8b
 8001840:	08001e8b 	.word	0x08001e8b
 8001844:	08001e8b 	.word	0x08001e8b
 8001848:	08001e8b 	.word	0x08001e8b
 800184c:	08001e49 	.word	0x08001e49
 8001850:	08001e8b 	.word	0x08001e8b
 8001854:	08001e8b 	.word	0x08001e8b
 8001858:	08001e8b 	.word	0x08001e8b
 800185c:	08001e8b 	.word	0x08001e8b
 8001860:	08001e8b 	.word	0x08001e8b
 8001864:	08001e8b 	.word	0x08001e8b
 8001868:	08001e8b 	.word	0x08001e8b
 800186c:	08001e8b 	.word	0x08001e8b
 8001870:	08001e8b 	.word	0x08001e8b
 8001874:	08001e8b 	.word	0x08001e8b
 8001878:	08001e8b 	.word	0x08001e8b
 800187c:	08001e8b 	.word	0x08001e8b
 8001880:	08001e8b 	.word	0x08001e8b
 8001884:	08001e8b 	.word	0x08001e8b
 8001888:	08001e8b 	.word	0x08001e8b
 800188c:	08001e8b 	.word	0x08001e8b
 8001890:	08001e8b 	.word	0x08001e8b
 8001894:	08001e8b 	.word	0x08001e8b
 8001898:	08001e8b 	.word	0x08001e8b
 800189c:	08001e8b 	.word	0x08001e8b
 80018a0:	08001e8b 	.word	0x08001e8b
 80018a4:	08001e8b 	.word	0x08001e8b
 80018a8:	08001e8b 	.word	0x08001e8b
 80018ac:	08001e8b 	.word	0x08001e8b
 80018b0:	08001e8b 	.word	0x08001e8b
 80018b4:	08001e8b 	.word	0x08001e8b
 80018b8:	08001e8b 	.word	0x08001e8b
 80018bc:	08001e8b 	.word	0x08001e8b
 80018c0:	08001e61 	.word	0x08001e61
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <SysTick_Handler+0x580>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <SysTick_Handler+0x384>
 80018cc:	2113      	movs	r1, #19
 80018ce:	4881      	ldr	r0, [pc, #516]	; (8001ad4 <SysTick_Handler+0x584>)
 80018d0:	f7ff fe22 	bl	8001518 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80018d4:	2201      	movs	r2, #1
 80018d6:	2100      	movs	r1, #0
 80018d8:	487f      	ldr	r0, [pc, #508]	; (8001ad8 <SysTick_Handler+0x588>)
 80018da:	f00c fa43 	bl	800dd64 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80018de:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <SysTick_Handler+0x588>)
 80018e0:	899b      	ldrh	r3, [r3, #12]
 80018e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80018e6:	4293      	cmp	r3, r2
 80018e8:	f240 82cc 	bls.w	8001e84 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 80018ec:	487a      	ldr	r0, [pc, #488]	; (8001ad8 <SysTick_Handler+0x588>)
 80018ee:	f00c fa75 	bl	800dddc <eth_init>

						 eth_socket_init(&ETH,0);
 80018f2:	2100      	movs	r1, #0
 80018f4:	4878      	ldr	r0, [pc, #480]	; (8001ad8 <SysTick_Handler+0x588>)
 80018f6:	f00c faeb 	bl	800ded0 <eth_socket_init>
					 }

				 }
			 break;
 80018fa:	e2c3      	b.n	8001e84 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 80018fc:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <SysTick_Handler+0x588>)
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001906:	2b01      	cmp	r3, #1
 8001908:	d110      	bne.n	800192c <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 800190a:	4b71      	ldr	r3, [pc, #452]	; (8001ad0 <SysTick_Handler+0x580>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <SysTick_Handler+0x3ca>
 8001912:	2111      	movs	r1, #17
 8001914:	4871      	ldr	r0, [pc, #452]	; (8001adc <SysTick_Handler+0x58c>)
 8001916:	f7ff fdff 	bl	8001518 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 800191a:	2202      	movs	r2, #2
 800191c:	2100      	movs	r1, #0
 800191e:	486e      	ldr	r0, [pc, #440]	; (8001ad8 <SysTick_Handler+0x588>)
 8001920:	f00c fa20 	bl	800dd64 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <SysTick_Handler+0x588>)
 8001926:	2200      	movs	r2, #0
 8001928:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800192a:	e2ae      	b.n	8001e8a <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 800192c:	2204      	movs	r2, #4
 800192e:	2100      	movs	r1, #0
 8001930:	4869      	ldr	r0, [pc, #420]	; (8001ad8 <SysTick_Handler+0x588>)
 8001932:	f00c fa17 	bl	800dd64 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001936:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <SysTick_Handler+0x580>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <SysTick_Handler+0x3f6>
 800193e:	2115      	movs	r1, #21
 8001940:	4867      	ldr	r0, [pc, #412]	; (8001ae0 <SysTick_Handler+0x590>)
 8001942:	f7ff fde9 	bl	8001518 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001946:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <SysTick_Handler+0x588>)
 8001948:	2200      	movs	r2, #0
 800194a:	819a      	strh	r2, [r3, #12]
			 break;
 800194c:	e29d      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800194e:	4b60      	ldr	r3, [pc, #384]	; (8001ad0 <SysTick_Handler+0x580>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <SysTick_Handler+0x40e>
 8001956:	2113      	movs	r1, #19
 8001958:	4862      	ldr	r0, [pc, #392]	; (8001ae4 <SysTick_Handler+0x594>)
 800195a:	f7ff fddd 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800195e:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <SysTick_Handler+0x588>)
 8001960:	2200      	movs	r2, #0
 8001962:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001964:	e291      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <SysTick_Handler+0x580>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <SysTick_Handler+0x426>
 800196e:	2114      	movs	r1, #20
 8001970:	485d      	ldr	r0, [pc, #372]	; (8001ae8 <SysTick_Handler+0x598>)
 8001972:	f7ff fdd1 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <SysTick_Handler+0x588>)
 8001978:	2200      	movs	r2, #0
 800197a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800197c:	e285      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800197e:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <SysTick_Handler+0x580>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <SysTick_Handler+0x43e>
 8001986:	2114      	movs	r1, #20
 8001988:	4858      	ldr	r0, [pc, #352]	; (8001aec <SysTick_Handler+0x59c>)
 800198a:	f7ff fdc5 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <SysTick_Handler+0x588>)
 8001990:	2200      	movs	r2, #0
 8001992:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001994:	e279      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <SysTick_Handler+0x580>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <SysTick_Handler+0x456>
 800199e:	2118      	movs	r1, #24
 80019a0:	4853      	ldr	r0, [pc, #332]	; (8001af0 <SysTick_Handler+0x5a0>)
 80019a2:	f7ff fdb9 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <SysTick_Handler+0x588>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <SysTick_Handler+0x588>)
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 80b0 	bne.w	8001b1c <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80019bc:	2302      	movs	r3, #2
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <SysTick_Handler+0x5a4>)
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	230f      	movs	r3, #15
 80019c6:	2226      	movs	r2, #38	; 0x26
 80019c8:	2104      	movs	r1, #4
 80019ca:	4843      	ldr	r0, [pc, #268]	; (8001ad8 <SysTick_Handler+0x588>)
 80019cc:	f00c f89f 	bl	800db0e <SPI_ETH_REG>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <SysTick_Handler+0x5a8>)
 80019d6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <SysTick_Handler+0x5a8>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8253 	beq.w	8001e88 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80019e2:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <SysTick_Handler+0x5a8>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	4a45      	ldr	r2, [pc, #276]	; (8001afc <SysTick_Handler+0x5ac>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	483b      	ldr	r0, [pc, #236]	; (8001ad8 <SysTick_Handler+0x588>)
 80019ec:	f00c fb26 	bl	800e03c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 80019f0:	4b42      	ldr	r3, [pc, #264]	; (8001afc <SysTick_Handler+0x5ac>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80019fa:	4837      	ldr	r0, [pc, #220]	; (8001ad8 <SysTick_Handler+0x588>)
 80019fc:	f00c f8ff 	bl	800dbfe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	2100      	movs	r1, #0
 8001a04:	4834      	ldr	r0, [pc, #208]	; (8001ad8 <SysTick_Handler+0x588>)
 8001a06:	f00c f9ad 	bl	800dd64 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001a0a:	bf00      	nop
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4832      	ldr	r0, [pc, #200]	; (8001ad8 <SysTick_Handler+0x588>)
 8001a10:	f00c faf7 	bl	800e002 <eth_rd_SOCKET_CMD>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f8      	bne.n	8001a0c <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <SysTick_Handler+0x5a8>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	4936      	ldr	r1, [pc, #216]	; (8001b00 <SysTick_Handler+0x5b0>)
 8001a28:	4836      	ldr	r0, [pc, #216]	; (8001b04 <SysTick_Handler+0x5b4>)
 8001a2a:	f00d f821 	bl	800ea70 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <SysTick_Handler+0x5a8>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <SysTick_Handler+0x5b8>)
 8001a36:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <SysTick_Handler+0x5a8>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <SysTick_Handler+0x4f8>
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <SysTick_Handler+0x588>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <SysTick_Handler+0x5b8>)
 8001a4a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482c      	ldr	r0, [pc, #176]	; (8001b04 <SysTick_Handler+0x5b4>)
 8001a52:	f00a fd47 	bl	800c4e4 <ModBUS_Check>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a5c:	482a      	ldr	r0, [pc, #168]	; (8001b08 <SysTick_Handler+0x5b8>)
 8001a5e:	f00a fe43 	bl	800c6e8 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <SysTick_Handler+0x5b8>)
 8001a64:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <SysTick_Handler+0x5bc>)
 8001a70:	4823      	ldr	r0, [pc, #140]	; (8001b00 <SysTick_Handler+0x5b0>)
 8001a72:	f00c fffd 	bl	800ea70 <CopiaVector>
 8001a76:	e007      	b.n	8001a88 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <SysTick_Handler+0x580>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <SysTick_Handler+0x538>
 8001a80:	2111      	movs	r1, #17
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <SysTick_Handler+0x5c0>)
 8001a84:	f7ff fd48 	bl	8001518 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <SysTick_Handler+0x5b8>)
 8001a8a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <SysTick_Handler+0x5c4>)
 8001a92:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <SysTick_Handler+0x5c4>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <SysTick_Handler+0x5c8>)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <SysTick_Handler+0x588>)
 8001a9e:	f00c fb9d 	bl	800e1dc <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <SysTick_Handler+0x5c8>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f240 4124 	movw	r1, #1060	; 0x424
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <SysTick_Handler+0x588>)
 8001aae:	f00c f8a6 	bl	800dbfe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <SysTick_Handler+0x588>)
 8001ab8:	f00c f954 	bl	800dd64 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001abc:	bf00      	nop
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <SysTick_Handler+0x588>)
 8001ac2:	f00c fa9e 	bl	800e002 <eth_rd_SOCKET_CMD>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f8      	bne.n	8001abe <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001acc:	e1dc      	b.n	8001e88 <SysTick_Handler+0x938>
 8001ace:	bf00      	nop
 8001ad0:	200025d8 	.word	0x200025d8
 8001ad4:	080102b8 	.word	0x080102b8
 8001ad8:	200025e0 	.word	0x200025e0
 8001adc:	080102cc 	.word	0x080102cc
 8001ae0:	080102e0 	.word	0x080102e0
 8001ae4:	080102f8 	.word	0x080102f8
 8001ae8:	0801030c 	.word	0x0801030c
 8001aec:	08010324 	.word	0x08010324
 8001af0:	0801033c 	.word	0x0801033c
 8001af4:	20003650 	.word	0x20003650
 8001af8:	20003648 	.word	0x20003648
 8001afc:	2000364c 	.word	0x2000364c
 8001b00:	200025fc 	.word	0x200025fc
 8001b04:	2000174d 	.word	0x2000174d
 8001b08:	20001740 	.word	0x20001740
 8001b0c:	200018d4 	.word	0x200018d4
 8001b10:	08010358 	.word	0x08010358
 8001b14:	2000364e 	.word	0x2000364e
 8001b18:	2000364a 	.word	0x2000364a
						if (mb_eth._w_answer==0)
 8001b1c:	4bac      	ldr	r3, [pc, #688]	; (8001dd0 <SysTick_Handler+0x880>)
 8001b1e:	791b      	ldrb	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d167      	bne.n	8001bf4 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001b24:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001b2a:	4baa      	ldr	r3, [pc, #680]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001b30:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001b36:	4ba7      	ldr	r3, [pc, #668]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001b3c:	4ba5      	ldr	r3, [pc, #660]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001b44:	4ba3      	ldr	r3, [pc, #652]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b46:	2206      	movs	r2, #6
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001b4c:	4ba1      	ldr	r3, [pc, #644]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001b54:	4b9f      	ldr	r3, [pc, #636]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b56:	2203      	movs	r2, #3
 8001b58:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001b64:	4b9b      	ldr	r3, [pc, #620]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001b6c:	4b99      	ldr	r3, [pc, #612]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001b74:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <SysTick_Handler+0x884>)
 8001b76:	220a      	movs	r2, #10
 8001b78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001b7c:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <SysTick_Handler+0x888>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001b82:	220f      	movs	r2, #15
 8001b84:	2100      	movs	r1, #0
 8001b86:	4892      	ldr	r0, [pc, #584]	; (8001dd0 <SysTick_Handler+0x880>)
 8001b88:	f00a fd57 	bl	800c63a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	220c      	movs	r2, #12
 8001b94:	4991      	ldr	r1, [pc, #580]	; (8001ddc <SysTick_Handler+0x88c>)
 8001b96:	4892      	ldr	r0, [pc, #584]	; (8001de0 <SysTick_Handler+0x890>)
 8001b98:	f00c ff6a 	bl	800ea70 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <SysTick_Handler+0x888>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <SysTick_Handler+0x894>)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	488b      	ldr	r0, [pc, #556]	; (8001dd4 <SysTick_Handler+0x884>)
 8001ba6:	f00c fb19 	bl	800e1dc <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <SysTick_Handler+0x894>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f240 4124 	movw	r1, #1060	; 0x424
 8001bb4:	4887      	ldr	r0, [pc, #540]	; (8001dd4 <SysTick_Handler+0x884>)
 8001bb6:	f00c f822 	bl	800dbfe <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bba:	2220      	movs	r2, #32
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4885      	ldr	r0, [pc, #532]	; (8001dd4 <SysTick_Handler+0x884>)
 8001bc0:	f00c f8d0 	bl	800dd64 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001bc4:	bf00      	nop
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4882      	ldr	r0, [pc, #520]	; (8001dd4 <SysTick_Handler+0x884>)
 8001bca:	f00c fa1a 	bl	800e002 <eth_rd_SOCKET_CMD>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f8      	bne.n	8001bc6 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	; (8001dd0 <SysTick_Handler+0x880>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001bda:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <SysTick_Handler+0x898>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001be0:	4b82      	ldr	r3, [pc, #520]	; (8001dec <SysTick_Handler+0x89c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 814f 	beq.w	8001e88 <SysTick_Handler+0x938>
 8001bea:	2117      	movs	r1, #23
 8001bec:	4880      	ldr	r0, [pc, #512]	; (8001df0 <SysTick_Handler+0x8a0>)
 8001bee:	f7ff fc93 	bl	8001518 <ITM0_Write>
			 break;
 8001bf2:	e149      	b.n	8001e88 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <SysTick_Handler+0x8a4>)
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	2226      	movs	r2, #38	; 0x26
 8001c00:	2104      	movs	r1, #4
 8001c02:	4874      	ldr	r0, [pc, #464]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c04:	f00b ff83 	bl	800db0e <SPI_ETH_REG>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c0e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8137 	beq.w	8001e88 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001c1a:	4b77      	ldr	r3, [pc, #476]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4a77      	ldr	r2, [pc, #476]	; (8001dfc <SysTick_Handler+0x8ac>)
 8001c20:	2100      	movs	r1, #0
 8001c22:	486c      	ldr	r0, [pc, #432]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c24:	f00c fa0a 	bl	800e03c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001c28:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <SysTick_Handler+0x8ac>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001c32:	4868      	ldr	r0, [pc, #416]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c34:	f00b ffe3 	bl	800dbfe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4865      	ldr	r0, [pc, #404]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c3e:	f00c f891 	bl	800dd64 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c42:	bf00      	nop
 8001c44:	2100      	movs	r1, #0
 8001c46:	4863      	ldr	r0, [pc, #396]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c48:	f00c f9db 	bl	800e002 <eth_rd_SOCKET_CMD>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f8      	bne.n	8001c44 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001c52:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4960      	ldr	r1, [pc, #384]	; (8001de0 <SysTick_Handler+0x890>)
 8001c60:	4867      	ldr	r0, [pc, #412]	; (8001e00 <SysTick_Handler+0x8b0>)
 8001c62:	f00c ff05 	bl	800ea70 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001c66:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <SysTick_Handler+0x880>)
 8001c6e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001c72:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <SysTick_Handler+0x8a8>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <SysTick_Handler+0x730>
 8001c7a:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <SysTick_Handler+0x884>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <SysTick_Handler+0x880>)
 8001c82:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001c86:	4619      	mov	r1, r3
 8001c88:	485d      	ldr	r0, [pc, #372]	; (8001e00 <SysTick_Handler+0x8b0>)
 8001c8a:	f00a fc2b 	bl	800c4e4 <ModBUS_Check>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d024      	beq.n	8001cde <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <SysTick_Handler+0x880>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <SysTick_Handler+0x898>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ca0:	484b      	ldr	r0, [pc, #300]	; (8001dd0 <SysTick_Handler+0x880>)
 8001ca2:	f00a fd21 	bl	800c6e8 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <SysTick_Handler+0x880>)
 8001ca8:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	4953      	ldr	r1, [pc, #332]	; (8001e00 <SysTick_Handler+0x8b0>)
 8001cb4:	4853      	ldr	r0, [pc, #332]	; (8001e04 <SysTick_Handler+0x8b4>)
 8001cb6:	f00c fedb 	bl	800ea70 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	4951      	ldr	r1, [pc, #324]	; (8001e08 <SysTick_Handler+0x8b8>)
 8001cc4:	4851      	ldr	r0, [pc, #324]	; (8001e0c <SysTick_Handler+0x8bc>)
 8001cc6:	f00c fed3 	bl	800ea70 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001cca:	4b48      	ldr	r3, [pc, #288]	; (8001dec <SysTick_Handler+0x89c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80da 	beq.w	8001e88 <SysTick_Handler+0x938>
 8001cd4:	2117      	movs	r1, #23
 8001cd6:	484e      	ldr	r0, [pc, #312]	; (8001e10 <SysTick_Handler+0x8c0>)
 8001cd8:	f7ff fc1e 	bl	8001518 <ITM0_Write>
			 break;
 8001cdc:	e0d4      	b.n	8001e88 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <SysTick_Handler+0x89c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80d0 	beq.w	8001e88 <SysTick_Handler+0x938>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	484a      	ldr	r0, [pc, #296]	; (8001e14 <SysTick_Handler+0x8c4>)
 8001cec:	f7ff fc14 	bl	8001518 <ITM0_Write>
			 break;
 8001cf0:	e0ca      	b.n	8001e88 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <SysTick_Handler+0x89c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <SysTick_Handler+0x7b2>
 8001cfa:	2115      	movs	r1, #21
 8001cfc:	4846      	ldr	r0, [pc, #280]	; (8001e18 <SysTick_Handler+0x8c8>)
 8001cfe:	f7ff fc0b 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d08:	e0bf      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <SysTick_Handler+0x89c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <SysTick_Handler+0x7ca>
 8001d12:	2114      	movs	r1, #20
 8001d14:	4841      	ldr	r0, [pc, #260]	; (8001e1c <SysTick_Handler+0x8cc>)
 8001d16:	f7ff fbff 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d20:	e0b3      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001d22:	4b32      	ldr	r3, [pc, #200]	; (8001dec <SysTick_Handler+0x89c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <SysTick_Handler+0x7e2>
 8001d2a:	2116      	movs	r1, #22
 8001d2c:	483c      	ldr	r0, [pc, #240]	; (8001e20 <SysTick_Handler+0x8d0>)
 8001d2e:	f7ff fbf3 	bl	8001518 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001d32:	2208      	movs	r2, #8
 8001d34:	2100      	movs	r1, #0
 8001d36:	4827      	ldr	r0, [pc, #156]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d38:	f00c f814 	bl	800dd64 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d3c:	bf00      	nop
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <SysTick_Handler+0x8a4>)
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	230f      	movs	r3, #15
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d4e:	f00b fede 	bl	800db0e <SPI_ETH_REG>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f2      	bne.n	8001d3e <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d5e:	e094      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <SysTick_Handler+0x89c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <SysTick_Handler+0x820>
 8001d68:	2117      	movs	r1, #23
 8001d6a:	482e      	ldr	r0, [pc, #184]	; (8001e24 <SysTick_Handler+0x8d4>)
 8001d6c:	f7ff fbd4 	bl	8001518 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001d70:	2208      	movs	r2, #8
 8001d72:	2100      	movs	r1, #0
 8001d74:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d76:	f00b fff5 	bl	800dd64 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001d7a:	bf00      	nop
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <SysTick_Handler+0x8a4>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	230f      	movs	r3, #15
 8001d86:	2201      	movs	r2, #1
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d8c:	f00b febf 	bl	800db0e <SPI_ETH_REG>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f2      	bne.n	8001d7c <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <SysTick_Handler+0x884>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d9c:	e075      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <SysTick_Handler+0x89c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <SysTick_Handler+0x85e>
 8001da6:	2115      	movs	r1, #21
 8001da8:	481f      	ldr	r0, [pc, #124]	; (8001e28 <SysTick_Handler+0x8d8>)
 8001daa:	f7ff fbb5 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <SysTick_Handler+0x884>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001db4:	e069      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <SysTick_Handler+0x89c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <SysTick_Handler+0x876>
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	481a      	ldr	r0, [pc, #104]	; (8001e2c <SysTick_Handler+0x8dc>)
 8001dc2:	f7ff fba9 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <SysTick_Handler+0x884>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dcc:	e05d      	b.n	8001e8a <SysTick_Handler+0x93a>
 8001dce:	bf00      	nop
 8001dd0:	20001740 	.word	0x20001740
 8001dd4:	200025e0 	.word	0x200025e0
 8001dd8:	2000364e 	.word	0x2000364e
 8001ddc:	200018d4 	.word	0x200018d4
 8001de0:	200025fc 	.word	0x200025fc
 8001de4:	2000364a 	.word	0x2000364a
 8001de8:	20003cc4 	.word	0x20003cc4
 8001dec:	200025d8 	.word	0x200025d8
 8001df0:	08010368 	.word	0x08010368
 8001df4:	20003650 	.word	0x20003650
 8001df8:	20003648 	.word	0x20003648
 8001dfc:	2000364c 	.word	0x2000364c
 8001e00:	2000174d 	.word	0x2000174d
 8001e04:	20002dfc 	.word	0x20002dfc
 8001e08:	20001a60 	.word	0x20001a60
 8001e0c:	20001fac 	.word	0x20001fac
 8001e10:	0801037c 	.word	0x0801037c
 8001e14:	08010358 	.word	0x08010358
 8001e18:	08010390 	.word	0x08010390
 8001e1c:	080103a8 	.word	0x080103a8
 8001e20:	080103c0 	.word	0x080103c0
 8001e24:	080103d8 	.word	0x080103d8
 8001e28:	080103f0 	.word	0x080103f0
 8001e2c:	08010408 	.word	0x08010408
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <SysTick_Handler+0xa6c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <SysTick_Handler+0x8f0>
 8001e38:	2112      	movs	r1, #18
 8001e3a:	4861      	ldr	r0, [pc, #388]	; (8001fc0 <SysTick_Handler+0xa70>)
 8001e3c:	f7ff fb6c 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e40:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <SysTick_Handler+0xa74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e46:	e020      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <SysTick_Handler+0xa6c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <SysTick_Handler+0x908>
 8001e50:	2113      	movs	r1, #19
 8001e52:	485d      	ldr	r0, [pc, #372]	; (8001fc8 <SysTick_Handler+0xa78>)
 8001e54:	f7ff fb60 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <SysTick_Handler+0xa74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e5e:	e014      	b.n	8001e8a <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001e60:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <SysTick_Handler+0xa6c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <SysTick_Handler+0x920>
 8001e68:	2111      	movs	r1, #17
 8001e6a:	4858      	ldr	r0, [pc, #352]	; (8001fcc <SysTick_Handler+0xa7c>)
 8001e6c:	f7ff fb54 	bl	8001518 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e70:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <SysTick_Handler+0xa74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e76:	e008      	b.n	8001e8a <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001e78:	4852      	ldr	r0, [pc, #328]	; (8001fc4 <SysTick_Handler+0xa74>)
 8001e7a:	f00b fe21 	bl	800dac0 <SPI_ETH>
 8001e7e:	e004      	b.n	8001e8a <SysTick_Handler+0x93a>
			 default:
 8001e80:	bf00      	nop
 8001e82:	e002      	b.n	8001e8a <SysTick_Handler+0x93a>
			 break;
 8001e84:	bf00      	nop
 8001e86:	e000      	b.n	8001e8a <SysTick_Handler+0x93a>
			 break;
 8001e88:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <SysTick_Handler+0xa80>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d102      	bne.n	8001e98 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001e92:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <SysTick_Handler+0xa80>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001e98:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <SysTick_Handler+0xa84>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d104      	bne.n	8001eaa <SysTick_Handler+0x95a>
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <SysTick_Handler+0xa88>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <SysTick_Handler+0xa88>)
 8001ea8:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <SysTick_Handler+0xa88>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	dd0f      	ble.n	8001ed2 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <SysTick_Handler+0xa88>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <SysTick_Handler+0xa8c>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <SysTick_Handler+0xa84>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <SysTick_Handler+0xa90>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <SysTick_Handler+0xa94>)
 8001eca:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <SysTick_Handler+0xa90>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 fe4b 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d105      	bne.n	8001eec <SysTick_Handler+0x99c>
	{
		ticks++;
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <SysTick_Handler+0xa9c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a41      	ldr	r2, [pc, #260]	; (8001fec <SysTick_Handler+0xa9c>)
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e002      	b.n	8001ef2 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <SysTick_Handler+0xa9c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001ef4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d158      	bne.n	8001fae <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8001efc:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <SysTick_Handler+0xaa0>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d017      	beq.n	8001f34 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f06:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d006      	beq.n	8001f1c <SysTick_Handler+0x9cc>
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f10:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f18:	f8c2 3cac 	str.w	r3, [r2, #3244]	; 0xcac
			if(wf._instruccion==2) wf._ticks2++;
 8001f1c:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f1e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d106      	bne.n	8001f34 <SysTick_Handler+0x9e4>
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f28:	f8d3 3cb0 	ldr.w	r3, [r3, #3248]	; 0xcb0
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f30:	f8c2 3cb0 	str.w	r3, [r2, #3248]	; 0xcb0
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f36:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d018      	beq.n	8001f70 <SysTick_Handler+0xa20>
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f40:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8001f44:	f241 527c 	movw	r2, #5500	; 0x157c
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	dd11      	ble.n	8001f70 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <SysTick_Handler+0xaa0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <SysTick_Handler+0xaa4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d107      	bne.n	8001f70 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001f60:	2201      	movs	r2, #1
 8001f62:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <SysTick_Handler+0xaa8>)
 8001f64:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <SysTick_Handler+0xaa4>)
 8001f66:	f003 fbac 	bl	80056c2 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <SysTick_Handler+0xaac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f72:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d11d      	bne.n	8001fb6 <SysTick_Handler+0xa66>
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001f7c:	f8d3 3cb0 	ldr.w	r3, [r3, #3248]	; 0xcb0
 8001f80:	f245 0214 	movw	r2, #20500	; 0x5014
 8001f84:	4293      	cmp	r3, r2
 8001f86:	dd16      	ble.n	8001fb6 <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <SysTick_Handler+0xaa0>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001f8e:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <SysTick_Handler+0xaa4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f242 020c 	movw	r2, #8204	; 0x200c
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10c      	bne.n	8001fb6 <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <SysTick_Handler+0xaa8>)
 8001fa0:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <SysTick_Handler+0xaa4>)
 8001fa2:	f003 fb8e 	bl	80056c2 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <SysTick_Handler+0xaac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	e003      	b.n	8001fb6 <SysTick_Handler+0xa66>
		wf._ticks=0;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <SysTick_Handler+0xa98>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200025d8 	.word	0x200025d8
 8001fc0:	0801041c 	.word	0x0801041c
 8001fc4:	200025e0 	.word	0x200025e0
 8001fc8:	08010430 	.word	0x08010430
 8001fcc:	08010444 	.word	0x08010444
 8001fd0:	20000374 	.word	0x20000374
 8001fd4:	20003696 	.word	0x20003696
 8001fd8:	20003cd4 	.word	0x20003cd4
 8001fdc:	20003cd8 	.word	0x20003cd8
 8001fe0:	20003cd0 	.word	0x20003cd0
 8001fe4:	20003cdc 	.word	0x20003cdc
 8001fe8:	200009fc 	.word	0x200009fc
 8001fec:	20003cc8 	.word	0x20003cc8
 8001ff0:	20003697 	.word	0x20003697
 8001ff4:	200002a4 	.word	0x200002a4
 8001ff8:	20003ca8 	.word	0x20003ca8
 8001ffc:	20003694 	.word	0x20003694

08002000 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_UART_ErrorCallback+0x98>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11c      	bne.n	800204c <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_UART_ErrorCallback+0x9c>)
 800201c:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8002020:	3301      	adds	r3, #1
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_UART_ErrorCallback+0x9c>)
 8002024:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
			aore=ERRUART->Instance->SR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f003 fa3c 	bl	80054b6 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800203e:	f7ff f965 	bl	800130c <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002042:	2201      	movs	r2, #1
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_UART_ErrorCallback+0xa0>)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f003 fb3b 	bl	80056c2 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_UART_ErrorCallback+0xa4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11c      	bne.n	8002090 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_UART_ErrorCallback+0x9c>)
 8002060:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8002064:	3301      	adds	r3, #1
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_UART_ErrorCallback+0x9c>)
 8002068:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
			aore=ERRUART->Instance->SR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f003 fa1a 	bl	80054b6 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002082:	f7ff f96d 	bl	8001360 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002086:	2201      	movs	r2, #1
 8002088:	4905      	ldr	r1, [pc, #20]	; (80020a0 <HAL_UART_ErrorCallback+0xa0>)
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f003 fb19 	bl	80056c2 <HAL_UART_Receive_IT>
	}
}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40011000 	.word	0x40011000
 800209c:	200009fc 	.word	0x200009fc
 80020a0:	20003ca8 	.word	0x20003ca8
 80020a4:	40004400 	.word	0x40004400

080020a8 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <HAL_UART_RxCpltCallback+0xc0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d123      	bne.n	8002102 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_UART_RxCpltCallback+0xc4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_UART_RxCpltCallback+0xc8>)
 80020c0:	7811      	ldrb	r1, [r2, #0]
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_UART_RxCpltCallback+0xcc>)
 80020c4:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_UART_RxCpltCallback+0xc4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_UART_RxCpltCallback+0xc4>)
 80020ce:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_UART_RxCpltCallback+0xc4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	db03      	blt.n	80020e2 <HAL_UART_RxCpltCallback+0x3a>
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_UART_RxCpltCallback+0xc4>)
 80020dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e0:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80020e2:	2100      	movs	r1, #0
 80020e4:	4824      	ldr	r0, [pc, #144]	; (8002178 <HAL_UART_RxCpltCallback+0xd0>)
 80020e6:	f002 f9ed 	bl	80044c4 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80020ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ee:	2201      	movs	r2, #1
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_UART_RxCpltCallback+0xd4>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80020f8:	2201      	movs	r2, #1
 80020fa:	491d      	ldr	r1, [pc, #116]	; (8002170 <HAL_UART_RxCpltCallback+0xc8>)
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f003 fae0 	bl	80056c2 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_UART_RxCpltCallback+0xd8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d128      	bne.n	800215e <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_UART_RxCpltCallback+0xdc>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_UART_RxCpltCallback+0xe0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2d1      	uxtb	r1, r2
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_UART_RxCpltCallback+0xe4>)
 8002118:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_UART_RxCpltCallback+0xe0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_UART_RxCpltCallback+0xe0>)
 8002122:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_UART_RxCpltCallback+0xe0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212c:	db03      	blt.n	8002136 <HAL_UART_RxCpltCallback+0x8e>
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_UART_RxCpltCallback+0xe0>)
 8002130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002134:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	2102      	movs	r1, #2
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <HAL_UART_RxCpltCallback+0xe8>)
 800213c:	f001 f998 	bl	8003470 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002140:	2100      	movs	r1, #0
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <HAL_UART_RxCpltCallback+0xec>)
 8002144:	f002 f9be 	bl	80044c4 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_UART_RxCpltCallback+0xf0>)
 800214a:	2201      	movs	r2, #1
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_UART_RxCpltCallback+0xf4>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002154:	2201      	movs	r2, #1
 8002156:	490b      	ldr	r1, [pc, #44]	; (8002184 <HAL_UART_RxCpltCallback+0xdc>)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f003 fab2 	bl	80056c2 <HAL_UART_Receive_IT>
		 }
 }
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40011000 	.word	0x40011000
 800216c:	20003ce0 	.word	0x20003ce0
 8002170:	20003ca8 	.word	0x20003ca8
 8002174:	200036a4 	.word	0x200036a4
 8002178:	20000214 	.word	0x20000214
 800217c:	20003694 	.word	0x20003694
 8002180:	40004400 	.word	0x40004400
 8002184:	20003cac 	.word	0x20003cac
 8002188:	20003ce4 	.word	0x20003ce4
 800218c:	200038a4 	.word	0x200038a4
 8002190:	40020000 	.word	0x40020000
 8002194:	2000025c 	.word	0x2000025c
 8002198:	40000400 	.word	0x40000400
 800219c:	20003695 	.word	0x20003695

080021a0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d12d      	bne.n	800220e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80021b2:	2100      	movs	r1, #0
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f002 fa83 	bl	80046c0 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021cc:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	4932      	ldr	r1, [pc, #200]	; (80022b0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80021e8:	4833      	ldr	r0, [pc, #204]	; (80022b8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80021ea:	f00c fc41 	bl	800ea70 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80021ee:	2201      	movs	r2, #1
 80021f0:	4932      	ldr	r1, [pc, #200]	; (80022bc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80021f2:	4833      	ldr	r0, [pc, #204]	; (80022c0 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80021f4:	f003 fa65 	bl	80056c2 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80021fa:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	482b      	ldr	r0, [pc, #172]	; (80022b8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800220a:	f7ff f985 	bl	8001518 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d13f      	bne.n	8002298 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f002 fa50 	bl	80046c0 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2102      	movs	r1, #2
 8002224:	4829      	ldr	r0, [pc, #164]	; (80022cc <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8002226:	f001 f923 	bl	8003470 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800223c:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002258:	4822      	ldr	r0, [pc, #136]	; (80022e4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800225a:	f00c fc09 	bl	800ea70 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8002264:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002268:	2201      	movs	r2, #1
 800226a:	4920      	ldr	r1, [pc, #128]	; (80022ec <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 800226c:	4820      	ldr	r0, [pc, #128]	; (80022f0 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 800226e:	f003 fa28 	bl	80056c2 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002274:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10d      	bne.n	8002298 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 800227c:	2117      	movs	r1, #23
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8002280:	f7ff f94a 	bl	8001518 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4815      	ldr	r0, [pc, #84]	; (80022e0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800228c:	f7ff f944 	bl	8001518 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8002290:	2102      	movs	r1, #2
 8002292:	4819      	ldr	r0, [pc, #100]	; (80022f8 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8002294:	f7ff f940 	bl	8001518 <ITM0_Write>
				 }
		}
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20003698 	.word	0x20003698
 80022a4:	20003694 	.word	0x20003694
 80022a8:	20003ce0 	.word	0x20003ce0
 80022ac:	20003cb4 	.word	0x20003cb4
 80022b0:	200036a4 	.word	0x200036a4
 80022b4:	20003ca4 	.word	0x20003ca4
 80022b8:	20003aa4 	.word	0x20003aa4
 80022bc:	20003ca8 	.word	0x20003ca8
 80022c0:	200002a4 	.word	0x200002a4
 80022c4:	200009fc 	.word	0x200009fc
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40020000 	.word	0x40020000
 80022d0:	20003699 	.word	0x20003699
 80022d4:	20003695 	.word	0x20003695
 80022d8:	20003ce4 	.word	0x20003ce4
 80022dc:	20003cb8 	.word	0x20003cb8
 80022e0:	200038a4 	.word	0x200038a4
 80022e4:	200003ce 	.word	0x200003ce
 80022e8:	20000378 	.word	0x20000378
 80022ec:	20003cac 	.word	0x20003cac
 80022f0:	200002e8 	.word	0x200002e8
 80022f4:	08010458 	.word	0x08010458
 80022f8:	08010470 	.word	0x08010470

080022fc <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <ESP8266_HW_Reset+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <ESP8266_HW_Reset+0x44>)
 800230e:	f001 f8af 	bl	8003470 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002312:	2115      	movs	r1, #21
 8002314:	480b      	ldr	r0, [pc, #44]	; (8002344 <ESP8266_HW_Reset+0x48>)
 8002316:	f7ff f8ff 	bl	8001518 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800231a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800231e:	f000 fc45 	bl	8002bac <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002322:	210f      	movs	r1, #15
 8002324:	4808      	ldr	r0, [pc, #32]	; (8002348 <ESP8266_HW_Reset+0x4c>)
 8002326:	f7ff f8f7 	bl	8001518 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800232a:	2201      	movs	r2, #1
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <ESP8266_HW_Reset+0x44>)
 8002332:	f001 f89d 	bl	8003470 <HAL_GPIO_WritePin>
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20003691 	.word	0x20003691
 8002340:	40020000 	.word	0x40020000
 8002344:	08010284 	.word	0x08010284
 8002348:	08010474 	.word	0x08010474

0800234c <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af06      	add	r7, sp, #24
 8002352:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	220c      	movs	r2, #12
 8002358:	4943      	ldr	r1, [pc, #268]	; (8002468 <ESP8266_HW_Init+0x11c>)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f003 f8da 	bl	8005514 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002364:	f000 fc22 	bl	8002bac <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002368:	4b40      	ldr	r3, [pc, #256]	; (800246c <ESP8266_HW_Init+0x120>)
 800236a:	2205      	movs	r2, #5
 800236c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		  wf._n_orig=UART_RX_items;
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <ESP8266_HW_Init+0x124>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <ESP8266_HW_Init+0x120>)
 8002376:	f8c2 3cd0 	str.w	r3, [r2, #3280]	; 0xcd0

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800237a:	e00e      	b.n	800239a <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 800237c:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <ESP8266_HW_Init+0x124>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3a      	ldr	r2, [pc, #232]	; (800246c <ESP8266_HW_Init+0x120>)
 8002382:	f8c2 3cd0 	str.w	r3, [r2, #3280]	; 0xcd0
			  	  if (ESP_ticks>=5000)
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <ESP8266_HW_Init+0x128>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f241 3287 	movw	r2, #4999	; 0x1387
 800238e:	4293      	cmp	r3, r2
 8002390:	dd03      	ble.n	800239a <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <ESP8266_HW_Init+0x12c>)
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002398:	e012      	b.n	80023c0 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800239a:	2300      	movs	r3, #0
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <ESP8266_HW_Init+0x130>)
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <ESP8266_HW_Init+0x134>)
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <ESP8266_HW_Init+0x138>)
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <ESP8266_HW_Init+0x13c>)
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <ESP8266_HW_Init+0x140>)
 80023b0:	4a37      	ldr	r2, [pc, #220]	; (8002490 <ESP8266_HW_Init+0x144>)
 80023b2:	4938      	ldr	r1, [pc, #224]	; (8002494 <ESP8266_HW_Init+0x148>)
 80023b4:	4838      	ldr	r0, [pc, #224]	; (8002498 <ESP8266_HW_Init+0x14c>)
 80023b6:	f00b fff5 	bl	800e3a4 <FT_String_ND>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d1dd      	bne.n	800237c <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <ESP8266_HW_Init+0x12c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d129      	bne.n	800241c <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <ESP8266_HW_Init+0x120>)
 80023ca:	2205      	movs	r2, #5
 80023cc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			  wf._n_orig=UART_RX_items;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <ESP8266_HW_Init+0x124>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <ESP8266_HW_Init+0x120>)
 80023d6:	f8c2 3cd0 	str.w	r3, [r2, #3280]	; 0xcd0
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023da:	e00a      	b.n	80023f2 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <ESP8266_HW_Init+0x124>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <ESP8266_HW_Init+0x120>)
 80023e2:	f8c2 3cd0 	str.w	r3, [r2, #3280]	; 0xcd0
				  if (ESP_ticks>=5000)
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <ESP8266_HW_Init+0x128>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dc13      	bgt.n	800241a <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023f2:	2300      	movs	r3, #0
 80023f4:	9304      	str	r3, [sp, #16]
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <ESP8266_HW_Init+0x130>)
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <ESP8266_HW_Init+0x134>)
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <ESP8266_HW_Init+0x138>)
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <ESP8266_HW_Init+0x13c>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <ESP8266_HW_Init+0x140>)
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <ESP8266_HW_Init+0x144>)
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <ESP8266_HW_Init+0x148>)
 800240c:	4822      	ldr	r0, [pc, #136]	; (8002498 <ESP8266_HW_Init+0x14c>)
 800240e:	f00b ffc9 	bl	800e3a4 <FT_String_ND>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d1e1      	bne.n	80023dc <ESP8266_HW_Init+0x90>
 8002418:	e000      	b.n	800241c <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800241a:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <ESP8266_HW_Init+0x128>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f241 3287 	movw	r2, #4999	; 0x1387
 8002424:	4293      	cmp	r3, r2
 8002426:	dc06      	bgt.n	8002436 <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <ESP8266_HW_Init+0x150>)
 800242a:	220a      	movs	r2, #10
 800242c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <ESP8266_HW_Init+0x128>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e008      	b.n	8002448 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <ESP8266_HW_Init+0x150>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <ESP8266_HW_Init+0x150>)
 8002440:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <ESP8266_HW_Init+0x128>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <ESP8266_HW_Init+0x150>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d981      	bls.n	8002354 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <ESP8266_HW_Init+0x150>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b0a      	cmp	r3, #10
 8002456:	d101      	bne.n	800245c <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 800245c:	2300      	movs	r3, #0
	  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	08010484 	.word	0x08010484
 800246c:	200009fc 	.word	0x200009fc
 8002470:	20003cb4 	.word	0x20003cb4
 8002474:	20003cbc 	.word	0x20003cbc
 8002478:	20003692 	.word	0x20003692
 800247c:	20001488 	.word	0x20001488
 8002480:	20003ccc 	.word	0x20003ccc
 8002484:	200016d4 	.word	0x200016d4
 8002488:	20001288 	.word	0x20001288
 800248c:	200016e0 	.word	0x200016e0
 8002490:	08010494 	.word	0x08010494
 8002494:	200016cc 	.word	0x200016cc
 8002498:	20003aa4 	.word	0x20003aa4
 800249c:	20003691 	.word	0x20003691

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <Error_Handler+0x8>
	...

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_MspInit+0x4c>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_SPI_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_SPI_MspInit+0x88>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_SPI_MspInit+0x88>)
 8002528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_SPI_MspInit+0x88>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_SPI_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_SPI_MspInit+0x88>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_SPI_MspInit+0x88>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002556:	23e0      	movs	r3, #224	; 0xe0
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002566:	2305      	movs	r3, #5
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_SPI_MspInit+0x8c>)
 8002572:	f000 fd15 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40013000 	.word	0x40013000
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d116      	bne.n	80025cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	201c      	movs	r0, #28
 80025c0:	f000 fc17 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c4:	201c      	movs	r0, #28
 80025c6:	f000 fc30 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ca:	e01a      	b.n	8002602 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_TIM_Base_MspInit+0x84>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d115      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_TIM_Base_MspInit+0x80>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	201d      	movs	r0, #29
 80025f8:	f000 fbfb 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025fc:	201d      	movs	r0, #29
 80025fe:	f000 fc14 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40000400 	.word	0x40000400

08002614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_UART_MspInit+0x170>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d135      	bne.n	80026a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_UART_MspInit+0x174>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a4b      	ldr	r2, [pc, #300]	; (8002788 <HAL_UART_MspInit+0x174>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800266e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002680:	2307      	movs	r3, #7
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	4840      	ldr	r0, [pc, #256]	; (800278c <HAL_UART_MspInit+0x178>)
 800268c:	f000 fc88 	bl	8002fa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	2025      	movs	r0, #37	; 0x25
 8002696:	f000 fbac 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800269a:	2025      	movs	r0, #37	; 0x25
 800269c:	f000 fbc5 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026a0:	e06b      	b.n	800277a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <HAL_UART_MspInit+0x17c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d134      	bne.n	8002716 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_UART_MspInit+0x174>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e4:	230c      	movs	r3, #12
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f4:	2307      	movs	r3, #7
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fc:	4619      	mov	r1, r3
 80026fe:	4823      	ldr	r0, [pc, #140]	; (800278c <HAL_UART_MspInit+0x178>)
 8002700:	f000 fc4e 	bl	8002fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	2026      	movs	r0, #38	; 0x26
 800270a:	f000 fb72 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800270e:	2026      	movs	r0, #38	; 0x26
 8002710:	f000 fb8b 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 8002714:	e031      	b.n	800277a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_UART_MspInit+0x180>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d12c      	bne.n	800277a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <HAL_UART_MspInit+0x174>)
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	6453      	str	r3, [r2, #68]	; 0x44
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_UART_MspInit+0x174>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6313      	str	r3, [r2, #48]	; 0x30
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_UART_MspInit+0x174>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002758:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800276a:	2308      	movs	r3, #8
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_UART_MspInit+0x178>)
 8002776:	f000 fc13 	bl	8002fa0 <HAL_GPIO_Init>
}
 800277a:	bf00      	nop
 800277c:	3738      	adds	r7, #56	; 0x38
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40011000 	.word	0x40011000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000
 8002790:	40004400 	.word	0x40004400
 8002794:	40011400 	.word	0x40011400

08002798 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_UART_MspDeInit+0x80>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10e      	bne.n	80027c8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027b0:	f023 0310 	bic.w	r3, r3, #16
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80027b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027ba:	4819      	ldr	r0, [pc, #100]	; (8002820 <HAL_UART_MspDeInit+0x88>)
 80027bc:	f000 fd74 	bl	80032a8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80027c0:	2025      	movs	r0, #37	; 0x25
 80027c2:	f000 fb40 	bl	8002e46 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80027c6:	e022      	b.n	800280e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_UART_MspDeInit+0x8c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10d      	bne.n	80027ee <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80027de:	210c      	movs	r1, #12
 80027e0:	480f      	ldr	r0, [pc, #60]	; (8002820 <HAL_UART_MspDeInit+0x88>)
 80027e2:	f000 fd61 	bl	80032a8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80027e6:	2026      	movs	r0, #38	; 0x26
 80027e8:	f000 fb2d 	bl	8002e46 <HAL_NVIC_DisableIRQ>
}
 80027ec:	e00f      	b.n	800280e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_UART_MspDeInit+0x90>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10a      	bne.n	800280e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_UART_MspDeInit+0x84>)
 80027fe:	f023 0320 	bic.w	r3, r3, #32
 8002802:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002804:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_UART_MspDeInit+0x88>)
 800280a:	f000 fd4d 	bl	80032a8 <HAL_GPIO_DeInit>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40011000 	.word	0x40011000
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	40004400 	.word	0x40004400
 8002828:	40011400 	.word	0x40011400

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <NMI_Handler+0x4>

08002832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <HardFault_Handler+0x4>

08002838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <MemManage_Handler+0x4>

0800283e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <BusFault_Handler+0x4>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <UsageFault_Handler+0x4>

0800284a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <TIM2_IRQHandler+0x10>)
 800287a:	f002 f82d 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000214 	.word	0x20000214

08002888 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <TIM3_IRQHandler+0x10>)
 800288e:	f002 f823 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000025c 	.word	0x2000025c

0800289c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <USART1_IRQHandler+0x10>)
 80028a2:	f002 ff3f 	bl	8005724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200002a4 	.word	0x200002a4

080028b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <USART2_IRQHandler+0x10>)
 80028b6:	f002 ff35 	bl	8005724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200002e8 	.word	0x200002e8

080028c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028de:	f00c f917 	bl	800eb10 <__errno>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
	return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffe7 	bl	80028d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002906:	e7fe      	b.n	8002906 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
	}
	return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f00c f87c 	bl	800eb10 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20020000 	.word	0x20020000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	20003cec 	.word	0x20003cec
 8002a4c:	20003d08 	.word	0x20003d08

08002a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a78:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a7a:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a90:	4c0b      	ldr	r4, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9e:	f7ff ffd7 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f00c f83b 	bl	800eb1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa6:	f7fd fdf9 	bl	800069c <main>
  bx  lr    
 8002aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002ab8:	08010d14 	.word	0x08010d14
  ldr r2, =_sbss
 8002abc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002ac0:	20003d04 	.word	0x20003d04

08002ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 f973 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	200f      	movs	r0, #15
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fcd6 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f999 	bl	8002e62 <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 f953 	bl	8002df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000084 	.word	0x20000084
 8002b64:	2000008c 	.word	0x2000008c
 8002b68:	20000088 	.word	0x20000088

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000008c 	.word	0x2000008c
 8002b90:	20003cf0 	.word	0x20003cf0

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20003cf0 	.word	0x20003cf0

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff ffee 	bl	8002b94 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000008c 	.word	0x2000008c

08002bf4 <__NVIC_SetPriorityGrouping>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_DisableIRQ>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	db12      	blt.n	8002ccc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <__NVIC_DisableIRQ+0x44>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cba:	3320      	adds	r3, #32
 8002cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cc0:	f3bf 8f4f 	dsb	sy
}
 8002cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cc6:	f3bf 8f6f 	isb	sy
}
 8002cca:	bf00      	nop
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff05 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff1a 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff8e 	bl	8002d30 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5d 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff0d 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff1d 	bl	8002c94 <__NVIC_DisableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff94 	bl	8002d98 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff fe84 	bl	8002b94 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d008      	beq.n	8002eac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e052      	b.n	8002f52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0216 	bic.w	r2, r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <HAL_DMA_Abort+0x62>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0208 	bic.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efc:	e013      	b.n	8002f26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efe:	f7ff fe49 	bl	8002b94 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d90c      	bls.n	8002f26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e015      	b.n	8002f52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e4      	bne.n	8002efe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	223f      	movs	r2, #63	; 0x3f
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e00c      	b.n	8002f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e159      	b.n	8003270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f040 8148 	bne.w	800326a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d005      	beq.n	8002ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d130      	bne.n	8003054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 0201 	and.w	r2, r3, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b03      	cmp	r3, #3
 800305e:	d017      	beq.n	8003090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d123      	bne.n	80030e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a2 	beq.w	800326a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b57      	ldr	r3, [pc, #348]	; (8003288 <HAL_GPIO_Init+0x2e8>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_GPIO_Init+0x2e8>)
 8003130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_GPIO_Init+0x2e8>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003142:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_GPIO_Init+0x2ec>)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a49      	ldr	r2, [pc, #292]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d019      	beq.n	80031a2 <HAL_GPIO_Init+0x202>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a48      	ldr	r2, [pc, #288]	; (8003294 <HAL_GPIO_Init+0x2f4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0x1fe>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_GPIO_Init+0x2f8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00d      	beq.n	800319a <HAL_GPIO_Init+0x1fa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_GPIO_Init+0x2fc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <HAL_GPIO_Init+0x1f6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a45      	ldr	r2, [pc, #276]	; (80032a0 <HAL_GPIO_Init+0x300>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_GPIO_Init+0x1f2>
 800318e:	2304      	movs	r3, #4
 8003190:	e008      	b.n	80031a4 <HAL_GPIO_Init+0x204>
 8003192:	2307      	movs	r3, #7
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x204>
 8003196:	2303      	movs	r3, #3
 8003198:	e004      	b.n	80031a4 <HAL_GPIO_Init+0x204>
 800319a:	2302      	movs	r3, #2
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_Init+0x204>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_GPIO_Init+0x204>
 80031a2:	2300      	movs	r3, #0
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	f002 0203 	and.w	r2, r2, #3
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	4093      	lsls	r3, r2
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b4:	4935      	ldr	r1, [pc, #212]	; (800328c <HAL_GPIO_Init+0x2ec>)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_GPIO_Init+0x304>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e6:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <HAL_GPIO_Init+0x304>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_GPIO_Init+0x304>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003210:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323a:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_GPIO_Init+0x304>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003264:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3301      	adds	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	f67f aea2 	bls.w	8002fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	40013800 	.word	0x40013800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40020800 	.word	0x40020800
 800329c:	40020c00 	.word	0x40020c00
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e0bb      	b.n	800343c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c4:	2201      	movs	r2, #1
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	429a      	cmp	r2, r3
 80032dc:	f040 80ab 	bne.w	8003436 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80032e0:	4a5c      	ldr	r2, [pc, #368]	; (8003454 <HAL_GPIO_DeInit+0x1ac>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_GPIO_DeInit+0x1b0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_DeInit+0x96>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_GPIO_DeInit+0x1b4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_DeInit+0x92>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_DeInit+0x1b8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_DeInit+0x8e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_DeInit+0x1bc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_DeInit+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_DeInit+0x1c0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_DeInit+0x86>
 800332a:	2304      	movs	r3, #4
 800332c:	e008      	b.n	8003340 <HAL_GPIO_DeInit+0x98>
 800332e:	2307      	movs	r3, #7
 8003330:	e006      	b.n	8003340 <HAL_GPIO_DeInit+0x98>
 8003332:	2303      	movs	r3, #3
 8003334:	e004      	b.n	8003340 <HAL_GPIO_DeInit+0x98>
 8003336:	2302      	movs	r3, #2
 8003338:	e002      	b.n	8003340 <HAL_GPIO_DeInit+0x98>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_GPIO_DeInit+0x98>
 800333e:	2300      	movs	r3, #0
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	f002 0203 	and.w	r2, r2, #3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4093      	lsls	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d132      	bne.n	80033b6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	4944      	ldr	r1, [pc, #272]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 800335a:	4013      	ands	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	4941      	ldr	r1, [pc, #260]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 8003368:	4013      	ands	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	493d      	ldr	r1, [pc, #244]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 8003376:	4013      	ands	r3, r2
 8003378:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800337a:	4b3c      	ldr	r3, [pc, #240]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	493a      	ldr	r1, [pc, #232]	; (800346c <HAL_GPIO_DeInit+0x1c4>)
 8003384:	4013      	ands	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003398:	4a2e      	ldr	r2, [pc, #184]	; (8003454 <HAL_GPIO_DeInit+0x1ac>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	482a      	ldr	r0, [pc, #168]	; (8003454 <HAL_GPIO_DeInit+0x1ac>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	400a      	ands	r2, r1
 80033b0:	3302      	adds	r3, #2
 80033b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2103      	movs	r1, #3
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	08d2      	lsrs	r2, r2, #3
 80033ec:	4019      	ands	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2103      	movs	r1, #3
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	2101      	movs	r1, #1
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	401a      	ands	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2103      	movs	r1, #3
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	401a      	ands	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	f67f af40 	bls.w	80032c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40013800 	.word	0x40013800
 8003458:	40020000 	.word	0x40020000
 800345c:	40020400 	.word	0x40020400
 8003460:	40020800 	.word	0x40020800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40013c00 	.word	0x40013c00

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800348c:	e003      	b.n	8003496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4013      	ands	r3, r2
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43d9      	mvns	r1, r3
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	400b      	ands	r3, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e267      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d075      	beq.n	80035e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d00c      	beq.n	800351c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b85      	ldr	r3, [pc, #532]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d112      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b82      	ldr	r3, [pc, #520]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351a:	d10b      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	4b7e      	ldr	r3, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05b      	beq.n	80035e0 <HAL_RCC_OscConfig+0x108>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d157      	bne.n	80035e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e242      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x74>
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x98>
 8003556:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6f      	ldr	r2, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6c      	ldr	r2, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 8003570:	4b69      	ldr	r3, [pc, #420]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a68      	ldr	r2, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fb00 	bl	8002b94 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7ff fafc 	bl	8002b94 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e207      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xc0>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7ff faec 	bl	8002b94 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7ff fae8 	bl	8002b94 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1f3      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0xe8>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b44      	ldr	r3, [pc, #272]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c7      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4937      	ldr	r1, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x244>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7ff faa1 	bl	8002b94 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7ff fa9d 	bl	8002b94 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a8      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x244>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7ff fa80 	bl	8002b94 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7ff fa7c 	bl	8002b94 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e187      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d036      	beq.n	8003730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x248>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7ff fa60 	bl	8002b94 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d8:	f7ff fa5c 	bl	8002b94 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e167      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x200>
 80036f6:	e01b      	b.n	8003730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x248>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7ff fa49 	bl	8002b94 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e00e      	b.n	8003724 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003706:	f7ff fa45 	bl	8002b94 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d907      	bls.n	8003724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e150      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
 8003718:	40023800 	.word	0x40023800
 800371c:	42470000 	.word	0x42470000
 8003720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ea      	bne.n	8003706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8097 	beq.w	800386c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b7d      	ldr	r3, [pc, #500]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a7c      	ldr	r2, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b7a      	ldr	r3, [pc, #488]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b77      	ldr	r3, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x474>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b74      	ldr	r3, [pc, #464]	; (800394c <HAL_RCC_OscConfig+0x474>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a73      	ldr	r2, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x474>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7ff fa05 	bl	8002b94 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7ff fa01 	bl	8002b94 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e10c      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_OscConfig+0x474>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2ea>
 80037b4:	4b64      	ldr	r3, [pc, #400]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a63      	ldr	r2, [pc, #396]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e01c      	b.n	80037fc <HAL_RCC_OscConfig+0x324>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x30c>
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a5b      	ldr	r2, [pc, #364]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0x324>
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	4b55      	ldr	r3, [pc, #340]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 0304 	bic.w	r3, r3, #4
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7ff f9c6 	bl	8002b94 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7ff f9c2 	bl	8002b94 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0cb      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCC_OscConfig+0x334>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7ff f9b0 	bl	8002b94 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7ff f9ac 	bl	8002b94 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0b5      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ee      	bne.n	8003838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b39      	ldr	r3, [pc, #228]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4a38      	ldr	r2, [pc, #224]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80a1 	beq.w	80039b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b08      	cmp	r3, #8
 8003880:	d05c      	beq.n	800393c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d141      	bne.n	800390e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7ff f980 	bl	8002b94 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7ff f97c 	bl	8002b94 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e087      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	491b      	ldr	r1, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7ff f955 	bl	8002b94 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7ff f951 	bl	8002b94 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e05c      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x416>
 800390c:	e054      	b.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7ff f93e 	bl	8002b94 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7ff f93a 	bl	8002b94 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e045      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x444>
 800393a:	e03d      	b.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e038      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
 8003950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x4ec>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d028      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d121      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d11a      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	3b01      	subs	r3, #1
 800399e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0cc      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d90c      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e067      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4934      	ldr	r1, [pc, #208]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7ff f86c 	bl	8002b94 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7ff f868 	bl	8002b94 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20c      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f821 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	490a      	ldr	r1, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe ffcc 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08010a7c 	.word	0x08010a7c
 8003b8c:	20000084 	.word	0x20000084
 8003b90:	20000088 	.word	0x20000088

08003b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b090      	sub	sp, #64	; 0x40
 8003b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bac:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	f200 80a1 	bhi.w	8003d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x3a>
 8003bc6:	e09b      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bcc:	e09b      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bce:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd2:	e098      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bde:	4b4d      	ldr	r3, [pc, #308]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d028      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c00:	fb03 f201 	mul.w	r2, r3, r1
 8003c04:	2300      	movs	r3, #0
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a43      	ldr	r2, [pc, #268]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c14:	460a      	mov	r2, r1
 8003c16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c20:	2200      	movs	r2, #0
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	61fa      	str	r2, [r7, #28]
 8003c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c2e:	f7fc fb3f 	bl	80002b0 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4613      	mov	r3, r2
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	e053      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	2200      	movs	r2, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	617a      	str	r2, [r7, #20]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c4e:	f04f 0b00 	mov.w	fp, #0
 8003c52:	4652      	mov	r2, sl
 8003c54:	465b      	mov	r3, fp
 8003c56:	f04f 0000 	mov.w	r0, #0
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	0159      	lsls	r1, r3, #5
 8003c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c64:	0150      	lsls	r0, r2, #5
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c86:	ebb2 0408 	subs.w	r4, r2, r8
 8003c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	00eb      	lsls	r3, r5, #3
 8003c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9c:	00e2      	lsls	r2, r4, #3
 8003c9e:	4614      	mov	r4, r2
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	eb14 030a 	adds.w	r3, r4, sl
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	eb45 030b 	adc.w	r3, r5, fp
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	028b      	lsls	r3, r1, #10
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	028a      	lsls	r2, r1, #10
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd8:	f7fc faea 	bl	80002b0 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3740      	adds	r7, #64	; 0x40
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	017d7840 	.word	0x017d7840

08003d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000084 	.word	0x20000084

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08010a8c 	.word	0x08010a8c

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08010a8c 	.word	0x08010a8c

08003d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07b      	b.n	8003e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003daa:	d009      	beq.n	8003dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
 8003db2:	e005      	b.n	8003dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe fb8e 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0104 	and.w	r1, r3, #4
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0210 	and.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x26>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e18a      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x33c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec8:	f7fe fe64 	bl	8002b94 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00f      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x70>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef0:	d107      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x68>
 8003efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f08:	e15b      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x82>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x82>
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f22:	e14e      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d003      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2205      	movs	r2, #5
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	d178      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x10a>
 8003f9e:	8b7b      	ldrh	r3, [r7, #26]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d166      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc8:	e053      	b.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d11b      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x176>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x176>
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d113      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d119      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x1b8>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d014      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800404e:	2301      	movs	r3, #1
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004052:	f7fe fd9f 	bl	8002b94 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405e:	429a      	cmp	r2, r3
 8004060:	d807      	bhi.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d003      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004070:	e0a7      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1a6      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x130>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1a1      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x130>
 8004086:	e07c      	b.n	8004182 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x1fc>
 8004090:	8b7b      	ldrh	r3, [r7, #26]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d16b      	bne.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	e057      	b.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11c      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d114      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d119      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x2ae>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004144:	2301      	movs	r3, #1
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004148:	f7fe fd24 	bl	8002b94 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004154:	429a      	cmp	r2, r3
 8004156:	d803      	bhi.n	8004160 <HAL_SPI_TransmitReceive+0x2c6>
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d102      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x2cc>
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800416c:	e029      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1a2      	bne.n	80040be <HAL_SPI_TransmitReceive+0x224>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d19d      	bne.n	80040be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8b2 	bl	80042f0 <SPI_EndRxTxTransaction>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800419e:	e010      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	e000      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	; 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f0:	f7fe fcd0 	bl	8002b94 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004200:	f7fe fcc8 	bl	8002b94 <HAL_GetTick>
 8004204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	015b      	lsls	r3, r3, #5
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	e054      	b.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d050      	beq.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004220:	f7fe fcb8 	bl	8002b94 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	429a      	cmp	r2, r3
 800422e:	d902      	bls.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d111      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	d004      	beq.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d107      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d10f      	bne.n	800429e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e017      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d19b      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000084 	.word	0x20000084

080042f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <SPI_EndRxTxTransaction+0x7c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <SPI_EndRxTxTransaction+0x80>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0d5b      	lsrs	r3, r3, #21
 8004308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431a:	d112      	bne.n	8004342 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ff5a 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3b01      	subs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d0f2      	beq.n	8004342 <SPI_EndRxTxTransaction+0x52>
 800435c:	e000      	b.n	8004360 <SPI_EndRxTxTransaction+0x70>
        break;
 800435e:	bf00      	nop
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000084 	.word	0x20000084
 8004370:	165e9f81 	.word	0x165e9f81

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e041      	b.n	800440a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe f8f6 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fce4 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e041      	b.n	80044a8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f839 	bl	80044b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f000 fc95 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_OC_Start_IT+0x28>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_OC_Start_IT+0x6e>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_OC_Start_IT+0x42>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_OC_Start_IT+0x6e>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_OC_Start_IT+0x5c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_OC_Start_IT+0x6e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0b3      	b.n	80046a2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_OC_Start_IT+0x86>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	e013      	b.n	8004572 <HAL_TIM_OC_Start_IT+0xae>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_OC_Start_IT+0x96>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	e00b      	b.n	8004572 <HAL_TIM_OC_Start_IT+0xae>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_OC_Start_IT+0xa6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	e003      	b.n	8004572 <HAL_TIM_OC_Start_IT+0xae>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d841      	bhi.n	80045fc <HAL_TIM_OC_Start_IT+0x138>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_OC_Start_IT+0xbc>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045fd 	.word	0x080045fd
 8004588:	080045fd 	.word	0x080045fd
 800458c:	080045fd 	.word	0x080045fd
 8004590:	080045c7 	.word	0x080045c7
 8004594:	080045fd 	.word	0x080045fd
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080045fd 	.word	0x080045fd
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	080045fd 	.word	0x080045fd
 80045b0:	080045eb 	.word	0x080045eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0202 	orr.w	r2, r2, #2
 80045c2:	60da      	str	r2, [r3, #12]
      break;
 80045c4:	e01d      	b.n	8004602 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0204 	orr.w	r2, r2, #4
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e014      	b.n	8004602 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	60da      	str	r2, [r3, #12]
      break;
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0210 	orr.w	r2, r2, #16
 80045f8:	60da      	str	r2, [r3, #12]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	bf00      	nop
  }

  if (status == HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d14b      	bne.n	80046a0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2201      	movs	r2, #1
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fe5b 	bl	80052cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a24      	ldr	r2, [pc, #144]	; (80046ac <HAL_TIM_OC_Start_IT+0x1e8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d107      	bne.n	8004630 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_TIM_OC_Start_IT+0x1e8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_OC_Start_IT+0x1a8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d013      	beq.n	800466c <HAL_TIM_OC_Start_IT+0x1a8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_OC_Start_IT+0x1a8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_OC_Start_IT+0x1a8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_OC_Start_IT+0x1a8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_TIM_OC_Start_IT+0x1f8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000

080046c0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d841      	bhi.n	8004758 <HAL_TIM_OC_Stop_IT+0x98>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <HAL_TIM_OC_Stop_IT+0x1c>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004759 	.word	0x08004759
 80046e4:	08004759 	.word	0x08004759
 80046e8:	08004759 	.word	0x08004759
 80046ec:	08004723 	.word	0x08004723
 80046f0:	08004759 	.word	0x08004759
 80046f4:	08004759 	.word	0x08004759
 80046f8:	08004759 	.word	0x08004759
 80046fc:	08004735 	.word	0x08004735
 8004700:	08004759 	.word	0x08004759
 8004704:	08004759 	.word	0x08004759
 8004708:	08004759 	.word	0x08004759
 800470c:	08004747 	.word	0x08004747
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0202 	bic.w	r2, r2, #2
 800471e:	60da      	str	r2, [r3, #12]
      break;
 8004720:	e01d      	b.n	800475e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0204 	bic.w	r2, r2, #4
 8004730:	60da      	str	r2, [r3, #12]
      break;
 8004732:	e014      	b.n	800475e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0208 	bic.w	r2, r2, #8
 8004742:	60da      	str	r2, [r3, #12]
      break;
 8004744:	e00b      	b.n	800475e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0210 	bic.w	r2, r2, #16
 8004754:	60da      	str	r2, [r3, #12]
      break;
 8004756:	e002      	b.n	800475e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	bf00      	nop
  }

  if (status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d157      	bne.n	8004814 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2200      	movs	r2, #0
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fdad 	bl	80052cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <HAL_TIM_OC_Stop_IT+0x160>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d117      	bne.n	80047ac <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	f241 1311 	movw	r3, #4369	; 0x1111
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <HAL_TIM_OC_Stop_IT+0xec>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	f240 4344 	movw	r3, #1092	; 0x444
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_TIM_OC_Stop_IT+0xec>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_TIM_OC_Stop_IT+0x11c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	f240 4344 	movw	r3, #1092	; 0x444
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_OC_Stop_IT+0x11c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <HAL_TIM_OC_Stop_IT+0x12c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ea:	e013      	b.n	8004814 <HAL_TIM_OC_Stop_IT+0x154>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d104      	bne.n	80047fc <HAL_TIM_OC_Stop_IT+0x13c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fa:	e00b      	b.n	8004814 <HAL_TIM_OC_Stop_IT+0x154>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d104      	bne.n	800480c <HAL_TIM_OC_Stop_IT+0x14c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480a:	e003      	b.n	8004814 <HAL_TIM_OC_Stop_IT+0x154>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000

08004824 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e041      	b.n	80048bc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f839 	bl	80048c4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fa8b 	bl	8004d80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0202 	mvn.w	r2, #2
 8004904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa11 	bl	8004d42 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fc3c 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fa14 	bl	8004d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d122      	bne.n	8004988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b04      	cmp	r3, #4
 800494e:	d11b      	bne.n	8004988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0204 	mvn.w	r2, #4
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9e7 	bl	8004d42 <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd fc12 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9ea 	bl	8004d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b08      	cmp	r3, #8
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0208 	mvn.w	r2, #8
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9bd 	bl	8004d42 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd fbe8 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f9c0 	bl	8004d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0210 	mvn.w	r2, #16
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2208      	movs	r2, #8
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f993 	bl	8004d42 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fbbe 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f996 	bl	8004d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f969 	bl	8004d2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b80      	cmp	r3, #128	; 0x80
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fcc0 	bl	8005408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f95b 	bl	8004d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0220 	mvn.w	r2, #32
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fc8a 	bl	80053f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e048      	b.n	8004b98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	d839      	bhi.n	8004b88 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b51 	.word	0x08004b51
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004b89 	.word	0x08004b89
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004b6d 	.word	0x08004b6d
 8004b40:	08004b89 	.word	0x08004b89
 8004b44:	08004b89 	.word	0x08004b89
 8004b48:	08004b89 	.word	0x08004b89
 8004b4c:	08004b7b 	.word	0x08004b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f992 	bl	8004e80 <TIM_OC1_SetConfig>
      break;
 8004b5c:	e017      	b.n	8004b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f9f1 	bl	8004f4c <TIM_OC2_SetConfig>
      break;
 8004b6a:	e010      	b.n	8004b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa56 	bl	8005024 <TIM_OC3_SetConfig>
      break;
 8004b78:	e009      	b.n	8004b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fab9 	bl	80050f8 <TIM_OC4_SetConfig>
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIM_ConfigClockSource+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e0b4      	b.n	8004d26 <HAL_TIM_ConfigClockSource+0x186>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf4:	d03e      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0xd4>
 8004bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfa:	f200 8087 	bhi.w	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	f000 8086 	beq.w	8004d12 <HAL_TIM_ConfigClockSource+0x172>
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	d87f      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b70      	cmp	r3, #112	; 0x70
 8004c0e:	d01a      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0xa6>
 8004c10:	2b70      	cmp	r3, #112	; 0x70
 8004c12:	d87b      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b60      	cmp	r3, #96	; 0x60
 8004c16:	d050      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x11a>
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d877      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d03c      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xfa>
 8004c20:	2b50      	cmp	r3, #80	; 0x50
 8004c22:	d873      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d058      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x13a>
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d86f      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b30      	cmp	r3, #48	; 0x30
 8004c2e:	d064      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d86b      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d060      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d867      	bhi.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d05c      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d05a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	e062      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6899      	ldr	r1, [r3, #8]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f000 fb19 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	609a      	str	r2, [r3, #8]
      break;
 8004c72:	e04f      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f000 fb02 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c96:	609a      	str	r2, [r3, #8]
      break;
 8004c98:	e03c      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f000 fa76 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2150      	movs	r1, #80	; 0x50
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 facf 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004cb8:	e02c      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f000 fa95 	bl	80051f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2160      	movs	r1, #96	; 0x60
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fabf 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004cd8:	e01c      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f000 fa56 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2140      	movs	r1, #64	; 0x40
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 faaf 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e00c      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f000 faa6 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004d0a:	e003      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d10:	e000      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <TIM_Base_SetConfig+0xe4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0x38>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a31      	ldr	r2, [pc, #196]	; (8004e68 <TIM_Base_SetConfig+0xe8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0x38>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a30      	ldr	r2, [pc, #192]	; (8004e6c <TIM_Base_SetConfig+0xec>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0x38>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <TIM_Base_SetConfig+0xf0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <TIM_Base_SetConfig+0xe4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01b      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd8:	d017      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <TIM_Base_SetConfig+0xe8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <TIM_Base_SetConfig+0xec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00f      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <TIM_Base_SetConfig+0xf0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <TIM_Base_SetConfig+0xf4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d007      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <TIM_Base_SetConfig+0xf8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <TIM_Base_SetConfig+0xfc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <TIM_Base_SetConfig+0xe4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40014400 	.word	0x40014400
 8004e7c:	40014800 	.word	0x40014800

08004e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <TIM_OC1_SetConfig+0xc8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10c      	bne.n	8004ef6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0308 	bic.w	r3, r3, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <TIM_OC1_SetConfig+0xc8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d111      	bne.n	8004f22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40010000 	.word	0x40010000

08004f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0320 	bic.w	r3, r3, #32
 8004f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <TIM_OC2_SetConfig+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10d      	bne.n	8004fc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <TIM_OC2_SetConfig+0xd4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d113      	bne.n	8004ff8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000

08005024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <TIM_OC3_SetConfig+0xd0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d10d      	bne.n	800509e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800509c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <TIM_OC3_SetConfig+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d113      	bne.n	80050ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000

080050f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a10      	ldr	r2, [pc, #64]	; (8005194 <TIM_OC4_SetConfig+0x9c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	019b      	lsls	r3, r3, #6
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000

08005198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0201 	bic.w	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 030a 	bic.w	r3, r3, #10
 80051d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0210 	bic.w	r2, r3, #16
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	031b      	lsls	r3, r3, #12
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	f043 0307 	orr.w	r3, r3, #7
 8005278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2201      	movs	r2, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800532c:	2302      	movs	r3, #2
 800532e:	e050      	b.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d013      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10c      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000

080053f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e03f      	b.n	80054ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fd f8e6 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	; 0x24
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fe49 	bl	80060f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e021      	b.n	800550c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054de:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fd f959 	bl	8002798 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b20      	cmp	r3, #32
 8005532:	d17c      	bne.n	800562e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_UART_Transmit+0x2c>
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e075      	b.n	8005630 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Transmit+0x3e>
 800554e:	2302      	movs	r3, #2
 8005550:	e06e      	b.n	8005630 <HAL_UART_Transmit+0x11c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	; 0x21
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005568:	f7fd fb14 	bl	8002b94 <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	d108      	bne.n	8005596 <HAL_UART_Transmit+0x82>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e003      	b.n	800559e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055a6:	e02a      	b.n	80055fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fb5a 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e036      	b.n	8005630 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	3302      	adds	r3, #2
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e007      	b.n	80055f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3301      	adds	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1cf      	bne.n	80055a8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2200      	movs	r2, #0
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb2a 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e006      	b.n	8005630 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b20      	cmp	r3, #32
 8005650:	d130      	bne.n	80056b4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_Transmit_IT+0x26>
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e029      	b.n	80056b6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UART_Transmit_IT+0x38>
 800566c:	2302      	movs	r3, #2
 800566e:	e022      	b.n	80056b6 <HAL_UART_Transmit_IT+0x7e>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2221      	movs	r2, #33	; 0x21
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d11d      	bne.n	8005718 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_UART_Receive_IT+0x26>
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e016      	b.n	800571a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Receive_IT+0x38>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e00f      	b.n	800571a <HAL_UART_Receive_IT+0x58>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	461a      	mov	r2, r3
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fb1a 	bl	8005d48 <UART_Start_Receive_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	e000      	b.n	800571a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b0ba      	sub	sp, #232	; 0xe8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_UART_IRQHandler+0x66>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fbfd 	bl	8005f82 <UART_Receive_IT>
      return;
 8005788:	e256      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800578a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80de 	beq.w	8005950 <HAL_UART_IRQHandler+0x22c>
 8005794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80d1 	beq.w	8005950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <HAL_UART_IRQHandler+0xae>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0xd2>
 80057de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0202 	orr.w	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xf6>
 8005802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_UART_IRQHandler+0x126>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f043 0208 	orr.w	r2, r3, #8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 81ed 	beq.w	8005c2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_UART_IRQHandler+0x14e>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fb88 	bl	8005f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_UART_IRQHandler+0x17a>
 8005896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04f      	beq.n	800593e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa90 	bl	8005dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d141      	bne.n	8005936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1d9      	bne.n	80058b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	d013      	beq.n	800592e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4a7d      	ldr	r2, [pc, #500]	; (8005b00 <HAL_UART_IRQHandler+0x3dc>)
 800590c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	4618      	mov	r0, r3
 8005914:	f7fd fb21 	bl	8002f5a <HAL_DMA_Abort_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e00e      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc fb66 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e00a      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc fb62 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	e006      	b.n	800594c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fc fb5e 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800594a:	e170      	b.n	8005c2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	bf00      	nop
    return;
 800594e:	e16e      	b.n	8005c2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	f040 814a 	bne.w	8005bee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8143 	beq.w	8005bee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 813c 	beq.w	8005bee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	f040 80b4 	bne.w	8005b04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8140 	beq.w	8005c32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f080 8139 	bcs.w	8005c32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d2:	f000 8088 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1d9      	bne.n	80059d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e1      	bne.n	8005a22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e3      	bne.n	8005a5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	f023 0310 	bic.w	r3, r3, #16
 8005aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ace:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fd f9ca 	bl	8002e7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8ac 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005afc:	e099      	b.n	8005c32 <HAL_UART_IRQHandler+0x50e>
 8005afe:	bf00      	nop
 8005b00:	08005e8b 	.word	0x08005e8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 808b 	beq.w	8005c36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8086 	beq.w	8005c36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e3      	bne.n	8005b2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3314      	adds	r3, #20
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	623b      	str	r3, [r7, #32]
   return(result);
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b86:	633a      	str	r2, [r7, #48]	; 0x30
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e3      	bne.n	8005b62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0310 	bic.w	r3, r3, #16
 8005bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bcc:	61fa      	str	r2, [r7, #28]
 8005bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e3      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f834 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bec:	e023      	b.n	8005c36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_UART_IRQHandler+0x4ea>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f953 	bl	8005eb2 <UART_Transmit_IT>
    return;
 8005c0c:	e014      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <HAL_UART_IRQHandler+0x514>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f993 	bl	8005f52 <UART_EndTransmit_IT>
    return;
 8005c2c:	e004      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
    return;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
      return;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_UART_IRQHandler+0x514>
      return;
 8005c36:	bf00      	nop
  }
}
 8005c38:	37e8      	adds	r7, #232	; 0xe8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b090      	sub	sp, #64	; 0x40
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	e050      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d04c      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c8c:	f7fc ff82 	bl	8002b94 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d241      	bcs.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cbc:	637a      	str	r2, [r7, #52]	; 0x34
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf0:	623a      	str	r2, [r7, #32]
 8005cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e00f      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d09f      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3740      	adds	r7, #64	; 0x40
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2222      	movs	r2, #34	; 0x22
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0220 	orr.w	r2, r2, #32
 8005db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b095      	sub	sp, #84	; 0x54
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dec:	643a      	str	r2, [r7, #64]	; 0x40
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d119      	bne.n	8005e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5c:	61ba      	str	r2, [r7, #24]
 8005e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e7e:	bf00      	nop
 8005e80:	3754      	adds	r7, #84	; 0x54
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7fc f8ab 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b21      	cmp	r3, #33	; 0x21
 8005ec4:	d13e      	bne.n	8005f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d114      	bne.n	8005efa <UART_Transmit_IT+0x48>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d110      	bne.n	8005efa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	1c9a      	adds	r2, r3, #2
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]
 8005ef8:	e008      	b.n	8005f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	1c59      	adds	r1, r3, #1
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6211      	str	r1, [r2, #32]
 8005f04:	781a      	ldrb	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10f      	bne.n	8005f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fe64 	bl	8005c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b08c      	sub	sp, #48	; 0x30
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b22      	cmp	r3, #34	; 0x22
 8005f94:	f040 80ab 	bne.w	80060ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	d117      	bne.n	8005fd2 <UART_Receive_IT+0x50>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d113      	bne.n	8005fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
 8005fd0:	e026      	b.n	8006020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe4:	d007      	beq.n	8005ff6 <UART_Receive_IT+0x74>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <UART_Receive_IT+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e008      	b.n	8006016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006030:	2b00      	cmp	r3, #0
 8006032:	d15a      	bne.n	80060ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0220 	bic.w	r2, r2, #32
 8006042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	2b01      	cmp	r3, #1
 8006072:	d135      	bne.n	80060e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609a:	623a      	str	r2, [r7, #32]
 800609c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d10a      	bne.n	80060d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fdbb 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
 80060de:	e002      	b.n	80060e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fb ffe1 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e002      	b.n	80060f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3730      	adds	r7, #48	; 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b0c0      	sub	sp, #256	; 0x100
 80060fe:	af00      	add	r7, sp, #0
 8006100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	68d9      	ldr	r1, [r3, #12]
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	ea40 0301 	orr.w	r3, r0, r1
 8006120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006150:	f021 010c 	bic.w	r1, r1, #12
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615e:	430b      	orrs	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006172:	6999      	ldr	r1, [r3, #24]
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	ea40 0301 	orr.w	r3, r0, r1
 800617e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b8f      	ldr	r3, [pc, #572]	; (80063c4 <UART_SetConfig+0x2cc>)
 8006188:	429a      	cmp	r2, r3
 800618a:	d005      	beq.n	8006198 <UART_SetConfig+0xa0>
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b8d      	ldr	r3, [pc, #564]	; (80063c8 <UART_SetConfig+0x2d0>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd fde2 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 800619c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061a0:	e003      	b.n	80061aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a2:	f7fd fdc9 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80061a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	f040 810c 	bne.w	80063d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	1891      	adds	r1, r2, r2
 80061d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061d2:	415b      	adcs	r3, r3
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061da:	4621      	mov	r1, r4
 80061dc:	eb12 0801 	adds.w	r8, r2, r1
 80061e0:	4629      	mov	r1, r5
 80061e2:	eb43 0901 	adc.w	r9, r3, r1
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fa:	4690      	mov	r8, r2
 80061fc:	4699      	mov	r9, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	eb18 0303 	adds.w	r3, r8, r3
 8006204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006208:	462b      	mov	r3, r5
 800620a:	eb49 0303 	adc.w	r3, r9, r3
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800621e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006226:	460b      	mov	r3, r1
 8006228:	18db      	adds	r3, r3, r3
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	4613      	mov	r3, r2
 800622e:	eb42 0303 	adc.w	r3, r2, r3
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800623c:	f7fa f838 	bl	80002b0 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4b61      	ldr	r3, [pc, #388]	; (80063cc <UART_SetConfig+0x2d4>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011c      	lsls	r4, r3, #4
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800625c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	64b9      	str	r1, [r7, #72]	; 0x48
 8006268:	415b      	adcs	r3, r3
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006270:	4641      	mov	r1, r8
 8006272:	eb12 0a01 	adds.w	sl, r2, r1
 8006276:	4649      	mov	r1, r9
 8006278:	eb43 0b01 	adc.w	fp, r3, r1
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800628c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006290:	4692      	mov	sl, r2
 8006292:	469b      	mov	fp, r3
 8006294:	4643      	mov	r3, r8
 8006296:	eb1a 0303 	adds.w	r3, sl, r3
 800629a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629e:	464b      	mov	r3, r9
 80062a0:	eb4b 0303 	adc.w	r3, fp, r3
 80062a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	643b      	str	r3, [r7, #64]	; 0x40
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062d2:	f7f9 ffed 	bl	80002b0 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <UART_SetConfig+0x2d4>)
 80062de:	fba3 2301 	umull	r2, r3, r3, r1
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2264      	movs	r2, #100	; 0x64
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <UART_SetConfig+0x2d4>)
 80062f4:	fba3 2302 	umull	r2, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006300:	441c      	add	r4, r3
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800630c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	63b9      	str	r1, [r7, #56]	; 0x38
 800631c:	415b      	adcs	r3, r3
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6339      	str	r1, [r7, #48]	; 0x30
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006378:	460b      	mov	r3, r1
 800637a:	18db      	adds	r3, r3, r3
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	4613      	mov	r3, r2
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800638a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800638e:	f7f9 ff8f 	bl	80002b0 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <UART_SetConfig+0x2d4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a08      	ldr	r2, [pc, #32]	; (80063cc <UART_SetConfig+0x2d4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 0207 	and.w	r2, r3, #7
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4422      	add	r2, r4
 80063be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c0:	e105      	b.n	80065ce <UART_SetConfig+0x4d6>
 80063c2:	bf00      	nop
 80063c4:	40011000 	.word	0x40011000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	6239      	str	r1, [r7, #32]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f2:	4641      	mov	r1, r8
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	4649      	mov	r1, r9
 80063f8:	eb43 0501 	adc.w	r5, r3, r1
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006418:	464b      	mov	r3, r9
 800641a:	eb45 0303 	adc.w	r3, r5, r3
 800641e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800643e:	4629      	mov	r1, r5
 8006440:	008b      	lsls	r3, r1, #2
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006448:	4621      	mov	r1, r4
 800644a:	008a      	lsls	r2, r1, #2
 800644c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006450:	f7f9 ff2e 	bl	80002b0 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b60      	ldr	r3, [pc, #384]	; (80065dc <UART_SetConfig+0x4e4>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011c      	lsls	r4, r3, #4
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800646c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	61b9      	str	r1, [r7, #24]
 800647c:	415b      	adcs	r3, r3
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6139      	str	r1, [r7, #16]
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b8:	464b      	mov	r3, r9
 80064ba:	460a      	mov	r2, r1
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064dc:	4649      	mov	r1, r9
 80064de:	008b      	lsls	r3, r1, #2
 80064e0:	4641      	mov	r1, r8
 80064e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e6:	4641      	mov	r1, r8
 80064e8:	008a      	lsls	r2, r1, #2
 80064ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ee:	f7f9 fedf 	bl	80002b0 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <UART_SetConfig+0x4e4>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	; 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	3332      	adds	r3, #50	; 0x32
 800650a:	4a34      	ldr	r2, [pc, #208]	; (80065dc <UART_SetConfig+0x4e4>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006516:	441c      	add	r4, r3
 8006518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651c:	2200      	movs	r2, #0
 800651e:	673b      	str	r3, [r7, #112]	; 0x70
 8006520:	677a      	str	r2, [r7, #116]	; 0x74
 8006522:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	1891      	adds	r1, r2, r2
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	415b      	adcs	r3, r3
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006536:	4641      	mov	r1, r8
 8006538:	1851      	adds	r1, r2, r1
 800653a:	6039      	str	r1, [r7, #0]
 800653c:	4649      	mov	r1, r9
 800653e:	414b      	adcs	r3, r1
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800654e:	4659      	mov	r1, fp
 8006550:	00cb      	lsls	r3, r1, #3
 8006552:	4651      	mov	r1, sl
 8006554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006558:	4651      	mov	r1, sl
 800655a:	00ca      	lsls	r2, r1, #3
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	4603      	mov	r3, r0
 8006562:	4642      	mov	r2, r8
 8006564:	189b      	adds	r3, r3, r2
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	464b      	mov	r3, r9
 800656a:	460a      	mov	r2, r1
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	663b      	str	r3, [r7, #96]	; 0x60
 800657c:	667a      	str	r2, [r7, #100]	; 0x64
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800658a:	4649      	mov	r1, r9
 800658c:	008b      	lsls	r3, r1, #2
 800658e:	4641      	mov	r1, r8
 8006590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006594:	4641      	mov	r1, r8
 8006596:	008a      	lsls	r2, r1, #2
 8006598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800659c:	f7f9 fe88 	bl	80002b0 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <UART_SetConfig+0x4e4>)
 80065a6:	fba3 1302 	umull	r1, r3, r3, r2
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2164      	movs	r1, #100	; 0x64
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	3332      	adds	r3, #50	; 0x32
 80065b8:	4a08      	ldr	r2, [pc, #32]	; (80065dc <UART_SetConfig+0x4e4>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	f003 020f 	and.w	r2, r3, #15
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4422      	add	r2, r4
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	bf00      	nop
 80065d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	51eb851f 	.word	0x51eb851f

080065e0 <NOP>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void NOP(struct WIFI *a)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <MUX>:
void MUX(struct WIFI *a)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2204      	movs	r2, #4
 8006670:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2205      	movs	r2, #5
 800669c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2206      	movs	r2, #6
 80066f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2208      	movs	r2, #8
 8006720:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2209      	movs	r2, #9
 800674c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2207      	movs	r2, #7
 8006778:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_enviaruart=1;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	a->_pasos=0; //210416
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2020 	strb.w	r2, [r3, #32]
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
a->_estado=0;					//Estado de m�dulo WIFI
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2a94 	str.w	r2, [r3, #2708]	; 0xa94
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_instruccion=0;				//Funcion que se desea realizar
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_ejecucion=0;				//Funcion en ejecucion	
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2aec 	strb.w	r2, [r3, #2796]	; 0xaec
a->_ticks=0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
a->_ticks2=0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
a->_debug=0;					//utilizada par fines de debugging
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_debug_str=0;				//utilizada par fines de debugging
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug_pos=0;				//utilizada par fines de debugging
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_rx_ok=0;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_rx_no_ok=0;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_SEND_OK=0;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_CLOSED=0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_WF_DISCONNECT=0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_FAIL=0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_CONNECT=0;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count=0;				//Cuento la catidad de ipds	
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
a->_debug_count2=0;				//SEND OK para enviar datos
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count4=0;				//SEDN OK recibido directo
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_subpaso=0;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 800692c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006932:	af06      	add	r7, sp, #24
 8006934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800693c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800693e:	2300      	movs	r3, #0
 8006940:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800694a:	2300      	movs	r3, #0
 800694c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 800695c:	2320      	movs	r3, #32
 800695e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006962:	2322      	movs	r3, #34	; 0x22
 8006964:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006968:	4b71      	ldr	r3, [pc, #452]	; (8006b30 <AT_ESP8266_ND+0x204>)
 800696a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800696e:	4a71      	ldr	r2, [pc, #452]	; (8006b34 <AT_ESP8266_ND+0x208>)
 8006970:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	4611      	mov	r1, r2
 8006978:	8019      	strh	r1, [r3, #0]
 800697a:	3302      	adds	r3, #2
 800697c:	0c12      	lsrs	r2, r2, #16
 800697e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006980:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006984:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006988:	f640 230d 	movw	r3, #2573	; 0xa0d
 800698c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006996:	2300      	movs	r3, #0
 8006998:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 800699c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7f9 fc1a 	bl	80001f4 <strlen>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7f9 fbff 	bl	80001f4 <strlen>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8c3 2a94 	str.w	r2, [r3, #2708]	; 0xa94
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2206      	movs	r2, #6
 8006a14:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006a50:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a54:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006a5e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a62:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a66:	6809      	ldr	r1, [r1, #0]
 8006a68:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	9604      	str	r6, [sp, #16]
 8006a70:	9103      	str	r1, [sp, #12]
 8006a72:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a76:	9102      	str	r1, [sp, #8]
 8006a78:	9201      	str	r2, [sp, #4]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	4a2e      	ldr	r2, [pc, #184]	; (8006b38 <AT_ESP8266_ND+0x20c>)
 8006a80:	4621      	mov	r1, r4
 8006a82:	f007 fc8f 	bl	800e3a4 <FT_String_ND>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 812a 	bne.w	8006ce2 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2206      	movs	r2, #6
 8006a9a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d145      	bne.n	8006b3c <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006ab0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006abe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006ae8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006aec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006af6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006afa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006afe:	6809      	ldr	r1, [r1, #0]
 8006b00:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006b04:	2604      	movs	r6, #4
 8006b06:	9604      	str	r6, [sp, #16]
 8006b08:	9103      	str	r1, [sp, #12]
 8006b0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b0e:	9102      	str	r1, [sp, #8]
 8006b10:	9201      	str	r2, [sp, #4]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	462b      	mov	r3, r5
 8006b16:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <AT_ESP8266_ND+0x20c>)
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f007 fc43 	bl	800e3a4 <FT_String_ND>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
 8006b2e:	e044      	b.n	8006bba <AT_ESP8266_ND+0x28e>
 8006b30:	00222c22 	.word	0x00222c22
 8006b34:	08010668 	.word	0x08010668
 8006b38:	0801049c 	.word	0x0801049c
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006b74:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b78:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006b82:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b86:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006b90:	2605      	movs	r6, #5
 8006b92:	9604      	str	r6, [sp, #16]
 8006b94:	9103      	str	r1, [sp, #12]
 8006b96:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b9a:	9102      	str	r1, [sp, #8]
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4ac1      	ldr	r2, [pc, #772]	; (8006ea8 <AT_ESP8266_ND+0x57c>)
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f007 fbfd 	bl	800e3a4 <FT_String_ND>
 8006baa:	4602      	mov	r2, r0
 8006bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
	 	}

	 	if(a->_estado_data==4)
 8006bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d15a      	bne.n	8006c82 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2263      	movs	r2, #99	; 0x63
 8006bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 		a->_n_dataRCV=a->_n_tok;
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f8d3 2cd8 	ldr.w	r2, [r3, #3288]	; 0xcd8
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8006c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f603 018c 	addw	r1, r3, #2188	; 0x88c
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8d3 2cd8 	ldr.w	r2, [r3, #3288]	; 0xcd8
 8006c22:	2341      	movs	r3, #65	; 0x41
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	f007 ff22 	bl	800ea70 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8006c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f603 018c 	addw	r1, r3, #2188	; 0x88c
 8006c48:	2341      	movs	r3, #65	; 0x41
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f007 ff0e 	bl	800ea70 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8d3 3cc4 	ldr.w	r3, [r3, #3268]	; 0xcc4
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
	 		a->_new_data_rcv=1;
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
	 	}
	 	if(a->_estado_data==5)
 8006c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d126      	bne.n	8006ce2 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2237      	movs	r2, #55	; 0x37
 8006ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 		a->_n_dataRCV=0;
 8006ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 		a->_debug_rx_no_ok++;
 8006cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006d2a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d2e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006d38:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d3c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d40:	6809      	ldr	r1, [r1, #0]
 8006d42:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006d46:	2600      	movs	r6, #0
 8006d48:	9604      	str	r6, [sp, #16]
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d50:	9102      	str	r1, [sp, #8]
 8006d52:	9201      	str	r2, [sp, #4]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	462b      	mov	r3, r5
 8006d58:	4a54      	ldr	r2, [pc, #336]	; (8006eac <AT_ESP8266_ND+0x580>)
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	f007 fb22 	bl	800e3a4 <FT_String_ND>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	f040 8334 	bne.w	80073d0 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2206      	movs	r2, #6
 8006d7a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006d7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006db6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dba:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006dc4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dc8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dcc:	6809      	ldr	r1, [r1, #0]
 8006dce:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	9604      	str	r6, [sp, #16]
 8006dd6:	9103      	str	r1, [sp, #12]
 8006dd8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ddc:	9102      	str	r1, [sp, #8]
 8006dde:	9201      	str	r2, [sp, #4]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462b      	mov	r3, r5
 8006de4:	4a32      	ldr	r2, [pc, #200]	; (8006eb0 <AT_ESP8266_ND+0x584>)
 8006de6:	4621      	mov	r1, r4
 8006de8:	f007 fadc 	bl	800e3a4 <FT_String_ND>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d113      	bne.n	8006e1a <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006df2:	2313      	movs	r3, #19
 8006df4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
 8006e16:	f001 b930 	b.w	800807a <AT_ESP8266_ND+0x174e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2208      	movs	r2, #8
 8006e26:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006e62:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e66:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006e70:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e74:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e78:	6809      	ldr	r1, [r1, #0]
 8006e7a:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006e7e:	2600      	movs	r6, #0
 8006e80:	9604      	str	r6, [sp, #16]
 8006e82:	9103      	str	r1, [sp, #12]
 8006e84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e88:	9102      	str	r1, [sp, #8]
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	462b      	mov	r3, r5
 8006e90:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <AT_ESP8266_ND+0x588>)
 8006e92:	4621      	mov	r1, r4
 8006e94:	f007 fa86 	bl	800e3a4 <FT_String_ND>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10c      	bne.n	8006eb8 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006e9e:	230d      	movs	r3, #13
 8006ea0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ea4:	f001 b8e9 	b.w	800807a <AT_ESP8266_ND+0x174e>
 8006ea8:	0801049c 	.word	0x0801049c
 8006eac:	080104a4 	.word	0x080104a4
 8006eb0:	080104ac 	.word	0x080104ac
 8006eb4:	080104b4 	.word	0x080104b4
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006f00:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f04:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006f0e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f12:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f16:	6809      	ldr	r1, [r1, #0]
 8006f18:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	9604      	str	r6, [sp, #16]
 8006f20:	9103      	str	r1, [sp, #12]
 8006f22:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f26:	9102      	str	r1, [sp, #8]
 8006f28:	9201      	str	r2, [sp, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	4ab7      	ldr	r2, [pc, #732]	; (800720c <AT_ESP8266_ND+0x8e0>)
 8006f30:	4621      	mov	r1, r4
 8006f32:	f007 fa37 	bl	800e3a4 <FT_String_ND>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d104      	bne.n	8006f46 <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006f3c:	231c      	movs	r3, #28
 8006f3e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f42:	f001 b89a 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	220f      	movs	r2, #15
 8006f52:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8006f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8006f8e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f92:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8006f9c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fa0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fa4:	6809      	ldr	r1, [r1, #0]
 8006fa6:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8006faa:	2600      	movs	r6, #0
 8006fac:	9604      	str	r6, [sp, #16]
 8006fae:	9103      	str	r1, [sp, #12]
 8006fb0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fb4:	9102      	str	r1, [sp, #8]
 8006fb6:	9201      	str	r2, [sp, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	462b      	mov	r3, r5
 8006fbc:	4a94      	ldr	r2, [pc, #592]	; (8007210 <AT_ESP8266_ND+0x8e4>)
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f007 f9f0 	bl	800e3a4 <FT_String_ND>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d104      	bne.n	8006fd4 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006fca:	2317      	movs	r3, #23
 8006fcc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fd0:	f001 b853 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8006ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800700e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007012:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 800701c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007020:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 800702a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800702e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007032:	6809      	ldr	r1, [r1, #0]
 8007034:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007038:	2600      	movs	r6, #0
 800703a:	9604      	str	r6, [sp, #16]
 800703c:	9103      	str	r1, [sp, #12]
 800703e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007042:	9102      	str	r1, [sp, #8]
 8007044:	9201      	str	r2, [sp, #4]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	462b      	mov	r3, r5
 800704a:	4a72      	ldr	r2, [pc, #456]	; (8007214 <AT_ESP8266_ND+0x8e8>)
 800704c:	4621      	mov	r1, r4
 800704e:	f007 f9a9 	bl	800e3a4 <FT_String_ND>
 8007052:	4603      	mov	r3, r0
 8007054:	2b01      	cmp	r3, #1
 8007056:	d104      	bne.n	8007062 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8007058:	2314      	movs	r3, #20
 800705a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800705e:	f001 b80c 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007062:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007066:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	220c      	movs	r2, #12
 800706e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 800708e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800709c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80070aa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070ae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80070b8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070bc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070c0:	6809      	ldr	r1, [r1, #0]
 80070c2:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80070c6:	2600      	movs	r6, #0
 80070c8:	9604      	str	r6, [sp, #16]
 80070ca:	9103      	str	r1, [sp, #12]
 80070cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d0:	9102      	str	r1, [sp, #8]
 80070d2:	9201      	str	r2, [sp, #4]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	462b      	mov	r3, r5
 80070d8:	4a4f      	ldr	r2, [pc, #316]	; (8007218 <AT_ESP8266_ND+0x8ec>)
 80070da:	4621      	mov	r1, r4
 80070dc:	f007 f962 	bl	800e3a4 <FT_String_ND>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d104      	bne.n	80070f0 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 80070e6:	2315      	movs	r3, #21
 80070e8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070ec:	f000 bfc5 	b.w	800807a <AT_ESP8266_ND+0x174e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 80070f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	220b      	movs	r2, #11
 80070fc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800710e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 800711c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800712a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007138:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800713c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007146:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800714a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800714e:	6809      	ldr	r1, [r1, #0]
 8007150:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007154:	2600      	movs	r6, #0
 8007156:	9604      	str	r6, [sp, #16]
 8007158:	9103      	str	r1, [sp, #12]
 800715a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800715e:	9102      	str	r1, [sp, #8]
 8007160:	9201      	str	r2, [sp, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	462b      	mov	r3, r5
 8007166:	4a2d      	ldr	r2, [pc, #180]	; (800721c <AT_ESP8266_ND+0x8f0>)
 8007168:	4621      	mov	r1, r4
 800716a:	f007 f91b 	bl	800e3a4 <FT_String_ND>
 800716e:	4603      	mov	r3, r0
 8007170:	2b01      	cmp	r3, #1
 8007172:	d104      	bne.n	800717e <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 8007174:	2309      	movs	r3, #9
 8007176:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800717a:	f000 bf7e 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 800717e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	220b      	movs	r2, #11
 800718a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800718e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007192:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800719c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80071aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80071c6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ca:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80071d4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071d8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071dc:	6809      	ldr	r1, [r1, #0]
 80071de:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80071e2:	2600      	movs	r6, #0
 80071e4:	9604      	str	r6, [sp, #16]
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ec:	9102      	str	r1, [sp, #8]
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	462b      	mov	r3, r5
 80071f4:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <AT_ESP8266_ND+0x8f4>)
 80071f6:	4621      	mov	r1, r4
 80071f8:	f007 f8d4 	bl	800e3a4 <FT_String_ND>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d110      	bne.n	8007224 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8007202:	2307      	movs	r3, #7
 8007204:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007208:	f000 bf37 	b.w	800807a <AT_ESP8266_ND+0x174e>
 800720c:	080104c0 	.word	0x080104c0
 8007210:	080104cc 	.word	0x080104cc
 8007214:	080104dc 	.word	0x080104dc
 8007218:	080104e0 	.word	0x080104e0
 800721c:	080104f0 	.word	0x080104f0
 8007220:	080104fc 	.word	0x080104fc
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	220b      	movs	r2, #11
 8007230:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800725e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 800726c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007270:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 800727a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800727e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007282:	6809      	ldr	r1, [r1, #0]
 8007284:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007288:	2600      	movs	r6, #0
 800728a:	9604      	str	r6, [sp, #16]
 800728c:	9103      	str	r1, [sp, #12]
 800728e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007292:	9102      	str	r1, [sp, #8]
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	462b      	mov	r3, r5
 800729a:	4ab7      	ldr	r2, [pc, #732]	; (8007578 <AT_ESP8266_ND+0xc4c>)
 800729c:	4621      	mov	r1, r4
 800729e:	f007 f881 	bl	800e3a4 <FT_String_ND>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d104      	bne.n	80072b2 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80072a8:	2308      	movs	r3, #8
 80072aa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072ae:	f000 bee4 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80072b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	220a      	movs	r2, #10
 80072be:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80072d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80072de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80072ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80072fa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072fe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007308:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800730c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007310:	6809      	ldr	r1, [r1, #0]
 8007312:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007316:	2600      	movs	r6, #0
 8007318:	9604      	str	r6, [sp, #16]
 800731a:	9103      	str	r1, [sp, #12]
 800731c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007320:	9102      	str	r1, [sp, #8]
 8007322:	9201      	str	r2, [sp, #4]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	462b      	mov	r3, r5
 8007328:	4a94      	ldr	r2, [pc, #592]	; (800757c <AT_ESP8266_ND+0xc50>)
 800732a:	4621      	mov	r1, r4
 800732c:	f007 f83a 	bl	800e3a4 <FT_String_ND>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d104      	bne.n	8007340 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 8007336:	231b      	movs	r3, #27
 8007338:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800733c:	f000 be9d 	b.w	800807a <AT_ESP8266_ND+0x174e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2207      	movs	r2, #7
 800734c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007350:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800735e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 800736c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007388:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800738c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007396:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800739a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800739e:	6809      	ldr	r1, [r1, #0]
 80073a0:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80073a4:	2600      	movs	r6, #0
 80073a6:	9604      	str	r6, [sp, #16]
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073ae:	9102      	str	r1, [sp, #8]
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462b      	mov	r3, r5
 80073b6:	4a72      	ldr	r2, [pc, #456]	; (8007580 <AT_ESP8266_ND+0xc54>)
 80073b8:	4621      	mov	r1, r4
 80073ba:	f006 fff3 	bl	800e3a4 <FT_String_ND>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	f040 865a 	bne.w	800807a <AT_ESP8266_ND+0x174e>
			{
			AT_decode=at_tcp_conectado;
 80073c6:	230f      	movs	r3, #15
 80073c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073cc:	f000 be55 	b.w	800807a <AT_ESP8266_ND+0x174e>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80073d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2207      	movs	r2, #7
 80073dc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80073e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80073ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80073fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800740a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007418:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800741c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007426:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800742a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800742e:	6809      	ldr	r1, [r1, #0]
 8007430:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007434:	2600      	movs	r6, #0
 8007436:	9604      	str	r6, [sp, #16]
 8007438:	9103      	str	r1, [sp, #12]
 800743a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800743e:	9102      	str	r1, [sp, #8]
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	462b      	mov	r3, r5
 8007446:	4a4f      	ldr	r2, [pc, #316]	; (8007584 <AT_ESP8266_ND+0xc58>)
 8007448:	4621      	mov	r1, r4
 800744a:	f006 ffab 	bl	800e3a4 <FT_String_ND>
 800744e:	4603      	mov	r3, r0
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 8326 	bne.w	8007aa2 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 8007456:	2302      	movs	r3, #2
 8007458:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800745c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2208      	movs	r2, #8
 8007468:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 800746c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800747a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800748c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80074a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074a8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80074b2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074b6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074ba:	6809      	ldr	r1, [r1, #0]
 80074bc:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80074c0:	2600      	movs	r6, #0
 80074c2:	9604      	str	r6, [sp, #16]
 80074c4:	9103      	str	r1, [sp, #12]
 80074c6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074ca:	9102      	str	r1, [sp, #8]
 80074cc:	9201      	str	r2, [sp, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	462b      	mov	r3, r5
 80074d2:	4a2d      	ldr	r2, [pc, #180]	; (8007588 <AT_ESP8266_ND+0xc5c>)
 80074d4:	4621      	mov	r1, r4
 80074d6:	f006 ff65 	bl	800e3a4 <FT_String_ND>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d104      	bne.n	80074ea <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 80074e0:	2306      	movs	r3, #6
 80074e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074e6:	f000 bdc8 	b.w	800807a <AT_ESP8266_ND+0x174e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80074ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2215      	movs	r2, #21
 80074f6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80074fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800750c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007532:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007536:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007540:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007544:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007548:	6809      	ldr	r1, [r1, #0]
 800754a:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 800754e:	2600      	movs	r6, #0
 8007550:	9604      	str	r6, [sp, #16]
 8007552:	9103      	str	r1, [sp, #12]
 8007554:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007558:	9102      	str	r1, [sp, #8]
 800755a:	9201      	str	r2, [sp, #4]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	462b      	mov	r3, r5
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <AT_ESP8266_ND+0xc60>)
 8007562:	4621      	mov	r1, r4
 8007564:	f006 ff1e 	bl	800e3a4 <FT_String_ND>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d110      	bne.n	8007590 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 800756e:	230e      	movs	r3, #14
 8007570:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007574:	f000 bd81 	b.w	800807a <AT_ESP8266_ND+0x174e>
 8007578:	08010508 	.word	0x08010508
 800757c:	08010514 	.word	0x08010514
 8007580:	08010520 	.word	0x08010520
 8007584:	08010528 	.word	0x08010528
 8007588:	08010530 	.word	0x08010530
 800758c:	0801053c 	.word	0x0801053c
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	220c      	movs	r2, #12
 800759c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80075a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80075ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80075bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80075ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80075d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075dc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80075e6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075ea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075ee:	6809      	ldr	r1, [r1, #0]
 80075f0:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80075f4:	2600      	movs	r6, #0
 80075f6:	9604      	str	r6, [sp, #16]
 80075f8:	9103      	str	r1, [sp, #12]
 80075fa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075fe:	9102      	str	r1, [sp, #8]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	462b      	mov	r3, r5
 8007606:	4ab7      	ldr	r2, [pc, #732]	; (80078e4 <AT_ESP8266_ND+0xfb8>)
 8007608:	4621      	mov	r1, r4
 800760a:	f006 fecb 	bl	800e3a4 <FT_String_ND>
 800760e:	4603      	mov	r3, r0
 8007610:	2b01      	cmp	r3, #1
 8007612:	d104      	bne.n	800761e <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007614:	2316      	movs	r3, #22
 8007616:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800761a:	f000 bd2e 	b.w	800807a <AT_ESP8266_ND+0x174e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	220b      	movs	r2, #11
 800762a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800762e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800763c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007666:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800766a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007674:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007678:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800767c:	6809      	ldr	r1, [r1, #0]
 800767e:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007682:	2600      	movs	r6, #0
 8007684:	9604      	str	r6, [sp, #16]
 8007686:	9103      	str	r1, [sp, #12]
 8007688:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800768c:	9102      	str	r1, [sp, #8]
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	462b      	mov	r3, r5
 8007694:	4a94      	ldr	r2, [pc, #592]	; (80078e8 <AT_ESP8266_ND+0xfbc>)
 8007696:	4621      	mov	r1, r4
 8007698:	f006 fe84 	bl	800e3a4 <FT_String_ND>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d104      	bne.n	80076ac <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80076a2:	231a      	movs	r3, #26
 80076a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076a8:	f000 bce7 	b.w	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80076ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2211      	movs	r2, #17
 80076b8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80076bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80076ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80076d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80076e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80076f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076f8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007702:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007706:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800770a:	6809      	ldr	r1, [r1, #0]
 800770c:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007710:	2600      	movs	r6, #0
 8007712:	9604      	str	r6, [sp, #16]
 8007714:	9103      	str	r1, [sp, #12]
 8007716:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800771a:	9102      	str	r1, [sp, #8]
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	462b      	mov	r3, r5
 8007722:	4a72      	ldr	r2, [pc, #456]	; (80078ec <AT_ESP8266_ND+0xfc0>)
 8007724:	4621      	mov	r1, r4
 8007726:	f006 fe3d 	bl	800e3a4 <FT_String_ND>
 800772a:	4603      	mov	r3, r0
 800772c:	2b01      	cmp	r3, #1
 800772e:	d104      	bne.n	800773a <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007730:	2311      	movs	r3, #17
 8007732:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007736:	f000 bca0 	b.w	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800773a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800773e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	220a      	movs	r2, #10
 8007746:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800774a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800775c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007782:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007786:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007790:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007794:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007798:	6809      	ldr	r1, [r1, #0]
 800779a:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 800779e:	2600      	movs	r6, #0
 80077a0:	9604      	str	r6, [sp, #16]
 80077a2:	9103      	str	r1, [sp, #12]
 80077a4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077a8:	9102      	str	r1, [sp, #8]
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	462b      	mov	r3, r5
 80077b0:	4a4f      	ldr	r2, [pc, #316]	; (80078f0 <AT_ESP8266_ND+0xfc4>)
 80077b2:	4621      	mov	r1, r4
 80077b4:	f006 fdf6 	bl	800e3a4 <FT_String_ND>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d104      	bne.n	80077c8 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 80077be:	231d      	movs	r3, #29
 80077c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077c4:	f000 bc59 	b.w	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80077c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	220b      	movs	r2, #11
 80077d4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80077d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80077e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80077f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007810:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007814:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 800781e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007822:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007826:	6809      	ldr	r1, [r1, #0]
 8007828:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 800782c:	2600      	movs	r6, #0
 800782e:	9604      	str	r6, [sp, #16]
 8007830:	9103      	str	r1, [sp, #12]
 8007832:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007836:	9102      	str	r1, [sp, #8]
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	462b      	mov	r3, r5
 800783e:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <AT_ESP8266_ND+0xfc8>)
 8007840:	4621      	mov	r1, r4
 8007842:	f006 fdaf 	bl	800e3a4 <FT_String_ND>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d104      	bne.n	8007856 <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 800784c:	231e      	movs	r3, #30
 800784e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007852:	f000 bc12 	b.w	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	220b      	movs	r2, #11
 8007862:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 800789e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078a2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80078ac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078b0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078b4:	6809      	ldr	r1, [r1, #0]
 80078b6:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80078ba:	2600      	movs	r6, #0
 80078bc:	9604      	str	r6, [sp, #16]
 80078be:	9103      	str	r1, [sp, #12]
 80078c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078c4:	9102      	str	r1, [sp, #8]
 80078c6:	9201      	str	r2, [sp, #4]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462b      	mov	r3, r5
 80078cc:	4a0a      	ldr	r2, [pc, #40]	; (80078f8 <AT_ESP8266_ND+0xfcc>)
 80078ce:	4621      	mov	r1, r4
 80078d0:	f006 fd68 	bl	800e3a4 <FT_String_ND>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d110      	bne.n	80078fc <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 80078da:	231f      	movs	r3, #31
 80078dc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078e0:	e3cb      	b.n	800807a <AT_ESP8266_ND+0x174e>
 80078e2:	bf00      	nop
 80078e4:	080104e0 	.word	0x080104e0
 80078e8:	080104f0 	.word	0x080104f0
 80078ec:	08010554 	.word	0x08010554
 80078f0:	080104c0 	.word	0x080104c0
 80078f4:	080104fc 	.word	0x080104fc
 80078f8:	08010508 	.word	0x08010508
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 80078fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2208      	movs	r2, #8
 8007908:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800790c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800791a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007944:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007948:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007952:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007956:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800795a:	6809      	ldr	r1, [r1, #0]
 800795c:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007960:	2600      	movs	r6, #0
 8007962:	9604      	str	r6, [sp, #16]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800796a:	9102      	str	r1, [sp, #8]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462b      	mov	r3, r5
 8007972:	4ac4      	ldr	r2, [pc, #784]	; (8007c84 <AT_ESP8266_ND+0x1358>)
 8007974:	4621      	mov	r1, r4
 8007976:	f006 fd15 	bl	800e3a4 <FT_String_ND>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d103      	bne.n	8007988 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007980:	2320      	movs	r3, #32
 8007982:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007986:	e378      	b.n	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	220a      	movs	r2, #10
 8007994:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 80079a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80079b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80079c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80079d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 80079de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079e6:	6809      	ldr	r1, [r1, #0]
 80079e8:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 80079ec:	2600      	movs	r6, #0
 80079ee:	9604      	str	r6, [sp, #16]
 80079f0:	9103      	str	r1, [sp, #12]
 80079f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079f6:	9102      	str	r1, [sp, #8]
 80079f8:	9201      	str	r2, [sp, #4]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	462b      	mov	r3, r5
 80079fe:	4aa2      	ldr	r2, [pc, #648]	; (8007c88 <AT_ESP8266_ND+0x135c>)
 8007a00:	4621      	mov	r1, r4
 8007a02:	f006 fccf 	bl	800e3a4 <FT_String_ND>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d103      	bne.n	8007a14 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007a0c:	2321      	movs	r3, #33	; 0x21
 8007a0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a12:	e332      	b.n	800807a <AT_ESP8266_ND+0x174e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007a5c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a60:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007a6a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a6e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a72:	6809      	ldr	r1, [r1, #0]
 8007a74:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007a78:	2600      	movs	r6, #0
 8007a7a:	9604      	str	r6, [sp, #16]
 8007a7c:	9103      	str	r1, [sp, #12]
 8007a7e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a82:	9102      	str	r1, [sp, #8]
 8007a84:	9201      	str	r2, [sp, #4]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	462b      	mov	r3, r5
 8007a8a:	4a80      	ldr	r2, [pc, #512]	; (8007c8c <AT_ESP8266_ND+0x1360>)
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f006 fc89 	bl	800e3a4 <FT_String_ND>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 82f0 	bne.w	800807a <AT_ESP8266_ND+0x174e>
					{
						AT_decode=at_tcp_noip_err;
 8007a9a:	2322      	movs	r3, #34	; 0x22
 8007a9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aa0:	e2eb      	b.n	800807a <AT_ESP8266_ND+0x174e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	220f      	movs	r2, #15
 8007aae:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007aea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007af8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007afc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b00:	6809      	ldr	r1, [r1, #0]
 8007b02:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007b06:	2600      	movs	r6, #0
 8007b08:	9604      	str	r6, [sp, #16]
 8007b0a:	9103      	str	r1, [sp, #12]
 8007b0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b10:	9102      	str	r1, [sp, #8]
 8007b12:	9201      	str	r2, [sp, #4]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	462b      	mov	r3, r5
 8007b18:	4a5d      	ldr	r2, [pc, #372]	; (8007c90 <AT_ESP8266_ND+0x1364>)
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f006 fc42 	bl	800e3a4 <FT_String_ND>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d112      	bne.n	8007b4c <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007b26:	230a      	movs	r3, #10
 8007b28:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007b4a:	e296      	b.n	800807a <AT_ESP8266_ND+0x174e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2209      	movs	r2, #9
 8007b58:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007b94:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b98:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007ba2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ba6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007baa:	6809      	ldr	r1, [r1, #0]
 8007bac:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	9604      	str	r6, [sp, #16]
 8007bb4:	9103      	str	r1, [sp, #12]
 8007bb6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bba:	9102      	str	r1, [sp, #8]
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	4a34      	ldr	r2, [pc, #208]	; (8007c94 <AT_ESP8266_ND+0x1368>)
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	f006 fbed 	bl	800e3a4 <FT_String_ND>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d112      	bne.n	8007bf6 <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007bd0:	2319      	movs	r3, #25
 8007bd2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8007bf4:	e241      	b.n	800807a <AT_ESP8266_ND+0x174e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2208      	movs	r2, #8
 8007c02:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007c22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007c3e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c42:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007c4c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c50:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c54:	6809      	ldr	r1, [r1, #0]
 8007c56:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	9604      	str	r6, [sp, #16]
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c64:	9102      	str	r1, [sp, #8]
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <AT_ESP8266_ND+0x136c>)
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f006 fb98 	bl	800e3a4 <FT_String_ND>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d110      	bne.n	8007c9c <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c80:	e1fb      	b.n	800807a <AT_ESP8266_ND+0x174e>
 8007c82:	bf00      	nop
 8007c84:	08010568 	.word	0x08010568
 8007c88:	08010514 	.word	0x08010514
 8007c8c:	08010574 	.word	0x08010574
 8007c90:	0801057c 	.word	0x0801057c
 8007c94:	0801058c 	.word	0x0801058c
 8007c98:	08010530 	.word	0x08010530
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f203 458c 	addw	r5, r3, #1164	; 0x48c
 8007cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f603 46d4 	addw	r6, r3, #3284	; 0xcd4
 8007cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ce8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cec:	6812      	ldr	r2, [r2, #0]
 8007cee:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007cf2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cf6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cfa:	6809      	ldr	r1, [r1, #0]
 8007cfc:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007d00:	2300      	movs	r3, #0
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d0a:	9102      	str	r1, [sp, #8]
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4633      	mov	r3, r6
 8007d14:	462a      	mov	r2, r5
 8007d16:	4621      	mov	r1, r4
 8007d18:	f006 fb44 	bl	800e3a4 <FT_String_ND>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d112      	bne.n	8007d48 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f893 368c 	ldrb.w	r3, [r3, #1676]	; 0x68c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 81a2 	beq.w	800807a <AT_ESP8266_ND+0x174e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
 8007d46:	e198      	b.n	800807a <AT_ESP8266_ND+0x174e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	220d      	movs	r2, #13
 8007d54:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007d90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d94:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007d9e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007da2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007da6:	6809      	ldr	r1, [r1, #0]
 8007da8:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007dac:	2600      	movs	r6, #0
 8007dae:	9604      	str	r6, [sp, #16]
 8007db0:	9103      	str	r1, [sp, #12]
 8007db2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007db6:	9102      	str	r1, [sp, #8]
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	4abf      	ldr	r2, [pc, #764]	; (80080bc <AT_ESP8266_ND+0x1790>)
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f006 faef 	bl	800e3a4 <FT_String_ND>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d112      	bne.n	8007df2 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007dcc:	2312      	movs	r3, #18
 8007dce:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007df0:	e143      	b.n	800807a <AT_ESP8266_ND+0x174e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	220d      	movs	r2, #13
 8007dfe:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007e3a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e3e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e42:	6812      	ldr	r2, [r2, #0]
 8007e44:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007e48:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e4c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e50:	6809      	ldr	r1, [r1, #0]
 8007e52:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007e56:	2600      	movs	r6, #0
 8007e58:	9604      	str	r6, [sp, #16]
 8007e5a:	9103      	str	r1, [sp, #12]
 8007e5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e60:	9102      	str	r1, [sp, #8]
 8007e62:	9201      	str	r2, [sp, #4]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	462b      	mov	r3, r5
 8007e68:	4a95      	ldr	r2, [pc, #596]	; (80080c0 <AT_ESP8266_ND+0x1794>)
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	f006 fa9a 	bl	800e3a4 <FT_String_ND>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d112      	bne.n	8007e9c <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
					AT_decode=at_wifi_gotip;
 8007e94:	230c      	movs	r3, #12
 8007e96:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e9a:	e0ee      	b.n	800807a <AT_ESP8266_ND+0x174e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	220e      	movs	r2, #14
 8007ea8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007ee4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ee8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007ef2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ef6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007efa:	6809      	ldr	r1, [r1, #0]
 8007efc:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007f00:	2600      	movs	r6, #0
 8007f02:	9604      	str	r6, [sp, #16]
 8007f04:	9103      	str	r1, [sp, #12]
 8007f06:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f0a:	9102      	str	r1, [sp, #8]
 8007f0c:	9201      	str	r2, [sp, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	462b      	mov	r3, r5
 8007f12:	4a6c      	ldr	r2, [pc, #432]	; (80080c4 <AT_ESP8266_ND+0x1798>)
 8007f14:	4621      	mov	r1, r4
 8007f16:	f006 fa45 	bl	800e3a4 <FT_String_ND>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d112      	bne.n	8007f46 <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
						 AT_decode=at_wifi_connected;
 8007f3e:	230b      	movs	r3, #11
 8007f40:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f44:	e099      	b.n	800807a <AT_ESP8266_ND+0x174e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	220a      	movs	r2, #10
 8007f52:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 8007f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8007f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007f8e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f92:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8007f9c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fa0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fa4:	6809      	ldr	r1, [r1, #0]
 8007fa6:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8007faa:	2600      	movs	r6, #0
 8007fac:	9604      	str	r6, [sp, #16]
 8007fae:	9103      	str	r1, [sp, #12]
 8007fb0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fb4:	9102      	str	r1, [sp, #8]
 8007fb6:	9201      	str	r2, [sp, #4]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	462b      	mov	r3, r5
 8007fbc:	4a42      	ldr	r2, [pc, #264]	; (80080c8 <AT_ESP8266_ND+0x179c>)
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f006 f9f0 	bl	800e3a4 <FT_String_ND>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d112      	bne.n	8007ff0 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007fca:	2318      	movs	r3, #24
 8007fcc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8007fee:	e044      	b.n	800807a <AT_ESP8266_ND+0x174e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800800e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008012:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 800801c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800802a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8008038:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800803c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8008046:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800804a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800804e:	6809      	ldr	r1, [r1, #0]
 8008050:	f601 218c 	addw	r1, r1, #2700	; 0xa8c
 8008054:	2600      	movs	r6, #0
 8008056:	9604      	str	r6, [sp, #16]
 8008058:	9103      	str	r1, [sp, #12]
 800805a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800805e:	9102      	str	r1, [sp, #8]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	462b      	mov	r3, r5
 8008066:	4a19      	ldr	r2, [pc, #100]	; (80080cc <AT_ESP8266_ND+0x17a0>)
 8008068:	4621      	mov	r1, r4
 800806a:	f006 f99b 	bl	800e3a4 <FT_String_ND>
 800806e:	4603      	mov	r3, r0
 8008070:	2b01      	cmp	r3, #1
 8008072:	d102      	bne.n	800807a <AT_ESP8266_ND+0x174e>
				{
					AT_decode=at_fail;
 8008074:	2303      	movs	r3, #3
 8008076:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800807a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008088:	3b01      	subs	r3, #1
 800808a:	2b08      	cmp	r3, #8
 800808c:	f201 853b 	bhi.w	8009b06 <AT_ESP8266_ND+0x31da>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <AT_ESP8266_ND+0x176c>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080d1 	.word	0x080080d1
 800809c:	0800825d 	.word	0x0800825d
 80080a0:	080084fd 	.word	0x080084fd
 80080a4:	08008689 	.word	0x08008689
 80080a8:	08008881 	.word	0x08008881
 80080ac:	08008b71 	.word	0x08008b71
 80080b0:	08008e37 	.word	0x08008e37
 80080b4:	0800936f 	.word	0x0800936f
 80080b8:	0800955d 	.word	0x0800955d
 80080bc:	08010598 	.word	0x08010598
 80080c0:	080105a8 	.word	0x080105a8
 80080c4:	080105b8 	.word	0x080105b8
 80080c8:	080105c8 	.word	0x080105c8
 80080cc:	080105d4 	.word	0x080105d4
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80080d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80080e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d14f      	bne.n	8008192 <AT_ESP8266_ND+0x1866>
 80080f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d04b      	beq.n	8008192 <AT_ESP8266_ND+0x1866>
									   &&(AT_decode!=at_error)
 80080fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d047      	beq.n	8008192 <AT_ESP8266_ND+0x1866>
									   &&(AT_decode!=at_restart	)
 8008102:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008106:	2b04      	cmp	r3, #4
 8008108:	d043      	beq.n	8008192 <AT_ESP8266_ND+0x1866>
									   &&(AT_decode!=at_tcp_enviado_ok))//210419 if(( a->_enviaruart==1)&&((a->_estado==1)||(a->_estado>4)))
 800810a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800810e:	2b13      	cmp	r3, #19
 8008110:	d03f      	beq.n	8008192 <AT_ESP8266_ND+0x1866>
						{
						a->_pasos=0;
 8008112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 8008122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2201      	movs	r2, #1
 800812e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						//------Generacion del comando para definir multiples conexiones---------//
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008140:	4620      	mov	r0, r4
 8008142:	f7f8 f857 	bl	80001f4 <strlen>
 8008146:	4603      	mov	r3, r0
 8008148:	4423      	add	r3, r4
 800814a:	4a43      	ldr	r2, [pc, #268]	; (8008258 <AT_ESP8266_ND+0x192c>)
 800814c:	461c      	mov	r4, r3
 800814e:	4613      	mov	r3, r2
 8008150:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	6061      	str	r1, [r4, #4]
 8008156:	60a2      	str	r2, [r4, #8]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800815c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800816a:	4618      	mov	r0, r3
 800816c:	f7f8 f842 	bl	80001f4 <strlen>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008178:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						a->_estado=100;
 8008182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2264      	movs	r2, #100	; 0x64
 800818e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						//------Generacion del comando para definir multiples conexiones---------//
						}

				a->_pasos++;
 8008192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008196:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80081b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d11b      	bne.n	80081fa <AT_ESP8266_ND+0x18ce>
 80081c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d023      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
 80081ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ce:	2b1c      	cmp	r3, #28
 80081d0:	d01f      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(AT_decode==at_error)
 80081d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d01b      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(AT_decode==at_restart)
 80081da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d017      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(AT_decode==at_wifi_connected)
 80081e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081e6:	2b0b      	cmp	r3, #11
 80081e8:	d013      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(AT_decode==at_wifi_gotip)
 80081ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ee:	2b0c      	cmp	r3, #12
 80081f0:	d00f      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80081f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081f6:	2b13      	cmp	r3, #19
 80081f8:	d00b      	beq.n	8008212 <AT_ESP8266_ND+0x18e6>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80081fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8008208:	f241 3288 	movw	r2, #5000	; 0x1388
 800820c:	4293      	cmp	r3, r2
 800820e:	f341 8484 	ble.w	8009b1a <AT_ESP8266_ND+0x31ee>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 8008234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						a->_ticks=0;
 8008244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
					//Reseteo cada vez que entro
			}
			break;
 8008254:	f001 bc61 	b.w	8009b1a <AT_ESP8266_ND+0x31ee>
 8008258:	080105e0 	.word	0x080105e0
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800825c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800826c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800827a:	2b01      	cmp	r3, #1
 800827c:	f040 80cc 	bne.w	8008418 <AT_ESP8266_ND+0x1aec>
 8008280:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008284:	2b01      	cmp	r3, #1
 8008286:	f000 80c7 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_error)
 800828a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800828e:	2b02      	cmp	r3, #2
 8008290:	f000 80c2 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_fail)
 8008294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008298:	2b03      	cmp	r3, #3
 800829a:	f000 80bd 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_restart)
 800829e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	f000 80b8 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_wifi_disconnect)
 80082a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ac:	2b0a      	cmp	r3, #10
 80082ae:	f000 80b3 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_wifi_connected)
 80082b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b6:	2b0b      	cmp	r3, #11
 80082b8:	f000 80ae 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
									   &&(AT_decode!=at_wifi_gotip))//210419 if(( a->_enviaruart==1)&&((a->_estado==1)||(a->_estado>4)))
 80082bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c0:	2b0c      	cmp	r3, #12
 80082c2:	f000 80a9 	beq.w	8008418 <AT_ESP8266_ND+0x1aec>
						{
						a->_pasos=0;
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 80082d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80082e6:	2201      	movs	r2, #1
 80082e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082ec:	4881      	ldr	r0, [pc, #516]	; (80084f4 <AT_ESP8266_ND+0x1bc8>)
 80082ee:	f7fb f8bf 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80082f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008300:	4620      	mov	r0, r4
 8008302:	f7f7 ff77 	bl	80001f4 <strlen>
 8008306:	4603      	mov	r3, r0
 8008308:	4423      	add	r3, r4
 800830a:	497b      	ldr	r1, [pc, #492]	; (80084f8 <AT_ESP8266_ND+0x1bcc>)
 800830c:	461a      	mov	r2, r3
 800830e:	460b      	mov	r3, r1
 8008310:	cb03      	ldmia	r3!, {r0, r1}
 8008312:	6010      	str	r0, [r2, #0]
 8008314:	6051      	str	r1, [r2, #4]
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800831a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008328:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800832c:	2201      	movs	r2, #1
 800832e:	4618      	mov	r0, r3
 8008330:	f006 fc62 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834a:	681d      	ldr	r5, [r3, #0]
 800834c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f7f7 ff4c 	bl	80001f4 <strlen>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	4629      	mov	r1, r5
 8008362:	4620      	mov	r0, r4
 8008364:	f006 fc48 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008376:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800837a:	4618      	mov	r0, r3
 800837c:	f7f7 ff3a 	bl	80001f4 <strlen>
 8008380:	4602      	mov	r2, r0
 8008382:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008386:	4619      	mov	r1, r3
 8008388:	4620      	mov	r0, r4
 800838a:	f006 fc35 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800838e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008392:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 800839c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f103 0520 	add.w	r5, r3, #32
 80083aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3320      	adds	r3, #32
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f7 ff1c 	bl	80001f4 <strlen>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	4629      	mov	r1, r5
 80083c2:	4620      	mov	r0, r4
 80083c4:	f006 fc18 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80083c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80083d6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80083da:	2203      	movs	r2, #3
 80083dc:	4618      	mov	r0, r3
 80083de:	f006 fc0b 	bl	800ebf8 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80083e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7f7 feff 	bl	80001f4 <strlen>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						a->_estado=200;
 8008408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	22c8      	movs	r2, #200	; 0xc8
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d11b      	bne.n	8008480 <AT_ESP8266_ND+0x1b54>
 8008448:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d023      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
 8008450:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008454:	2b02      	cmp	r3, #2
 8008456:	d01f      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(AT_decode==at_fail)
 8008458:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800845c:	2b03      	cmp	r3, #3
 800845e:	d01b      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(AT_decode==at_restart)
 8008460:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008464:	2b04      	cmp	r3, #4
 8008466:	d017      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(AT_decode==at_wifi_disconnect)
 8008468:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800846c:	2b0a      	cmp	r3, #10
 800846e:	d013      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(AT_decode==at_wifi_connected)
 8008470:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008474:	2b0b      	cmp	r3, #11
 8008476:	d00f      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(AT_decode==at_wifi_gotip)))
 8008478:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800847c:	2b0c      	cmp	r3, #12
 800847e:	d00b      	beq.n	8008498 <AT_ESP8266_ND+0x1b6c>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008480:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008484:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f8d3 3cb0 	ldr.w	r3, [r3, #3248]	; 0xcb0
 800848e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008492:	4293      	cmp	r3, r2
 8008494:	f341 8343 	ble.w	8009b1e <AT_ESP8266_ND+0x31f2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80084a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						if(AT_decode!=at_wifi_disconnect)
 80084aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ae:	2b0a      	cmp	r3, #10
 80084b0:	d015      	beq.n	80084de <AT_ESP8266_ND+0x1bb2>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80084b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
							a->_ejecucion=0;
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80084d2:	2200      	movs	r2, #0
 80084d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084d8:	4806      	ldr	r0, [pc, #24]	; (80084f4 <AT_ESP8266_ND+0x1bc8>)
 80084da:	f7fa ffc9 	bl	8003470 <HAL_GPIO_WritePin>
						}

						a->_ticks2=0;
 80084de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
					}

			}
			break;
 80084ee:	f001 bb16 	b.w	8009b1e <AT_ESP8266_ND+0x31f2>
 80084f2:	bf00      	nop
 80084f4:	40020400 	.word	0x40020400
 80084f8:	080105f0 	.word	0x080105f0
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80084fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008500:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800850c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d153      	bne.n	80085c6 <AT_ESP8266_ND+0x1c9a>
 800851e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008522:	2b04      	cmp	r3, #4
 8008524:	d04f      	beq.n	80085c6 <AT_ESP8266_ND+0x1c9a>
 8008526:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852a:	2b0a      	cmp	r3, #10
 800852c:	d04b      	beq.n	80085c6 <AT_ESP8266_ND+0x1c9a>
 800852e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008532:	2b0d      	cmp	r3, #13
 8008534:	d047      	beq.n	80085c6 <AT_ESP8266_ND+0x1c9a>
						{
						a->_pasos=0;
 8008536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800853a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 8008546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2201      	movs	r2, #1
 8008552:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8008556:	2201      	movs	r2, #1
 8008558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800855c:	48c4      	ldr	r0, [pc, #784]	; (8008870 <AT_ESP8266_ND+0x1f44>)
 800855e:	f7fa ff87 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008570:	4620      	mov	r0, r4
 8008572:	f7f7 fe3f 	bl	80001f4 <strlen>
 8008576:	4603      	mov	r3, r0
 8008578:	4423      	add	r3, r4
 800857a:	49be      	ldr	r1, [pc, #760]	; (8008874 <AT_ESP8266_ND+0x1f48>)
 800857c:	461a      	mov	r2, r3
 800857e:	460b      	mov	r3, r1
 8008580:	cb03      	ldmia	r3!, {r0, r1}
 8008582:	6010      	str	r0, [r2, #0]
 8008584:	6051      	str	r1, [r2, #4]
 8008586:	8819      	ldrh	r1, [r3, #0]
 8008588:	789b      	ldrb	r3, [r3, #2]
 800858a:	8111      	strh	r1, [r2, #8]
 800858c:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800858e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800859c:	4618      	mov	r0, r3
 800859e:	f7f7 fe29 	bl	80001f4 <strlen>
 80085a2:	4603      	mov	r3, r0
 80085a4:	461a      	mov	r2, r3
 80085a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80085b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80085c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						}

				a->_pasos++;
 80085c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_restart	)||(AT_decode==at_deconectar_ok )))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80085e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d113      	bne.n	800861e <AT_ESP8266_ND+0x1cf2>
 80085f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085fa:	2b0a      	cmp	r3, #10
 80085fc:	d01b      	beq.n	8008636 <AT_ESP8266_ND+0x1d0a>
 80085fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008602:	2b0b      	cmp	r3, #11
 8008604:	d017      	beq.n	8008636 <AT_ESP8266_ND+0x1d0a>
 8008606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860a:	2b0c      	cmp	r3, #12
 800860c:	d013      	beq.n	8008636 <AT_ESP8266_ND+0x1d0a>
 800860e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008612:	2b04      	cmp	r3, #4
 8008614:	d00f      	beq.n	8008636 <AT_ESP8266_ND+0x1d0a>
 8008616:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861a:	2b0d      	cmp	r3, #13
 800861c:	d00b      	beq.n	8008636 <AT_ESP8266_ND+0x1d0a>
 800861e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 800862c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008630:	4293      	cmp	r3, r2
 8008632:	f341 8276 	ble.w	8009b22 <AT_ESP8266_ND+0x31f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008636:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800863a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800864c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 8008658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008668:	2200      	movs	r2, #0
 800866a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800866e:	4880      	ldr	r0, [pc, #512]	; (8008870 <AT_ESP8266_ND+0x1f44>)
 8008670:	f7fa fefe 	bl	8003470 <HAL_GPIO_WritePin>
						a->_ticks=0;
 8008674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008684:	f001 ba4d 	b.w	8009b22 <AT_ESP8266_ND+0x31f6>
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d171      	bne.n	800878e <AT_ESP8266_ND+0x1e62>
 80086aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d06d      	beq.n	800878e <AT_ESP8266_ND+0x1e62>
									   &&(AT_decode!=at_ok)
 80086b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d069      	beq.n	800878e <AT_ESP8266_ND+0x1e62>
									   &&(AT_decode!=at_error))
 80086ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d065      	beq.n	800878e <AT_ESP8266_ND+0x1e62>
						{
						a->_pasos=0;
 80086c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2201      	movs	r2, #1
 80086de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80086e2:	2201      	movs	r2, #1
 80086e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086e8:	4861      	ldr	r0, [pc, #388]	; (8008870 <AT_ESP8266_ND+0x1f44>)
 80086ea:	f7fa fec1 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80086ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d115      	bne.n	800872c <AT_ESP8266_ND+0x1e00>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 800870e:	4620      	mov	r0, r4
 8008710:	f7f7 fd70 	bl	80001f4 <strlen>
 8008714:	4603      	mov	r3, r0
 8008716:	4423      	add	r3, r4
 8008718:	4a57      	ldr	r2, [pc, #348]	; (8008878 <AT_ESP8266_ND+0x1f4c>)
 800871a:	461c      	mov	r4, r3
 800871c:	4613      	mov	r3, r2
 800871e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008720:	6020      	str	r0, [r4, #0]
 8008722:	6061      	str	r1, [r4, #4]
 8008724:	60a2      	str	r2, [r4, #8]
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	e014      	b.n	8008756 <AT_ESP8266_ND+0x1e2a>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 800873a:	4620      	mov	r0, r4
 800873c:	f7f7 fd5a 	bl	80001f4 <strlen>
 8008740:	4603      	mov	r3, r0
 8008742:	4423      	add	r3, r4
 8008744:	4a4d      	ldr	r2, [pc, #308]	; (800887c <AT_ESP8266_ND+0x1f50>)
 8008746:	461c      	mov	r4, r3
 8008748:	4613      	mov	r3, r2
 800874a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800874c:	6020      	str	r0, [r4, #0]
 800874e:	6061      	str	r1, [r4, #4]
 8008750:	60a2      	str	r2, [r4, #8]
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800875a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008764:	4618      	mov	r0, r3
 8008766:	f7f7 fd45 	bl	80001f4 <strlen>
 800876a:	4603      	mov	r3, r0
 800876c:	461a      	mov	r2, r3
 800876e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 800877c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800878a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						}

				a->_pasos++;
 800878e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008792:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80087ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d123      	bne.n	8008806 <AT_ESP8266_ND+0x1eda>
 80087be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d02b      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
 80087c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ca:	2b0b      	cmp	r3, #11
 80087cc:	d027      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_wifi_gotip)
 80087ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d2:	2b0c      	cmp	r3, #12
 80087d4:	d023      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_restart)
 80087d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d01f      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_error)
 80087de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d01b      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_multiple_conn_ok)
 80087e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ea:	2b07      	cmp	r3, #7
 80087ec:	d017      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_no_multiple_conn_ok)
 80087ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d013      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_multiple_conn_err)
 80087f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087fa:	2b1e      	cmp	r3, #30
 80087fc:	d00f      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(AT_decode==at_no_multiple_conn_err)))
 80087fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008802:	2b1f      	cmp	r3, #31
 8008804:	d00b      	beq.n	800881e <AT_ESP8266_ND+0x1ef2>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	4293      	cmp	r3, r2
 800881a:	f341 8184 	ble.w	8009b26 <AT_ESP8266_ND+0x31fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800881e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800882c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 8008840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008850:	2200      	movs	r2, #0
 8008852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008856:	4806      	ldr	r0, [pc, #24]	; (8008870 <AT_ESP8266_ND+0x1f44>)
 8008858:	f7fa fe0a 	bl	8003470 <HAL_GPIO_WritePin>
						a->_ticks=0;
 800885c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008860:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800886c:	f001 b95b 	b.w	8009b26 <AT_ESP8266_ND+0x31fa>
 8008870:	40020400 	.word	0x40020400
 8008874:	080105fc 	.word	0x080105fc
 8008878:	08010608 	.word	0x08010608
 800887c:	08010618 	.word	0x08010618
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	f040 80f9 	bne.w	8008a96 <AT_ESP8266_ND+0x216a>
 80088a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	f000 80f4 	beq.w	8008a96 <AT_ESP8266_ND+0x216a>
									   &&(AT_decode!=at_ok)
 80088ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	f000 80ef 	beq.w	8008a96 <AT_ESP8266_ND+0x216a>
									   &&(AT_decode!=at_error)
 80088b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088bc:	2b02      	cmp	r3, #2
 80088be:	f000 80ea 	beq.w	8008a96 <AT_ESP8266_ND+0x216a>
									   &&(AT_decode!=at_def_ip_err)
 80088c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088c6:	2b21      	cmp	r3, #33	; 0x21
 80088c8:	f000 80e5 	beq.w	8008a96 <AT_ESP8266_ND+0x216a>
									   &&(AT_decode!=at_def_ip_ok))
 80088cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088d0:	2b1b      	cmp	r3, #27
 80088d2:	f000 80e0 	beq.w	8008a96 <AT_ESP8266_ND+0x216a>
						{
						a->_pasos=0;
 80088d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 80088e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80088f6:	2201      	movs	r2, #1
 80088f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088fc:	489a      	ldr	r0, [pc, #616]	; (8008b68 <AT_ESP8266_ND+0x223c>)
 80088fe:	f7fa fdb7 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008910:	4620      	mov	r0, r4
 8008912:	f7f7 fc6f 	bl	80001f4 <strlen>
 8008916:	4603      	mov	r3, r0
 8008918:	4423      	add	r3, r4
 800891a:	4994      	ldr	r1, [pc, #592]	; (8008b6c <AT_ESP8266_ND+0x2240>)
 800891c:	461a      	mov	r2, r3
 800891e:	460b      	mov	r3, r1
 8008920:	cb03      	ldmia	r3!, {r0, r1}
 8008922:	6010      	str	r0, [r2, #0]
 8008924:	6051      	str	r1, [r2, #4]
 8008926:	8819      	ldrh	r1, [r3, #0]
 8008928:	789b      	ldrb	r3, [r3, #2]
 800892a:	8111      	strh	r1, [r2, #8]
 800892c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 800892e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800893c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008940:	2201      	movs	r2, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f006 f958 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008964:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008968:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3346      	adds	r3, #70	; 0x46
 8008970:	4618      	mov	r0, r3
 8008972:	f7f7 fc3f 	bl	80001f4 <strlen>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	4629      	mov	r1, r5
 800897c:	4620      	mov	r0, r4
 800897e:	f006 f93b 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008990:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008994:	2203      	movs	r2, #3
 8008996:	4618      	mov	r0, r3
 8008998:	f006 f92e 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 800899c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80089b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	335c      	adds	r3, #92	; 0x5c
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7f7 fc15 	bl	80001f4 <strlen>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	4629      	mov	r1, r5
 80089d0:	4620      	mov	r0, r4
 80089d2:	f006 f911 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,separador,3);
 80089d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80089e4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80089e8:	2203      	movs	r2, #3
 80089ea:	4618      	mov	r0, r3
 80089ec:	f006 f904 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 80089f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80089fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8008a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	336c      	adds	r3, #108	; 0x6c
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7f7 fbeb 	bl	80001f4 <strlen>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	4629      	mov	r1, r5
 8008a24:	4620      	mov	r0, r4
 8008a26:	f006 f8e7 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008a38:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f006 f8da 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008a52:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008a56:	2202      	movs	r2, #2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f006 f8cd 	bl	800ebf8 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fbc1 	bl	80001f4 <strlen>
 8008a72:	4603      	mov	r3, r0
 8008a74:	461a      	mov	r2, r3
 8008a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						}

				a->_pasos++;
 8008a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d11b      	bne.n	8008afe <AT_ESP8266_ND+0x21d2>
 8008ac6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d023      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
 8008ace:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad2:	2b0b      	cmp	r3, #11
 8008ad4:	d01f      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(AT_decode==at_wifi_gotip)
 8008ad6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ada:	2b0c      	cmp	r3, #12
 8008adc:	d01b      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(AT_decode==at_restart)
 8008ade:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d017      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(AT_decode==at_error)
 8008ae6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d013      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(AT_decode==at_def_ip_err)
 8008aee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af2:	2b21      	cmp	r3, #33	; 0x21
 8008af4:	d00f      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(AT_decode==at_def_ip_ok)))
 8008af6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008afa:	2b1b      	cmp	r3, #27
 8008afc:	d00b      	beq.n	8008b16 <AT_ESP8266_ND+0x21ea>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8008b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b10:	4293      	cmp	r3, r2
 8008b12:	f341 800a 	ble.w	8009b2a <AT_ESP8266_ND+0x31fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 8008b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b4e:	4806      	ldr	r0, [pc, #24]	; (8008b68 <AT_ESP8266_ND+0x223c>)
 8008b50:	f7fa fc8e 	bl	8003470 <HAL_GPIO_WritePin>
						a->_ticks=0;
 8008b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b64:	f000 bfe1 	b.w	8009b2a <AT_ESP8266_ND+0x31fe>
 8008b68:	40020400 	.word	0x40020400
 8008b6c:	08010514 	.word	0x08010514
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	f040 80e8 	bne.w	8008d64 <AT_ESP8266_ND+0x2438>
 8008b94:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b98:	2b0b      	cmp	r3, #11
 8008b9a:	f000 80e3 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
									   &&(AT_decode!=at_wifi_gotip)
 8008b9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba2:	2b0c      	cmp	r3, #12
 8008ba4:	f000 80de 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008ba8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bac:	2b0e      	cmp	r3, #14
 8008bae:	f000 80d9 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
									   &&(AT_decode!=at_tcp_conectado)
 8008bb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	f000 80d4 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
									   &&(AT_decode!=at_tcp_desconectado)
 8008bbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bc0:	2b10      	cmp	r3, #16
 8008bc2:	f000 80cf 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
									   &&(AT_decode!=at_error))
 8008bc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	f000 80ca 	beq.w	8008d64 <AT_ESP8266_ND+0x2438>
						{
						a->_pasos=0;
 8008bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 8008be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bf6:	48ac      	ldr	r0, [pc, #688]	; (8008ea8 <AT_ESP8266_ND+0x257c>)
 8008bf8:	f7fa fc3a 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7f7 faf2 	bl	80001f4 <strlen>
 8008c10:	4603      	mov	r3, r0
 8008c12:	4423      	add	r3, r4
 8008c14:	4aa5      	ldr	r2, [pc, #660]	; (8008eac <AT_ESP8266_ND+0x2580>)
 8008c16:	461c      	mov	r4, r3
 8008c18:	4613      	mov	r3, r2
 8008c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c1c:	6020      	str	r0, [r4, #0]
 8008c1e:	6061      	str	r1, [r4, #4]
 8008c20:	60a2      	str	r2, [r4, #8]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008c34:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c38:	2201      	movs	r2, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f005 ffdc 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7f7 fad0 	bl	80001f4 <strlen>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4423      	add	r3, r4
 8008c58:	4a95      	ldr	r2, [pc, #596]	; (8008eb0 <AT_ESP8266_ND+0x2584>)
 8008c5a:	6810      	ldr	r0, [r2, #0]
 8008c5c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008c6c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008c70:	2203      	movs	r2, #3
 8008c72:	4618      	mov	r0, r3
 8008c74:	f005 ffc0 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8008c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3330      	adds	r3, #48	; 0x30
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f7 faa7 	bl	80001f4 <strlen>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4629      	mov	r1, r5
 8008cac:	4620      	mov	r0, r4
 8008cae:	f005 ffa3 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008cc0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f005 ff96 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8008ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3340      	adds	r3, #64	; 0x40
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f7 fa7d 	bl	80001f4 <strlen>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4620      	mov	r0, r4
 8008d02:	f005 ff79 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008d14:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f7 fa6b 	bl	80001f4 <strlen>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d24:	4619      	mov	r1, r3
 8008d26:	4620      	mov	r0, r4
 8008d28:	f005 ff66 	bl	800ebf8 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fa5a 	bl	80001f4 <strlen>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						a->_estado=600;
 8008d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d11b      	bne.n	8008dcc <AT_ESP8266_ND+0x24a0>
 8008d94:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d98:	2b0a      	cmp	r3, #10
 8008d9a:	d023      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
 8008d9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da0:	2b0b      	cmp	r3, #11
 8008da2:	d01f      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(AT_decode==at_wifi_gotip)
 8008da4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da8:	2b0c      	cmp	r3, #12
 8008daa:	d01b      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008dac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db0:	2b0e      	cmp	r3, #14
 8008db2:	d017      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(AT_decode==at_tcp_conectado)
 8008db4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db8:	2b0f      	cmp	r3, #15
 8008dba:	d013      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(AT_decode==at_tcp_desconectado)
 8008dbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d00f      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(AT_decode==at_error)))
 8008dc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d00b      	beq.n	8008de4 <AT_ESP8266_ND+0x24b8>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	f340 86a5 	ble.w	8009b2e <AT_ESP8266_ND+0x3202>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 8008e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008e16:	2200      	movs	r2, #0
 8008e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e1c:	4822      	ldr	r0, [pc, #136]	; (8008ea8 <AT_ESP8266_ND+0x257c>)
 8008e1e:	f7fa fb27 	bl	8003470 <HAL_GPIO_WritePin>
						a->_ticks=0;
 8008e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008e32:	f000 be7c 	b.w	8009b2e <AT_ESP8266_ND+0x3202>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	2200      	movs	r2, #0
 8008e44:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008e46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d003      	beq.n	8008e56 <AT_ESP8266_ND+0x252a>
 8008e4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e52:	2b0a      	cmp	r3, #10
 8008e54:	d12e      	bne.n	8008eb4 <AT_ESP8266_ND+0x2588>
				{
					a->_estado=AT_decode;
 8008e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
					a->_ejecucion=0;
 8008e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e8e:	4806      	ldr	r0, [pc, #24]	; (8008ea8 <AT_ESP8266_ND+0x257c>)
 8008e90:	f7fa faee 	bl	8003470 <HAL_GPIO_WritePin>
					a->_subpaso=0;
 8008e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008ea4:	f000 be45 	b.w	8009b32 <AT_ESP8266_ND+0x3206>
 8008ea8:	40020400 	.word	0x40020400
 8008eac:	08010628 	.word	0x08010628
 8008eb0:	08010638 	.word	0x08010638
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	f040 80d7 	bne.w	8009076 <AT_ESP8266_ND+0x274a>
 8008ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 80cd 	bne.w	8009076 <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8008eec:	2201      	movs	r2, #1
 8008eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ef2:	4889      	ldr	r0, [pc, #548]	; (8009118 <AT_ESP8266_ND+0x27ec>)
 8008ef4:	f7fa fabc 	bl	8003470 <HAL_GPIO_WritePin>
										a->_estado=24;
 8008ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2218      	movs	r2, #24
 8008f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008f18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
										a->_pasos=0;
 8008f36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2aac 	strb.w	r2, [r3, #2732]	; 0xaac
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008f64:	4620      	mov	r0, r4
 8008f66:	f7f7 f945 	bl	80001f4 <strlen>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4423      	add	r3, r4
 8008f6e:	4a6b      	ldr	r2, [pc, #428]	; (800911c <AT_ESP8266_ND+0x27f0>)
 8008f70:	461c      	mov	r4, r3
 8008f72:	4613      	mov	r3, r2
 8008f74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f76:	6020      	str	r0, [r4, #0]
 8008f78:	6061      	str	r1, [r4, #4]
 8008f7a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008f7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 8008f8a:	f107 0214 	add.w	r2, r7, #20
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f005 fd39 	bl	800ea08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f7 f923 	bl	80001f4 <strlen>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	f107 0314 	add.w	r3, r7, #20
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f005 fe1e 	bl	800ebf8 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008fbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f603 22ac 	addw	r2, r3, #2732	; 0xaac
 8008fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f005 fe04 	bl	800ebe8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8008fee:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f005 fdff 	bl	800ebf8 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009008:	4618      	mov	r0, r3
 800900a:	f7f7 f8f3 	bl	80001f4 <strlen>
 800900e:	4603      	mov	r3, r0
 8009010:	461a      	mov	r2, r3
 8009012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f603 24ac 	addw	r4, r3, #2732	; 0xaac
 800902e:	4620      	mov	r0, r4
 8009030:	f7f7 f8e0 	bl	80001f4 <strlen>
 8009034:	4603      	mov	r3, r0
 8009036:	4423      	add	r3, r4
 8009038:	4a39      	ldr	r2, [pc, #228]	; (8009120 <AT_ESP8266_ND+0x27f4>)
 800903a:	461c      	mov	r4, r3
 800903c:	4613      	mov	r3, r2
 800903e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009040:	6020      	str	r0, [r4, #0]
 8009042:	6061      	str	r1, [r4, #4]
 8009044:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009046:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
										a->_estado=700;
 8009064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								a->_pasos++;
 8009076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f040 80ae 	bne.w	8009204 <AT_ESP8266_ND+0x28d8>
 80090a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ac:	2b13      	cmp	r3, #19
 80090ae:	f000 80a9 	beq.w	8009204 <AT_ESP8266_ND+0x28d8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80090b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f203 628c 	addw	r2, r3, #1676	; 0x68c
 80090c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7f7 f885 	bl	80001e0 <strcmp>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d023      	beq.n	8009124 <AT_ESP8266_ND+0x27f8>
 80090dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d01f      	beq.n	8009124 <AT_ESP8266_ND+0x27f8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80090e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e8:	2b14      	cmp	r3, #20
 80090ea:	d01b      	beq.n	8009124 <AT_ESP8266_ND+0x27f8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80090ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 80090fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fe:	4293      	cmp	r3, r2
 8009100:	f340 8080 	ble.w	8009204 <AT_ESP8266_ND+0x28d8>
 8009104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009112:	2b01      	cmp	r3, #1
 8009114:	d176      	bne.n	8009204 <AT_ESP8266_ND+0x28d8>
 8009116:	e005      	b.n	8009124 <AT_ESP8266_ND+0x27f8>
 8009118:	40020400 	.word	0x40020400
 800911c:	0801063c 	.word	0x0801063c
 8009120:	08010648 	.word	0x08010648
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8009132:	f241 3288 	movw	r2, #5000	; 0x1388
 8009136:	4293      	cmp	r3, r2
 8009138:	dd0e      	ble.n	8009158 <AT_ESP8266_ND+0x282c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800913a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
								a->_debug_count4++;
 8009158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
								a->_subpaso++;
 8009176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
								a->_enviaruart=1;
 8009194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80091a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80091b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f503 7123 	add.w	r1, r3, #652	; 0x28c
 80091c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8d3 2cdc 	ldr.w	r2, [r3, #3292]	; 0xcdc
 80091ce:	2361      	movs	r3, #97	; 0x61
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	2301      	movs	r3, #1
 80091d4:	f005 fc4c 	bl	800ea70 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80091d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f8d3 2cdc 	ldr.w	r2, [r3, #3292]	; 0xcdc
 80091e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009212:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009216:	f040 848c 	bne.w	8009b32 <AT_ESP8266_ND+0x3206>
 800921a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800921e:	2b13      	cmp	r3, #19
 8009220:	d023      	beq.n	800926a <AT_ESP8266_ND+0x293e>
 8009222:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009226:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8009230:	f241 3288 	movw	r2, #5000	; 0x1388
 8009234:	4293      	cmp	r3, r2
 8009236:	dc18      	bgt.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_wifi_disconnect)
 8009238:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800923c:	2b0a      	cmp	r3, #10
 800923e:	d014      	beq.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_wifi_connected)
 8009240:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009244:	2b0b      	cmp	r3, #11
 8009246:	d010      	beq.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_wifi_gotip)
 8009248:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800924c:	2b0c      	cmp	r3, #12
 800924e:	d00c      	beq.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_tcp_desconectado)
 8009250:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009254:	2b10      	cmp	r3, #16
 8009256:	d008      	beq.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_tcp_snd_err)
 8009258:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800925c:	2b11      	cmp	r3, #17
 800925e:	d004      	beq.n	800926a <AT_ESP8266_ND+0x293e>
																				 ||(AT_decode==at_tcp_enviado_error)))
 8009260:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009264:	2b12      	cmp	r3, #18
 8009266:	f040 8464 	bne.w	8009b32 <AT_ESP8266_ND+0x3206>
									a->_debug_count5++;
 800926a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
									if(a->_ticks > 5000)
 8009288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800928c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8009296:	f241 3288 	movw	r2, #5000	; 0x1388
 800929a:	4293      	cmp	r3, r2
 800929c:	dd25      	ble.n	80092ea <AT_ESP8266_ND+0x29be>
										a->_debug_count8++;
 800929e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_subpaso++;
 80092bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
										a->_ticks=0;
 80092da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80092ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	dd10      	ble.n	800931e <AT_ESP8266_ND+0x29f2>
 80092fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009300:	2b10      	cmp	r3, #16
 8009302:	d00c      	beq.n	800931e <AT_ESP8266_ND+0x29f2>
 8009304:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009308:	2b0a      	cmp	r3, #10
 800930a:	d008      	beq.n	800931e <AT_ESP8266_ND+0x29f2>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800930c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	220f      	movs	r2, #15
 8009318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800931c:	e008      	b.n	8009330 <AT_ESP8266_ND+0x2a04>
										a->_estado=AT_decode;	//Devuelvo el estado
 800931e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800932c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
									a->_ejecucion=0;
 8009340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009350:	2200      	movs	r2, #0
 8009352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009356:	489d      	ldr	r0, [pc, #628]	; (80095cc <AT_ESP8266_ND+0x2ca0>)
 8009358:	f7fa f88a 	bl	8003470 <HAL_GPIO_WritePin>
									a->_subpaso=0;
 800935c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
			break;
 800936c:	e3e1      	b.n	8009b32 <AT_ESP8266_ND+0x3206>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800936e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009372:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c

				if( a->_enviaruart==1)
 800937e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009382:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d175      	bne.n	800947c <AT_ESP8266_ND+0x2b50>
						{
						a->_pasos=0;
 8009390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
						a->_ejecucion=1;
 80093a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80093b0:	2201      	movs	r2, #1
 80093b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093b6:	4885      	ldr	r0, [pc, #532]	; (80095cc <AT_ESP8266_ND+0x2ca0>)
 80093b8:	f7fa f85a 	bl	8003470 <HAL_GPIO_WritePin>
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80093bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7f6 ff12 	bl	80001f4 <strlen>
 80093d0:	4603      	mov	r3, r0
 80093d2:	4423      	add	r3, r4
 80093d4:	4a7e      	ldr	r2, [pc, #504]	; (80095d0 <AT_ESP8266_ND+0x2ca4>)
 80093d6:	461c      	mov	r4, r3
 80093d8:	4615      	mov	r5, r2
 80093da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093dc:	6020      	str	r0, [r4, #0]
 80093de:	6061      	str	r1, [r4, #4]
 80093e0:	60a2      	str	r2, [r4, #8]
 80093e2:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80093e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80093f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f103 0556 	add.w	r5, r3, #86	; 0x56
 8009400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3356      	adds	r3, #86	; 0x56
 800940c:	4618      	mov	r0, r3
 800940e:	f7f6 fef1 	bl	80001f4 <strlen>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	4629      	mov	r1, r5
 8009418:	4620      	mov	r0, r4
 800941a:	f005 fbed 	bl	800ebf8 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800941e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009422:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 800942c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009430:	4618      	mov	r0, r3
 8009432:	f7f6 fedf 	bl	80001f4 <strlen>
 8009436:	4602      	mov	r2, r0
 8009438:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800943c:	4619      	mov	r1, r3
 800943e:	4620      	mov	r0, r4
 8009440:	f005 fbda 	bl	800ebf8 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009452:	4618      	mov	r0, r3
 8009454:	f7f6 fece 	bl	80001f4 <strlen>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
						a->_estado=800;
 800946a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800947c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009480:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800949a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d123      	bne.n	80094f4 <AT_ESP8266_ND+0x2bc8>
 80094ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094b0:	2b0a      	cmp	r3, #10
 80094b2:	d02b      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094b8:	2b0b      	cmp	r3, #11
 80094ba:	d027      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094c0:	2b0c      	cmp	r3, #12
 80094c2:	d023      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094c8:	2b0e      	cmp	r3, #14
 80094ca:	d01f      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d01b      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d017      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e0:	2b15      	cmp	r3, #21
 80094e2:	d013      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e8:	2b16      	cmp	r3, #22
 80094ea:	d00f      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094f0:	2b17      	cmp	r3, #23
 80094f2:	d00b      	beq.n	800950c <AT_ESP8266_ND+0x2be0>
 80094f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8009502:	f241 3288 	movw	r2, #5000	; 0x1388
 8009506:	4293      	cmp	r3, r2
 8009508:	f340 8315 	ble.w	8009b36 <AT_ESP8266_ND+0x320a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800950c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800951a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						a->_instruccion=0;	//Finalizo la instrucci�n
 800951e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
						a->_ejecucion=0;
 800952e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2200      	movs	r2, #0
 800953a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800953e:	2200      	movs	r2, #0
 8009540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009544:	4821      	ldr	r0, [pc, #132]	; (80095cc <AT_ESP8266_ND+0x2ca0>)
 8009546:	f7f9 ff93 	bl	8003470 <HAL_GPIO_WritePin>
						a->_ticks=0;
 800954a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2200      	movs	r2, #0
 8009556:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
					}
			}
			break;
 800955a:	e2ec      	b.n	8009b36 <AT_ESP8266_ND+0x320a>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800955c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009560:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 800956c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009570:	2b10      	cmp	r3, #16
 8009572:	d003      	beq.n	800957c <AT_ESP8266_ND+0x2c50>
 8009574:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009578:	2b0a      	cmp	r3, #10
 800957a:	d12b      	bne.n	80095d4 <AT_ESP8266_ND+0x2ca8>
				{
					a->_estado=AT_decode;
 800957c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800958a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					a->_instruccion=0;		//Finalizo la instrucci�n
 800958e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
					a->_ejecucion=0;
 800959e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80095ae:	2200      	movs	r2, #0
 80095b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095b4:	4805      	ldr	r0, [pc, #20]	; (80095cc <AT_ESP8266_ND+0x2ca0>)
 80095b6:	f7f9 ff5b 	bl	8003470 <HAL_GPIO_WritePin>
					a->_subpaso=0;
 80095ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80095ca:	e2b6      	b.n	8009b3a <AT_ESP8266_ND+0x320e>
 80095cc:	40020400 	.word	0x40020400
 80095d0:	08010654 	.word	0x08010654
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80095d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	f040 8108 	bne.w	80097f8 <AT_ESP8266_ND+0x2ecc>
 80095e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 80fe 	bne.w	80097f8 <AT_ESP8266_ND+0x2ecc>
										a->_ejecucion=1;
 80095fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800960c:	2201      	movs	r2, #1
 800960e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009612:	48a2      	ldr	r0, [pc, #648]	; (800989c <AT_ESP8266_ND+0x2f70>)
 8009614:	f7f9 ff2c 	bl	8003470 <HAL_GPIO_WritePin>
										a->_estado=24;
 8009618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2218      	movs	r2, #24
 8009624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009628:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
										a->_pasos=0;
 8009656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2aac 	strb.w	r2, [r3, #2732]	; 0xaac
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8009684:	4620      	mov	r0, r4
 8009686:	f7f6 fdb5 	bl	80001f4 <strlen>
 800968a:	4603      	mov	r3, r0
 800968c:	4423      	add	r3, r4
 800968e:	4a84      	ldr	r2, [pc, #528]	; (80098a0 <AT_ESP8266_ND+0x2f74>)
 8009690:	461c      	mov	r4, r3
 8009692:	4613      	mov	r3, r2
 8009694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009696:	6020      	str	r0, [r4, #0]
 8009698:	6061      	str	r1, [r4, #4]
 800969a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 800969c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
 80096aa:	f107 020c 	add.w	r2, r7, #12
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f005 f9a9 	bl	800ea08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80096b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80096c4:	f107 030c 	add.w	r3, r7, #12
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f6 fd93 	bl	80001f4 <strlen>
 80096ce:	4602      	mov	r2, r0
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	4619      	mov	r1, r3
 80096d6:	4620      	mov	r0, r4
 80096d8:	f005 fa8e 	bl	800ebf8 <strncat>
										strncat(a->_uart2snd,",",1);
 80096dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7f6 fd82 	bl	80001f4 <strlen>
 80096f0:	4603      	mov	r3, r0
 80096f2:	4423      	add	r3, r4
 80096f4:	496b      	ldr	r1, [pc, #428]	; (80098a4 <AT_ESP8266_ND+0x2f78>)
 80096f6:	461a      	mov	r2, r3
 80096f8:	460b      	mov	r3, r1
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80096fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800970c:	f107 020c 	add.w	r2, r7, #12
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f005 f978 	bl	800ea08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8009726:	f107 030c 	add.w	r3, r7, #12
 800972a:	4618      	mov	r0, r3
 800972c:	f7f6 fd62 	bl	80001f4 <strlen>
 8009730:	4602      	mov	r2, r0
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4619      	mov	r1, r3
 8009738:	4620      	mov	r0, r4
 800973a:	f005 fa5d 	bl	800ebf8 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800973e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f603 22ac 	addw	r2, r3, #2732	; 0xaac
 800974c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f005 fa43 	bl	800ebe8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009770:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009774:	2202      	movs	r2, #2
 8009776:	4618      	mov	r0, r3
 8009778:	f005 fa3e 	bl	800ebf8 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800977c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800978a:	4618      	mov	r0, r3
 800978c:	f7f6 fd32 	bl	80001f4 <strlen>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80097a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f603 24ac 	addw	r4, r3, #2732	; 0xaac
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7f6 fd1f 	bl	80001f4 <strlen>
 80097b6:	4603      	mov	r3, r0
 80097b8:	4423      	add	r3, r4
 80097ba:	4a3b      	ldr	r2, [pc, #236]	; (80098a8 <AT_ESP8266_ND+0x2f7c>)
 80097bc:	461c      	mov	r4, r3
 80097be:	4613      	mov	r3, r2
 80097c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	6061      	str	r1, [r4, #4]
 80097c6:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80097c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
										a->_estado=900;
 80097e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80097f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								a->_pasos++;
 80097f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8d3 3aa0 	ldr.w	r3, [r3, #2720]	; 0xaa0
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8009824:	2b00      	cmp	r3, #0
 8009826:	f040 80ba 	bne.w	800999e <AT_ESP8266_ND+0x3072>
 800982a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800982e:	2b13      	cmp	r3, #19
 8009830:	f000 80b5 	beq.w	800999e <AT_ESP8266_ND+0x3072>
 8009834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f203 628c 	addw	r2, r3, #1676	; 0x68c
 8009842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f7f6 fcc4 	bl	80001e0 <strcmp>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d026      	beq.n	80098ac <AT_ESP8266_ND+0x2f80>
 800985e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d022      	beq.n	80098ac <AT_ESP8266_ND+0x2f80>
 8009866:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800986a:	2b14      	cmp	r3, #20
 800986c:	d01e      	beq.n	80098ac <AT_ESP8266_ND+0x2f80>
 800986e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 800987c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009880:	4293      	cmp	r3, r2
 8009882:	f340 808c 	ble.w	800999e <AT_ESP8266_ND+0x3072>
 8009886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009894:	2b01      	cmp	r3, #1
 8009896:	f040 8082 	bne.w	800999e <AT_ESP8266_ND+0x3072>
 800989a:	e007      	b.n	80098ac <AT_ESP8266_ND+0x2f80>
 800989c:	40020400 	.word	0x40020400
 80098a0:	0801063c 	.word	0x0801063c
 80098a4:	08010664 	.word	0x08010664
 80098a8:	08010648 	.word	0x08010648
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80098ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 80098ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80098be:	4293      	cmp	r3, r2
 80098c0:	dd17      	ble.n	80098f2 <AT_ESP8266_ND+0x2fc6>
 80098c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d10e      	bne.n	80098f2 <AT_ESP8266_ND+0x2fc6>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80098d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
								a->_debug_count4++;
 80098f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
								a->_subpaso++;
 8009910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
								a->_enviaruart=1;
 800992e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2201      	movs	r2, #1
 800993a:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800993e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800994c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f503 7123 	add.w	r1, r3, #652	; 0x28c
 800995a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800995e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8d3 2cdc 	ldr.w	r2, [r3, #3292]	; 0xcdc
 8009968:	2361      	movs	r3, #97	; 0x61
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	2301      	movs	r3, #1
 800996e:	f005 f87f 	bl	800ea70 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009972:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009976:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8d3 2cdc 	ldr.w	r2, [r3, #3292]	; 0xcdc
 8009980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800998e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009992:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 800999e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ac:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80099b0:	f040 80c3 	bne.w	8009b3a <AT_ESP8266_ND+0x320e>
 80099b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099b8:	2b13      	cmp	r3, #19
 80099ba:	d02b      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099c0:	2b0b      	cmp	r3, #11
 80099c2:	d027      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099c8:	2b0c      	cmp	r3, #12
 80099ca:	d023      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 80099da:	f241 3288 	movw	r2, #5000	; 0x1388
 80099de:	4293      	cmp	r3, r2
 80099e0:	dc18      	bgt.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099e6:	2b0a      	cmp	r3, #10
 80099e8:	d014      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d010      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099f6:	2b11      	cmp	r3, #17
 80099f8:	d00c      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 80099fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099fe:	2b12      	cmp	r3, #18
 8009a00:	d008      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 8009a02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a06:	2b16      	cmp	r3, #22
 8009a08:	d004      	beq.n	8009a14 <AT_ESP8266_ND+0x30e8>
 8009a0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a0e:	2b19      	cmp	r3, #25
 8009a10:	f040 8093 	bne.w	8009b3a <AT_ESP8266_ND+0x320e>
									a->_debug_count5++;
 8009a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
									if(a->_ticks > 5000)
 8009a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	; 0xcac
 8009a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a44:	4293      	cmp	r3, r2
 8009a46:	dd25      	ble.n	8009a94 <AT_ESP8266_ND+0x3168>
										a->_debug_count8++;
 8009a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_subpaso++;
 8009a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
										a->_ticks=0;
 8009a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2cac 	str.w	r2, [r3, #3244]	; 0xcac
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	dd07      	ble.n	8009ab6 <AT_ESP8266_ND+0x318a>
 8009aa6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009aaa:	2b10      	cmp	r3, #16
 8009aac:	d003      	beq.n	8009ab6 <AT_ESP8266_ND+0x318a>
 8009aae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ab2:	2b0a      	cmp	r3, #10
 8009ab4:	d108      	bne.n	8009ac8 <AT_ESP8266_ND+0x319c>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
									a->_ejecucion=0;
 8009ad8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009adc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009aee:	4821      	ldr	r0, [pc, #132]	; (8009b74 <AT_ESP8266_ND+0x3248>)
 8009af0:	f7f9 fcbe 	bl	8003470 <HAL_GPIO_WritePin>
									a->_subpaso=0;
 8009af4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
			break;
 8009b04:	e019      	b.n	8009b3a <AT_ESP8266_ND+0x320e>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			}
			break;
 8009b18:	e010      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b1a:	bf00      	nop
 8009b1c:	e00e      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b1e:	bf00      	nop
 8009b20:	e00c      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b22:	bf00      	nop
 8009b24:	e00a      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b26:	bf00      	nop
 8009b28:	e008      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b2a:	bf00      	nop
 8009b2c:	e006      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b2e:	bf00      	nop
 8009b30:	e004      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <AT_ESP8266_ND+0x3210>
			break;
 8009b3a:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
		a->_n_orig=0;
 8009b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

		return (a->_estado);
 8009b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

 }
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b74:	40020400 	.word	0x40020400

08009b78 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b8a:	f240 328d 	movw	r2, #909	; 0x38d
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f001 83c3 	beq.w	800b31a <WiFi_Conn_ND+0x17a2>
 8009b94:	f240 328d 	movw	r2, #909	; 0x38d
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f301 8453 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009b9e:	f240 3289 	movw	r2, #905	; 0x389
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f001 8335 	beq.w	800b212 <WiFi_Conn_ND+0x169a>
 8009ba8:	f240 3289 	movw	r2, #905	; 0x389
 8009bac:	4293      	cmp	r3, r2
 8009bae:	f301 8449 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009bb2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009bb6:	f001 8224 	beq.w	800b002 <WiFi_Conn_ND+0x148a>
 8009bba:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009bbe:	f301 8441 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009bc2:	f240 3229 	movw	r2, #809	; 0x329
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	f301 843c 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009bcc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009bd0:	f280 80a5 	bge.w	8009d1e <WiFi_Conn_ND+0x1a6>
 8009bd4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	f000 8776 	beq.w	800aaca <WiFi_Conn_ND+0xf52>
 8009bde:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009be2:	4293      	cmp	r3, r2
 8009be4:	f301 842e 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009be8:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009bec:	4293      	cmp	r3, r2
 8009bee:	f000 86fc 	beq.w	800a9ea <WiFi_Conn_ND+0xe72>
 8009bf2:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f301 8424 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009bfc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009c00:	f000 862b 	beq.w	800a85a <WiFi_Conn_ND+0xce2>
 8009c04:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009c08:	f301 841c 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c0c:	f240 2261 	movw	r2, #609	; 0x261
 8009c10:	4293      	cmp	r3, r2
 8009c12:	f000 85b1 	beq.w	800a778 <WiFi_Conn_ND+0xc00>
 8009c16:	f240 2261 	movw	r2, #609	; 0x261
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	f301 8412 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c20:	f240 225d 	movw	r2, #605	; 0x25d
 8009c24:	4293      	cmp	r3, r2
 8009c26:	f000 8551 	beq.w	800a6cc <WiFi_Conn_ND+0xb54>
 8009c2a:	f240 225d 	movw	r2, #605	; 0x25d
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	f301 8408 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c38:	f000 84cf 	beq.w	800a5da <WiFi_Conn_ND+0xa62>
 8009c3c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009c40:	f301 8400 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c44:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f000 846a 	beq.w	800a522 <WiFi_Conn_ND+0x9aa>
 8009c4e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009c52:	f281 83f7 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c56:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	f000 8425 	beq.w	800a4aa <WiFi_Conn_ND+0x932>
 8009c60:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009c64:	f281 83ee 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c6c:	f000 83b0 	beq.w	800a3d0 <WiFi_Conn_ND+0x858>
 8009c70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c74:	f301 83e6 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c78:	f240 1299 	movw	r2, #409	; 0x199
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	f000 8369 	beq.w	800a354 <WiFi_Conn_ND+0x7dc>
 8009c82:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009c86:	f281 83dd 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c8a:	f240 1295 	movw	r2, #405	; 0x195
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	f000 8329 	beq.w	800a2e6 <WiFi_Conn_ND+0x76e>
 8009c94:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009c98:	f281 83d4 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009c9c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ca0:	f000 82a0 	beq.w	800a1e4 <WiFi_Conn_ND+0x66c>
 8009ca4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ca8:	f301 83cc 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009cac:	f240 1235 	movw	r2, #309	; 0x135
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	f000 8271 	beq.w	800a198 <WiFi_Conn_ND+0x620>
 8009cb6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009cba:	f281 83c3 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009cbe:	f240 1231 	movw	r2, #305	; 0x131
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f000 8263 	beq.w	800a18e <WiFi_Conn_ND+0x616>
 8009cc8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009ccc:	f281 83ba 	bge.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009cd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009cd4:	f000 8207 	beq.w	800a0e6 <WiFi_Conn_ND+0x56e>
 8009cd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009cdc:	f301 83b2 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009ce0:	2bd1      	cmp	r3, #209	; 0xd1
 8009ce2:	f000 81a0 	beq.w	800a026 <WiFi_Conn_ND+0x4ae>
 8009ce6:	2bd1      	cmp	r3, #209	; 0xd1
 8009ce8:	f301 83ac 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009cec:	2bcd      	cmp	r3, #205	; 0xcd
 8009cee:	f000 8170 	beq.w	8009fd2 <WiFi_Conn_ND+0x45a>
 8009cf2:	2bcd      	cmp	r3, #205	; 0xcd
 8009cf4:	f301 83a6 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009cf8:	2bc8      	cmp	r3, #200	; 0xc8
 8009cfa:	f000 80f1 	beq.w	8009ee0 <WiFi_Conn_ND+0x368>
 8009cfe:	2bc8      	cmp	r3, #200	; 0xc8
 8009d00:	f301 83a0 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009d04:	2b6d      	cmp	r3, #109	; 0x6d
 8009d06:	f000 80b3 	beq.w	8009e70 <WiFi_Conn_ND+0x2f8>
 8009d0a:	2b6d      	cmp	r3, #109	; 0x6d
 8009d0c:	f301 839a 	bgt.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009d10:	2b64      	cmp	r3, #100	; 0x64
 8009d12:	d021      	beq.n	8009d58 <WiFi_Conn_ND+0x1e0>
 8009d14:	2b69      	cmp	r3, #105	; 0x69
 8009d16:	f000 8096 	beq.w	8009e46 <WiFi_Conn_ND+0x2ce>
 8009d1a:	f001 bb93 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009d1e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009d22:	2b09      	cmp	r3, #9
 8009d24:	f201 838e 	bhi.w	800b444 <WiFi_Conn_ND+0x18cc>
 8009d28:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <WiFi_Conn_ND+0x1b8>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	0800abd7 	.word	0x0800abd7
 8009d34:	0800b445 	.word	0x0800b445
 8009d38:	0800b445 	.word	0x0800b445
 8009d3c:	0800b445 	.word	0x0800b445
 8009d40:	0800b445 	.word	0x0800b445
 8009d44:	0800aca5 	.word	0x0800aca5
 8009d48:	0800ad45 	.word	0x0800ad45
 8009d4c:	0800ade5 	.word	0x0800ade5
 8009d50:	0800ae85 	.word	0x0800ae85
 8009d54:	0800af25 	.word	0x0800af25
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d5e:	2b64      	cmp	r3, #100	; 0x64
 8009d60:	d046      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d041      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d72:	2b1c      	cmp	r3, #28
 8009d74:	d03c      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d037      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d032      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d90:	2b13      	cmp	r3, #19
 8009d92:	d02d      	beq.n	8009df0 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7fc fc39 	bl	800660c <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d14e      	bne.n	8009e42 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7fc fdc1 	bl	800692c <AT_ESP8266_ND>
 8009daa:	4602      	mov	r2, r0
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d109      	bne.n	8009dd8 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7f7 fba0 	bl	8001518 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	2364      	movs	r3, #100	; 0x64
 8009de8:	68b8      	ldr	r0, [r7, #8]
 8009dea:	f7fb fb93 	bl	8005514 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009dee:	e028      	b.n	8009e42 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d004      	beq.n	8009e04 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
					if((b->_estado==at_ok)||
 8009e00:	2b1c      	cmp	r3, #28
 8009e02:	d103      	bne.n	8009e0c <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	226d      	movs	r2, #109	; 0x6d
 8009e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d00f      	beq.n	8009e36 <WiFi_Conn_ND+0x2be>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d00a      	beq.n	8009e36 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e26:	2b0b      	cmp	r3, #11
 8009e28:	d005      	beq.n	8009e36 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e30:	2b0c      	cmp	r3, #12
 8009e32:	f041 82d8 	bne.w	800b3e6 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2269      	movs	r2, #105	; 0x69
 8009e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009e3e:	f001 bad2 	b.w	800b3e6 <WiFi_Conn_ND+0x186e>
 8009e42:	f001 bad0 	b.w	800b3e6 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7fc fbe0 	bl	800660c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2264      	movs	r2, #100	; 0x64
 8009e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				b->_estado=0;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				b->_n_orig=0; //Borro el vector RX
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			}
			break;
 8009e6c:	f001 baea 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00c      	beq.n	8009e94 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fc fbf2 	bl	8006664 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;//
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009e92:	e00e      	b.n	8009eb2 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7fc fbcf 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	22c8      	movs	r2, #200	; 0xc8
 8009e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	f041 8296 	bne.w	800b3ea <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7fc fba4 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2264      	movs	r2, #100	; 0x64
 8009ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
			}
			break;
 8009edc:	f001 ba85 	b.w	800b3ea <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ee6:	2bc8      	cmp	r3, #200	; 0xc8
 8009ee8:	d04f      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d04a      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d045      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d040      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d03b      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f18:	2b0a      	cmp	r3, #10
 8009f1a:	d036      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f22:	2b0b      	cmp	r3, #11
 8009f24:	d031      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d02c      	beq.n	8009f8a <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7fc fb81 	bl	8006638 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d124      	bne.n	8009f8a <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7fc fcf3 	bl	800692c <AT_ESP8266_ND>
 8009f46:	4602      	mov	r2, r0
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d109      	bne.n	8009f74 <WiFi_Conn_ND+0x3fc>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7f7 fad2 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	2364      	movs	r3, #100	; 0x64
 8009f84:	68b8      	ldr	r0, [r7, #8]
 8009f86:	f7fb fac5 	bl	8005514 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d004      	beq.n	8009f9e <WiFi_Conn_ND+0x426>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f9a:	2b0c      	cmp	r3, #12
 8009f9c:	d103      	bne.n	8009fa6 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	22d1      	movs	r2, #209	; 0xd1
 8009fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d00a      	beq.n	8009fc6 <WiFi_Conn_ND+0x44e>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d005      	beq.n	8009fc6 <WiFi_Conn_ND+0x44e>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc0:	2b20      	cmp	r3, #32
 8009fc2:	f041 8214 	bne.w	800b3ee <WiFi_Conn_ND+0x1876>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	22cd      	movs	r2, #205	; 0xcd
 8009fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				//----Condiciones de cambio de estado
			}
			break;
 8009fce:	f001 ba0e 	b.w	800b3ee <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009fd2:	f241 3088 	movw	r0, #5000	; 0x1388
 8009fd6:	f7f8 fde9 	bl	8002bac <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7fc fb2c 	bl	8006638 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	22c8      	movs	r2, #200	; 0xc8
 8009fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				b->_estado=0;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				b->_n_orig=0; //Borro el vector RX
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	f041 81f7 	bne.w	800b3f2 <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7fc fb01 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2264      	movs	r2, #100	; 0x64
 800a00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
			}
			break;
 800a022:	f001 b9e6 	b.w	800b3f2 <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a034:	2b01      	cmp	r3, #1
 800a036:	d108      	bne.n	800a04a <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f240 3229 	movw	r2, #809	; 0x329
 800a03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a050:	2b0a      	cmp	r3, #10
 800a052:	d004      	beq.n	800a05e <WiFi_Conn_ND+0x4e6>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	2b0d      	cmp	r3, #13
 800a05c:	d10a      	bne.n	800a074 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7fc faea 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	22c8      	movs	r2, #200	; 0xc8
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d10e      	bne.n	800a09c <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fc fac4 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2264      	movs	r2, #100	; 0x64
 800a088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d011      	beq.n	800a0ca <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fc fb34 	bl	8006714 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a0c6:	f001 b9bd 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7fc faca 	bl	8006664 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			break;
 800a0e2:	f001 b9af 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a0f0:	d03b      	beq.n	800a16a <WiFi_Conn_ND+0x5f2>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d036      	beq.n	800a16a <WiFi_Conn_ND+0x5f2>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a102:	2b0a      	cmp	r3, #10
 800a104:	d031      	beq.n	800a16a <WiFi_Conn_ND+0x5f2>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10c:	2b0d      	cmp	r3, #13
 800a10e:	d02c      	beq.n	800a16a <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7fc fad3 	bl	80066bc <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d124      	bne.n	800a16a <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7fc fc03 	bl	800692c <AT_ESP8266_ND>
 800a126:	4602      	mov	r2, r0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d109      	bne.n	800a154 <WiFi_Conn_ND+0x5dc>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f7f7 f9e2 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a160:	b29a      	uxth	r2, r3
 800a162:	2364      	movs	r3, #100	; 0x64
 800a164:	68b8      	ldr	r0, [r7, #8]
 800a166:	f7fb f9d5 	bl	8005514 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d005      	beq.n	800a180 <WiFi_Conn_ND+0x608>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a17a:	2b0d      	cmp	r3, #13
 800a17c:	f041 813b 	bne.w	800b3f6 <WiFi_Conn_ND+0x187e>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f240 1235 	movw	r2, #309	; 0x135
 800a186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				//----Condiciones de cambio de estado
			}
			break;
 800a18a:	f001 b934 	b.w	800b3f6 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7fc fa26 	bl	80065e0 <NOP>
			}
			break;
 800a194:	f001 b956 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

				ConectarWIFI(b);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7fc fa49 	bl	8006638 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	22c8      	movs	r2, #200	; 0xc8
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				b->_estado=0;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	f041 811c 	bne.w	800b3fa <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7fc fa22 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2264      	movs	r2, #100	; 0x64
 800a1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
			}
			break;
 800a1e0:	f001 b90b 	b.w	800b3fa <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1ee:	d04f      	beq.n	800a290 <WiFi_Conn_ND+0x718>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d04a      	beq.n	800a290 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a200:	2b01      	cmp	r3, #1
 800a202:	d045      	beq.n	800a290 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d040      	beq.n	800a290 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a214:	2b07      	cmp	r3, #7
 800a216:	d03b      	beq.n	800a290 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d036      	beq.n	800a290 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a228:	2b1e      	cmp	r3, #30
 800a22a:	d031      	beq.n	800a290 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a232:	2b1f      	cmp	r3, #31
 800a234:	d02c      	beq.n	800a290 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7fc fa14 	bl	8006664 <MUX>
						if(b->_enviaruart==1)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d124      	bne.n	800a290 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7fc fb70 	bl	800692c <AT_ESP8266_ND>
 800a24c:	4602      	mov	r2, r0
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a262:	2b01      	cmp	r3, #1
 800a264:	d109      	bne.n	800a27a <WiFi_Conn_ND+0x702>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7f7 f94f 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a286:	b29a      	uxth	r2, r3
 800a288:	2364      	movs	r3, #100	; 0x64
 800a28a:	68b8      	ldr	r0, [r7, #8]
 800a28c:	f7fb f942 	bl	8005514 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a296:	2b01      	cmp	r3, #1
 800a298:	d009      	beq.n	800a2ae <WiFi_Conn_ND+0x736>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2a0:	2b07      	cmp	r3, #7
 800a2a2:	d004      	beq.n	800a2ae <WiFi_Conn_ND+0x736>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d104      	bne.n	800a2b8 <WiFi_Conn_ND+0x740>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f240 1299 	movw	r2, #409	; 0x199
 800a2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d00a      	beq.n	800a2d8 <WiFi_Conn_ND+0x760>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2c8:	2b1e      	cmp	r3, #30
 800a2ca:	d005      	beq.n	800a2d8 <WiFi_Conn_ND+0x760>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2d2:	2b1f      	cmp	r3, #31
 800a2d4:	f041 8093 	bne.w	800b3fe <WiFi_Conn_ND+0x1886>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f240 1295 	movw	r2, #405	; 0x195
 800a2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				//----Condiciones de cambio de estado
			}
			break;
 800a2e2:	f001 b88c 	b.w	800b3fe <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7fc f97a 	bl	80065e0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d112      	bne.n	800a31c <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7fc f988 	bl	800660c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2264      	movs	r2, #100	; 0x64
 800a300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a322:	2b0a      	cmp	r3, #10
 800a324:	d005      	beq.n	800a332 <WiFi_Conn_ND+0x7ba>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a32c:	2b0d      	cmp	r3, #13
 800a32e:	f041 8068 	bne.w	800b402 <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7fc f980 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	22c8      	movs	r2, #200	; 0xc8
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}
			}
			break;
 800a350:	f001 b857 	b.w	800b402 <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7fc f943 	bl	80065e0 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d10e      	bne.n	800a38a <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7fc f94d 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2264      	movs	r2, #100	; 0x64
 800a376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a390:	2b0a      	cmp	r3, #10
 800a392:	d004      	beq.n	800a39e <WiFi_Conn_ND+0x826>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a39a:	2b0d      	cmp	r3, #13
 800a39c:	d10a      	bne.n	800a3b4 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7fc f94a 	bl	8006638 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	22c8      	movs	r2, #200	; 0xc8
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					}

					IPDef(b);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7fc f96b 	bl	8006690 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			}
			break;
 800a3cc:	f001 b83a 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a3da:	d045      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d040      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d03b      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d036      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a400:	2b1b      	cmp	r3, #27
 800a402:	d031      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a40a:	2b21      	cmp	r3, #33	; 0x21
 800a40c:	d02c      	beq.n	800a468 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fc f93e 	bl	8006690 <IPDef>
						if(b->_enviaruart==1)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d124      	bne.n	800a468 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7fc fa84 	bl	800692c <AT_ESP8266_ND>
 800a424:	4602      	mov	r2, r0
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d109      	bne.n	800a452 <WiFi_Conn_ND+0x8da>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7f7 f863 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a45e:	b29a      	uxth	r2, r3
 800a460:	2364      	movs	r3, #100	; 0x64
 800a462:	68b8      	ldr	r0, [r7, #8]
 800a464:	f7fb f856 	bl	8005514 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d004      	beq.n	800a47c <WiFi_Conn_ND+0x904>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a478:	2b1b      	cmp	r3, #27
 800a47a:	d104      	bne.n	800a486 <WiFi_Conn_ND+0x90e>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d005      	beq.n	800a49c <WiFi_Conn_ND+0x924>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a496:	2b21      	cmp	r3, #33	; 0x21
 800a498:	f040 87b5 	bne.w	800b406 <WiFi_Conn_ND+0x188e>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				//----Condiciones de cambio de estado
			}
			break;
 800a4a6:	f000 bfae 	b.w	800b406 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7fc f898 	bl	80065e0 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d004      	beq.n	800a4c4 <WiFi_Conn_ND+0x94c>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d112      	bne.n	800a4ea <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7fc f8a1 	bl	800660c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2264      	movs	r2, #100	; 0x64
 800a4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f0:	2b0a      	cmp	r3, #10
 800a4f2:	d005      	beq.n	800a500 <WiFi_Conn_ND+0x988>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4fa:	2b0d      	cmp	r3, #13
 800a4fc:	f040 8785 	bne.w	800b40a <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7fc f899 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	22c8      	movs	r2, #200	; 0xc8
 800a50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}
			}
			break;
 800a51e:	f000 bf74 	b.w	800b40a <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7fc f85c 	bl	80065e0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d112      	bne.n	800a558 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7fc f86a 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2264      	movs	r2, #100	; 0x64
 800a53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a55e:	2b0a      	cmp	r3, #10
 800a560:	d004      	beq.n	800a56c <WiFi_Conn_ND+0x9f4>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a568:	2b0d      	cmp	r3, #13
 800a56a:	d10e      	bne.n	800a58a <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7fc f863 	bl	8006638 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	22c8      	movs	r2, #200	; 0xc8
 800a576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d111      	bne.n	800a5b8 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7fc f8a7 	bl	80066e8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a5b4:	f000 bf46 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7fc f83d 	bl	8006638 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22c8      	movs	r2, #200	; 0xc8
 800a5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;//
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0;// //Borro el vector RX
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
			break;
 800a5d6:	f000 bf35 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a5e4:	d04a      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d045      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d040      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a600:	2b0a      	cmp	r3, #10
 800a602:	d03b      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a60a:	2b0e      	cmp	r3, #14
 800a60c:	d036      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a614:	2b0f      	cmp	r3, #15
 800a616:	d031      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a61e:	2b10      	cmp	r3, #16
 800a620:	d02c      	beq.n	800a67c <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7fc f860 	bl	80066e8 <ConectarTCP>
						if(b->_enviaruart==1)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d124      	bne.n	800a67c <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7fc f97a 	bl	800692c <AT_ESP8266_ND>
 800a638:	4602      	mov	r2, r0
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d109      	bne.n	800a666 <WiFi_Conn_ND+0xaee>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7f6 ff59 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a672:	b29a      	uxth	r2, r3
 800a674:	2364      	movs	r3, #100	; 0x64
 800a676:	68b8      	ldr	r0, [r7, #8]
 800a678:	f7fa ff4c 	bl	8005514 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a682:	2b01      	cmp	r3, #1
 800a684:	d009      	beq.n	800a69a <WiFi_Conn_ND+0xb22>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a68c:	2b0e      	cmp	r3, #14
 800a68e:	d004      	beq.n	800a69a <WiFi_Conn_ND+0xb22>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a696:	2b0f      	cmp	r3, #15
 800a698:	d106      	bne.n	800a6a8 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f240 2261 	movw	r2, #609	; 0x261
 800a6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a6a4:	f000 beb3 	b.w	800b40e <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d005      	beq.n	800a6be <WiFi_Conn_ND+0xb46>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	f040 86a8 	bne.w	800b40e <WiFi_Conn_ND+0x1896>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f240 225d 	movw	r2, #605	; 0x25d
 800a6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			break;
 800a6c8:	f000 bea1 	b.w	800b40e <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7fb ff87 	bl	80065e0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d8:	2b04      	cmp	r3, #4
 800a6da:	d112      	bne.n	800a702 <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7fb ff95 	bl	800660c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2264      	movs	r2, #100	; 0x64
 800a6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a708:	2b0a      	cmp	r3, #10
 800a70a:	d004      	beq.n	800a716 <WiFi_Conn_ND+0xb9e>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a712:	2b0d      	cmp	r3, #13
 800a714:	d10e      	bne.n	800a734 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7fb ff8e 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	22c8      	movs	r2, #200	; 0xc8
 800a720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d00a      	beq.n	800a754 <WiFi_Conn_ND+0xbdc>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a744:	2b10      	cmp	r3, #16
 800a746:	d005      	beq.n	800a754 <WiFi_Conn_ND+0xbdc>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a74e:	2b0e      	cmp	r3, #14
 800a750:	f040 865f 	bne.w	800b412 <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7fb ffc7 	bl	80066e8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}
			}
			break;
 800a774:	f000 be4d 	b.w	800b412 <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7fb ff31 	bl	80065e0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a784:	2b04      	cmp	r3, #4
 800a786:	d112      	bne.n	800a7ae <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7fb ff3f 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2264      	movs	r2, #100	; 0x64
 800a792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b4:	2b0a      	cmp	r3, #10
 800a7b6:	d004      	beq.n	800a7c2 <WiFi_Conn_ND+0xc4a>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7be:	2b0d      	cmp	r3, #13
 800a7c0:	d10e      	bne.n	800a7e0 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7fb ff38 	bl	8006638 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	22c8      	movs	r2, #200	; 0xc8
 800a7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d004      	beq.n	800a7f4 <WiFi_Conn_ND+0xc7c>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d10f      	bne.n	800a814 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7fb ff77 	bl	80066e8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a81a:	2b0e      	cmp	r3, #14
 800a81c:	d005      	beq.n	800a82a <WiFi_Conn_ND+0xcb2>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a824:	2b0f      	cmp	r3, #15
 800a826:	f040 85f6 	bne.w	800b416 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a830:	2b02      	cmp	r3, #2
 800a832:	f240 85f0 	bls.w	800b416 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7fb ff98 	bl	800676c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							b->_estado=0;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
							b->_n_orig=0; //Borro el vector Rx
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
						}
					}
			}
			break;
 800a856:	f000 bdde 	b.w	800b416 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a860:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a864:	d054      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d04f      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a876:	2b0a      	cmp	r3, #10
 800a878:	d04a      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a880:	2b10      	cmp	r3, #16
 800a882:	d045      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a88a:	2b11      	cmp	r3, #17
 800a88c:	d040      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a894:	2b14      	cmp	r3, #20
 800a896:	d03b      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a89e:	2b12      	cmp	r3, #18
 800a8a0:	d036      	beq.n	800a910 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d907      	bls.n	800a8bc <WiFi_Conn_ND+0xd44>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7fb ff58 	bl	800676c <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d124      	bne.n	800a910 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f7fc f830 	bl	800692c <AT_ESP8266_ND>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_enviaruart=0;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d109      	bne.n	800a8fa <WiFi_Conn_ND+0xd82>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7f6 fe0f 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a906:	b29a      	uxth	r2, r3
 800a908:	2364      	movs	r3, #100	; 0x64
 800a90a:	68b8      	ldr	r0, [r7, #8]
 800a90c:	f7fa fe02 	bl	8005514 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a916:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a91a:	d13b      	bne.n	800a994 <WiFi_Conn_ND+0xe1c>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a922:	2b01      	cmp	r3, #1
 800a924:	d136      	bne.n	800a994 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d031      	beq.n	800a994 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a936:	2b0a      	cmp	r3, #10
 800a938:	d02c      	beq.n	800a994 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a940:	2b10      	cmp	r3, #16
 800a942:	d027      	beq.n	800a994 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a94a:	2b11      	cmp	r3, #17
 800a94c:	d022      	beq.n	800a994 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a954:	2b12      	cmp	r3, #18
 800a956:	d01d      	beq.n	800a994 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a966:	2b01      	cmp	r3, #1
 800a968:	d109      	bne.n	800a97e <WiFi_Conn_ND+0xe06>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7f6 fdcd 	bl	8001518 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	2364      	movs	r3, #100	; 0x64
 800a98e:	68b8      	ldr	r0, [r7, #8]
 800a990:	f7fa fdc0 	bl	8005514 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a99a:	2b13      	cmp	r3, #19
 800a99c:	d104      	bne.n	800a9a8 <WiFi_Conn_ND+0xe30>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d014      	beq.n	800a9dc <WiFi_Conn_ND+0xe64>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b8:	2b0a      	cmp	r3, #10
 800a9ba:	d00f      	beq.n	800a9dc <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9c2:	2b10      	cmp	r3, #16
 800a9c4:	d00a      	beq.n	800a9dc <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9cc:	2b11      	cmp	r3, #17
 800a9ce:	d005      	beq.n	800a9dc <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9d6:	2b12      	cmp	r3, #18
 800a9d8:	f040 851f 	bne.w	800b41a <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a9e6:	f000 bd18 	b.w	800b41a <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7fb fdf8 	bl	80065e0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d112      	bne.n	800aa20 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7fb fe06 	bl	800660c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2264      	movs	r2, #100	; 0x64
 800aa04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa26:	2b0a      	cmp	r3, #10
 800aa28:	d004      	beq.n	800aa34 <WiFi_Conn_ND+0xebc>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa30:	2b0d      	cmp	r3, #13
 800aa32:	d10e      	bne.n	800aa52 <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7fb fdff 	bl	8006638 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	22c8      	movs	r2, #200	; 0xc8
 800aa3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa58:	2b0c      	cmp	r3, #12
 800aa5a:	d10f      	bne.n	800aa7c <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7fb fe43 	bl	80066e8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d00f      	beq.n	800aaa6 <WiFi_Conn_ND+0xf2e>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa8c:	2b10      	cmp	r3, #16
 800aa8e:	d00a      	beq.n	800aaa6 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa96:	2b11      	cmp	r3, #17
 800aa98:	d005      	beq.n	800aaa6 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaa0:	2b12      	cmp	r3, #18
 800aaa2:	f040 84bc 	bne.w	800b41e <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7fb fe1e 	bl	80066e8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					b->_estado=0;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					b->_n_orig=0; //Borro el vector RX
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
				}
			}
			break;
 800aac6:	f000 bcaa 	b.w	800b41e <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7fb fd88 	bl	80065e0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d112      	bne.n	800ab00 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7fb fd96 	bl	800660c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2264      	movs	r2, #100	; 0x64
 800aae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab06:	2b0a      	cmp	r3, #10
 800ab08:	d004      	beq.n	800ab14 <WiFi_Conn_ND+0xf9c>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab10:	2b0d      	cmp	r3, #13
 800ab12:	d10e      	bne.n	800ab32 <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7fb fd8f 	bl	8006638 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	22c8      	movs	r2, #200	; 0xc8
 800ab1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d00e      	beq.n	800ab5a <WiFi_Conn_ND+0xfe2>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab42:	2b0b      	cmp	r3, #11
 800ab44:	d009      	beq.n	800ab5a <WiFi_Conn_ND+0xfe2>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab4c:	2b0c      	cmp	r3, #12
 800ab4e:	d004      	beq.n	800ab5a <WiFi_Conn_ND+0xfe2>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab56:	2b10      	cmp	r3, #16
 800ab58:	d10f      	bne.n	800ab7a <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7fb fdc4 	bl	80066e8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						b->_estado=0;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
						b->_n_orig=0; //Borro el vector RX
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ab7a:	20c8      	movs	r0, #200	; 0xc8
 800ab7c:	f7f8 f816 	bl	8002bac <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d916      	bls.n	800abb8 <WiFi_Conn_ND+0x1040>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d011      	beq.n	800abb8 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f7fb fde9 	bl	800676c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							b->_estado=0;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
							b->_n_orig=0; //Borro el vector RX
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800abb4:	f000 bc46 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f240 2261 	movw	r2, #609	; 0x261
 800abbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							b->_estado=0;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
							b->_n_orig=0;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
			break;
 800abd2:	f000 bc37 	b.w	800b444 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abdc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800abe0:	d045      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d040      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abf2:	2b0a      	cmp	r3, #10
 800abf4:	d03b      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abfc:	2b15      	cmp	r3, #21
 800abfe:	d036      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac06:	2b16      	cmp	r3, #22
 800ac08:	d031      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac10:	2b17      	cmp	r3, #23
 800ac12:	d02c      	beq.n	800ac6e <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7fb fd7d 	bl	8006714 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d124      	bne.n	800ac6e <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7fb fe81 	bl	800692c <AT_ESP8266_ND>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
											b->_enviaruart=0;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d109      	bne.n	800ac58 <WiFi_Conn_ND+0x10e0>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7f6 fc60 	bl	8001518 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	2364      	movs	r3, #100	; 0x64
 800ac68:	68b8      	ldr	r0, [r7, #8]
 800ac6a:	f7fa fc53 	bl	8005514 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac74:	2b15      	cmp	r3, #21
 800ac76:	d004      	beq.n	800ac82 <WiFi_Conn_ND+0x110a>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac7e:	2b17      	cmp	r3, #23
 800ac80:	d104      	bne.n	800ac8c <WiFi_Conn_ND+0x1114>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f240 3229 	movw	r2, #809	; 0x329
 800ac88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac92:	2b16      	cmp	r3, #22
 800ac94:	f040 83c5 	bne.w	800b422 <WiFi_Conn_ND+0x18aa>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f240 3225 	movw	r2, #805	; 0x325
 800ac9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							//----Condiciones de cambio de estado
						}
						break;
 800aca2:	e3be      	b.n	800b422 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7fb fc9b 	bl	80065e0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d112      	bne.n	800acda <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7fb fca9 	bl	800660c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2264      	movs	r2, #100	; 0x64
 800acbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ace0:	2b0a      	cmp	r3, #10
 800ace2:	d004      	beq.n	800acee <WiFi_Conn_ND+0x1176>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acea:	2b0d      	cmp	r3, #13
 800acec:	d10e      	bne.n	800ad0c <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7fb fca2 	bl	8006638 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	22c8      	movs	r2, #200	; 0xc8
 800acf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d005      	beq.n	800ad22 <WiFi_Conn_ND+0x11aa>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad1c:	2b10      	cmp	r3, #16
 800ad1e:	f040 8382 	bne.w	800b426 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7fb fce0 	bl	80066e8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ad42:	e370      	b.n	800b426 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7fb fc4b 	bl	80065e0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d112      	bne.n	800ad7a <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7fb fc59 	bl	800660c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2264      	movs	r2, #100	; 0x64
 800ad5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad80:	2b0a      	cmp	r3, #10
 800ad82:	d004      	beq.n	800ad8e <WiFi_Conn_ND+0x1216>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad8a:	2b0d      	cmp	r3, #13
 800ad8c:	d10e      	bne.n	800adac <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7fb fc52 	bl	8006638 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	22c8      	movs	r2, #200	; 0xc8
 800ad98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d005      	beq.n	800adc2 <WiFi_Conn_ND+0x124a>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adbc:	2b10      	cmp	r3, #16
 800adbe:	f040 8334 	bne.w	800b42a <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7fb fc90 	bl	80066e8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f44f 7216 	mov.w	r2, #600	; 0x258
 800adce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}
						}
						break;
 800ade2:	e322      	b.n	800b42a <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7fb fbfb 	bl	80065e0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d112      	bne.n	800ae1a <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7fb fc09 	bl	800660c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2264      	movs	r2, #100	; 0x64
 800adfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae20:	2b0a      	cmp	r3, #10
 800ae22:	d004      	beq.n	800ae2e <WiFi_Conn_ND+0x12b6>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae2a:	2b0d      	cmp	r3, #13
 800ae2c:	d10e      	bne.n	800ae4c <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7fb fc02 	bl	8006638 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	22c8      	movs	r2, #200	; 0xc8
 800ae38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d005      	beq.n	800ae62 <WiFi_Conn_ND+0x12ea>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae5c:	2b10      	cmp	r3, #16
 800ae5e:	f040 82e6 	bne.w	800b42e <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7fb fc40 	bl	80066e8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}
						}
						break;
 800ae82:	e2d4      	b.n	800b42e <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7fb fbab 	bl	80065e0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d112      	bne.n	800aeba <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7fb fbb9 	bl	800660c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2264      	movs	r2, #100	; 0x64
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec0:	2b0a      	cmp	r3, #10
 800aec2:	d004      	beq.n	800aece <WiFi_Conn_ND+0x1356>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeca:	2b0d      	cmp	r3, #13
 800aecc:	d10e      	bne.n	800aeec <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7fb fbb2 	bl	8006638 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	22c8      	movs	r2, #200	; 0xc8
 800aed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d005      	beq.n	800af02 <WiFi_Conn_ND+0x138a>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	f040 8298 	bne.w	800b432 <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7fb fbf0 	bl	80066e8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}
						}
						break;
 800af22:	e286      	b.n	800b432 <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7fb fb5b 	bl	80065e0 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d112      	bne.n	800af62 <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7fb fb65 	bl	800660c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2264      	movs	r2, #100	; 0x64
 800af46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af68:	2b0a      	cmp	r3, #10
 800af6a:	d004      	beq.n	800af76 <WiFi_Conn_ND+0x13fe>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af72:	2b0d      	cmp	r3, #13
 800af74:	d10e      	bne.n	800af94 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7fb fb5e 	bl	8006638 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	22c8      	movs	r2, #200	; 0xc8
 800af80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d004      	beq.n	800afa8 <WiFi_Conn_ND+0x1430>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d10f      	bne.n	800afc8 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7fb fb9d 	bl	80066e8 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 800afce:	2b01      	cmp	r3, #1
 800afd0:	f040 8231 	bne.w	800b436 <WiFi_Conn_ND+0x18be>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f000 822b 	beq.w	800b436 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f7fb fbad 	bl	8006740 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b000:	e219      	b.n	800b436 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b008:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b00c:	d063      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b014:	2b02      	cmp	r3, #2
 800b016:	d05e      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b01e:	2b0a      	cmp	r3, #10
 800b020:	d059      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_wifi_disconnect)&&
 800b028:	2b0b      	cmp	r3, #11
 800b02a:	d054      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_wifi_connected)&&
 800b032:	2b0c      	cmp	r3, #12
 800b034:	d04f      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_wifi_gotip)&&
 800b03c:	2b10      	cmp	r3, #16
 800b03e:	d04a      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_tcp_desconectado)&&
 800b046:	2b11      	cmp	r3, #17
 800b048:	d045      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_tcp_snd_err)&&
 800b050:	2b12      	cmp	r3, #18
 800b052:	d040      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_tcp_enviado_error)&&
 800b05a:	2b13      	cmp	r3, #19
 800b05c:	d03b      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b064:	2b16      	cmp	r3, #22
 800b066:	d036      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b06e:	2b19      	cmp	r3, #25
 800b070:	d031      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d02c      	beq.n	800b0d6 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7fb fb5f 	bl	8006740 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d124      	bne.n	800b0d6 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7fb fc4d 	bl	800692c <AT_ESP8266_ND>
 800b092:	4602      	mov	r2, r0
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
											b->_enviaruart=0;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d109      	bne.n	800b0c0 <WiFi_Conn_ND+0x1548>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	f7f6 fa2c 	bl	8001518 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	2364      	movs	r3, #100	; 0x64
 800b0d0:	68b8      	ldr	r0, [r7, #8]
 800b0d2:	f7fa fa1f 	bl	8005514 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0dc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b0e0:	d154      	bne.n	800b18c <WiFi_Conn_ND+0x1614>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d14f      	bne.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d04a      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_error)&&
 800b0fc:	2b0a      	cmp	r3, #10
 800b0fe:	d045      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_wifi_disconnect)&&
 800b106:	2b0b      	cmp	r3, #11
 800b108:	d040      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_wifi_connected)&&
 800b110:	2b0c      	cmp	r3, #12
 800b112:	d03b      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_wifi_gotip)&&
 800b11a:	2b10      	cmp	r3, #16
 800b11c:	d036      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_tcp_desconectado)&&
 800b124:	2b11      	cmp	r3, #17
 800b126:	d031      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_tcp_snd_err)&&
 800b12e:	2b12      	cmp	r3, #18
 800b130:	d02c      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_tcp_enviado_error)&&
 800b138:	2b13      	cmp	r3, #19
 800b13a:	d027      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b142:	2b16      	cmp	r3, #22
 800b144:	d022      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b14c:	2b19      	cmp	r3, #25
 800b14e:	d01d      	beq.n	800b18c <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d109      	bne.n	800b176 <WiFi_Conn_ND+0x15fe>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800b16e:	4619      	mov	r1, r3
 800b170:	4610      	mov	r0, r2
 800b172:	f7f6 f9d1 	bl	8001518 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 800b182:	b29a      	uxth	r2, r3
 800b184:	2364      	movs	r3, #100	; 0x64
 800b186:	68b8      	ldr	r0, [r7, #8]
 800b188:	f7fa f9c4 	bl	8005514 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b192:	2b13      	cmp	r3, #19
 800b194:	d104      	bne.n	800b1a0 <WiFi_Conn_ND+0x1628>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f240 328d 	movw	r2, #909	; 0x38d
 800b19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d02d      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d028      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b1ba:	2b0a      	cmp	r3, #10
 800b1bc:	d023      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c4:	2b0b      	cmp	r3, #11
 800b1c6:	d01e      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b1ce:	2b0c      	cmp	r3, #12
 800b1d0:	d019      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d014      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b1e2:	2b11      	cmp	r3, #17
 800b1e4:	d00f      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ec:	2b12      	cmp	r3, #18
 800b1ee:	d00a      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b1f6:	2b16      	cmp	r3, #22
 800b1f8:	d005      	beq.n	800b206 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b200:	2b19      	cmp	r3, #25
 800b202:	f040 811a 	bne.w	800b43a <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f240 3289 	movw	r2, #905	; 0x389
 800b20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b210:	e113      	b.n	800b43a <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fb f9e4 	bl	80065e0 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d009      	beq.n	800b236 <WiFi_Conn_ND+0x16be>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b228:	2b0b      	cmp	r3, #11
 800b22a:	d004      	beq.n	800b236 <WiFi_Conn_ND+0x16be>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b232:	2b0c      	cmp	r3, #12
 800b234:	d112      	bne.n	800b25c <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7fb f9e8 	bl	800660c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2264      	movs	r2, #100	; 0x64
 800b240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b262:	2b0a      	cmp	r3, #10
 800b264:	d004      	beq.n	800b270 <WiFi_Conn_ND+0x16f8>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b26c:	2b0d      	cmp	r3, #13
 800b26e:	d10e      	bne.n	800b28e <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fb f9e1 	bl	8006638 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	22c8      	movs	r2, #200	; 0xc8
 800b27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b294:	2b16      	cmp	r3, #22
 800b296:	d10c      	bne.n	800b2b2 <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f240 3225 	movw	r2, #805	; 0x325
 800b29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b8:	2b18      	cmp	r3, #24
 800b2ba:	d10c      	bne.n	800b2d6 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f240 3229 	movw	r2, #809	; 0x329
 800b2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
								b->_estado=0;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
								b->_n_orig=0; //Borro el vector RX
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2dc:	2b19      	cmp	r3, #25
 800b2de:	d008      	beq.n	800b2f2 <WiFi_Conn_ND+0x177a>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e6:	2b11      	cmp	r3, #17
 800b2e8:	d003      	beq.n	800b2f2 <WiFi_Conn_ND+0x177a>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2212      	movs	r2, #18
 800b2ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8d3 3cc8 	ldr.w	r3, [r3, #3272]	; 0xcc8
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	f040 80a0 	bne.w	800b43e <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

							}


						}
						break;
 800b318:	e091      	b.n	800b43e <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7fb f960 	bl	80065e0 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b326:	2b04      	cmp	r3, #4
 800b328:	d009      	beq.n	800b33e <WiFi_Conn_ND+0x17c6>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b330:	2b0b      	cmp	r3, #11
 800b332:	d004      	beq.n	800b33e <WiFi_Conn_ND+0x17c6>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b33a:	2b0c      	cmp	r3, #12
 800b33c:	d112      	bne.n	800b364 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7fb f964 	bl	800660c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2264      	movs	r2, #100	; 0x64
 800b348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b36a:	2b0a      	cmp	r3, #10
 800b36c:	d004      	beq.n	800b378 <WiFi_Conn_ND+0x1800>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b374:	2b0d      	cmp	r3, #13
 800b376:	d10e      	bne.n	800b396 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7fb f95d 	bl	8006638 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	22c8      	movs	r2, #200	; 0xc8
 800b382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3cc8 	ldr.w	r3, [r3, #3272]	; 0xcc8
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d004      	beq.n	800b3aa <WiFi_Conn_ND+0x1832>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d14b      	bne.n	800b442 <WiFi_Conn_ND+0x18ca>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d046      	beq.n	800b442 <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7fb f9c3 	bl	8006740 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
									b->_estado=0;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
									b->_n_orig=0; //Borro el vector RX
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_new_data_rcv=0;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
									b->_send_data=0;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
								}

						}
						break;
 800b3e4:	e02d      	b.n	800b442 <WiFi_Conn_ND+0x18ca>
			break;
 800b3e6:	bf00      	nop
 800b3e8:	e02c      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3ea:	bf00      	nop
 800b3ec:	e02a      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3ee:	bf00      	nop
 800b3f0:	e028      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3f2:	bf00      	nop
 800b3f4:	e026      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3f6:	bf00      	nop
 800b3f8:	e024      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3fa:	bf00      	nop
 800b3fc:	e022      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b3fe:	bf00      	nop
 800b400:	e020      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b402:	bf00      	nop
 800b404:	e01e      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b406:	bf00      	nop
 800b408:	e01c      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b40a:	bf00      	nop
 800b40c:	e01a      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b40e:	bf00      	nop
 800b410:	e018      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b412:	bf00      	nop
 800b414:	e016      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b416:	bf00      	nop
 800b418:	e014      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b41a:	bf00      	nop
 800b41c:	e012      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
			break;
 800b41e:	bf00      	nop
 800b420:	e010      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b422:	bf00      	nop
 800b424:	e00e      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b426:	bf00      	nop
 800b428:	e00c      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b42a:	bf00      	nop
 800b42c:	e00a      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b42e:	bf00      	nop
 800b430:	e008      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b432:	bf00      	nop
 800b434:	e006      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b436:	bf00      	nop
 800b438:	e004      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b43a:	bf00      	nop
 800b43c:	e002      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <WiFi_Conn_ND+0x18cc>
						break;
 800b442:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop

0800b454 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b454:	b5b0      	push	{r4, r5, r7, lr}
 800b456:	b09c      	sub	sp, #112	; 0x70
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b46a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b46e:	2200      	movs	r2, #0
 800b470:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b472:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b476:	f7f4 febd 	bl	80001f4 <strlen>
 800b47a:	4603      	mov	r3, r0
 800b47c:	461a      	mov	r2, r3
 800b47e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b482:	4413      	add	r3, r2
 800b484:	4aeb      	ldr	r2, [pc, #940]	; (800b834 <httpPOST+0x3e0>)
 800b486:	6810      	ldr	r0, [r2, #0]
 800b488:	6018      	str	r0, [r3, #0]
 800b48a:	8892      	ldrh	r2, [r2, #4]
 800b48c:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7f4 feb0 	bl	80001f4 <strlen>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	68f9      	ldr	r1, [r7, #12]
 800b49a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b49e:	f003 fbab 	bl	800ebf8 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b4a2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4a6:	f7f4 fea5 	bl	80001f4 <strlen>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4b2:	4413      	add	r3, r2
 800b4b4:	49e0      	ldr	r1, [pc, #896]	; (800b838 <httpPOST+0x3e4>)
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	cb03      	ldmia	r3!, {r0, r1}
 800b4bc:	6010      	str	r0, [r2, #0]
 800b4be:	6051      	str	r1, [r2, #4]
 800b4c0:	8819      	ldrh	r1, [r3, #0]
 800b4c2:	789b      	ldrb	r3, [r3, #2]
 800b4c4:	8111      	strh	r1, [r2, #8]
 800b4c6:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b4c8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4cc:	f7f4 fe92 	bl	80001f4 <strlen>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4d8:	4413      	add	r3, r2
 800b4da:	4ad8      	ldr	r2, [pc, #864]	; (800b83c <httpPOST+0x3e8>)
 800b4dc:	8811      	ldrh	r1, [r2, #0]
 800b4de:	7892      	ldrb	r2, [r2, #2]
 800b4e0:	8019      	strh	r1, [r3, #0]
 800b4e2:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b4e4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4e8:	f7f4 fe84 	bl	80001f4 <strlen>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4f4:	4413      	add	r3, r2
 800b4f6:	4ad2      	ldr	r2, [pc, #840]	; (800b840 <httpPOST+0x3ec>)
 800b4f8:	6810      	ldr	r0, [r2, #0]
 800b4fa:	6018      	str	r0, [r3, #0]
 800b4fc:	8891      	ldrh	r1, [r2, #4]
 800b4fe:	7992      	ldrb	r2, [r2, #6]
 800b500:	8099      	strh	r1, [r3, #4]
 800b502:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b504:	68b8      	ldr	r0, [r7, #8]
 800b506:	f7f4 fe75 	bl	80001f4 <strlen>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b514:	f003 fb70 	bl	800ebf8 <strncat>
	strncat(post,":",1);
 800b518:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b51c:	f7f4 fe6a 	bl	80001f4 <strlen>
 800b520:	4603      	mov	r3, r0
 800b522:	461a      	mov	r2, r3
 800b524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b528:	4413      	add	r3, r2
 800b52a:	49c6      	ldr	r1, [pc, #792]	; (800b844 <httpPOST+0x3f0>)
 800b52c:	461a      	mov	r2, r3
 800b52e:	460b      	mov	r3, r1
 800b530:	881b      	ldrh	r3, [r3, #0]
 800b532:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7f4 fe5d 	bl	80001f4 <strlen>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b544:	f003 fb58 	bl	800ebf8 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b548:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b54c:	f7f4 fe52 	bl	80001f4 <strlen>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b558:	4413      	add	r3, r2
 800b55a:	4ab8      	ldr	r2, [pc, #736]	; (800b83c <httpPOST+0x3e8>)
 800b55c:	8811      	ldrh	r1, [r2, #0]
 800b55e:	7892      	ldrb	r2, [r2, #2]
 800b560:	8019      	strh	r1, [r3, #0]
 800b562:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b564:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b568:	f7f4 fe44 	bl	80001f4 <strlen>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b574:	4413      	add	r3, r2
 800b576:	4ab4      	ldr	r2, [pc, #720]	; (800b848 <httpPOST+0x3f4>)
 800b578:	461d      	mov	r5, r3
 800b57a:	4614      	mov	r4, r2
 800b57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b57e:	6028      	str	r0, [r5, #0]
 800b580:	6069      	str	r1, [r5, #4]
 800b582:	60aa      	str	r2, [r5, #8]
 800b584:	60eb      	str	r3, [r5, #12]
 800b586:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b588:	6128      	str	r0, [r5, #16]
 800b58a:	6169      	str	r1, [r5, #20]
 800b58c:	61aa      	str	r2, [r5, #24]
 800b58e:	8823      	ldrh	r3, [r4, #0]
 800b590:	78a2      	ldrb	r2, [r4, #2]
 800b592:	83ab      	strh	r3, [r5, #28]
 800b594:	4613      	mov	r3, r2
 800b596:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b598:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b59c:	f7f4 fe2a 	bl	80001f4 <strlen>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5a8:	4413      	add	r3, r2
 800b5aa:	4aa4      	ldr	r2, [pc, #656]	; (800b83c <httpPOST+0x3e8>)
 800b5ac:	8811      	ldrh	r1, [r2, #0]
 800b5ae:	7892      	ldrb	r2, [r2, #2]
 800b5b0:	8019      	strh	r1, [r3, #0]
 800b5b2:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b5b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b5b8:	f7f4 fe1c 	bl	80001f4 <strlen>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461a      	mov	r2, r3
 800b5c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4aa1      	ldr	r2, [pc, #644]	; (800b84c <httpPOST+0x3f8>)
 800b5c8:	461c      	mov	r4, r3
 800b5ca:	4615      	mov	r5, r2
 800b5cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5ce:	6020      	str	r0, [r4, #0]
 800b5d0:	6061      	str	r1, [r4, #4]
 800b5d2:	60a2      	str	r2, [r4, #8]
 800b5d4:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b5dc:	887b      	ldrh	r3, [r7, #2]
 800b5de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f003 fa0f 	bl	800ea08 <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b5f0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b5f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f003 fa04 	bl	800ea08 <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b600:	2300      	movs	r3, #0
 800b602:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b606:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b60a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f003 f9f9 	bl	800ea08 <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b616:	2300      	movs	r3, #0
 800b618:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800b61c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b620:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f003 f9ee 	bl	800ea08 <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b62c:	2300      	movs	r3, #0
 800b62e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800b632:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b636:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b63a:	4611      	mov	r1, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f003 f9e3 	bl	800ea08 <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b642:	2300      	movs	r3, #0
 800b644:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b648:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b64c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f003 f9d8 	bl	800ea08 <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800b65e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b662:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f003 f9cd 	bl	800ea08 <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b66e:	2300      	movs	r3, #0
 800b670:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800b674:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b678:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b67c:	4611      	mov	r1, r2
 800b67e:	4618      	mov	r0, r3
 800b680:	f003 f9c2 	bl	800ea08 <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b684:	2300      	movs	r3, #0
 800b686:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800b68a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b68e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b692:	4611      	mov	r1, r2
 800b694:	4618      	mov	r0, r3
 800b696:	f003 f9b7 	bl	800ea08 <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b69a:	2300      	movs	r3, #0
 800b69c:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800b6a0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b6a4:	f107 0220 	add.w	r2, r7, #32
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f003 f9ac 	bl	800ea08 <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b6b4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b6b8:	f107 0218 	add.w	r2, r7, #24
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f003 f9a2 	bl	800ea08 <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b6c4:	4862      	ldr	r0, [pc, #392]	; (800b850 <httpPOST+0x3fc>)
 800b6c6:	f7f4 fd95 	bl	80001f4 <strlen>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4960      	ldr	r1, [pc, #384]	; (800b850 <httpPOST+0x3fc>)
 800b6d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6d4:	f003 fa90 	bl	800ebf8 <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b6d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7f4 fd89 	bl	80001f4 <strlen>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6ee:	f003 fa83 	bl	800ebf8 <strncat>
	strncat(body,filtro,strlen(filtro));
 800b6f2:	4858      	ldr	r0, [pc, #352]	; (800b854 <httpPOST+0x400>)
 800b6f4:	f7f4 fd7e 	bl	80001f4 <strlen>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4955      	ldr	r1, [pc, #340]	; (800b854 <httpPOST+0x400>)
 800b6fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b702:	f003 fa79 	bl	800ebf8 <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7f4 fd72 	bl	80001f4 <strlen>
 800b710:	4602      	mov	r2, r0
 800b712:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b716:	4619      	mov	r1, r3
 800b718:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b71c:	f003 fa6c 	bl	800ebf8 <strncat>
	strncat(body,ev1,strlen(ev1));
 800b720:	484d      	ldr	r0, [pc, #308]	; (800b858 <httpPOST+0x404>)
 800b722:	f7f4 fd67 	bl	80001f4 <strlen>
 800b726:	4603      	mov	r3, r0
 800b728:	461a      	mov	r2, r3
 800b72a:	494b      	ldr	r1, [pc, #300]	; (800b858 <httpPOST+0x404>)
 800b72c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b730:	f003 fa62 	bl	800ebf8 <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b738:	4618      	mov	r0, r3
 800b73a:	f7f4 fd5b 	bl	80001f4 <strlen>
 800b73e:	4602      	mov	r2, r0
 800b740:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b744:	4619      	mov	r1, r3
 800b746:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b74a:	f003 fa55 	bl	800ebf8 <strncat>
	strncat(body,ev2,strlen(ev2));
 800b74e:	4843      	ldr	r0, [pc, #268]	; (800b85c <httpPOST+0x408>)
 800b750:	f7f4 fd50 	bl	80001f4 <strlen>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	4940      	ldr	r1, [pc, #256]	; (800b85c <httpPOST+0x408>)
 800b75a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b75e:	f003 fa4b 	bl	800ebf8 <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b762:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b766:	4618      	mov	r0, r3
 800b768:	f7f4 fd44 	bl	80001f4 <strlen>
 800b76c:	4602      	mov	r2, r0
 800b76e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b772:	4619      	mov	r1, r3
 800b774:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b778:	f003 fa3e 	bl	800ebf8 <strncat>
	strncat(body,ev3,strlen(ev3));
 800b77c:	4838      	ldr	r0, [pc, #224]	; (800b860 <httpPOST+0x40c>)
 800b77e:	f7f4 fd39 	bl	80001f4 <strlen>
 800b782:	4603      	mov	r3, r0
 800b784:	461a      	mov	r2, r3
 800b786:	4936      	ldr	r1, [pc, #216]	; (800b860 <httpPOST+0x40c>)
 800b788:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b78c:	f003 fa34 	bl	800ebf8 <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b794:	4618      	mov	r0, r3
 800b796:	f7f4 fd2d 	bl	80001f4 <strlen>
 800b79a:	4602      	mov	r2, r0
 800b79c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7a6:	f003 fa27 	bl	800ebf8 <strncat>
	strncat(body,ev4,strlen(ev4));
 800b7aa:	482e      	ldr	r0, [pc, #184]	; (800b864 <httpPOST+0x410>)
 800b7ac:	f7f4 fd22 	bl	80001f4 <strlen>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	492b      	ldr	r1, [pc, #172]	; (800b864 <httpPOST+0x410>)
 800b7b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7ba:	f003 fa1d 	bl	800ebf8 <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b7be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f4 fd16 	bl	80001f4 <strlen>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7d4:	f003 fa10 	bl	800ebf8 <strncat>
	strncat(body,ev5,strlen(ev5));
 800b7d8:	4823      	ldr	r0, [pc, #140]	; (800b868 <httpPOST+0x414>)
 800b7da:	f7f4 fd0b 	bl	80001f4 <strlen>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	4921      	ldr	r1, [pc, #132]	; (800b868 <httpPOST+0x414>)
 800b7e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7e8:	f003 fa06 	bl	800ebf8 <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800b7ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f4 fcff 	bl	80001f4 <strlen>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b802:	f003 f9f9 	bl	800ebf8 <strncat>
	strncat(body,ev6,strlen(ev6));
 800b806:	4819      	ldr	r0, [pc, #100]	; (800b86c <httpPOST+0x418>)
 800b808:	f7f4 fcf4 	bl	80001f4 <strlen>
 800b80c:	4603      	mov	r3, r0
 800b80e:	461a      	mov	r2, r3
 800b810:	4916      	ldr	r1, [pc, #88]	; (800b86c <httpPOST+0x418>)
 800b812:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b816:	f003 f9ef 	bl	800ebf8 <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800b81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b81e:	4618      	mov	r0, r3
 800b820:	f7f4 fce8 	bl	80001f4 <strlen>
 800b824:	4602      	mov	r2, r0
 800b826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b82a:	4619      	mov	r1, r3
 800b82c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b830:	e01e      	b.n	800b870 <httpPOST+0x41c>
 800b832:	bf00      	nop
 800b834:	0801067c 	.word	0x0801067c
 800b838:	08010684 	.word	0x08010684
 800b83c:	08010690 	.word	0x08010690
 800b840:	08010694 	.word	0x08010694
 800b844:	0801069c 	.word	0x0801069c
 800b848:	080106a0 	.word	0x080106a0
 800b84c:	080106c0 	.word	0x080106c0
 800b850:	20000090 	.word	0x20000090
 800b854:	200000a0 	.word	0x200000a0
 800b858:	200000b0 	.word	0x200000b0
 800b85c:	200000c0 	.word	0x200000c0
 800b860:	200000d0 	.word	0x200000d0
 800b864:	200000e0 	.word	0x200000e0
 800b868:	200000f0 	.word	0x200000f0
 800b86c:	20000100 	.word	0x20000100
 800b870:	f003 f9c2 	bl	800ebf8 <strncat>
	strncat(body,ev7,strlen(ev7));
 800b874:	484a      	ldr	r0, [pc, #296]	; (800b9a0 <httpPOST+0x54c>)
 800b876:	f7f4 fcbd 	bl	80001f4 <strlen>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	4948      	ldr	r1, [pc, #288]	; (800b9a0 <httpPOST+0x54c>)
 800b880:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b884:	f003 f9b8 	bl	800ebf8 <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800b888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f4 fcb1 	bl	80001f4 <strlen>
 800b892:	4602      	mov	r2, r0
 800b894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b898:	4619      	mov	r1, r3
 800b89a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b89e:	f003 f9ab 	bl	800ebf8 <strncat>
	strncat(body,ev8,strlen(ev8));
 800b8a2:	4840      	ldr	r0, [pc, #256]	; (800b9a4 <httpPOST+0x550>)
 800b8a4:	f7f4 fca6 	bl	80001f4 <strlen>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	493d      	ldr	r1, [pc, #244]	; (800b9a4 <httpPOST+0x550>)
 800b8ae:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8b2:	f003 f9a1 	bl	800ebf8 <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800b8b6:	f107 0320 	add.w	r3, r7, #32
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f4 fc9a 	bl	80001f4 <strlen>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	f107 0320 	add.w	r3, r7, #32
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8cc:	f003 f994 	bl	800ebf8 <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800b8d0:	4835      	ldr	r0, [pc, #212]	; (800b9a8 <httpPOST+0x554>)
 800b8d2:	f7f4 fc8f 	bl	80001f4 <strlen>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4933      	ldr	r1, [pc, #204]	; (800b9a8 <httpPOST+0x554>)
 800b8dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8e0:	f003 f98a 	bl	800ebf8 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b8e4:	f107 0318 	add.w	r3, r7, #24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f4 fc83 	bl	80001f4 <strlen>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	f107 0318 	add.w	r3, r7, #24
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8fa:	f003 f97d 	bl	800ebf8 <strncat>

	strncat(body,"}",strlen("}"));
 800b8fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b902:	f7f4 fc77 	bl	80001f4 <strlen>
 800b906:	4603      	mov	r3, r0
 800b908:	461a      	mov	r2, r3
 800b90a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b90e:	4413      	add	r3, r2
 800b910:	4926      	ldr	r1, [pc, #152]	; (800b9ac <httpPOST+0x558>)
 800b912:	461a      	mov	r2, r3
 800b914:	460b      	mov	r3, r1
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b91a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b91e:	f7f4 fc69 	bl	80001f4 <strlen>
 800b922:	4602      	mov	r2, r0
 800b924:	f107 0310 	add.w	r3, r7, #16
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f003 f86c 	bl	800ea08 <INTOA>
	strncat(post,length,strlen(length));
 800b930:	f107 0310 	add.w	r3, r7, #16
 800b934:	4618      	mov	r0, r3
 800b936:	f7f4 fc5d 	bl	80001f4 <strlen>
 800b93a:	4602      	mov	r2, r0
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	4619      	mov	r1, r3
 800b942:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b946:	f003 f957 	bl	800ebf8 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b94a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b94e:	f7f4 fc51 	bl	80001f4 <strlen>
 800b952:	4603      	mov	r3, r0
 800b954:	461a      	mov	r2, r3
 800b956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b95a:	4413      	add	r3, r2
 800b95c:	4a14      	ldr	r2, [pc, #80]	; (800b9b0 <httpPOST+0x55c>)
 800b95e:	6810      	ldr	r0, [r2, #0]
 800b960:	6018      	str	r0, [r3, #0]
 800b962:	7912      	ldrb	r2, [r2, #4]
 800b964:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b966:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b96a:	f7f4 fc43 	bl	80001f4 <strlen>
 800b96e:	4602      	mov	r2, r0
 800b970:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b974:	429a      	cmp	r2, r3
 800b976:	d20d      	bcs.n	800b994 <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b978:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b97c:	f7f4 fc3a 	bl	80001f4 <strlen>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b988:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b98c:	f003 f934 	bl	800ebf8 <strncat>
		return 1 ;
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b994:	2300      	movs	r3, #0
		}
}
 800b996:	4618      	mov	r0, r3
 800b998:	3770      	adds	r7, #112	; 0x70
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bdb0      	pop	{r4, r5, r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000110 	.word	0x20000110
 800b9a4:	20000120 	.word	0x20000120
 800b9a8:	20000130 	.word	0x20000130
 800b9ac:	080106d0 	.word	0x080106d0
 800b9b0:	080106d4 	.word	0x080106d4

0800b9b4 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800b9b4:	b5b0      	push	{r4, r5, r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800b9c4:	2bf1      	cmp	r3, #241	; 0xf1
 800b9c6:	dd01      	ble.n	800b9cc <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e099      	b.n	800bb00 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800b9d6:	f107 0108 	add.w	r1, r7, #8
 800b9da:	220a      	movs	r2, #10
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f003 f8d9 	bl	800eb94 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f203 44dc 	addw	r4, r3, #1244	; 0x4dc
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7f4 fbff 	bl	80001f4 <strlen>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4423      	add	r3, r4
 800b9fa:	4943      	ldr	r1, [pc, #268]	; (800bb08 <LoRa_Send+0x154>)
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	460b      	mov	r3, r1
 800ba00:	cb03      	ldmia	r3!, {r0, r1}
 800ba02:	6010      	str	r0, [r2, #0]
 800ba04:	6051      	str	r1, [r2, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f203 44dc 	addw	r4, r3, #1244	; 0x4dc
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f103 0516 	add.w	r5, r3, #22
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3316      	adds	r3, #22
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f4 fbea 	bl	80001f4 <strlen>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	4629      	mov	r1, r5
 800ba26:	4620      	mov	r0, r4
 800ba28:	f003 f8e6 	bl	800ebf8 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f203 44dc 	addw	r4, r3, #1244	; 0x4dc
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7f4 fbde 	bl	80001f4 <strlen>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4423      	add	r3, r4
 800ba3c:	4933      	ldr	r1, [pc, #204]	; (800bb0c <LoRa_Send+0x158>)
 800ba3e:	461a      	mov	r2, r3
 800ba40:	460b      	mov	r3, r1
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f203 44dc 	addw	r4, r3, #1244	; 0x4dc
 800ba4c:	f107 0308 	add.w	r3, r7, #8
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f4 fbcf 	bl	80001f4 <strlen>
 800ba56:	4602      	mov	r2, r0
 800ba58:	f107 0308 	add.w	r3, r7, #8
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f003 f8ca 	bl	800ebf8 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f203 44dc 	addw	r4, r3, #1244	; 0x4dc
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f7f4 fbc2 	bl	80001f4 <strlen>
 800ba70:	4603      	mov	r3, r0
 800ba72:	4423      	add	r3, r4
 800ba74:	4925      	ldr	r1, [pc, #148]	; (800bb0c <LoRa_Send+0x158>)
 800ba76:	461a      	mov	r2, r3
 800ba78:	460b      	mov	r3, r1
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f4 fbb5 	bl	80001f4 <strlen>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	4413      	add	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800ba9e:	e012      	b.n	800bac6 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800baaa:	7819      	ldrb	r1, [r3, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	4413      	add	r3, r2
 800bab2:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bab6:	460a      	mov	r2, r1
 800bab8:	701a      	strb	r2, [r3, #0]
			la++;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3301      	adds	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
			lc++;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	3301      	adds	r3, #1
 800bac4:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	429a      	cmp	r2, r3
 800bacc:	dbe8      	blt.n	800baa0 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	617a      	str	r2, [r7, #20]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	4413      	add	r3, r2
 800bad8:	220d      	movs	r2, #13
 800bada:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
		a->txbuff2SND[la++]='\n';
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	617a      	str	r2, [r7, #20]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	220a      	movs	r2, #10
 800baea:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	b292      	uxth	r2, r2
 800baf8:	4619      	mov	r1, r3
 800bafa:	6838      	ldr	r0, [r7, #0]
 800bafc:	f7f9 fd9c 	bl	8005638 <HAL_UART_Transmit_IT>
	}

}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bdb0      	pop	{r4, r5, r7, pc}
 800bb08:	080106dc 	.word	0x080106dc
 800bb0c:	080106e8 	.word	0x080106e8

0800bb10 <LoRa_set_sndTIMER>:

void LoRa_set_sndTIMER(struct LoRa *a, int msec)
 {
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
		a->tmr_dly=msec;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
		a->tmr_dly_en=1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
		a->tmr_dlyCNT=0;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 }
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <LoRa_reset_sndTIMER>:

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
		a->tmr_dly=msec;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
		a->tmr_dly_en=0;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
		a->tmr_dlyCNT=0;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 }
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <LoRa_decode>:
void LoRa_decode(struct LoRa *b)
 {
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f9cb 	bl	800bf20 <Lora_idSTR>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b10      	cmp	r3, #16
 800bb8e:	f200 81ae 	bhi.w	800beee <LoRa_decode+0x372>
 800bb92:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <LoRa_decode+0x1c>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bbdd 	.word	0x0800bbdd
 800bb9c:	0800bbff 	.word	0x0800bbff
 800bba0:	0800be35 	.word	0x0800be35
 800bba4:	0800be3f 	.word	0x0800be3f
 800bba8:	0800be49 	.word	0x0800be49
 800bbac:	0800be53 	.word	0x0800be53
 800bbb0:	0800be5d 	.word	0x0800be5d
 800bbb4:	0800be67 	.word	0x0800be67
 800bbb8:	0800be71 	.word	0x0800be71
 800bbbc:	0800bea9 	.word	0x0800bea9
 800bbc0:	0800beb3 	.word	0x0800beb3
 800bbc4:	0800bebd 	.word	0x0800bebd
 800bbc8:	0800bec7 	.word	0x0800bec7
 800bbcc:	0800bedb 	.word	0x0800bedb
 800bbd0:	0800bed1 	.word	0x0800bed1
 800bbd4:	0800be2b 	.word	0x0800be2b
 800bbd8:	0800bee5 	.word	0x0800bee5
	{
		case _OK:
		{
			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bbdc:	210c      	movs	r1, #12
 800bbde:	48a7      	ldr	r0, [pc, #668]	; (800be7c <LoRa_decode+0x300>)
 800bbe0:	f7f5 fc9a 	bl	8001518 <ITM0_Write>
			ITM0_Write("Recibido +OK",strlen("Recibido +OK"));
 800bbe4:	210c      	movs	r1, #12
 800bbe6:	48a6      	ldr	r0, [pc, #664]	; (800be80 <LoRa_decode+0x304>)
 800bbe8:	f7f5 fc96 	bl	8001518 <ITM0_Write>
			b->estado=ENVIADO;										//change state to ENVIADO
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2203      	movs	r2, #3
 800bbf0:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
			b->rxbuff[0]='\0';									//Clean rxbuff_hld
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800bbfc:	e17c      	b.n	800bef8 <LoRa_decode+0x37c>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bbfe:	210d      	movs	r1, #13
 800bc00:	48a0      	ldr	r0, [pc, #640]	; (800be84 <LoRa_decode+0x308>)
 800bc02:	f7f5 fc89 	bl	8001518 <ITM0_Write>
				b->estado=RECIBIDO;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2205      	movs	r2, #5
 800bc0a:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
					int i=0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
					int j=0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bc1a:	e002      	b.n	800bc22 <LoRa_decode+0xa6>
					{ i++;}
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	4413      	add	r3, r2
 800bc28:	3356      	adds	r3, #86	; 0x56
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b3d      	cmp	r3, #61	; 0x3d
 800bc2e:	d1f5      	bne.n	800bc1c <LoRa_decode+0xa0>
					i++;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	3301      	adds	r3, #1
 800bc34:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bc36:	e017      	b.n	800bc68 <LoRa_decode+0xec>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	3356      	adds	r3, #86	; 0x56
 800bc40:	7819      	ldrb	r1, [r3, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	4413      	add	r3, r2
 800bc48:	3306      	adds	r3, #6
 800bc4a:	460a      	mov	r2, r1
 800bc4c:	701a      	strb	r2, [r3, #0]
						i++;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	3301      	adds	r3, #1
 800bc52:	617b      	str	r3, [r7, #20]
						j++;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	3301      	adds	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	2b06      	cmp	r3, #6
 800bc5e:	dd03      	ble.n	800bc68 <LoRa_decode+0xec>
						{
							Lora_rx_del(b);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fbcd 	bl	800c400 <Lora_rx_del>
							break;
 800bc66:	e006      	b.n	800bc76 <LoRa_decode+0xfa>
					while (b->rxbuff[i]!= ',')
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3356      	adds	r3, #86	; 0x56
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2b2c      	cmp	r3, #44	; 0x2c
 800bc74:	d1e0      	bne.n	800bc38 <LoRa_decode+0xbc>
						}
					}
					b->rxaddress[j]='\0';
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3306      	adds	r3, #6
 800bc7e:	2200      	movs	r2, #0
 800bc80:	701a      	strb	r2, [r3, #0]
					j=0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	613b      	str	r3, [r7, #16]
					i++;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bc8c:	e017      	b.n	800bcbe <LoRa_decode+0x142>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	4413      	add	r3, r2
 800bc94:	3356      	adds	r3, #86	; 0x56
 800bc96:	7819      	ldrb	r1, [r3, #0]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	330c      	adds	r3, #12
 800bca0:	460a      	mov	r2, r1
 800bca2:	701a      	strb	r2, [r3, #0]
						i++;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	3301      	adds	r3, #1
 800bca8:	617b      	str	r3, [r7, #20]
						j++;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	3301      	adds	r3, #1
 800bcae:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	dd03      	ble.n	800bcbe <LoRa_decode+0x142>
						{
							Lora_rx_del(b);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fba2 	bl	800c400 <Lora_rx_del>
							break;
 800bcbc:	e006      	b.n	800bccc <LoRa_decode+0x150>
					while (b->rxbuff[i]!= ',')
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3356      	adds	r3, #86	; 0x56
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b2c      	cmp	r3, #44	; 0x2c
 800bcca:	d1e0      	bne.n	800bc8e <LoRa_decode+0x112>
						}
					}
					b->rx_items[j]='\0';
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	330c      	adds	r3, #12
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
					j=0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	613b      	str	r3, [r7, #16]
					i++;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	3301      	adds	r3, #1
 800bce0:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	330c      	adds	r3, #12
 800bce6:	210a      	movs	r1, #10
 800bce8:	4618      	mov	r0, r3
 800bcea:	f002 ff0c 	bl	800eb06 <atoi>
 800bcee:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bcf0:	e019      	b.n	800bd26 <LoRa_decode+0x1aa>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3356      	adds	r3, #86	; 0x56
 800bcfa:	7819      	ldrb	r1, [r3, #0]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	4413      	add	r3, r2
 800bd02:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bd06:	460a      	mov	r2, r1
 800bd08:	701a      	strb	r2, [r3, #0]
						j++;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	613b      	str	r3, [r7, #16]
						i++;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	3301      	adds	r3, #1
 800bd14:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	dd03      	ble.n	800bd26 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fb6e 	bl	800c400 <Lora_rx_del>
							break;
 800bd24:	e006      	b.n	800bd34 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	3356      	adds	r3, #86	; 0x56
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b2c      	cmp	r3, #44	; 0x2c
 800bd32:	d1de      	bne.n	800bcf2 <LoRa_decode+0x176>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
					j=0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	613b      	str	r3, [r7, #16]
					i++;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3301      	adds	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bd46:	e017      	b.n	800bd78 <LoRa_decode+0x1fc>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	3356      	adds	r3, #86	; 0x56
 800bd50:	7819      	ldrb	r1, [r3, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	4413      	add	r3, r2
 800bd58:	3310      	adds	r3, #16
 800bd5a:	460a      	mov	r2, r1
 800bd5c:	701a      	strb	r2, [r3, #0]
						i++;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	3301      	adds	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
						j++;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	3301      	adds	r3, #1
 800bd68:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	dd03      	ble.n	800bd78 <LoRa_decode+0x1fc>
						{
							Lora_rx_del(b);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fb45 	bl	800c400 <Lora_rx_del>
							break;
 800bd76:	e006      	b.n	800bd86 <LoRa_decode+0x20a>
					while (b->rxbuff[i]!= ',')
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	3356      	adds	r3, #86	; 0x56
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b2c      	cmp	r3, #44	; 0x2c
 800bd84:	d1e0      	bne.n	800bd48 <LoRa_decode+0x1cc>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3310      	adds	r3, #16
 800bd8a:	210a      	movs	r1, #10
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f002 feba 	bl	800eb06 <atoi>
 800bd92:	4602      	mov	r2, r0
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
					b->rx_convert[j]='\0';
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	4413      	add	r3, r2
 800bda0:	3310      	adds	r3, #16
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
					j=0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	613b      	str	r3, [r7, #16]
					i++;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	3301      	adds	r3, #1
 800bdae:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800bdb0:	e017      	b.n	800bde2 <LoRa_decode+0x266>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3356      	adds	r3, #86	; 0x56
 800bdba:	7819      	ldrb	r1, [r3, #0]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	3310      	adds	r3, #16
 800bdc4:	460a      	mov	r2, r1
 800bdc6:	701a      	strb	r2, [r3, #0]
						i++;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
						j++;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	dd03      	ble.n	800bde2 <LoRa_decode+0x266>
						{
							Lora_rx_del(b);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fb10 	bl	800c400 <Lora_rx_del>
							break;
 800bde0:	e006      	b.n	800bdf0 <LoRa_decode+0x274>
					while (b->rxbuff[i]!= '\r')
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	4413      	add	r3, r2
 800bde8:	3356      	adds	r3, #86	; 0x56
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b0d      	cmp	r3, #13
 800bdee:	d1e0      	bne.n	800bdb2 <LoRa_decode+0x236>
						}
					}

					b->rx_convert[j]='\0';
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3310      	adds	r3, #16
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3310      	adds	r3, #16
 800be00:	210a      	movs	r1, #10
 800be02:	4618      	mov	r0, r3
 800be04:	f002 fe7f 	bl	800eb06 <atoi>
 800be08:	4602      	mov	r2, r0
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
					b->rx_convert[0]='\0';
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	741a      	strb	r2, [r3, #16]



				LoRa_set_sndTIMER(b, 3000);
 800be16:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff fe78 	bl	800bb10 <LoRa_set_sndTIMER>
				b->rxbuff[0]='\0';
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800be28:	e066      	b.n	800bef8 <LoRa_decode+0x37c>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800be2a:	210d      	movs	r1, #13
 800be2c:	4816      	ldr	r0, [pc, #88]	; (800be88 <LoRa_decode+0x30c>)
 800be2e:	f7f5 fb73 	bl	8001518 <ITM0_Write>
			break;
 800be32:	e061      	b.n	800bef8 <LoRa_decode+0x37c>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800be34:	210f      	movs	r1, #15
 800be36:	4815      	ldr	r0, [pc, #84]	; (800be8c <LoRa_decode+0x310>)
 800be38:	f7f5 fb6e 	bl	8001518 <ITM0_Write>
			break;
 800be3c:	e05c      	b.n	800bef8 <LoRa_decode+0x37c>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800be3e:	210f      	movs	r1, #15
 800be40:	4813      	ldr	r0, [pc, #76]	; (800be90 <LoRa_decode+0x314>)
 800be42:	f7f5 fb69 	bl	8001518 <ITM0_Write>
			break;
 800be46:	e057      	b.n	800bef8 <LoRa_decode+0x37c>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800be48:	210e      	movs	r1, #14
 800be4a:	4812      	ldr	r0, [pc, #72]	; (800be94 <LoRa_decode+0x318>)
 800be4c:	f7f5 fb64 	bl	8001518 <ITM0_Write>
			break;
 800be50:	e052      	b.n	800bef8 <LoRa_decode+0x37c>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800be52:	210d      	movs	r1, #13
 800be54:	4810      	ldr	r0, [pc, #64]	; (800be98 <LoRa_decode+0x31c>)
 800be56:	f7f5 fb5f 	bl	8001518 <ITM0_Write>
			break;
 800be5a:	e04d      	b.n	800bef8 <LoRa_decode+0x37c>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800be5c:	2113      	movs	r1, #19
 800be5e:	480f      	ldr	r0, [pc, #60]	; (800be9c <LoRa_decode+0x320>)
 800be60:	f7f5 fb5a 	bl	8001518 <ITM0_Write>
			break;
 800be64:	e048      	b.n	800bef8 <LoRa_decode+0x37c>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800be66:	210e      	movs	r1, #14
 800be68:	480d      	ldr	r0, [pc, #52]	; (800bea0 <LoRa_decode+0x324>)
 800be6a:	f7f5 fb55 	bl	8001518 <ITM0_Write>
			break;
 800be6e:	e043      	b.n	800bef8 <LoRa_decode+0x37c>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800be70:	2111      	movs	r1, #17
 800be72:	480c      	ldr	r0, [pc, #48]	; (800bea4 <LoRa_decode+0x328>)
 800be74:	f7f5 fb50 	bl	8001518 <ITM0_Write>
			break;
 800be78:	e03e      	b.n	800bef8 <LoRa_decode+0x37c>
 800be7a:	bf00      	nop
 800be7c:	080106ec 	.word	0x080106ec
 800be80:	080106fc 	.word	0x080106fc
 800be84:	0801070c 	.word	0x0801070c
 800be88:	0801071c 	.word	0x0801071c
 800be8c:	0801072c 	.word	0x0801072c
 800be90:	0801073c 	.word	0x0801073c
 800be94:	0801074c 	.word	0x0801074c
 800be98:	0801075c 	.word	0x0801075c
 800be9c:	0801076c 	.word	0x0801076c
 800bea0:	08010780 	.word	0x08010780
 800bea4:	08010790 	.word	0x08010790
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800bea8:	2111      	movs	r1, #17
 800beaa:	4815      	ldr	r0, [pc, #84]	; (800bf00 <LoRa_decode+0x384>)
 800beac:	f7f5 fb34 	bl	8001518 <ITM0_Write>
			break;
 800beb0:	e022      	b.n	800bef8 <LoRa_decode+0x37c>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800beb2:	210e      	movs	r1, #14
 800beb4:	4813      	ldr	r0, [pc, #76]	; (800bf04 <LoRa_decode+0x388>)
 800beb6:	f7f5 fb2f 	bl	8001518 <ITM0_Write>
			break;
 800beba:	e01d      	b.n	800bef8 <LoRa_decode+0x37c>
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800bebc:	210f      	movs	r1, #15
 800bebe:	4812      	ldr	r0, [pc, #72]	; (800bf08 <LoRa_decode+0x38c>)
 800bec0:	f7f5 fb2a 	bl	8001518 <ITM0_Write>
			break;
 800bec4:	e018      	b.n	800bef8 <LoRa_decode+0x37c>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800bec6:	210e      	movs	r1, #14
 800bec8:	4810      	ldr	r0, [pc, #64]	; (800bf0c <LoRa_decode+0x390>)
 800beca:	f7f5 fb25 	bl	8001518 <ITM0_Write>
			break;
 800bece:	e013      	b.n	800bef8 <LoRa_decode+0x37c>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800bed0:	210d      	movs	r1, #13
 800bed2:	480f      	ldr	r0, [pc, #60]	; (800bf10 <LoRa_decode+0x394>)
 800bed4:	f7f5 fb20 	bl	8001518 <ITM0_Write>
			break;
 800bed8:	e00e      	b.n	800bef8 <LoRa_decode+0x37c>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800beda:	210d      	movs	r1, #13
 800bedc:	480d      	ldr	r0, [pc, #52]	; (800bf14 <LoRa_decode+0x398>)
 800bede:	f7f5 fb1b 	bl	8001518 <ITM0_Write>
			break;
 800bee2:	e009      	b.n	800bef8 <LoRa_decode+0x37c>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800bee4:	2114      	movs	r1, #20
 800bee6:	480c      	ldr	r0, [pc, #48]	; (800bf18 <LoRa_decode+0x39c>)
 800bee8:	f7f5 fb16 	bl	8001518 <ITM0_Write>
			break;
 800beec:	e004      	b.n	800bef8 <LoRa_decode+0x37c>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800beee:	2110      	movs	r1, #16
 800bef0:	480a      	ldr	r0, [pc, #40]	; (800bf1c <LoRa_decode+0x3a0>)
 800bef2:	f7f5 fb11 	bl	8001518 <ITM0_Write>
			break;
 800bef6:	bf00      	nop
	}
 }
 800bef8:	bf00      	nop
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	080107a4 	.word	0x080107a4
 800bf04:	080107b8 	.word	0x080107b8
 800bf08:	080107c8 	.word	0x080107c8
 800bf0c:	080107d8 	.word	0x080107d8
 800bf10:	080107e8 	.word	0x080107e8
 800bf14:	080107f8 	.word	0x080107f8
 800bf18:	08010808 	.word	0x08010808
 800bf1c:	08010820 	.word	0x08010820

0800bf20 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800bf20:	b5b0      	push	{r4, r5, r7, lr}
 800bf22:	b08c      	sub	sp, #48	; 0x30
 800bf24:	af06      	add	r7, sp, #24
 800bf26:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 800bf2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bf32:	dd01      	ble.n	800bf38 <Lora_idSTR+0x18>
 800bf34:	2310      	movs	r3, #16
 800bf36:	e253      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+OK=");
 800bf38:	2304      	movs	r3, #4
 800bf3a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _OK ;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800bf54:	f107 050c 	add.w	r5, r7, #12
 800bf58:	2100      	movs	r1, #0
 800bf5a:	9104      	str	r1, [sp, #16]
 800bf5c:	f107 0110 	add.w	r1, r7, #16
 800bf60:	9103      	str	r1, [sp, #12]
 800bf62:	f107 0114 	add.w	r1, r7, #20
 800bf66:	9102      	str	r1, [sp, #8]
 800bf68:	9201      	str	r2, [sp, #4]
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	4aa6      	ldr	r2, [pc, #664]	; (800c208 <Lora_idSTR+0x2e8>)
 800bf70:	4621      	mov	r1, r4
 800bf72:	f002 fa17 	bl	800e3a4 <FT_String_ND>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <Lora_idSTR+0x60>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e22f      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+RCV=");
 800bf80:	2305      	movs	r3, #5
 800bf82:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _RCV ;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800bf9c:	f107 050c 	add.w	r5, r7, #12
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	9104      	str	r1, [sp, #16]
 800bfa4:	f107 0110 	add.w	r1, r7, #16
 800bfa8:	9103      	str	r1, [sp, #12]
 800bfaa:	f107 0114 	add.w	r1, r7, #20
 800bfae:	9102      	str	r1, [sp, #8]
 800bfb0:	9201      	str	r2, [sp, #4]
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	4a95      	ldr	r2, [pc, #596]	; (800c20c <Lora_idSTR+0x2ec>)
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f002 f9f3 	bl	800e3a4 <FT_String_ND>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d101      	bne.n	800bfc8 <Lora_idSTR+0xa8>
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e20b      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+ERR=");
 800bfc8:	2305      	movs	r3, #5
 800bfca:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _ERR ;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800bfe4:	f107 050c 	add.w	r5, r7, #12
 800bfe8:	2100      	movs	r1, #0
 800bfea:	9104      	str	r1, [sp, #16]
 800bfec:	f107 0110 	add.w	r1, r7, #16
 800bff0:	9103      	str	r1, [sp, #12]
 800bff2:	f107 0114 	add.w	r1, r7, #20
 800bff6:	9102      	str	r1, [sp, #8]
 800bff8:	9201      	str	r2, [sp, #4]
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	462b      	mov	r3, r5
 800bffe:	4a84      	ldr	r2, [pc, #528]	; (800c210 <Lora_idSTR+0x2f0>)
 800c000:	4621      	mov	r1, r4
 800c002:	f002 f9cf 	bl	800e3a4 <FT_String_ND>
 800c006:	4603      	mov	r3, r0
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d101      	bne.n	800c010 <Lora_idSTR+0xf0>
 800c00c:	230f      	movs	r3, #15
 800c00e:	e1e7      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+RESET");
 800c010:	2306      	movs	r3, #6
 800c012:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1)return _RESET;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c02c:	f107 050c 	add.w	r5, r7, #12
 800c030:	2100      	movs	r1, #0
 800c032:	9104      	str	r1, [sp, #16]
 800c034:	f107 0110 	add.w	r1, r7, #16
 800c038:	9103      	str	r1, [sp, #12]
 800c03a:	f107 0114 	add.w	r1, r7, #20
 800c03e:	9102      	str	r1, [sp, #8]
 800c040:	9201      	str	r2, [sp, #4]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	462b      	mov	r3, r5
 800c046:	4a73      	ldr	r2, [pc, #460]	; (800c214 <Lora_idSTR+0x2f4>)
 800c048:	4621      	mov	r1, r4
 800c04a:	f002 f9ab 	bl	800e3a4 <FT_String_ND>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <Lora_idSTR+0x138>
 800c054:	2302      	movs	r3, #2
 800c056:	e1c3      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+READY");
 800c058:	2306      	movs	r3, #6
 800c05a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _READY ;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c074:	f107 050c 	add.w	r5, r7, #12
 800c078:	2100      	movs	r1, #0
 800c07a:	9104      	str	r1, [sp, #16]
 800c07c:	f107 0110 	add.w	r1, r7, #16
 800c080:	9103      	str	r1, [sp, #12]
 800c082:	f107 0114 	add.w	r1, r7, #20
 800c086:	9102      	str	r1, [sp, #8]
 800c088:	9201      	str	r2, [sp, #4]
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	462b      	mov	r3, r5
 800c08e:	4a62      	ldr	r2, [pc, #392]	; (800c218 <Lora_idSTR+0x2f8>)
 800c090:	4621      	mov	r1, r4
 800c092:	f002 f987 	bl	800e3a4 <FT_String_ND>
 800c096:	4603      	mov	r3, r0
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <Lora_idSTR+0x180>
 800c09c:	2303      	movs	r3, #3
 800c09e:	e19f      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+MODE=");
 800c0a0:	2306      	movs	r3, #6
 800c0a2:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _MODE ;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c0bc:	f107 050c 	add.w	r5, r7, #12
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	9104      	str	r1, [sp, #16]
 800c0c4:	f107 0110 	add.w	r1, r7, #16
 800c0c8:	9103      	str	r1, [sp, #12]
 800c0ca:	f107 0114 	add.w	r1, r7, #20
 800c0ce:	9102      	str	r1, [sp, #8]
 800c0d0:	9201      	str	r2, [sp, #4]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	462b      	mov	r3, r5
 800c0d6:	4a51      	ldr	r2, [pc, #324]	; (800c21c <Lora_idSTR+0x2fc>)
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f002 f963 	bl	800e3a4 <FT_String_ND>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <Lora_idSTR+0x1c8>
 800c0e4:	2304      	movs	r3, #4
 800c0e6:	e17b      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+IPR=");
 800c0e8:	2305      	movs	r3, #5
 800c0ea:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _IPR ;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c104:	f107 050c 	add.w	r5, r7, #12
 800c108:	2100      	movs	r1, #0
 800c10a:	9104      	str	r1, [sp, #16]
 800c10c:	f107 0110 	add.w	r1, r7, #16
 800c110:	9103      	str	r1, [sp, #12]
 800c112:	f107 0114 	add.w	r1, r7, #20
 800c116:	9102      	str	r1, [sp, #8]
 800c118:	9201      	str	r2, [sp, #4]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	462b      	mov	r3, r5
 800c11e:	4a40      	ldr	r2, [pc, #256]	; (800c220 <Lora_idSTR+0x300>)
 800c120:	4621      	mov	r1, r4
 800c122:	f002 f93f 	bl	800e3a4 <FT_String_ND>
 800c126:	4603      	mov	r3, r0
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <Lora_idSTR+0x210>
 800c12c:	2305      	movs	r3, #5
 800c12e:	e157      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+PARAMETER=");
 800c130:	230b      	movs	r3, #11
 800c132:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _PARAMETER ;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c14c:	f107 050c 	add.w	r5, r7, #12
 800c150:	2100      	movs	r1, #0
 800c152:	9104      	str	r1, [sp, #16]
 800c154:	f107 0110 	add.w	r1, r7, #16
 800c158:	9103      	str	r1, [sp, #12]
 800c15a:	f107 0114 	add.w	r1, r7, #20
 800c15e:	9102      	str	r1, [sp, #8]
 800c160:	9201      	str	r2, [sp, #4]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	462b      	mov	r3, r5
 800c166:	4a2f      	ldr	r2, [pc, #188]	; (800c224 <Lora_idSTR+0x304>)
 800c168:	4621      	mov	r1, r4
 800c16a:	f002 f91b 	bl	800e3a4 <FT_String_ND>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d101      	bne.n	800c178 <Lora_idSTR+0x258>
 800c174:	2306      	movs	r3, #6
 800c176:	e133      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+BAND=");
 800c178:	2306      	movs	r3, #6
 800c17a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _BAND ;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c194:	f107 050c 	add.w	r5, r7, #12
 800c198:	2100      	movs	r1, #0
 800c19a:	9104      	str	r1, [sp, #16]
 800c19c:	f107 0110 	add.w	r1, r7, #16
 800c1a0:	9103      	str	r1, [sp, #12]
 800c1a2:	f107 0114 	add.w	r1, r7, #20
 800c1a6:	9102      	str	r1, [sp, #8]
 800c1a8:	9201      	str	r2, [sp, #4]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	4a1e      	ldr	r2, [pc, #120]	; (800c228 <Lora_idSTR+0x308>)
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f002 f8f7 	bl	800e3a4 <FT_String_ND>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <Lora_idSTR+0x2a0>
 800c1bc:	2307      	movs	r3, #7
 800c1be:	e10f      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+ADDRESS=");
 800c1c0:	2309      	movs	r3, #9
 800c1c2:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _ADDRESS ;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c1dc:	f107 050c 	add.w	r5, r7, #12
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	9104      	str	r1, [sp, #16]
 800c1e4:	f107 0110 	add.w	r1, r7, #16
 800c1e8:	9103      	str	r1, [sp, #12]
 800c1ea:	f107 0114 	add.w	r1, r7, #20
 800c1ee:	9102      	str	r1, [sp, #8]
 800c1f0:	9201      	str	r2, [sp, #4]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	462b      	mov	r3, r5
 800c1f6:	4a0d      	ldr	r2, [pc, #52]	; (800c22c <Lora_idSTR+0x30c>)
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	f002 f8d3 	bl	800e3a4 <FT_String_ND>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b01      	cmp	r3, #1
 800c202:	d115      	bne.n	800c230 <Lora_idSTR+0x310>
 800c204:	2308      	movs	r3, #8
 800c206:	e0eb      	b.n	800c3e0 <Lora_idSTR+0x4c0>
 800c208:	08010834 	.word	0x08010834
 800c20c:	0801083c 	.word	0x0801083c
 800c210:	08010844 	.word	0x08010844
 800c214:	0801084c 	.word	0x0801084c
 800c218:	08010854 	.word	0x08010854
 800c21c:	0801085c 	.word	0x0801085c
 800c220:	08010864 	.word	0x08010864
 800c224:	0801086c 	.word	0x0801086c
 800c228:	08010878 	.word	0x08010878
 800c22c:	08010880 	.word	0x08010880
		i=strlen("+NETWORK=");
 800c230:	2309      	movs	r3, #9
 800c232:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _NETWORK ;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c24c:	f107 050c 	add.w	r5, r7, #12
 800c250:	2100      	movs	r1, #0
 800c252:	9104      	str	r1, [sp, #16]
 800c254:	f107 0110 	add.w	r1, r7, #16
 800c258:	9103      	str	r1, [sp, #12]
 800c25a:	f107 0114 	add.w	r1, r7, #20
 800c25e:	9102      	str	r1, [sp, #8]
 800c260:	9201      	str	r2, [sp, #4]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	462b      	mov	r3, r5
 800c266:	4a60      	ldr	r2, [pc, #384]	; (800c3e8 <Lora_idSTR+0x4c8>)
 800c268:	4621      	mov	r1, r4
 800c26a:	f002 f89b 	bl	800e3a4 <FT_String_ND>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b01      	cmp	r3, #1
 800c272:	d101      	bne.n	800c278 <Lora_idSTR+0x358>
 800c274:	2309      	movs	r3, #9
 800c276:	e0b3      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+CPIN=");
 800c278:	2306      	movs	r3, #6
 800c27a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _CPIN ;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c294:	f107 050c 	add.w	r5, r7, #12
 800c298:	2100      	movs	r1, #0
 800c29a:	9104      	str	r1, [sp, #16]
 800c29c:	f107 0110 	add.w	r1, r7, #16
 800c2a0:	9103      	str	r1, [sp, #12]
 800c2a2:	f107 0114 	add.w	r1, r7, #20
 800c2a6:	9102      	str	r1, [sp, #8]
 800c2a8:	9201      	str	r2, [sp, #4]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	4a4f      	ldr	r2, [pc, #316]	; (800c3ec <Lora_idSTR+0x4cc>)
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	f002 f877 	bl	800e3a4 <FT_String_ND>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d101      	bne.n	800c2c0 <Lora_idSTR+0x3a0>
 800c2bc:	230a      	movs	r3, #10
 800c2be:	e08f      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+CRFOP=");
 800c2c0:	2307      	movs	r3, #7
 800c2c2:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _CRFOP ;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c2dc:	f107 050c 	add.w	r5, r7, #12
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	9104      	str	r1, [sp, #16]
 800c2e4:	f107 0110 	add.w	r1, r7, #16
 800c2e8:	9103      	str	r1, [sp, #12]
 800c2ea:	f107 0114 	add.w	r1, r7, #20
 800c2ee:	9102      	str	r1, [sp, #8]
 800c2f0:	9201      	str	r2, [sp, #4]
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	4a3e      	ldr	r2, [pc, #248]	; (800c3f0 <Lora_idSTR+0x4d0>)
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f002 f853 	bl	800e3a4 <FT_String_ND>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b01      	cmp	r3, #1
 800c302:	d101      	bne.n	800c308 <Lora_idSTR+0x3e8>
 800c304:	230b      	movs	r3, #11
 800c306:	e06b      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+SEND=");
 800c308:	2306      	movs	r3, #6
 800c30a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _SEND ;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c324:	f107 050c 	add.w	r5, r7, #12
 800c328:	2100      	movs	r1, #0
 800c32a:	9104      	str	r1, [sp, #16]
 800c32c:	f107 0110 	add.w	r1, r7, #16
 800c330:	9103      	str	r1, [sp, #12]
 800c332:	f107 0114 	add.w	r1, r7, #20
 800c336:	9102      	str	r1, [sp, #8]
 800c338:	9201      	str	r2, [sp, #4]
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	462b      	mov	r3, r5
 800c33e:	4a2d      	ldr	r2, [pc, #180]	; (800c3f4 <Lora_idSTR+0x4d4>)
 800c340:	4621      	mov	r1, r4
 800c342:	f002 f82f 	bl	800e3a4 <FT_String_ND>
 800c346:	4603      	mov	r3, r0
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d101      	bne.n	800c350 <Lora_idSTR+0x430>
 800c34c:	230c      	movs	r3, #12
 800c34e:	e047      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+UID=");
 800c350:	2305      	movs	r3, #5
 800c352:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _UID ;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c36c:	f107 050c 	add.w	r5, r7, #12
 800c370:	2100      	movs	r1, #0
 800c372:	9104      	str	r1, [sp, #16]
 800c374:	f107 0110 	add.w	r1, r7, #16
 800c378:	9103      	str	r1, [sp, #12]
 800c37a:	f107 0114 	add.w	r1, r7, #20
 800c37e:	9102      	str	r1, [sp, #8]
 800c380:	9201      	str	r2, [sp, #4]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	462b      	mov	r3, r5
 800c386:	4a1c      	ldr	r2, [pc, #112]	; (800c3f8 <Lora_idSTR+0x4d8>)
 800c388:	4621      	mov	r1, r4
 800c38a:	f002 f80b 	bl	800e3a4 <FT_String_ND>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b01      	cmp	r3, #1
 800c392:	d101      	bne.n	800c398 <Lora_idSTR+0x478>
 800c394:	230e      	movs	r3, #14
 800c396:	e023      	b.n	800c3e0 <Lora_idSTR+0x4c0>
		i=strlen("+VER=");
 800c398:	2305      	movs	r3, #5
 800c39a:	60fb      	str	r3, [r7, #12]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,a->dataRCV,&a->_n_dataRCV,&g,&h, 0)==1) return _VER ;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800c3b4:	f107 050c 	add.w	r5, r7, #12
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	9104      	str	r1, [sp, #16]
 800c3bc:	f107 0110 	add.w	r1, r7, #16
 800c3c0:	9103      	str	r1, [sp, #12]
 800c3c2:	f107 0114 	add.w	r1, r7, #20
 800c3c6:	9102      	str	r1, [sp, #8]
 800c3c8:	9201      	str	r2, [sp, #4]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	4a0b      	ldr	r2, [pc, #44]	; (800c3fc <Lora_idSTR+0x4dc>)
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	f001 ffe7 	bl	800e3a4 <FT_String_ND>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d101      	bne.n	800c3e0 <Lora_idSTR+0x4c0>
 800c3dc:	230d      	movs	r3, #13
 800c3de:	e7ff      	b.n	800c3e0 <Lora_idSTR+0x4c0>
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e8:	0801088c 	.word	0x0801088c
 800c3ec:	08010898 	.word	0x08010898
 800c3f0:	080108a0 	.word	0x080108a0
 800c3f4:	080108a8 	.word	0x080108a8
 800c3f8:	080108b0 	.word	0x080108b0
 800c3fc:	080108b8 	.word	0x080108b8

0800c400 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	731a      	strb	r2, [r3, #12]
	a->dataRCV[0]='\0';
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
	a->rxRSSI=0;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
	a->rxSNR=0;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
}
 800c42e:	bf00      	nop
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
	...

0800c43c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f241 3288 	movw	r2, #5000	; 0x1388
 800c456:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2220      	movs	r2, #32
 800c462:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a1c      	ldr	r2, [pc, #112]	; (800c4dc <ModBUS_Config+0xa0>)
 800c46a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2220      	movs	r2, #32
 800c478:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a18      	ldr	r2, [pc, #96]	; (800c4e0 <ModBUS_Config+0xa4>)
 800c480:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2210      	movs	r2, #16
 800c48e:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2210      	movs	r2, #16
 800c49c:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	f0f0af5a 	.word	0xf0f0af5a
 800c4e0:	a5fa0f0f 	.word	0xa5fa0f0f

0800c4e4 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	3305      	adds	r3, #5
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	3306      	adds	r3, #6
 800c4f6:	683a      	ldr	r2, [r7, #0]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d10b      	bne.n	800c514 <ModBUS_Check+0x30>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3302      	adds	r3, #2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3303      	adds	r3, #3
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	4413      	add	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <ModBUS_Check+0x30>
	{
		return(1);
 800c510:	2301      	movs	r3, #1
 800c512:	e000      	b.n	800c516 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c514:	2300      	movs	r3, #0
	}
}
 800c516:	4618      	mov	r0, r3
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7b5b      	ldrb	r3, [r3, #13]
 800c534:	429a      	cmp	r2, r3
 800c536:	d11d      	bne.n	800c574 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c542:	429a      	cmp	r2, r3
 800c544:	d116      	bne.n	800c574 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c550:	429a      	cmp	r2, r3
 800c552:	d10f      	bne.n	800c574 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c55e:	429a      	cmp	r2, r3
 800c560:	d108      	bne.n	800c574 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d101      	bne.n	800c574 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c570:	2301      	movs	r3, #1
 800c572:	e000      	b.n	800c576 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c574:	2300      	movs	r3, #0
	}
}
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c582:	b480      	push	{r7}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	460b      	mov	r3, r1
 800c58c:	70fb      	strb	r3, [r7, #3]
 800c58e:	4613      	mov	r3, r2
 800c590:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c59c:	78fa      	ldrb	r2, [r7, #3]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d901      	bls.n	800c5a6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e015      	b.n	800c5d2 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c5a6:	78fb      	ldrb	r3, [r7, #3]
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	883a      	ldrh	r2, [r7, #0]
 800c5ae:	b2d1      	uxtb	r1, r2
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	460a      	mov	r2, r1
 800c5b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c5ba:	883b      	ldrh	r3, [r7, #0]
 800c5bc:	0a1b      	lsrs	r3, r3, #8
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	7bfa      	ldrb	r2, [r7, #15]
 800c5cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c5d0:	2300      	movs	r3, #0
	}
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c5f8:	78fa      	ldrb	r2, [r7, #3]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d901      	bls.n	800c602 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c5fe:	2301      	movs	r3, #1
 800c600:	e015      	b.n	800c62e <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c602:	78fb      	ldrb	r3, [r7, #3]
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4413      	add	r3, r2
 800c60a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c60e:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c610:	89fb      	ldrh	r3, [r7, #14]
 800c612:	021b      	lsls	r3, r3, #8
 800c614:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	3301      	adds	r3, #1
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	4413      	add	r3, r2
 800c620:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c624:	b29a      	uxth	r2, r3
 800c626:	89fb      	ldrh	r3, [r7, #14]
 800c628:	4313      	orrs	r3, r2
 800c62a:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c62c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	460b      	mov	r3, r1
 800c644:	807b      	strh	r3, [r7, #2]
 800c646:	4613      	mov	r3, r2
 800c648:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c64a:	887b      	ldrh	r3, [r7, #2]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	bf14      	ite	ne
 800c650:	2301      	movne	r3, #1
 800c652:	2300      	moveq	r3, #0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c664:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c666:	887b      	ldrh	r3, [r7, #2]
 800c668:	0a1b      	lsrs	r3, r3, #8
 800c66a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c66c:	887b      	ldrh	r3, [r7, #2]
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2206      	movs	r2, #6
 800c6a0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	781a      	ldrb	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2203      	movs	r2, #3
 800c6b2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c6b6:	887b      	ldrh	r3, [r7, #2]
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	787a      	ldrb	r2, [r7, #1]
 800c6cc:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	220c      	movs	r2, #12
 800c6d4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c6d8:	bf00      	nop
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b09c      	sub	sp, #112	; 0x70
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	f041 813f 	bne.w	800d978 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f103 020d 	add.w	r2, r3, #13
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7ff feeb 	bl	800c4e4 <ModBUS_Check>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f001 812f 	beq.w	800d974 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7d1b      	ldrb	r3, [r3, #20]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	2b0f      	cmp	r3, #15
 800c71e:	f201 80f3 	bhi.w	800d908 <ModBUS+0x1220>
 800c722:	a201      	add	r2, pc, #4	; (adr r2, 800c728 <ModBUS+0x40>)
 800c724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c728:	0800c769 	.word	0x0800c769
 800c72c:	0800c9a9 	.word	0x0800c9a9
 800c730:	0800cbe9 	.word	0x0800cbe9
 800c734:	0800ce21 	.word	0x0800ce21
 800c738:	0800d059 	.word	0x0800d059
 800c73c:	0800d26f 	.word	0x0800d26f
 800c740:	0800d909 	.word	0x0800d909
 800c744:	0800d909 	.word	0x0800d909
 800c748:	0800d909 	.word	0x0800d909
 800c74c:	0800d909 	.word	0x0800d909
 800c750:	0800d909 	.word	0x0800d909
 800c754:	0800d909 	.word	0x0800d909
 800c758:	0800d909 	.word	0x0800d909
 800c75c:	0800d909 	.word	0x0800d909
 800c760:	0800d42b 	.word	0x0800d42b
 800c764:	0800d6bb 	.word	0x0800d6bb

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7c5a      	ldrb	r2, [r3, #17]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7c1a      	ldrb	r2, [r3, #16]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7bda      	ldrb	r2, [r3, #15]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7b9a      	ldrb	r2, [r3, #14]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7b5a      	ldrb	r2, [r3, #13]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	795b      	ldrb	r3, [r3, #5]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	f040 80e6 	bne.w	800c974 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	7d5b      	ldrb	r3, [r3, #21]
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c7ba:	021b      	lsls	r3, r3, #8
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c7ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	7d9b      	ldrb	r3, [r3, #22]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7ddb      	ldrb	r3, [r3, #23]
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	b29a      	uxth	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c80e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c812:	b29a      	uxth	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	7e1b      	ldrb	r3, [r3, #24]
 800c824:	b29b      	uxth	r3, r3
 800c826:	4313      	orrs	r3, r2
 800c828:	b29a      	uxth	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	429a      	cmp	r2, r3
 800c840:	d87e      	bhi.n	800c940 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800c848:	461a      	mov	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c850:	4413      	add	r3, r2
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800c858:	4293      	cmp	r3, r2
 800c85a:	dc57      	bgt.n	800c90c <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	613b      	str	r3, [r7, #16]
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	2300      	movs	r3, #0
 800c866:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c868:	2300      	movs	r3, #0
 800c86a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800c87c:	40d3      	lsrs	r3, r2
 800c87e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c886:	08db      	lsrs	r3, r3, #3
 800c888:	b29b      	uxth	r3, r3
 800c88a:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <ModBUS+0x1bc>
									{
										bytes=div;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8a2:	e002      	b.n	800c8aa <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800c8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800c8b4:	e00e      	b.n	800c8d4 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b8:	3308      	adds	r3, #8
 800c8ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8bc:	b2d1      	uxtb	r1, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	460a      	mov	r2, r1
 800c8c4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800c8c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8ca:	0a1b      	lsrs	r3, r3, #8
 800c8cc:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800c8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800c8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dced      	bgt.n	800c8b6 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c8f0:	3303      	adds	r3, #3
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c900:	1d9a      	adds	r2, r3, #6
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c908:	f001 b8d5 	b.w	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2202      	movs	r2, #2
 800c910:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2281      	movs	r2, #129	; 0x81
 800c918:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2203      	movs	r2, #3
 800c928:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c932:	1d9a      	adds	r2, r3, #6
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c93a:	2302      	movs	r3, #2
 800c93c:	f001 b8bb 	b.w	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2203      	movs	r2, #3
 800c944:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2281      	movs	r2, #129	; 0x81
 800c94c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2203      	movs	r2, #3
 800c95c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c966:	1d9a      	adds	r2, r3, #6
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c96e:	2303      	movs	r3, #3
 800c970:	f001 b8a1 	b.w	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2281      	movs	r2, #129	; 0x81
 800c980:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2203      	movs	r2, #3
 800c990:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c99a:	1d9a      	adds	r2, r3, #6
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	f001 b887 	b.w	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7c5a      	ldrb	r2, [r3, #17]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7c1a      	ldrb	r2, [r3, #16]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7bda      	ldrb	r2, [r3, #15]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7b9a      	ldrb	r2, [r3, #14]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7b5a      	ldrb	r2, [r3, #13]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	799b      	ldrb	r3, [r3, #6]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	f040 80e6 	bne.w	800cbb4 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d5b      	ldrb	r3, [r3, #21]
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7d9b      	ldrb	r3, [r3, #22]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	4313      	orrs	r3, r2
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7ddb      	ldrb	r3, [r3, #23]
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7e1b      	ldrb	r3, [r3, #24]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	4313      	orrs	r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d87e      	bhi.n	800cb80 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ca88:	461a      	mov	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ca90:	4413      	add	r3, r2
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	dc57      	bgt.n	800cb4c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	623b      	str	r3, [r7, #32]
 800caa0:	2300      	movs	r3, #0
 800caa2:	61fb      	str	r3, [r7, #28]
 800caa4:	2300      	movs	r3, #0
 800caa6:	667b      	str	r3, [r7, #100]	; 0x64
 800caa8:	2300      	movs	r3, #0
 800caaa:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800caac:	2300      	movs	r3, #0
 800caae:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800cabc:	40d3      	lsrs	r3, r2
 800cabe:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cac6:	08db      	lsrs	r3, r3, #3
 800cac8:	b29b      	uxth	r3, r3
 800caca:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cad2:	f003 0307 	and.w	r3, r3, #7
 800cad6:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <ModBUS+0x3fc>
									{
										bytes=div;
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	667b      	str	r3, [r7, #100]	; 0x64
 800cae2:	e002      	b.n	800caea <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	3301      	adds	r3, #1
 800cae8:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800caea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caec:	b2da      	uxtb	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800caf4:	e00e      	b.n	800cb14 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800caf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caf8:	3308      	adds	r3, #8
 800cafa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cafc:	b2d1      	uxtb	r1, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	4413      	add	r3, r2
 800cb02:	460a      	mov	r2, r1
 800cb04:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cb08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb0a:	0a1b      	lsrs	r3, r3, #8
 800cb0c:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cb0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb10:	3b01      	subs	r3, #1
 800cb12:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cb14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dced      	bgt.n	800caf6 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb30:	3303      	adds	r3, #3
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb40:	1d9a      	adds	r2, r3, #6
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb48:	f000 bfb5 	b.w	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2282      	movs	r2, #130	; 0x82
 800cb58:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2203      	movs	r2, #3
 800cb68:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb72:	1d9a      	adds	r2, r3, #6
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	f000 bf9b 	b.w	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2203      	movs	r2, #3
 800cb84:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2282      	movs	r2, #130	; 0x82
 800cb8c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cba6:	1d9a      	adds	r2, r3, #6
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cbae:	2303      	movs	r3, #3
 800cbb0:	f000 bf81 	b.w	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2282      	movs	r2, #130	; 0x82
 800cbc0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2203      	movs	r2, #3
 800cbd0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbda:	1d9a      	adds	r2, r3, #6
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	f000 bf67 	b.w	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7c5a      	ldrb	r2, [r3, #17]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	7c1a      	ldrb	r2, [r3, #16]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7bda      	ldrb	r2, [r3, #15]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7b9a      	ldrb	r2, [r3, #14]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7b5a      	ldrb	r2, [r3, #13]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	79db      	ldrb	r3, [r3, #7]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	f040 80e2 	bne.w	800cdec <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7d5b      	ldrb	r3, [r3, #21]
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc3a:	021b      	lsls	r3, r3, #8
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cc4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7d9b      	ldrb	r3, [r3, #22]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	4313      	orrs	r3, r2
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7ddb      	ldrb	r3, [r3, #23]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc7e:	021b      	lsls	r3, r3, #8
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cc8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7e1b      	ldrb	r3, [r3, #24]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4313      	orrs	r3, r2
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d87a      	bhi.n	800cdb8 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800ccc8:	461a      	mov	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800ccd0:	4413      	add	r3, r2
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	dc53      	bgt.n	800cd84 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800ccdc:	e029      	b.n	800cd32 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cce4:	461a      	mov	r2, r3
 800cce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce8:	4413      	add	r3, r2
 800ccea:	005a      	lsls	r2, r3, #1
 800ccec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	3309      	adds	r3, #9
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	440a      	add	r2, r1
 800ccf6:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	460a      	mov	r2, r1
 800cd00:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd0e:	4413      	add	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd16:	3305      	adds	r3, #5
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	440a      	add	r2, r1
 800cd1e:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	4413      	add	r3, r2
 800cd26:	460a      	mov	r2, r1
 800cd28:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd2e:	3301      	adds	r3, #1
 800cd30:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	dbce      	blt.n	800ccde <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2203      	movs	r2, #3
 800cd56:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cd68:	3303      	adds	r3, #3
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd78:	1d9a      	adds	r2, r3, #6
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd80:	f000 be99 	b.w	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2283      	movs	r2, #131	; 0x83
 800cd90:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdaa:	1d9a      	adds	r2, r3, #6
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	f000 be7f 	b.w	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2283      	movs	r2, #131	; 0x83
 800cdc4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdde:	1d9a      	adds	r2, r3, #6
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cde6:	2303      	movs	r3, #3
 800cde8:	f000 be65 	b.w	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2283      	movs	r2, #131	; 0x83
 800cdf8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2203      	movs	r2, #3
 800ce08:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce12:	1d9a      	adds	r2, r3, #6
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	f000 be4b 	b.w	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7c5a      	ldrb	r2, [r3, #17]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7c1a      	ldrb	r2, [r3, #16]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7bda      	ldrb	r2, [r3, #15]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7b9a      	ldrb	r2, [r3, #14]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7b5a      	ldrb	r2, [r3, #13]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7a1b      	ldrb	r3, [r3, #8]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	f040 80e2 	bne.w	800d024 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7d5b      	ldrb	r3, [r3, #21]
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce72:	021b      	lsls	r3, r3, #8
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800ce82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7d9b      	ldrb	r3, [r3, #22]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7ddb      	ldrb	r3, [r3, #23]
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7e1b      	ldrb	r3, [r3, #24]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d87a      	bhi.n	800cff0 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf00:	461a      	mov	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf08:	4413      	add	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800cf10:	4293      	cmp	r3, r2
 800cf12:	dc53      	bgt.n	800cfbc <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cf14:	e029      	b.n	800cf6a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf20:	4413      	add	r3, r2
 800cf22:	005a      	lsls	r2, r3, #1
 800cf24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	3309      	adds	r3, #9
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	440a      	add	r2, r1
 800cf2e:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4413      	add	r3, r2
 800cf36:	460a      	mov	r2, r1
 800cf38:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800cf42:	461a      	mov	r2, r3
 800cf44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf46:	4413      	add	r3, r2
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	1c5a      	adds	r2, r3, #1
 800cf4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf4e:	3305      	adds	r3, #5
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	440a      	add	r2, r1
 800cf56:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	460a      	mov	r2, r1
 800cf60:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cf64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf66:	3301      	adds	r3, #1
 800cf68:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf70:	461a      	mov	r2, r3
 800cf72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf74:	4293      	cmp	r3, r2
 800cf76:	dbce      	blt.n	800cf16 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2204      	movs	r2, #4
 800cf8e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cfa0:	3303      	adds	r3, #3
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfb0:	1d9a      	adds	r2, r3, #6
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cfb8:	f000 bd7d 	b.w	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2284      	movs	r2, #132	; 0x84
 800cfc8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2203      	movs	r2, #3
 800cfd8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfe2:	1d9a      	adds	r2, r3, #6
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cfea:	2302      	movs	r3, #2
 800cfec:	f000 bd63 	b.w	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2203      	movs	r2, #3
 800cff4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2284      	movs	r2, #132	; 0x84
 800cffc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2203      	movs	r2, #3
 800d00c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d016:	1d9a      	adds	r2, r3, #6
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d01e:	2303      	movs	r3, #3
 800d020:	f000 bd49 	b.w	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2284      	movs	r2, #132	; 0x84
 800d030:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2203      	movs	r2, #3
 800d040:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d04a:	1d9a      	adds	r2, r3, #6
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d052:	2301      	movs	r3, #1
 800d054:	f000 bd2f 	b.w	800dab6 <ModBUS+0x13ce>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7c5a      	ldrb	r2, [r3, #17]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7c1a      	ldrb	r2, [r3, #16]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7bda      	ldrb	r2, [r3, #15]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7b9a      	ldrb	r2, [r3, #14]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7b5a      	ldrb	r2, [r3, #13]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	7a5b      	ldrb	r3, [r3, #9]
 800d092:	2b01      	cmp	r3, #1
 800d094:	f040 80d1 	bne.w	800d23a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7d5b      	ldrb	r3, [r3, #21]
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d0aa:	021b      	lsls	r3, r3, #8
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d0ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7d9b      	ldrb	r3, [r3, #22]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7ddb      	ldrb	r3, [r3, #23]
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d0fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d102:	b29a      	uxth	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7e1b      	ldrb	r3, [r3, #24]
 800d114:	b29b      	uxth	r3, r3
 800d116:	4313      	orrs	r3, r2
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d126:	461a      	mov	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d12e:	429a      	cmp	r2, r3
 800d130:	dd69      	ble.n	800d206 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d005      	beq.n	800d148 <ModBUS+0xa60>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d142:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d146:	d144      	bne.n	800d1d2 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d14e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d152:	d10d      	bne.n	800d170 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d160:	4611      	mov	r1, r2
 800d162:	2201      	movs	r2, #1
 800d164:	408a      	lsls	r2, r1
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d16e:	e003      	b.n	800d178 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7e1a      	ldrb	r2, [r3, #24]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7dda      	ldrb	r2, [r3, #23]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	7d9a      	ldrb	r2, [r3, #22]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7d5a      	ldrb	r2, [r3, #21]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2205      	movs	r2, #5
 800d1a4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d1b6:	3306      	adds	r3, #6
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1c6:	1d9a      	adds	r2, r3, #6
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d1ce:	f000 bc72 	b.w	800dab6 <ModBUS+0x13ce>
												m3->_MBUS_2SND[8]=0x02;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2285      	movs	r2, #133	; 0x85
 800d1de:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2203      	movs	r2, #3
 800d1ee:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1f8:	1d9a      	adds	r2, r3, #6
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d200:	2302      	movs	r3, #2
 800d202:	f000 bc58 	b.w	800dab6 <ModBUS+0x13ce>
											m3->_MBUS_2SND[8]=0x03;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2203      	movs	r2, #3
 800d20a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2285      	movs	r2, #133	; 0x85
 800d212:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2203      	movs	r2, #3
 800d222:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d22c:	1d9a      	adds	r2, r3, #6
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d234:	2303      	movs	r3, #3
 800d236:	f000 bc3e 	b.w	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x01;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2285      	movs	r2, #133	; 0x85
 800d246:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2203      	movs	r2, #3
 800d256:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d260:	1d9a      	adds	r2, r3, #6
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d268:	2301      	movs	r3, #1
 800d26a:	f000 bc24 	b.w	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7c5a      	ldrb	r2, [r3, #17]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	7c1a      	ldrb	r2, [r3, #16]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	7bda      	ldrb	r2, [r3, #15]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7b9a      	ldrb	r2, [r3, #14]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7b5a      	ldrb	r2, [r3, #13]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	7a9b      	ldrb	r3, [r3, #10]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	f040 80a3 	bne.w	800d3f8 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7d5b      	ldrb	r3, [r3, #21]
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2c4:	021b      	lsls	r3, r3, #8
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7d9b      	ldrb	r3, [r3, #22]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d2fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	7ddb      	ldrb	r3, [r3, #23]
 800d302:	b29a      	uxth	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d310:	021b      	lsls	r3, r3, #8
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d320:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d324:	b29a      	uxth	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7e1b      	ldrb	r3, [r3, #24]
 800d336:	b29b      	uxth	r3, r3
 800d338:	4313      	orrs	r3, r2
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d34e:	b29b      	uxth	r3, r3
 800d350:	429a      	cmp	r2, r3
 800d352:	d838      	bhi.n	800d3c6 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	7dd1      	ldrb	r1, [r2, #23]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	4413      	add	r3, r2
 800d35e:	460a      	mov	r2, r1
 800d360:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d364:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d366:	3301      	adds	r3, #1
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7e11      	ldrb	r1, [r2, #24]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	4413      	add	r3, r2
 800d370:	460a      	mov	r2, r1
 800d372:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7e1a      	ldrb	r2, [r3, #24]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7dda      	ldrb	r2, [r3, #23]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	7d9a      	ldrb	r2, [r3, #22]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7d5a      	ldrb	r2, [r3, #21]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2206      	movs	r2, #6
 800d3a2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2206      	movs	r2, #6
 800d3b2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3bc:	1d9a      	adds	r2, r3, #6
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d3c4:	e377      	b.n	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2286      	movs	r2, #134	; 0x86
 800d3d2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2203      	movs	r2, #3
 800d3e2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3ec:	1d9a      	adds	r2, r3, #6
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e35e      	b.n	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2286      	movs	r2, #134	; 0x86
 800d404:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2203      	movs	r2, #3
 800d414:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d41e:	1d9a      	adds	r2, r3, #6
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d426:	2301      	movs	r3, #1
 800d428:	e345      	b.n	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7c5a      	ldrb	r2, [r3, #17]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7c1a      	ldrb	r2, [r3, #16]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7bda      	ldrb	r2, [r3, #15]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	7b9a      	ldrb	r2, [r3, #14]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7b5a      	ldrb	r2, [r3, #13]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	7adb      	ldrb	r3, [r3, #11]
 800d464:	2b01      	cmp	r3, #1
 800d466:	f040 810f 	bne.w	800d688 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7d5b      	ldrb	r3, [r3, #21]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d47c:	021b      	lsls	r3, r3, #8
 800d47e:	b29a      	uxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d48c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d490:	b29a      	uxth	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7d9b      	ldrb	r3, [r3, #22]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7ddb      	ldrb	r3, [r3, #23]
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4c0:	021b      	lsls	r3, r3, #8
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d4d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7e1b      	ldrb	r3, [r3, #24]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	429a      	cmp	r2, r3
 800d502:	f200 80a8 	bhi.w	800d656 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d50c:	461a      	mov	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d514:	4413      	add	r3, r2
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d51c:	4293      	cmp	r3, r2
 800d51e:	f300 8081 	bgt.w	800d624 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d522:	2300      	movs	r3, #0
 800d524:	657b      	str	r3, [r7, #84]	; 0x54
 800d526:	2300      	movs	r3, #0
 800d528:	653b      	str	r3, [r7, #80]	; 0x50
 800d52a:	2300      	movs	r3, #0
 800d52c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d52e:	2300      	movs	r3, #0
 800d530:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	7e5b      	ldrb	r3, [r3, #25]
 800d536:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d538:	e00e      	b.n	800d558 <ModBUS+0xe70>
									{
										data=data<<8;
 800d53a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53c:	021b      	lsls	r3, r3, #8
 800d53e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d542:	330c      	adds	r3, #12
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	7b5b      	ldrb	r3, [r3, #13]
 800d54a:	461a      	mov	r2, r3
 800d54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d54e:	4313      	orrs	r3, r2
 800d550:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d554:	3b01      	subs	r3, #1
 800d556:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1ed      	bne.n	800d53a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d564:	461a      	mov	r2, r3
 800d566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d568:	4093      	lsls	r3, r2
 800d56a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d56c:	e00f      	b.n	800d58e <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d574:	461a      	mov	r2, r3
 800d576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d578:	4413      	add	r3, r2
 800d57a:	2201      	movs	r2, #1
 800d57c:	fa02 f303 	lsl.w	r3, r2, r3
 800d580:	461a      	mov	r2, r3
 800d582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d584:	4313      	orrs	r3, r2
 800d586:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d58a:	3301      	adds	r3, #1
 800d58c:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d594:	461a      	mov	r2, r3
 800d596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d598:	4293      	cmp	r3, r2
 800d59a:	d3e8      	bcc.n	800d56e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d59c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d59e:	43db      	mvns	r3, r3
 800d5a0:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5aa:	401a      	ands	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b4:	43db      	mvns	r3, r3
 800d5b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	7e1a      	ldrb	r2, [r3, #24]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7dda      	ldrb	r2, [r3, #23]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d9a      	ldrb	r2, [r3, #22]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7d5a      	ldrb	r2, [r3, #21]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	220f      	movs	r2, #15
 800d5f8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d60a:	3306      	adds	r3, #6
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d61a:	1d9a      	adds	r2, r3, #6
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d622:	e248      	b.n	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2202      	movs	r2, #2
 800d628:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	228f      	movs	r2, #143	; 0x8f
 800d630:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2203      	movs	r2, #3
 800d640:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d64a:	1d9a      	adds	r2, r3, #6
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d652:	2302      	movs	r3, #2
 800d654:	e22f      	b.n	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2203      	movs	r2, #3
 800d65a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	228f      	movs	r2, #143	; 0x8f
 800d662:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2203      	movs	r2, #3
 800d672:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d67c:	1d9a      	adds	r2, r3, #6
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d684:	2303      	movs	r3, #3
 800d686:	e216      	b.n	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	228f      	movs	r2, #143	; 0x8f
 800d694:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d6ae:	1d9a      	adds	r2, r3, #6
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e1fd      	b.n	800dab6 <ModBUS+0x13ce>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	7c5a      	ldrb	r2, [r3, #17]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7c1a      	ldrb	r2, [r3, #16]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7bda      	ldrb	r2, [r3, #15]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	7b9a      	ldrb	r2, [r3, #14]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	7b5a      	ldrb	r2, [r3, #13]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7b1b      	ldrb	r3, [r3, #12]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	f040 80eb 	bne.w	800d8d6 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	7d5b      	ldrb	r3, [r3, #21]
 800d704:	b29a      	uxth	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d712:	021b      	lsls	r3, r3, #8
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d726:	b29a      	uxth	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	7d9b      	ldrb	r3, [r3, #22]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	4313      	orrs	r3, r2
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	7ddb      	ldrb	r3, [r3, #23]
 800d752:	b29a      	uxth	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d760:	021b      	lsls	r3, r3, #8
 800d762:	b29a      	uxth	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d774:	b29a      	uxth	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	7e1b      	ldrb	r3, [r3, #24]
 800d786:	b29b      	uxth	r3, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d87f      	bhi.n	800d8a4 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800d7b2:	4413      	add	r3, r2
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	dc59      	bgt.n	800d872 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d7be:	e029      	b.n	800d814 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d7c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7c4:	f103 020d 	add.w	r2, r3, #13
 800d7c8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d7ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7ce:	440b      	add	r3, r1
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	440a      	add	r2, r1
 800d7d4:	7b51      	ldrb	r1, [r2, #13]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	4413      	add	r3, r2
 800d7da:	460a      	mov	r2, r1
 800d7dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800d7e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d7ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7ee:	f103 020d 	add.w	r2, r3, #13
 800d7f2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d7f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7f8:	440b      	add	r3, r1
 800d7fa:	6879      	ldr	r1, [r7, #4]
 800d7fc:	440a      	add	r2, r1
 800d7fe:	7b51      	ldrb	r1, [r2, #13]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	4413      	add	r3, r2
 800d804:	460a      	mov	r2, r1
 800d806:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800d80a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d80e:	3301      	adds	r3, #1
 800d810:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7e5b      	ldrb	r3, [r3, #25]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d81e:	429a      	cmp	r2, r3
 800d820:	d3ce      	bcc.n	800d7c0 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7e1a      	ldrb	r2, [r3, #24]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	7dda      	ldrb	r2, [r3, #23]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	7d9a      	ldrb	r2, [r3, #22]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7d5a      	ldrb	r2, [r3, #21]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2210      	movs	r2, #16
 800d84e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2206      	movs	r2, #6
 800d85e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d868:	1d9a      	adds	r2, r3, #6
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d870:	e121      	b.n	800dab6 <ModBUS+0x13ce>
									m3->_MBUS_2SND[8]=0x02;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2202      	movs	r2, #2
 800d876:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2290      	movs	r2, #144	; 0x90
 800d87e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2203      	movs	r2, #3
 800d88e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d898:	1d9a      	adds	r2, r3, #6
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	e108      	b.n	800dab6 <ModBUS+0x13ce>
								m3->_MBUS_2SND[8]=0x03;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2203      	movs	r2, #3
 800d8a8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2290      	movs	r2, #144	; 0x90
 800d8b0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8ca:	1d9a      	adds	r2, r3, #6
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e0ef      	b.n	800dab6 <ModBUS+0x13ce>
						m3->_MBUS_2SND[8]=0x01;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2290      	movs	r2, #144	; 0x90
 800d8e2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8fc:	1d9a      	adds	r2, r3, #6
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d904:	2301      	movs	r3, #1
 800d906:	e0d6      	b.n	800dab6 <ModBUS+0x13ce>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7d1b      	ldrb	r3, [r3, #20]
 800d914:	3b80      	subs	r3, #128	; 0x80
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7cda      	ldrb	r2, [r3, #19]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2203      	movs	r2, #3
 800d92c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7c5a      	ldrb	r2, [r3, #17]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	7c1a      	ldrb	r2, [r3, #16]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7bda      	ldrb	r2, [r3, #15]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	7b9a      	ldrb	r2, [r3, #14]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7b5a      	ldrb	r2, [r3, #13]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d968:	1d9a      	adds	r2, r3, #6
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800d970:	2301      	movs	r3, #1
 800d972:	e0a0      	b.n	800dab6 <ModBUS+0x13ce>


		}
		else
		{
			return(1);
 800d974:	2301      	movs	r3, #1
 800d976:	e09e      	b.n	800dab6 <ModBUS+0x13ce>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	785b      	ldrb	r3, [r3, #1]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f040 8099 	bne.w	800dab4 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f103 020d 	add.w	r2, r3, #13
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800d98e:	4619      	mov	r1, r3
 800d990:	4610      	mov	r0, r2
 800d992:	f7fe fda7 	bl	800c4e4 <ModBUS_Check>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 808b 	beq.w	800dab4 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7fe fdbf 	bl	800c522 <ModBUS_Check_tid>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d04f      	beq.n	800da4a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	7d1b      	ldrb	r3, [r3, #20]
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d143      	bne.n	800da3a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d9c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d9c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d9de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9e6:	e022      	b.n	800da2e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ea:	005b      	lsls	r3, r3, #1
 800d9ec:	f103 0209 	add.w	r2, r3, #9
 800d9f0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f4:	440b      	add	r3, r1
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	440a      	add	r2, r1
 800d9fc:	7b51      	ldrb	r1, [r2, #13]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	460a      	mov	r2, r1
 800da04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800da08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da0a:	3305      	adds	r3, #5
 800da0c:	005a      	lsls	r2, r3, #1
 800da0e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800da10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da12:	440b      	add	r3, r1
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	3301      	adds	r3, #1
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	440a      	add	r2, r1
 800da1c:	7b51      	ldrb	r1, [r2, #13]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	4413      	add	r3, r2
 800da22:	460a      	mov	r2, r1
 800da24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800da28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2a:	3301      	adds	r3, #1
 800da2c:	643b      	str	r3, [r7, #64]	; 0x40
 800da2e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800da32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da34:	429a      	cmp	r2, r3
 800da36:	dbd7      	blt.n	800d9e8 <ModBUS+0x1300>

						}


					}
					break;
 800da38:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7c9b      	ldrb	r3, [r3, #18]
 800da3e:	461a      	mov	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	7d5b      	ldrb	r3, [r3, #21]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	63bb      	str	r3, [r7, #56]	; 0x38
 800da48:	e035      	b.n	800dab6 <ModBUS+0x13ce>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7d1b      	ldrb	r3, [r3, #20]
 800da4e:	3b81      	subs	r3, #129	; 0x81
 800da50:	2b15      	cmp	r3, #21
 800da52:	d830      	bhi.n	800dab6 <ModBUS+0x13ce>
 800da54:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <ModBUS+0x1374>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800dab7 	.word	0x0800dab7
 800da60:	0800dab7 	.word	0x0800dab7
 800da64:	0800dab7 	.word	0x0800dab7
 800da68:	0800dab7 	.word	0x0800dab7
 800da6c:	0800dab7 	.word	0x0800dab7
 800da70:	0800dab7 	.word	0x0800dab7
 800da74:	0800dab7 	.word	0x0800dab7
 800da78:	0800dab7 	.word	0x0800dab7
 800da7c:	0800dab7 	.word	0x0800dab7
 800da80:	0800dab7 	.word	0x0800dab7
 800da84:	0800dab7 	.word	0x0800dab7
 800da88:	0800dab7 	.word	0x0800dab7
 800da8c:	0800dab7 	.word	0x0800dab7
 800da90:	0800dab7 	.word	0x0800dab7
 800da94:	0800dab7 	.word	0x0800dab7
 800da98:	0800dab7 	.word	0x0800dab7
 800da9c:	0800dab7 	.word	0x0800dab7
 800daa0:	0800dab7 	.word	0x0800dab7
 800daa4:	0800dab7 	.word	0x0800dab7
 800daa8:	0800dab7 	.word	0x0800dab7
 800daac:	0800dab7 	.word	0x0800dab7
 800dab0:	0800dab7 	.word	0x0800dab7
					break;
				}


				//ERROR
			}
 800dab4:	bf00      	nop
		}
	}


}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3770      	adds	r7, #112	; 0x70
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop

0800dac0 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af02      	add	r7, sp, #8
 800dac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6858      	ldr	r0, [r3, #4]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	891b      	ldrh	r3, [r3, #8]
 800dad0:	2200      	movs	r2, #0
 800dad2:	4619      	mov	r1, r3
 800dad4:	f7f5 fccc 	bl	8003470 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6818      	ldr	r0, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f103 0114 	add.w	r1, r3, #20
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f103 0218 	add.w	r2, r3, #24
 800dae8:	2364      	movs	r3, #100	; 0x64
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	2304      	movs	r3, #4
 800daee:	f7f6 f9d4 	bl	8003e9a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6858      	ldr	r0, [r3, #4]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	891b      	ldrh	r3, [r3, #8]
 800dafa:	2201      	movs	r2, #1
 800dafc:	4619      	mov	r1, r3
 800dafe:	f7f5 fcb7 	bl	8003470 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	7edb      	ldrb	r3, [r3, #27]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b086      	sub	sp, #24
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	4608      	mov	r0, r1
 800db18:	4611      	mov	r1, r2
 800db1a:	461a      	mov	r2, r3
 800db1c:	4603      	mov	r3, r0
 800db1e:	70fb      	strb	r3, [r7, #3]
 800db20:	460b      	mov	r3, r1
 800db22:	70bb      	strb	r3, [r7, #2]
 800db24:	4613      	mov	r3, r2
 800db26:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800db28:	2300      	movs	r3, #0
 800db2a:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	787a      	ldrb	r2, [r7, #1]
 800db30:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	78fa      	ldrb	r2, [r7, #3]
 800db36:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	78ba      	ldrb	r2, [r7, #2]
 800db3c:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800db44:	787b      	ldrb	r3, [r7, #1]
 800db46:	2bf0      	cmp	r3, #240	; 0xf0
 800db48:	d11d      	bne.n	800db86 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
 800db4e:	e013      	b.n	800db78 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	6a3a      	ldr	r2, [r7, #32]
 800db54:	4413      	add	r3, r2
 800db56:	781a      	ldrb	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff ffaf 	bl	800dac0 <SPI_ETH>
 800db62:	4603      	mov	r3, r0
 800db64:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	7d9b      	ldrb	r3, [r3, #22]
 800db6a:	3301      	adds	r3, #1
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	3301      	adds	r3, #1
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	429a      	cmp	r2, r3
 800db80:	dbe6      	blt.n	800db50 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800db82:	8afb      	ldrh	r3, [r7, #22]
 800db84:	e037      	b.n	800dbf6 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800db86:	787b      	ldrb	r3, [r7, #1]
 800db88:	2b0f      	cmp	r3, #15
 800db8a:	d134      	bne.n	800dbf6 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800db92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db96:	2b02      	cmp	r3, #2
 800db98:	d120      	bne.n	800dbdc <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	e016      	b.n	800dbce <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ff8d 	bl	800dac0 <SPI_ETH>
 800dba6:	4603      	mov	r3, r0
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	8afb      	ldrh	r3, [r7, #22]
 800dbac:	4313      	orrs	r3, r2
 800dbae:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	7d9b      	ldrb	r3, [r3, #22]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <SPI_ETH_REG+0xba>
 800dbc2:	8afb      	ldrh	r3, [r7, #22]
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	60fb      	str	r3, [r7, #12]
 800dbce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	dbe3      	blt.n	800dba0 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800dbd8:	8afb      	ldrh	r3, [r7, #22]
 800dbda:	e00c      	b.n	800dbf6 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff ff6f 	bl	800dac0 <SPI_ETH>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7d9b      	ldrb	r3, [r3, #22]
 800dbea:	3301      	adds	r3, #1
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	759a      	strb	r2, [r3, #22]
			return(res);
 800dbf2:	8afb      	ldrh	r3, [r7, #22]
 800dbf4:	e7ff      	b.n	800dbf6 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b086      	sub	sp, #24
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	460b      	mov	r3, r1
 800dc08:	807b      	strh	r3, [r7, #2]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	22f0      	movs	r2, #240	; 0xf0
 800dc16:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800dc18:	883b      	ldrh	r3, [r7, #0]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800dc1e:	883b      	ldrh	r3, [r7, #0]
 800dc20:	0a1b      	lsrs	r3, r3, #8
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800dc28:	2300      	movs	r3, #0
 800dc2a:	613b      	str	r3, [r7, #16]
 800dc2c:	e01b      	b.n	800dc66 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800dc2e:	887b      	ldrh	r3, [r7, #2]
 800dc30:	b2da      	uxtb	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	0a1b      	lsrs	r3, r3, #8
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	755a      	strb	r2, [r3, #21]
		addr++;
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	3301      	adds	r3, #1
 800dc46:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800dc48:	f107 020c 	add.w	r2, r7, #12
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4413      	add	r3, r2
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff ff32 	bl	800dac0 <SPI_ETH>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3301      	adds	r3, #1
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	dde0      	ble.n	800dc2e <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800dc6c:	8afb      	ldrh	r3, [r7, #22]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dc76:	b590      	push	{r4, r7, lr}
 800dc78:	b087      	sub	sp, #28
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	60f8      	str	r0, [r7, #12]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	461a      	mov	r2, r3
 800dc82:	460b      	mov	r3, r1
 800dc84:	817b      	strh	r3, [r7, #10]
 800dc86:	4613      	mov	r3, r2
 800dc88:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	220f      	movs	r2, #15
 800dc8e:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dc90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc96:	d226      	bcs.n	800dce6 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	e01a      	b.n	800dcda <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800dca4:	897b      	ldrh	r3, [r7, #10]
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dcac:	897b      	ldrh	r3, [r7, #10]
 800dcae:	0a1b      	lsrs	r3, r3, #8
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800dcb8:	893a      	ldrh	r2, [r7, #8]
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	189c      	adds	r4, r3, r2
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7ff fefb 	bl	800dac0 <SPI_ETH>
 800dcca:	4603      	mov	r3, r0
 800dccc:	7023      	strb	r3, [r4, #0]
				addr++;
 800dcce:	897b      	ldrh	r3, [r7, #10]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	dbe0      	blt.n	800dca4 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dce2:	2300      	movs	r3, #0
 800dce4:	e000      	b.n	800dce8 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800dce6:	2301      	movs	r3, #1
	}
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	371c      	adds	r7, #28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd90      	pop	{r4, r7, pc}

0800dcf0 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	607a      	str	r2, [r7, #4]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	817b      	strh	r3, [r7, #10]
 800dd00:	4613      	mov	r3, r2
 800dd02:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	22f0      	movs	r2, #240	; 0xf0
 800dd08:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dd0a:	8c3b      	ldrh	r3, [r7, #32]
 800dd0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd10:	d223      	bcs.n	800dd5a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	e01a      	b.n	800dd4e <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800dd18:	897b      	ldrh	r3, [r7, #10]
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dd20:	897b      	ldrh	r3, [r7, #10]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800dd2c:	893a      	ldrh	r2, [r7, #8]
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	4413      	add	r3, r2
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4413      	add	r3, r2
 800dd36:	7f1a      	ldrb	r2, [r3, #28]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7ff febf 	bl	800dac0 <SPI_ETH>
				addr++;
 800dd42:	897b      	ldrh	r3, [r7, #10]
 800dd44:	3301      	adds	r3, #1
 800dd46:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	8c3b      	ldrh	r3, [r7, #32]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	dbe0      	blt.n	800dd18 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dd56:	2300      	movs	r3, #0
 800dd58:	e000      	b.n	800dd5c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800dd5a:	2301      	movs	r3, #1
	}
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
 800dd70:	4613      	mov	r3, r2
 800dd72:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	22f0      	movs	r2, #240	; 0xf0
 800dd78:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	78ba      	ldrb	r2, [r7, #2]
 800dd8e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fe95 	bl	800dac0 <SPI_ETH>
}
 800dd96:	bf00      	nop
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
 800ddac:	4613      	mov	r3, r2
 800ddae:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	22f0      	movs	r2, #240	; 0xf0
 800ddb4:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	78ba      	ldrb	r2, [r7, #2]
 800ddca:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff fe77 	bl	800dac0 <SPI_ETH>
}
 800ddd2:	bf00      	nop
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddea:	331c      	adds	r3, #28
 800ddec:	2204      	movs	r2, #4
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	23f0      	movs	r3, #240	; 0xf0
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff fe88 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800ddfe:	2119      	movs	r1, #25
 800de00:	482d      	ldr	r0, [pc, #180]	; (800deb8 <eth_init+0xdc>)
 800de02:	f7f3 fb89 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de0c:	2204      	movs	r2, #4
 800de0e:	9201      	str	r2, [sp, #4]
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	23f0      	movs	r3, #240	; 0xf0
 800de14:	2205      	movs	r2, #5
 800de16:	2100      	movs	r1, #0
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff fe78 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800de1e:	2116      	movs	r1, #22
 800de20:	4826      	ldr	r0, [pc, #152]	; (800debc <eth_init+0xe0>)
 800de22:	f7f3 fb79 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de2c:	3304      	adds	r3, #4
 800de2e:	2206      	movs	r2, #6
 800de30:	9201      	str	r2, [sp, #4]
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	23f0      	movs	r3, #240	; 0xf0
 800de36:	2209      	movs	r2, #9
 800de38:	2100      	movs	r1, #0
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fe67 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800de40:	2113      	movs	r1, #19
 800de42:	481f      	ldr	r0, [pc, #124]	; (800dec0 <eth_init+0xe4>)
 800de44:	f7f3 fb68 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de4e:	330a      	adds	r3, #10
 800de50:	2204      	movs	r2, #4
 800de52:	9201      	str	r2, [sp, #4]
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	23f0      	movs	r3, #240	; 0xf0
 800de58:	220f      	movs	r2, #15
 800de5a:	2100      	movs	r1, #0
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff fe56 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800de62:	2112      	movs	r1, #18
 800de64:	4817      	ldr	r0, [pc, #92]	; (800dec4 <eth_init+0xe8>)
 800de66:	f7f3 fb57 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de70:	330e      	adds	r3, #14
 800de72:	2201      	movs	r2, #1
 800de74:	9201      	str	r2, [sp, #4]
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	23f0      	movs	r3, #240	; 0xf0
 800de7a:	221a      	movs	r2, #26
 800de7c:	2100      	movs	r1, #0
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fe45 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800de84:	2128      	movs	r1, #40	; 0x28
 800de86:	4810      	ldr	r0, [pc, #64]	; (800dec8 <eth_init+0xec>)
 800de88:	f7f3 fb46 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de92:	330f      	adds	r3, #15
 800de94:	2201      	movs	r2, #1
 800de96:	9201      	str	r2, [sp, #4]
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	23f0      	movs	r3, #240	; 0xf0
 800de9c:	221b      	movs	r2, #27
 800de9e:	2100      	movs	r1, #0
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff fe34 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800dea6:	2128      	movs	r1, #40	; 0x28
 800dea8:	4808      	ldr	r0, [pc, #32]	; (800decc <eth_init+0xf0>)
 800deaa:	f7f3 fb35 	bl	8001518 <ITM0_Write>

}
 800deae:	bf00      	nop
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	080108c0 	.word	0x080108c0
 800debc:	080108dc 	.word	0x080108dc
 800dec0:	080108f8 	.word	0x080108f8
 800dec4:	08010910 	.word	0x08010910
 800dec8:	08010928 	.word	0x08010928
 800decc:	08010954 	.word	0x08010954

0800ded0 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800dedc:	78fb      	ldrb	r3, [r7, #3]
 800dede:	2201      	movs	r2, #1
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff ff5c 	bl	800dda0 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800dee8:	2119      	movs	r1, #25
 800deea:	4830      	ldr	r0, [pc, #192]	; (800dfac <eth_socket_init+0xdc>)
 800deec:	f7f3 fb14 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800def6:	331a      	adds	r3, #26
 800def8:	2202      	movs	r2, #2
 800defa:	9201      	str	r2, [sp, #4]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	23f0      	movs	r3, #240	; 0xf0
 800df00:	2204      	movs	r2, #4
 800df02:	2104      	movs	r1, #4
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7ff fe02 	bl	800db0e <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800df0a:	212c      	movs	r1, #44	; 0x2c
 800df0c:	4828      	ldr	r0, [pc, #160]	; (800dfb0 <eth_socket_init+0xe0>)
 800df0e:	f7f3 fb03 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800df18:	331c      	adds	r3, #28
 800df1a:	2204      	movs	r2, #4
 800df1c:	9201      	str	r2, [sp, #4]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	23f0      	movs	r3, #240	; 0xf0
 800df22:	220c      	movs	r2, #12
 800df24:	2104      	movs	r1, #4
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fdf1 	bl	800db0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800df2c:	212e      	movs	r1, #46	; 0x2e
 800df2e:	4821      	ldr	r0, [pc, #132]	; (800dfb4 <eth_socket_init+0xe4>)
 800df30:	f7f3 faf2 	bl	8001518 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df3a:	2202      	movs	r2, #2
 800df3c:	9201      	str	r2, [sp, #4]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	23f0      	movs	r3, #240	; 0xf0
 800df42:	2210      	movs	r2, #16
 800df44:	2104      	movs	r1, #4
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7ff fde1 	bl	800db0e <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800df4c:	2120      	movs	r1, #32
 800df4e:	481a      	ldr	r0, [pc, #104]	; (800dfb8 <eth_socket_init+0xe8>)
 800df50:	f7f3 fae2 	bl	8001518 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800df54:	78fb      	ldrb	r3, [r7, #3]
 800df56:	2201      	movs	r2, #1
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff ff02 	bl	800dd64 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800df60:	2119      	movs	r1, #25
 800df62:	4816      	ldr	r0, [pc, #88]	; (800dfbc <eth_socket_init+0xec>)
 800df64:	f7f3 fad8 	bl	8001518 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df72:	2b01      	cmp	r3, #1
 800df74:	d10a      	bne.n	800df8c <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800df76:	78fb      	ldrb	r3, [r7, #3]
 800df78:	2202      	movs	r2, #2
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7ff fef1 	bl	800dd64 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800df82:	211b      	movs	r1, #27
 800df84:	480e      	ldr	r0, [pc, #56]	; (800dfc0 <eth_socket_init+0xf0>)
 800df86:	f7f3 fac7 	bl	8001518 <ITM0_Write>
 800df8a:	e009      	b.n	800dfa0 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800df8c:	78fb      	ldrb	r3, [r7, #3]
 800df8e:	2204      	movs	r2, #4
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fee6 	bl	800dd64 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800df98:	2115      	movs	r1, #21
 800df9a:	480a      	ldr	r0, [pc, #40]	; (800dfc4 <eth_socket_init+0xf4>)
 800df9c:	f7f3 fabc 	bl	8001518 <ITM0_Write>
	 }
}
 800dfa0:	bf00      	nop
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	08010980 	.word	0x08010980
 800dfb0:	0801099c 	.word	0x0801099c
 800dfb4:	080109cc 	.word	0x080109cc
 800dfb8:	080109fc 	.word	0x080109fc
 800dfbc:	08010a20 	.word	0x08010a20
 800dfc0:	08010a3c 	.word	0x08010a3c
 800dfc4:	08010a58 	.word	0x08010a58

0800dfc8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	220f      	movs	r2, #15
 800dfd8:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800dfda:	78fb      	ldrb	r3, [r7, #3]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fd65 	bl	800dac0 <SPI_ETH>
	return(y->RX[3]);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7edb      	ldrb	r3, [r3, #27]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	460b      	mov	r3, r1
 800e00c:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	220f      	movs	r2, #15
 800e012:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	3304      	adds	r3, #4
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7ff fd48 	bl	800dac0 <SPI_ETH>
	return(y->RX[3]);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	7edb      	ldrb	r3, [r3, #27]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08c      	sub	sp, #48	; 0x30
 800e040:	af02      	add	r7, sp, #8
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	607a      	str	r2, [r7, #4]
 800e046:	461a      	mov	r2, r3
 800e048:	460b      	mov	r3, r1
 800e04a:	72fb      	strb	r3, [r7, #11]
 800e04c:	4613      	mov	r3, r2
 800e04e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e050:	2300      	movs	r3, #0
 800e052:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e054:	2300      	movs	r3, #0
 800e056:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e058:	2300      	movs	r3, #0
 800e05a:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e05c:	2300      	movs	r3, #0
 800e05e:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e060:	2300      	movs	r3, #0
 800e062:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e064:	2300      	movs	r3, #0
 800e066:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e068:	2300      	movs	r3, #0
 800e06a:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e06c:	2300      	movs	r3, #0
 800e06e:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e070:	2300      	movs	r3, #0
 800e072:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e074:	2300      	movs	r3, #0
 800e076:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e078:	7afb      	ldrb	r3, [r7, #11]
 800e07a:	2b03      	cmp	r3, #3
 800e07c:	d83e      	bhi.n	800e0fc <eth_rd_SOCKET_DATA+0xc0>
 800e07e:	a201      	add	r2, pc, #4	; (adr r2, 800e084 <eth_rd_SOCKET_DATA+0x48>)
 800e080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e084:	0800e095 	.word	0x0800e095
 800e088:	0800e0af 	.word	0x0800e0af
 800e08c:	0800e0c9 	.word	0x0800e0c9
 800e090:	0800e0e3 	.word	0x0800e0e3
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e09a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e09e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0ac:	e033      	b.n	800e116 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e0b8:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e0c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0c6:	e026      	b.n	800e116 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0d2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e0de:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0e0:	e019      	b.n	800e116 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e0ec:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e0fa:	e00c      	b.n	800e116 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e102:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e106:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e112:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e114:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e116:	7afb      	ldrb	r3, [r7, #11]
 800e118:	3304      	adds	r3, #4
 800e11a:	b2d9      	uxtb	r1, r3
 800e11c:	2302      	movs	r3, #2
 800e11e:	9301      	str	r3, [sp, #4]
 800e120:	f107 0310 	add.w	r3, r7, #16
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	230f      	movs	r3, #15
 800e128:	2228      	movs	r2, #40	; 0x28
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7ff fcef 	bl	800db0e <SPI_ETH_REG>
 800e130:	4603      	mov	r3, r0
 800e132:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e134:	8b7a      	ldrh	r2, [r7, #26]
 800e136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e138:	4013      	ands	r3, r2
 800e13a:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e13c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e13e:	8b3b      	ldrh	r3, [r7, #24]
 800e140:	4413      	add	r3, r2
 800e142:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e144:	8b3a      	ldrh	r2, [r7, #24]
 800e146:	893b      	ldrh	r3, [r7, #8]
 800e148:	441a      	add	r2, r3
 800e14a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e14c:	3301      	adds	r3, #1
 800e14e:	429a      	cmp	r2, r3
 800e150:	dd2c      	ble.n	800e1ac <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e152:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e154:	8b3b      	ldrh	r3, [r7, #24]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	b29b      	uxth	r3, r3
 800e15a:	3301      	adds	r3, #1
 800e15c:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f103 021c 	add.w	r2, r3, #28
 800e164:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e166:	8af9      	ldrh	r1, [r7, #22]
 800e168:	8bfb      	ldrh	r3, [r7, #30]
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	4603      	mov	r3, r0
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f7ff fd81 	bl	800dc76 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e174:	8bba      	ldrh	r2, [r7, #28]
 800e176:	8bfb      	ldrh	r3, [r7, #30]
 800e178:	4413      	add	r3, r2
 800e17a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e17c:	893a      	ldrh	r2, [r7, #8]
 800e17e:	8bfb      	ldrh	r3, [r7, #30]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e184:	8bfb      	ldrh	r3, [r7, #30]
 800e186:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f103 021c 	add.w	r2, r3, #28
 800e18e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e190:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e192:	8c3b      	ldrh	r3, [r7, #32]
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	4603      	mov	r3, r0
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7ff fd6c 	bl	800dc76 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e19e:	8b7a      	ldrh	r2, [r7, #26]
 800e1a0:	893b      	ldrh	r3, [r7, #8]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	801a      	strh	r2, [r3, #0]
 800e1aa:	e010      	b.n	800e1ce <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f103 021c 	add.w	r2, r3, #28
 800e1b2:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e1b4:	8af9      	ldrh	r1, [r7, #22]
 800e1b6:	893b      	ldrh	r3, [r7, #8]
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7ff fd5a 	bl	800dc76 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e1c2:	8b7a      	ldrh	r2, [r7, #26]
 800e1c4:	893b      	ldrh	r3, [r7, #8]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	b29b      	uxth	r3, r3
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3728      	adds	r7, #40	; 0x28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop

0800e1dc <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08c      	sub	sp, #48	; 0x30
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	607a      	str	r2, [r7, #4]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	72fb      	strb	r3, [r7, #11]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e200:	2300      	movs	r3, #0
 800e202:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e204:	2300      	movs	r3, #0
 800e206:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e208:	2300      	movs	r3, #0
 800e20a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e20c:	2300      	movs	r3, #0
 800e20e:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e210:	2300      	movs	r3, #0
 800e212:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e214:	2300      	movs	r3, #0
 800e216:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e218:	2300      	movs	r3, #0
 800e21a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e21c:	7afb      	ldrb	r3, [r7, #11]
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d83e      	bhi.n	800e2a0 <eth_wr_SOCKET_DATA+0xc4>
 800e222:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <eth_wr_SOCKET_DATA+0x4c>)
 800e224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e228:	0800e239 	.word	0x0800e239
 800e22c:	0800e253 	.word	0x0800e253
 800e230:	0800e26d 	.word	0x0800e26d
 800e234:	0800e287 	.word	0x0800e287
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e242:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e24e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e250:	e033      	b.n	800e2ba <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e25c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e268:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e26a:	e026      	b.n	800e2ba <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e276:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e282:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e284:	e019      	b.n	800e2ba <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e28c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e290:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e29c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e29e:	e00c      	b.n	800e2ba <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e2aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2b6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e2b8:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e2ba:	e00e      	b.n	800e2da <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e2bc:	7afb      	ldrb	r3, [r7, #11]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	b2d9      	uxtb	r1, r3
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	f107 0310 	add.w	r3, r7, #16
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	230f      	movs	r3, #15
 800e2ce:	2220      	movs	r2, #32
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fc1c 	bl	800db0e <SPI_ETH_REG>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e2da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e2dc:	893b      	ldrh	r3, [r7, #8]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d3ec      	bcc.n	800e2bc <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e2e2:	7afb      	ldrb	r3, [r7, #11]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	b2d9      	uxtb	r1, r3
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	f107 0310 	add.w	r3, r7, #16
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	230f      	movs	r3, #15
 800e2f4:	2224      	movs	r2, #36	; 0x24
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7ff fc09 	bl	800db0e <SPI_ETH_REG>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e300:	8b3a      	ldrh	r2, [r7, #24]
 800e302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e304:	4013      	ands	r3, r2
 800e306:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e308:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e30a:	8afb      	ldrh	r3, [r7, #22]
 800e30c:	4413      	add	r3, r2
 800e30e:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e310:	8afa      	ldrh	r2, [r7, #22]
 800e312:	893b      	ldrh	r3, [r7, #8]
 800e314:	441a      	add	r2, r3
 800e316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e318:	3301      	adds	r3, #1
 800e31a:	429a      	cmp	r2, r3
 800e31c:	dd2c      	ble.n	800e378 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e31e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e320:	8afb      	ldrh	r3, [r7, #22]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	b29b      	uxth	r3, r3
 800e326:	3301      	adds	r3, #1
 800e328:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f103 021c 	add.w	r2, r3, #28
 800e330:	8c38      	ldrh	r0, [r7, #32]
 800e332:	8ab9      	ldrh	r1, [r7, #20]
 800e334:	8bbb      	ldrh	r3, [r7, #28]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	4603      	mov	r3, r0
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7ff fcd8 	bl	800dcf0 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e340:	8b7a      	ldrh	r2, [r7, #26]
 800e342:	8bbb      	ldrh	r3, [r7, #28]
 800e344:	4413      	add	r3, r2
 800e346:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e348:	893a      	ldrh	r2, [r7, #8]
 800e34a:	8bbb      	ldrh	r3, [r7, #28]
 800e34c:	1ad3      	subs	r3, r2, r3
 800e34e:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e350:	8bbb      	ldrh	r3, [r7, #28]
 800e352:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f103 021c 	add.w	r2, r3, #28
 800e35a:	8c38      	ldrh	r0, [r7, #32]
 800e35c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e35e:	8bfb      	ldrh	r3, [r7, #30]
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	4603      	mov	r3, r0
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f7ff fcc3 	bl	800dcf0 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e36a:	8b3a      	ldrh	r2, [r7, #24]
 800e36c:	893b      	ldrh	r3, [r7, #8]
 800e36e:	4413      	add	r3, r2
 800e370:	b29a      	uxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	e010      	b.n	800e39a <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f103 021c 	add.w	r2, r3, #28
 800e37e:	8c38      	ldrh	r0, [r7, #32]
 800e380:	8ab9      	ldrh	r1, [r7, #20]
 800e382:	893b      	ldrh	r3, [r7, #8]
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	4603      	mov	r3, r0
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff fcb1 	bl	800dcf0 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e38e:	8b3a      	ldrh	r2, [r7, #24]
 800e390:	893b      	ldrh	r3, [r7, #8]
 800e392:	4413      	add	r3, r2
 800e394:	b29a      	uxth	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	801a      	strh	r2, [r3, #0]
					}

}
 800e39a:	bf00      	nop
 800e39c:	4618      	mov	r0, r3
 800e39e:	3728      	adds	r7, #40	; 0x28
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b090      	sub	sp, #64	; 0x40
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e3be:	2300      	movs	r3, #0
 800e3c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	623b      	str	r3, [r7, #32]
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61fb      	str	r3, [r7, #28]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e3ee:	6a3a      	ldr	r2, [r7, #32]
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	f2c0 82fe 	blt.w	800e9f4 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e3fc:	e00c      	b.n	800e418 <FT_String_ND+0x74>
							{
								n++;
 800e3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e400:	3301      	adds	r3, #1
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	441a      	add	r2, r3
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	3301      	adds	r3, #1
 800e40e:	429a      	cmp	r2, r3
 800e410:	dd02      	ble.n	800e418 <FT_String_ND+0x74>
								{
									estado=0;
 800e412:	2300      	movs	r3, #0
 800e414:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e416:	e009      	b.n	800e42c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	4413      	add	r3, r2
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	6879      	ldr	r1, [r7, #4]
 800e424:	440b      	add	r3, r1
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d1e8      	bne.n	800e3fe <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e42e:	3301      	adds	r3, #1
 800e430:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	3301      	adds	r3, #1
 800e436:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d108      	bne.n	800e452 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e44a:	601a      	str	r2, [r3, #0]
									estado=1;
 800e44c:	2301      	movs	r3, #1
 800e44e:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e450:	e010      	b.n	800e474 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	429a      	cmp	r2, r3
 800e458:	dd02      	ble.n	800e460 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e45e:	e009      	b.n	800e474 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	4413      	add	r3, r2
 800e466:	781a      	ldrb	r2, [r3, #0]
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	6879      	ldr	r1, [r7, #4]
 800e46c:	440b      	add	r3, r1
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	d0db      	beq.n	800e42c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	1e5a      	subs	r2, r3, #1
 800e478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47a:	4413      	add	r3, r2
 800e47c:	6a3a      	ldr	r2, [r7, #32]
 800e47e:	429a      	cmp	r2, r3
 800e480:	dd02      	ble.n	800e488 <FT_String_ND+0xe4>
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	2b01      	cmp	r3, #1
 800e486:	d1b7      	bne.n	800e3f8 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	e2b1      	b.n	800e9f6 <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e494:	2b01      	cmp	r3, #1
 800e496:	d12c      	bne.n	800e4f2 <FT_String_ND+0x14e>
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d129      	bne.n	800e4f2 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e49e:	e014      	b.n	800e4ca <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	441a      	add	r2, r3
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	4413      	add	r3, r2
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	441a      	add	r2, r3
 800e4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b8:	440b      	add	r3, r1
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	68f9      	ldr	r1, [r7, #12]
 800e4be:	440b      	add	r3, r1
 800e4c0:	7812      	ldrb	r2, [r2, #0]
 800e4c2:	701a      	strb	r2, [r3, #0]
										n3++;
 800e4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	441a      	add	r2, r3
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d4:	4413      	add	r3, r2
 800e4d6:	6a3a      	ldr	r2, [r7, #32]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	dae1      	bge.n	800e4a0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	4413      	add	r3, r2
 800e4e4:	1e5a      	subs	r2, r3, #1
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	601a      	str	r2, [r3, #0]
							estado=3;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	e281      	b.n	800e9f6 <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e4f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	f040 80b6 	bne.w	800e666 <FT_String_ND+0x2c2>
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	f040 80b2 	bne.w	800e666 <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e502:	e012      	b.n	800e52a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	4413      	add	r3, r2
 800e50e:	461a      	mov	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	441a      	add	r2, r3
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e518:	440b      	add	r3, r1
 800e51a:	7812      	ldrb	r2, [r2, #0]
 800e51c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	3301      	adds	r3, #1
 800e522:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e528:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e52a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	4413      	add	r3, r2
 800e534:	6a3a      	ldr	r2, [r7, #32]
 800e536:	429a      	cmp	r2, r3
 800e538:	dae4      	bge.n	800e504 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e53a:	499e      	ldr	r1, [pc, #632]	; (800e7b4 <FT_String_ND+0x410>)
 800e53c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e53e:	f000 fb6f 	bl	800ec20 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e542:	499d      	ldr	r1, [pc, #628]	; (800e7b8 <FT_String_ND+0x414>)
 800e544:	2000      	movs	r0, #0
 800e546:	f000 fb6b 	bl	800ec20 <strtok>
 800e54a:	4603      	mov	r3, r0
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 fada 	bl	800eb06 <atoi>
 800e552:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e556:	3306      	adds	r3, #6
 800e558:	222c      	movs	r2, #44	; 0x2c
 800e55a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	2b09      	cmp	r3, #9
 800e560:	dc0d      	bgt.n	800e57e <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e564:	3308      	adds	r3, #8
 800e566:	223a      	movs	r2, #58	; 0x3a
 800e568:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	3309      	adds	r3, #9
 800e56e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e570:	4413      	add	r3, r2
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	3309      	adds	r3, #9
 800e57a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e57c:	e021      	b.n	800e5c2 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	2b63      	cmp	r3, #99	; 0x63
 800e582:	dc0d      	bgt.n	800e5a0 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e586:	3309      	adds	r3, #9
 800e588:	223a      	movs	r2, #58	; 0x3a
 800e58a:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	330a      	adds	r3, #10
 800e590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e592:	4413      	add	r3, r2
 800e594:	2200      	movs	r2, #0
 800e596:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	330a      	adds	r3, #10
 800e59c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e59e:	e010      	b.n	800e5c2 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5a6:	da0c      	bge.n	800e5c2 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5aa:	330a      	adds	r3, #10
 800e5ac:	223a      	movs	r2, #58	; 0x3a
 800e5ae:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	330b      	adds	r3, #11
 800e5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5b6:	4413      	add	r3, r2
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	330b      	adds	r3, #11
 800e5c0:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5c6:	601a      	str	r2, [r3, #0]
							n4=0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5cc:	e016      	b.n	800e5fc <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	1ad2      	subs	r2, r2, r3
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	441a      	add	r2, r3
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	4413      	add	r3, r2
 800e5dc:	461a      	mov	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	441a      	add	r2, r3
 800e5e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	1ac9      	subs	r1, r1, r3
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	440b      	add	r3, r1
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	440b      	add	r3, r1
 800e5f2:	7812      	ldrb	r2, [r2, #0]
 800e5f4:	701a      	strb	r2, [r3, #0]
								n4++;
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	1ad2      	subs	r2, r2, r3
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	441a      	add	r2, r3
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	4413      	add	r3, r2
 800e60a:	6a3a      	ldr	r2, [r7, #32]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	dade      	bge.n	800e5ce <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	441a      	add	r2, r3
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	1e5a      	subs	r2, r3, #1
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	1ad2      	subs	r2, r2, r3
 800e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e628:	441a      	add	r2, r3
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	4413      	add	r3, r2
 800e62e:	461a      	mov	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	1ad2      	subs	r2, r2, r3
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	4413      	add	r3, r2
 800e642:	461a      	mov	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	2200      	movs	r2, #0
 800e64a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e64c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	1ad2      	subs	r2, r2, r3
 800e652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	440b      	add	r3, r1
 800e658:	429a      	cmp	r2, r3
 800e65a:	d102      	bne.n	800e662 <FT_String_ND+0x2be>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e662:	2303      	movs	r3, #3
 800e664:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e668:	2b03      	cmp	r3, #3
 800e66a:	d146      	bne.n	800e6fa <FT_String_ND+0x356>
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d143      	bne.n	800e6fa <FT_String_ND+0x356>
						{
						n3=0;
 800e672:	2300      	movs	r3, #0
 800e674:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e676:	e00e      	b.n	800e696 <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e67e:	4413      	add	r3, r2
 800e680:	3b01      	subs	r3, #1
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	441a      	add	r2, r3
 800e686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e688:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e68a:	440b      	add	r3, r1
 800e68c:	7812      	ldrb	r2, [r2, #0]
 800e68e:	701a      	strb	r2, [r3, #0]
										n3++;
 800e690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e692:	3301      	adds	r3, #1
 800e694:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	dbec      	blt.n	800e678 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6a2:	e014      	b.n	800e6ce <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	441a      	add	r2, r3
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	4413      	add	r3, r2
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	441a      	add	r2, r3
 800e6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b8:	6819      	ldr	r1, [r3, #0]
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	440b      	add	r3, r1
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	68f9      	ldr	r1, [r7, #12]
 800e6c2:	440b      	add	r3, r1
 800e6c4:	7812      	ldrb	r2, [r2, #0]
 800e6c6:	701a      	strb	r2, [r3, #0]
										n5++;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	441a      	add	r2, r3
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	dde0      	ble.n	800e6a4 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	4413      	add	r3, r2
 800e6ea:	1e5a      	subs	r2, r3, #1
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f4:	601a      	str	r2, [r3, #0]
							estado=3;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6fc:	2b04      	cmp	r3, #4
 800e6fe:	f040 80b6 	bne.w	800e86e <FT_String_ND+0x4ca>
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	2b01      	cmp	r3, #1
 800e706:	f040 80b2 	bne.w	800e86e <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e70a:	e012      	b.n	800e732 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e70c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	1ad2      	subs	r2, r2, r3
 800e712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e714:	4413      	add	r3, r2
 800e716:	461a      	mov	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	441a      	add	r2, r3
 800e71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e720:	440b      	add	r3, r1
 800e722:	7812      	ldrb	r2, [r2, #0]
 800e724:	701a      	strb	r2, [r3, #0]
								n4++;
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	3301      	adds	r3, #1
 800e72a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e730:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	1ad2      	subs	r2, r2, r3
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	4413      	add	r3, r2
 800e73c:	6a3a      	ldr	r2, [r7, #32]
 800e73e:	429a      	cmp	r2, r3
 800e740:	dae4      	bge.n	800e70c <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e742:	491c      	ldr	r1, [pc, #112]	; (800e7b4 <FT_String_ND+0x410>)
 800e744:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e746:	f000 fa6b 	bl	800ec20 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e74a:	491b      	ldr	r1, [pc, #108]	; (800e7b8 <FT_String_ND+0x414>)
 800e74c:	2000      	movs	r0, #0
 800e74e:	f000 fa67 	bl	800ec20 <strtok>
 800e752:	4603      	mov	r3, r0
 800e754:	4618      	mov	r0, r3
 800e756:	f000 f9d6 	bl	800eb06 <atoi>
 800e75a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e75e:	3306      	adds	r3, #6
 800e760:	222c      	movs	r2, #44	; 0x2c
 800e762:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	2b09      	cmp	r3, #9
 800e768:	dc07      	bgt.n	800e77a <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76c:	3308      	adds	r3, #8
 800e76e:	223a      	movs	r2, #58	; 0x3a
 800e770:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	3309      	adds	r3, #9
 800e776:	62bb      	str	r3, [r7, #40]	; 0x28
 800e778:	e015      	b.n	800e7a6 <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	2b63      	cmp	r3, #99	; 0x63
 800e77e:	dc07      	bgt.n	800e790 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e782:	3309      	adds	r3, #9
 800e784:	223a      	movs	r2, #58	; 0x3a
 800e786:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	330a      	adds	r3, #10
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e78e:	e00a      	b.n	800e7a6 <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e796:	da06      	bge.n	800e7a6 <FT_String_ND+0x402>
														{
															c[10]=':';
 800e798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e79a:	330a      	adds	r3, #10
 800e79c:	223a      	movs	r2, #58	; 0x3a
 800e79e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	330b      	adds	r3, #11
 800e7a4:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7aa:	601a      	str	r2, [r3, #0]
							n4=0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7b0:	e01b      	b.n	800e7ea <FT_String_ND+0x446>
 800e7b2:	bf00      	nop
 800e7b4:	08010a70 	.word	0x08010a70
 800e7b8:	08010a74 	.word	0x08010a74
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e7bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	1ad2      	subs	r2, r2, r3
 800e7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c4:	441a      	add	r2, r3
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	4413      	add	r3, r2
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	441a      	add	r2, r3
 800e7d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	1ac9      	subs	r1, r1, r3
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d8:	440b      	add	r3, r1
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	440b      	add	r3, r1
 800e7e0:	7812      	ldrb	r2, [r2, #0]
 800e7e2:	701a      	strb	r2, [r3, #0]
								n4++;
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	1ad2      	subs	r2, r2, r3
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	441a      	add	r2, r3
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	4413      	add	r3, r2
 800e7f8:	6a3a      	ldr	r2, [r7, #32]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	dade      	bge.n	800e7bc <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	441a      	add	r2, r3
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	1e5a      	subs	r2, r3, #1
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	601a      	str	r2, [r3, #0]
							n5=0;
 800e80e:	2300      	movs	r3, #0
 800e810:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e812:	e00f      	b.n	800e834 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	1ad2      	subs	r2, r2, r3
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	4413      	add	r3, r2
 800e81e:	461a      	mov	r2, r3
 800e820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e822:	441a      	add	r2, r3
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e828:	440b      	add	r3, r1
 800e82a:	7812      	ldrb	r2, [r2, #0]
 800e82c:	701a      	strb	r2, [r3, #0]
								n5++;
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	3301      	adds	r3, #1
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	1ad2      	subs	r2, r2, r3
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	441a      	add	r2, r3
 800e83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	dbe6      	blt.n	800e814 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	441a      	add	r2, r3
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	1ad2      	subs	r2, r2, r3
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4413      	add	r3, r2
 800e85e:	6a3a      	ldr	r2, [r7, #32]
 800e860:	429a      	cmp	r2, r3
 800e862:	d102      	bne.n	800e86a <FT_String_ND+0x4c6>
							{
								estado=4;
 800e864:	2304      	movs	r3, #4
 800e866:	627b      	str	r3, [r7, #36]	; 0x24
 800e868:	e001      	b.n	800e86e <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e86a:	2305      	movs	r3, #5
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e86e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e870:	2b05      	cmp	r3, #5
 800e872:	f040 80bd 	bne.w	800e9f0 <FT_String_ND+0x64c>
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	2b01      	cmp	r3, #1
 800e87a:	f040 80b9 	bne.w	800e9f0 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e87e:	e012      	b.n	800e8a6 <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	1ad2      	subs	r2, r2, r3
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	4413      	add	r3, r2
 800e88a:	461a      	mov	r2, r3
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	441a      	add	r2, r3
 800e890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e892:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e894:	440b      	add	r3, r1
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	701a      	strb	r2, [r3, #0]
								n4++;
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	3301      	adds	r3, #1
 800e89e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8a4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	1ad2      	subs	r2, r2, r3
 800e8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ae:	4413      	add	r3, r2
 800e8b0:	6a3a      	ldr	r2, [r7, #32]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	dae4      	bge.n	800e880 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e8b6:	4952      	ldr	r1, [pc, #328]	; (800ea00 <FT_String_ND+0x65c>)
 800e8b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e8ba:	f000 f9b1 	bl	800ec20 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e8be:	4951      	ldr	r1, [pc, #324]	; (800ea04 <FT_String_ND+0x660>)
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	f000 f9ad 	bl	800ec20 <strtok>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 f91c 	bl	800eb06 <atoi>
 800e8ce:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e8d0:	494c      	ldr	r1, [pc, #304]	; (800ea04 <FT_String_ND+0x660>)
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	f000 f9a4 	bl	800ec20 <strtok>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f913 	bl	800eb06 <atoi>
 800e8e0:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8e4:	3306      	adds	r3, #6
 800e8e6:	222c      	movs	r2, #44	; 0x2c
 800e8e8:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	2b09      	cmp	r3, #9
 800e8ee:	dc07      	bgt.n	800e900 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f2:	330a      	adds	r3, #10
 800e8f4:	223a      	movs	r2, #58	; 0x3a
 800e8f6:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	330b      	adds	r3, #11
 800e8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8fe:	e015      	b.n	800e92c <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	2b63      	cmp	r3, #99	; 0x63
 800e904:	dc07      	bgt.n	800e916 <FT_String_ND+0x572>
														{
															c[11]=':';
 800e906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e908:	330b      	adds	r3, #11
 800e90a:	223a      	movs	r2, #58	; 0x3a
 800e90c:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	330c      	adds	r3, #12
 800e912:	62bb      	str	r3, [r7, #40]	; 0x28
 800e914:	e00a      	b.n	800e92c <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e91c:	da06      	bge.n	800e92c <FT_String_ND+0x588>
														{
															c[12]=':';
 800e91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e920:	330c      	adds	r3, #12
 800e922:	223a      	movs	r2, #58	; 0x3a
 800e924:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	330d      	adds	r3, #13
 800e92a:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e930:	601a      	str	r2, [r3, #0]
							n4=0;
 800e932:	2300      	movs	r3, #0
 800e934:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e936:	e016      	b.n	800e966 <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	1ad2      	subs	r2, r2, r3
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	441a      	add	r2, r3
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	4413      	add	r3, r2
 800e946:	461a      	mov	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	441a      	add	r2, r3
 800e94c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	1ac9      	subs	r1, r1, r3
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	440b      	add	r3, r1
 800e956:	4619      	mov	r1, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	440b      	add	r3, r1
 800e95c:	7812      	ldrb	r2, [r2, #0]
 800e95e:	701a      	strb	r2, [r3, #0]
								n4++;
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	3301      	adds	r3, #1
 800e964:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	1ad2      	subs	r2, r2, r3
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	441a      	add	r2, r3
 800e970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e972:	4413      	add	r3, r2
 800e974:	6a3a      	ldr	r2, [r7, #32]
 800e976:	429a      	cmp	r2, r3
 800e978:	dade      	bge.n	800e938 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e97a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	441a      	add	r2, r3
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	1e5a      	subs	r2, r3, #1
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	601a      	str	r2, [r3, #0]
							n5=0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e98e:	e00f      	b.n	800e9b0 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	4413      	add	r3, r2
 800e99a:	461a      	mov	r2, r3
 800e99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99e:	441a      	add	r2, r3
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9a4:	440b      	add	r3, r1
 800e9a6:	7812      	ldrb	r2, [r2, #0]
 800e9a8:	701a      	strb	r2, [r3, #0]
								n5++;
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e9b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	1ad2      	subs	r2, r2, r3
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	441a      	add	r2, r3
 800e9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	dbe6      	blt.n	800e990 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c6:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	441a      	add	r2, r3
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4413      	add	r3, r2
 800e9da:	6a3a      	ldr	r2, [r7, #32]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d105      	bne.n	800e9ec <FT_String_ND+0x648>
							{
								estado=4;
 800e9e0:	2304      	movs	r3, #4
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800e9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9e6:	693a      	ldr	r2, [r7, #16]
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	e001      	b.n	800e9f0 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800e9ec:	2305      	movs	r3, #5
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	e000      	b.n	800e9f6 <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800e9f4:	2302      	movs	r3, #2
			}
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3740      	adds	r7, #64	; 0x40
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	08010a70 	.word	0x08010a70
 800ea04:	08010a74 	.word	0x08010a74

0800ea08 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ea12:	2330      	movs	r3, #48	; 0x30
 800ea14:	60bb      	str	r3, [r7, #8]
 800ea16:	f107 030c 	add.w	r3, r7, #12
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	605a      	str	r2, [r3, #4]
 800ea20:	609a      	str	r2, [r3, #8]
 800ea22:	60da      	str	r2, [r3, #12]
int i=0;	
 800ea24:	2300      	movs	r3, #0
 800ea26:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ea28:	f107 0308 	add.w	r3, r7, #8
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	490f      	ldr	r1, [pc, #60]	; (800ea6c <INTOA+0x64>)
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 f8b9 	bl	800eba8 <siprintf>
		while(i<=strlen(origbuff))
 800ea36:	e00b      	b.n	800ea50 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	603a      	str	r2, [r7, #0]
 800ea3e:	f107 0108 	add.w	r1, r7, #8
 800ea42:	69fa      	ldr	r2, [r7, #28]
 800ea44:	440a      	add	r2, r1
 800ea46:	7812      	ldrb	r2, [r2, #0]
 800ea48:	701a      	strb	r2, [r3, #0]
		i++;
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ea50:	f107 0308 	add.w	r3, r7, #8
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f1 fbcd 	bl	80001f4 <strlen>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d2ea      	bcs.n	800ea38 <INTOA+0x30>
		}
		return(i);
 800ea62:	69fb      	ldr	r3, [r7, #28]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3720      	adds	r7, #32
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	08010a78 	.word	0x08010a78

0800ea70 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b088      	sub	sp, #32
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
int x =0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ea82:	2300      	movs	r3, #0
 800ea84:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ea86:	f107 0310 	add.w	r3, r7, #16
 800ea8a:	617b      	str	r3, [r7, #20]
if (c==0)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d105      	bne.n	800ea9e <CopiaVector+0x2e>
{
	x=strlen(b);
 800ea92:	68b8      	ldr	r0, [r7, #8]
 800ea94:	f7f1 fbae 	bl	80001f4 <strlen>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	61bb      	str	r3, [r7, #24]
 800ea9c:	e02e      	b.n	800eafc <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaa8:	dd01      	ble.n	800eaae <CopiaVector+0x3e>
			{
				return(1);
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e027      	b.n	800eafe <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eab2:	e00a      	b.n	800eaca <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	1c53      	adds	r3, r2, #1
 800eab8:	60bb      	str	r3, [r7, #8]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	1c59      	adds	r1, r3, #1
 800eabe:	60f9      	str	r1, [r7, #12]
 800eac0:	7812      	ldrb	r2, [r2, #0]
 800eac2:	701a      	strb	r2, [r3, #0]
					p++;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	3301      	adds	r3, #1
 800eac8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	429a      	cmp	r2, r3
 800ead0:	dbf0      	blt.n	800eab4 <CopiaVector+0x44>
				}


			if (d==1)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d111      	bne.n	800eafc <CopiaVector+0x8c>
			{
			  p=c;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eadc:	e008      	b.n	800eaf0 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	60fa      	str	r2, [r7, #12]
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	7812      	ldrb	r2, [r2, #0]
 800eae8:	701a      	strb	r2, [r3, #0]
				  p++;
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	3301      	adds	r3, #1
 800eaee:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaf6:	dbf2      	blt.n	800eade <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e000      	b.n	800eafe <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800eafc:	2301      	movs	r3, #1
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3720      	adds	r7, #32
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <atoi>:
 800eb06:	220a      	movs	r2, #10
 800eb08:	2100      	movs	r1, #0
 800eb0a:	f000 b967 	b.w	800eddc <strtol>
	...

0800eb10 <__errno>:
 800eb10:	4b01      	ldr	r3, [pc, #4]	; (800eb18 <__errno+0x8>)
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	2000013c 	.word	0x2000013c

0800eb1c <__libc_init_array>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	4d0d      	ldr	r5, [pc, #52]	; (800eb54 <__libc_init_array+0x38>)
 800eb20:	4c0d      	ldr	r4, [pc, #52]	; (800eb58 <__libc_init_array+0x3c>)
 800eb22:	1b64      	subs	r4, r4, r5
 800eb24:	10a4      	asrs	r4, r4, #2
 800eb26:	2600      	movs	r6, #0
 800eb28:	42a6      	cmp	r6, r4
 800eb2a:	d109      	bne.n	800eb40 <__libc_init_array+0x24>
 800eb2c:	4d0b      	ldr	r5, [pc, #44]	; (800eb5c <__libc_init_array+0x40>)
 800eb2e:	4c0c      	ldr	r4, [pc, #48]	; (800eb60 <__libc_init_array+0x44>)
 800eb30:	f001 fb56 	bl	80101e0 <_init>
 800eb34:	1b64      	subs	r4, r4, r5
 800eb36:	10a4      	asrs	r4, r4, #2
 800eb38:	2600      	movs	r6, #0
 800eb3a:	42a6      	cmp	r6, r4
 800eb3c:	d105      	bne.n	800eb4a <__libc_init_array+0x2e>
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb44:	4798      	blx	r3
 800eb46:	3601      	adds	r6, #1
 800eb48:	e7ee      	b.n	800eb28 <__libc_init_array+0xc>
 800eb4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb4e:	4798      	blx	r3
 800eb50:	3601      	adds	r6, #1
 800eb52:	e7f2      	b.n	800eb3a <__libc_init_array+0x1e>
 800eb54:	08010d0c 	.word	0x08010d0c
 800eb58:	08010d0c 	.word	0x08010d0c
 800eb5c:	08010d0c 	.word	0x08010d0c
 800eb60:	08010d10 	.word	0x08010d10

0800eb64 <__itoa>:
 800eb64:	1e93      	subs	r3, r2, #2
 800eb66:	2b22      	cmp	r3, #34	; 0x22
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	d904      	bls.n	800eb78 <__itoa+0x14>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	700b      	strb	r3, [r1, #0]
 800eb72:	461c      	mov	r4, r3
 800eb74:	4620      	mov	r0, r4
 800eb76:	bd10      	pop	{r4, pc}
 800eb78:	2a0a      	cmp	r2, #10
 800eb7a:	d109      	bne.n	800eb90 <__itoa+0x2c>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	da07      	bge.n	800eb90 <__itoa+0x2c>
 800eb80:	232d      	movs	r3, #45	; 0x2d
 800eb82:	700b      	strb	r3, [r1, #0]
 800eb84:	4240      	negs	r0, r0
 800eb86:	2101      	movs	r1, #1
 800eb88:	4421      	add	r1, r4
 800eb8a:	f000 f931 	bl	800edf0 <__utoa>
 800eb8e:	e7f1      	b.n	800eb74 <__itoa+0x10>
 800eb90:	2100      	movs	r1, #0
 800eb92:	e7f9      	b.n	800eb88 <__itoa+0x24>

0800eb94 <itoa>:
 800eb94:	f7ff bfe6 	b.w	800eb64 <__itoa>

0800eb98 <memset>:
 800eb98:	4402      	add	r2, r0
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d100      	bne.n	800eba2 <memset+0xa>
 800eba0:	4770      	bx	lr
 800eba2:	f803 1b01 	strb.w	r1, [r3], #1
 800eba6:	e7f9      	b.n	800eb9c <memset+0x4>

0800eba8 <siprintf>:
 800eba8:	b40e      	push	{r1, r2, r3}
 800ebaa:	b500      	push	{lr}
 800ebac:	b09c      	sub	sp, #112	; 0x70
 800ebae:	ab1d      	add	r3, sp, #116	; 0x74
 800ebb0:	9002      	str	r0, [sp, #8]
 800ebb2:	9006      	str	r0, [sp, #24]
 800ebb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebb8:	4809      	ldr	r0, [pc, #36]	; (800ebe0 <siprintf+0x38>)
 800ebba:	9107      	str	r1, [sp, #28]
 800ebbc:	9104      	str	r1, [sp, #16]
 800ebbe:	4909      	ldr	r1, [pc, #36]	; (800ebe4 <siprintf+0x3c>)
 800ebc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebc4:	9105      	str	r1, [sp, #20]
 800ebc6:	6800      	ldr	r0, [r0, #0]
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	a902      	add	r1, sp, #8
 800ebcc:	f000 fac6 	bl	800f15c <_svfiprintf_r>
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	701a      	strb	r2, [r3, #0]
 800ebd6:	b01c      	add	sp, #112	; 0x70
 800ebd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebdc:	b003      	add	sp, #12
 800ebde:	4770      	bx	lr
 800ebe0:	2000013c 	.word	0x2000013c
 800ebe4:	ffff0208 	.word	0xffff0208

0800ebe8 <strcpy>:
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebee:	f803 2b01 	strb.w	r2, [r3], #1
 800ebf2:	2a00      	cmp	r2, #0
 800ebf4:	d1f9      	bne.n	800ebea <strcpy+0x2>
 800ebf6:	4770      	bx	lr

0800ebf8 <strncat>:
 800ebf8:	b530      	push	{r4, r5, lr}
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	7825      	ldrb	r5, [r4, #0]
 800ebfe:	4623      	mov	r3, r4
 800ec00:	3401      	adds	r4, #1
 800ec02:	2d00      	cmp	r5, #0
 800ec04:	d1fa      	bne.n	800ebfc <strncat+0x4>
 800ec06:	3a01      	subs	r2, #1
 800ec08:	d304      	bcc.n	800ec14 <strncat+0x1c>
 800ec0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec0e:	f803 4b01 	strb.w	r4, [r3], #1
 800ec12:	b904      	cbnz	r4, 800ec16 <strncat+0x1e>
 800ec14:	bd30      	pop	{r4, r5, pc}
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	d1f5      	bne.n	800ec06 <strncat+0xe>
 800ec1a:	701a      	strb	r2, [r3, #0]
 800ec1c:	e7f3      	b.n	800ec06 <strncat+0xe>
	...

0800ec20 <strtok>:
 800ec20:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <strtok+0x5c>)
 800ec22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec24:	681e      	ldr	r6, [r3, #0]
 800ec26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ec28:	4605      	mov	r5, r0
 800ec2a:	b9fc      	cbnz	r4, 800ec6c <strtok+0x4c>
 800ec2c:	2050      	movs	r0, #80	; 0x50
 800ec2e:	9101      	str	r1, [sp, #4]
 800ec30:	f000 f950 	bl	800eed4 <malloc>
 800ec34:	9901      	ldr	r1, [sp, #4]
 800ec36:	65b0      	str	r0, [r6, #88]	; 0x58
 800ec38:	4602      	mov	r2, r0
 800ec3a:	b920      	cbnz	r0, 800ec46 <strtok+0x26>
 800ec3c:	4b10      	ldr	r3, [pc, #64]	; (800ec80 <strtok+0x60>)
 800ec3e:	4811      	ldr	r0, [pc, #68]	; (800ec84 <strtok+0x64>)
 800ec40:	2157      	movs	r1, #87	; 0x57
 800ec42:	f000 f917 	bl	800ee74 <__assert_func>
 800ec46:	e9c0 4400 	strd	r4, r4, [r0]
 800ec4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ec52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ec56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ec5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ec5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ec62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ec66:	6184      	str	r4, [r0, #24]
 800ec68:	7704      	strb	r4, [r0, #28]
 800ec6a:	6244      	str	r4, [r0, #36]	; 0x24
 800ec6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4628      	mov	r0, r5
 800ec72:	b002      	add	sp, #8
 800ec74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec78:	f000 b806 	b.w	800ec88 <__strtok_r>
 800ec7c:	2000013c 	.word	0x2000013c
 800ec80:	08010a98 	.word	0x08010a98
 800ec84:	08010aaf 	.word	0x08010aaf

0800ec88 <__strtok_r>:
 800ec88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8a:	b908      	cbnz	r0, 800ec90 <__strtok_r+0x8>
 800ec8c:	6810      	ldr	r0, [r2, #0]
 800ec8e:	b188      	cbz	r0, 800ecb4 <__strtok_r+0x2c>
 800ec90:	4604      	mov	r4, r0
 800ec92:	4620      	mov	r0, r4
 800ec94:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ec98:	460f      	mov	r7, r1
 800ec9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ec9e:	b91e      	cbnz	r6, 800eca8 <__strtok_r+0x20>
 800eca0:	b965      	cbnz	r5, 800ecbc <__strtok_r+0x34>
 800eca2:	6015      	str	r5, [r2, #0]
 800eca4:	4628      	mov	r0, r5
 800eca6:	e005      	b.n	800ecb4 <__strtok_r+0x2c>
 800eca8:	42b5      	cmp	r5, r6
 800ecaa:	d1f6      	bne.n	800ec9a <__strtok_r+0x12>
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f0      	bne.n	800ec92 <__strtok_r+0xa>
 800ecb0:	6014      	str	r4, [r2, #0]
 800ecb2:	7003      	strb	r3, [r0, #0]
 800ecb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb6:	461c      	mov	r4, r3
 800ecb8:	e00c      	b.n	800ecd4 <__strtok_r+0x4c>
 800ecba:	b915      	cbnz	r5, 800ecc2 <__strtok_r+0x3a>
 800ecbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ecc0:	460e      	mov	r6, r1
 800ecc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ecc6:	42ab      	cmp	r3, r5
 800ecc8:	d1f7      	bne.n	800ecba <__strtok_r+0x32>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d0f3      	beq.n	800ecb6 <__strtok_r+0x2e>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ecd4:	6014      	str	r4, [r2, #0]
 800ecd6:	e7ed      	b.n	800ecb4 <__strtok_r+0x2c>

0800ecd8 <_strtol_l.constprop.0>:
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecde:	d001      	beq.n	800ece4 <_strtol_l.constprop.0+0xc>
 800ece0:	2b24      	cmp	r3, #36	; 0x24
 800ece2:	d906      	bls.n	800ecf2 <_strtol_l.constprop.0+0x1a>
 800ece4:	f7ff ff14 	bl	800eb10 <__errno>
 800ece8:	2316      	movs	r3, #22
 800ecea:	6003      	str	r3, [r0, #0]
 800ecec:	2000      	movs	r0, #0
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800edd8 <_strtol_l.constprop.0+0x100>
 800ecf6:	460d      	mov	r5, r1
 800ecf8:	462e      	mov	r6, r5
 800ecfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ed02:	f017 0708 	ands.w	r7, r7, #8
 800ed06:	d1f7      	bne.n	800ecf8 <_strtol_l.constprop.0+0x20>
 800ed08:	2c2d      	cmp	r4, #45	; 0x2d
 800ed0a:	d132      	bne.n	800ed72 <_strtol_l.constprop.0+0x9a>
 800ed0c:	782c      	ldrb	r4, [r5, #0]
 800ed0e:	2701      	movs	r7, #1
 800ed10:	1cb5      	adds	r5, r6, #2
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d05b      	beq.n	800edce <_strtol_l.constprop.0+0xf6>
 800ed16:	2b10      	cmp	r3, #16
 800ed18:	d109      	bne.n	800ed2e <_strtol_l.constprop.0+0x56>
 800ed1a:	2c30      	cmp	r4, #48	; 0x30
 800ed1c:	d107      	bne.n	800ed2e <_strtol_l.constprop.0+0x56>
 800ed1e:	782c      	ldrb	r4, [r5, #0]
 800ed20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ed24:	2c58      	cmp	r4, #88	; 0x58
 800ed26:	d14d      	bne.n	800edc4 <_strtol_l.constprop.0+0xec>
 800ed28:	786c      	ldrb	r4, [r5, #1]
 800ed2a:	2310      	movs	r3, #16
 800ed2c:	3502      	adds	r5, #2
 800ed2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ed32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed36:	f04f 0c00 	mov.w	ip, #0
 800ed3a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ed3e:	4666      	mov	r6, ip
 800ed40:	fb03 8a19 	mls	sl, r3, r9, r8
 800ed44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ed48:	f1be 0f09 	cmp.w	lr, #9
 800ed4c:	d816      	bhi.n	800ed7c <_strtol_l.constprop.0+0xa4>
 800ed4e:	4674      	mov	r4, lr
 800ed50:	42a3      	cmp	r3, r4
 800ed52:	dd24      	ble.n	800ed9e <_strtol_l.constprop.0+0xc6>
 800ed54:	f1bc 0f00 	cmp.w	ip, #0
 800ed58:	db1e      	blt.n	800ed98 <_strtol_l.constprop.0+0xc0>
 800ed5a:	45b1      	cmp	r9, r6
 800ed5c:	d31c      	bcc.n	800ed98 <_strtol_l.constprop.0+0xc0>
 800ed5e:	d101      	bne.n	800ed64 <_strtol_l.constprop.0+0x8c>
 800ed60:	45a2      	cmp	sl, r4
 800ed62:	db19      	blt.n	800ed98 <_strtol_l.constprop.0+0xc0>
 800ed64:	fb06 4603 	mla	r6, r6, r3, r4
 800ed68:	f04f 0c01 	mov.w	ip, #1
 800ed6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed70:	e7e8      	b.n	800ed44 <_strtol_l.constprop.0+0x6c>
 800ed72:	2c2b      	cmp	r4, #43	; 0x2b
 800ed74:	bf04      	itt	eq
 800ed76:	782c      	ldrbeq	r4, [r5, #0]
 800ed78:	1cb5      	addeq	r5, r6, #2
 800ed7a:	e7ca      	b.n	800ed12 <_strtol_l.constprop.0+0x3a>
 800ed7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ed80:	f1be 0f19 	cmp.w	lr, #25
 800ed84:	d801      	bhi.n	800ed8a <_strtol_l.constprop.0+0xb2>
 800ed86:	3c37      	subs	r4, #55	; 0x37
 800ed88:	e7e2      	b.n	800ed50 <_strtol_l.constprop.0+0x78>
 800ed8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ed8e:	f1be 0f19 	cmp.w	lr, #25
 800ed92:	d804      	bhi.n	800ed9e <_strtol_l.constprop.0+0xc6>
 800ed94:	3c57      	subs	r4, #87	; 0x57
 800ed96:	e7db      	b.n	800ed50 <_strtol_l.constprop.0+0x78>
 800ed98:	f04f 3cff 	mov.w	ip, #4294967295
 800ed9c:	e7e6      	b.n	800ed6c <_strtol_l.constprop.0+0x94>
 800ed9e:	f1bc 0f00 	cmp.w	ip, #0
 800eda2:	da05      	bge.n	800edb0 <_strtol_l.constprop.0+0xd8>
 800eda4:	2322      	movs	r3, #34	; 0x22
 800eda6:	6003      	str	r3, [r0, #0]
 800eda8:	4646      	mov	r6, r8
 800edaa:	b942      	cbnz	r2, 800edbe <_strtol_l.constprop.0+0xe6>
 800edac:	4630      	mov	r0, r6
 800edae:	e79e      	b.n	800ecee <_strtol_l.constprop.0+0x16>
 800edb0:	b107      	cbz	r7, 800edb4 <_strtol_l.constprop.0+0xdc>
 800edb2:	4276      	negs	r6, r6
 800edb4:	2a00      	cmp	r2, #0
 800edb6:	d0f9      	beq.n	800edac <_strtol_l.constprop.0+0xd4>
 800edb8:	f1bc 0f00 	cmp.w	ip, #0
 800edbc:	d000      	beq.n	800edc0 <_strtol_l.constprop.0+0xe8>
 800edbe:	1e69      	subs	r1, r5, #1
 800edc0:	6011      	str	r1, [r2, #0]
 800edc2:	e7f3      	b.n	800edac <_strtol_l.constprop.0+0xd4>
 800edc4:	2430      	movs	r4, #48	; 0x30
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1b1      	bne.n	800ed2e <_strtol_l.constprop.0+0x56>
 800edca:	2308      	movs	r3, #8
 800edcc:	e7af      	b.n	800ed2e <_strtol_l.constprop.0+0x56>
 800edce:	2c30      	cmp	r4, #48	; 0x30
 800edd0:	d0a5      	beq.n	800ed1e <_strtol_l.constprop.0+0x46>
 800edd2:	230a      	movs	r3, #10
 800edd4:	e7ab      	b.n	800ed2e <_strtol_l.constprop.0+0x56>
 800edd6:	bf00      	nop
 800edd8:	08010b6e 	.word	0x08010b6e

0800eddc <strtol>:
 800eddc:	4613      	mov	r3, r2
 800edde:	460a      	mov	r2, r1
 800ede0:	4601      	mov	r1, r0
 800ede2:	4802      	ldr	r0, [pc, #8]	; (800edec <strtol+0x10>)
 800ede4:	6800      	ldr	r0, [r0, #0]
 800ede6:	f7ff bf77 	b.w	800ecd8 <_strtol_l.constprop.0>
 800edea:	bf00      	nop
 800edec:	2000013c 	.word	0x2000013c

0800edf0 <__utoa>:
 800edf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf2:	4c1f      	ldr	r4, [pc, #124]	; (800ee70 <__utoa+0x80>)
 800edf4:	b08b      	sub	sp, #44	; 0x2c
 800edf6:	4605      	mov	r5, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	466e      	mov	r6, sp
 800edfc:	f104 0c20 	add.w	ip, r4, #32
 800ee00:	6820      	ldr	r0, [r4, #0]
 800ee02:	6861      	ldr	r1, [r4, #4]
 800ee04:	4637      	mov	r7, r6
 800ee06:	c703      	stmia	r7!, {r0, r1}
 800ee08:	3408      	adds	r4, #8
 800ee0a:	4564      	cmp	r4, ip
 800ee0c:	463e      	mov	r6, r7
 800ee0e:	d1f7      	bne.n	800ee00 <__utoa+0x10>
 800ee10:	7921      	ldrb	r1, [r4, #4]
 800ee12:	7139      	strb	r1, [r7, #4]
 800ee14:	1e91      	subs	r1, r2, #2
 800ee16:	6820      	ldr	r0, [r4, #0]
 800ee18:	6038      	str	r0, [r7, #0]
 800ee1a:	2922      	cmp	r1, #34	; 0x22
 800ee1c:	f04f 0100 	mov.w	r1, #0
 800ee20:	d904      	bls.n	800ee2c <__utoa+0x3c>
 800ee22:	7019      	strb	r1, [r3, #0]
 800ee24:	460b      	mov	r3, r1
 800ee26:	4618      	mov	r0, r3
 800ee28:	b00b      	add	sp, #44	; 0x2c
 800ee2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee2c:	1e58      	subs	r0, r3, #1
 800ee2e:	4684      	mov	ip, r0
 800ee30:	fbb5 f7f2 	udiv	r7, r5, r2
 800ee34:	fb02 5617 	mls	r6, r2, r7, r5
 800ee38:	3628      	adds	r6, #40	; 0x28
 800ee3a:	446e      	add	r6, sp
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ee42:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ee46:	462e      	mov	r6, r5
 800ee48:	42b2      	cmp	r2, r6
 800ee4a:	f101 0101 	add.w	r1, r1, #1
 800ee4e:	463d      	mov	r5, r7
 800ee50:	d9ee      	bls.n	800ee30 <__utoa+0x40>
 800ee52:	2200      	movs	r2, #0
 800ee54:	545a      	strb	r2, [r3, r1]
 800ee56:	1919      	adds	r1, r3, r4
 800ee58:	1aa5      	subs	r5, r4, r2
 800ee5a:	42aa      	cmp	r2, r5
 800ee5c:	dae3      	bge.n	800ee26 <__utoa+0x36>
 800ee5e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ee62:	780e      	ldrb	r6, [r1, #0]
 800ee64:	7006      	strb	r6, [r0, #0]
 800ee66:	3201      	adds	r2, #1
 800ee68:	f801 5901 	strb.w	r5, [r1], #-1
 800ee6c:	e7f4      	b.n	800ee58 <__utoa+0x68>
 800ee6e:	bf00      	nop
 800ee70:	08010b0c 	.word	0x08010b0c

0800ee74 <__assert_func>:
 800ee74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee76:	4614      	mov	r4, r2
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4b09      	ldr	r3, [pc, #36]	; (800eea0 <__assert_func+0x2c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4605      	mov	r5, r0
 800ee80:	68d8      	ldr	r0, [r3, #12]
 800ee82:	b14c      	cbz	r4, 800ee98 <__assert_func+0x24>
 800ee84:	4b07      	ldr	r3, [pc, #28]	; (800eea4 <__assert_func+0x30>)
 800ee86:	9100      	str	r1, [sp, #0]
 800ee88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee8c:	4906      	ldr	r1, [pc, #24]	; (800eea8 <__assert_func+0x34>)
 800ee8e:	462b      	mov	r3, r5
 800ee90:	f000 f80e 	bl	800eeb0 <fiprintf>
 800ee94:	f000 fe20 	bl	800fad8 <abort>
 800ee98:	4b04      	ldr	r3, [pc, #16]	; (800eeac <__assert_func+0x38>)
 800ee9a:	461c      	mov	r4, r3
 800ee9c:	e7f3      	b.n	800ee86 <__assert_func+0x12>
 800ee9e:	bf00      	nop
 800eea0:	2000013c 	.word	0x2000013c
 800eea4:	08010b31 	.word	0x08010b31
 800eea8:	08010b3e 	.word	0x08010b3e
 800eeac:	08010b6c 	.word	0x08010b6c

0800eeb0 <fiprintf>:
 800eeb0:	b40e      	push	{r1, r2, r3}
 800eeb2:	b503      	push	{r0, r1, lr}
 800eeb4:	4601      	mov	r1, r0
 800eeb6:	ab03      	add	r3, sp, #12
 800eeb8:	4805      	ldr	r0, [pc, #20]	; (800eed0 <fiprintf+0x20>)
 800eeba:	f853 2b04 	ldr.w	r2, [r3], #4
 800eebe:	6800      	ldr	r0, [r0, #0]
 800eec0:	9301      	str	r3, [sp, #4]
 800eec2:	f000 fa75 	bl	800f3b0 <_vfiprintf_r>
 800eec6:	b002      	add	sp, #8
 800eec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eecc:	b003      	add	sp, #12
 800eece:	4770      	bx	lr
 800eed0:	2000013c 	.word	0x2000013c

0800eed4 <malloc>:
 800eed4:	4b02      	ldr	r3, [pc, #8]	; (800eee0 <malloc+0xc>)
 800eed6:	4601      	mov	r1, r0
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	f000 b86f 	b.w	800efbc <_malloc_r>
 800eede:	bf00      	nop
 800eee0:	2000013c 	.word	0x2000013c

0800eee4 <_free_r>:
 800eee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eee6:	2900      	cmp	r1, #0
 800eee8:	d044      	beq.n	800ef74 <_free_r+0x90>
 800eeea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeee:	9001      	str	r0, [sp, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f1a1 0404 	sub.w	r4, r1, #4
 800eef6:	bfb8      	it	lt
 800eef8:	18e4      	addlt	r4, r4, r3
 800eefa:	f001 f83d 	bl	800ff78 <__malloc_lock>
 800eefe:	4a1e      	ldr	r2, [pc, #120]	; (800ef78 <_free_r+0x94>)
 800ef00:	9801      	ldr	r0, [sp, #4]
 800ef02:	6813      	ldr	r3, [r2, #0]
 800ef04:	b933      	cbnz	r3, 800ef14 <_free_r+0x30>
 800ef06:	6063      	str	r3, [r4, #4]
 800ef08:	6014      	str	r4, [r2, #0]
 800ef0a:	b003      	add	sp, #12
 800ef0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef10:	f001 b838 	b.w	800ff84 <__malloc_unlock>
 800ef14:	42a3      	cmp	r3, r4
 800ef16:	d908      	bls.n	800ef2a <_free_r+0x46>
 800ef18:	6825      	ldr	r5, [r4, #0]
 800ef1a:	1961      	adds	r1, r4, r5
 800ef1c:	428b      	cmp	r3, r1
 800ef1e:	bf01      	itttt	eq
 800ef20:	6819      	ldreq	r1, [r3, #0]
 800ef22:	685b      	ldreq	r3, [r3, #4]
 800ef24:	1949      	addeq	r1, r1, r5
 800ef26:	6021      	streq	r1, [r4, #0]
 800ef28:	e7ed      	b.n	800ef06 <_free_r+0x22>
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	b10b      	cbz	r3, 800ef34 <_free_r+0x50>
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	d9fa      	bls.n	800ef2a <_free_r+0x46>
 800ef34:	6811      	ldr	r1, [r2, #0]
 800ef36:	1855      	adds	r5, r2, r1
 800ef38:	42a5      	cmp	r5, r4
 800ef3a:	d10b      	bne.n	800ef54 <_free_r+0x70>
 800ef3c:	6824      	ldr	r4, [r4, #0]
 800ef3e:	4421      	add	r1, r4
 800ef40:	1854      	adds	r4, r2, r1
 800ef42:	42a3      	cmp	r3, r4
 800ef44:	6011      	str	r1, [r2, #0]
 800ef46:	d1e0      	bne.n	800ef0a <_free_r+0x26>
 800ef48:	681c      	ldr	r4, [r3, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	6053      	str	r3, [r2, #4]
 800ef4e:	4421      	add	r1, r4
 800ef50:	6011      	str	r1, [r2, #0]
 800ef52:	e7da      	b.n	800ef0a <_free_r+0x26>
 800ef54:	d902      	bls.n	800ef5c <_free_r+0x78>
 800ef56:	230c      	movs	r3, #12
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	e7d6      	b.n	800ef0a <_free_r+0x26>
 800ef5c:	6825      	ldr	r5, [r4, #0]
 800ef5e:	1961      	adds	r1, r4, r5
 800ef60:	428b      	cmp	r3, r1
 800ef62:	bf04      	itt	eq
 800ef64:	6819      	ldreq	r1, [r3, #0]
 800ef66:	685b      	ldreq	r3, [r3, #4]
 800ef68:	6063      	str	r3, [r4, #4]
 800ef6a:	bf04      	itt	eq
 800ef6c:	1949      	addeq	r1, r1, r5
 800ef6e:	6021      	streq	r1, [r4, #0]
 800ef70:	6054      	str	r4, [r2, #4]
 800ef72:	e7ca      	b.n	800ef0a <_free_r+0x26>
 800ef74:	b003      	add	sp, #12
 800ef76:	bd30      	pop	{r4, r5, pc}
 800ef78:	20003cf4 	.word	0x20003cf4

0800ef7c <sbrk_aligned>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	4e0e      	ldr	r6, [pc, #56]	; (800efb8 <sbrk_aligned+0x3c>)
 800ef80:	460c      	mov	r4, r1
 800ef82:	6831      	ldr	r1, [r6, #0]
 800ef84:	4605      	mov	r5, r0
 800ef86:	b911      	cbnz	r1, 800ef8e <sbrk_aligned+0x12>
 800ef88:	f000 fcd6 	bl	800f938 <_sbrk_r>
 800ef8c:	6030      	str	r0, [r6, #0]
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4628      	mov	r0, r5
 800ef92:	f000 fcd1 	bl	800f938 <_sbrk_r>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d00a      	beq.n	800efb0 <sbrk_aligned+0x34>
 800ef9a:	1cc4      	adds	r4, r0, #3
 800ef9c:	f024 0403 	bic.w	r4, r4, #3
 800efa0:	42a0      	cmp	r0, r4
 800efa2:	d007      	beq.n	800efb4 <sbrk_aligned+0x38>
 800efa4:	1a21      	subs	r1, r4, r0
 800efa6:	4628      	mov	r0, r5
 800efa8:	f000 fcc6 	bl	800f938 <_sbrk_r>
 800efac:	3001      	adds	r0, #1
 800efae:	d101      	bne.n	800efb4 <sbrk_aligned+0x38>
 800efb0:	f04f 34ff 	mov.w	r4, #4294967295
 800efb4:	4620      	mov	r0, r4
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	20003cf8 	.word	0x20003cf8

0800efbc <_malloc_r>:
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	1ccd      	adds	r5, r1, #3
 800efc2:	f025 0503 	bic.w	r5, r5, #3
 800efc6:	3508      	adds	r5, #8
 800efc8:	2d0c      	cmp	r5, #12
 800efca:	bf38      	it	cc
 800efcc:	250c      	movcc	r5, #12
 800efce:	2d00      	cmp	r5, #0
 800efd0:	4607      	mov	r7, r0
 800efd2:	db01      	blt.n	800efd8 <_malloc_r+0x1c>
 800efd4:	42a9      	cmp	r1, r5
 800efd6:	d905      	bls.n	800efe4 <_malloc_r+0x28>
 800efd8:	230c      	movs	r3, #12
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	2600      	movs	r6, #0
 800efde:	4630      	mov	r0, r6
 800efe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe4:	4e2e      	ldr	r6, [pc, #184]	; (800f0a0 <_malloc_r+0xe4>)
 800efe6:	f000 ffc7 	bl	800ff78 <__malloc_lock>
 800efea:	6833      	ldr	r3, [r6, #0]
 800efec:	461c      	mov	r4, r3
 800efee:	bb34      	cbnz	r4, 800f03e <_malloc_r+0x82>
 800eff0:	4629      	mov	r1, r5
 800eff2:	4638      	mov	r0, r7
 800eff4:	f7ff ffc2 	bl	800ef7c <sbrk_aligned>
 800eff8:	1c43      	adds	r3, r0, #1
 800effa:	4604      	mov	r4, r0
 800effc:	d14d      	bne.n	800f09a <_malloc_r+0xde>
 800effe:	6834      	ldr	r4, [r6, #0]
 800f000:	4626      	mov	r6, r4
 800f002:	2e00      	cmp	r6, #0
 800f004:	d140      	bne.n	800f088 <_malloc_r+0xcc>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	4631      	mov	r1, r6
 800f00a:	4638      	mov	r0, r7
 800f00c:	eb04 0803 	add.w	r8, r4, r3
 800f010:	f000 fc92 	bl	800f938 <_sbrk_r>
 800f014:	4580      	cmp	r8, r0
 800f016:	d13a      	bne.n	800f08e <_malloc_r+0xd2>
 800f018:	6821      	ldr	r1, [r4, #0]
 800f01a:	3503      	adds	r5, #3
 800f01c:	1a6d      	subs	r5, r5, r1
 800f01e:	f025 0503 	bic.w	r5, r5, #3
 800f022:	3508      	adds	r5, #8
 800f024:	2d0c      	cmp	r5, #12
 800f026:	bf38      	it	cc
 800f028:	250c      	movcc	r5, #12
 800f02a:	4629      	mov	r1, r5
 800f02c:	4638      	mov	r0, r7
 800f02e:	f7ff ffa5 	bl	800ef7c <sbrk_aligned>
 800f032:	3001      	adds	r0, #1
 800f034:	d02b      	beq.n	800f08e <_malloc_r+0xd2>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	442b      	add	r3, r5
 800f03a:	6023      	str	r3, [r4, #0]
 800f03c:	e00e      	b.n	800f05c <_malloc_r+0xa0>
 800f03e:	6822      	ldr	r2, [r4, #0]
 800f040:	1b52      	subs	r2, r2, r5
 800f042:	d41e      	bmi.n	800f082 <_malloc_r+0xc6>
 800f044:	2a0b      	cmp	r2, #11
 800f046:	d916      	bls.n	800f076 <_malloc_r+0xba>
 800f048:	1961      	adds	r1, r4, r5
 800f04a:	42a3      	cmp	r3, r4
 800f04c:	6025      	str	r5, [r4, #0]
 800f04e:	bf18      	it	ne
 800f050:	6059      	strne	r1, [r3, #4]
 800f052:	6863      	ldr	r3, [r4, #4]
 800f054:	bf08      	it	eq
 800f056:	6031      	streq	r1, [r6, #0]
 800f058:	5162      	str	r2, [r4, r5]
 800f05a:	604b      	str	r3, [r1, #4]
 800f05c:	4638      	mov	r0, r7
 800f05e:	f104 060b 	add.w	r6, r4, #11
 800f062:	f000 ff8f 	bl	800ff84 <__malloc_unlock>
 800f066:	f026 0607 	bic.w	r6, r6, #7
 800f06a:	1d23      	adds	r3, r4, #4
 800f06c:	1af2      	subs	r2, r6, r3
 800f06e:	d0b6      	beq.n	800efde <_malloc_r+0x22>
 800f070:	1b9b      	subs	r3, r3, r6
 800f072:	50a3      	str	r3, [r4, r2]
 800f074:	e7b3      	b.n	800efde <_malloc_r+0x22>
 800f076:	6862      	ldr	r2, [r4, #4]
 800f078:	42a3      	cmp	r3, r4
 800f07a:	bf0c      	ite	eq
 800f07c:	6032      	streq	r2, [r6, #0]
 800f07e:	605a      	strne	r2, [r3, #4]
 800f080:	e7ec      	b.n	800f05c <_malloc_r+0xa0>
 800f082:	4623      	mov	r3, r4
 800f084:	6864      	ldr	r4, [r4, #4]
 800f086:	e7b2      	b.n	800efee <_malloc_r+0x32>
 800f088:	4634      	mov	r4, r6
 800f08a:	6876      	ldr	r6, [r6, #4]
 800f08c:	e7b9      	b.n	800f002 <_malloc_r+0x46>
 800f08e:	230c      	movs	r3, #12
 800f090:	603b      	str	r3, [r7, #0]
 800f092:	4638      	mov	r0, r7
 800f094:	f000 ff76 	bl	800ff84 <__malloc_unlock>
 800f098:	e7a1      	b.n	800efde <_malloc_r+0x22>
 800f09a:	6025      	str	r5, [r4, #0]
 800f09c:	e7de      	b.n	800f05c <_malloc_r+0xa0>
 800f09e:	bf00      	nop
 800f0a0:	20003cf4 	.word	0x20003cf4

0800f0a4 <__ssputs_r>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	688e      	ldr	r6, [r1, #8]
 800f0aa:	429e      	cmp	r6, r3
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	4690      	mov	r8, r2
 800f0b2:	461f      	mov	r7, r3
 800f0b4:	d838      	bhi.n	800f128 <__ssputs_r+0x84>
 800f0b6:	898a      	ldrh	r2, [r1, #12]
 800f0b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0bc:	d032      	beq.n	800f124 <__ssputs_r+0x80>
 800f0be:	6825      	ldr	r5, [r4, #0]
 800f0c0:	6909      	ldr	r1, [r1, #16]
 800f0c2:	eba5 0901 	sub.w	r9, r5, r1
 800f0c6:	6965      	ldr	r5, [r4, #20]
 800f0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	444b      	add	r3, r9
 800f0d4:	106d      	asrs	r5, r5, #1
 800f0d6:	429d      	cmp	r5, r3
 800f0d8:	bf38      	it	cc
 800f0da:	461d      	movcc	r5, r3
 800f0dc:	0553      	lsls	r3, r2, #21
 800f0de:	d531      	bpl.n	800f144 <__ssputs_r+0xa0>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f7ff ff6b 	bl	800efbc <_malloc_r>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	b950      	cbnz	r0, 800f100 <__ssputs_r+0x5c>
 800f0ea:	230c      	movs	r3, #12
 800f0ec:	f8ca 3000 	str.w	r3, [sl]
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0f6:	81a3      	strh	r3, [r4, #12]
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f100:	6921      	ldr	r1, [r4, #16]
 800f102:	464a      	mov	r2, r9
 800f104:	f000 ff10 	bl	800ff28 <memcpy>
 800f108:	89a3      	ldrh	r3, [r4, #12]
 800f10a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f112:	81a3      	strh	r3, [r4, #12]
 800f114:	6126      	str	r6, [r4, #16]
 800f116:	6165      	str	r5, [r4, #20]
 800f118:	444e      	add	r6, r9
 800f11a:	eba5 0509 	sub.w	r5, r5, r9
 800f11e:	6026      	str	r6, [r4, #0]
 800f120:	60a5      	str	r5, [r4, #8]
 800f122:	463e      	mov	r6, r7
 800f124:	42be      	cmp	r6, r7
 800f126:	d900      	bls.n	800f12a <__ssputs_r+0x86>
 800f128:	463e      	mov	r6, r7
 800f12a:	6820      	ldr	r0, [r4, #0]
 800f12c:	4632      	mov	r2, r6
 800f12e:	4641      	mov	r1, r8
 800f130:	f000 ff08 	bl	800ff44 <memmove>
 800f134:	68a3      	ldr	r3, [r4, #8]
 800f136:	1b9b      	subs	r3, r3, r6
 800f138:	60a3      	str	r3, [r4, #8]
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	4433      	add	r3, r6
 800f13e:	6023      	str	r3, [r4, #0]
 800f140:	2000      	movs	r0, #0
 800f142:	e7db      	b.n	800f0fc <__ssputs_r+0x58>
 800f144:	462a      	mov	r2, r5
 800f146:	f000 ff23 	bl	800ff90 <_realloc_r>
 800f14a:	4606      	mov	r6, r0
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d1e1      	bne.n	800f114 <__ssputs_r+0x70>
 800f150:	6921      	ldr	r1, [r4, #16]
 800f152:	4650      	mov	r0, sl
 800f154:	f7ff fec6 	bl	800eee4 <_free_r>
 800f158:	e7c7      	b.n	800f0ea <__ssputs_r+0x46>
	...

0800f15c <_svfiprintf_r>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	4698      	mov	r8, r3
 800f162:	898b      	ldrh	r3, [r1, #12]
 800f164:	061b      	lsls	r3, r3, #24
 800f166:	b09d      	sub	sp, #116	; 0x74
 800f168:	4607      	mov	r7, r0
 800f16a:	460d      	mov	r5, r1
 800f16c:	4614      	mov	r4, r2
 800f16e:	d50e      	bpl.n	800f18e <_svfiprintf_r+0x32>
 800f170:	690b      	ldr	r3, [r1, #16]
 800f172:	b963      	cbnz	r3, 800f18e <_svfiprintf_r+0x32>
 800f174:	2140      	movs	r1, #64	; 0x40
 800f176:	f7ff ff21 	bl	800efbc <_malloc_r>
 800f17a:	6028      	str	r0, [r5, #0]
 800f17c:	6128      	str	r0, [r5, #16]
 800f17e:	b920      	cbnz	r0, 800f18a <_svfiprintf_r+0x2e>
 800f180:	230c      	movs	r3, #12
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	f04f 30ff 	mov.w	r0, #4294967295
 800f188:	e0d1      	b.n	800f32e <_svfiprintf_r+0x1d2>
 800f18a:	2340      	movs	r3, #64	; 0x40
 800f18c:	616b      	str	r3, [r5, #20]
 800f18e:	2300      	movs	r3, #0
 800f190:	9309      	str	r3, [sp, #36]	; 0x24
 800f192:	2320      	movs	r3, #32
 800f194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f198:	f8cd 800c 	str.w	r8, [sp, #12]
 800f19c:	2330      	movs	r3, #48	; 0x30
 800f19e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f348 <_svfiprintf_r+0x1ec>
 800f1a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1a6:	f04f 0901 	mov.w	r9, #1
 800f1aa:	4623      	mov	r3, r4
 800f1ac:	469a      	mov	sl, r3
 800f1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1b2:	b10a      	cbz	r2, 800f1b8 <_svfiprintf_r+0x5c>
 800f1b4:	2a25      	cmp	r2, #37	; 0x25
 800f1b6:	d1f9      	bne.n	800f1ac <_svfiprintf_r+0x50>
 800f1b8:	ebba 0b04 	subs.w	fp, sl, r4
 800f1bc:	d00b      	beq.n	800f1d6 <_svfiprintf_r+0x7a>
 800f1be:	465b      	mov	r3, fp
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ff6d 	bl	800f0a4 <__ssputs_r>
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	f000 80aa 	beq.w	800f324 <_svfiprintf_r+0x1c8>
 800f1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d2:	445a      	add	r2, fp
 800f1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f000 80a2 	beq.w	800f324 <_svfiprintf_r+0x1c8>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ea:	f10a 0a01 	add.w	sl, sl, #1
 800f1ee:	9304      	str	r3, [sp, #16]
 800f1f0:	9307      	str	r3, [sp, #28]
 800f1f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1f6:	931a      	str	r3, [sp, #104]	; 0x68
 800f1f8:	4654      	mov	r4, sl
 800f1fa:	2205      	movs	r2, #5
 800f1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f200:	4851      	ldr	r0, [pc, #324]	; (800f348 <_svfiprintf_r+0x1ec>)
 800f202:	f7f1 f805 	bl	8000210 <memchr>
 800f206:	9a04      	ldr	r2, [sp, #16]
 800f208:	b9d8      	cbnz	r0, 800f242 <_svfiprintf_r+0xe6>
 800f20a:	06d0      	lsls	r0, r2, #27
 800f20c:	bf44      	itt	mi
 800f20e:	2320      	movmi	r3, #32
 800f210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f214:	0711      	lsls	r1, r2, #28
 800f216:	bf44      	itt	mi
 800f218:	232b      	movmi	r3, #43	; 0x2b
 800f21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f21e:	f89a 3000 	ldrb.w	r3, [sl]
 800f222:	2b2a      	cmp	r3, #42	; 0x2a
 800f224:	d015      	beq.n	800f252 <_svfiprintf_r+0xf6>
 800f226:	9a07      	ldr	r2, [sp, #28]
 800f228:	4654      	mov	r4, sl
 800f22a:	2000      	movs	r0, #0
 800f22c:	f04f 0c0a 	mov.w	ip, #10
 800f230:	4621      	mov	r1, r4
 800f232:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f236:	3b30      	subs	r3, #48	; 0x30
 800f238:	2b09      	cmp	r3, #9
 800f23a:	d94e      	bls.n	800f2da <_svfiprintf_r+0x17e>
 800f23c:	b1b0      	cbz	r0, 800f26c <_svfiprintf_r+0x110>
 800f23e:	9207      	str	r2, [sp, #28]
 800f240:	e014      	b.n	800f26c <_svfiprintf_r+0x110>
 800f242:	eba0 0308 	sub.w	r3, r0, r8
 800f246:	fa09 f303 	lsl.w	r3, r9, r3
 800f24a:	4313      	orrs	r3, r2
 800f24c:	9304      	str	r3, [sp, #16]
 800f24e:	46a2      	mov	sl, r4
 800f250:	e7d2      	b.n	800f1f8 <_svfiprintf_r+0x9c>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	1d19      	adds	r1, r3, #4
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	9103      	str	r1, [sp, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bfbb      	ittet	lt
 800f25e:	425b      	neglt	r3, r3
 800f260:	f042 0202 	orrlt.w	r2, r2, #2
 800f264:	9307      	strge	r3, [sp, #28]
 800f266:	9307      	strlt	r3, [sp, #28]
 800f268:	bfb8      	it	lt
 800f26a:	9204      	strlt	r2, [sp, #16]
 800f26c:	7823      	ldrb	r3, [r4, #0]
 800f26e:	2b2e      	cmp	r3, #46	; 0x2e
 800f270:	d10c      	bne.n	800f28c <_svfiprintf_r+0x130>
 800f272:	7863      	ldrb	r3, [r4, #1]
 800f274:	2b2a      	cmp	r3, #42	; 0x2a
 800f276:	d135      	bne.n	800f2e4 <_svfiprintf_r+0x188>
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	1d1a      	adds	r2, r3, #4
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	9203      	str	r2, [sp, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfb8      	it	lt
 800f284:	f04f 33ff 	movlt.w	r3, #4294967295
 800f288:	3402      	adds	r4, #2
 800f28a:	9305      	str	r3, [sp, #20]
 800f28c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f358 <_svfiprintf_r+0x1fc>
 800f290:	7821      	ldrb	r1, [r4, #0]
 800f292:	2203      	movs	r2, #3
 800f294:	4650      	mov	r0, sl
 800f296:	f7f0 ffbb 	bl	8000210 <memchr>
 800f29a:	b140      	cbz	r0, 800f2ae <_svfiprintf_r+0x152>
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	eba0 000a 	sub.w	r0, r0, sl
 800f2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2a6:	9b04      	ldr	r3, [sp, #16]
 800f2a8:	4303      	orrs	r3, r0
 800f2aa:	3401      	adds	r4, #1
 800f2ac:	9304      	str	r3, [sp, #16]
 800f2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b2:	4826      	ldr	r0, [pc, #152]	; (800f34c <_svfiprintf_r+0x1f0>)
 800f2b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2b8:	2206      	movs	r2, #6
 800f2ba:	f7f0 ffa9 	bl	8000210 <memchr>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d038      	beq.n	800f334 <_svfiprintf_r+0x1d8>
 800f2c2:	4b23      	ldr	r3, [pc, #140]	; (800f350 <_svfiprintf_r+0x1f4>)
 800f2c4:	bb1b      	cbnz	r3, 800f30e <_svfiprintf_r+0x1b2>
 800f2c6:	9b03      	ldr	r3, [sp, #12]
 800f2c8:	3307      	adds	r3, #7
 800f2ca:	f023 0307 	bic.w	r3, r3, #7
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	9303      	str	r3, [sp, #12]
 800f2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d4:	4433      	add	r3, r6
 800f2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d8:	e767      	b.n	800f1aa <_svfiprintf_r+0x4e>
 800f2da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2de:	460c      	mov	r4, r1
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	e7a5      	b.n	800f230 <_svfiprintf_r+0xd4>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	3401      	adds	r4, #1
 800f2e8:	9305      	str	r3, [sp, #20]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f04f 0c0a 	mov.w	ip, #10
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2f6:	3a30      	subs	r2, #48	; 0x30
 800f2f8:	2a09      	cmp	r2, #9
 800f2fa:	d903      	bls.n	800f304 <_svfiprintf_r+0x1a8>
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0c5      	beq.n	800f28c <_svfiprintf_r+0x130>
 800f300:	9105      	str	r1, [sp, #20]
 800f302:	e7c3      	b.n	800f28c <_svfiprintf_r+0x130>
 800f304:	fb0c 2101 	mla	r1, ip, r1, r2
 800f308:	4604      	mov	r4, r0
 800f30a:	2301      	movs	r3, #1
 800f30c:	e7f0      	b.n	800f2f0 <_svfiprintf_r+0x194>
 800f30e:	ab03      	add	r3, sp, #12
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	462a      	mov	r2, r5
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <_svfiprintf_r+0x1f8>)
 800f316:	a904      	add	r1, sp, #16
 800f318:	4638      	mov	r0, r7
 800f31a:	f3af 8000 	nop.w
 800f31e:	1c42      	adds	r2, r0, #1
 800f320:	4606      	mov	r6, r0
 800f322:	d1d6      	bne.n	800f2d2 <_svfiprintf_r+0x176>
 800f324:	89ab      	ldrh	r3, [r5, #12]
 800f326:	065b      	lsls	r3, r3, #25
 800f328:	f53f af2c 	bmi.w	800f184 <_svfiprintf_r+0x28>
 800f32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f32e:	b01d      	add	sp, #116	; 0x74
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	ab03      	add	r3, sp, #12
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	462a      	mov	r2, r5
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <_svfiprintf_r+0x1f8>)
 800f33c:	a904      	add	r1, sp, #16
 800f33e:	4638      	mov	r0, r7
 800f340:	f000 f9d4 	bl	800f6ec <_printf_i>
 800f344:	e7eb      	b.n	800f31e <_svfiprintf_r+0x1c2>
 800f346:	bf00      	nop
 800f348:	08010c6e 	.word	0x08010c6e
 800f34c:	08010c78 	.word	0x08010c78
 800f350:	00000000 	.word	0x00000000
 800f354:	0800f0a5 	.word	0x0800f0a5
 800f358:	08010c74 	.word	0x08010c74

0800f35c <__sfputc_r>:
 800f35c:	6893      	ldr	r3, [r2, #8]
 800f35e:	3b01      	subs	r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	b410      	push	{r4}
 800f364:	6093      	str	r3, [r2, #8]
 800f366:	da08      	bge.n	800f37a <__sfputc_r+0x1e>
 800f368:	6994      	ldr	r4, [r2, #24]
 800f36a:	42a3      	cmp	r3, r4
 800f36c:	db01      	blt.n	800f372 <__sfputc_r+0x16>
 800f36e:	290a      	cmp	r1, #10
 800f370:	d103      	bne.n	800f37a <__sfputc_r+0x1e>
 800f372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f376:	f000 baef 	b.w	800f958 <__swbuf_r>
 800f37a:	6813      	ldr	r3, [r2, #0]
 800f37c:	1c58      	adds	r0, r3, #1
 800f37e:	6010      	str	r0, [r2, #0]
 800f380:	7019      	strb	r1, [r3, #0]
 800f382:	4608      	mov	r0, r1
 800f384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <__sfputs_r>:
 800f38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38c:	4606      	mov	r6, r0
 800f38e:	460f      	mov	r7, r1
 800f390:	4614      	mov	r4, r2
 800f392:	18d5      	adds	r5, r2, r3
 800f394:	42ac      	cmp	r4, r5
 800f396:	d101      	bne.n	800f39c <__sfputs_r+0x12>
 800f398:	2000      	movs	r0, #0
 800f39a:	e007      	b.n	800f3ac <__sfputs_r+0x22>
 800f39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a0:	463a      	mov	r2, r7
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffda 	bl	800f35c <__sfputc_r>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d1f3      	bne.n	800f394 <__sfputs_r+0xa>
 800f3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3b0 <_vfiprintf_r>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	460d      	mov	r5, r1
 800f3b6:	b09d      	sub	sp, #116	; 0x74
 800f3b8:	4614      	mov	r4, r2
 800f3ba:	4698      	mov	r8, r3
 800f3bc:	4606      	mov	r6, r0
 800f3be:	b118      	cbz	r0, 800f3c8 <_vfiprintf_r+0x18>
 800f3c0:	6983      	ldr	r3, [r0, #24]
 800f3c2:	b90b      	cbnz	r3, 800f3c8 <_vfiprintf_r+0x18>
 800f3c4:	f000 fcaa 	bl	800fd1c <__sinit>
 800f3c8:	4b89      	ldr	r3, [pc, #548]	; (800f5f0 <_vfiprintf_r+0x240>)
 800f3ca:	429d      	cmp	r5, r3
 800f3cc:	d11b      	bne.n	800f406 <_vfiprintf_r+0x56>
 800f3ce:	6875      	ldr	r5, [r6, #4]
 800f3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3d2:	07d9      	lsls	r1, r3, #31
 800f3d4:	d405      	bmi.n	800f3e2 <_vfiprintf_r+0x32>
 800f3d6:	89ab      	ldrh	r3, [r5, #12]
 800f3d8:	059a      	lsls	r2, r3, #22
 800f3da:	d402      	bmi.n	800f3e2 <_vfiprintf_r+0x32>
 800f3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3de:	f000 fd3b 	bl	800fe58 <__retarget_lock_acquire_recursive>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	071b      	lsls	r3, r3, #28
 800f3e6:	d501      	bpl.n	800f3ec <_vfiprintf_r+0x3c>
 800f3e8:	692b      	ldr	r3, [r5, #16]
 800f3ea:	b9eb      	cbnz	r3, 800f428 <_vfiprintf_r+0x78>
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f000 fb04 	bl	800f9fc <__swsetup_r>
 800f3f4:	b1c0      	cbz	r0, 800f428 <_vfiprintf_r+0x78>
 800f3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3f8:	07dc      	lsls	r4, r3, #31
 800f3fa:	d50e      	bpl.n	800f41a <_vfiprintf_r+0x6a>
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	b01d      	add	sp, #116	; 0x74
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f406:	4b7b      	ldr	r3, [pc, #492]	; (800f5f4 <_vfiprintf_r+0x244>)
 800f408:	429d      	cmp	r5, r3
 800f40a:	d101      	bne.n	800f410 <_vfiprintf_r+0x60>
 800f40c:	68b5      	ldr	r5, [r6, #8]
 800f40e:	e7df      	b.n	800f3d0 <_vfiprintf_r+0x20>
 800f410:	4b79      	ldr	r3, [pc, #484]	; (800f5f8 <_vfiprintf_r+0x248>)
 800f412:	429d      	cmp	r5, r3
 800f414:	bf08      	it	eq
 800f416:	68f5      	ldreq	r5, [r6, #12]
 800f418:	e7da      	b.n	800f3d0 <_vfiprintf_r+0x20>
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	0598      	lsls	r0, r3, #22
 800f41e:	d4ed      	bmi.n	800f3fc <_vfiprintf_r+0x4c>
 800f420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f422:	f000 fd1a 	bl	800fe5a <__retarget_lock_release_recursive>
 800f426:	e7e9      	b.n	800f3fc <_vfiprintf_r+0x4c>
 800f428:	2300      	movs	r3, #0
 800f42a:	9309      	str	r3, [sp, #36]	; 0x24
 800f42c:	2320      	movs	r3, #32
 800f42e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f432:	f8cd 800c 	str.w	r8, [sp, #12]
 800f436:	2330      	movs	r3, #48	; 0x30
 800f438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5fc <_vfiprintf_r+0x24c>
 800f43c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f440:	f04f 0901 	mov.w	r9, #1
 800f444:	4623      	mov	r3, r4
 800f446:	469a      	mov	sl, r3
 800f448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f44c:	b10a      	cbz	r2, 800f452 <_vfiprintf_r+0xa2>
 800f44e:	2a25      	cmp	r2, #37	; 0x25
 800f450:	d1f9      	bne.n	800f446 <_vfiprintf_r+0x96>
 800f452:	ebba 0b04 	subs.w	fp, sl, r4
 800f456:	d00b      	beq.n	800f470 <_vfiprintf_r+0xc0>
 800f458:	465b      	mov	r3, fp
 800f45a:	4622      	mov	r2, r4
 800f45c:	4629      	mov	r1, r5
 800f45e:	4630      	mov	r0, r6
 800f460:	f7ff ff93 	bl	800f38a <__sfputs_r>
 800f464:	3001      	adds	r0, #1
 800f466:	f000 80aa 	beq.w	800f5be <_vfiprintf_r+0x20e>
 800f46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f46c:	445a      	add	r2, fp
 800f46e:	9209      	str	r2, [sp, #36]	; 0x24
 800f470:	f89a 3000 	ldrb.w	r3, [sl]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 80a2 	beq.w	800f5be <_vfiprintf_r+0x20e>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f484:	f10a 0a01 	add.w	sl, sl, #1
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	9307      	str	r3, [sp, #28]
 800f48c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f490:	931a      	str	r3, [sp, #104]	; 0x68
 800f492:	4654      	mov	r4, sl
 800f494:	2205      	movs	r2, #5
 800f496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f49a:	4858      	ldr	r0, [pc, #352]	; (800f5fc <_vfiprintf_r+0x24c>)
 800f49c:	f7f0 feb8 	bl	8000210 <memchr>
 800f4a0:	9a04      	ldr	r2, [sp, #16]
 800f4a2:	b9d8      	cbnz	r0, 800f4dc <_vfiprintf_r+0x12c>
 800f4a4:	06d1      	lsls	r1, r2, #27
 800f4a6:	bf44      	itt	mi
 800f4a8:	2320      	movmi	r3, #32
 800f4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4ae:	0713      	lsls	r3, r2, #28
 800f4b0:	bf44      	itt	mi
 800f4b2:	232b      	movmi	r3, #43	; 0x2b
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f4be:	d015      	beq.n	800f4ec <_vfiprintf_r+0x13c>
 800f4c0:	9a07      	ldr	r2, [sp, #28]
 800f4c2:	4654      	mov	r4, sl
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f04f 0c0a 	mov.w	ip, #10
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4d0:	3b30      	subs	r3, #48	; 0x30
 800f4d2:	2b09      	cmp	r3, #9
 800f4d4:	d94e      	bls.n	800f574 <_vfiprintf_r+0x1c4>
 800f4d6:	b1b0      	cbz	r0, 800f506 <_vfiprintf_r+0x156>
 800f4d8:	9207      	str	r2, [sp, #28]
 800f4da:	e014      	b.n	800f506 <_vfiprintf_r+0x156>
 800f4dc:	eba0 0308 	sub.w	r3, r0, r8
 800f4e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	9304      	str	r3, [sp, #16]
 800f4e8:	46a2      	mov	sl, r4
 800f4ea:	e7d2      	b.n	800f492 <_vfiprintf_r+0xe2>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	1d19      	adds	r1, r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	9103      	str	r1, [sp, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	bfbb      	ittet	lt
 800f4f8:	425b      	neglt	r3, r3
 800f4fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f4fe:	9307      	strge	r3, [sp, #28]
 800f500:	9307      	strlt	r3, [sp, #28]
 800f502:	bfb8      	it	lt
 800f504:	9204      	strlt	r2, [sp, #16]
 800f506:	7823      	ldrb	r3, [r4, #0]
 800f508:	2b2e      	cmp	r3, #46	; 0x2e
 800f50a:	d10c      	bne.n	800f526 <_vfiprintf_r+0x176>
 800f50c:	7863      	ldrb	r3, [r4, #1]
 800f50e:	2b2a      	cmp	r3, #42	; 0x2a
 800f510:	d135      	bne.n	800f57e <_vfiprintf_r+0x1ce>
 800f512:	9b03      	ldr	r3, [sp, #12]
 800f514:	1d1a      	adds	r2, r3, #4
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	9203      	str	r2, [sp, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bfb8      	it	lt
 800f51e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f522:	3402      	adds	r4, #2
 800f524:	9305      	str	r3, [sp, #20]
 800f526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f60c <_vfiprintf_r+0x25c>
 800f52a:	7821      	ldrb	r1, [r4, #0]
 800f52c:	2203      	movs	r2, #3
 800f52e:	4650      	mov	r0, sl
 800f530:	f7f0 fe6e 	bl	8000210 <memchr>
 800f534:	b140      	cbz	r0, 800f548 <_vfiprintf_r+0x198>
 800f536:	2340      	movs	r3, #64	; 0x40
 800f538:	eba0 000a 	sub.w	r0, r0, sl
 800f53c:	fa03 f000 	lsl.w	r0, r3, r0
 800f540:	9b04      	ldr	r3, [sp, #16]
 800f542:	4303      	orrs	r3, r0
 800f544:	3401      	adds	r4, #1
 800f546:	9304      	str	r3, [sp, #16]
 800f548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f54c:	482c      	ldr	r0, [pc, #176]	; (800f600 <_vfiprintf_r+0x250>)
 800f54e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f552:	2206      	movs	r2, #6
 800f554:	f7f0 fe5c 	bl	8000210 <memchr>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d03f      	beq.n	800f5dc <_vfiprintf_r+0x22c>
 800f55c:	4b29      	ldr	r3, [pc, #164]	; (800f604 <_vfiprintf_r+0x254>)
 800f55e:	bb1b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x1f8>
 800f560:	9b03      	ldr	r3, [sp, #12]
 800f562:	3307      	adds	r3, #7
 800f564:	f023 0307 	bic.w	r3, r3, #7
 800f568:	3308      	adds	r3, #8
 800f56a:	9303      	str	r3, [sp, #12]
 800f56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f56e:	443b      	add	r3, r7
 800f570:	9309      	str	r3, [sp, #36]	; 0x24
 800f572:	e767      	b.n	800f444 <_vfiprintf_r+0x94>
 800f574:	fb0c 3202 	mla	r2, ip, r2, r3
 800f578:	460c      	mov	r4, r1
 800f57a:	2001      	movs	r0, #1
 800f57c:	e7a5      	b.n	800f4ca <_vfiprintf_r+0x11a>
 800f57e:	2300      	movs	r3, #0
 800f580:	3401      	adds	r4, #1
 800f582:	9305      	str	r3, [sp, #20]
 800f584:	4619      	mov	r1, r3
 800f586:	f04f 0c0a 	mov.w	ip, #10
 800f58a:	4620      	mov	r0, r4
 800f58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f590:	3a30      	subs	r2, #48	; 0x30
 800f592:	2a09      	cmp	r2, #9
 800f594:	d903      	bls.n	800f59e <_vfiprintf_r+0x1ee>
 800f596:	2b00      	cmp	r3, #0
 800f598:	d0c5      	beq.n	800f526 <_vfiprintf_r+0x176>
 800f59a:	9105      	str	r1, [sp, #20]
 800f59c:	e7c3      	b.n	800f526 <_vfiprintf_r+0x176>
 800f59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e7f0      	b.n	800f58a <_vfiprintf_r+0x1da>
 800f5a8:	ab03      	add	r3, sp, #12
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	462a      	mov	r2, r5
 800f5ae:	4b16      	ldr	r3, [pc, #88]	; (800f608 <_vfiprintf_r+0x258>)
 800f5b0:	a904      	add	r1, sp, #16
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f3af 8000 	nop.w
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	1c78      	adds	r0, r7, #1
 800f5bc:	d1d6      	bne.n	800f56c <_vfiprintf_r+0x1bc>
 800f5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5c0:	07d9      	lsls	r1, r3, #31
 800f5c2:	d405      	bmi.n	800f5d0 <_vfiprintf_r+0x220>
 800f5c4:	89ab      	ldrh	r3, [r5, #12]
 800f5c6:	059a      	lsls	r2, r3, #22
 800f5c8:	d402      	bmi.n	800f5d0 <_vfiprintf_r+0x220>
 800f5ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5cc:	f000 fc45 	bl	800fe5a <__retarget_lock_release_recursive>
 800f5d0:	89ab      	ldrh	r3, [r5, #12]
 800f5d2:	065b      	lsls	r3, r3, #25
 800f5d4:	f53f af12 	bmi.w	800f3fc <_vfiprintf_r+0x4c>
 800f5d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5da:	e711      	b.n	800f400 <_vfiprintf_r+0x50>
 800f5dc:	ab03      	add	r3, sp, #12
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	4b09      	ldr	r3, [pc, #36]	; (800f608 <_vfiprintf_r+0x258>)
 800f5e4:	a904      	add	r1, sp, #16
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f000 f880 	bl	800f6ec <_printf_i>
 800f5ec:	e7e4      	b.n	800f5b8 <_vfiprintf_r+0x208>
 800f5ee:	bf00      	nop
 800f5f0:	08010cc4 	.word	0x08010cc4
 800f5f4:	08010ce4 	.word	0x08010ce4
 800f5f8:	08010ca4 	.word	0x08010ca4
 800f5fc:	08010c6e 	.word	0x08010c6e
 800f600:	08010c78 	.word	0x08010c78
 800f604:	00000000 	.word	0x00000000
 800f608:	0800f38b 	.word	0x0800f38b
 800f60c:	08010c74 	.word	0x08010c74

0800f610 <_printf_common>:
 800f610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f614:	4616      	mov	r6, r2
 800f616:	4699      	mov	r9, r3
 800f618:	688a      	ldr	r2, [r1, #8]
 800f61a:	690b      	ldr	r3, [r1, #16]
 800f61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f620:	4293      	cmp	r3, r2
 800f622:	bfb8      	it	lt
 800f624:	4613      	movlt	r3, r2
 800f626:	6033      	str	r3, [r6, #0]
 800f628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f62c:	4607      	mov	r7, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	b10a      	cbz	r2, 800f636 <_printf_common+0x26>
 800f632:	3301      	adds	r3, #1
 800f634:	6033      	str	r3, [r6, #0]
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	0699      	lsls	r1, r3, #26
 800f63a:	bf42      	ittt	mi
 800f63c:	6833      	ldrmi	r3, [r6, #0]
 800f63e:	3302      	addmi	r3, #2
 800f640:	6033      	strmi	r3, [r6, #0]
 800f642:	6825      	ldr	r5, [r4, #0]
 800f644:	f015 0506 	ands.w	r5, r5, #6
 800f648:	d106      	bne.n	800f658 <_printf_common+0x48>
 800f64a:	f104 0a19 	add.w	sl, r4, #25
 800f64e:	68e3      	ldr	r3, [r4, #12]
 800f650:	6832      	ldr	r2, [r6, #0]
 800f652:	1a9b      	subs	r3, r3, r2
 800f654:	42ab      	cmp	r3, r5
 800f656:	dc26      	bgt.n	800f6a6 <_printf_common+0x96>
 800f658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f65c:	1e13      	subs	r3, r2, #0
 800f65e:	6822      	ldr	r2, [r4, #0]
 800f660:	bf18      	it	ne
 800f662:	2301      	movne	r3, #1
 800f664:	0692      	lsls	r2, r2, #26
 800f666:	d42b      	bmi.n	800f6c0 <_printf_common+0xb0>
 800f668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f66c:	4649      	mov	r1, r9
 800f66e:	4638      	mov	r0, r7
 800f670:	47c0      	blx	r8
 800f672:	3001      	adds	r0, #1
 800f674:	d01e      	beq.n	800f6b4 <_printf_common+0xa4>
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	68e5      	ldr	r5, [r4, #12]
 800f67a:	6832      	ldr	r2, [r6, #0]
 800f67c:	f003 0306 	and.w	r3, r3, #6
 800f680:	2b04      	cmp	r3, #4
 800f682:	bf08      	it	eq
 800f684:	1aad      	subeq	r5, r5, r2
 800f686:	68a3      	ldr	r3, [r4, #8]
 800f688:	6922      	ldr	r2, [r4, #16]
 800f68a:	bf0c      	ite	eq
 800f68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f690:	2500      	movne	r5, #0
 800f692:	4293      	cmp	r3, r2
 800f694:	bfc4      	itt	gt
 800f696:	1a9b      	subgt	r3, r3, r2
 800f698:	18ed      	addgt	r5, r5, r3
 800f69a:	2600      	movs	r6, #0
 800f69c:	341a      	adds	r4, #26
 800f69e:	42b5      	cmp	r5, r6
 800f6a0:	d11a      	bne.n	800f6d8 <_printf_common+0xc8>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e008      	b.n	800f6b8 <_printf_common+0xa8>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	4652      	mov	r2, sl
 800f6aa:	4649      	mov	r1, r9
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	47c0      	blx	r8
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d103      	bne.n	800f6bc <_printf_common+0xac>
 800f6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6bc:	3501      	adds	r5, #1
 800f6be:	e7c6      	b.n	800f64e <_printf_common+0x3e>
 800f6c0:	18e1      	adds	r1, r4, r3
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	2030      	movs	r0, #48	; 0x30
 800f6c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6ca:	4422      	add	r2, r4
 800f6cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	e7c7      	b.n	800f668 <_printf_common+0x58>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	4622      	mov	r2, r4
 800f6dc:	4649      	mov	r1, r9
 800f6de:	4638      	mov	r0, r7
 800f6e0:	47c0      	blx	r8
 800f6e2:	3001      	adds	r0, #1
 800f6e4:	d0e6      	beq.n	800f6b4 <_printf_common+0xa4>
 800f6e6:	3601      	adds	r6, #1
 800f6e8:	e7d9      	b.n	800f69e <_printf_common+0x8e>
	...

0800f6ec <_printf_i>:
 800f6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f0:	7e0f      	ldrb	r7, [r1, #24]
 800f6f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6f4:	2f78      	cmp	r7, #120	; 0x78
 800f6f6:	4691      	mov	r9, r2
 800f6f8:	4680      	mov	r8, r0
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	469a      	mov	sl, r3
 800f6fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f702:	d807      	bhi.n	800f714 <_printf_i+0x28>
 800f704:	2f62      	cmp	r7, #98	; 0x62
 800f706:	d80a      	bhi.n	800f71e <_printf_i+0x32>
 800f708:	2f00      	cmp	r7, #0
 800f70a:	f000 80d8 	beq.w	800f8be <_printf_i+0x1d2>
 800f70e:	2f58      	cmp	r7, #88	; 0x58
 800f710:	f000 80a3 	beq.w	800f85a <_printf_i+0x16e>
 800f714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f71c:	e03a      	b.n	800f794 <_printf_i+0xa8>
 800f71e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f722:	2b15      	cmp	r3, #21
 800f724:	d8f6      	bhi.n	800f714 <_printf_i+0x28>
 800f726:	a101      	add	r1, pc, #4	; (adr r1, 800f72c <_printf_i+0x40>)
 800f728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f72c:	0800f785 	.word	0x0800f785
 800f730:	0800f799 	.word	0x0800f799
 800f734:	0800f715 	.word	0x0800f715
 800f738:	0800f715 	.word	0x0800f715
 800f73c:	0800f715 	.word	0x0800f715
 800f740:	0800f715 	.word	0x0800f715
 800f744:	0800f799 	.word	0x0800f799
 800f748:	0800f715 	.word	0x0800f715
 800f74c:	0800f715 	.word	0x0800f715
 800f750:	0800f715 	.word	0x0800f715
 800f754:	0800f715 	.word	0x0800f715
 800f758:	0800f8a5 	.word	0x0800f8a5
 800f75c:	0800f7c9 	.word	0x0800f7c9
 800f760:	0800f887 	.word	0x0800f887
 800f764:	0800f715 	.word	0x0800f715
 800f768:	0800f715 	.word	0x0800f715
 800f76c:	0800f8c7 	.word	0x0800f8c7
 800f770:	0800f715 	.word	0x0800f715
 800f774:	0800f7c9 	.word	0x0800f7c9
 800f778:	0800f715 	.word	0x0800f715
 800f77c:	0800f715 	.word	0x0800f715
 800f780:	0800f88f 	.word	0x0800f88f
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	1d1a      	adds	r2, r3, #4
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	602a      	str	r2, [r5, #0]
 800f78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f794:	2301      	movs	r3, #1
 800f796:	e0a3      	b.n	800f8e0 <_printf_i+0x1f4>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	6829      	ldr	r1, [r5, #0]
 800f79c:	0606      	lsls	r6, r0, #24
 800f79e:	f101 0304 	add.w	r3, r1, #4
 800f7a2:	d50a      	bpl.n	800f7ba <_printf_i+0xce>
 800f7a4:	680e      	ldr	r6, [r1, #0]
 800f7a6:	602b      	str	r3, [r5, #0]
 800f7a8:	2e00      	cmp	r6, #0
 800f7aa:	da03      	bge.n	800f7b4 <_printf_i+0xc8>
 800f7ac:	232d      	movs	r3, #45	; 0x2d
 800f7ae:	4276      	negs	r6, r6
 800f7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7b4:	485e      	ldr	r0, [pc, #376]	; (800f930 <_printf_i+0x244>)
 800f7b6:	230a      	movs	r3, #10
 800f7b8:	e019      	b.n	800f7ee <_printf_i+0x102>
 800f7ba:	680e      	ldr	r6, [r1, #0]
 800f7bc:	602b      	str	r3, [r5, #0]
 800f7be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f7c2:	bf18      	it	ne
 800f7c4:	b236      	sxthne	r6, r6
 800f7c6:	e7ef      	b.n	800f7a8 <_printf_i+0xbc>
 800f7c8:	682b      	ldr	r3, [r5, #0]
 800f7ca:	6820      	ldr	r0, [r4, #0]
 800f7cc:	1d19      	adds	r1, r3, #4
 800f7ce:	6029      	str	r1, [r5, #0]
 800f7d0:	0601      	lsls	r1, r0, #24
 800f7d2:	d501      	bpl.n	800f7d8 <_printf_i+0xec>
 800f7d4:	681e      	ldr	r6, [r3, #0]
 800f7d6:	e002      	b.n	800f7de <_printf_i+0xf2>
 800f7d8:	0646      	lsls	r6, r0, #25
 800f7da:	d5fb      	bpl.n	800f7d4 <_printf_i+0xe8>
 800f7dc:	881e      	ldrh	r6, [r3, #0]
 800f7de:	4854      	ldr	r0, [pc, #336]	; (800f930 <_printf_i+0x244>)
 800f7e0:	2f6f      	cmp	r7, #111	; 0x6f
 800f7e2:	bf0c      	ite	eq
 800f7e4:	2308      	moveq	r3, #8
 800f7e6:	230a      	movne	r3, #10
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7ee:	6865      	ldr	r5, [r4, #4]
 800f7f0:	60a5      	str	r5, [r4, #8]
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	bfa2      	ittt	ge
 800f7f6:	6821      	ldrge	r1, [r4, #0]
 800f7f8:	f021 0104 	bicge.w	r1, r1, #4
 800f7fc:	6021      	strge	r1, [r4, #0]
 800f7fe:	b90e      	cbnz	r6, 800f804 <_printf_i+0x118>
 800f800:	2d00      	cmp	r5, #0
 800f802:	d04d      	beq.n	800f8a0 <_printf_i+0x1b4>
 800f804:	4615      	mov	r5, r2
 800f806:	fbb6 f1f3 	udiv	r1, r6, r3
 800f80a:	fb03 6711 	mls	r7, r3, r1, r6
 800f80e:	5dc7      	ldrb	r7, [r0, r7]
 800f810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f814:	4637      	mov	r7, r6
 800f816:	42bb      	cmp	r3, r7
 800f818:	460e      	mov	r6, r1
 800f81a:	d9f4      	bls.n	800f806 <_printf_i+0x11a>
 800f81c:	2b08      	cmp	r3, #8
 800f81e:	d10b      	bne.n	800f838 <_printf_i+0x14c>
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	07de      	lsls	r6, r3, #31
 800f824:	d508      	bpl.n	800f838 <_printf_i+0x14c>
 800f826:	6923      	ldr	r3, [r4, #16]
 800f828:	6861      	ldr	r1, [r4, #4]
 800f82a:	4299      	cmp	r1, r3
 800f82c:	bfde      	ittt	le
 800f82e:	2330      	movle	r3, #48	; 0x30
 800f830:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f834:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f838:	1b52      	subs	r2, r2, r5
 800f83a:	6122      	str	r2, [r4, #16]
 800f83c:	f8cd a000 	str.w	sl, [sp]
 800f840:	464b      	mov	r3, r9
 800f842:	aa03      	add	r2, sp, #12
 800f844:	4621      	mov	r1, r4
 800f846:	4640      	mov	r0, r8
 800f848:	f7ff fee2 	bl	800f610 <_printf_common>
 800f84c:	3001      	adds	r0, #1
 800f84e:	d14c      	bne.n	800f8ea <_printf_i+0x1fe>
 800f850:	f04f 30ff 	mov.w	r0, #4294967295
 800f854:	b004      	add	sp, #16
 800f856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f85a:	4835      	ldr	r0, [pc, #212]	; (800f930 <_printf_i+0x244>)
 800f85c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f860:	6829      	ldr	r1, [r5, #0]
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	f851 6b04 	ldr.w	r6, [r1], #4
 800f868:	6029      	str	r1, [r5, #0]
 800f86a:	061d      	lsls	r5, r3, #24
 800f86c:	d514      	bpl.n	800f898 <_printf_i+0x1ac>
 800f86e:	07df      	lsls	r7, r3, #31
 800f870:	bf44      	itt	mi
 800f872:	f043 0320 	orrmi.w	r3, r3, #32
 800f876:	6023      	strmi	r3, [r4, #0]
 800f878:	b91e      	cbnz	r6, 800f882 <_printf_i+0x196>
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	f023 0320 	bic.w	r3, r3, #32
 800f880:	6023      	str	r3, [r4, #0]
 800f882:	2310      	movs	r3, #16
 800f884:	e7b0      	b.n	800f7e8 <_printf_i+0xfc>
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	f043 0320 	orr.w	r3, r3, #32
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	2378      	movs	r3, #120	; 0x78
 800f890:	4828      	ldr	r0, [pc, #160]	; (800f934 <_printf_i+0x248>)
 800f892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f896:	e7e3      	b.n	800f860 <_printf_i+0x174>
 800f898:	0659      	lsls	r1, r3, #25
 800f89a:	bf48      	it	mi
 800f89c:	b2b6      	uxthmi	r6, r6
 800f89e:	e7e6      	b.n	800f86e <_printf_i+0x182>
 800f8a0:	4615      	mov	r5, r2
 800f8a2:	e7bb      	b.n	800f81c <_printf_i+0x130>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	6826      	ldr	r6, [r4, #0]
 800f8a8:	6961      	ldr	r1, [r4, #20]
 800f8aa:	1d18      	adds	r0, r3, #4
 800f8ac:	6028      	str	r0, [r5, #0]
 800f8ae:	0635      	lsls	r5, r6, #24
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	d501      	bpl.n	800f8b8 <_printf_i+0x1cc>
 800f8b4:	6019      	str	r1, [r3, #0]
 800f8b6:	e002      	b.n	800f8be <_printf_i+0x1d2>
 800f8b8:	0670      	lsls	r0, r6, #25
 800f8ba:	d5fb      	bpl.n	800f8b4 <_printf_i+0x1c8>
 800f8bc:	8019      	strh	r1, [r3, #0]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	6123      	str	r3, [r4, #16]
 800f8c2:	4615      	mov	r5, r2
 800f8c4:	e7ba      	b.n	800f83c <_printf_i+0x150>
 800f8c6:	682b      	ldr	r3, [r5, #0]
 800f8c8:	1d1a      	adds	r2, r3, #4
 800f8ca:	602a      	str	r2, [r5, #0]
 800f8cc:	681d      	ldr	r5, [r3, #0]
 800f8ce:	6862      	ldr	r2, [r4, #4]
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7f0 fc9c 	bl	8000210 <memchr>
 800f8d8:	b108      	cbz	r0, 800f8de <_printf_i+0x1f2>
 800f8da:	1b40      	subs	r0, r0, r5
 800f8dc:	6060      	str	r0, [r4, #4]
 800f8de:	6863      	ldr	r3, [r4, #4]
 800f8e0:	6123      	str	r3, [r4, #16]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8e8:	e7a8      	b.n	800f83c <_printf_i+0x150>
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	462a      	mov	r2, r5
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	47d0      	blx	sl
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	d0ab      	beq.n	800f850 <_printf_i+0x164>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	079b      	lsls	r3, r3, #30
 800f8fc:	d413      	bmi.n	800f926 <_printf_i+0x23a>
 800f8fe:	68e0      	ldr	r0, [r4, #12]
 800f900:	9b03      	ldr	r3, [sp, #12]
 800f902:	4298      	cmp	r0, r3
 800f904:	bfb8      	it	lt
 800f906:	4618      	movlt	r0, r3
 800f908:	e7a4      	b.n	800f854 <_printf_i+0x168>
 800f90a:	2301      	movs	r3, #1
 800f90c:	4632      	mov	r2, r6
 800f90e:	4649      	mov	r1, r9
 800f910:	4640      	mov	r0, r8
 800f912:	47d0      	blx	sl
 800f914:	3001      	adds	r0, #1
 800f916:	d09b      	beq.n	800f850 <_printf_i+0x164>
 800f918:	3501      	adds	r5, #1
 800f91a:	68e3      	ldr	r3, [r4, #12]
 800f91c:	9903      	ldr	r1, [sp, #12]
 800f91e:	1a5b      	subs	r3, r3, r1
 800f920:	42ab      	cmp	r3, r5
 800f922:	dcf2      	bgt.n	800f90a <_printf_i+0x21e>
 800f924:	e7eb      	b.n	800f8fe <_printf_i+0x212>
 800f926:	2500      	movs	r5, #0
 800f928:	f104 0619 	add.w	r6, r4, #25
 800f92c:	e7f5      	b.n	800f91a <_printf_i+0x22e>
 800f92e:	bf00      	nop
 800f930:	08010c7f 	.word	0x08010c7f
 800f934:	08010c90 	.word	0x08010c90

0800f938 <_sbrk_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	4d06      	ldr	r5, [pc, #24]	; (800f954 <_sbrk_r+0x1c>)
 800f93c:	2300      	movs	r3, #0
 800f93e:	4604      	mov	r4, r0
 800f940:	4608      	mov	r0, r1
 800f942:	602b      	str	r3, [r5, #0]
 800f944:	f7f3 f84e 	bl	80029e4 <_sbrk>
 800f948:	1c43      	adds	r3, r0, #1
 800f94a:	d102      	bne.n	800f952 <_sbrk_r+0x1a>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	b103      	cbz	r3, 800f952 <_sbrk_r+0x1a>
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	20003d00 	.word	0x20003d00

0800f958 <__swbuf_r>:
 800f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95a:	460e      	mov	r6, r1
 800f95c:	4614      	mov	r4, r2
 800f95e:	4605      	mov	r5, r0
 800f960:	b118      	cbz	r0, 800f96a <__swbuf_r+0x12>
 800f962:	6983      	ldr	r3, [r0, #24]
 800f964:	b90b      	cbnz	r3, 800f96a <__swbuf_r+0x12>
 800f966:	f000 f9d9 	bl	800fd1c <__sinit>
 800f96a:	4b21      	ldr	r3, [pc, #132]	; (800f9f0 <__swbuf_r+0x98>)
 800f96c:	429c      	cmp	r4, r3
 800f96e:	d12b      	bne.n	800f9c8 <__swbuf_r+0x70>
 800f970:	686c      	ldr	r4, [r5, #4]
 800f972:	69a3      	ldr	r3, [r4, #24]
 800f974:	60a3      	str	r3, [r4, #8]
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	071a      	lsls	r2, r3, #28
 800f97a:	d52f      	bpl.n	800f9dc <__swbuf_r+0x84>
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	b36b      	cbz	r3, 800f9dc <__swbuf_r+0x84>
 800f980:	6923      	ldr	r3, [r4, #16]
 800f982:	6820      	ldr	r0, [r4, #0]
 800f984:	1ac0      	subs	r0, r0, r3
 800f986:	6963      	ldr	r3, [r4, #20]
 800f988:	b2f6      	uxtb	r6, r6
 800f98a:	4283      	cmp	r3, r0
 800f98c:	4637      	mov	r7, r6
 800f98e:	dc04      	bgt.n	800f99a <__swbuf_r+0x42>
 800f990:	4621      	mov	r1, r4
 800f992:	4628      	mov	r0, r5
 800f994:	f000 f92e 	bl	800fbf4 <_fflush_r>
 800f998:	bb30      	cbnz	r0, 800f9e8 <__swbuf_r+0x90>
 800f99a:	68a3      	ldr	r3, [r4, #8]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	60a3      	str	r3, [r4, #8]
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	1c5a      	adds	r2, r3, #1
 800f9a4:	6022      	str	r2, [r4, #0]
 800f9a6:	701e      	strb	r6, [r3, #0]
 800f9a8:	6963      	ldr	r3, [r4, #20]
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	4283      	cmp	r3, r0
 800f9ae:	d004      	beq.n	800f9ba <__swbuf_r+0x62>
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	07db      	lsls	r3, r3, #31
 800f9b4:	d506      	bpl.n	800f9c4 <__swbuf_r+0x6c>
 800f9b6:	2e0a      	cmp	r6, #10
 800f9b8:	d104      	bne.n	800f9c4 <__swbuf_r+0x6c>
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 f919 	bl	800fbf4 <_fflush_r>
 800f9c2:	b988      	cbnz	r0, 800f9e8 <__swbuf_r+0x90>
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c8:	4b0a      	ldr	r3, [pc, #40]	; (800f9f4 <__swbuf_r+0x9c>)
 800f9ca:	429c      	cmp	r4, r3
 800f9cc:	d101      	bne.n	800f9d2 <__swbuf_r+0x7a>
 800f9ce:	68ac      	ldr	r4, [r5, #8]
 800f9d0:	e7cf      	b.n	800f972 <__swbuf_r+0x1a>
 800f9d2:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <__swbuf_r+0xa0>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	bf08      	it	eq
 800f9d8:	68ec      	ldreq	r4, [r5, #12]
 800f9da:	e7ca      	b.n	800f972 <__swbuf_r+0x1a>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 f80c 	bl	800f9fc <__swsetup_r>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d0cb      	beq.n	800f980 <__swbuf_r+0x28>
 800f9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800f9ec:	e7ea      	b.n	800f9c4 <__swbuf_r+0x6c>
 800f9ee:	bf00      	nop
 800f9f0:	08010cc4 	.word	0x08010cc4
 800f9f4:	08010ce4 	.word	0x08010ce4
 800f9f8:	08010ca4 	.word	0x08010ca4

0800f9fc <__swsetup_r>:
 800f9fc:	4b32      	ldr	r3, [pc, #200]	; (800fac8 <__swsetup_r+0xcc>)
 800f9fe:	b570      	push	{r4, r5, r6, lr}
 800fa00:	681d      	ldr	r5, [r3, #0]
 800fa02:	4606      	mov	r6, r0
 800fa04:	460c      	mov	r4, r1
 800fa06:	b125      	cbz	r5, 800fa12 <__swsetup_r+0x16>
 800fa08:	69ab      	ldr	r3, [r5, #24]
 800fa0a:	b913      	cbnz	r3, 800fa12 <__swsetup_r+0x16>
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f000 f985 	bl	800fd1c <__sinit>
 800fa12:	4b2e      	ldr	r3, [pc, #184]	; (800facc <__swsetup_r+0xd0>)
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d10f      	bne.n	800fa38 <__swsetup_r+0x3c>
 800fa18:	686c      	ldr	r4, [r5, #4]
 800fa1a:	89a3      	ldrh	r3, [r4, #12]
 800fa1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa20:	0719      	lsls	r1, r3, #28
 800fa22:	d42c      	bmi.n	800fa7e <__swsetup_r+0x82>
 800fa24:	06dd      	lsls	r5, r3, #27
 800fa26:	d411      	bmi.n	800fa4c <__swsetup_r+0x50>
 800fa28:	2309      	movs	r3, #9
 800fa2a:	6033      	str	r3, [r6, #0]
 800fa2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	f04f 30ff 	mov.w	r0, #4294967295
 800fa36:	e03e      	b.n	800fab6 <__swsetup_r+0xba>
 800fa38:	4b25      	ldr	r3, [pc, #148]	; (800fad0 <__swsetup_r+0xd4>)
 800fa3a:	429c      	cmp	r4, r3
 800fa3c:	d101      	bne.n	800fa42 <__swsetup_r+0x46>
 800fa3e:	68ac      	ldr	r4, [r5, #8]
 800fa40:	e7eb      	b.n	800fa1a <__swsetup_r+0x1e>
 800fa42:	4b24      	ldr	r3, [pc, #144]	; (800fad4 <__swsetup_r+0xd8>)
 800fa44:	429c      	cmp	r4, r3
 800fa46:	bf08      	it	eq
 800fa48:	68ec      	ldreq	r4, [r5, #12]
 800fa4a:	e7e6      	b.n	800fa1a <__swsetup_r+0x1e>
 800fa4c:	0758      	lsls	r0, r3, #29
 800fa4e:	d512      	bpl.n	800fa76 <__swsetup_r+0x7a>
 800fa50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa52:	b141      	cbz	r1, 800fa66 <__swsetup_r+0x6a>
 800fa54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa58:	4299      	cmp	r1, r3
 800fa5a:	d002      	beq.n	800fa62 <__swsetup_r+0x66>
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f7ff fa41 	bl	800eee4 <_free_r>
 800fa62:	2300      	movs	r3, #0
 800fa64:	6363      	str	r3, [r4, #52]	; 0x34
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa6c:	81a3      	strh	r3, [r4, #12]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	6063      	str	r3, [r4, #4]
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	f043 0308 	orr.w	r3, r3, #8
 800fa7c:	81a3      	strh	r3, [r4, #12]
 800fa7e:	6923      	ldr	r3, [r4, #16]
 800fa80:	b94b      	cbnz	r3, 800fa96 <__swsetup_r+0x9a>
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa8c:	d003      	beq.n	800fa96 <__swsetup_r+0x9a>
 800fa8e:	4621      	mov	r1, r4
 800fa90:	4630      	mov	r0, r6
 800fa92:	f000 fa09 	bl	800fea8 <__smakebuf_r>
 800fa96:	89a0      	ldrh	r0, [r4, #12]
 800fa98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa9c:	f010 0301 	ands.w	r3, r0, #1
 800faa0:	d00a      	beq.n	800fab8 <__swsetup_r+0xbc>
 800faa2:	2300      	movs	r3, #0
 800faa4:	60a3      	str	r3, [r4, #8]
 800faa6:	6963      	ldr	r3, [r4, #20]
 800faa8:	425b      	negs	r3, r3
 800faaa:	61a3      	str	r3, [r4, #24]
 800faac:	6923      	ldr	r3, [r4, #16]
 800faae:	b943      	cbnz	r3, 800fac2 <__swsetup_r+0xc6>
 800fab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fab4:	d1ba      	bne.n	800fa2c <__swsetup_r+0x30>
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
 800fab8:	0781      	lsls	r1, r0, #30
 800faba:	bf58      	it	pl
 800fabc:	6963      	ldrpl	r3, [r4, #20]
 800fabe:	60a3      	str	r3, [r4, #8]
 800fac0:	e7f4      	b.n	800faac <__swsetup_r+0xb0>
 800fac2:	2000      	movs	r0, #0
 800fac4:	e7f7      	b.n	800fab6 <__swsetup_r+0xba>
 800fac6:	bf00      	nop
 800fac8:	2000013c 	.word	0x2000013c
 800facc:	08010cc4 	.word	0x08010cc4
 800fad0:	08010ce4 	.word	0x08010ce4
 800fad4:	08010ca4 	.word	0x08010ca4

0800fad8 <abort>:
 800fad8:	b508      	push	{r3, lr}
 800fada:	2006      	movs	r0, #6
 800fadc:	f000 fab0 	bl	8010040 <raise>
 800fae0:	2001      	movs	r0, #1
 800fae2:	f7f2 ff07 	bl	80028f4 <_exit>
	...

0800fae8 <__sflush_r>:
 800fae8:	898a      	ldrh	r2, [r1, #12]
 800faea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faee:	4605      	mov	r5, r0
 800faf0:	0710      	lsls	r0, r2, #28
 800faf2:	460c      	mov	r4, r1
 800faf4:	d458      	bmi.n	800fba8 <__sflush_r+0xc0>
 800faf6:	684b      	ldr	r3, [r1, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dc05      	bgt.n	800fb08 <__sflush_r+0x20>
 800fafc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	dc02      	bgt.n	800fb08 <__sflush_r+0x20>
 800fb02:	2000      	movs	r0, #0
 800fb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb0a:	2e00      	cmp	r6, #0
 800fb0c:	d0f9      	beq.n	800fb02 <__sflush_r+0x1a>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb14:	682f      	ldr	r7, [r5, #0]
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	d032      	beq.n	800fb80 <__sflush_r+0x98>
 800fb1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	075a      	lsls	r2, r3, #29
 800fb20:	d505      	bpl.n	800fb2e <__sflush_r+0x46>
 800fb22:	6863      	ldr	r3, [r4, #4]
 800fb24:	1ac0      	subs	r0, r0, r3
 800fb26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb28:	b10b      	cbz	r3, 800fb2e <__sflush_r+0x46>
 800fb2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb2c:	1ac0      	subs	r0, r0, r3
 800fb2e:	2300      	movs	r3, #0
 800fb30:	4602      	mov	r2, r0
 800fb32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb34:	6a21      	ldr	r1, [r4, #32]
 800fb36:	4628      	mov	r0, r5
 800fb38:	47b0      	blx	r6
 800fb3a:	1c43      	adds	r3, r0, #1
 800fb3c:	89a3      	ldrh	r3, [r4, #12]
 800fb3e:	d106      	bne.n	800fb4e <__sflush_r+0x66>
 800fb40:	6829      	ldr	r1, [r5, #0]
 800fb42:	291d      	cmp	r1, #29
 800fb44:	d82c      	bhi.n	800fba0 <__sflush_r+0xb8>
 800fb46:	4a2a      	ldr	r2, [pc, #168]	; (800fbf0 <__sflush_r+0x108>)
 800fb48:	40ca      	lsrs	r2, r1
 800fb4a:	07d6      	lsls	r6, r2, #31
 800fb4c:	d528      	bpl.n	800fba0 <__sflush_r+0xb8>
 800fb4e:	2200      	movs	r2, #0
 800fb50:	6062      	str	r2, [r4, #4]
 800fb52:	04d9      	lsls	r1, r3, #19
 800fb54:	6922      	ldr	r2, [r4, #16]
 800fb56:	6022      	str	r2, [r4, #0]
 800fb58:	d504      	bpl.n	800fb64 <__sflush_r+0x7c>
 800fb5a:	1c42      	adds	r2, r0, #1
 800fb5c:	d101      	bne.n	800fb62 <__sflush_r+0x7a>
 800fb5e:	682b      	ldr	r3, [r5, #0]
 800fb60:	b903      	cbnz	r3, 800fb64 <__sflush_r+0x7c>
 800fb62:	6560      	str	r0, [r4, #84]	; 0x54
 800fb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb66:	602f      	str	r7, [r5, #0]
 800fb68:	2900      	cmp	r1, #0
 800fb6a:	d0ca      	beq.n	800fb02 <__sflush_r+0x1a>
 800fb6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb70:	4299      	cmp	r1, r3
 800fb72:	d002      	beq.n	800fb7a <__sflush_r+0x92>
 800fb74:	4628      	mov	r0, r5
 800fb76:	f7ff f9b5 	bl	800eee4 <_free_r>
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	6360      	str	r0, [r4, #52]	; 0x34
 800fb7e:	e7c1      	b.n	800fb04 <__sflush_r+0x1c>
 800fb80:	6a21      	ldr	r1, [r4, #32]
 800fb82:	2301      	movs	r3, #1
 800fb84:	4628      	mov	r0, r5
 800fb86:	47b0      	blx	r6
 800fb88:	1c41      	adds	r1, r0, #1
 800fb8a:	d1c7      	bne.n	800fb1c <__sflush_r+0x34>
 800fb8c:	682b      	ldr	r3, [r5, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0c4      	beq.n	800fb1c <__sflush_r+0x34>
 800fb92:	2b1d      	cmp	r3, #29
 800fb94:	d001      	beq.n	800fb9a <__sflush_r+0xb2>
 800fb96:	2b16      	cmp	r3, #22
 800fb98:	d101      	bne.n	800fb9e <__sflush_r+0xb6>
 800fb9a:	602f      	str	r7, [r5, #0]
 800fb9c:	e7b1      	b.n	800fb02 <__sflush_r+0x1a>
 800fb9e:	89a3      	ldrh	r3, [r4, #12]
 800fba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba4:	81a3      	strh	r3, [r4, #12]
 800fba6:	e7ad      	b.n	800fb04 <__sflush_r+0x1c>
 800fba8:	690f      	ldr	r7, [r1, #16]
 800fbaa:	2f00      	cmp	r7, #0
 800fbac:	d0a9      	beq.n	800fb02 <__sflush_r+0x1a>
 800fbae:	0793      	lsls	r3, r2, #30
 800fbb0:	680e      	ldr	r6, [r1, #0]
 800fbb2:	bf08      	it	eq
 800fbb4:	694b      	ldreq	r3, [r1, #20]
 800fbb6:	600f      	str	r7, [r1, #0]
 800fbb8:	bf18      	it	ne
 800fbba:	2300      	movne	r3, #0
 800fbbc:	eba6 0807 	sub.w	r8, r6, r7
 800fbc0:	608b      	str	r3, [r1, #8]
 800fbc2:	f1b8 0f00 	cmp.w	r8, #0
 800fbc6:	dd9c      	ble.n	800fb02 <__sflush_r+0x1a>
 800fbc8:	6a21      	ldr	r1, [r4, #32]
 800fbca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbcc:	4643      	mov	r3, r8
 800fbce:	463a      	mov	r2, r7
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	47b0      	blx	r6
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	dc06      	bgt.n	800fbe6 <__sflush_r+0xfe>
 800fbd8:	89a3      	ldrh	r3, [r4, #12]
 800fbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbde:	81a3      	strh	r3, [r4, #12]
 800fbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe4:	e78e      	b.n	800fb04 <__sflush_r+0x1c>
 800fbe6:	4407      	add	r7, r0
 800fbe8:	eba8 0800 	sub.w	r8, r8, r0
 800fbec:	e7e9      	b.n	800fbc2 <__sflush_r+0xda>
 800fbee:	bf00      	nop
 800fbf0:	20400001 	.word	0x20400001

0800fbf4 <_fflush_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	690b      	ldr	r3, [r1, #16]
 800fbf8:	4605      	mov	r5, r0
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	b913      	cbnz	r3, 800fc04 <_fflush_r+0x10>
 800fbfe:	2500      	movs	r5, #0
 800fc00:	4628      	mov	r0, r5
 800fc02:	bd38      	pop	{r3, r4, r5, pc}
 800fc04:	b118      	cbz	r0, 800fc0e <_fflush_r+0x1a>
 800fc06:	6983      	ldr	r3, [r0, #24]
 800fc08:	b90b      	cbnz	r3, 800fc0e <_fflush_r+0x1a>
 800fc0a:	f000 f887 	bl	800fd1c <__sinit>
 800fc0e:	4b14      	ldr	r3, [pc, #80]	; (800fc60 <_fflush_r+0x6c>)
 800fc10:	429c      	cmp	r4, r3
 800fc12:	d11b      	bne.n	800fc4c <_fflush_r+0x58>
 800fc14:	686c      	ldr	r4, [r5, #4]
 800fc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d0ef      	beq.n	800fbfe <_fflush_r+0xa>
 800fc1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc20:	07d0      	lsls	r0, r2, #31
 800fc22:	d404      	bmi.n	800fc2e <_fflush_r+0x3a>
 800fc24:	0599      	lsls	r1, r3, #22
 800fc26:	d402      	bmi.n	800fc2e <_fflush_r+0x3a>
 800fc28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc2a:	f000 f915 	bl	800fe58 <__retarget_lock_acquire_recursive>
 800fc2e:	4628      	mov	r0, r5
 800fc30:	4621      	mov	r1, r4
 800fc32:	f7ff ff59 	bl	800fae8 <__sflush_r>
 800fc36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc38:	07da      	lsls	r2, r3, #31
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	d4e0      	bmi.n	800fc00 <_fflush_r+0xc>
 800fc3e:	89a3      	ldrh	r3, [r4, #12]
 800fc40:	059b      	lsls	r3, r3, #22
 800fc42:	d4dd      	bmi.n	800fc00 <_fflush_r+0xc>
 800fc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc46:	f000 f908 	bl	800fe5a <__retarget_lock_release_recursive>
 800fc4a:	e7d9      	b.n	800fc00 <_fflush_r+0xc>
 800fc4c:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <_fflush_r+0x70>)
 800fc4e:	429c      	cmp	r4, r3
 800fc50:	d101      	bne.n	800fc56 <_fflush_r+0x62>
 800fc52:	68ac      	ldr	r4, [r5, #8]
 800fc54:	e7df      	b.n	800fc16 <_fflush_r+0x22>
 800fc56:	4b04      	ldr	r3, [pc, #16]	; (800fc68 <_fflush_r+0x74>)
 800fc58:	429c      	cmp	r4, r3
 800fc5a:	bf08      	it	eq
 800fc5c:	68ec      	ldreq	r4, [r5, #12]
 800fc5e:	e7da      	b.n	800fc16 <_fflush_r+0x22>
 800fc60:	08010cc4 	.word	0x08010cc4
 800fc64:	08010ce4 	.word	0x08010ce4
 800fc68:	08010ca4 	.word	0x08010ca4

0800fc6c <std>:
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	b510      	push	{r4, lr}
 800fc70:	4604      	mov	r4, r0
 800fc72:	e9c0 3300 	strd	r3, r3, [r0]
 800fc76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc7a:	6083      	str	r3, [r0, #8]
 800fc7c:	8181      	strh	r1, [r0, #12]
 800fc7e:	6643      	str	r3, [r0, #100]	; 0x64
 800fc80:	81c2      	strh	r2, [r0, #14]
 800fc82:	6183      	str	r3, [r0, #24]
 800fc84:	4619      	mov	r1, r3
 800fc86:	2208      	movs	r2, #8
 800fc88:	305c      	adds	r0, #92	; 0x5c
 800fc8a:	f7fe ff85 	bl	800eb98 <memset>
 800fc8e:	4b05      	ldr	r3, [pc, #20]	; (800fca4 <std+0x38>)
 800fc90:	6263      	str	r3, [r4, #36]	; 0x24
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <std+0x3c>)
 800fc94:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc96:	4b05      	ldr	r3, [pc, #20]	; (800fcac <std+0x40>)
 800fc98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc9a:	4b05      	ldr	r3, [pc, #20]	; (800fcb0 <std+0x44>)
 800fc9c:	6224      	str	r4, [r4, #32]
 800fc9e:	6323      	str	r3, [r4, #48]	; 0x30
 800fca0:	bd10      	pop	{r4, pc}
 800fca2:	bf00      	nop
 800fca4:	08010079 	.word	0x08010079
 800fca8:	0801009b 	.word	0x0801009b
 800fcac:	080100d3 	.word	0x080100d3
 800fcb0:	080100f7 	.word	0x080100f7

0800fcb4 <_cleanup_r>:
 800fcb4:	4901      	ldr	r1, [pc, #4]	; (800fcbc <_cleanup_r+0x8>)
 800fcb6:	f000 b8af 	b.w	800fe18 <_fwalk_reent>
 800fcba:	bf00      	nop
 800fcbc:	0800fbf5 	.word	0x0800fbf5

0800fcc0 <__sfmoreglue>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	2268      	movs	r2, #104	; 0x68
 800fcc4:	1e4d      	subs	r5, r1, #1
 800fcc6:	4355      	muls	r5, r2
 800fcc8:	460e      	mov	r6, r1
 800fcca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcce:	f7ff f975 	bl	800efbc <_malloc_r>
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	b140      	cbz	r0, 800fce8 <__sfmoreglue+0x28>
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	e9c0 1600 	strd	r1, r6, [r0]
 800fcdc:	300c      	adds	r0, #12
 800fcde:	60a0      	str	r0, [r4, #8]
 800fce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fce4:	f7fe ff58 	bl	800eb98 <memset>
 800fce8:	4620      	mov	r0, r4
 800fcea:	bd70      	pop	{r4, r5, r6, pc}

0800fcec <__sfp_lock_acquire>:
 800fcec:	4801      	ldr	r0, [pc, #4]	; (800fcf4 <__sfp_lock_acquire+0x8>)
 800fcee:	f000 b8b3 	b.w	800fe58 <__retarget_lock_acquire_recursive>
 800fcf2:	bf00      	nop
 800fcf4:	20003cfd 	.word	0x20003cfd

0800fcf8 <__sfp_lock_release>:
 800fcf8:	4801      	ldr	r0, [pc, #4]	; (800fd00 <__sfp_lock_release+0x8>)
 800fcfa:	f000 b8ae 	b.w	800fe5a <__retarget_lock_release_recursive>
 800fcfe:	bf00      	nop
 800fd00:	20003cfd 	.word	0x20003cfd

0800fd04 <__sinit_lock_acquire>:
 800fd04:	4801      	ldr	r0, [pc, #4]	; (800fd0c <__sinit_lock_acquire+0x8>)
 800fd06:	f000 b8a7 	b.w	800fe58 <__retarget_lock_acquire_recursive>
 800fd0a:	bf00      	nop
 800fd0c:	20003cfe 	.word	0x20003cfe

0800fd10 <__sinit_lock_release>:
 800fd10:	4801      	ldr	r0, [pc, #4]	; (800fd18 <__sinit_lock_release+0x8>)
 800fd12:	f000 b8a2 	b.w	800fe5a <__retarget_lock_release_recursive>
 800fd16:	bf00      	nop
 800fd18:	20003cfe 	.word	0x20003cfe

0800fd1c <__sinit>:
 800fd1c:	b510      	push	{r4, lr}
 800fd1e:	4604      	mov	r4, r0
 800fd20:	f7ff fff0 	bl	800fd04 <__sinit_lock_acquire>
 800fd24:	69a3      	ldr	r3, [r4, #24]
 800fd26:	b11b      	cbz	r3, 800fd30 <__sinit+0x14>
 800fd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd2c:	f7ff bff0 	b.w	800fd10 <__sinit_lock_release>
 800fd30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd34:	6523      	str	r3, [r4, #80]	; 0x50
 800fd36:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <__sinit+0x68>)
 800fd38:	4a13      	ldr	r2, [pc, #76]	; (800fd88 <__sinit+0x6c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd3e:	42a3      	cmp	r3, r4
 800fd40:	bf04      	itt	eq
 800fd42:	2301      	moveq	r3, #1
 800fd44:	61a3      	streq	r3, [r4, #24]
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 f820 	bl	800fd8c <__sfp>
 800fd4c:	6060      	str	r0, [r4, #4]
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 f81c 	bl	800fd8c <__sfp>
 800fd54:	60a0      	str	r0, [r4, #8]
 800fd56:	4620      	mov	r0, r4
 800fd58:	f000 f818 	bl	800fd8c <__sfp>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	60e0      	str	r0, [r4, #12]
 800fd60:	2104      	movs	r1, #4
 800fd62:	6860      	ldr	r0, [r4, #4]
 800fd64:	f7ff ff82 	bl	800fc6c <std>
 800fd68:	68a0      	ldr	r0, [r4, #8]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	2109      	movs	r1, #9
 800fd6e:	f7ff ff7d 	bl	800fc6c <std>
 800fd72:	68e0      	ldr	r0, [r4, #12]
 800fd74:	2202      	movs	r2, #2
 800fd76:	2112      	movs	r1, #18
 800fd78:	f7ff ff78 	bl	800fc6c <std>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	61a3      	str	r3, [r4, #24]
 800fd80:	e7d2      	b.n	800fd28 <__sinit+0xc>
 800fd82:	bf00      	nop
 800fd84:	08010a94 	.word	0x08010a94
 800fd88:	0800fcb5 	.word	0x0800fcb5

0800fd8c <__sfp>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	4607      	mov	r7, r0
 800fd90:	f7ff ffac 	bl	800fcec <__sfp_lock_acquire>
 800fd94:	4b1e      	ldr	r3, [pc, #120]	; (800fe10 <__sfp+0x84>)
 800fd96:	681e      	ldr	r6, [r3, #0]
 800fd98:	69b3      	ldr	r3, [r6, #24]
 800fd9a:	b913      	cbnz	r3, 800fda2 <__sfp+0x16>
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f7ff ffbd 	bl	800fd1c <__sinit>
 800fda2:	3648      	adds	r6, #72	; 0x48
 800fda4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	d503      	bpl.n	800fdb4 <__sfp+0x28>
 800fdac:	6833      	ldr	r3, [r6, #0]
 800fdae:	b30b      	cbz	r3, 800fdf4 <__sfp+0x68>
 800fdb0:	6836      	ldr	r6, [r6, #0]
 800fdb2:	e7f7      	b.n	800fda4 <__sfp+0x18>
 800fdb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fdb8:	b9d5      	cbnz	r5, 800fdf0 <__sfp+0x64>
 800fdba:	4b16      	ldr	r3, [pc, #88]	; (800fe14 <__sfp+0x88>)
 800fdbc:	60e3      	str	r3, [r4, #12]
 800fdbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdc2:	6665      	str	r5, [r4, #100]	; 0x64
 800fdc4:	f000 f847 	bl	800fe56 <__retarget_lock_init_recursive>
 800fdc8:	f7ff ff96 	bl	800fcf8 <__sfp_lock_release>
 800fdcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdd4:	6025      	str	r5, [r4, #0]
 800fdd6:	61a5      	str	r5, [r4, #24]
 800fdd8:	2208      	movs	r2, #8
 800fdda:	4629      	mov	r1, r5
 800fddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fde0:	f7fe feda 	bl	800eb98 <memset>
 800fde4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fde8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdec:	4620      	mov	r0, r4
 800fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf0:	3468      	adds	r4, #104	; 0x68
 800fdf2:	e7d9      	b.n	800fda8 <__sfp+0x1c>
 800fdf4:	2104      	movs	r1, #4
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f7ff ff62 	bl	800fcc0 <__sfmoreglue>
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	6030      	str	r0, [r6, #0]
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d1d5      	bne.n	800fdb0 <__sfp+0x24>
 800fe04:	f7ff ff78 	bl	800fcf8 <__sfp_lock_release>
 800fe08:	230c      	movs	r3, #12
 800fe0a:	603b      	str	r3, [r7, #0]
 800fe0c:	e7ee      	b.n	800fdec <__sfp+0x60>
 800fe0e:	bf00      	nop
 800fe10:	08010a94 	.word	0x08010a94
 800fe14:	ffff0001 	.word	0xffff0001

0800fe18 <_fwalk_reent>:
 800fe18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	4688      	mov	r8, r1
 800fe20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe24:	2700      	movs	r7, #0
 800fe26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe2a:	f1b9 0901 	subs.w	r9, r9, #1
 800fe2e:	d505      	bpl.n	800fe3c <_fwalk_reent+0x24>
 800fe30:	6824      	ldr	r4, [r4, #0]
 800fe32:	2c00      	cmp	r4, #0
 800fe34:	d1f7      	bne.n	800fe26 <_fwalk_reent+0xe>
 800fe36:	4638      	mov	r0, r7
 800fe38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe3c:	89ab      	ldrh	r3, [r5, #12]
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d907      	bls.n	800fe52 <_fwalk_reent+0x3a>
 800fe42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe46:	3301      	adds	r3, #1
 800fe48:	d003      	beq.n	800fe52 <_fwalk_reent+0x3a>
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	47c0      	blx	r8
 800fe50:	4307      	orrs	r7, r0
 800fe52:	3568      	adds	r5, #104	; 0x68
 800fe54:	e7e9      	b.n	800fe2a <_fwalk_reent+0x12>

0800fe56 <__retarget_lock_init_recursive>:
 800fe56:	4770      	bx	lr

0800fe58 <__retarget_lock_acquire_recursive>:
 800fe58:	4770      	bx	lr

0800fe5a <__retarget_lock_release_recursive>:
 800fe5a:	4770      	bx	lr

0800fe5c <__swhatbuf_r>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	460e      	mov	r6, r1
 800fe60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe64:	2900      	cmp	r1, #0
 800fe66:	b096      	sub	sp, #88	; 0x58
 800fe68:	4614      	mov	r4, r2
 800fe6a:	461d      	mov	r5, r3
 800fe6c:	da08      	bge.n	800fe80 <__swhatbuf_r+0x24>
 800fe6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	602a      	str	r2, [r5, #0]
 800fe76:	061a      	lsls	r2, r3, #24
 800fe78:	d410      	bmi.n	800fe9c <__swhatbuf_r+0x40>
 800fe7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe7e:	e00e      	b.n	800fe9e <__swhatbuf_r+0x42>
 800fe80:	466a      	mov	r2, sp
 800fe82:	f000 f95f 	bl	8010144 <_fstat_r>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	dbf1      	blt.n	800fe6e <__swhatbuf_r+0x12>
 800fe8a:	9a01      	ldr	r2, [sp, #4]
 800fe8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe94:	425a      	negs	r2, r3
 800fe96:	415a      	adcs	r2, r3
 800fe98:	602a      	str	r2, [r5, #0]
 800fe9a:	e7ee      	b.n	800fe7a <__swhatbuf_r+0x1e>
 800fe9c:	2340      	movs	r3, #64	; 0x40
 800fe9e:	2000      	movs	r0, #0
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	b016      	add	sp, #88	; 0x58
 800fea4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fea8 <__smakebuf_r>:
 800fea8:	898b      	ldrh	r3, [r1, #12]
 800feaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800feac:	079d      	lsls	r5, r3, #30
 800feae:	4606      	mov	r6, r0
 800feb0:	460c      	mov	r4, r1
 800feb2:	d507      	bpl.n	800fec4 <__smakebuf_r+0x1c>
 800feb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800feb8:	6023      	str	r3, [r4, #0]
 800feba:	6123      	str	r3, [r4, #16]
 800febc:	2301      	movs	r3, #1
 800febe:	6163      	str	r3, [r4, #20]
 800fec0:	b002      	add	sp, #8
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	ab01      	add	r3, sp, #4
 800fec6:	466a      	mov	r2, sp
 800fec8:	f7ff ffc8 	bl	800fe5c <__swhatbuf_r>
 800fecc:	9900      	ldr	r1, [sp, #0]
 800fece:	4605      	mov	r5, r0
 800fed0:	4630      	mov	r0, r6
 800fed2:	f7ff f873 	bl	800efbc <_malloc_r>
 800fed6:	b948      	cbnz	r0, 800feec <__smakebuf_r+0x44>
 800fed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fedc:	059a      	lsls	r2, r3, #22
 800fede:	d4ef      	bmi.n	800fec0 <__smakebuf_r+0x18>
 800fee0:	f023 0303 	bic.w	r3, r3, #3
 800fee4:	f043 0302 	orr.w	r3, r3, #2
 800fee8:	81a3      	strh	r3, [r4, #12]
 800feea:	e7e3      	b.n	800feb4 <__smakebuf_r+0xc>
 800feec:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <__smakebuf_r+0x7c>)
 800feee:	62b3      	str	r3, [r6, #40]	; 0x28
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	6020      	str	r0, [r4, #0]
 800fef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef8:	81a3      	strh	r3, [r4, #12]
 800fefa:	9b00      	ldr	r3, [sp, #0]
 800fefc:	6163      	str	r3, [r4, #20]
 800fefe:	9b01      	ldr	r3, [sp, #4]
 800ff00:	6120      	str	r0, [r4, #16]
 800ff02:	b15b      	cbz	r3, 800ff1c <__smakebuf_r+0x74>
 800ff04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f000 f92d 	bl	8010168 <_isatty_r>
 800ff0e:	b128      	cbz	r0, 800ff1c <__smakebuf_r+0x74>
 800ff10:	89a3      	ldrh	r3, [r4, #12]
 800ff12:	f023 0303 	bic.w	r3, r3, #3
 800ff16:	f043 0301 	orr.w	r3, r3, #1
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	89a0      	ldrh	r0, [r4, #12]
 800ff1e:	4305      	orrs	r5, r0
 800ff20:	81a5      	strh	r5, [r4, #12]
 800ff22:	e7cd      	b.n	800fec0 <__smakebuf_r+0x18>
 800ff24:	0800fcb5 	.word	0x0800fcb5

0800ff28 <memcpy>:
 800ff28:	440a      	add	r2, r1
 800ff2a:	4291      	cmp	r1, r2
 800ff2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff30:	d100      	bne.n	800ff34 <memcpy+0xc>
 800ff32:	4770      	bx	lr
 800ff34:	b510      	push	{r4, lr}
 800ff36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff3e:	4291      	cmp	r1, r2
 800ff40:	d1f9      	bne.n	800ff36 <memcpy+0xe>
 800ff42:	bd10      	pop	{r4, pc}

0800ff44 <memmove>:
 800ff44:	4288      	cmp	r0, r1
 800ff46:	b510      	push	{r4, lr}
 800ff48:	eb01 0402 	add.w	r4, r1, r2
 800ff4c:	d902      	bls.n	800ff54 <memmove+0x10>
 800ff4e:	4284      	cmp	r4, r0
 800ff50:	4623      	mov	r3, r4
 800ff52:	d807      	bhi.n	800ff64 <memmove+0x20>
 800ff54:	1e43      	subs	r3, r0, #1
 800ff56:	42a1      	cmp	r1, r4
 800ff58:	d008      	beq.n	800ff6c <memmove+0x28>
 800ff5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff62:	e7f8      	b.n	800ff56 <memmove+0x12>
 800ff64:	4402      	add	r2, r0
 800ff66:	4601      	mov	r1, r0
 800ff68:	428a      	cmp	r2, r1
 800ff6a:	d100      	bne.n	800ff6e <memmove+0x2a>
 800ff6c:	bd10      	pop	{r4, pc}
 800ff6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff76:	e7f7      	b.n	800ff68 <memmove+0x24>

0800ff78 <__malloc_lock>:
 800ff78:	4801      	ldr	r0, [pc, #4]	; (800ff80 <__malloc_lock+0x8>)
 800ff7a:	f7ff bf6d 	b.w	800fe58 <__retarget_lock_acquire_recursive>
 800ff7e:	bf00      	nop
 800ff80:	20003cfc 	.word	0x20003cfc

0800ff84 <__malloc_unlock>:
 800ff84:	4801      	ldr	r0, [pc, #4]	; (800ff8c <__malloc_unlock+0x8>)
 800ff86:	f7ff bf68 	b.w	800fe5a <__retarget_lock_release_recursive>
 800ff8a:	bf00      	nop
 800ff8c:	20003cfc 	.word	0x20003cfc

0800ff90 <_realloc_r>:
 800ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff94:	4680      	mov	r8, r0
 800ff96:	4614      	mov	r4, r2
 800ff98:	460e      	mov	r6, r1
 800ff9a:	b921      	cbnz	r1, 800ffa6 <_realloc_r+0x16>
 800ff9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa0:	4611      	mov	r1, r2
 800ffa2:	f7ff b80b 	b.w	800efbc <_malloc_r>
 800ffa6:	b92a      	cbnz	r2, 800ffb4 <_realloc_r+0x24>
 800ffa8:	f7fe ff9c 	bl	800eee4 <_free_r>
 800ffac:	4625      	mov	r5, r4
 800ffae:	4628      	mov	r0, r5
 800ffb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb4:	f000 f8fa 	bl	80101ac <_malloc_usable_size_r>
 800ffb8:	4284      	cmp	r4, r0
 800ffba:	4607      	mov	r7, r0
 800ffbc:	d802      	bhi.n	800ffc4 <_realloc_r+0x34>
 800ffbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffc2:	d812      	bhi.n	800ffea <_realloc_r+0x5a>
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	4640      	mov	r0, r8
 800ffc8:	f7fe fff8 	bl	800efbc <_malloc_r>
 800ffcc:	4605      	mov	r5, r0
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0ed      	beq.n	800ffae <_realloc_r+0x1e>
 800ffd2:	42bc      	cmp	r4, r7
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	bf28      	it	cs
 800ffda:	463a      	movcs	r2, r7
 800ffdc:	f7ff ffa4 	bl	800ff28 <memcpy>
 800ffe0:	4631      	mov	r1, r6
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	f7fe ff7e 	bl	800eee4 <_free_r>
 800ffe8:	e7e1      	b.n	800ffae <_realloc_r+0x1e>
 800ffea:	4635      	mov	r5, r6
 800ffec:	e7df      	b.n	800ffae <_realloc_r+0x1e>

0800ffee <_raise_r>:
 800ffee:	291f      	cmp	r1, #31
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4604      	mov	r4, r0
 800fff4:	460d      	mov	r5, r1
 800fff6:	d904      	bls.n	8010002 <_raise_r+0x14>
 800fff8:	2316      	movs	r3, #22
 800fffa:	6003      	str	r3, [r0, #0]
 800fffc:	f04f 30ff 	mov.w	r0, #4294967295
 8010000:	bd38      	pop	{r3, r4, r5, pc}
 8010002:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010004:	b112      	cbz	r2, 801000c <_raise_r+0x1e>
 8010006:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801000a:	b94b      	cbnz	r3, 8010020 <_raise_r+0x32>
 801000c:	4620      	mov	r0, r4
 801000e:	f000 f831 	bl	8010074 <_getpid_r>
 8010012:	462a      	mov	r2, r5
 8010014:	4601      	mov	r1, r0
 8010016:	4620      	mov	r0, r4
 8010018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801001c:	f000 b818 	b.w	8010050 <_kill_r>
 8010020:	2b01      	cmp	r3, #1
 8010022:	d00a      	beq.n	801003a <_raise_r+0x4c>
 8010024:	1c59      	adds	r1, r3, #1
 8010026:	d103      	bne.n	8010030 <_raise_r+0x42>
 8010028:	2316      	movs	r3, #22
 801002a:	6003      	str	r3, [r0, #0]
 801002c:	2001      	movs	r0, #1
 801002e:	e7e7      	b.n	8010000 <_raise_r+0x12>
 8010030:	2400      	movs	r4, #0
 8010032:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010036:	4628      	mov	r0, r5
 8010038:	4798      	blx	r3
 801003a:	2000      	movs	r0, #0
 801003c:	e7e0      	b.n	8010000 <_raise_r+0x12>
	...

08010040 <raise>:
 8010040:	4b02      	ldr	r3, [pc, #8]	; (801004c <raise+0xc>)
 8010042:	4601      	mov	r1, r0
 8010044:	6818      	ldr	r0, [r3, #0]
 8010046:	f7ff bfd2 	b.w	800ffee <_raise_r>
 801004a:	bf00      	nop
 801004c:	2000013c 	.word	0x2000013c

08010050 <_kill_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4d07      	ldr	r5, [pc, #28]	; (8010070 <_kill_r+0x20>)
 8010054:	2300      	movs	r3, #0
 8010056:	4604      	mov	r4, r0
 8010058:	4608      	mov	r0, r1
 801005a:	4611      	mov	r1, r2
 801005c:	602b      	str	r3, [r5, #0]
 801005e:	f7f2 fc39 	bl	80028d4 <_kill>
 8010062:	1c43      	adds	r3, r0, #1
 8010064:	d102      	bne.n	801006c <_kill_r+0x1c>
 8010066:	682b      	ldr	r3, [r5, #0]
 8010068:	b103      	cbz	r3, 801006c <_kill_r+0x1c>
 801006a:	6023      	str	r3, [r4, #0]
 801006c:	bd38      	pop	{r3, r4, r5, pc}
 801006e:	bf00      	nop
 8010070:	20003d00 	.word	0x20003d00

08010074 <_getpid_r>:
 8010074:	f7f2 bc26 	b.w	80028c4 <_getpid>

08010078 <__sread>:
 8010078:	b510      	push	{r4, lr}
 801007a:	460c      	mov	r4, r1
 801007c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010080:	f000 f89c 	bl	80101bc <_read_r>
 8010084:	2800      	cmp	r0, #0
 8010086:	bfab      	itete	ge
 8010088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801008a:	89a3      	ldrhlt	r3, [r4, #12]
 801008c:	181b      	addge	r3, r3, r0
 801008e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010092:	bfac      	ite	ge
 8010094:	6563      	strge	r3, [r4, #84]	; 0x54
 8010096:	81a3      	strhlt	r3, [r4, #12]
 8010098:	bd10      	pop	{r4, pc}

0801009a <__swrite>:
 801009a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801009e:	461f      	mov	r7, r3
 80100a0:	898b      	ldrh	r3, [r1, #12]
 80100a2:	05db      	lsls	r3, r3, #23
 80100a4:	4605      	mov	r5, r0
 80100a6:	460c      	mov	r4, r1
 80100a8:	4616      	mov	r6, r2
 80100aa:	d505      	bpl.n	80100b8 <__swrite+0x1e>
 80100ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b0:	2302      	movs	r3, #2
 80100b2:	2200      	movs	r2, #0
 80100b4:	f000 f868 	bl	8010188 <_lseek_r>
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	4632      	mov	r2, r6
 80100c6:	463b      	mov	r3, r7
 80100c8:	4628      	mov	r0, r5
 80100ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100ce:	f000 b817 	b.w	8010100 <_write_r>

080100d2 <__sseek>:
 80100d2:	b510      	push	{r4, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100da:	f000 f855 	bl	8010188 <_lseek_r>
 80100de:	1c43      	adds	r3, r0, #1
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	bf15      	itete	ne
 80100e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80100e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100ee:	81a3      	strheq	r3, [r4, #12]
 80100f0:	bf18      	it	ne
 80100f2:	81a3      	strhne	r3, [r4, #12]
 80100f4:	bd10      	pop	{r4, pc}

080100f6 <__sclose>:
 80100f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100fa:	f000 b813 	b.w	8010124 <_close_r>
	...

08010100 <_write_r>:
 8010100:	b538      	push	{r3, r4, r5, lr}
 8010102:	4d07      	ldr	r5, [pc, #28]	; (8010120 <_write_r+0x20>)
 8010104:	4604      	mov	r4, r0
 8010106:	4608      	mov	r0, r1
 8010108:	4611      	mov	r1, r2
 801010a:	2200      	movs	r2, #0
 801010c:	602a      	str	r2, [r5, #0]
 801010e:	461a      	mov	r2, r3
 8010110:	f7f2 fc17 	bl	8002942 <_write>
 8010114:	1c43      	adds	r3, r0, #1
 8010116:	d102      	bne.n	801011e <_write_r+0x1e>
 8010118:	682b      	ldr	r3, [r5, #0]
 801011a:	b103      	cbz	r3, 801011e <_write_r+0x1e>
 801011c:	6023      	str	r3, [r4, #0]
 801011e:	bd38      	pop	{r3, r4, r5, pc}
 8010120:	20003d00 	.word	0x20003d00

08010124 <_close_r>:
 8010124:	b538      	push	{r3, r4, r5, lr}
 8010126:	4d06      	ldr	r5, [pc, #24]	; (8010140 <_close_r+0x1c>)
 8010128:	2300      	movs	r3, #0
 801012a:	4604      	mov	r4, r0
 801012c:	4608      	mov	r0, r1
 801012e:	602b      	str	r3, [r5, #0]
 8010130:	f7f2 fc23 	bl	800297a <_close>
 8010134:	1c43      	adds	r3, r0, #1
 8010136:	d102      	bne.n	801013e <_close_r+0x1a>
 8010138:	682b      	ldr	r3, [r5, #0]
 801013a:	b103      	cbz	r3, 801013e <_close_r+0x1a>
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	bd38      	pop	{r3, r4, r5, pc}
 8010140:	20003d00 	.word	0x20003d00

08010144 <_fstat_r>:
 8010144:	b538      	push	{r3, r4, r5, lr}
 8010146:	4d07      	ldr	r5, [pc, #28]	; (8010164 <_fstat_r+0x20>)
 8010148:	2300      	movs	r3, #0
 801014a:	4604      	mov	r4, r0
 801014c:	4608      	mov	r0, r1
 801014e:	4611      	mov	r1, r2
 8010150:	602b      	str	r3, [r5, #0]
 8010152:	f7f2 fc1e 	bl	8002992 <_fstat>
 8010156:	1c43      	adds	r3, r0, #1
 8010158:	d102      	bne.n	8010160 <_fstat_r+0x1c>
 801015a:	682b      	ldr	r3, [r5, #0]
 801015c:	b103      	cbz	r3, 8010160 <_fstat_r+0x1c>
 801015e:	6023      	str	r3, [r4, #0]
 8010160:	bd38      	pop	{r3, r4, r5, pc}
 8010162:	bf00      	nop
 8010164:	20003d00 	.word	0x20003d00

08010168 <_isatty_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4d06      	ldr	r5, [pc, #24]	; (8010184 <_isatty_r+0x1c>)
 801016c:	2300      	movs	r3, #0
 801016e:	4604      	mov	r4, r0
 8010170:	4608      	mov	r0, r1
 8010172:	602b      	str	r3, [r5, #0]
 8010174:	f7f2 fc1d 	bl	80029b2 <_isatty>
 8010178:	1c43      	adds	r3, r0, #1
 801017a:	d102      	bne.n	8010182 <_isatty_r+0x1a>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	b103      	cbz	r3, 8010182 <_isatty_r+0x1a>
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	bd38      	pop	{r3, r4, r5, pc}
 8010184:	20003d00 	.word	0x20003d00

08010188 <_lseek_r>:
 8010188:	b538      	push	{r3, r4, r5, lr}
 801018a:	4d07      	ldr	r5, [pc, #28]	; (80101a8 <_lseek_r+0x20>)
 801018c:	4604      	mov	r4, r0
 801018e:	4608      	mov	r0, r1
 8010190:	4611      	mov	r1, r2
 8010192:	2200      	movs	r2, #0
 8010194:	602a      	str	r2, [r5, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	f7f2 fc16 	bl	80029c8 <_lseek>
 801019c:	1c43      	adds	r3, r0, #1
 801019e:	d102      	bne.n	80101a6 <_lseek_r+0x1e>
 80101a0:	682b      	ldr	r3, [r5, #0]
 80101a2:	b103      	cbz	r3, 80101a6 <_lseek_r+0x1e>
 80101a4:	6023      	str	r3, [r4, #0]
 80101a6:	bd38      	pop	{r3, r4, r5, pc}
 80101a8:	20003d00 	.word	0x20003d00

080101ac <_malloc_usable_size_r>:
 80101ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b0:	1f18      	subs	r0, r3, #4
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	bfbc      	itt	lt
 80101b6:	580b      	ldrlt	r3, [r1, r0]
 80101b8:	18c0      	addlt	r0, r0, r3
 80101ba:	4770      	bx	lr

080101bc <_read_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4d07      	ldr	r5, [pc, #28]	; (80101dc <_read_r+0x20>)
 80101c0:	4604      	mov	r4, r0
 80101c2:	4608      	mov	r0, r1
 80101c4:	4611      	mov	r1, r2
 80101c6:	2200      	movs	r2, #0
 80101c8:	602a      	str	r2, [r5, #0]
 80101ca:	461a      	mov	r2, r3
 80101cc:	f7f2 fb9c 	bl	8002908 <_read>
 80101d0:	1c43      	adds	r3, r0, #1
 80101d2:	d102      	bne.n	80101da <_read_r+0x1e>
 80101d4:	682b      	ldr	r3, [r5, #0]
 80101d6:	b103      	cbz	r3, 80101da <_read_r+0x1e>
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	bd38      	pop	{r3, r4, r5, pc}
 80101dc:	20003d00 	.word	0x20003d00

080101e0 <_init>:
 80101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e2:	bf00      	nop
 80101e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101e6:	bc08      	pop	{r3}
 80101e8:	469e      	mov	lr, r3
 80101ea:	4770      	bx	lr

080101ec <_fini>:
 80101ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ee:	bf00      	nop
 80101f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101f2:	bc08      	pop	{r3}
 80101f4:	469e      	mov	lr, r3
 80101f6:	4770      	bx	lr
